

#pragma once



#pragma once





#pragma once





#pragma once





#pragma once




#pragma once






#pragma once






 


















































































  



















































































 










































    







    
    


        
            
        


    



















#pragma once





















































































































































































































































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros



























































































































































































































































































































































































































































































































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros
























































































































































































































































































































































































































































































































































































































































































































































































































































































































extern "C" {









































































































































































































































    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    
























































































































































































































































    
    





















































































}





















#pragma once


extern "C" {











































































































































































































































































































































}


















#pragma once



#pragma pack(push, 8)


extern "C" {







    
    
        typedef unsigned __int64  uintptr_t;
    





    
    


        typedef char* va_list;
    



    













    
    














































    void __cdecl __va_start(va_list* , ...);

    
    



    




} 



    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        void __vcrt_va_start_verify_argument_type() throw()
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
        }
    } 

    







#pragma pack(pop)







    



    























__pragma(pack(push, 8)) extern "C" {




    



















    






        
    





    






        
    









    







    
    





    









    







    





    



    
        
        
    









    typedef unsigned __int64 size_t;
    typedef __int64          ptrdiff_t;
    typedef __int64          intptr_t;







    typedef bool  __vcrt_bool;










    



    



    









    
        
    





    





    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper(__unaligned _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

        
    }












    


        




    







    
        
    













    void __cdecl __security_init_cookie(void);

    



        void __cdecl __security_check_cookie(  uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(  uintptr_t _StackCookie);
    


extern uintptr_t __security_cookie;


    
    
    


} __pragma(pack(pop))











#pragma once



































































































































































































































































































































__pragma(pack(push, 8)) extern "C" {









    


        
    







    



    


        
    







    



    









    






    














    


        
    





    





    





    










extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}



    typedef bool  __crt_bool;













    















    










    











        
    



    



    
        
    




























__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
__declspec(dllimport) void __cdecl _invoke_watson(
      wchar_t const*,
      wchar_t const*,
      wchar_t const*,
            unsigned int,
            uintptr_t);


    



        
        
        
        
        
        
        
        
        
        
        
        

    














    


        


    










    






        
    



    


        
    







































    







    





    


        


            
        
    













    


        



    



    
        
    





    
        
        
        
    





    
        
              
        


    





    
        
    





    
        
    







    









typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
      int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data*    locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t; 

typedef struct _Mbstatet
{ 
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;










    


        typedef __time64_t time_t;
    




    



    typedef size_t rsize_t;











    

        










        










        










        










        










        










        










        










        










        















        















        
















    




























































































    







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































        
        
        
        

        


        


        


        


        


        


        


        


        



        



        


        


        


        


        


        


        


        


        


        


        



        



        



        


        



        




        

        




        

        




        

        




        

        




        

        




        

        




        

        




        

    




} __pragma(pack(pop))











    




        
    



    


        
            
        


    



    


        
            
        


    



    




        
            
        


    



#pragma pack(push,8)





 
  


   
  
 

 
  
  
 

















 
  
   


    
   
  






 


 
  


   
  
 


 
  


   
  
 


 
  


   
  
 


 
  


   
  
 


 
  


   
  
 


 
































		

	







		
		


			
		
	


		




 
  
 










































	
	






		


			
		
	

	
	




		


			
		
	

	
	




		
	







	
		#pragma detect_mismatch("_MSC_VER", "1900")
	

	
		#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
	

	
		




			#pragma detect_mismatch("RuntimeLibrary", "MD_DynamicRelease")
		


	









	
		
	
































 


 
 

 









 









 









 







































 
 


 
 

 



























#pragma once























    
    



    










    


#pragma comment(lib, "msvcprt" "" "")






















 















 
  


   
  
 

 
  


   
  
 

 
  


   
  
 


 
  







   



    
   

  
 

 
  
 

 
  


   


     
   
  
 

 


























  
   
  
 

		

 
  
  
  




  
  
  

  







   
   
   
  

  
  
  
  

 














		





		







typedef long long _Longlong;
typedef unsigned long long _ULonglong;

		






		
		






 
namespace std {
enum _Uninitialized
	{	
	_Noinit
	};

		

#pragma warning(push)
#pragma warning(disable:4412)
class __declspec(dllimport) _Lockit
	{	
public:
 

  

















	__thiscall _Lockit();	
	explicit __thiscall _Lockit(int);	
	__thiscall ~_Lockit() noexcept;	
  

	static  void __cdecl _Lockit_ctor(int);
	static  void __cdecl _Lockit_dtor(int);

private:
	static  void __cdecl _Lockit_ctor(_Lockit *);
	static  void __cdecl _Lockit_ctor(_Lockit *, int);
	static  void __cdecl _Lockit_dtor(_Lockit *);

public:
	 _Lockit(const _Lockit&) = delete;
	_Lockit&  operator=(const _Lockit&) = delete;

private:
	int _Locktype;

  












	};

 



































































  



  


  



  


  
 

class __declspec(dllimport) _Init_locks
	{	
public:
 
  











	__thiscall _Init_locks();
	__thiscall ~_Init_locks() noexcept;
  

private:
	static  void __cdecl _Init_locks_ctor(_Init_locks *);
	static  void __cdecl _Init_locks_dtor(_Init_locks *);

 








	};

#pragma warning(pop)
}
 





		

__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void));

typedef unsigned long _Uint32t;




 
 #pragma pack(pop)















 







#pragma once








































































































































































































































































































































typedef signed char        int8_t;
typedef short              int16_t;
typedef int                int32_t;
typedef long long          int64_t;
typedef unsigned char      uint8_t;
typedef unsigned short     uint16_t;
typedef unsigned int       uint32_t;
typedef unsigned long long uint64_t;

typedef signed char        int_least8_t;
typedef short              int_least16_t;
typedef int                int_least32_t;
typedef long long          int_least64_t;
typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
typedef unsigned int       uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char        int_fast8_t;
typedef int                int_fast16_t;
typedef int                int_fast32_t;
typedef long long          int_fast64_t;
typedef unsigned char      uint_fast8_t;
typedef unsigned int       uint_fast16_t;
typedef unsigned int       uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long          intmax_t;
typedef unsigned long long uintmax_t;










































    
    
    














    



































 
namespace std {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t;  using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t;  using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;


	namespace tr1 {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t;  using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t;  using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;
	}	

}
 










#pragma once










 







#pragma once












#pragma once



__pragma(pack(push, 8)) extern "C" {







































     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
      size_t _Count,
      size_t _Size
    );

     
__declspec(dllimport)  __declspec(allocator) __declspec(restrict)
void* __cdecl calloc(
       size_t _Count,
       size_t _Size
    );

 
__declspec(dllimport) int __cdecl _callnewh(
      size_t _Size
    );

     
__declspec(dllimport) __declspec(allocator)
void* __cdecl _expand(
                void*  _Block,
       size_t _Size
    );

__declspec(dllimport)
void __cdecl _free_base(
        void* _Block
    );

__declspec(dllimport)
void __cdecl free(
        void* _Block
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
      size_t _Size
    );

     
__declspec(dllimport) __declspec(allocator)  __declspec(restrict)
void* __cdecl malloc(
       size_t _Size
    );

 
__declspec(dllimport)
size_t __cdecl _msize(
      void* _Block
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
         void*  _Block,
                                 size_t _Size
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl realloc(
        void*  _Block,
              size_t _Size
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size
    );

__declspec(dllimport)
void __cdecl _aligned_free(
        void* _Block
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
       size_t _Size,
                         size_t _Alignment
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
       size_t _Size,
                         size_t _Alignment,
                         size_t _Offset
    );

 
__declspec(dllimport)
size_t __cdecl _aligned_msize(
      void*  _Block,
               size_t _Alignment,
               size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment
    );






















} __pragma(pack(pop))












#pragma once










#pragma once




__pragma(pack(push, 8)) extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;





__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);



    
        
    






__declspec(dllimport) extern unsigned long  __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);



} __pragma(pack(pop))


__pragma(pack(push, 8)) extern "C" {





     
    __declspec(dllimport) void* __cdecl bsearch_s(
                                                        void const* _Key,
          void const* _Base,
                                                        rsize_t     _NumOfElements,
                                                        rsize_t     _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                        void*       _Context
        );

    __declspec(dllimport) void __cdecl qsort_s(
          void*   _Base,
                                                             rsize_t _NumOfElements,
                                                             rsize_t _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                             void*   _Context
        );





 
__declspec(dllimport) void* __cdecl bsearch(
                                                    void const* _Key,
      void const* _Base,
                                                    size_t      _NumOfElements,
                                                    size_t      _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

__declspec(dllimport) void __cdecl qsort(
      void*  _Base,
                                                         size_t _NumOfElements,
                                                         size_t _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

 
__declspec(dllimport) void* __cdecl _lfind_s(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       size_t        _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void*, void const*, void const*), 
                                                       void*         _Context
    );

 
__declspec(dllimport) void* __cdecl _lfind(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       unsigned int  _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

 
__declspec(dllimport) void* __cdecl _lsearch_s(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             size_t        _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                             void*         _Context
    );

 
__declspec(dllimport) void* __cdecl _lsearch(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             unsigned int  _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );























































































      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lfind" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lfind(
                                                           void const*   _Key,
          void const*   _Base,
                                                        unsigned int* _NumOfElements,
                                                           unsigned int  _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lsearch" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lsearch(
                                                                void const*   _Key,
          void*         _Base,
                                                             unsigned int* _NumOfElements,
                                                                unsigned int  _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );





} __pragma(pack(pop))










#pragma once



__pragma(pack(push, 8)) extern "C" {
































 

__declspec(dllimport) errno_t __cdecl _itow_s(
                              int      _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _itow( int _Value,   wchar_t *_Buffer,  int _Radix);

 

__declspec(dllimport) errno_t __cdecl _ltow_s(
                              long     _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ltow( long _Value,   wchar_t *_Buffer,  int _Radix);


__declspec(dllimport) errno_t __cdecl _ultow_s(
                              unsigned long _Value,
      wchar_t*      _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ultow( unsigned long _Value,   wchar_t *_Buffer,  int _Radix);

 
__declspec(dllimport) double __cdecl wcstod(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
__declspec(dllimport) double __cdecl _wcstod_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) long __cdecl wcstol(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) long __cdecl _wcstol_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) long long __cdecl wcstoll(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) long long __cdecl _wcstoll_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) unsigned long __cdecl wcstoul(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) unsigned long __cdecl _wcstoul_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) unsigned long long __cdecl wcstoull(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) unsigned long long __cdecl _wcstoull_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) long double __cdecl wcstold(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
__declspec(dllimport) long double __cdecl _wcstold_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) float __cdecl wcstof(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
__declspec(dllimport) float __cdecl _wcstof_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) double __cdecl _wtof(
      wchar_t const* _String
    );

 
__declspec(dllimport) double __cdecl _wtof_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wtoi(
      wchar_t const* _String
    );

 
__declspec(dllimport) int __cdecl _wtoi_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) long __cdecl _wtol(
      wchar_t const* _String
    );

 
__declspec(dllimport) long __cdecl _wtol_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) long long __cdecl _wtoll(
      wchar_t const* _String
    );

 
__declspec(dllimport) long long __cdecl _wtoll_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );


__declspec(dllimport) errno_t __cdecl _i64tow_s(
                              __int64  _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _i64tow(
                        __int64  _Value,
        wchar_t* _Buffer,
                        int      _Radix
    );


__declspec(dllimport) errno_t __cdecl _ui64tow_s(
                              unsigned __int64 _Value,
      wchar_t*         _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _ui64tow(
                        unsigned __int64 _Value,
        wchar_t*         _Buffer,
                        int              _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _wtoi64(
      wchar_t const* _String
    );

 
__declspec(dllimport) __int64 __cdecl _wtoi64_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) __int64 __cdecl _wcstoi64(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _wcstoi64_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );




 
 
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath(
      wchar_t*       _Buffer,
                                wchar_t const* _Path,
                                  size_t         _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _wmakepath_s(
      wchar_t*       _Buffer,
                              size_t         _BufferCount,
                        wchar_t const* _Drive,
                        wchar_t const* _Dir,
                        wchar_t const* _Filename,
                        wchar_t const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _Drive,   wchar_t const* _Dir,   wchar_t const* _Filename,   wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wmakepath(  wchar_t *_Buffer,  wchar_t const* _Drive,  wchar_t const* _Dir,  wchar_t const* _Filename,  wchar_t const* _Ext);

__declspec(dllimport) void __cdecl _wperror(
      wchar_t const* _ErrMsg
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl _wsplitpath(
                        wchar_t const* _FullPath,
        wchar_t*       _Drive,
        wchar_t*       _Dir,
        wchar_t*       _Filename,
        wchar_t*       _Ext
    );

__declspec(dllimport) errno_t __cdecl _wsplitpath_s(
                                  wchar_t const* _FullPath,
         wchar_t*       _Drive,
                                    size_t         _DriveCount,
           wchar_t*       _Dir,
                                    size_t         _DirCount,
      wchar_t*       _Filename,
                                    size_t         _FilenameCount,
           wchar_t*       _Ext,
                                    size_t         _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(   wchar_t const* _Path,   wchar_t (&_Drive)[_DriveSize],   wchar_t (&_Dir)[_DirSize],   wchar_t (&_Name)[_NameSize],   wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }





    
    

    
    __declspec(dllimport) errno_t __cdecl _wdupenv_s(
            wchar_t**      _Buffer,
                                                                            size_t*        _BufferCount,
                                                                               wchar_t const* _VarName
        );

    

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl _wgetenv(
          wchar_t const* _VarName
        );

     
    
    __declspec(dllimport) errno_t __cdecl _wgetenv_s(
                                     size_t*        _RequiredCount,
          wchar_t*       _Buffer,
                                      size_t         _BufferCount,
                                    wchar_t const* _VarName
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wgetenv_s(  size_t* _RequiredCount, wchar_t (&_Buffer)[_Size],   wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }

     
    __declspec(dllimport) int __cdecl _wputenv(
          wchar_t const* _EnvString
        );

    
    __declspec(dllimport) errno_t __cdecl _wputenv_s(
          wchar_t const* _Name,
          wchar_t const* _Value
        );
    
    __declspec(dllimport) errno_t __cdecl _wsearchenv_s(
                                wchar_t const* _Filename,
                                wchar_t const* _VarName,
          wchar_t*       _Buffer,
                                  size_t         _BufferCount
        );
    
    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(  wchar_t const* _Filename,   wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
    
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wsearchenv( wchar_t const* _Filename,  wchar_t const* _VarName,   wchar_t *_ResultPath);

    __declspec(dllimport) int __cdecl _wsystem(
          wchar_t const* _Command
        );





} __pragma(pack(pop))









#pragma once




































































































































































































































































































































__pragma(pack(push, 8)) extern "C" {









    
    
























































    
        
    




} __pragma(pack(pop))


__pragma(pack(push, 8)) extern "C" {




    










__declspec(dllimport) void __cdecl _swab(
        char* _Buf1,
        char* _Buf2,
                                                                  int   _SizeInBytes
    );












__declspec(dllimport) __declspec(noreturn) void __cdecl exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);





__declspec(dllimport) unsigned int __cdecl _set_abort_behavior(
      unsigned int _Flags,
      unsigned int _Mask
    );




    typedef int (__cdecl* _onexit_t)(void);










    
    


























































    int       __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit(  _onexit_t _Func);


int __cdecl at_quick_exit(void (__cdecl*)(void));









    
    typedef void (__cdecl* _purecall_handler)(void);

    
    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*, 
        unsigned int,
        uintptr_t
        );

    
    __declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(
          _purecall_handler _Handler
        );

    __declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(void);

    
    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);























 __declspec(dllimport) int __cdecl _set_error_mode(  int _Mode);



__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);

__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno(  unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno(  unsigned long * _Value);


__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char** __cdecl __sys_errlist(void);


__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int * __cdecl __sys_nerr(void);


__declspec(dllimport) void __cdecl perror(  char const* _ErrMsg);




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char**    __cdecl __p__pgmptr (void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t** __cdecl __p__wpgmptr(void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int*      __cdecl __p__fmode  (void);






    
    
    


 
__declspec(dllimport) errno_t __cdecl _get_pgmptr (  char**    _Value);

 
__declspec(dllimport) errno_t __cdecl _get_wpgmptr(  wchar_t** _Value);

__declspec(dllimport) errno_t __cdecl _set_fmode  (               int       _Mode );

__declspec(dllimport) errno_t __cdecl _get_fmode  (              int*      _PMode);








typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

  int       __cdecl abs   (  int       _Number);
  long      __cdecl labs  (  long      _Number);
  long long __cdecl llabs (  long long _Number);
  __int64   __cdecl _abs64(  __int64   _Number);

  unsigned short   __cdecl _byteswap_ushort(  unsigned short   _Number);
  unsigned long    __cdecl _byteswap_ulong (  unsigned long    _Number);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Number);

  __declspec(dllimport) div_t   __cdecl div  (  int       _Numerator,   int       _Denominator);
  __declspec(dllimport) ldiv_t  __cdecl ldiv (  long      _Numerator,   long      _Denominator);
  __declspec(dllimport) lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);



#pragma warning (push)
#pragma warning (disable:6540) 

unsigned int __cdecl _rotl(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotl(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotl64(
      unsigned __int64 _Value,
      int              _Shift
    );

unsigned int __cdecl _rotr(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotr(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotr64(
      unsigned __int64 _Value,
      int              _Shift
    );

#pragma warning (pop)






__declspec(dllimport) void __cdecl srand(  unsigned int _Seed);

  __declspec(dllimport) int __cdecl rand(void);








extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}











    #pragma pack(push, 4)
    typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
    #pragma pack(pop)

    













typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








                     __declspec(dllimport) double    __cdecl atof   (  char const* _String);
   __declspec(dllimport) int       __cdecl atoi   (  char const* _String);
                     __declspec(dllimport) long      __cdecl atol   (  char const* _String);
                     __declspec(dllimport) long long __cdecl atoll  (  char const* _String);
                     __declspec(dllimport) __int64   __cdecl _atoi64(  char const* _String);

  __declspec(dllimport) double    __cdecl _atof_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) int       __cdecl _atoi_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) long      __cdecl _atol_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) long long __cdecl _atoll_l (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) __int64   __cdecl _atoi64_l(  char const* _String,   _locale_t _Locale);

  __declspec(dllimport) int __cdecl _atoflt (  _CRT_FLOAT*  _Result,   char const* _String);
  __declspec(dllimport) int __cdecl _atodbl (  _CRT_DOUBLE* _Result,   char*       _String);
  __declspec(dllimport) int __cdecl _atoldbl(  _LDOUBLE*    _Result,   char*       _String);

 
__declspec(dllimport) int __cdecl _atoflt_l(
         _CRT_FLOAT* _Result,
        char const* _String,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _atodbl_l(
         _CRT_DOUBLE* _Result,
        char*        _String,
      _locale_t    _Locale
    );


 
__declspec(dllimport) int __cdecl _atoldbl_l(
         _LDOUBLE* _Result,
        char*     _String,
      _locale_t _Locale
    );

 
__declspec(dllimport) float __cdecl strtof(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) float __cdecl _strtof_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) double __cdecl strtod(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) double __cdecl _strtod_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long double __cdecl strtold(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) long double __cdecl _strtold_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long __cdecl strtol(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) long __cdecl _strtol_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long long __cdecl strtoll(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) long long __cdecl _strtoll_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned long __cdecl strtoul(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned long __cdecl _strtoul_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned long long __cdecl strtoull(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned long long __cdecl _strtoull_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) __int64 __cdecl _strtoi64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _strtoi64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );








 

__declspec(dllimport) errno_t __cdecl _itoa_s(
                              int    _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _itoa_s(  int _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _itoa( int _Value,   char *_Buffer,  int _Radix);

 

__declspec(dllimport) errno_t __cdecl _ltoa_s(
                              long   _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ltoa( long _Value,   char *_Buffer,  int _Radix);

 

__declspec(dllimport) errno_t __cdecl _ultoa_s(
                              unsigned long _Value,
      char*         _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ultoa( unsigned long _Value,   char *_Buffer,  int _Radix);

 

__declspec(dllimport) errno_t __cdecl _i64toa_s(
                              __int64 _Value,
      char*   _Buffer,
                              size_t  _BufferCount,
                              int     _Radix
    );

 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _i64toa(
                        __int64 _Value,
        char*   _Buffer,
                        int     _Radix
    );

 

__declspec(dllimport) errno_t __cdecl _ui64toa_s(
                              unsigned __int64 _Value,
      char*            _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ui64toa(
                        unsigned __int64 _Value,
        char*            _Buffer,
                        int              _Radix
    );













 

__declspec(dllimport) errno_t __cdecl _ecvt_s(
      char* _Buffer,
       size_t                       _BufferCount,
       double                       _Value,
       int                          _DigitCount,
      int*                         _PtDec,
      int*                         _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount,   int* _PtDec,   int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ecvt(
       double _Value,
       int    _DigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 

__declspec(dllimport) errno_t __cdecl _fcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _FractionalDigitCount,
                             int*   _PtDec,
                             int*   _PtSign
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size],   double _Value,   int _FractionalDigitCount,   int* _PtDec,   int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _fcvt(
       double _Value,
       int    _FractionalDigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 
__declspec(dllimport) errno_t __cdecl _gcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _DigitCount
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _gcvt(
                        double _Value,
                        int    _DigitCount,
        char*  _Buffer
    );











    


        
    

    


        
    

     
    __declspec(dllimport) int __cdecl ___mb_cur_max_func(void);

     
    __declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t);




 
__declspec(dllimport) int __cdecl mblen(
        char const* _Ch,
                                             size_t      _MaxCount
    );

  
__declspec(dllimport) int __cdecl _mblen_l(
        char const* _Ch,
                                             size_t      _MaxCount,
                                         _locale_t   _Locale
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrlen(
      char const* _String
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrlen_l(
        char const* _String, 
      _locale_t   _Locale
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrnlen(
      char const* _String,
        size_t      _MaxCount
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrnlen_l(
        char const* _String,
          size_t      _MaxCount,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl mbtowc(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes
    );

 
__declspec(dllimport) int __cdecl _mbtowc_l(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes,
                                  _locale_t   _Locale
    );


__declspec(dllimport) errno_t __cdecl mbstowcs_s(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest,  char const* _Source,  size_t _MaxCount);


__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount,
                                                       _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,   char const* _Source,   size_t _MaxCount,   _locale_t _Locale);




__declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl wctomb(
      char*   _MbCh,
                                wchar_t _WCh
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wctomb_l(
        char*     _MbCh,
                          wchar_t   _WCh,
                      _locale_t _Locale
    );



    
    __declspec(dllimport) errno_t __cdecl wctomb_s(
                                                         int*    _SizeConverted,
          char*   _MbCh,
                                                              rsize_t _SizeInBytes,
                                                              wchar_t _WCh
        );




__declspec(dllimport) errno_t __cdecl _wctomb_s_l(
                             int*     _SizeConverted,
      char*     _MbCh,
                                  size_t    _SizeInBytes,
                                  wchar_t   _WCh, 
                              _locale_t _Locale);


__declspec(dllimport) errno_t __cdecl wcstombs_s(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcstombs( char *_Dest,  wchar_t const* _Source,  size_t _MaxCount);


__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes,
                                                                _locale_t      _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _wcstombs_l(  char *_Dest,   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale);




















 
 
__declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath(
      char*       _Buffer,
                                char const* _Path,
                                  size_t      _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _makepath_s(
      char*       _Buffer,
                              size_t      _BufferCount,
                        char const* _Drive,
                        char const* _Dir,
                        char const* _Filename,
                        char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size],   char const* _Drive,   char const* _Dir,   char const* _Filename,   char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _makepath(  char *_Buffer,  char const* _Drive,  char const* _Dir,  char const* _Filename,  char const* _Ext);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl _splitpath(
                        char const* _FullPath,
        char*       _Drive,
        char*       _Dir,
        char*       _Filename,
        char*       _Ext
    );


__declspec(dllimport) errno_t __cdecl _splitpath_s(
                                  char const* _FullPath,
         char*       _Drive,
                                    size_t      _DriveCount,
           char*       _Dir,
                                    size_t      _DirCount,
      char*       _Filename,
                                    size_t      _FilenameCount,
           char*       _Ext,
                                    size_t      _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(   char const* _Dest,   char (&_Drive)[_DriveSize],   char (&_Dir)[_DirSize],   char (&_Name)[_NameSize],   char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }










    

    
     
    __declspec(dllimport) errno_t __cdecl getenv_s(
                                     size_t*     _RequiredCount,
          char*       _Buffer,
                                      rsize_t     _BufferCount,
                                    char const* _VarName
        );
    
    




    __declspec(dllimport) int*       __cdecl __p___argc (void);
    __declspec(dllimport) char***    __cdecl __p___argv (void);
    __declspec(dllimport) wchar_t*** __cdecl __p___wargv(void);

    




        
        
        
    
    
    __declspec(dllimport) char***    __cdecl __p__environ (void);
    __declspec(dllimport) wchar_t*** __cdecl __p__wenviron(void);

    
        
    
    
    





        
        
    



    
    



      __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) 
    __declspec(dllimport) char* __cdecl getenv(
          char const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t* _RequiredCount, char (&_Buffer)[_Size],   char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }

    




    
    __declspec(dllimport) errno_t __cdecl _dupenv_s(
            char**      _Buffer,
                                                                            size_t*     _BufferCount,
                                                                               char const* _VarName
        );

    



    __declspec(dllimport) int __cdecl system(
          char const* _Command
        );

    
    
    #pragma warning (push)
    #pragma warning (disable:6540)

     
    __declspec(dllimport) int __cdecl _putenv(
          char const* _EnvString
        );

    
    __declspec(dllimport) errno_t __cdecl _putenv_s(
          char const* _Name,
          char const* _Value
        );

    #pragma warning (pop)

    __declspec(dllimport) errno_t __cdecl _searchenv_s(
                                char const* _Filename,
                                char const* _VarName,
          char*       _Buffer,
                                  size_t      _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(  char const* _Filename,   char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _searchenv( char const* _Filename,  char const* _VarName,   char *_Buffer);

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _seterrormode(
          int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _beep(
          unsigned _Frequency,
          unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _sleep(
          unsigned long _Duration
        );












    




    
    

    #pragma warning(push)
    #pragma warning(disable: 4141) 

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ecvt(
           double _Value,
           int    _DigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl fcvt(
           double _Value,
           int    _FractionalDigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl gcvt(
                            double _Value,
                            int    _DigitCount,
            char*  _DstBuf
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl itoa(
                            int   _Value,
            char* _Buffer,
                            int   _Radix
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ltoa(
                            long  _Value,
            char* _Buffer,
                            int   _Radix
        );


    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_swab" ". See online help for details."))
    __declspec(dllimport) void __cdecl swab(
          char* _Buf1,
          char* _Buf2,
                                     int   _SizeInBytes
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ultoa(
                            unsigned long _Value,
            char*         _Buffer,
                            int           _Radix
        );

    

        

          __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putenv" ". See online help for details."))
        __declspec(dllimport) int __cdecl putenv(
              char const* _EnvString
            );

    

    #pragma warning(pop)

    _onexit_t __cdecl onexit(  _onexit_t _Func);





} __pragma(pack(pop))




 
namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;

 
using :: getenv;
using :: system;
 

using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;

using :: _Exit; using :: at_quick_exit; using :: quick_exit;
}
 










#pragma once





#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 

  

 
 
extern "C" {
 
 

		





		






void __cdecl _Feraise(int);

typedef union
	{	
	unsigned short _Word[8];
	float _Float;
	double _Double;
	long double _Long_double;
	} _Dconst;

		
__declspec(dllimport) double __cdecl _Cosh(double, double);
__declspec(dllimport) short __cdecl _Dtest(double *);
__declspec(dllimport) double __cdecl _Sinh(double, double);

__declspec(dllimport) short __cdecl _Exp(double *, double, short);
extern __declspec(dllimport)  _Dconst _Denorm, _Hugeval, _Inf,
	_Nan, _Snan;

		
__declspec(dllimport) float __cdecl _FCosh(float, float);
__declspec(dllimport) short __cdecl _FDtest(float *);
__declspec(dllimport) float __cdecl _FSinh(float, float);

__declspec(dllimport) short __cdecl _FExp(float *, float, short);
extern __declspec(dllimport)  _Dconst _FDenorm, _FInf, _FNan, _FSnan;

		
__declspec(dllimport) long double __cdecl _LCosh(long double, long double);
__declspec(dllimport) short __cdecl _LDtest(long double *);
__declspec(dllimport) long double __cdecl _LSinh(long double, long double);

__declspec(dllimport) short __cdecl _LExp(long double *, long double, short);
extern __declspec(dllimport)  _Dconst _LDenorm, _LInf, _LNan, _LSnan;

 
 
}
 
 

 
 #pragma warning(pop)
 #pragma pack(pop)











#pragma once













#pragma once




__pragma(pack(push, 8)) extern "C" {




    


        


            
        
    




















    






        
    



























































































































































    













__declspec(dllimport) unsigned int __cdecl _clearfp(void);

#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_controlfp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) unsigned int __cdecl _controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );

#pragma warning(pop)


__declspec(dllimport) void __cdecl _set_controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );


__declspec(dllimport) errno_t __cdecl _controlfp_s(
      unsigned int* _CurrentState,
           unsigned int  _NewValue,
           unsigned int  _Mask
    );


__declspec(dllimport) unsigned int __cdecl _statusfp(void);


__declspec(dllimport) void __cdecl _fpreset(void);















__declspec(dllimport) unsigned int __cdecl _control87(
      unsigned int _NewValue,
      unsigned int _Mask
    );












 
__declspec(dllimport) int* __cdecl __fpecode(void);



 
__declspec(dllimport) int __cdecl __fpe_flt_rounds(void);












  __declspec(dllimport) double __cdecl _copysign(  double _Number,   double _Sign);
  __declspec(dllimport) double __cdecl _chgsign(  double _X);
  __declspec(dllimport) double __cdecl _scalb(  double _X,   long _Y);
  __declspec(dllimport) double __cdecl _logb(  double _X);
  __declspec(dllimport) double __cdecl _nextafter(  double _X,   double _Y);
  __declspec(dllimport) int    __cdecl _finite(  double _X);
  __declspec(dllimport) int    __cdecl _isnan(  double _X);
  __declspec(dllimport) int    __cdecl _fpclass(  double _X);


      __declspec(dllimport) float __cdecl _scalbf(  float _X,   long _Y);











    
    
    

    
    __declspec(dllimport) void __cdecl fpreset(void);

    
    

    
    

    
    
    

    
    
    
    
    
    
    

    
    
    

    
    
    
    
    

    
    
    
    

    

    
    
    
    
    
    

    
    
    
    

    
    
    
    
    
    

    
    
    
    

    





} __pragma(pack(pop))










#pragma once














#pragma once









 












__pragma(pack(push, 8)) extern "C" {



#pragma warning(push)
#pragma warning(disable:4738) 
#pragma warning(disable:4820) 




    
    
    struct _exception
    {
        int    type;   
        char*  name;   
        double arg1;   
        double arg2;   
        double retval; 
    };

    
    
    
        

        struct _complex
        {
            double x, y; 
        };

        



    


typedef float float_t;
typedef double double_t;













    
        extern double const _HUGE;
    





    



















































































void __cdecl _fperrraise(  int _Except);

  __declspec(dllimport) short __cdecl _dclass(  double _X);
  __declspec(dllimport) short __cdecl _ldclass(  long double _X);
  __declspec(dllimport) short __cdecl _fdclass(  float _X);

  __declspec(dllimport) int __cdecl _dsign(  double _X);
  __declspec(dllimport) int __cdecl _ldsign(  long double _X);
  __declspec(dllimport) int __cdecl _fdsign(  float _X);

  __declspec(dllimport) int __cdecl _dpcomp(  double _X,   double _Y);
  __declspec(dllimport) int __cdecl _ldpcomp(  long double _X,   long double _Y);
  __declspec(dllimport) int __cdecl _fdpcomp(  float _X,   float _Y);

  __declspec(dllimport) short __cdecl _dtest(  double* _Px);
  __declspec(dllimport) short __cdecl _ldtest(  long double* _Px);
  __declspec(dllimport) short __cdecl _fdtest(  float* _Px);

__declspec(dllimport) short __cdecl _d_int(  double* _Px,   short _Xexp);
__declspec(dllimport) short __cdecl _ld_int(  long double* _Px,   short _Xexp);
__declspec(dllimport) short __cdecl _fd_int(  float* _Px,   short _Xexp);

__declspec(dllimport) short __cdecl _dscale(  double* _Px,   long _Lexp);
__declspec(dllimport) short __cdecl _ldscale(  long double* _Px,   long _Lexp);
__declspec(dllimport) short __cdecl _fdscale(  float* _Px,   long _Lexp);

__declspec(dllimport) short __cdecl _dunscale(  short* _Pex,   double* _Px);
__declspec(dllimport) short __cdecl _ldunscale(  short* _Pex,   long double* _Px);
__declspec(dllimport) short __cdecl _fdunscale(  short* _Pex,   float* _Px);

  __declspec(dllimport) short __cdecl _dexp(  double* _Px,   double _Y,   long _Eoff);
  __declspec(dllimport) short __cdecl _ldexp(  long double* _Px,   long double _Y,   long _Eoff);
  __declspec(dllimport) short __cdecl _fdexp(  float* _Px,   float _Y,   long _Eoff);

  __declspec(dllimport) short __cdecl _dnorm(  unsigned short* _Ps);
  __declspec(dllimport) short __cdecl _fdnorm(  unsigned short* _Ps);

  __declspec(dllimport) double __cdecl _dpoly(  double _X,   double const* _Tab,   int _N);
  __declspec(dllimport) long double __cdecl _ldpoly(  long double _X,   long double const* _Tab,   int _N);
  __declspec(dllimport) float __cdecl _fdpoly(  float _X,   float const* _Tab,   int _N);

  __declspec(dllimport) double __cdecl _dlog(  double _X,   int _Baseflag);
  __declspec(dllimport) long double __cdecl _ldlog(  long double _X,   int _Baseflag);
  __declspec(dllimport) float __cdecl _fdlog(  float _X,   int _Baseflag);

  __declspec(dllimport) double __cdecl _dsin(  double _X,   unsigned int _Qoff);
  __declspec(dllimport) long double __cdecl _ldsin(  long double _X,   unsigned int _Qoff);
  __declspec(dllimport) float __cdecl _fdsin(  float _X,   unsigned int _Qoff);


typedef union
{   
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{   
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{   
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{   
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C,  _Inf_C,  _Nan_C,  _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C,  _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double      _Zero_C,  _Xbig_C;
extern const float       _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;




























extern "C++"
{
      inline int fpclassify(  float _X) throw()
    {
        return _fdtest(&_X);
    }

      inline int fpclassify(  double _X) throw()
    {
        return _dtest(&_X);
    }

      inline int fpclassify(  long double _X) throw()
    {
        return _ldtest(&_X);
    }

      inline bool signbit(  float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

      inline bool signbit(  double _X) throw()
    {
        return _dsign(_X) != 0;
    }

      inline bool signbit(  long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

      inline int _fpcomp(  float _X,   float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

      inline int _fpcomp(  double _X,   double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

      inline int _fpcomp(  long double _X,   long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {   
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {   
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {   
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {   
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {   
        typedef double _Type;   
    };

    template <> struct _Real_type<float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {   
        typedef long double _Type;
    };

    template <class _T1, class _T2>
      inline int _fpcomp(  _T1 _X,   _T2 _Y) throw()
    {   
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
      inline bool isfinite(  _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
      inline bool isinf(  _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
      inline bool isnan(  _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
      inline bool isnormal(  _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreaterequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isless(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isunordered(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}  






  int       __cdecl abs(  int _X);
  long      __cdecl labs(  long _X);
  long long __cdecl llabs(  long long _X);

  double __cdecl acos(  double _X);
  double __cdecl asin(  double _X);
  double __cdecl atan(  double _X);
  double __cdecl atan2(  double _Y,   double _X);

  double __cdecl cos(  double _X);
  double __cdecl cosh(  double _X);
  double __cdecl exp(  double _X);
   double __cdecl fabs(  double _X);
  double __cdecl fmod(  double _X,   double _Y);
  double __cdecl log(  double _X);
  double __cdecl log10(  double _X);
  double __cdecl pow(  double _X,   double _Y);
  double __cdecl sin(  double _X);
  double __cdecl sinh(  double _X);
   double __cdecl sqrt(  double _X);
  double __cdecl tan(  double _X);
  double __cdecl tanh(  double _X);

  __declspec(dllimport) double    __cdecl acosh(  double _X);
  __declspec(dllimport) double    __cdecl asinh(  double _X);
  __declspec(dllimport) double    __cdecl atanh(  double _X);
  __declspec(dllimport)  double    __cdecl atof(  char const* _String);
  __declspec(dllimport)  double    __cdecl _atof_l(  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) double    __cdecl _cabs(  struct _complex _Complex_value);
  __declspec(dllimport) double    __cdecl cbrt(  double _X);
  __declspec(dllimport) double    __cdecl ceil(  double _X);
  __declspec(dllimport) double    __cdecl _chgsign(  double _X);
  __declspec(dllimport) double    __cdecl copysign(  double _Number,   double _Sign);
  __declspec(dllimport) double    __cdecl _copysign(  double _Number,   double _Sign);
  __declspec(dllimport) double    __cdecl erf(  double _X);
  __declspec(dllimport) double    __cdecl erfc(  double _X);
  __declspec(dllimport) double    __cdecl exp2(  double _X);
  __declspec(dllimport) double    __cdecl expm1(  double _X);
  __declspec(dllimport) double    __cdecl fdim(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl floor(  double _X);
  __declspec(dllimport) double    __cdecl fma(  double _X,   double _Y,   double _Z);
  __declspec(dllimport) double    __cdecl fmax(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl fmin(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl frexp(  double _X,   int* _Y);
  __declspec(dllimport) double    __cdecl hypot(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl _hypot(  double _X,   double _Y);
  __declspec(dllimport) int       __cdecl ilogb(  double _X);
  __declspec(dllimport) double    __cdecl ldexp(  double _X,   int _Y);
  __declspec(dllimport) double    __cdecl lgamma(  double _X);
  __declspec(dllimport) long long __cdecl llrint(  double _X);
  __declspec(dllimport) long long __cdecl llround(  double _X);
  __declspec(dllimport) double    __cdecl log1p(  double _X);
  __declspec(dllimport) double    __cdecl log2(  double _X);
  __declspec(dllimport) double    __cdecl logb(  double _X);
  __declspec(dllimport) long      __cdecl lrint(  double _X);
  __declspec(dllimport) long      __cdecl lround(  double _X);

int __cdecl _matherr(  struct _exception* _Except);

  __declspec(dllimport) double __cdecl modf(  double _X,   double* _Y);
  __declspec(dllimport) double __cdecl nan(  char const*);
  __declspec(dllimport) double __cdecl nearbyint(  double _X);
  __declspec(dllimport) double __cdecl nextafter(  double _X,   double _Y);
  __declspec(dllimport) double __cdecl nexttoward(  double _X,   long double _Y);
  __declspec(dllimport) double __cdecl remainder(  double _X,   double _Y);
  __declspec(dllimport) double __cdecl remquo(  double _X,   double _Y,   int* _Z);
  __declspec(dllimport) double __cdecl rint(  double _X);
  __declspec(dllimport) double __cdecl round(  double _X);
  __declspec(dllimport) double __cdecl scalbln(  double _X,   long _Y);
  __declspec(dllimport) double __cdecl scalbn(  double _X,   int _Y);
  __declspec(dllimport) double __cdecl tgamma(  double _X);
  __declspec(dllimport) double __cdecl trunc(  double _X);
  __declspec(dllimport) double __cdecl _j0(  double _X );
  __declspec(dllimport) double __cdecl _j1(  double _X );
  __declspec(dllimport) double __cdecl _jn(int _X,   double _Y);
  __declspec(dllimport) double __cdecl _y0(  double _X);
  __declspec(dllimport) double __cdecl _y1(  double _X);
  __declspec(dllimport) double __cdecl _yn(  int _X,   double _Y);

  __declspec(dllimport) float     __cdecl acoshf(  float _X);
  __declspec(dllimport) float     __cdecl asinhf(  float _X);
  __declspec(dllimport) float     __cdecl atanhf(  float _X);
  __declspec(dllimport) float     __cdecl cbrtf(  float _X);
  __declspec(dllimport) float     __cdecl _chgsignf(  float _X);
  __declspec(dllimport) float     __cdecl copysignf(  float _Number,   float _Sign);
  __declspec(dllimport) float     __cdecl _copysignf(  float _Number,   float _Sign);
  __declspec(dllimport) float     __cdecl erff(  float _X);
  __declspec(dllimport) float     __cdecl erfcf(  float _X);
  __declspec(dllimport) float     __cdecl expm1f(  float _X);
  __declspec(dllimport) float     __cdecl exp2f(  float _X);
  __declspec(dllimport) float     __cdecl fdimf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl fmaf(  float _X,   float _Y,   float _Z);
  __declspec(dllimport) float     __cdecl fmaxf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl fminf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl _hypotf(  float _X,   float _Y);
  __declspec(dllimport) int       __cdecl ilogbf(  float _X);
  __declspec(dllimport) float     __cdecl lgammaf(  float _X);
  __declspec(dllimport) long long __cdecl llrintf(  float _X);
  __declspec(dllimport) long long __cdecl llroundf(  float _X);
  __declspec(dllimport) float     __cdecl log1pf(  float _X);
  __declspec(dllimport) float     __cdecl log2f(  float _X);
  __declspec(dllimport) float     __cdecl logbf(  float _X);
  __declspec(dllimport) long      __cdecl lrintf(  float _X);
  __declspec(dllimport) long      __cdecl lroundf(  float _X);
  __declspec(dllimport) float     __cdecl nanf(  char const*);
  __declspec(dllimport) float     __cdecl nearbyintf(  float _X);
  __declspec(dllimport) float     __cdecl nextafterf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl nexttowardf(  float _X,   long double _Y);
  __declspec(dllimport) float     __cdecl remainderf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl remquof(  float _X,   float _Y,   int* _Z);
  __declspec(dllimport) float     __cdecl rintf(  float _X);
  __declspec(dllimport) float     __cdecl roundf(  float _X);
  __declspec(dllimport) float     __cdecl scalblnf(  float _X,   long _Y);
  __declspec(dllimport) float     __cdecl scalbnf(  float _X,   int _Y);
  __declspec(dllimport) float     __cdecl tgammaf(  float _X);
  __declspec(dllimport) float     __cdecl truncf(  float _X);







      __declspec(dllimport) float __cdecl _logbf(  float _X);
      __declspec(dllimport) float __cdecl _nextafterf(  float _X,   float _Y);
      __declspec(dllimport) int   __cdecl _finitef(  float _X);
      __declspec(dllimport) int   __cdecl _isnanf(  float _X);
      __declspec(dllimport) int   __cdecl _fpclassf(  float _X);

      __declspec(dllimport) int   __cdecl _set_FMA3_enable(  int _Flag);
      __declspec(dllimport) int   __cdecl _get_FMA3_enable(void);












      __declspec(dllimport) float __cdecl acosf(  float _X);
      __declspec(dllimport) float __cdecl asinf(  float _X);
      __declspec(dllimport) float __cdecl atan2f(  float _Y,   float _X);
      __declspec(dllimport) float __cdecl atanf(  float _X);
      __declspec(dllimport) float __cdecl ceilf(  float _X);
      __declspec(dllimport) float __cdecl cosf(  float _X);
      __declspec(dllimport) float __cdecl coshf(  float _X);
      __declspec(dllimport) float __cdecl expf(  float _X);



















































      __inline float __cdecl fabsf(  float _X)
    {
        return (float)fabs(_X);
    }





      __declspec(dllimport) float __cdecl floorf(  float _X);
      __declspec(dllimport) float __cdecl fmodf(  float _X,   float _Y);















  __inline float __cdecl frexpf(  float _X,   int *_Y)
{
    return (float)frexp(_X, _Y);
}

  __inline float __cdecl hypotf(  float _X,   float _Y)
{
    return _hypotf(_X, _Y);
}

  __inline float __cdecl ldexpf(  float _X,   int _Y)
{
    return (float)ldexp(_X, _Y);
}



      __declspec(dllimport) float  __cdecl log10f(  float _X);
      __declspec(dllimport) float  __cdecl logf(  float _X);
      __declspec(dllimport) float  __cdecl modff(  float _X,   float *_Y);
      __declspec(dllimport) float  __cdecl powf(  float _X,   float _Y);
      __declspec(dllimport) float  __cdecl sinf(  float _X);
      __declspec(dllimport) float  __cdecl sinhf(  float _X);
      __declspec(dllimport) float  __cdecl sqrtf(  float _X);
      __declspec(dllimport) float  __cdecl tanf(  float _X);
      __declspec(dllimport) float  __cdecl tanhf(  float _X);





















































  __declspec(dllimport) long double __cdecl acoshl(  long double _X);

  __inline long double __cdecl acosl(  long double _X)
{
    return acos((double)_X);
}

  __declspec(dllimport) long double __cdecl asinhl(  long double _X);

  __inline long double __cdecl asinl(  long double _X)
{
    return asin((double)_X);
}

  __inline long double __cdecl atan2l(  long double _Y,   long double _X)
{
    return atan2((double)_Y, (double)_X);
}

  __declspec(dllimport) long double __cdecl atanhl(  long double _X);

  __inline long double __cdecl atanl(  long double _X)
{
    return atan((double)_X);
}

  __declspec(dllimport) long double __cdecl cbrtl(  long double _X);

  __inline long double __cdecl ceill(  long double _X)
{
    return ceil((double)_X);
}

  __inline long double __cdecl _chgsignl(  long double _X)
{
    return _chgsign((double)_X);
}

  __declspec(dllimport) long double __cdecl copysignl(  long double _Number,   long double _Sign);

  __inline long double __cdecl _copysignl(  long double _Number,   long double _Sign)
{
    return _copysign((double)_Number, (double)_Sign);
}

  __inline long double __cdecl coshl(  long double _X)
{
    return cosh((double)_X);
}

  __inline long double __cdecl cosl(  long double _X)
{
    return cos((double)_X);
}

  __declspec(dllimport) long double __cdecl erfl(  long double _X);
  __declspec(dllimport) long double __cdecl erfcl(  long double _X);

  __inline long double __cdecl expl(  long double _X)
{
    return exp((double)_X);
}

  __declspec(dllimport) long double __cdecl exp2l(  long double _X);
  __declspec(dllimport) long double __cdecl expm1l(  long double _X);

  __inline long double __cdecl fabsl(  long double _X)
{
    return fabs((double)_X);
}

  __declspec(dllimport) long double __cdecl fdiml(  long double _X,   long double _Y);

  __inline long double __cdecl floorl(  long double _X)
{
    return floor((double)_X);
}

  __declspec(dllimport) long double __cdecl fmal(  long double _X,   long double _Y,   long double _Z);
  __declspec(dllimport) long double __cdecl fmaxl(  long double _X,   long double _Y);
  __declspec(dllimport) long double __cdecl fminl(  long double _X,   long double _Y);

  __inline long double __cdecl fmodl(  long double _X,   long double _Y)
{
    return fmod((double)_X, (double)_Y);
}

  __inline long double __cdecl frexpl(  long double _X,   int *_Y)
{
    return frexp((double)_X, _Y);
}

  __declspec(dllimport) int __cdecl ilogbl(  long double _X);

  __inline long double __cdecl _hypotl(  long double _X,   long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

  __inline long double __cdecl hypotl(  long double _X,   long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

  __inline long double __cdecl ldexpl(  long double _X,   int _Y)
{
    return ldexp((double)_X, _Y);
}

  __declspec(dllimport) long double __cdecl lgammal(  long double _X);
  __declspec(dllimport) long long __cdecl llrintl(  long double _X);
  __declspec(dllimport) long long __cdecl llroundl(  long double _X);

  __inline long double __cdecl logl(  long double _X)
{
    return log((double)_X);
}

  __inline long double __cdecl log10l(  long double _X)
{
    return log10((double)_X);
}

  __declspec(dllimport) long double __cdecl log1pl(  long double _X);
  __declspec(dllimport) long double __cdecl log2l(  long double _X);
  __declspec(dllimport) long double __cdecl logbl(  long double _X);
  __declspec(dllimport) long __cdecl lrintl(  long double _X);
  __declspec(dllimport) long __cdecl lroundl(  long double _X);

  __inline long double __cdecl modfl(  long double _X,   long double* _Y)
{
    double _F, _I;
    _F = modf((double)_X, &_I);
    *_Y = _I;
    return _F;
}

  __declspec(dllimport) long double __cdecl nanl(  char const*);
  __declspec(dllimport) long double __cdecl nearbyintl(  long double _X);
  __declspec(dllimport) long double __cdecl nextafterl(  long double _X,   long double _Y);
  __declspec(dllimport) long double __cdecl nexttowardl(  long double _X,   long double _Y);

  __inline long double __cdecl powl(  long double _X,   long double _Y)
{
    return pow((double)_X, (double)_Y);
}

  __declspec(dllimport) long double __cdecl remainderl(  long double _X,   long double _Y);
  __declspec(dllimport) long double __cdecl remquol(  long double _X,   long double _Y,   int* _Z);
  __declspec(dllimport) long double __cdecl rintl(  long double _X);
  __declspec(dllimport) long double __cdecl roundl(  long double _X);
  __declspec(dllimport) long double __cdecl scalblnl(  long double _X,   long _Y);
  __declspec(dllimport) long double __cdecl scalbnl(  long double _X,   int _Y);

  __inline long double __cdecl sinhl(  long double _X)
{
    return sinh((double)_X);
}

  __inline long double __cdecl sinl(  long double _X)
{
    return sin((double)_X);
}

  __inline long double __cdecl sqrtl(  long double _X)
{
    return sqrt((double)_X);
}

  __inline long double __cdecl tanhl(  long double _X)
{
    return tanh((double)_X);
}

  __inline long double __cdecl tanl(  long double _X)
{
    return tan((double)_X);
}

  __declspec(dllimport) long double __cdecl tgammal(  long double _X);
  __declspec(dllimport) long double __cdecl truncl(  long double _X);









    
    
    
    
    
    
    

    

    
        
            extern double HUGE;
        



        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j0" ". See online help for details."))   __declspec(dllimport) double __cdecl j0(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j1" ". See online help for details."))   __declspec(dllimport) double __cdecl j1(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_jn" ". See online help for details."))   __declspec(dllimport) double __cdecl jn(  int _X,   double _Y);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y0" ". See online help for details."))   __declspec(dllimport) double __cdecl y0(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y1" ". See online help for details."))   __declspec(dllimport) double __cdecl y1(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_yn" ". See online help for details."))   __declspec(dllimport) double __cdecl yn(  int _X,   double _Y);
    




#pragma warning(pop)



} __pragma(pack(pop))






    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    





 

  inline double abs(  double _Xx) noexcept
	{
	return (:: fabs(_Xx));
	}

  inline double pow(  double _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: pow(_Xx, static_cast<double>(_Yx)));
	}

  inline float abs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline float acos(  float _Xx) noexcept
	{
	return (:: acosf(_Xx));
	}

  inline float acosh(  float _Xx) noexcept
	{
	return (:: acoshf(_Xx));
	}

  inline float asin(  float _Xx) noexcept
	{
	return (:: asinf(_Xx));
	}

  inline float asinh(  float _Xx) noexcept
	{
	return (:: asinhf(_Xx));
	}

  inline float atan(  float _Xx) noexcept
	{
	return (:: atanf(_Xx));
	}

  inline float atanh(  float _Xx) noexcept
	{
	return (:: atanhf(_Xx));
	}

  inline float atan2(  float _Yx,   float _Xx) noexcept
	{
	return (:: atan2f(_Yx, _Xx));
	}

  inline float cbrt(  float _Xx) noexcept
	{
	return (:: cbrtf(_Xx));
	}

  inline float ceil(  float _Xx) noexcept
	{
	return (:: ceilf(_Xx));
	}

  inline float copysign(  float _Number,
	  float _Sign) noexcept
	{
	return (:: copysignf(_Number, _Sign));
	}

  inline float cos(  float _Xx) noexcept
	{
	return (:: cosf(_Xx));
	}

  inline float cosh(  float _Xx) noexcept
	{
	return (:: coshf(_Xx));
	}

  inline float erf(  float _Xx) noexcept
	{
	return (:: erff(_Xx));
	}

  inline float erfc(  float _Xx) noexcept
	{
	return (:: erfcf(_Xx));
	}

  inline float exp(  float _Xx) noexcept
	{
	return (:: expf(_Xx));
	}

  inline float exp2(  float _Xx) noexcept
	{
	return (:: exp2f(_Xx));
	}

  inline float expm1(  float _Xx) noexcept
	{
	return (:: expm1f(_Xx));
	}

  inline float fabs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline float fdim(  float _Xx,   float _Yx) noexcept
	{
	return (:: fdimf(_Xx, _Yx));
	}

  inline float floor(  float _Xx) noexcept
	{
	return (:: floorf(_Xx));
	}

  inline float fma(  float _Xx,   float _Yx,
	  float _Zx) noexcept
	{
	return (:: fmaf(_Xx, _Yx, _Zx));
	}

  inline float fmax(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmaxf(_Xx, _Yx));
	}

  inline float fmin(  float _Xx,   float _Yx) noexcept
	{
	return (:: fminf(_Xx, _Yx));
	}

  inline float fmod(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmodf(_Xx, _Yx));
	}

  inline float frexp(  float _Xx,   int* _Yx) noexcept
	{
	return (:: frexpf(_Xx, _Yx));
	}

  inline float hypot(  float _Xx,   float _Yx) noexcept
	{
	return (:: hypotf(_Xx, _Yx));
	}

  inline int ilogb(  float _Xx) noexcept
	{
	return (:: ilogbf(_Xx));
	}

  inline float ldexp(  float _Xx,   int _Yx) noexcept
	{
	return (:: ldexpf(_Xx, _Yx));
	}

  inline float lgamma(  float _Xx) noexcept
	{
	return (:: lgammaf(_Xx));
	}

  inline long long llrint(  float _Xx) noexcept
	{
	return (:: llrintf(_Xx));
	}

  inline long long llround(  float _Xx) noexcept
	{
	return (:: llroundf(_Xx));
	}

  inline float log(  float _Xx) noexcept
	{
	return (:: logf(_Xx));
	}

  inline float log10(  float _Xx) noexcept
	{
	return (:: log10f(_Xx));
	}

  inline float log1p(  float _Xx) noexcept
	{
	return (:: log1pf(_Xx));
	}

  inline float log2(  float _Xx) noexcept
	{
	return (:: log2f(_Xx));
	}

  inline float logb(  float _Xx) noexcept
	{
	return (:: logbf(_Xx));
	}

  inline long lrint(  float _Xx) noexcept
	{
	return (:: lrintf(_Xx));
	}

  inline long lround(  float _Xx) noexcept
	{
	return (:: lroundf(_Xx));
	}

  inline float modf(  float _Xx,   float* _Yx) noexcept
	{
	return (:: modff(_Xx, _Yx));
	}

  inline float nearbyint(  float _Xx) noexcept
	{
	return (:: nearbyintf(_Xx));
	}

  inline float nextafter(  float _Xx,   float _Yx) noexcept
	{
	return (:: nextafterf(_Xx, _Yx));
	}

  inline float nexttoward(  float _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,
	  float _Yx) noexcept
	{
	return (:: powf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powf(_Xx, static_cast<float>(_Yx)));
	}

  inline float remainder(  float _Xx,   float _Yx) noexcept
	{
	return (:: remainderf(_Xx, _Yx));
	}

  inline float remquo(  float _Xx,   float _Yx,
	  int *_Zx) noexcept
	{
	return (:: remquof(_Xx, _Yx, _Zx));
	}

  inline float rint(  float _Xx) noexcept
	{
	return (:: rintf(_Xx));
	}

  inline float round(  float _Xx) noexcept
	{
	return (:: roundf(_Xx));
	}

  inline float scalbln(  float _Xx,   long _Yx) noexcept
	{
	return (:: scalblnf(_Xx, _Yx));
	}

  inline float scalbn(  float _Xx,   int _Yx) noexcept
	{
	return (:: scalbnf(_Xx, _Yx));
	}

  inline float sin(  float _Xx) noexcept
	{
	return (:: sinf(_Xx));
	}

  inline float sinh(  float _Xx) noexcept
	{
	return (:: sinhf(_Xx));
	}

  inline float sqrt(  float _Xx) noexcept
	{
	return (:: sqrtf(_Xx));
	}

  inline float tan(  float _Xx) noexcept
	{
	return (:: tanf(_Xx));
	}

  inline float tanh(  float _Xx) noexcept
	{
	return (:: tanhf(_Xx));
	}

  inline float tgamma(  float _Xx) noexcept
	{
	return (:: tgammaf(_Xx));
	}

  inline float trunc(  float _Xx) noexcept
	{
	return (:: truncf(_Xx));
	}

  inline long double abs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

  inline long double acos(  long double _Xx) noexcept
	{
	return (:: acosl(_Xx));
	}

  inline long double acosh(  long double _Xx) noexcept
	{
	return (:: acoshl(_Xx));
	}

  inline long double asin(  long double _Xx) noexcept
	{
	return (:: asinl(_Xx));
	}

  inline long double asinh(  long double _Xx) noexcept
	{
	return (:: asinhl(_Xx));
	}

  inline long double atan(  long double _Xx) noexcept
	{
	return (:: atanl(_Xx));
	}

  inline long double atanh(  long double _Xx) noexcept
	{
	return (:: atanhl(_Xx));
	}

  inline long double atan2(  long double _Yx,
	  long double _Xx) noexcept
	{
	return (:: atan2l(_Yx, _Xx));
	}

  inline long double cbrt(  long double _Xx) noexcept
	{
	return (:: cbrtl(_Xx));
	}

  inline long double ceil(  long double _Xx) noexcept
	{
	return (:: ceill(_Xx));
	}

  inline long double copysign(  long double _Number,
	  long double _Sign) noexcept
	{
	return (:: copysignl(_Number, _Sign));
	}

  inline long double cos(  long double _Xx) noexcept
	{
	return (:: cosl(_Xx));
	}

  inline long double cosh(  long double _Xx) noexcept
	{
	return (:: coshl(_Xx));
	}

  inline long double erf(  long double _Xx) noexcept
	{
	return (:: erfl(_Xx));
	}

  inline long double erfc(  long double _Xx) noexcept
	{
	return (:: erfcl(_Xx));
	}

  inline long double exp(  long double _Xx) noexcept
	{
	return (:: expl(_Xx));
	}

  inline long double exp2(  long double _Xx) noexcept
	{
	return (:: exp2l(_Xx));
	}

  inline long double expm1(  long double _Xx) noexcept
	{
	return (:: expm1l(_Xx));
	}

  inline long double fabs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

  inline long double fdim(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fdiml(_Xx, _Yx));
	}

  inline long double floor(  long double _Xx) noexcept
	{
	return (:: floorl(_Xx));
	}

  inline long double fma(  long double _Xx,
	  long double _Yx,   long double _Zx) noexcept
	{
	return (:: fmal(_Xx, _Yx, _Zx));
	}

  inline long double fmax(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmaxl(_Xx, _Yx));
	}

  inline long double fmin(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fminl(_Xx, _Yx));
	}

  inline long double fmod(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmodl(_Xx, _Yx));
	}

  inline long double frexp(  long double _Xx,
	  int* _Yx) noexcept
	{
	return (:: frexpl(_Xx, _Yx));
	}

  inline long double hypot(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: hypotl(_Xx, _Yx));
	}

  inline int ilogb(  long double _Xx) noexcept
	{
	return (:: ilogbl(_Xx));
	}

  inline long double ldexp(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: ldexpl(_Xx, _Yx));
	}

  inline long double lgamma(  long double _Xx) noexcept
	{
	return (:: lgammal(_Xx));
	}

  inline long long llrint(  long double _Xx) noexcept
	{
	return (:: llrintl(_Xx));
	}

  inline long long llround(  long double _Xx) noexcept
	{
	return (:: llroundl(_Xx));
	}

  inline long double log(  long double _Xx) noexcept
	{
	return (:: logl(_Xx));
	}

  inline long double log10(  long double _Xx) noexcept
	{
	return (:: log10l(_Xx));
	}

  inline long double log1p(  long double _Xx) noexcept
	{
	return (:: log1pl(_Xx));
	}

  inline long double log2(  long double _Xx) noexcept
	{
	return (:: log2l(_Xx));
	}

  inline long double logb(  long double _Xx) noexcept
	{
	return (:: logbl(_Xx));
	}

  inline long lrint(  long double _Xx) noexcept
	{
	return (:: lrintl(_Xx));
	}

  inline long lround(  long double _Xx) noexcept
	{
	return (:: lroundl(_Xx));
	}

  inline long double modf(  long double _Xx,
	  long double* _Yx) noexcept
	{
	return (:: modfl(_Xx, _Yx));
	}

  inline long double nearbyint(  long double _Xx) noexcept
	{
	return (:: nearbyintl(_Xx));
	}

  inline long double nextafter(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nextafterl(_Xx, _Yx));
	}

  inline long double nexttoward(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: powl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powl(_Xx, static_cast<long double>(_Yx)));
	}

  inline long double remainder(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: remainderl(_Xx, _Yx));
	}

  inline long double remquo(  long double _Xx,
	  long double _Yx,   int *_Zx) noexcept
	{
	return (:: remquol(_Xx, _Yx, _Zx));
	}

  inline long double rint(  long double _Xx) noexcept
	{
	return (:: rintl(_Xx));
	}

  inline long double round(  long double _Xx) noexcept
	{
	return (:: roundl(_Xx));
	}

  inline long double scalbln(  long double _Xx,
	  long _Yx) noexcept
	{
	return (:: scalblnl(_Xx, _Yx));
	}

  inline long double scalbn(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: scalbnl(_Xx, _Yx));
	}

  inline long double sin(  long double _Xx) noexcept
	{
	return (:: sinl(_Xx));
	}

  inline long double sinh(  long double _Xx) noexcept
	{
	return (:: sinhl(_Xx));
	}

  inline long double sqrt(  long double _Xx) noexcept
	{
	return (:: sqrtl(_Xx));
	}

  inline long double tan(  long double _Xx) noexcept
	{
	return (:: tanl(_Xx));
	}

  inline long double tanh(  long double _Xx) noexcept
	{
	return (:: tanhl(_Xx));
	}

  inline long double tgamma(  long double _Xx) noexcept
	{
	return (:: tgammal(_Xx));
	}

  inline long double trunc(  long double _Xx) noexcept
	{
	return (:: truncl(_Xx));
	}

 






 


 
#pragma once





#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
	
struct _Nil
	{	
	};

	
template<class _Ty,
	_Ty _Val>
	struct integral_constant
	{	
	static constexpr _Ty value = _Val;

	typedef _Ty value_type;
	typedef integral_constant<_Ty, _Val> type;

	constexpr operator value_type() const noexcept
		{	
		return (value);
		}

	constexpr value_type operator()() const noexcept
		{	
		return (value);
		}
	};

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

	
template<bool _Val>
	using bool_constant = integral_constant<bool, _Val>;

	
template<bool _Val>
	struct _Cat_base
		: integral_constant<bool, _Val>
	{	
	};

	
template<bool _Test,
	class _Ty = void>
	struct enable_if
	{	
	};

template<class _Ty>
	struct enable_if<true, _Ty>
	{	
	typedef _Ty type;
	};

	
template<bool _Test,
	class _Ty1,
	class _Ty2>
	struct conditional
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct conditional<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

	
template<class _Ty1,
	class _Ty2>
	struct is_same
		: false_type
	{	
	};

template<class _Ty1>
	struct is_same<_Ty1, _Ty1>
		: true_type
	{	
	};

 
template<class _Ty,
	class _Uty>
	constexpr bool is_same_v = is_same<_Ty, _Uty>::value;
 

	
template<class _Ty>
	struct remove_const
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_const<const _Ty>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_volatile
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_cv
	{	
	typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
		type;
	};

	
template<class _Ty>
	struct _Is_integral
		: false_type
	{	
	};

template<>
	struct _Is_integral<bool>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed char>
		: true_type
	{	
	};

 
template<>
	struct _Is_integral<wchar_t>
		: true_type
	{	
	};
 

template<>
	struct _Is_integral<unsigned short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char16_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char32_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<long long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long long>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_integral
		: _Is_integral<typename remove_cv<_Ty>::type>
	{	
	};

 
template<class _Ty>
	constexpr bool is_integral_v = is_integral<_Ty>::value;
 

	
template<class _Ty>
	struct _Is_floating_point
		: false_type
	{	
	};

template<>
	struct _Is_floating_point<float>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<double>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<long double>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_floating_point
		: _Is_floating_point<typename remove_cv<_Ty>::type>
	{	
	};

 
template<class _Ty>
	constexpr bool is_floating_point_v = is_floating_point<_Ty>::value;
 

	
template<class _Ty>
	struct is_arithmetic
		: _Cat_base<is_integral<_Ty>::value
			|| is_floating_point<_Ty>::value>
	{	
	};

 
template<class _Ty>
	constexpr bool is_arithmetic_v = is_arithmetic<_Ty>::value;
 

	
template<class _Ty>
	struct remove_reference
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_reference<_Ty&>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_reference<_Ty&&>
	{	
	typedef _Ty type;
	};

	
struct _Wrap_int
	{	
	_Wrap_int(int)
		{	
		}
	};

template<class _Ty>
	struct _Identity
	{	
	typedef _Ty type;
	};














}
 
 #pragma warning(pop)
 #pragma pack(pop)









 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
template<class _Ty>
	struct _Promote_to_float
	{	
	typedef typename conditional<is_integral<_Ty>::value,
		double, _Ty>::type type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Common_float_type
	{	
	typedef typename _Promote_to_float<_Ty1>::type _Ty1f;
	typedef typename _Promote_to_float<_Ty2>::type _Ty2f;
	typedef typename conditional<is_same<_Ty1f, long double>::value
		|| is_same<_Ty2f, long double>::value, long double,
		typename conditional<is_same<_Ty1f, double>::value
			|| is_same<_Ty2f, double>::value, double,
			float>::type>::type type;
	};
}








































template<class _Ty1,
	class _Ty2> inline
	typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value
		&& ::std:: is_arithmetic<_Ty2>::value,
		typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type
	pow(const _Ty1 _Left, const _Ty2 _Right)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
	return (:: pow(type(_Left), type(_Right)));
	}


extern "C"    double __cdecl acos(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acos(_Ty _Left) { return (:: acos((double)_Left)); }
extern "C"    double __cdecl asin(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asin(_Ty _Left) { return (:: asin((double)_Left)); }
extern "C"    double __cdecl atan(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atan(_Ty _Left) { return (:: atan((double)_Left)); }
extern "C"    double __cdecl atan2(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type atan2(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: atan2((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl ceil(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ceil(_Ty _Left) { return (:: ceil((double)_Left)); }
extern "C"    double __cdecl cos(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cos(_Ty _Left) { return (:: cos((double)_Left)); }
extern "C"    double __cdecl cosh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cosh(_Ty _Left) { return (:: cosh((double)_Left)); }
extern "C"    double __cdecl exp(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp(_Ty _Left) { return (:: exp((double)_Left)); }

extern "C"    double __cdecl fabs(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type fabs(_Ty _Left) { return (:: fabs((double)_Left)); }

extern "C"   __declspec(dllimport) double __cdecl floor(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type floor(_Ty _Left) { return (:: floor((double)_Left)); }
extern "C"    double __cdecl fmod(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmod(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmod((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl frexp(  double,   int *); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type frexp(_Ty _Left,   int * _Arg2) { return (:: frexp((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl ldexp(  double,   int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ldexp(_Ty _Left,   int _Arg2) { return (:: ldexp((double)_Left, _Arg2)); }
extern "C"    double __cdecl log(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log(_Ty _Left) { return (:: log((double)_Left)); }
extern "C"    double __cdecl log10(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log10(_Ty _Left) { return (:: log10((double)_Left)); }


extern "C"    double __cdecl sin(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sin(_Ty _Left) { return (:: sin((double)_Left)); }
extern "C"    double __cdecl sinh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sinh(_Ty _Left) { return (:: sinh((double)_Left)); }
extern "C"    double __cdecl sqrt(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sqrt(_Ty _Left) { return (:: sqrt((double)_Left)); }
extern "C"    double __cdecl tan(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tan(_Ty _Left) { return (:: tan((double)_Left)); }
extern "C"    double __cdecl tanh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tanh(_Ty _Left) { return (:: tanh((double)_Left)); }

		









		

inline float _Fma(float _Left, float _Middle, float _Right)
	{	
	return (:: fmaf(_Left, _Middle, _Right));
	}

inline double _Fma(double _Left, double _Middle, double _Right)
	{	
	return (:: fma(_Left, _Middle, _Right));
	}

inline long double _Fma(long double _Left, long double _Middle,
	long double _Right)
	{	
	return (:: fmal(_Left, _Middle, _Right));
	}

template<class _Ty1,
	class _Ty2,
	class _Ty3> inline
	typename ::std:: _Common_float_type<_Ty1,
		typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type
	fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1,
		typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type type;
	return (_Fma((type)_Left, (type)_Middle, (type)_Right));
	}

		

inline float _Remquo(float _Left, float _Right, int *_Pquo)
	{	
	return (:: remquof(_Left, _Right, _Pquo));
	}

inline double _Remquo(double _Left, double _Right, int *_Pquo)
	{	
	return (:: remquo(_Left, _Right, _Pquo));
	}

inline long double _Remquo(long double _Left, long double _Right, int *_Pquo)
	{	
	return (:: remquol(_Left, _Right, _Pquo));
	}

template<class _Ty1,
	class _Ty2> inline
	typename ::std:: _Common_float_type<_Ty1, _Ty2>::type
	remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
	return (_Remquo((type)_Left, (type)_Right, _Pquo));
	}

extern "C"   __declspec(dllimport) double __cdecl acosh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acosh(_Ty _Left) { return (:: acosh((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl asinh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asinh(_Ty _Left) { return (:: asinh((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl atanh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atanh(_Ty _Left) { return (:: atanh((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl cbrt(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cbrt(_Ty _Left) { return (:: cbrt((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl copysign(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type copysign(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: copysign((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl erf(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erf(_Ty _Left) { return (:: erf((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl erfc(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erfc(_Ty _Left) { return (:: erfc((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl expm1(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type expm1(_Ty _Left) { return (:: expm1((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl exp2(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp2(_Ty _Left) { return (:: exp2((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl fdim(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fdim(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fdim((type)_Left, (type)_Right)); }

extern "C"   __declspec(dllimport) double __cdecl fmax(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmax(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmax((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl fmin(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmin(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmin((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl hypot(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type hypot(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: hypot((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) int __cdecl ilogb(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, int>::type ilogb(_Ty _Left) { return (:: ilogb((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl lgamma(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type lgamma(_Ty _Left) { return (:: lgamma((double)_Left)); }
extern "C"   __declspec(dllimport) long long __cdecl llrint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llrint(_Ty _Left) { return (:: llrint((double)_Left)); }
extern "C"   __declspec(dllimport) long long __cdecl llround(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llround(_Ty _Left) { return (:: llround((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl log1p(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log1p(_Ty _Left) { return (:: log1p((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl log2(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log2(_Ty _Left) { return (:: log2((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl logb(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type logb(_Ty _Left) { return (:: logb((double)_Left)); }
extern "C"   __declspec(dllimport) long __cdecl lrint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lrint(_Ty _Left) { return (:: lrint((double)_Left)); }
extern "C"   __declspec(dllimport) long __cdecl lround(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lround(_Ty _Left) { return (:: lround((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl nearbyint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nearbyint(_Ty _Left) { return (:: nearbyint((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl nextafter(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type nextafter(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: nextafter((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl nexttoward(  double,   long double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nexttoward(_Ty _Left,   long double _Arg2) { return (:: nexttoward((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl remainder(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type remainder(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: remainder((type)_Left, (type)_Right)); }

extern "C"   __declspec(dllimport) double __cdecl rint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type rint(_Ty _Left) { return (:: rint((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl round(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type round(_Ty _Left) { return (:: round((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl scalbln(  double,   long); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbln(_Ty _Left,   long _Arg2) { return (:: scalbln((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl scalbn(  double,   int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbn(_Ty _Left,   int _Arg2) { return (:: scalbn((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl tgamma(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tgamma(_Ty _Left) { return (:: tgamma((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl trunc(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type trunc(_Ty _Left) { return (:: trunc((double)_Left)); }

 
 #pragma warning(pop)
 #pragma pack(pop)


 








 
namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}
 










#pragma once










 









#pragma once











#pragma once










#pragma once




__pragma(pack(push, 8)) extern "C" {



__declspec(dllimport) extern int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);



__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno(  unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno(  unsigned long * _Value);










































    
    
    
    
    







    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    




} __pragma(pack(pop))









#pragma once





































































































































































































































































































































__pragma(pack(push, 8)) extern "C" {



 
__declspec(dllimport) void const* __cdecl memchr(
      void const* _Buf,
                                 int         _Val,
                                 size_t      _MaxCount
    );

 
int __cdecl memcmp(
      void const* _Buf1,
      void const* _Buf2,
                         size_t      _Size
    );


 

void* __cdecl memcpy(
      void* _Dst,
            void const* _Src,
                               size_t      _Size
    );


__declspec(dllimport) void* __cdecl memmove(
      void*       _Dst,
            void const* _Src,
                                   size_t      _Size
    );

 

void* __cdecl memset(
      void*  _Dst,
                               int    _Val,
                               size_t _Size
    );

 
__declspec(dllimport) char const* __cdecl strchr(
      char const* _Str,
        int         _Val
    );

 
__declspec(dllimport) char const* __cdecl strrchr(
      char const* _Str,
        int         _Ch
    );

   
__declspec(dllimport) char const* __cdecl strstr(
      char const* _Str,
      char const* _SubStr
    );

 

__declspec(dllimport) wchar_t const* __cdecl wcschr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

 
__declspec(dllimport) wchar_t const* __cdecl wcsrchr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

   

__declspec(dllimport) wchar_t const* __cdecl wcsstr(
      wchar_t const* _Str,
      wchar_t const* _SubStr
    );



} __pragma(pack(pop))




__pragma(pack(push, 8)) extern "C" {


    















     
    
    static __inline errno_t __cdecl memcpy_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

            
            return 22;
        }

        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }

    
    static __inline errno_t __cdecl memmove_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }





} __pragma(pack(pop))










#pragma once










#pragma once





__pragma(pack(push, 8)) extern "C" {






    





    


































    


        #pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
    




   
__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}



   
__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}



















} __pragma(pack(pop))




__pragma(pack(push, 8)) extern "C" {









    
     
    __declspec(dllimport) errno_t __cdecl _cgetws_s(
          wchar_t* _Buffer,
                                               size_t   _BufferCount,
                                              size_t*  _SizeRead
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl _cgetws_s(  wchar_t (&_Buffer)[_Size],   size_t* _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }

    
    __declspec(dllimport) int __cdecl _cputws(
          wchar_t const* _Buffer
        );

          __declspec(dllimport) wint_t __cdecl _getwch  (void);
          __declspec(dllimport) wint_t __cdecl _getwche (void);
     __declspec(dllimport) wint_t __cdecl _putwch  (  wchar_t _Character);
     __declspec(dllimport) wint_t __cdecl _ungetwch(  wint_t  _Character);

          __declspec(dllimport) wint_t __cdecl _getwch_nolock  (void);
          __declspec(dllimport) wint_t __cdecl _getwche_nolock (void);
     __declspec(dllimport) wint_t __cdecl _putwch_nolock  (  wchar_t _Character);
     __declspec(dllimport) wint_t __cdecl _ungetwch_nolock(  wint_t  _Character);



    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vcwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )



    {
        return __conio_common_vcwprintf((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }


    
    __inline int __cdecl _vcwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vcwprintf_l(_Format, 0, _ArgList);
    }


    
    __inline int __cdecl _vcwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )



    {
        return __conio_common_vcwprintf_s((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }


    
    __inline int __cdecl _vcwprintf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vcwprintf_s_l(_Format, 0, _ArgList);
    }


    
    __inline int __cdecl _vcwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )



    {
        return __conio_common_vcwprintf_p((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }


    
    __inline int __cdecl _vcwprintf_p(
            const wchar_t* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vcwprintf_p_l(_Format, 0, _ArgList);
    }


    
    __inline int __cdecl _cwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    
    __inline int __cdecl _cwprintf(
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    
    __inline int __cdecl _cwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    
    __inline int __cdecl _cwprintf_s(
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    
    __inline int __cdecl _cwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    
    __inline int __cdecl _cwprintf_p(
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __conio_common_vcwscanf(
                                            unsigned __int64 _Options,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )



    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()),
            _Format, _Locale, _ArgList);
    }


     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf(
            wchar_t const* const _Format,
                                               va_list              _ArgList
        )



    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vcwscanf_l(_Format, 0, _ArgList);
        #pragma warning(pop)
    }


    
    __inline int __cdecl _vcwscanf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )



    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Format, _Locale, _ArgList);
    }


    
    __inline int __cdecl _vcwscanf_s(
            wchar_t const* const _Format,
                                               va_list              _ArgList
        )



    {
        return _vcwscanf_s_l(_Format, 0, _ArgList);
    }


     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vcwscanf_l(_Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf(
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vcwscanf_l(_Format, 0, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    
    __inline int __cdecl _cwscanf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwscanf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    
    __inline int __cdecl _cwscanf_s(
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwscanf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }






} __pragma(pack(pop))










#pragma once



__pragma(pack(push, 8)) extern "C" {











    


        
    

    __declspec(dllimport) const unsigned short* __cdecl __pctype_func(void);
    __declspec(dllimport) const wctype_t*       __cdecl __pwctype_func(void);

    



        
        
    






















  __declspec(dllimport) int __cdecl iswalnum  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswalpha  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswascii  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswblank  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswcntrl  (  wint_t _C);


  __declspec(dllimport) int __cdecl iswdigit  (  wint_t _C);

  __declspec(dllimport) int __cdecl iswgraph  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswlower  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswprint  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswpunct  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswspace  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswupper  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswxdigit (  wint_t _C);
  __declspec(dllimport) int __cdecl __iswcsymf(  wint_t _C);
  __declspec(dllimport) int __cdecl __iswcsym (  wint_t _C);

  __declspec(dllimport) int __cdecl _iswalnum_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswalpha_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswblank_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcntrl_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswdigit_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswgraph_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswlower_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswprint_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswpunct_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswspace_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswupper_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswxdigit_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcsymf_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcsym_l  (  wint_t _C,   _locale_t _Locale);


  __declspec(dllimport) wint_t __cdecl towupper(  wint_t _C);
  __declspec(dllimport) wint_t __cdecl towlower(  wint_t _C);
  __declspec(dllimport) int    __cdecl iswctype(  wint_t _C,   wctype_t _Type);

  __declspec(dllimport) wint_t __cdecl _towupper_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) wint_t __cdecl _towlower_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int    __cdecl _iswctype_l(  wint_t _C,   wctype_t _Type,   _locale_t _Locale);



      __declspec(dllimport) int __cdecl isleadbyte(  int _C);
      __declspec(dllimport) int __cdecl _isleadbyte_l(  int _C,   _locale_t _Locale);

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "iswctype" " " "instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype(  wint_t _C,   wctype_t _Type);























































































} __pragma(pack(pop))










#pragma once



__pragma(pack(push, 8)) extern "C" {






 
   
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd(
      wchar_t* _DstBuf,
                                  int      _SizeInWords
    );

 
   
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd(
                                  int      _Drive,
      wchar_t* _DstBuf,
                                  int      _SizeInWords
    );






 
__declspec(dllimport) int __cdecl _wchdir(
      wchar_t const* _Path
    );

 
__declspec(dllimport) int __cdecl _wmkdir(
      wchar_t const* _Path
    );

 
__declspec(dllimport) int __cdecl _wrmdir(
      wchar_t const* _Path
    );



} __pragma(pack(pop))










#pragma once











#pragma once












    
    
    
    



__pragma(pack(push, 8)) extern "C" {



#pragma warning(push)
#pragma warning(disable:4820) 












    
    


typedef unsigned long _fsize_t;

struct _wfinddata32_t
{
    unsigned   attrib;
    __time32_t time_create;    
    __time32_t time_access;    
    __time32_t time_write;
    _fsize_t   size;
    wchar_t    name[260];
};

struct _wfinddata32i64_t
{
    unsigned   attrib;
    __time32_t time_create;    
    __time32_t time_access;    
    __time32_t time_write;
    __int64    size;
    wchar_t    name[260];
};

struct _wfinddata64i32_t
{
    unsigned   attrib;
    __time64_t time_create;    
    __time64_t time_access;    
    __time64_t time_write;
    _fsize_t   size;
    wchar_t    name[260];
};

struct _wfinddata64_t
{
    unsigned   attrib;
    __time64_t time_create;    
    __time64_t time_access;    
    __time64_t time_write;
    __int64    size;
    wchar_t    name[260];
};














    
    
    
    


 
__declspec(dllimport) int __cdecl _waccess(
      wchar_t const* _FileName,
        int            _AccessMode
    );


__declspec(dllimport) errno_t __cdecl _waccess_s(
      wchar_t const* _FileName,
        int            _AccessMode
    );

 
__declspec(dllimport) int __cdecl _wchmod(
      wchar_t const* _FileName,
        int            _Mode
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wcreat(
      wchar_t const* _FileName,
        int            _PermissionMode
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst32(
      wchar_t const*         _FileName,
       struct _wfinddata32_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext32(
       intptr_t               _FindHandle,
      struct _wfinddata32_t* _FindData
    );

__declspec(dllimport) int __cdecl _wunlink(
      wchar_t const* _FileName
    );

 
__declspec(dllimport) int __cdecl _wrename(
      wchar_t const* _OldFileName,
      wchar_t const* _NewFileName
    );

__declspec(dllimport) errno_t __cdecl _wmktemp_s(
      wchar_t* _TemplateName,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }

 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wmktemp( wchar_t *_TemplateName);

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(
      wchar_t const*            _FileName,
       struct _wfinddata32i64_t* _FindData
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(
      wchar_t const*            _FileName,
       struct _wfinddata64i32_t* _FindData
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst64(
      wchar_t const*         _FileName,
       struct _wfinddata64_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext32i64(
       intptr_t                  _FindHandle,
      struct _wfinddata32i64_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext64i32(
       intptr_t                  _FindHandle,
      struct _wfinddata64i32_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext64(
       intptr_t               _FindHandle,
      struct _wfinddata64_t* _FindData
    );


__declspec(dllimport) errno_t __cdecl _wsopen_s(
       int*           _FileHandle,
      wchar_t const* _FileName,
        int            _OpenFlag,
        int            _ShareFlag,
        int            _PermissionFlag
    );

__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(
      wchar_t const* _FileName,
        int            _OFlag,
        int            _ShFlag,
        int            _PMode,
       int*           _PFileHandle,
        int            _BSecure
    );





    
    extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wopen(
          wchar_t const* _FileName,
            int            _OFlag,
            int            _PMode = 0
        )
    {
        int _FileHandle;
        
        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

    extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wsopen(
          wchar_t const* _FileName,
            int            _OFlag,
            int            _ShFlag,
            int            _PMode = 0
        )
    {
        int _FileHandle;
        
        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }





















#pragma warning(pop)



} __pragma(pack(pop))










#pragma once



__pragma(pack(push, 8)) extern "C" {


    


    __declspec(dllimport) intptr_t __cdecl _wexecl(
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexecle(
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexeclp(
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexeclpe(
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexecv(
          wchar_t const*        _FileName,
          wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wexecve(
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList,
          wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wexecvp(
          wchar_t const*        _FileName,
          wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wexecvpe(
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList,
          wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnl(
            int            _Mode,
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnle(
            int            _Mode,
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnlp(
            int            _Mode,
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnlpe(
            int            _Mode,
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnv(
            int                   _Mode,
          wchar_t const*        _FileName,
          wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnve(
                int                   _Mode,
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList,
          wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnvp(
            int                   _Mode,
          wchar_t const*        _FileName,
          wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnvpe(
                int                   _Mode,
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList,
          wchar_t const* const* _Env
        );

    __declspec(dllimport) int __cdecl _wsystem(
          wchar_t const* _Command
        );





} __pragma(pack(pop))











#pragma once




__pragma(pack(push, 8)) extern "C" {








    
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;


__declspec(dllimport) FILE* __cdecl __acrt_iob_func(unsigned);















__declspec(dllimport) wint_t __cdecl fgetwc(
      FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fgetwchar(void);


__declspec(dllimport) wint_t __cdecl fputwc(
         wchar_t _Character,
      FILE*   _Stream);


__declspec(dllimport) wint_t __cdecl _fputwchar(
      wchar_t _Character
    );

 
__declspec(dllimport) wint_t __cdecl getwc(
      FILE* _Stream
    );

 
__declspec(dllimport) wint_t __cdecl getwchar(void);



 
__declspec(dllimport) wchar_t* __cdecl fgetws(
      wchar_t* _Buffer,
                              int      _BufferCount,
                           FILE*    _Stream
    );


__declspec(dllimport) int __cdecl fputws(
       wchar_t const* _Buffer,
      FILE*          _Stream
    );


 
__declspec(dllimport) wchar_t* __cdecl _getws_s(
      wchar_t* _Buffer,
                              size_t   _BufferCount
    );

extern "C++" { template <size_t _Size> inline   wchar_t* __cdecl _getws_s(  wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }


__declspec(dllimport) wint_t __cdecl putwc(
         wchar_t _Character,
      FILE*   _Stream
    );


__declspec(dllimport) wint_t __cdecl putwchar(
      wchar_t _Character
    );


__declspec(dllimport) int __cdecl _putws(
      wchar_t const* _Buffer
    );


__declspec(dllimport) wint_t __cdecl ungetwc(
         wint_t _Character,
      FILE*  _Stream
    );

 
__declspec(dllimport) FILE * __cdecl _wfdopen(
        int            _FileHandle,
      wchar_t const* _Mode
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl _wfopen(
      wchar_t const* _FileName,
      wchar_t const* _Mode
    );


__declspec(dllimport) errno_t __cdecl _wfopen_s(
      FILE**         _Stream,
                         wchar_t const* _FileName,
                         wchar_t const* _Mode
    );

 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl _wfreopen(
       wchar_t const* _FileName,
       wchar_t const* _Mode,
      FILE*          _OldStream
    );


__declspec(dllimport) errno_t __cdecl _wfreopen_s(
      FILE**         _Stream,
                         wchar_t const* _FileName,
                         wchar_t const* _Mode,
                        FILE*          _OldStream
    );

 
__declspec(dllimport) FILE* __cdecl _wfsopen(
      wchar_t const* _FileName,
      wchar_t const* _Mode,
        int            _ShFlag
    );

__declspec(dllimport) void __cdecl _wperror(
      wchar_t const* _ErrorMessage
    );



     
    __declspec(dllimport) FILE* __cdecl _wpopen(
          wchar_t const* _Command,
          wchar_t const* _Mode
        );



__declspec(dllimport) int __cdecl _wremove(
      wchar_t const* _FileName
    );




 
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam(
      wchar_t const* _Directory,
      wchar_t const* _FilePrefix
    );



 

__declspec(dllimport) errno_t __cdecl _wtmpnam_s(
      wchar_t* _Buffer,
                              size_t   _BufferCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wtmpnam(  wchar_t *_Buffer);









__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(
      FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fputwc_nolock(
         wchar_t _Character, 
      FILE*   _Stream
    );


__declspec(dllimport) wint_t __cdecl _getwc_nolock(
      FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _putwc_nolock(
         wchar_t _Character,
      FILE*   _Stream
    );


__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(
         wint_t _Character,
      FILE*  _Stream
    );






















__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__inline int __cdecl _vfwprintf_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfwprintf(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )



{
    return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfwprintf_s_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}




    
    __inline int __cdecl vfwprintf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
    }





__inline int __cdecl _vfwprintf_p_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl _vfwprintf_p(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )



{
    return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vwprintf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )



{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _vwprintf_s_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}




    
    __inline int __cdecl vwprintf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }





__inline int __cdecl _vwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl _vwprintf_p(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )



{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _fwprintf_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl fwprintf(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fwprintf_s_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




    
    __inline int __cdecl fwprintf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _fwprintf_p_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fwprintf_p(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl wprintf(
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wprintf_s_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




    
    __inline int __cdecl wprintf_s(
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _wprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wprintf_p(
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}









__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(
                                        unsigned __int64 _Options,
                                     FILE*            _Stream,
        wchar_t const*   _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );


__inline int __cdecl _vfwscanf_l(
      FILE*                                const _Stream,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )



{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfwscanf(
      FILE*                                const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )



{
    return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfwscanf_s_l(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )



{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}




    
    __inline int __cdecl vfwscanf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
    }




__inline int __cdecl _vwscanf_l(
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )



{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vwscanf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )



{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}



__inline int __cdecl _vwscanf_s_l(
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )



{
    return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}




    
    __inline int __cdecl vwscanf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }




 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _fwscanf_l(
                                     FILE*          const _Stream,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


  __declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl fwscanf(
                           FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fwscanf_s_l(
                                       FILE*          const _Stream,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




    
    __inline int __cdecl fwscanf_s(
                                 FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _wscanf_l(
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


  __declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl wscanf(
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wscanf_s_l(
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




    
    __inline int __cdecl wscanf_s(
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }












    







 

__declspec(dllimport) int __cdecl __stdio_common_vswprintf(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
                                         size_t           _MaxCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnwprintf_l(
           wchar_t*       const _Buffer,
                                             size_t         const _BufferCount,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


#pragma warning(push)
#pragma warning(disable: 4793)

 

__inline int __cdecl _vsnwprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
                                         size_t         const _MaxCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    int const _Result = __stdio_common_vsnwprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


 

__inline int __cdecl _vsnwprintf_s(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
                               size_t         const _MaxCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )



{
    return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _snwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _vsnwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, va_list _Args);

#pragma warning(pop)

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnwprintf(
        wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                   wchar_t const* _Format,
                                             va_list        _ArgList
    )



{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)
}


extern "C++" { template <size_t _Size> inline   int __cdecl _vsnwprintf_s(  wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }

 

__inline int __cdecl _vswprintf_c_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


 

__inline int __cdecl _vswprintf_c(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )



{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}


 

__inline int __cdecl _vswprintf_l(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)
}


 

__inline int __cdecl __vswprintf_l(
                         wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}


 

__inline int __cdecl _vswprintf(
               wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )



{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
}


 

__inline int __cdecl vswprintf(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                            va_list              _ArgList
    )



{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}


 

__inline int __cdecl _vswprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




     
    __inline int __cdecl vswprintf_s(
           wchar_t*       const _Buffer,
                                   size_t         const _BufferCount,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }




extern "C++" { template <size_t _Size> inline   int __cdecl vswprintf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }

 

__inline int __cdecl _vswprintf_p_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


 

__inline int __cdecl _vswprintf_p(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )



{
    return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}


 
 
__inline int __cdecl _vscwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


 
 
__inline int __cdecl _vscwprintf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )



{
    return _vscwprintf_l(_Format, 0, _ArgList);
}


 
 
__inline int __cdecl _vscwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


 
 
__inline int __cdecl _vscwprintf_p(
        wchar_t const* const _Format, 
                                  va_list              _ArgList
    )



{
    return _vscwprintf_p_l(_Format, 0, _ArgList);
}


 

__inline int __cdecl __swprintf_l(
                         wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _swprintf_l(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _swprintf(
               wchar_t*       const _Buffer,
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl swprintf(
               wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


#pragma warning(push)


#pragma warning(disable:4793 4996)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl __swprintf_l(    wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl __vswprintf_l(    wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, va_list _Args);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _swprintf(    wchar_t *_Buffer,     wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _vswprintf(    wchar_t *_Buffer,     wchar_t const* _Format, va_list _Args);

#pragma warning(pop)

 

__inline int __cdecl _swprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




     
    __inline int __cdecl swprintf_s(
           wchar_t*       const _Buffer,
                                   size_t         const _BufferCount,
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl swprintf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }

 

__inline int __cdecl _swprintf_p_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _swprintf_p(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _swprintf_c_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _swprintf_c(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snwprintf_l(
        wchar_t*       const _Buffer,
                                          size_t         const _BufferCount,
         wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _snwprintf(
        wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                   wchar_t const* _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _snwprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
                                         size_t         const _MaxCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _snwprintf_s(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
                               size_t         const _MaxCount,
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snwprintf_s(  wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }

 
__inline int __cdecl _scwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 
 
__inline int __cdecl _scwprintf(
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscwprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 
 
__inline int __cdecl _scwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 
 
__inline int __cdecl _scwprintf_p(
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




    #pragma warning(push)
    #pragma warning(disable: 4141 4412 4793 4996 6054)

    

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int swprintf(
                       wchar_t*       const _Buffer,
                wchar_t const* const _Format,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            #pragma warning(suppress: 28719)
            _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);       
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int __cdecl vswprintf(
                       wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            ) throw()
        {
            #pragma warning(suppress: 28719)
            return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int _swprintf_l(
                                 wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                             _locale_t      const _Locale,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
            _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int __cdecl _vswprintf_l(
                                 wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                             _locale_t      const _Locale,
                                                    va_list              _ArgList
            ) throw()
        {
            return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
        }

    

    #pragma warning(pop)















 
__declspec(dllimport) int __cdecl __stdio_common_vswscanf(
                                        unsigned __int64 _Options,
              wchar_t const*   _Buffer,
                                        size_t           _BufferCount,
        wchar_t const*   _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );

 

__inline int __cdecl _vswscanf_l(
                             wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}


 

__inline int __cdecl vswscanf(
                             wchar_t const* _Buffer,
        wchar_t const* _Format,
                                  va_list        _ArgList
    )



{
    return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
}


 

__inline int __cdecl _vswscanf_s_l(
                             wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}




     
    
    __inline int __cdecl vswscanf_s(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }




extern "C++" { template <size_t _Size> inline   int __cdecl vswscanf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _Args) throw() { return vswscanf_s(_Buffer, _Size, _Format, _Args); } }

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnwscanf_l(
              wchar_t const* const _Buffer,
                                        size_t         const _BufferCount,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
                                           va_list              _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}


 

__inline int __cdecl _vsnwscanf_s_l(
                wchar_t const* const _Buffer,
                                          size_t         const _BufferCount,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
                                             va_list              _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}


 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _swscanf_l(
                                      wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                                    _locale_t            _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl swscanf(
                            wchar_t const* const _Buffer,
        wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _swscanf_s_l(
                                        wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




     
    
    __inline int __cdecl swscanf_s(
                                  wchar_t const* const _Buffer,
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);  
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snwscanf_l(
              wchar_t const* const _Buffer,
                                        size_t         const _BufferCount,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snwscanf(
        wchar_t const* const _Buffer,
                                  size_t         const _BufferCount,
            wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _snwscanf_s_l(
                wchar_t const* const _Buffer,
                                          size_t         const _BufferCount,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _snwscanf_s(
         wchar_t const* const _Buffer,
                                   size_t         const _BufferCount,
           wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}








} __pragma(pack(pop))












#pragma once






__pragma(pack(push, 8)) extern "C" {










    
    __declspec(dllimport) errno_t __cdecl wcscat_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl wcscpy_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );
    
    
    __declspec(dllimport) errno_t __cdecl wcsncat_s(
          wchar_t*       _Destination,
                                     rsize_t        _SizeInWords,
               wchar_t const* _Source,
                                     rsize_t        _MaxCount
        );
    
    
    __declspec(dllimport) errno_t __cdecl wcsncpy_s(
          wchar_t*       _Destination,
                                  rsize_t        _SizeInWords,
            wchar_t const* _Source,
                                  rsize_t        _MaxCount
        );
    
     
    __declspec(dllimport) wchar_t* __cdecl wcstok_s(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
            wchar_t**      _Context
        );















 
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup(
      wchar_t const* _String
    );







extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }



    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscat( wchar_t *_Destination,  wchar_t const* _Source);



 
__declspec(dllimport) int __cdecl wcscmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscpy( wchar_t *_Destination,  wchar_t const* _Source);

 
__declspec(dllimport) size_t __cdecl wcscspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
__declspec(dllimport) size_t __cdecl wcslen(
      wchar_t const* _String
    );

 


__declspec(dllimport) size_t __cdecl wcsnlen(
      wchar_t const* _Source,
                            size_t         _MaxCount
    );



     
    
    
    static __inline size_t __cdecl wcsnlen_s(
          wchar_t const* _Source,
                                size_t         _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(  wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncat(  wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);

 
__declspec(dllimport) int __cdecl wcsncmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncpy(    wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);

 
__declspec(dllimport) wchar_t const* __cdecl wcspbrk(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
__declspec(dllimport) size_t __cdecl wcsspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl wcstok(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
        wchar_t**      _Context
    );



    


        



    

    #pragma warning(push)
    #pragma warning(disable: 4141 4996) 

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    static __inline wchar_t* __cdecl _wcstok(
          wchar_t*       const _String,
                 wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }

    



    
        extern "C++"   __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK.")) 
        inline wchar_t* __cdecl wcstok(
              wchar_t*       _String,
                     wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }
    

    #pragma warning(pop)





 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wcserror(
      int _ErrorNumber
    );


__declspec(dllimport) errno_t __cdecl _wcserror_s(
      wchar_t* _Buffer,
                                  size_t   _SizeInWords,
                                  int      _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl __wcserror(
      wchar_t const* _String
    );

 __declspec(dllimport) errno_t __cdecl __wcserror_s(
      wchar_t*       _Buffer,
                                  size_t         _SizeInWords,
                                wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }

  __declspec(dllimport) int __cdecl _wcsicmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

  __declspec(dllimport) int __cdecl _wcsicmp_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

  __declspec(dllimport) int __cdecl _wcsnicmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

  __declspec(dllimport) int __cdecl _wcsnicmp_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 __declspec(dllimport) errno_t __cdecl _wcsnset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value,
                                 size_t   _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(  wchar_t (&_Destination)[_Size],   wchar_t _Value,   size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsnset(  wchar_t *_String,   wchar_t _Value,   size_t _MaxCount);

__declspec(dllimport) wchar_t* __cdecl _wcsrev(
      wchar_t* _String
    );

 __declspec(dllimport) errno_t __cdecl _wcsset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(  wchar_t (&_String)[_Size],   wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsset(  wchar_t *_String,   wchar_t _Value);

 __declspec(dllimport) errno_t __cdecl _wcslwr_s(
      wchar_t* _String,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr( wchar_t *_String);


__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(
      wchar_t*  _String,
                                 size_t    _SizeInWords,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);


__declspec(dllimport) errno_t __cdecl _wcsupr_s(
      wchar_t* _String,
                          size_t   _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr( wchar_t *_String);


__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(
      wchar_t*  _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);

 

__declspec(dllimport) size_t __cdecl wcsxfrm(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount
    );

 

__declspec(dllimport) size_t __cdecl _wcsxfrm_l(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount,
                                       _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl wcscoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
__declspec(dllimport) int __cdecl _wcscoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsicoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
__declspec(dllimport) int __cdecl _wcsicoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsncoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
__declspec(dllimport) int __cdecl _wcsncoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsnicoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
__declspec(dllimport) int __cdecl _wcsnicoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );









extern "C++" {

     
    
    inline wchar_t* __cdecl wcschr(  wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }

     
    inline wchar_t* __cdecl wcspbrk(  wchar_t* _String,   wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }

     
    inline wchar_t* __cdecl wcsrchr(  wchar_t* _String,   wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }

       
    
    inline wchar_t* __cdecl wcsstr(  wchar_t* _String,   wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}










    




      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsdup" ". See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl wcsdup(
          wchar_t const* _String
        );

    



    
    

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicmp(
          wchar_t const* _String1,
          wchar_t const* _String2
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsnicmp(
          wchar_t const* _String1,
          wchar_t const* _String2,
                                size_t         _MaxCount
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnset" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsnset(
          wchar_t* _String,
                                  wchar_t  _Value,
                                  size_t   _MaxCount
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsrev" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsrev(
          wchar_t* _String
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsset" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsset(
          wchar_t* _String,
               wchar_t  _Value
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcslwr" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcslwr(
          wchar_t* _String
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsupr" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsupr(
          wchar_t* _String
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicoll" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicoll(
          wchar_t const* _String1,
          wchar_t const* _String2
        );





} __pragma(pack(pop))












#pragma once



__pragma(pack(push, 8)) extern "C" {








struct tm
{
    int tm_sec;   
    int tm_min;   
    int tm_hour;  
    int tm_mday;  
    int tm_mon;   
    int tm_year;  
    int tm_wday;  
    int tm_yday;  
    int tm_isdst; 
};







  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 
 
__declspec(dllimport) wchar_t* __cdecl _wasctime(
      struct tm const* _Tm
    );

 

__declspec(dllimport) errno_t __cdecl _wasctime_s(
        wchar_t*         _Buffer,
                                          size_t           _SizeInWords,
                                                       struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }

 

__declspec(dllimport) size_t __cdecl wcsftime(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm
    );

 

__declspec(dllimport) size_t __cdecl _wcsftime_l(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime32_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime64_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }


__declspec(dllimport) errno_t __cdecl _wstrdate_s(
        wchar_t* _Buffer,
                                      size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);


__declspec(dllimport) errno_t __cdecl _wstrtime_s(
        wchar_t* _Buffer,
                                      size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);









    #pragma warning(push)
    #pragma warning(disable: 4996)

    




















         
        static __inline wchar_t * __cdecl _wctime(
              time_t const* const _Time)
        {
            return _wctime64(_Time);
        }

        
        static __inline errno_t __cdecl _wctime_s(
                  wchar_t*      const _Buffer,
                                                             size_t        const _SizeInWords,
                                                             time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }

    

    #pragma warning(pop)




} __pragma(pack(pop))









#pragma once










#pragma once




    

    typedef unsigned short _ino_t; 

    
        typedef _ino_t ino_t;
    





    

    typedef unsigned int _dev_t; 

    
        typedef _dev_t dev_t;
    





    

    typedef long _off_t; 

    
        typedef _off_t off_t;
    



__pragma(pack(push, 8)) extern "C" {



#pragma warning(push)
#pragma warning(disable:4820) 








struct _stat32
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    _off_t         st_size;
    __time32_t     st_atime;
    __time32_t     st_mtime;
    __time32_t     st_ctime;
};

struct _stat32i64
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    __int64        st_size;
    __time32_t     st_atime;
    __time32_t     st_mtime;
    __time32_t     st_ctime;
};

struct _stat64i32
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    _off_t         st_size;
    __time64_t     st_atime;
    __time64_t     st_mtime;
    __time64_t     st_ctime;
};

struct _stat64
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    __int64        st_size;
    __time64_t     st_atime;
    __time64_t     st_mtime;
    __time64_t     st_ctime;
};




    struct stat
    {
        _dev_t         st_dev;
        _ino_t         st_ino;
        unsigned short st_mode;
        short          st_nlink;
        short          st_uid;
        short          st_gid;
        _dev_t         st_rdev;
        _off_t         st_size;
        time_t         st_atime;
        time_t         st_mtime;
        time_t         st_ctime;
    };



















    
    
    
    
    
    
    

















    
    
    
    
    
    




__declspec(dllimport) int __cdecl _fstat32(
       int             _FileHandle,
      struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat32i64(
       int                _FileHandle,
      struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64i32(
       int                _FileHandle,
      struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64(
       int             _FileHandle,
      struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _stat32(
      char const*     _FileName,
       struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _stat32i64(
      char const*        _FileName,
       struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _stat64i32(
      char const*        _FileName,
       struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _stat64(
      char const*     _FileName,
       struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32(
      wchar_t const*  _FileName,
       struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32i64(
      wchar_t const*     _FileName,
       struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64i32(
      wchar_t const*     _FileName,
       struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64(
      wchar_t const*  _FileName,
       struct _stat64* _Stat
    );




    















        static __inline int __cdecl fstat(int const _FileHandle, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _fstat64i32(_FileHandle, (struct _stat64i32*)_Stat);
        }
        static __inline int __cdecl stat(char const* const _FileName, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _stat64i32(_FileName, (struct _stat64i32*)_Stat);
        }

    




#pragma warning(pop)



} __pragma(pack(pop))




__pragma(pack(push, 8)) extern "C" {








typedef wchar_t _Wint_t;




__declspec(dllimport) wchar_t* __cdecl _wsetlocale(
            int            _Category,
      wchar_t const* _Locale
    );


__declspec(dllimport) _locale_t __cdecl _wcreate_locale(
        int            _Category,
      wchar_t const* _Locale
    );



__declspec(dllimport) wint_t __cdecl btowc(
      int _Ch
    );

__declspec(dllimport) size_t __cdecl mbrlen(
        char const* _Ch,
                                                size_t      _SizeInBytes,
                                             mbstate_t*  _State
    );

__declspec(dllimport) size_t __cdecl mbrtowc(
                              wchar_t*    _DstCh,
        char const* _SrcCh,
                                                size_t      _SizeInBytes,
                                             mbstate_t*  _State
    );

 
__declspec(dllimport) errno_t __cdecl mbsrtowcs_s(
                              size_t*      _Retval,
              wchar_t*     _Dst,
                                   size_t       _Size,
                      char const** _PSrc,
                                   size_t       _N,
                                mbstate_t*   _State
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl mbsrtowcs_s(  size_t* _Retval,   wchar_t (&_Dest)[_Size],     char const** _PSource,   size_t _Count,   mbstate_t* _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbsrtowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  __declspec(dllimport) size_t __cdecl mbsrtowcs( wchar_t *_Dest,  char const** _PSrc,  size_t _Count,  mbstate_t* _State);

 
__declspec(dllimport) errno_t __cdecl wcrtomb_s(
                             size_t*    _Retval,
      char*      _Dst,
                                  size_t     _SizeInBytes,
                                  wchar_t    _Ch,
                           mbstate_t* _State
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl wcrtomb_s(  size_t* _Retval,   char (&_Dest)[_Size],   wchar_t _Source,   mbstate_t* _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcrtomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcrtomb(  char *_Dest,  wchar_t _Source,  mbstate_t* _State);

 
__declspec(dllimport) errno_t __cdecl wcsrtombs_s(
                                              size_t*         _Retval,
      char*           _Dst,
                                                   size_t          _SizeInBytes,
                                wchar_t const** _Src,
                                                   size_t          _Size,
                                            mbstate_t*      _State
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl wcsrtombs_s(  size_t* _Retval,   char (&_Dest)[_Size],     wchar_t const** _PSrc,   size_t _Count,   mbstate_t* _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsrtombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcsrtombs(  char *_Dest,  wchar_t const** _PSource,  size_t _Count,  mbstate_t* _State);

__declspec(dllimport) int __cdecl wctob(
      wint_t _WCh
    );





    

         
        errno_t __cdecl wmemcpy_s(
              wchar_t*       _S1,
                                      rsize_t        _N1,
                        wchar_t const* _S2,
                                      rsize_t        _N
            );

         
        errno_t __cdecl wmemmove_s(
              wchar_t*       _S1,
                                      rsize_t        _N1,
                        wchar_t const* _S2,
                                      rsize_t        _N
            );

    

    __inline int __cdecl fwide(
          FILE* _F,
              int   _M
        )
    {
        (void)_F;
        return (_M);
    }

    __inline int __cdecl mbsinit(
          mbstate_t const* _P
        )
    {
        return _P == 0 || _P->_Wchar == 0;
    }

    __inline wchar_t const* __cdecl wmemchr(
          wchar_t const* _S,
                    wchar_t        _C,
                    size_t         _N
        )
    {
        for (; 0 < _N; ++_S, --_N)
            if (*_S == _C)
                return (wchar_t const*)_S;

        return 0;
    }

    __inline int __cdecl wmemcmp(
          wchar_t const* _S1,
          wchar_t const* _S2,
                    size_t         _N
        )
    {
        for (; 0 < _N; ++_S1, ++_S2, --_N)
            if (*_S1 != *_S2)
                return *_S1 < *_S2 ? -1 : 1;

        return 0;
    }

     
    
    __inline 
    wchar_t* __cdecl wmemcpy(
          wchar_t*       _S1,
                wchar_t const* _S2,
                          size_t         _N
        )
    {
        #pragma warning(push)
        #pragma warning(disable : 4995 4996 6386)
        return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));
        #pragma warning(pop)
    }

    __inline 
    wchar_t* __cdecl wmemmove(
          wchar_t*       _S1,
                wchar_t const* _S2,
                              size_t         _N
        )
    {
        #pragma warning(push)
        #pragma warning(disable : 4996 6386)
        return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));
        #pragma warning(pop)
    }

     
    
    __inline wchar_t* __cdecl wmemset(
          wchar_t* _S,
                          wchar_t  _C,
                          size_t   _N
        )
    {
        wchar_t *_Su = _S;
        for (; 0 < _N; ++_Su, --_N)
        {
            *_Su = _C;
        }
        return _S;
    }

    

        extern "C++" inline wchar_t* __cdecl wmemchr(
              wchar_t* _S,
                        wchar_t  _C,
                        size_t   _N
            )
        {
            wchar_t const* const _SC = _S;
            return const_cast<wchar_t*>(wmemchr(_SC, _C, _N));
        }

    





} __pragma(pack(pop))



typedef mbstate_t _Mbstatet;

 
namespace std {
using :: _Mbstatet;

using :: mbstate_t; using :: size_t; using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;
using :: wcstod; using :: wcstoul; using :: wcsstr;
using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;

using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;
}
 










#pragma once





#pragma once










 


 
namespace std {
using :: ptrdiff_t; using :: size_t;
}
 

 
namespace std {
typedef double max_align_t;	
}

using ::std:: max_align_t;	
 











#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		
template<class _Elem>
	class initializer_list
	{	
public:
	typedef _Elem value_type;
	typedef const _Elem& reference;
	typedef const _Elem& const_reference;
	typedef size_t size_type;

	typedef const _Elem* iterator;
	typedef const _Elem* const_iterator;

	constexpr initializer_list() noexcept
		: _First(0), _Last(0)
		{	
		}

	constexpr initializer_list(const _Elem *_First_arg,
		const _Elem *_Last_arg) noexcept
		: _First(_First_arg), _Last(_Last_arg)
		{	
		}

	constexpr const _Elem *begin() const noexcept
		{	
		return (_First);
		}

	constexpr const _Elem *end() const noexcept
		{	
		return (_Last);
		}

	constexpr size_t size() const noexcept
		{	
		return ((size_t)(_Last - _First));
		}

private:
	const _Elem *_First;
	const _Elem *_Last;
	};

		
template<class _Elem> inline
	constexpr const _Elem *begin(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.begin());
	}

		
template<class _Elem> inline
	constexpr const _Elem *end(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.end());
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)











 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 
  
  
  
 

namespace std {
		
 
 
 

 
 
 
 
 

 
 

  

  












   
   
  

 





















		


		
 

 



































 
 

		

template<bool,
	class _Ty1,
	class _Ty2>
	struct _If
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct _If<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

template<class _Ty>
	struct _Always_false
	{	
	static constexpr bool value = false;
	};

		

 
		
template<class _Arg,
	class _Result>
	struct unary_function
	{	
	typedef _Arg argument_type;
	typedef _Result result_type;
	};

		
template<class _Arg1,
	class _Arg2,
	class _Result>
	struct binary_function
	{	
	typedef _Arg1 first_argument_type;
	typedef _Arg2 second_argument_type;
	typedef _Result result_type;
	};
 

		
template<class _Ty = void>
	struct plus
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left + _Right);
		}
	};

		
template<class _Ty = void>
	struct minus
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left - _Right);
		}
	};

		
template<class _Ty = void>
	struct multiplies
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left * _Right);
		}
	};

		
template<class _Ty = void>
	struct equal_to
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left == _Right);
		}
	};

		
template<class _Ty = void>
	struct less
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left < _Right);
		}
	};

		
template<>
	struct plus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct minus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct multiplies<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct equal_to<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct less<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right));
		}
	};


}



namespace std {
	
inline size_t _Hash_seq(const unsigned char *_First, size_t _Count)
	{	
 
	static_assert(sizeof(size_t) == 8, "This code is for 64-bit size_t.");
	const size_t _FNV_offset_basis = 14695981039346656037ULL;
	const size_t _FNV_prime = 1099511628211ULL;

 





	size_t _Val = _FNV_offset_basis;
	for (size_t _Next = 0; _Next < _Count; ++_Next)
		{	
		_Val ^= (size_t)_First[_Next];
		_Val *= _FNV_prime;
		}
	return (_Val);
	}

	
template<class _Kty>
	struct _Bitwise_hash
	{	
	typedef _Kty argument_type;
	typedef size_t result_type;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Hash_seq((const unsigned char *)&_Keyval, sizeof (_Kty)));
		}
	};

	
template<class _Kty>
	struct hash
		: public _Bitwise_hash<_Kty>
	{	
	static constexpr bool _Value = __is_enum(_Kty);
	static_assert(_Value,
		"The C++ Standard doesn't provide a hash for this type.");
	};
template<>
	struct hash<bool>
		: public _Bitwise_hash<bool>
	{	
	};

template<>
	struct hash<char>
		: public _Bitwise_hash<char>
	{	
	};

template<>
	struct hash<signed char>
		: public _Bitwise_hash<signed char>
	{	
	};

template<>
	struct hash<unsigned char>
		: public _Bitwise_hash<unsigned char>
	{	
	};

template<>
	struct hash<char16_t>
		: public _Bitwise_hash<char16_t>
	{	
	};

template<>
	struct hash<char32_t>
		: public _Bitwise_hash<char32_t>
	{	
	};

 
template<>
	struct hash<wchar_t>
		: public _Bitwise_hash<wchar_t>
	{	
	};
 

template<>
	struct hash<short>
		: public _Bitwise_hash<short>
	{	
	};

template<>
	struct hash<unsigned short>
		: public _Bitwise_hash<unsigned short>
	{	
	};

template<>
	struct hash<int>
		: public _Bitwise_hash<int>
	{	
	};

template<>
	struct hash<unsigned int>
		: public _Bitwise_hash<unsigned int>
	{	
	};

template<>
	struct hash<long>
		: public _Bitwise_hash<long>
	{	
	};

template<>
	struct hash<unsigned long>
		: public _Bitwise_hash<unsigned long>
	{	
	};

template<>
	struct hash<long long>
		: public _Bitwise_hash<long long>
	{	
	};

template<>
	struct hash<unsigned long long>
		: public _Bitwise_hash<unsigned long long>
	{	
	};

template<>
	struct hash<float>
		: public _Bitwise_hash<float>
	{	
	typedef float _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<>
	struct hash<double>
		: public _Bitwise_hash<double>
	{	
	typedef double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<>
	struct hash<long double>
		: public _Bitwise_hash<long double>
	{	
	typedef long double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<class _Ty>
	struct hash<_Ty *>
		: public _Bitwise_hash<_Ty *>
	{	
	};
}



namespace std {
namespace tr1 {	
using ::std:: hash;
}	
}





 





 

 





 

 








 

 



 




































































namespace std {
	
template<class... _Types>
	struct _Arg_types
	{	
	};

template<class _Ty1>
	struct _Arg_types<_Ty1>
	{	
	typedef _Ty1 argument_type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Arg_types<_Ty1, _Ty2>
	{	
	typedef _Ty1 first_argument_type;
	typedef _Ty2 second_argument_type;
	};

	
template<class _Ty>
	struct _Is_function
	{	
	typedef false_type _Bool_type;
	static constexpr bool _Weird = false;
	};












template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };












template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };


template<class _Ty>
	struct is_function
		: _Is_function<_Ty>::_Bool_type
	{	
	};

 
template<class _Ty>
	constexpr bool is_function_v = is_function<_Ty>::value;
 

		





















template<class _Ty> inline
	constexpr _Ty *addressof(_Ty& _Val) noexcept
	{	
	return (__builtin_addressof(_Val));
	}



		
template<class _Ptrty> inline
	auto _Unfancy(_Ptrty _Ptr)
	{	
	return (::std:: addressof(*_Ptr));
	}

template<class _Ty> inline
	_Ty * _Unfancy(_Ty * _Ptr)
	{	
	return (_Ptr);
	}

}
 
 #pragma warning(pop)
 #pragma pack(pop)









 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {















 

 
 
 
 

 
 
 
 

 
 
 
 

		
typedef enum
	{	
	denorm_indeterminate = -1,
	denorm_absent = 0,
	denorm_present = 1}
		float_denorm_style;

		
typedef enum
	{	
	round_indeterminate = -1,
	round_toward_zero = 0,
	round_to_nearest = 1,
	round_toward_infinity = 2,
	round_toward_neg_infinity = 3}
		float_round_style;

		
struct _Num_base
	{	
	static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
	static constexpr bool has_denorm_loss = (bool)(false);
	static constexpr bool has_infinity = (bool)(false);
	static constexpr bool has_quiet_NaN = (bool)(false);
	static constexpr bool has_signaling_NaN = (bool)(false);
	static constexpr bool is_bounded = (bool)(false);
	static constexpr bool is_exact = (bool)(false);
	static constexpr bool is_iec559 = (bool)(false);
	static constexpr bool is_integer = (bool)(false);
	static constexpr bool is_modulo = (bool)(false);
	static constexpr bool is_signed = (bool)(false);
	static constexpr bool is_specialized = (bool)(false);
	static constexpr bool tinyness_before = (bool)(false);
	static constexpr bool traps = (bool)(false);
	static constexpr float_round_style round_style = (float_round_style)(round_toward_zero);
	static constexpr int digits = (int)(0);
	static constexpr int digits10 = (int)(0);

	static constexpr int max_digits10 = (int)(0);

	static constexpr int max_exponent = (int)(0);
	static constexpr int max_exponent10 = (int)(0);
	static constexpr int min_exponent = (int)(0);
	static constexpr int min_exponent10 = (int)(0);
	static constexpr int radix = (int)(0);
	};

		
template<class _Ty>
	class numeric_limits
		: public _Num_base
	{	
public:
	static constexpr _Ty (min)() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty lowest() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (_Ty());
		}
	};

template<class _Ty>
	class numeric_limits<const _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<const volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

		
struct _Num_int_base
	: public _Num_base
	{	
	static constexpr bool is_bounded = (bool)(true);
	static constexpr bool is_exact = (bool)(true);
	static constexpr bool is_integer = (bool)(true);
	static constexpr bool is_modulo = (bool)(true);
	static constexpr bool is_specialized = (bool)(true);
	static constexpr int radix = (int)(2);
	};

		
struct _Num_float_base
	: public _Num_base
	{	
	static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
	static constexpr bool has_denorm_loss = (bool)(true);
	static constexpr bool has_infinity = (bool)(true);
	static constexpr bool has_quiet_NaN = (bool)(true);
	static constexpr bool has_signaling_NaN = (bool)(true);
	static constexpr bool is_bounded = (bool)(true);
	static constexpr bool is_exact = (bool)(false);
	static constexpr bool is_iec559 = (bool)(true);
	static constexpr bool is_integer = (bool)(false);
	static constexpr bool is_modulo = (bool)(false);
	static constexpr bool is_signed = (bool)(true);
	static constexpr bool is_specialized = (bool)(true);
	static constexpr bool tinyness_before = (bool)(true);
	static constexpr bool traps = (bool)(false);
	static constexpr float_round_style round_style = (float_round_style)(round_to_nearest);
	static constexpr int radix = (int)(2);
	};

		
template<> class numeric_limits<char>
	: public _Num_int_base
	{	
public:
	typedef char _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-128));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (127);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)((-128) != 0);
	static constexpr int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
	static constexpr int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);
	};

		
template<> class numeric_limits<wchar_t>
	: public _Num_int_base
	{	
public:
	typedef wchar_t _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((_Ty)0x0000);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return ((_Ty)0xffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(0x0000 != 0);
	static constexpr int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));
	static constexpr int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);
	};

		
template<> class numeric_limits<bool>
	: public _Num_int_base
	{	
public:
	typedef bool _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (false);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (true);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = (bool)(false);
	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(1);
	static constexpr int digits10 = (int)(0);
	};

		
template<> class numeric_limits<signed char>
	: public _Num_int_base
	{	
public:
	typedef signed char _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-128));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (127);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 - 1);
	static constexpr int digits10 = (int)((8 - 1) * 301L / 1000);
	};

		
template<> class numeric_limits<unsigned char>
	: public _Num_int_base
	{	
public:
	typedef unsigned char _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8);
	static constexpr int digits10 = (int)(8 * 301L / 1000);
	};

		
template<> class numeric_limits<short>
	: public _Num_int_base
	{	
public:
	typedef short _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-32768));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (32767);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 * sizeof (short) - 1);
	static constexpr int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);
	};

 
		
template<> class numeric_limits<unsigned short>
	: public _Num_int_base
	{	
public:
	typedef unsigned short _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (unsigned short));
	static constexpr int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);
	};
 

		
template<> class numeric_limits<char16_t>
	: public _Num_int_base
	{	
public:
	typedef char16_t _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (char16_t));
	static constexpr int digits10 = (int)(8 * sizeof (char16_t) * 301L / 1000);
	};

		
template<> class numeric_limits<int>
	: public _Num_int_base
	{	
public:
	typedef int _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-2147483647 - 1));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (2147483647);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 * sizeof (int) - 1);
	static constexpr int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);
	};

		
template<> class numeric_limits<unsigned int>
	: public _Num_int_base
	{	
public:
	typedef unsigned int _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffffffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (unsigned int));
	static constexpr int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);
	};

		
template<> class numeric_limits<long>
	: public _Num_int_base
	{	
public:
	typedef long _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-2147483647L - 1));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (2147483647L);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 * sizeof (long) - 1);
	static constexpr int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);
	};

		
template<> class numeric_limits<unsigned long>
	: public _Num_int_base
	{	
public:
	typedef unsigned long _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffffffffUL);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (unsigned long));
	static constexpr int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);
	};

		
template<> class numeric_limits<char32_t>
	: public _Num_int_base
	{	
public:
	typedef char32_t _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffffffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (char32_t));
	static constexpr int digits10 = (int)(8 * sizeof (char32_t) * 301L / 1000);
	};

		
template<> class numeric_limits<long long>
	: public _Num_int_base
	{	
public:
	typedef long long _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (-0x7fffffffffffffff - 1);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0x7fffffffffffffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 * sizeof (long long) - 1);
	static constexpr int digits10 = (int)((8 * sizeof (long long) - 1) * 301L / 1000);
	};

		
template<> class numeric_limits<unsigned long long>
	: public _Num_int_base
	{	
public:
	typedef unsigned long long _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffffffffffffffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (unsigned long long));
	static constexpr int digits10 = (int)(8 * sizeof (unsigned long long) * 301L / 1000);
	};

		
template<> class numeric_limits<float>
	: public _Num_float_base
	{	
public:
	typedef float _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (1.175494351e-38F);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (3.402823466e+38F);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return (-(max)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (1.192092896e-07F);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0.5F);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (1.401298464e-45F);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (__builtin_huge_valf());
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (__builtin_nanf("0"));
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (__builtin_nansf("1"));
		}

	static constexpr int digits = (int)(24);
	static constexpr int digits10 = (int)(6);

	static constexpr int max_digits10 = (int)(2 + 24 * 301L / 1000);

	static constexpr int max_exponent = (int)((int)128);
	static constexpr int max_exponent10 = (int)((int)38);
	static constexpr int min_exponent = (int)((int)(-125));
	static constexpr int min_exponent10 = (int)((int)(-37));
	};

		
template<> class numeric_limits<double>
	: public _Num_float_base
	{	
public:
	typedef double _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (2.2250738585072014e-308);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (1.7976931348623158e+308);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return (-(max)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (2.2204460492503131e-016);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0.5);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (4.9406564584124654e-324);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (__builtin_huge_val());
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (__builtin_nan("0"));
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (__builtin_nans("1"));
		}

	static constexpr int digits = (int)(53);
	static constexpr int digits10 = (int)(15);

	static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

	static constexpr int max_exponent = (int)((int)1024);
	static constexpr int max_exponent10 = (int)((int)308);
	static constexpr int min_exponent = (int)((int)(-1021));
	static constexpr int min_exponent10 = (int)((int)(-307));
	};

		
template<> class numeric_limits<long double>
	: public _Num_float_base
	{	
public:
	typedef long double _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (2.2250738585072014e-308);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (1.7976931348623158e+308);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return (-(max)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (2.2204460492503131e-016);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0.5L);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (4.9406564584124654e-324);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (__builtin_huge_val());
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (__builtin_nan("0"));
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (__builtin_nans("1"));
		}

	static constexpr int digits = (int)(53);
	static constexpr int digits10 = (int)(15);

	static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

	static constexpr int max_exponent = (int)((int)1024);
	static constexpr int max_exponent10 = (int)((int)308);
	static constexpr int min_exponent = (int)((int)(-1021));
	static constexpr int min_exponent10 = (int)((int)(-307));
	};

  











































































































































































































 
 
 
 

 
 
 
 

 
 
 
 
}
 
 #pragma warning(pop)
 #pragma pack(pop)











#pragma once





#pragma once






#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
 #pragma warning(disable: 4180 4296)

namespace std {
template<class _Ty>
	struct _Is_memfunptr
	{	
	typedef false_type _Bool_type;
	};













template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };













template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };


	
template<class _Ty>
	struct is_void
		: false_type
	{	
	};








template<> struct is_void< void> : true_type { }; template<> struct is_void<const void> : true_type { }; template<> struct is_void<volatile void> : true_type { }; template<> struct is_void<const volatile void> : true_type { };


	
	
template<class _Ty>
	struct add_const
	{	
	typedef const _Ty type;
	};

	
template<class _Ty>
	struct add_volatile
	{	
	typedef volatile _Ty type;
	};

	
template<class _Ty>
	struct add_cv
	{	
	typedef const volatile _Ty type;
	};

	
template<class _Ty,
	bool = _Is_function<_Ty>::_Weird || is_void<_Ty>::value>
	struct _Add_reference
	{	
	typedef _Ty _Lvalue;
	typedef _Ty _Rvalue;
	};

template<class _Ty>
	struct _Add_reference<_Ty, false>
	{	
	typedef _Ty& _Lvalue;
	typedef _Ty&& _Rvalue;
	};

	
template<class _Ty>
	struct add_lvalue_reference
	{	
	typedef typename _Add_reference<_Ty>::_Lvalue type;
	};

	
template<class _Ty>
	struct add_rvalue_reference
	{	
	typedef typename _Add_reference<_Ty>::_Rvalue type;
	};

	
template<class _Ty>
	typename add_rvalue_reference<_Ty>::type
		declval() noexcept;

	
template<class _Ty>
	struct remove_extent
	{	
	typedef _Ty type;
	};

template<class _Ty, size_t _Ix>
	struct remove_extent<_Ty[_Ix]>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_extent<_Ty[]>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_all_extents
	{	
	typedef _Ty type;
	};

template<class _Ty, size_t _Ix>
	struct remove_all_extents<_Ty[_Ix]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

template<class _Ty>
	struct remove_all_extents<_Ty[]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

	
template<class _Ty>
	struct remove_pointer
	{	
	typedef _Ty type;
	};








template<class _Ty> struct remove_pointer<_Ty *> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *volatile> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const volatile> { typedef _Ty type; };


	
template<class _Ty,
	bool = _Is_function<_Ty>::_Weird>
	struct _Add_pointer
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct _Add_pointer<_Ty, false>
	{	
	typedef typename remove_reference<_Ty>::type *type;
	};

template<class _Ty>
	struct add_pointer
	{	
	typedef typename _Add_pointer<_Ty>::type type;
	};

	
	
template<class _Ty>
	struct is_array
		: false_type
	{	
	};

template<class _Ty, size_t _Nx>
	struct is_array<_Ty[_Nx]>
		: true_type
	{	
	};

template<class _Ty>
	struct is_array<_Ty[]>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_lvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_lvalue_reference<_Ty&>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_rvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_rvalue_reference<_Ty&&>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_reference
		: _Cat_base<is_lvalue_reference<_Ty>::value
		|| is_rvalue_reference<_Ty>::value>
	{	
	};


	
template<class _Ty,
	bool _Pmf = _Is_memfunptr<_Ty>::_Bool_type::value>
	struct _Is_member_object_pointer
		: false_type
	{	
	};

template<class _Ty1,
	class _Ty2>
	struct _Is_member_object_pointer<_Ty1 _Ty2::*, false>
		: true_type
	{	
	typedef _Ty2 _Class_type;
	};

template<class _Ty>
	struct is_member_object_pointer
		: _Is_member_object_pointer<typename remove_cv<_Ty>::type>::type
	{	
	};

	
template<class _Ty>
	struct is_member_function_pointer
		: _Is_memfunptr<typename remove_cv<_Ty>::type>::_Bool_type
	{	
	};

	
template<class _Ty>
	struct _Is_pointer
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_pointer<_Ty *>
		: _Cat_base<!is_member_object_pointer<_Ty *>::value
		&& !is_member_function_pointer<_Ty *>::value>
	{	
	};

template<class _Ty>
	struct is_pointer
		: _Is_pointer<typename remove_cv<_Ty>::type>
	{	
	};

	

template<class _Ty>
	struct is_null_pointer
		: _Cat_base<is_same<typename remove_cv<_Ty>::type, nullptr_t>::value>
	{	
	};

	
template<class _Ty>
	struct is_union
		: _Cat_base<__is_union(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_class
		: _Cat_base<__is_class(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_fundamental
		: _Cat_base<is_arithmetic<_Ty>::value
		|| is_void<_Ty>::value
		|| is_null_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_object
		: _Cat_base<!is_function<_Ty>::value
		&& !is_reference<_Ty>::value
		&& !is_void<_Ty>::value>
	{	
	};

	

template<class _From,
	class _To>
	struct is_convertible
		: _Cat_base<__is_convertible_to(_From, _To)>
	{	
	};

	
template<class _Ty>
	struct is_enum
		: _Cat_base<__is_enum(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_compound
		: _Cat_base<!is_fundamental<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_member_pointer
		: _Cat_base<is_member_object_pointer<_Ty>::value
		|| is_member_function_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_scalar
		: _Cat_base<is_arithmetic<_Ty>::value
		|| is_enum<_Ty>::value
		|| is_pointer<_Ty>::value
		|| is_member_pointer<_Ty>::value
		|| is_null_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_const
		: false_type
	{	
	};

template<class _Ty>
	struct is_const<const _Ty>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_volatile
		: false_type
	{	
	};

template<class _Ty>
	struct is_volatile<volatile _Ty>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_pod
		: _Cat_base<__is_pod(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_empty
		: _Cat_base<__is_empty(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_polymorphic
		: _Cat_base<__is_polymorphic(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_abstract
		: _Cat_base<__is_abstract(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_final
		: _Cat_base<__is_final(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_standard_layout
		: _Cat_base<__is_standard_layout(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_literal_type
		: _Cat_base<__is_literal_type(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_trivial
		: _Cat_base<__is_trivial(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copyable
		: _Cat_base<__is_trivially_copyable(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_virtual_destructor
		: _Cat_base<__has_virtual_destructor(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_constructible
		: _Cat_base<__is_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_copy_constructible
		: is_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_default_constructible
		: is_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_move_constructible
		: is_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_assignable
		: integral_constant<bool, __is_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_copy_assignable
		: is_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_move_assignable
		: is_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_destructible
		: _Cat_base<__is_destructible(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_trivially_constructible
		: _Cat_base<__is_trivially_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copy_constructible
		: is_trivially_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_default_constructible
		: is_trivially_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_move_constructible
		: is_trivially_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_trivially_assignable
		: _Cat_base<__is_trivially_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copy_assignable
		: is_trivially_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_move_assignable
		: is_trivially_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_destructible
		: _Cat_base<__has_trivial_destructor(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_nothrow_constructible
		: _Cat_base<__is_nothrow_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_nothrow_copy_constructible
		: is_nothrow_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_default_constructible
		: is_nothrow_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_move_constructible
		: is_nothrow_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_nothrow_assignable
		: _Cat_base<__is_nothrow_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_nothrow_copy_assignable
		: is_nothrow_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_move_assignable
		: is_nothrow_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_destructible
		: _Cat_base<__is_nothrow_destructible(_Ty)>
	{	
	};

	
template<class _Ty,
	bool = is_integral<_Ty>::value>
	struct _Sign_base
	{	
	typedef typename remove_cv<_Ty>::type _Uty;
	typedef _Cat_base<_Uty(-1) < _Uty(0)> _Signed;
	typedef _Cat_base<_Uty(0) < _Uty(-1)> _Unsigned;
	};

template<class _Ty>
	struct _Sign_base<_Ty, false>
	{	
		
	typedef is_floating_point<_Ty> _Signed;
	typedef false_type _Unsigned;
	};

template<class _Ty>
	struct is_signed
		: _Sign_base<_Ty>::_Signed
	{	
	};

	
template<class _Ty>
	struct is_unsigned
		: _Sign_base<_Ty>::_Unsigned
	{	
	};

	
template<class _Ty>
	struct _Change_sign
	{	
	static_assert(
		((is_integral<_Ty>::value || is_enum<_Ty>::value)
			&& !is_same<_Ty, bool>::value),
		"make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
		"cv-qualified) integral type or enumeration but not a bool type.");

	typedef
		typename _If<is_same<_Ty, signed char>::value
			|| is_same<_Ty, unsigned char     >::value, signed char,
		typename _If<is_same<_Ty, short       >::value
			|| is_same<_Ty, unsigned short    >::value, short,
		typename _If<is_same<_Ty, int         >::value
			|| is_same<_Ty, unsigned int      >::value, int,
		typename _If<is_same<_Ty, long        >::value
			|| is_same<_Ty, unsigned long     >::value, long,
		typename _If<is_same<_Ty, long long   >::value
			|| is_same<_Ty, unsigned long long>::value, long long,
		typename _If<sizeof (_Ty) == sizeof (signed char), signed char,
		typename _If<sizeof (_Ty) == sizeof (short      ), short,
		typename _If<sizeof (_Ty) == sizeof (int        ), int,
		typename _If<sizeof (_Ty) == sizeof (long       ), long,
			long long
		>::type>::type>::type>::type>::type>::type>::type>::type>::type
			_Signed;

	typedef
		typename _If<is_same<_Signed, signed char>::value, unsigned char,
		typename _If<is_same<_Signed, short      >::value, unsigned short,
		typename _If<is_same<_Signed, int        >::value, unsigned int,
		typename _If<is_same<_Signed, long       >::value, unsigned long,
			unsigned long long
		>::type>::type>::type>::type
			_Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const _Ty>
	{	
	typedef const typename _Change_sign<_Ty>::_Signed _Signed;
	typedef const typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

template<class _Ty>
	struct _Change_sign<volatile _Ty>
	{	
	typedef volatile typename _Change_sign<_Ty>::_Signed _Signed;
	typedef volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const volatile _Ty>
	{	
	typedef const volatile typename _Change_sign<_Ty>::_Signed _Signed;
	typedef const volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

	
template<class _Ty>
	struct make_signed
	{	
	typedef typename _Change_sign<_Ty>::_Signed type;
	};

	
template<class _Ty>
	struct make_unsigned
	{	
	typedef typename _Change_sign<_Ty>::_Unsigned type;
	};

	

template<class _Ty>
	struct alignment_of
		: integral_constant<size_t, alignof(_Ty)>
	{	
	};

	




template<class _Ty,
	size_t _Len>
	union _Align_type
	{	
	_Ty _Val;
	char _Pad[_Len];
	};

template<size_t _Len,
	size_t _Align,
	class _Ty,
	bool _Ok>
	struct _Aligned;

template<size_t _Len,
	size_t _Align,
	class _Ty>
	struct _Aligned<_Len, _Align, _Ty, true>
	{	
	typedef _Align_type<_Ty, _Len> type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, double, false>
	{	
	typedef _Align_type<max_align_t, _Len> type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, int, false>
	{	
	typedef typename _Aligned<_Len, _Align, double, _Align <= alignment_of<double>::value>::type type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, short, false>
	{	
	typedef typename _Aligned<_Len, _Align, int, _Align <= alignment_of<int>::value>::type type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, char, false>
	{	
	typedef typename _Aligned<_Len, _Align, short, _Align <= alignment_of<short>::value>::type type;
	};

template<size_t _Len,
	size_t _Align = alignment_of<max_align_t>::value>
	struct aligned_storage
	{	
	typedef typename _Aligned<_Len, _Align, char, _Align <= alignment_of<char>::value>::type type;
	};




	
template<size_t... _Vals>
	struct _Maximum;

template<>
	struct _Maximum<>
	{	
	static constexpr size_t value = 0;
	};

template<size_t _Val>
	struct _Maximum<_Val>
	{	
	static constexpr size_t value = _Val;
	};

template<size_t _First,
	size_t _Second,
	size_t... _Rest>
	struct _Maximum<_First, _Second, _Rest...>
		: _Maximum<(_First < _Second ? _Second : _First), _Rest...>
	{	
	};

template<size_t _Len,
	class... _Types>
	struct aligned_union
	{	
	static constexpr size_t _Max_len = _Maximum<
		_Len, sizeof(_Types)...>::value;	
	static constexpr size_t alignment_value = _Maximum<
		alignment_of<_Types>::value...>::value;
	typedef typename aligned_storage<_Max_len, alignment_value>::type type;
	};

	
template<class _Ty>
	struct underlying_type
	{	
	typedef __underlying_type(_Ty) type;
	};

	
template<class _Ty>
	struct rank
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct rank<_Ty[_Ix]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

template<class _Ty>
	struct rank<_Ty[]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

	
template<class _Ty, unsigned int _Nx>
	struct _Extent
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct _Extent<_Ty[_Ix], 0>
		: integral_constant<size_t, _Ix>
	{	
	};

template<class _Ty, unsigned int _Nx, size_t _Ix>
	struct _Extent<_Ty[_Ix], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct _Extent<_Ty[], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx = 0>
	struct extent
		: _Extent<_Ty, _Nx>
	{	
	};

	
template<class _Base,
	class _Der>
	struct is_base_of
		: _Cat_base<__is_base_of(_Base, _Der)>
	{	
	};

	
template<class _Ty>
	struct decay
	{	
	typedef typename remove_reference<_Ty>::type _Ty1;

	typedef typename _If<is_array<_Ty1>::value,
		typename remove_extent<_Ty1>::type *,
		typename _If<is_function<_Ty1>::value,
			typename add_pointer<_Ty1>::type,
			typename remove_cv<_Ty1>::type>::type>::type type;
	};

	
template<class...>
	struct _Conjunction;

template<bool,
	class _Lhs,
	class... _Traits>
	struct _Choose_conjunction
	{	
	typedef _Lhs type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Choose_conjunction<true, _Lhs, _Traits...>
	{	
	typedef typename _Conjunction<_Traits...>::type type;
	};

template<>
	struct _Conjunction<>
	{	
	typedef true_type type;
	};

template<class _Trait>
	struct _Conjunction<_Trait>
	{	
	typedef _Trait type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Conjunction<_Lhs, _Traits...>
	{	
	typedef typename _Choose_conjunction<_Lhs::value, _Lhs, _Traits...>::type type;
	};

template<class... _Traits>
	struct conjunction
		: _Conjunction<_Traits...>::type
	{	
		
		
	};

	
template<class...>
	struct _Disjunction;

template<bool,
	class _Lhs,
	class... _Traits>
	struct _Choose_disjunction
	{	
	typedef _Lhs type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Choose_disjunction<false, _Lhs, _Traits...>
	{	
	typedef typename _Disjunction<_Traits...>::type type;
	};

template<>
	struct _Disjunction<>
	{	
	typedef false_type type;
	};

template<class _Trait>
	struct _Disjunction<_Trait>
	{	
	typedef _Trait type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Disjunction<_Lhs, _Traits...>
	{	
	typedef typename _Choose_disjunction<_Lhs::value, _Lhs, _Traits...>::type type;
	};

template<class... _Traits>
	struct disjunction
		: _Disjunction<_Traits...>::type
	{	
		
		
	};

	
template<class _Trait>
	struct negation
		: bool_constant<!_Trait::value>
	{	
	};


namespace tr1 {	
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
	}	


		
template<class... _Ty>
	struct common_type;

template<class _Ty>
	struct common_type<_Ty>
	{	
	typedef typename decay<_Ty>::type type;
	};

template<class _Ty0,
	class _Ty1>
	struct common_type<_Ty0, _Ty1>
	{	
	typedef typename decay<
		decltype(_Always_false<_Ty0>::value
			? ::std:: declval<_Ty0>()
			: ::std:: declval<_Ty1>())
	>::type type;
	};

template<class _Ty0,
	class _Ty1,
	class... _Ty>
	struct common_type<_Ty0, _Ty1, _Ty...>
	{	
	typedef typename common_type<
		typename common_type<_Ty0, _Ty1>::type, _Ty...
	>::type type;
	};

	
template<class _Ty,
	_Ty... _Vals>
	struct integer_sequence
	{	
	static_assert(is_integral<_Ty>::value,
		"integer_sequence<T, I...> requires T to be an integral type.");

	typedef integer_sequence<_Ty, _Vals...> type;
	typedef _Ty value_type;

	static constexpr size_t size() noexcept
		{	
		return (sizeof...(_Vals));
		}
	};

	
 




































template<class _Ty,
	_Ty _Size>
	using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;
 

template<size_t... _Vals>
	using index_sequence = integer_sequence<size_t, _Vals...>;

template<size_t _Size>
	using make_index_sequence = make_integer_sequence<size_t, _Size>;

template<class... _Types>
	using index_sequence_for = make_index_sequence<sizeof...(_Types)>;


	
template<class _Ty>
	struct identity
	{	
	typedef _Ty type;

	const _Ty& operator()(const _Ty& _Left) const
		{	
		return (_Left);
		}
	};


	
template<class _Ty> inline
	constexpr _Ty&& forward(
		typename remove_reference<_Ty>::type& _Arg) noexcept
	{	
	return (static_cast<_Ty&&>(_Arg));
	}

template<class _Ty> inline
	constexpr _Ty&& forward(
		typename remove_reference<_Ty>::type&& _Arg) noexcept
	{	
	static_assert(!is_lvalue_reference<_Ty>::value, "bad forward call");
	return (static_cast<_Ty&&>(_Arg));
	}

		
template<class _Ty> inline
	constexpr typename remove_reference<_Ty>::type&&
		move(_Ty&& _Arg) noexcept
	{	
	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));
	}

		
template<class _Ty> inline
	constexpr typename _If<!is_nothrow_move_constructible<_Ty>::value
		&& is_copy_constructible<_Ty>::value,
			const _Ty&, _Ty&&>::type
	move_if_noexcept(_Ty& _Arg) noexcept
	{	
	return (::std:: move(_Arg));
	}

	
template<class...>
	struct _Param_tester
	{	
	typedef void type;
	};

	
template<class... _Types>	
	using void_t = typename _Param_tester<_Types...>::type;

	
struct _Invoker_pmf_object
	{	
	template<class _Decayed,
		class _Ty1,
		class... _Types2>
		static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
		-> decltype((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...))
		{	
		return ((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...));
		}
	};

struct _Invoker_pmf_pointer
	{	
	template<class _Decayed,
		class _Ty1,
		class... _Types2>
		static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
		-> decltype(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...))
		{	
		return (((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...));
		}
	};

struct _Invoker_pmd_object
	{	
	template<class _Decayed,
		class _Ty1>
		static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
		-> decltype(::std:: forward<_Ty1>(_Arg1).*_Pmd)
		{	
		return (::std:: forward<_Ty1>(_Arg1).*_Pmd);
		}
	};

struct _Invoker_pmd_pointer
	{	
	template<class _Decayed,
		class _Ty1>
		static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
		-> decltype((*::std:: forward<_Ty1>(_Arg1)).*_Pmd)
		{	
		return ((*::std:: forward<_Ty1>(_Arg1)).*_Pmd);
		}
	};

struct _Invoker_functor
	{	
	template<class _Callable,
		class... _Types>
		static auto _Call(_Callable&& _Obj, _Types&&... _Args)
		-> decltype(::std:: forward<_Callable>(_Obj)(
			::std:: forward<_Types>(_Args)...))
		{	
		return (::std:: forward<_Callable>(_Obj)(
			::std:: forward<_Types>(_Args)...));
		}
	};

template<class _Callable,
	class _Ty1,
	class _Decayed = typename decay<_Callable>::type,
	bool _Is_pmf = is_member_function_pointer<_Decayed>::value,
	bool _Is_pmd = is_member_object_pointer<_Decayed>::value>
	struct _Invoker1;

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, true, false>
		: _If<is_base_of<
			typename _Is_memfunptr<_Decayed>::_Class_type,
			typename decay<_Ty1>::type>::value,
		_Invoker_pmf_object,
		_Invoker_pmf_pointer>::type
	{	
	};

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, false, true>
		: _If<is_base_of<
			typename _Is_member_object_pointer<_Decayed>::_Class_type,
			typename decay<_Ty1>::type>::value,
		_Invoker_pmd_object,
		_Invoker_pmd_pointer>::type
	{	
	};

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, false, false>
		: _Invoker_functor
	{	
	};

template<class _Callable,
	class... _Types>
	struct _Invoker;

template<class _Callable>
	struct _Invoker<_Callable>
		: _Invoker_functor
	{	
	};

template<class _Callable,
	class _Ty1,
	class... _Types2>
	struct _Invoker<_Callable, _Ty1, _Types2...>
		: _Invoker1<_Callable, _Ty1>
	{	
	};

template<class _Callable,
	class... _Types> inline
	auto invoke(_Callable&& _Obj, _Types&&... _Args)
	-> decltype(_Invoker<_Callable, _Types...>::_Call(
		::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...))
	{	
	return (_Invoker<_Callable, _Types...>::_Call(
		::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...));
	}

template<class _Rx,
	bool = is_void<_Rx>::value>
	struct _Forced
	{	
	};

struct _Unforced
	{	
	};

template<class _Cv_void,
	class... _Valtys> inline
	void _Invoke_ret(_Forced<_Cv_void, true>, _Valtys&&... _Vals)
	{	
	::std:: invoke(::std:: forward<_Valtys>(_Vals)...);
	}

template<class _Rx,
	class... _Valtys> inline
	_Rx _Invoke_ret(_Forced<_Rx, false>, _Valtys&&... _Vals)
	{	
	return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
	}

template<class... _Valtys> inline
	auto _Invoke_ret(_Forced<_Unforced, false>, _Valtys&&... _Vals)
	-> decltype(::std:: invoke(::std:: forward<_Valtys>(_Vals)...))
	{	
	return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
	}

	
struct _Unique_tag_result_of
	{	
	};

template<class _Void,
	class... _Types>
	struct _Result_of
	{	
	};

template<class... _Types>
	struct _Result_of<
		void_t<
			_Unique_tag_result_of,	
			decltype(::std:: invoke(::std:: declval<_Types>()...))>,
		_Types...>
	{	
	typedef decltype(::std:: invoke(::std:: declval<_Types>()...)) type;
	};

template<class _Fty>
	struct result_of
	{	
	static_assert(_Always_false<_Fty>::value,
		"result_of<CallableType> is invalid; use "
		"result_of<CallableType(zero or more argument types)> instead.");
	};









template<class _Fty, class... _Args> struct result_of<_Fty __cdecl (_Args...)> : _Result_of<void, _Fty, _Args...> { };    template<class _Fty, class... _Args> struct result_of<_Fty __vectorcall (_Args...)> : _Result_of<void, _Fty, _Args...> { };


	
template<class _Ty,
	class = void>
	struct _Weak_result_type
	{	
	};

template<class _Ty>
	struct _Weak_result_type<_Ty, void_t<
		typename _Ty::result_type> >
	{	
	typedef typename _Ty::result_type result_type;
	};

template<class _Ty,
	class = void>
	struct _Weak_argument_type
		: _Weak_result_type<_Ty>
	{	
	};

template<class _Ty>
	struct _Weak_argument_type<_Ty, void_t<
		typename _Ty::argument_type> >
		: _Weak_result_type<_Ty>
	{	
	typedef typename _Ty::argument_type argument_type;
	};

template<class _Ty,
	class = void>
	struct _Weak_binary_args
		: _Weak_argument_type<_Ty>
	{	
	};

template<class _Ty>
	struct _Weak_binary_args<_Ty, void_t<
		typename _Ty::first_argument_type,
		typename _Ty::second_argument_type> >
		: _Weak_argument_type<_Ty>
	{	
	typedef typename _Ty::first_argument_type first_argument_type;
	typedef typename _Ty::second_argument_type second_argument_type;
	};

template<class _Ty>
	struct _Weak_types
	{	
	typedef _Is_function<typename remove_pointer<_Ty>::type> _Is_f_or_pf;
	typedef _Is_memfunptr<typename remove_cv<_Ty>::type> _Is_pmf;
	typedef typename _If<_Is_f_or_pf::_Bool_type::value, _Is_f_or_pf,
		typename _If<_Is_pmf::_Bool_type::value, _Is_pmf,
		_Weak_binary_args<_Ty> >::type>::type type;
	};

	
template<class _Ty>
	class reference_wrapper
		: public _Weak_types<_Ty>::type
	{	
public:
	static_assert(is_object<_Ty>::value || is_function<_Ty>::value,
		"reference_wrapper<T> requires T to be an object type "
		"or a function type.");

	typedef _Ty type;

	reference_wrapper(_Ty& _Val) noexcept
		: _Ptr(::std:: addressof(_Val))
		{	
		}

	operator _Ty&() const noexcept
		{	
		return (*_Ptr);
		}

	_Ty& get() const noexcept
		{	
		return (*_Ptr);
		}

	template<class... _Types>
		auto operator()(_Types&&... _Args) const
		-> decltype(::std:: invoke(get(), ::std:: forward<_Types>(_Args)...))
		{	
		return (::std:: invoke(get(), ::std:: forward<_Types>(_Args)...));
		}

	reference_wrapper(_Ty&&) = delete;

private:
	_Ty *_Ptr;
	};

	
template<class _Ty> inline
	reference_wrapper<_Ty>
		ref(_Ty& _Val) noexcept
	{	
	return (reference_wrapper<_Ty>(_Val));
	}

template<class _Ty>
	void ref(const _Ty&&) = delete;

template<class _Ty> inline
	reference_wrapper<_Ty>
		ref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: ref(_Val.get()));
	}

template<class _Ty> inline
	reference_wrapper<const _Ty>
		cref(const _Ty& _Val) noexcept
	{	
	return (reference_wrapper<const _Ty>(_Val));
	}

template<class _Ty>
	void cref(const _Ty&&) = delete;

template<class _Ty> inline
	reference_wrapper<const _Ty>
		cref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: cref(_Val.get()));
	}

	
template<class _Ty>
	struct _Unrefwrap_helper
	{	
	typedef _Ty type;
	static constexpr bool _Is_refwrap = false;
	};

template<class _Ty>
	struct _Unrefwrap_helper<reference_wrapper<_Ty> >
	{	
	typedef _Ty& type;
	static constexpr bool _Is_refwrap = true;
	};

template<class _Ty>
	struct _Unrefwrap
	{	
	typedef typename decay<_Ty>::type _Ty1;
	typedef typename _Unrefwrap_helper<_Ty1>::type type;
	static constexpr bool _Is_refwrap = _Unrefwrap_helper<_Ty1>::_Is_refwrap;
	};


namespace tr1 {	
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
	}	


		
template<class _Ty>
	struct _Is_swappable;

		
template<class _Ty>
	struct _Is_nothrow_swappable;

		





template<class _Ty,
	class = void> inline

	void swap(_Ty&, _Ty&)
		noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value);

template<class _Ty,
	size_t _Size,
	class = typename enable_if<_Is_swappable<_Ty>::value>::type> inline
	void swap(_Ty (&)[_Size], _Ty (&)[_Size])
		noexcept(_Is_nothrow_swappable<_Ty>::value);

		
template<class _Ty1,
	class _Ty2,
	class = void>
	struct _Swappable_with_helper
		: false_type
	{	
	};

struct _Swappable_with_helper_unique_type {}; 
template<class _Ty1,
	class _Ty2>
	struct _Swappable_with_helper<_Ty1, _Ty2, void_t<
		_Swappable_with_helper_unique_type,
		decltype(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))>>
		: true_type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_swappable_with
		: conjunction<
			_Swappable_with_helper<_Ty1, _Ty2>,
			_Swappable_with_helper<_Ty2, _Ty1>>::type
	{	
		
	};

		
template<class _Ty>
	struct _Is_swappable
		: _Is_swappable_with<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<_Ty>::type>::type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Swap_cannot_throw
	{	
		
		

	static constexpr bool value = 
		noexcept(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))
		&& noexcept(swap(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()));



	using type = bool_constant<value>;
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_nothrow_swappable_with
		: conjunction<
			_Is_swappable_with<_Ty1, _Ty2>,
			_Swap_cannot_throw<_Ty1, _Ty2>>::type
	{	
		
	};

		
template<class _Ty>
	struct _Is_nothrow_swappable
		: _Is_nothrow_swappable_with<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<_Ty>::type>::type
	{	
	};



































		
template<class _Ty>
	using remove_const_t = typename remove_const<_Ty>::type;

template<class _Ty>
	using remove_volatile_t = typename remove_volatile<_Ty>::type;

template<class _Ty>
	using remove_cv_t = typename remove_cv<_Ty>::type;

template<class _Ty>
	using add_const_t = typename add_const<_Ty>::type;

template<class _Ty>
	using add_volatile_t = typename add_volatile<_Ty>::type;

template<class _Ty>
	using add_cv_t = typename add_cv<_Ty>::type;

template<class _Ty>
	using remove_reference_t = typename remove_reference<_Ty>::type;

template<class _Ty>
	using add_lvalue_reference_t = typename add_lvalue_reference<_Ty>::type;

template<class _Ty>
	using add_rvalue_reference_t = typename add_rvalue_reference<_Ty>::type;

template<class _Ty>
	using make_signed_t = typename make_signed<_Ty>::type;

template<class _Ty>
	using make_unsigned_t = typename make_unsigned<_Ty>::type;

template<class _Ty>
	using remove_extent_t = typename remove_extent<_Ty>::type;

template<class _Ty>
	using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

template<class _Ty>
	using remove_pointer_t = typename remove_pointer<_Ty>::type;

template<class _Ty>
	using add_pointer_t = typename add_pointer<_Ty>::type;

template<size_t _Len,
	size_t _Align = alignment_of<max_align_t>::value>
	using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

template<size_t _Len,
	class... _Types>
	using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

template<class _Ty>
	using decay_t = typename decay<_Ty>::type;

template<bool _Test,
	class _Ty = void>
	using enable_if_t = typename enable_if<_Test, _Ty>::type;

template<bool _Test,
	class _Ty1,
	class _Ty2>
	using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

template<class... _Ty>
	using common_type_t = typename common_type<_Ty...>::type;

template<class _Ty>
	using underlying_type_t = typename underlying_type<_Ty>::type;

template<class _Ty>
	using result_of_t = typename result_of<_Ty>::type;

	
 
template<class _Ty>
	constexpr bool is_void_v = is_void<_Ty>::value;
template<class _Ty>
	constexpr bool is_null_pointer_v = is_null_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_array_v = is_array<_Ty>::value;
template<class _Ty>
	constexpr bool is_pointer_v = is_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_lvalue_reference_v = is_lvalue_reference<_Ty>::value;
template<class _Ty>
	constexpr bool is_rvalue_reference_v = is_rvalue_reference<_Ty>::value;
template<class _Ty>
	constexpr bool is_member_object_pointer_v = is_member_object_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_member_function_pointer_v = is_member_function_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_enum_v = is_enum<_Ty>::value;
template<class _Ty>
	constexpr bool is_union_v = is_union<_Ty>::value;
template<class _Ty>
	constexpr bool is_class_v = is_class<_Ty>::value;
template<class _Ty>
	constexpr bool is_reference_v = is_reference<_Ty>::value;
template<class _Ty>
	constexpr bool is_fundamental_v = is_fundamental<_Ty>::value;
template<class _Ty>
	constexpr bool is_object_v = is_object<_Ty>::value;
template<class _Ty>
	constexpr bool is_scalar_v = is_scalar<_Ty>::value;
template<class _Ty>
	constexpr bool is_compound_v = is_compound<_Ty>::value;
template<class _Ty>
	constexpr bool is_member_pointer_v = is_member_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_const_v = is_const<_Ty>::value;
template<class _Ty>
	constexpr bool is_volatile_v = is_volatile<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivial_v = is_trivial<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_copyable_v = is_trivially_copyable<_Ty>::value;
template<class _Ty>
	constexpr bool is_standard_layout_v = is_standard_layout<_Ty>::value;
template<class _Ty>
	constexpr bool is_pod_v = is_pod<_Ty>::value;
template<class _Ty>
	constexpr bool is_literal_type_v = is_literal_type<_Ty>::value;
template<class _Ty>
	constexpr bool is_empty_v = is_empty<_Ty>::value;
template<class _Ty>
	constexpr bool is_polymorphic_v = is_polymorphic<_Ty>::value;
template<class _Ty>
	constexpr bool is_abstract_v = is_abstract<_Ty>::value;
template<class _Ty>
	constexpr bool is_final_v = is_final<_Ty>::value;
template<class _Ty>
	constexpr bool is_signed_v = is_signed<_Ty>::value;
template<class _Ty>
	constexpr bool is_unsigned_v = is_unsigned<_Ty>::value;
template<class _Ty,
	class... _Args>
	constexpr bool is_constructible_v = is_constructible<_Ty, _Args...>::value;
template<class _Ty>
	constexpr bool is_default_constructible_v = is_default_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_copy_constructible_v = is_copy_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_move_constructible_v = is_move_constructible<_Ty>::value;
template<class _Ty,
	class _Uty>
	constexpr bool is_assignable_v = is_assignable<_Ty, _Uty>::value;
template<class _Ty>
	constexpr bool is_copy_assignable_v = is_copy_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_move_assignable_v = is_move_assignable<_Ty>::value;







template<class _Ty>
	constexpr bool is_destructible_v = is_destructible<_Ty>::value;
template<class _Ty,
	class... _Args>
	constexpr bool is_trivially_constructible_v = is_trivially_constructible<_Ty, _Args...>::value;
template<class _Ty>
	constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<_Ty>::value;
template<class _Ty,
	class _Uty>
	constexpr bool is_trivially_assignable_v = is_trivially_assignable<_Ty, _Uty>::value;
template<class _Ty>
	constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_destructible_v = is_trivially_destructible<_Ty>::value;
template<class _Ty,
	class... _Args>
	constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<_Ty, _Args...>::value;
template<class _Ty>
	constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<_Ty>::value;
template<class _Ty,
	class _Uty>
	constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<_Ty, _Uty>::value;
template<class _Ty>
	constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<_Ty>::value;







template<class _Ty>
	constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<_Ty>::value;
template<class _Ty>
	constexpr bool has_virtual_destructor_v = has_virtual_destructor<_Ty>::value;
template<class _Ty>
	constexpr size_t alignment_of_v = alignment_of<_Ty>::value;
template<class _Ty>
	constexpr size_t rank_v = rank<_Ty>::value;
template<class _Ty,
	unsigned int _Ix = 0>
	constexpr size_t extent_v = extent<_Ty, _Ix>::value;
template<class _Base,
	class _Derived>
	constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;
template<class _From,
	class _To>
	constexpr bool is_convertible_v = is_convertible<_From, _To>::value;
template<class... _Traits>
	constexpr bool conjunction_v = conjunction<_Traits...>::value;
template<class... _Traits>
	constexpr bool disjunction_v = disjunction<_Traits...>::value;
template<class _Trait>
	constexpr bool negation_v = negation<_Trait>::value;
 

}

 
 #pragma warning(pop)
 #pragma pack(pop)










 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {

  


  



  




  


  

__declspec(dllimport) bool __cdecl uncaught_exception() noexcept;
__declspec(dllimport) int __cdecl uncaught_exceptions() noexcept;

}

 









#pragma once





__pragma(pack(push, 8)) extern "C" {





    


















typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;








   
void* __cdecl _alloca(  size_t _Size);





    __declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);

     
    __declspec(dllimport) int __cdecl _heapmin(void);

    
        __declspec(dllimport) int __cdecl _heapwalk(  _HEAPINFO* _EntryInfo);
    

    
          __declspec(dllimport) int __cdecl _heapchk(void);
        __declspec(dllimport) int __cdecl _resetstkoflw(void);
    
     
    
    
    

    
        
    



    typedef char __static_assert_t[(sizeof(unsigned int) <= 16) != 0];


    #pragma warning(push)
    #pragma warning(disable:6540)

    __inline void* _MarkAllocaS(   void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 16;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 16;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

    #pragma warning(pop)


















    
    















    

    #pragma warning(push)
    #pragma warning(disable: 6014)
    __inline void __cdecl _freea(    void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 16;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }
            





        }
    }
    #pragma warning(pop)






    




} __pragma(pack(pop))









#pragma once









#pragma once










#pragma once





__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* terminate_handler )();
typedef void (__cdecl* terminate_function)();








    __declspec(dllimport) __declspec(noreturn) void __cdecl abort();
    __declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw();

    

        __declspec(dllimport) terminate_handler __cdecl set_terminate(
              terminate_handler _NewTerminateHandler
            ) throw();

        __declspec(dllimport) terminate_handler __cdecl _get_terminate();

    



} __pragma(pack(pop))






__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* unexpected_handler )();
typedef void (__cdecl* unexpected_function)();






struct _EXCEPTION_POINTERS;


    
    __declspec(dllimport) __declspec(noreturn) void __cdecl unexpected() throw(...);

    

        __declspec(dllimport) unexpected_handler __cdecl set_unexpected(
              unexpected_handler _NewUnexpectedHandler
            ) throw();

        __declspec(dllimport) unexpected_handler __cdecl _get_unexpected();

        typedef void (__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

        __declspec(dllimport) _se_translator_function __cdecl _set_se_translator(
              _se_translator_function _NewSETranslator
            );

    

    class type_info;

    __declspec(dllimport) int __cdecl _is_exception_typeof(
          type_info const&     _Type,
          _EXCEPTION_POINTERS* _ExceptionPtr
        );

    __declspec(dllimport) bool __cdecl __uncaught_exception();
    __declspec(dllimport) int  __cdecl __uncaught_exceptions();



} __pragma(pack(pop))








#pragma pack(push, 8)


__pragma(pack(push, 8)) extern "C" {

struct __std_exception_data
{
    char const* _What;
    bool        _DoFree;
};

__declspec(dllimport) void __cdecl __std_exception_copy(
       __std_exception_data const* _From,
      __std_exception_data*       _To
    );

__declspec(dllimport) void __cdecl __std_exception_destroy(
      __std_exception_data* _Data
    );

} __pragma(pack(pop))



namespace std {

class exception
{
public:

    exception() throw()
        : _Data()
    {
    }

    explicit exception(char const* const _Message) throw()
        : _Data()
    {
        __std_exception_data _InitData = { _Message, true };
        __std_exception_copy(&_InitData, &_Data);
    }

    exception(char const* const _Message, int) throw()
        : _Data()
    {
        _Data._What = _Message;
    }

    exception(exception const& _Other) throw()
        : _Data()
    {
        __std_exception_copy(&_Other._Data, &_Data);
    }

    exception& operator=(exception const& _Other) throw()
    {
        if (this == &_Other)
        {
            return *this;
        }

        __std_exception_destroy(&_Data);
        __std_exception_copy(&_Other._Data, &_Data);
        return *this;
    }

    virtual ~exception() throw()
    {
        __std_exception_destroy(&_Data);
    }

    virtual char const* what() const
    {
        return _Data._What ? _Data._What : "Unknown exception";
    }

private:

    __std_exception_data _Data;
};

class bad_exception
    : public exception
{
public:

    bad_exception() throw()
        : exception("bad exception", 1)
    {
    }
};

class bad_alloc
    : public exception
{
public:

    bad_alloc() throw()
        : exception("bad allocation", 1)
    {
    }

private:

    friend class bad_array_new_length;

    bad_alloc(char const* const _Message) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_array_new_length
    : public bad_alloc
{
public:

    bad_array_new_length() throw()
        : bad_alloc("bad array new length")
    {
    }
};

} 


#pragma pack(pop)







namespace std {

using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);


inline terminate_handler __cdecl get_terminate() noexcept
	{	
	return (_get_terminate());
	}

inline unexpected_handler __cdecl get_unexpected() noexcept
	{	
	return (_get_unexpected());
	}


}

 
















































































































































































__declspec(dllimport) void __cdecl __ExceptionPtrCreate(  void*);
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy(  void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopy(  void*,   const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrAssign(  void*,   const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare(  const void*,   const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrToBool(  const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrSwap(  void*,   void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException(  void*);
[[noreturn]] __declspec(dllimport) void __cdecl __ExceptionPtrRethrow(  const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException(
	  void*,   const void*,   const void*);

namespace std {

class exception_ptr
	{
public:
	exception_ptr() throw ()
		{
		__ExceptionPtrCreate(this);
		}

	exception_ptr(nullptr_t) throw ()
		{
		__ExceptionPtrCreate(this);
		}

	~exception_ptr() throw ()
		{
		__ExceptionPtrDestroy(this);
		}

	exception_ptr(const exception_ptr& _Rhs) throw ()
		{
		__ExceptionPtrCopy(this, &_Rhs);
		}

	exception_ptr& operator=(const exception_ptr& _Rhs) throw ()
		{
		__ExceptionPtrAssign(this, &_Rhs);
		return *this;
		}

	exception_ptr& operator=(nullptr_t) throw ()
		{
		exception_ptr _Ptr;
		__ExceptionPtrAssign(this, &_Ptr);
		return *this;
		}

	explicit operator bool() const throw ()
		{
		return __ExceptionPtrToBool(this);
		}

	[[noreturn]] void _RethrowException() const
		{
		__ExceptionPtrRethrow(this);
		}

	static exception_ptr _Current_exception() throw ()
		{
		exception_ptr _Retval;
		__ExceptionPtrCurrentException(&_Retval);
		return _Retval;
		}

	static exception_ptr _Copy_exception(  void* _Except,   const void* _Ptr)
		{
		exception_ptr _Retval = 0;
		if (!_Ptr)
			{
			
			return _Retval;
			}
		__ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
		return _Retval;
		}

private:
	void* _Data1;
	void* _Data2;
	};

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) throw ()
	{
	__ExceptionPtrSwap(&_Lhs, &_Rhs);
	}

inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return __ExceptionPtrCompare(&_Lhs, &_Rhs);
	}

inline bool operator==(nullptr_t, const exception_ptr& _Rhs) throw ()
	{
	return !_Rhs;
	}

inline bool operator==(const exception_ptr& _Lhs, nullptr_t) throw ()
	{
	return !_Lhs;
	}

inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline exception_ptr current_exception() noexcept
	{
	return exception_ptr::_Current_exception();
	}

[[noreturn]] inline void rethrow_exception(  exception_ptr _Ptr)
	{
	_Ptr._RethrowException();
	}

template<class _Ex> void *__GetExceptionInfo(_Ex);

template<class _Ex> exception_ptr make_exception_ptr(_Ex _Except) noexcept
	{
	return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
	}

	
class nested_exception
	{	
public:
	nested_exception() noexcept
		: _Exc(::std:: current_exception())
		{	
		}

	nested_exception(const nested_exception&) noexcept = default;
	nested_exception& operator=(const nested_exception&) noexcept = default;
	virtual ~nested_exception() noexcept = default;

	[[noreturn]] void rethrow_nested() const
		{	
		if (_Exc)
			::std:: rethrow_exception(_Exc);
		else
			::std:: terminate();
		}

	::std:: exception_ptr nested_ptr() const noexcept
		{	
		return (_Exc);
		}

private:
	::std:: exception_ptr _Exc;
	};

	
template<class _Ty,
	class _Uty>
	struct _With_nested
		: _Uty, nested_exception
	{	
	explicit _With_nested(_Ty&& _Arg)
		: _Uty(::std:: forward<_Ty>(_Arg)), nested_exception()
		{	
		}
	};

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, true_type)
	{	
	typedef typename remove_reference<_Ty>::type _Uty;
	typedef _With_nested<_Ty, _Uty> _Glued;

	throw _Glued(::std:: forward<_Ty>(_Arg));
	}

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, false_type)
	{	
	typedef typename decay<_Ty>::type _Decayed;

	throw _Decayed(::std:: forward<_Ty>(_Arg));
	}

template<class _Ty>
	[[noreturn]] inline void throw_with_nested(_Ty&& _Arg)
	{	
	typedef typename remove_reference<_Ty>::type _Uty;

	integral_constant<bool,
		is_class<_Uty>::value
		&& !is_base_of<nested_exception, _Uty>::value
		&& !is_final<_Uty>::value> _Tag;

	_Throw_with_nested(::std:: forward<_Ty>(_Arg), _Tag);
	}

	
template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *_Ptr, true_type)
	{	
	const auto _Nested = dynamic_cast<const nested_exception *>(_Ptr);

	if (_Nested)
		_Nested->rethrow_nested();
	}

template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *, false_type)
	{	
	}

template<class _Ty> inline
	void rethrow_if_nested(const _Ty& _Arg)
	{	
	integral_constant<bool,
		is_polymorphic<_Ty>::value
		&& (!is_base_of<nested_exception, _Ty>::value
			|| is_convertible<_Ty *, nested_exception *>::value)> _Tag;

	_Rethrow_if_nested(::std:: addressof(_Arg), _Tag);
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)

















#pragma once




































































































































































































































































































































extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985) 






    namespace std
    {
        struct nothrow_t { };

        extern nothrow_t const nothrow;
    }


   
__declspec(allocator) void* __cdecl operator new(
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new(
    size_t                _Size,
    std::nothrow_t const&
    ) throw();

   
__declspec(allocator) void* __cdecl operator new[](
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new[](
    size_t                _Size,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block
    ) throw();

void __cdecl operator delete(
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete[](
    void* _Block
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void*  _Block,
    size_t _Size
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) throw();


    
       
    inline void* __cdecl operator new(size_t _Size,   void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) throw()
    {
        return;
    }



    
       
    inline void* __cdecl operator new[](size_t _Size,   void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) throw()
    {
    }




#pragma warning(pop)
#pragma pack(pop)

} 



 #pragma pack(push,8)
 #pragma warning(push,3)
 

  



namespace std {

		
 

typedef void (__cdecl * new_handler) ();
 

		
__declspec(dllimport) new_handler __cdecl set_new_handler(  new_handler)
	noexcept;	

__declspec(dllimport) new_handler __cdecl get_new_handler()
	noexcept;	
}

 
 #pragma warning(pop)
 #pragma pack(pop)











#pragma once







#pragma once






#pragma once





#pragma once










 







#pragma once





__pragma(pack(push, 8)) extern "C" {































    
















    
    



typedef __int64 fpos_t;




__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(
           FILE*   _Stream,
      char*** _Base,
      char*** _Pointer,
      int**   _Count
    );









    
    __declspec(dllimport) errno_t __cdecl clearerr_s(
          FILE* _Stream
        );

    
    __declspec(dllimport) errno_t __cdecl fopen_s(
          FILE**      _Stream,
                             char const* _FileName,
                             char const* _Mode
        );
    
    
     
    __declspec(dllimport) size_t __cdecl fread_s(
            void*  _Buffer,
                       size_t _BufferSize,
                                                                        size_t _ElementSize,
                                                                        size_t _ElementCount,
                                                                     FILE*  _Stream
        );
    
    
    __declspec(dllimport) errno_t __cdecl freopen_s(
          FILE**      _Stream,
                             char const* _FileName,
                             char const* _Mode,
                            FILE*       _OldStream
        );

     
    __declspec(dllimport) char* __cdecl gets_s(
          char*   _Buffer,
                           rsize_t _Size
        );

    
    __declspec(dllimport) errno_t __cdecl tmpfile_s(
            FILE** _Stream
        );

     
    
    __declspec(dllimport) errno_t __cdecl tmpnam_s(
          char*   _Buffer,
                           rsize_t _Size
        );



__declspec(dllimport) void __cdecl clearerr(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl fclose(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fcloseall(void);

 
__declspec(dllimport) FILE* __cdecl _fdopen(
        int         _FileHandle,
      char const* _Mode
    );

 
__declspec(dllimport) int __cdecl feof(
      FILE* _Stream
    );

 
__declspec(dllimport) int __cdecl ferror(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl fflush(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl fgetc(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fgetchar(void);

 

__declspec(dllimport) int __cdecl fgetpos(
      FILE*   _Stream,
        fpos_t* _Position
    );

 

__declspec(dllimport) char* __cdecl fgets(
      char* _Buffer,
                           int   _MaxCount,
                        FILE* _Stream
    );

 
__declspec(dllimport) int __cdecl _fileno(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _flushall(void);

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl fopen(
      char const* _FileName,
      char const* _Mode
    );


 

__declspec(dllimport) int __cdecl fputc(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fputchar(
      int _Character
    );

 

__declspec(dllimport) int __cdecl fputs(
       char const* _Buffer,
      FILE*       _Stream
    );


__declspec(dllimport) size_t __cdecl fread(
      void*  _Buffer,
                                                  size_t _ElementSize,
                                                  size_t _ElementCount,
                                               FILE*  _Stream
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl freopen(
       char const* _FileName,
       char const* _Mode,
      FILE*       _Stream
    );

 
__declspec(dllimport) FILE* __cdecl _fsopen(
      char const* _FileName,
      char const* _Mode,
        int         _ShFlag
    );

 

__declspec(dllimport) int __cdecl fsetpos(
      FILE*         _Stream,
         fpos_t const* _Position
    );

 

__declspec(dllimport) int __cdecl fseek(
      FILE* _Stream,
         long  _Offset,
         int   _Origin
    );

 

__declspec(dllimport) int __cdecl _fseeki64(
      FILE*   _Stream,
         __int64 _Offset,
         int     _Origin
    );

 
 
__declspec(dllimport) long __cdecl ftell(
      FILE* _Stream
    );

 
 
__declspec(dllimport) __int64 __cdecl _ftelli64(
      FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl fwrite(
      void const* _Buffer,
                                                size_t      _ElementSize,
                                                size_t      _ElementCount,
                                             FILE*       _Stream
    );

 
 
__declspec(dllimport) int __cdecl getc(
      FILE* _Stream
    );

 
__declspec(dllimport) int __cdecl getchar(void);

 
__declspec(dllimport) int __cdecl _getmaxstdio(void);

extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }

 
__declspec(dllimport) int __cdecl _getw(
      FILE* _Stream
    );

__declspec(dllimport) void __cdecl perror(
      char const* _ErrorMessage
    );



     
    
    __declspec(dllimport) int __cdecl _pclose(
          FILE* _Stream
        );

     
    __declspec(dllimport) FILE* __cdecl _popen(
          char const* _Command,
          char const* _Mode
        );



 

__declspec(dllimport) int __cdecl putc(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl putchar(
      int _Character
    );


__declspec(dllimport) int __cdecl puts(
      char const* _Buffer
    );

 

__declspec(dllimport) int __cdecl _putw(
         int   _Word, 
      FILE* _Stream
    );



__declspec(dllimport) int __cdecl remove(
      char const* _FileName
    );

 
__declspec(dllimport) int __cdecl rename(
      char const* _OldFileName,
      char const* _NewFileName
    );

__declspec(dllimport) int __cdecl _unlink(
      char const* _FileName
    );



    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
    __declspec(dllimport) int __cdecl unlink(
          char const* _FileName
        );





__declspec(dllimport) void __cdecl rewind(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _rmtmp(void);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl setbuf(
                                                  FILE* _Stream,
        char* _Buffer
    );


__declspec(dllimport) int __cdecl _setmaxstdio(
      int _Maximum
    );

 

__declspec(dllimport) int __cdecl setvbuf(
                           FILE*  _Stream,
        char*  _Buffer,
                              int    _Mode,
                              size_t _Size
    );






 
__declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam(
      char const* _DirectoryName,
      char const* _FilePrefix
    );





  __declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl tmpfile(void);

extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(  char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  char* __cdecl tmpnam(  char *_Buffer);

 

__declspec(dllimport) int __cdecl ungetc(
         int   _Character,
      FILE* _Stream
    );








__declspec(dllimport) void __cdecl _lock_file(
      FILE* _Stream
    );

__declspec(dllimport) void __cdecl _unlock_file(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fclose_nolock(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fflush_nolock(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fgetc_nolock(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fputc_nolock(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fread_nolock(
      void*  _Buffer,
                                                  size_t _ElementSize,
                                                  size_t _ElementCount,
                                               FILE*  _Stream
    );


 
__declspec(dllimport) size_t __cdecl _fread_nolock_s(
      void*  _Buffer,
               size_t _BufferSize,
                                                                  size_t _ElementSize,
                                                                  size_t _ElementCount,
                                                               FILE*  _Stream
    );


__declspec(dllimport) int __cdecl _fseek_nolock(
      FILE* _Stream,
         long  _Offset,
         int   _Origin
    );


__declspec(dllimport) int __cdecl _fseeki64_nolock(
      FILE*   _Stream,
         __int64 _Offset,
         int     _Origin
    );

 
__declspec(dllimport) long __cdecl _ftell_nolock(
      FILE* _Stream
    );

 
__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(
      FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fwrite_nolock(
      void const* _Buffer,
                                                size_t      _ElementSize,
                                                size_t      _ElementCount,
                                             FILE*       _Stream
    );


__declspec(dllimport) int __cdecl _getc_nolock(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _putc_nolock(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _ungetc_nolock(
         int   _Character,
      FILE* _Stream
    );


























__declspec(dllimport) int* __cdecl __p__commode(void);




    














__declspec(dllimport) int __cdecl __stdio_common_vfprintf(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__inline int __cdecl _vfprintf_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )



{
    return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfprintf(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    return _vfprintf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfprintf_s_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )



{
    return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}




    
    __inline int __cdecl vfprintf_s(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
    }





__inline int __cdecl _vfprintf_p_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )



{
    return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl _vfprintf_p(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )



{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vprintf(
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _vprintf_s_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )



{
    return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}




    
    __inline int __cdecl vprintf_s(
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }





__inline int __cdecl _vprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )



{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl _vprintf_p(
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _fprintf_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl fprintf(
                            FILE*       const _Stream,
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


__declspec(dllimport) int __cdecl _set_printf_count_output(
      int _Value
    );

__declspec(dllimport) int __cdecl _get_printf_count_output(void);


__inline int __cdecl _fprintf_s_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




    
    __inline int __cdecl fprintf_s(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _fprintf_p_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fprintf_p(
                            FILE*       const _Stream,
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _printf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl printf(
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _printf_s_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




    
    __inline int __cdecl printf_s(
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _printf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _printf_p(
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}








__declspec(dllimport) int __cdecl __stdio_common_vfscanf(
                                        unsigned __int64 _Options,
                                     FILE*            _Stream,
        char const*      _Format,
                                    _locale_t        _Locale,
                                           va_list          _Arglist
    );


__inline int __cdecl _vfscanf_l(
                            FILE*       const _Stream,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )



{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfscanf(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    return _vfscanf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfscanf_s_l(
                            FILE*       const _Stream,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )



{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}





    
    __inline int __cdecl vfscanf_s(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
    }





__inline int __cdecl _vscanf_l(
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )



{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vscanf(
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}



__inline int __cdecl _vscanf_s_l(
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )



{
    return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}




    
    __inline int __cdecl vscanf_s(
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }




 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _fscanf_l(
                                     FILE*       const _Stream,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


  __declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl fscanf(
                           FILE*       const _Stream,
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fscanf_s_l(
                                       FILE*       const _Stream,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




    
    __inline int __cdecl fscanf_s(
                                 FILE*       const _Stream,
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _scanf_l(
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


  __declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl scanf(
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scanf_s_l(
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




    
    __inline int __cdecl scanf_s(
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }











 
__declspec(dllimport) int __cdecl __stdio_common_vsprintf(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
                                         size_t           _MaxCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnprintf_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


 

__inline int __cdecl _vsnprintf(
        char*       const _Buffer,
                                          size_t      const _BufferCount,
                   char const* const _Format,
                                             va_list           _ArgList
    )



{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)
}













 

__inline int __cdecl vsnprintf(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsprintf_l(
        char*       const _Buffer,
                      char const* const _Format,
                    _locale_t   const _Locale,
                           va_list           _ArgList
    )



{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    #pragma warning(pop)
}


 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl vsprintf(
               char*       const _Buffer,
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
    #pragma warning(pop)
}


 

__inline int __cdecl _vsprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




     
    
    __inline int __cdecl vsprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }

    
    extern "C++" { template <size_t _Size> inline   int __cdecl vsprintf_s(  char (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }



 

__inline int __cdecl _vsprintf_p_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


 

__inline int __cdecl _vsprintf_p(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}


 

__inline int __cdecl _vsnprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
                                         size_t      const _MaxCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list          _ArgList
    )



{
    int const _Result = __stdio_common_vsnprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


 

__inline int __cdecl _vsnprintf_s(
       char*       const _Buffer,
                               size_t      const _BufferCount,
                               size_t      const _MaxCount,
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}


extern "C++" { template <size_t _Size> inline   int __cdecl _vsnprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }



     
    
    __inline int __cdecl vsnprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
                                   size_t      const _MaxCount,
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }

    
    extern "C++" { template <size_t _Size> inline   int __cdecl vsnprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }




__inline int __cdecl _vscprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


 
__inline int __cdecl _vscprintf(
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    return _vscprintf_l(_Format, 0, _ArgList);
}



__inline int __cdecl _vscprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


 
__inline int __cdecl _vscprintf_p(
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    return _vscprintf_p_l(_Format, 0, _ArgList);
}



__inline int __cdecl _vsnprintf_c_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


 

__inline int __cdecl _vsnprintf_c(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}


 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _sprintf_l(
                         char*       const _Buffer,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl sprintf(
               char*       const _Buffer,
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}


#pragma warning(push)
#pragma warning(disable: 4996)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   int __cdecl sprintf(  char *_Buffer,  char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   int __cdecl vsprintf(  char *_Buffer,  char const* _Format, va_list _Args);
#pragma warning(pop)

 

__inline int __cdecl _sprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




     
    
    __inline int __cdecl sprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl sprintf_s(  char (&_Buffer)[_Size],     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }

 

__inline int __cdecl _sprintf_p_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _sprintf_p(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snprintf_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}













 
 
__inline int __cdecl snprintf(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress:28719)    
    _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 
__inline int __cdecl _snprintf(
        char*       const _Buffer,
                                          size_t      const _BufferCount,
                   char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress:28719)    
    _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))    int __cdecl _snprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))    int __cdecl _vsnprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, va_list _Args);

 

__inline int __cdecl _snprintf_c_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _snprintf_c(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _snprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
                                         size_t      const _MaxCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 

__inline int __cdecl _snprintf_s(
       char*       const _Buffer,
                               size_t      const _BufferCount,
                               size_t      const _MaxCount,
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }


__inline int __cdecl _scprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 
__inline int __cdecl _scprintf(
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 
__inline int __cdecl _scprintf_p(
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscprintf_p(_Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}







__declspec(dllimport) int __cdecl __stdio_common_vsscanf(
                                        unsigned __int64 _Options,
              char const*      _Buffer,
                                        size_t           _BufferCount,
        char const*      _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );


__inline int __cdecl _vsscanf_l(
                             char const* const _Buffer,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )



{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}



__inline int __cdecl vsscanf(
                             char const* const _Buffer,
        char const* const _Format,
                                  va_list           _ArgList
    )



{
    return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
}



__inline int __cdecl _vsscanf_s_l(
                             char const* const _Buffer,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )



{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}




    #pragma warning(push)
    #pragma warning(disable:6530)

    
    __inline int __cdecl vsscanf_s(
                                 char const* const _Buffer,
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }


    extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(  char const (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }
   
    #pragma warning(pop)



 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _sscanf_l(
                                      char const* const _Buffer,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


  __declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl sscanf(
                            char const* const _Buffer,
        char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _sscanf_s_l(
                                        char const* const _Buffer,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




    
    __inline int __cdecl sscanf_s(
                                  char const* const _Buffer,
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = vsscanf_s(_Buffer, _Format, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




#pragma warning(push)
#pragma warning(disable:6530)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snscanf_l(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snscanf(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snscanf_s_l(
          char const* const _Buffer,
                                          size_t      const _BufferCount,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _snscanf_s(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
                char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}


#pragma warning(pop)














    

    




    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tempnam" ". See online help for details."))
    __declspec(dllimport) char* __cdecl tempnam(
          char const* _Directory,
          char const* _FilePrefix
        );

    



     __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcloseall" ". See online help for details.")) __declspec(dllimport) int   __cdecl fcloseall(void);
          __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fdopen" ". See online help for details."))    __declspec(dllimport) FILE* __cdecl fdopen(  int _FileHandle,   char const* _Format);
     __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fgetchar" ". See online help for details."))  __declspec(dllimport) int   __cdecl fgetchar(void);
          __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fileno" ". See online help for details."))    __declspec(dllimport) int   __cdecl fileno(  FILE* _Stream);
     __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_flushall" ". See online help for details."))  __declspec(dllimport) int   __cdecl flushall(void);
     __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fputchar" ". See online help for details."))  __declspec(dllimport) int   __cdecl fputchar(  int _Ch);
          __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getw" ". See online help for details."))      __declspec(dllimport) int   __cdecl getw(  FILE* _Stream);
     __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putw" ". See online help for details."))      __declspec(dllimport) int   __cdecl putw(  int _Ch,   FILE* _Stream);
          __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_rmtmp" ". See online help for details."))     __declspec(dllimport) int   __cdecl rmtmp(void);





} __pragma(pack(pop))





 
 
 
 
 
 
 

 
 
 
 

  

typedef FILE FILE;

 
namespace std {
using :: FILE; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;

using :: snprintf; using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;
}
 










#pragma once










 







#pragma once














#pragma once







__pragma(pack(push, 8)) extern "C" {



 
__declspec(dllimport) int __cdecl _memicmp(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size
    );

 
__declspec(dllimport) int __cdecl _memicmp_l(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size,
                         _locale_t   _Locale
    );





    














    



















    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memccpy" ". See online help for details."))
    __declspec(dllimport) void* __cdecl memccpy(
          void*       _Dst,
            void const* _Src,
                                   int         _Val,
                                   size_t      _Size
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl memicmp(
          void const* _Buf1,
          void const* _Buf2,
                                 size_t      _Size
        );





    extern "C++"  
    inline void* __cdecl memchr(
          void*  _Pv,
                              int    _C,
                              size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }




} __pragma(pack(pop))








__pragma(pack(push, 8)) extern "C" {







     
    __declspec(dllimport) errno_t __cdecl strcpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
                                char const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl strcat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
                                   char const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl strerror_s(
          char*  _Buffer,
                                  size_t _SizeInBytes,
                                  int    _ErrorNumber);

    
    __declspec(dllimport) errno_t __cdecl strncat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
               char const* _Source,
                                     rsize_t     _MaxCount
        );

    
    __declspec(dllimport) errno_t __cdecl strncpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
            char const* _Source,
                                  rsize_t     _MaxCount
        );

     
    __declspec(dllimport) char*  __cdecl strtok_s(
                          char*       _String,
                                 char const* _Delimiter,
            char**      _Context
        );



__declspec(dllimport) void* __cdecl _memccpy(
      void*       _Dst,
                                   void const* _Src,
                                   int         _Val,
                                   size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size],   char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }



    __declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl strcat( char *_Destination,  char const* _Source);



 
int __cdecl strcmp(
      char const* _Str1,
      char const* _Str2
    );

 
__declspec(dllimport) int __cdecl _strcmpi(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl strcoll(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _strcoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

char* __cdecl strcpy(
      char*       _Dest,
                                            char const* _Source
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Destination)[_Size],   char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl strcpy( char *_Destination,  char const* _Source);

 
__declspec(dllimport) size_t __cdecl strcspn(
      char const* _Str,
      char const* _Control
    );






 
__declspec(dllimport) __declspec(allocator) char* __cdecl _strdup(
      char const* _Source
    );





 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char*  __cdecl _strerror(
      char const* _ErrorMessage
    );


__declspec(dllimport) errno_t __cdecl _strerror_s(
      char*       _Buffer,
                              size_t      _SizeInBytes,
                        char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strerror(
      int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }

 
__declspec(dllimport) int __cdecl _stricmp(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _stricoll(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _stricoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _stricmp_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
size_t __cdecl strlen(
      char const* _Str
    );


__declspec(dllimport) errno_t __cdecl _strlwr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr( char *_String);


__declspec(dllimport) errno_t __cdecl _strlwr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);

__declspec(dllimport) char* __cdecl strncat(
      char*       _Dest,
        char const* _Source,
                           size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(  char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncat(  char *_Destination,   char const* _Source,   size_t _Count);

 
__declspec(dllimport) int __cdecl strncmp(
      char const* _Str1,
      char const* _Str2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicmp(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicmp_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _strnicoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _strncoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strncoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

__declspec(dllimport) size_t __cdecl __strncnt(
      char const* _String,
                         size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncpy(    char *_Destination,   char const* _Source,   size_t _Count);

 


__declspec(dllimport) size_t __cdecl strnlen(
      char const* _String,
                            size_t      _MaxCount
    );



     
    
    
    static __inline size_t __cdecl strnlen_s(
          char const* _String,
                                size_t      _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }



__declspec(dllimport) char* __cdecl _strnset(
      char*  _Dest,
                           int    _Val,
                           size_t _Count
    );


__declspec(dllimport) errno_t __cdecl _strnset_s(
      char*  _String,
                                 size_t _SizeInBytes,
                                 int    _Value,
                                 size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(  char (&_Destination)[_Size],   int _Value,   size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strnset(  char *_Destination,   int _Value,   size_t _Count);

 
__declspec(dllimport) char const* __cdecl strpbrk(
      char const* _Str,
      char const* _Control
    );

__declspec(dllimport) char* __cdecl _strrev(
      char* _Str
    );


__declspec(dllimport) errno_t __cdecl _strset_s(
      char*  _Destination,
                                     size_t _DestinationSize,
                                     int    _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(  char (&_Destination)[_Size],   int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl _strset( char *_Destination,  int _Value);

char* __cdecl _strset(
      char* _Dest,
           int   _Value
    );

 
__declspec(dllimport) size_t __cdecl strspn(
      char const* _Str,
      char const* _Control
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strtok(
      char*       _String,
             char const* _Delimiter
    );


__declspec(dllimport) errno_t __cdecl _strupr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr( char *_String);


__declspec(dllimport) errno_t __cdecl _strupr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr_l(  char *_String,   _locale_t _Locale);

 

__declspec(dllimport) size_t __cdecl strxfrm(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount
    );

 

__declspec(dllimport) size_t __cdecl _strxfrm_l(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount,
                                       _locale_t   _Locale
    );




extern "C++"
{
     
    inline char* __cdecl strchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }

     
    inline char* __cdecl strpbrk(  char* const _String,   char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }

     
    inline char* __cdecl strrchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }

       
    inline char* __cdecl strstr(  char* const _String,   char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}






    




      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strdup" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strdup(
          char const* _String
        );

    



    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strcmpi" ". See online help for details."))
    __declspec(dllimport) int __cdecl strcmpi(
          char const* _String1,
          char const* _String2
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_stricmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl stricmp(
          char const* _String1,
          char const* _String2
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strlwr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strlwr(
          char* _String
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl strnicmp(
          char const* _String1,
          char const* _String2,
                                size_t      _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnset" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strnset(
          char*  _String,
                                  int    _Value,
                                  size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strrev" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strrev(
          char* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strset" ". See online help for details."))
    char* __cdecl strset(
          char* _String,
               int   _Value);

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strupr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strupr(
          char* _String
        );





} __pragma(pack(pop))





 
namespace std {
using :: size_t; using :: memchr; using :: memcmp;
using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
 



















#pragma once











#pragma once




extern "C++" {

#pragma pack(push, 8)






         
    __declspec(allocator) void* __cdecl operator new(
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

         
    __declspec(allocator) void* __cdecl operator new[](
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

    void __cdecl operator delete(
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) throw();

    void __cdecl operator delete[](
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) throw();





#pragma pack(pop)

} 



__pragma(pack(push, 8)) extern "C" {



typedef void* _HFILE; 

























typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*,    int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);























































typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;



    
    

    
    

    
    
    
    
    
    
    
    
    
    
    
    
    



































































































    
    
    
    
    
    
    

    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    





























































































































































































































































































































    
    
    
    
    
    
    





























































































    

    
        
    

    
        
    

    
        
    

    
    

    
    

    
    

    
    


























































    




























} __pragma(pack(pop))



 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		

typedef _Longlong streamoff;
typedef _Longlong streamsize;

  
  

  



extern __declspec(dllimport)  const streamoff _BADOFF;
  

		
template<class _Statetype>
	class fpos
	{	
	typedef fpos<_Statetype> _Myt;

public:
	 fpos(streamoff _Off = 0)
		: _Myoff(_Off), _Fpos(0), _Mystate()
		{	
		}

	 fpos(_Statetype _State, fpos_t _Fileposition)
		: _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
		{	
		}

	_Statetype  state() const
		{	
		return (_Mystate);
		}

	void  state(_Statetype _State)
		{	
		_Mystate = _State;
		}

	fpos_t  seekpos() const
		{	
		return (_Fpos);
		}

	 operator streamoff() const
		{	
		return ((streamoff)(_Myoff + ((long long)(_Fpos))));
		}

	streamoff  operator-(const _Myt& _Right) const
		{	
		return ((streamoff)*this - (streamoff)_Right);
		}

	_Myt&  operator+=(streamoff _Off)
		{	
		_Myoff += _Off;
		return (*this);
		}

	_Myt&  operator-=(streamoff _Off)
		{	
		_Myoff -= _Off;
		return (*this);
		}

	_Myt  operator+(streamoff _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt  operator-(streamoff _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	bool  operator==(const _Myt& _Right) const
		{	
		return ((streamoff)*this == (streamoff)_Right);
		}

	bool  operator==(streamoff _Right) const
		{	
		return ((streamoff)*this == _Right);
		}

	bool  operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

private:
	streamoff _Myoff;	
	fpos_t _Fpos;	
	_Statetype _Mystate;	
	};

 

 
 

typedef fpos<_Mbstatet> streampos;

typedef streampos wstreampos;

		
template<class _Elem,
	class _Int_type>
	struct _Char_traits
	{	
	typedef _Elem char_type;
	typedef _Int_type int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(
		  const _Elem *_First1,
		  const _Elem *_First2, size_t _Count)
		{	
		for (; 0 < _Count; --_Count, ++_First1, ++_First2)
			if (!eq(*_First1, *_First2))
				return (lt(*_First1, *_First2) ? -1 : +1);
		return (0);
		}

	static size_t __cdecl length(  const _Elem *_First)
		{	
		size_t _Count;
		for (_Count = 0; !eq(*_First, _Elem()); ++_First)
			++_Count;
		return (_Count);
		}

	static _Elem *__cdecl copy(
		  _Elem *_First1,
		  const _Elem *_First2, size_t _Count)
		{	
		_Elem *_Next = _First1;
		for (; 0 < _Count; --_Count, ++_Next, ++_First2)
			assign(*_Next, *_First2);
		return (_First1);
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Dest_size,
		  const _Elem *_First2, size_t _Count)
		{	
		{ if (!(_Count <= _Dest_size)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); return (0); } };
		return (copy(_First1, _First2, _Count));
		}

	static const _Elem *__cdecl find(
		  const _Elem *_First,
		size_t _Count, const _Elem& _Ch)
		{	
		for (; 0 < _Count; --_Count, ++_First)
			if (eq(*_First, _Ch))
				return (_First);
		return (0);
		}

	static _Elem *__cdecl move(
		  _Elem *_First1,
		  const _Elem *_First2, size_t _Count)
		{	
		_Elem *_Next = _First1;
		if (_First2 < _Next && _Next < _First2 + _Count)
			for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
				assign(*--_Next, *--_First2);
		else
			for (; 0 < _Count; --_Count, ++_Next, ++_First2)
				assign(*_Next, *_First2);
		return (_First1);
		}

	static _Elem *__cdecl assign(
		  _Elem *_First,
		size_t _Count, _Elem _Ch)
		{	
		_Elem *_Next = _First;
		for (; 0 < _Count; --_Count, ++_Next)
			assign(*_Next, _Ch);
		return (_First);
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	static constexpr bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left < _Right);
		}

	static constexpr _Elem __cdecl to_char_type(
		const int_type& _Meta) noexcept
		{	
		return ((_Elem)_Meta);
		}

	static constexpr int_type __cdecl to_int_type(
		const _Elem& _Ch) noexcept
		{	
		return ((int_type)_Ch);
		}

	static constexpr bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr int_type __cdecl not_eof(
		const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
		}

	static constexpr int_type __cdecl eof() noexcept
		{	
		return ((int_type)(-1));
		}
	};

		
template<class _Elem>
	struct char_traits
		: public _Char_traits<_Elem, long>
	{	
	};

		
template<>
	struct char_traits<char16_t>
	: public _Char_traits<char16_t, unsigned short>
	{	
	};

typedef streampos u16streampos;

		
template<>
	struct char_traits<char32_t>
	: public _Char_traits<char32_t, unsigned int>
	{	
	};

typedef streampos u32streampos;

		
template<>
	struct char_traits<wchar_t>
	{	
	typedef wchar_t _Elem;
	typedef _Elem char_type;	
	typedef wint_t int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? 0
			: :: wmemcmp(_First1, _First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (*_First == 0 ? 0
			: :: wcslen(_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemcpy(_First1, _First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_words,
		  const _Elem *_First2, size_t _Count)
		{	
		if (0 < _Count)
			::wmemcpy_s((_First1), (_Size_in_words), (_First2), (_Count));
		return (_First1);
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return (_Count == 0 ? (const _Elem *)0
			: (const _Elem *):: wmemchr(_First, _Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemmove(_First1, _First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
		_Elem _Ch)
		{	
		return ((_Elem *):: wmemset(_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	static constexpr bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left < _Right);
		}

	static constexpr _Elem __cdecl to_char_type(
		const int_type& _Meta) noexcept
		{	
		return (_Meta);
		}

	static constexpr int_type __cdecl to_int_type(
		const _Elem& _Ch) noexcept
		{	
		return (_Ch);
		}

	static constexpr bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr int_type __cdecl not_eof(
		const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static constexpr int_type __cdecl eof() noexcept
		{	
		return (((wint_t)(0xFFFF)));
		}
	};

 
		
template<>
	struct char_traits<unsigned short>
	{	
	typedef unsigned short _Elem;
	typedef _Elem char_type;	
	typedef wint_t int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? 0
			: :: wmemcmp((const wchar_t *)_First1,
				(const wchar_t *)_First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (*_First == 0 ? 0
			: :: wcslen((const wchar_t *)_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemcpy((wchar_t *)_First1,
				(const wchar_t *)_First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_words,
		  const _Elem *_First2, size_t _Count)
		{	
		if (0 < _Count)
			::wmemcpy_s(((wchar_t *)_First1), (_Size_in_words), ((const wchar_t *)_First2), (_Count));
		return (_First1);
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return (_Count == 0 ? (const _Elem *)0
			: (const _Elem *):: wmemchr((const wchar_t *)_First,
				_Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemmove((wchar_t *)_First1,
				(const wchar_t *)_First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
		_Elem _Ch)
		{	
		return ((_Elem *):: wmemset((wchar_t *)_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	static constexpr bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left < _Right);
		}

	static constexpr _Elem __cdecl to_char_type(const int_type& _Meta)
		noexcept
		{	
		return (_Meta);
		}

	static constexpr int_type __cdecl to_int_type(const _Elem& _Ch)
		noexcept
		{	
		return (_Ch);
		}

	static constexpr bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr int_type __cdecl not_eof(const int_type& _Meta)
		noexcept
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static constexpr int_type __cdecl eof() noexcept
		{	
		return (((wint_t)(0xFFFF)));
		}
	};
 

		
template<> struct char_traits<char>
	{	
	typedef char _Elem;
	typedef _Elem char_type;
	typedef int int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? 0
			: :: memcmp(_First1, _First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (*_First == 0 ? 0
			: :: strlen(_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: memcpy(_First1, _First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_bytes,
		  const _Elem *_First2, size_t _Count)
		{	
		if (0 < _Count)
			::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
		return (_First1);
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return (_Count == 0 ? (const _Elem *)0
			: (const _Elem *):: memchr(_First, _Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: memmove(_First1, _First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
		_Elem _Ch)
		{	
		return ((_Elem *):: memset(_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	static constexpr bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return ((unsigned char)_Left < (unsigned char)_Right);
		}

	static constexpr _Elem __cdecl to_char_type(
		const int_type& _Meta) noexcept
		{	
		return ((_Elem)_Meta);
		}

	static constexpr int_type __cdecl to_int_type(
		const _Elem& _Ch) noexcept
		{	
		return ((unsigned char)_Ch);
		}

	static constexpr bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr int_type __cdecl not_eof(
		const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static constexpr int_type __cdecl eof() noexcept
		{	
		return ((-1));
		}
	};

		
template<class _Ty>
	class allocator;
class ios_base;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ios;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class istreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class ostreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_streambuf;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_istream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ostream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_iostream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_stringbuf;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_istringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_ostringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_stringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_filebuf;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ifstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ofstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_fstream;

 
template<class _Elem,
	class _InIt >
	class num_get;
template<class _Elem,
	class _OutIt >
	class num_put;
template<class _Elem>
	class collate;
 

		
typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
	allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
	allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
	allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
	allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;

		
typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
	wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;

 





















 
typedef num_get<char, istreambuf_iterator<char, char_traits<char> > >
	numget;
typedef num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >
	wnumget;
typedef num_put<char, ostreambuf_iterator<char, char_traits<char> > >
	numput;
typedef num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >
	wnumput;
typedef collate<char> ncollate;
typedef collate<wchar_t> wcollate;
 
}

 
 #pragma warning(pop)
 #pragma pack(pop)










 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4180 4512)

namespace std {
		
template<class _FwdIt1,
	class _FwdIt2> inline
	void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
	{	
	swap(*_Left, *_Right);
	}

		
template<class _Ty,
	size_t _Size,
	class> inline
	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
		noexcept(_Is_nothrow_swappable<_Ty>::value)
	{	
	if (&_Left != &_Right)
		{	
		_Ty *_First1 = _Left;
		_Ty *_Last1 = _First1 + _Size;
		_Ty *_First2 = _Right;
		for (; _First1 != _Last1; ++_First1, ++_First2)
			::std:: iter_swap(_First1, _First2);
		}
	}

template<class _Ty,
	class> inline
	void swap(_Ty& _Left, _Ty& _Right)
		noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value)
	{	
	_Ty _Tmp = ::std:: move(_Left);
	_Left = ::std:: move(_Right);
	_Right = ::std:: move(_Tmp);
	}

		
template<class _Ty> inline
	void _Swap_adl(_Ty& _Left, _Ty& _Right)
		noexcept(_Is_nothrow_swappable<_Ty>::value)
	{	
	swap(_Left, _Right);
	}

		
struct piecewise_construct_t
	{	
	};

constexpr piecewise_construct_t piecewise_construct{};

		
template<class...>
	class tuple;

template<class _Ty1,
	class _Ty2>
	struct pair
	{	
	typedef pair<_Ty1, _Ty2> _Myt;
	typedef _Ty1 first_type;
	typedef _Ty2 second_type;

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		class = enable_if_t<is_default_constructible<_Uty1>::value
						&& is_default_constructible<_Uty2>::value> >
		constexpr pair()
		: first(), second()
		{	
		}

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		class = enable_if_t<is_copy_constructible<_Uty1>::value
						&& is_copy_constructible<_Uty2>::value>,
		enable_if_t<is_convertible<const _Uty1&, _Uty1>::value
				&& is_convertible<const _Uty2&, _Uty2>::value, int> = 0>
		constexpr pair(const _Ty1& _Val1, const _Ty2& _Val2)
		: first(_Val1), second(_Val2)
		{	
		}

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		class = enable_if_t<is_copy_constructible<_Uty1>::value
						&& is_copy_constructible<_Uty2>::value>,
		enable_if_t<!is_convertible<const _Uty1&, _Uty1>::value
				|| !is_convertible<const _Uty2&, _Uty2>::value, int> = 0>
		constexpr explicit pair(const _Ty1& _Val1, const _Ty2& _Val2)
		: first(_Val1), second(_Val2)
		{	
		}

	pair(const pair&) = default;
	pair(pair&&) = default;

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, const _Other1&>::value
						&& is_constructible<_Ty2, const _Other2&>::value>,
		enable_if_t<is_convertible<const _Other1&, _Ty1>::value
				&& is_convertible<const _Other2&, _Ty2>::value, int> = 0>
		constexpr pair(const pair<_Other1, _Other2>& _Right)
		: first(_Right.first), second(_Right.second)
		{	
		}

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, const _Other1&>::value
						&& is_constructible<_Ty2, const _Other2&>::value>,
		enable_if_t<!is_convertible<const _Other1&, _Ty1>::value
				|| !is_convertible<const _Other2&, _Ty2>::value, int> = 0>
		constexpr explicit pair(const pair<_Other1, _Other2>& _Right)
		: first(_Right.first), second(_Right.second)
		{	
		}

	template<class _Other1,
		class _Other2>
		_Myt& operator=(const pair<_Other1, _Other2>& _Right)
		{	
		first = _Right.first;
		second = _Right.second;
		return (*this);
		}

	template<class _Tuple1,
		class _Tuple2,
		size_t... _Indexes1,
		size_t... _Indexes2> inline
		pair(_Tuple1& _Val1,
			_Tuple2& _Val2,
			integer_sequence<size_t, _Indexes1...>,
			integer_sequence<size_t, _Indexes2...>);

	template<class... _Types1,
		class... _Types2> inline
		pair(piecewise_construct_t,
			tuple<_Types1...> _Val1,
			tuple<_Types2...> _Val2);

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, _Other1>::value
						&& is_constructible<_Ty2, _Other2>::value>,
		enable_if_t<is_convertible<_Other1, _Ty1>::value
				&& is_convertible<_Other2, _Ty2>::value, int> = 0>
		constexpr pair(_Other1&& _Val1, _Other2&& _Val2)
			noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))
		: first(::std:: forward<_Other1>(_Val1)),
				second(::std:: forward<_Other2>(_Val2))
		{	
		}

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, _Other1>::value
						&& is_constructible<_Ty2, _Other2>::value>,
		enable_if_t<!is_convertible<_Other1, _Ty1>::value
				|| !is_convertible<_Other2, _Ty2>::value, int> = 0>
		constexpr explicit pair(_Other1&& _Val1, _Other2&& _Val2)
			noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))
		: first(::std:: forward<_Other1>(_Val1)),
				second(::std:: forward<_Other2>(_Val2))
		{	
		}

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, _Other1>::value
						&& is_constructible<_Ty2, _Other2>::value>,
		enable_if_t<is_convertible<_Other1, _Ty1>::value
				&& is_convertible<_Other2, _Ty2>::value, int> = 0>
		constexpr pair(pair<_Other1, _Other2>&& _Right)
			noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))
		: first(::std:: forward<_Other1>(_Right.first)),
			second(::std:: forward<_Other2>(_Right.second))
		{	
		}

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, _Other1>::value
						&& is_constructible<_Ty2, _Other2>::value>,
		enable_if_t<!is_convertible<_Other1, _Ty1>::value
				|| !is_convertible<_Other2, _Ty2>::value, int> = 0>
		constexpr explicit pair(pair<_Other1, _Other2>&& _Right)
			noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))
		: first(::std:: forward<_Other1>(_Right.first)),
			second(::std:: forward<_Other2>(_Right.second))
		{	
		}

	template<class _Other1,
		class _Other2>
		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
		{	
		first = ::std:: forward<_Other1>(_Right.first);
		second = ::std:: forward<_Other2>(_Right.second);
		return (*this);
		}

	_Myt& operator=(_Myt&& _Right)
		noexcept((is_nothrow_move_assignable<_Ty1>::value && is_nothrow_move_assignable<_Ty2>::value))
		{	
		first = ::std:: forward<_Ty1>(_Right.first);
		second = ::std:: forward<_Ty2>(_Right.second);
		return (*this);
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		first = _Right.first;
		second = _Right.second;
		return (*this);
		}

	_Ty1 first;		
	_Ty2 second;	

	void swap(_Myt& _Right)
		noexcept(_Is_nothrow_swappable<_Ty1>::value && _Is_nothrow_swappable<_Ty2>::value)
		{	
		if (this != &_Right)
			{	
			_Swap_adl(first, _Right.first);
			_Swap_adl(second, _Right.second);
			}
		}
	};

		

template<class _Ty1,
	class _Ty2,
	class = enable_if_t<_Is_swappable<_Ty1>::value && _Is_swappable<_Ty2>::value>> inline
	void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator==(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first == _Right.first && _Left.second == _Right.second);
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator!=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator<(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first < _Right.first ||
		(!(_Right.first < _Left.first) && _Left.second < _Right.second));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator>(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator<=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator>=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left < _Right));
	}

	

template<class _Ty1,
	class _Ty2> inline
	constexpr pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type>
		make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
	{	
	typedef pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type> _Mypair;
	return (_Mypair(::std:: forward<_Ty1>(_Val1),
		::std:: forward<_Ty2>(_Val2)));
	}

		
	namespace rel_ops
		{	
template<class _Ty> inline
	bool operator!=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty> inline
	bool operator>(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty> inline
	bool operator<=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty> inline
	bool operator>=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left < _Right));
	}
		}
}

namespace std {
template<class _Ty,
	size_t _Size>
	class array;

	
template<class _Tuple>
	struct tuple_size;

template<class _Ty,
	size_t _Size>
	struct tuple_size<array<_Ty, _Size> >
		: integral_constant<size_t, _Size>
	{	
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_size<pair<_Ty1, _Ty2> >
	: integral_constant<size_t, 2>
	{	
	};

template<class... _Types>
	struct tuple_size<tuple<_Types...> >
	: integral_constant<size_t, sizeof...(_Types)>
	{	
	};


template<class _Tuple>
	struct tuple_size<const _Tuple>
	: tuple_size<_Tuple>
	{	
	};

template<class _Tuple>
	struct tuple_size<volatile _Tuple>
	: tuple_size<_Tuple>
	{	
	};

template<class _Tuple>
	struct tuple_size<const volatile _Tuple>
	: tuple_size<_Tuple>
	{	
	};

 
template<class _Ty>
	constexpr size_t tuple_size_v = tuple_size<_Ty>::value;
 

	
template<size_t _Index,
	class _Tuple>
	struct tuple_element;

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	struct tuple_element<_Idx, array<_Ty, _Size> >
	{	
	static_assert(_Idx < _Size, "array index out of bounds");

	typedef _Ty type;
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_element<0, pair<_Ty1, _Ty2> >
	{	
	typedef _Ty1 type;
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_element<1, pair<_Ty1, _Ty2> >
	{	
	typedef _Ty2 type;
	};

template<size_t _Index>
	struct tuple_element<_Index, tuple<> >
	{	
	static_assert(_Always_false<integral_constant<size_t, _Index> >::value,
		"tuple index out of bounds");
	};

template<class _This,
	class... _Rest>
	struct tuple_element<0, tuple<_This, _Rest...> >
	{	
	typedef _This type;
	typedef tuple<_This, _Rest...> _Ttype;
	};

template<size_t _Index,
	class _This,
	class... _Rest>
	struct tuple_element<_Index, tuple<_This, _Rest...> >
		: public tuple_element<_Index - 1, tuple<_Rest...> >
	{	
	};


template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, const _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	typedef tuple_element<_Index, _Tuple> _Mybase;
	typedef typename add_const<typename _Mybase::type>::type type;
	};

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, volatile _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	typedef tuple_element<_Index, _Tuple> _Mybase;
	typedef typename add_volatile<typename _Mybase::type>::type type;
	};

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, const volatile _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	typedef tuple_element<_Index, _Tuple> _Mybase;
	typedef typename add_cv<typename _Mybase::type>::type type;
	};

template<size_t _Index,
	class _Tuple>
	using tuple_element_t = typename tuple_element<_Index, _Tuple>::type;

	
template<class _Ret,
	class _Pair> inline
	constexpr _Ret _Pair_get(_Pair& _Pr,
		integral_constant<size_t, 0>) noexcept
	{	
	return (_Pr.first);
	}

template<class _Ret,
	class _Pair> inline
	constexpr _Ret _Pair_get(_Pair& _Pr,
		integral_constant<size_t, 1>) noexcept
	{	
	return (_Pr.second);
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2> inline
	constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
		get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type& _Rtype;
	return (_Pair_get<_Rtype>(_Pr, integral_constant<size_t, _Idx>()));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr _Ty1& get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<0>(_Pr));
	}

template<class _Ty2,
	class _Ty1> inline
	constexpr _Ty2& get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<1>(_Pr));
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2> inline
	constexpr const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
		get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	typedef const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
		_Ctype;
	return (_Pair_get<_Ctype>(_Pr, integral_constant<size_t, _Idx>()));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr const _Ty1& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<0>(_Pr));
	}

template<class _Ty2,
	class _Ty1> inline
	constexpr const _Ty2& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<1>(_Pr));
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2> inline
	constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&&
		get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&& _RRtype;
	return (::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr)));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr _Ty1&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<0>(::std:: move(_Pr)));
	}

template<class _Ty2,
	class _Ty1> inline
	constexpr _Ty2&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<1>(::std:: move(_Pr)));
	}

	
template<class _Ty,
	class _Other = _Ty> inline
	_Ty exchange(_Ty& _Val, _Other&& _New_val)
	{	
	_Ty _Old_val = ::std:: move(_Val);
	_Val = ::std:: forward<_Other>(_New_val);
	return (_Old_val);
	}

	
template<class _Ty> inline
	constexpr add_const_t<_Ty>& as_const(_Ty& _Val) noexcept
	{	
	return (_Val);
	}

template<class _Ty>
	void as_const(const _Ty&&) = delete;
}


namespace std {
namespace tr1 {	
using ::std:: get;
using ::std:: tuple_element;
using ::std:: tuple_size;
}	
}


 
 #pragma warning(pop)
 #pragma pack(pop)









 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		

 













  
 

		
struct _Container_proxy;
struct _Container_base12;
struct _Iterator_base12;

struct _Container_base0
	{	
	void _Orphan_all()
		{	
		}

	void _Swap_all(_Container_base0&)
		{	
		}
	};

struct _Iterator_base0
	{	
	void _Adopt(const void *)
		{	
		}

	const _Container_base0 *_Getcont() const
		{	
		return (0);
		}
	};

		
struct _Container_proxy
	{	
	_Container_proxy()
		: _Mycont(0), _Myfirstiter(0)
		{	
		}

	const _Container_base12 *_Mycont;
	_Iterator_base12 *_Myfirstiter;
	};

struct _Container_base12
	{	
public:
	_Container_base12()
		: _Myproxy(0)
		{	
		}

	_Container_base12(const _Container_base12&)
		: _Myproxy(0)
		{	
		}

	_Container_base12& operator=(const _Container_base12&)
		{	
		return (*this);
		}

	~_Container_base12() noexcept
		{	
		_Orphan_all();
		}

	_Iterator_base12 **_Getpfirst() const
		{	
		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
		}

	void _Orphan_all();	
	void _Swap_all(_Container_base12&);	

	_Container_proxy *_Myproxy;
	};

struct _Iterator_base12
	{	
public:
	_Iterator_base12()
		: _Myproxy(0), _Mynextiter(0)
		{	
		}

	_Iterator_base12(const _Iterator_base12& _Right)
		: _Myproxy(0), _Mynextiter(0)
		{	
		*this = _Right;
		}

	_Iterator_base12& operator=(const _Iterator_base12& _Right)
		{	
		if (_Myproxy == _Right._Myproxy)
			;
		else if (_Right._Myproxy != 0)
			_Adopt(_Right._Myproxy->_Mycont);
		else
			{	
 



			}

		return (*this);
		}

	~_Iterator_base12() noexcept
		{	
 



		}

	void _Adopt(const _Container_base12 *_Parent)
		{	
		if (_Parent == 0)
			{	
 



			}
		else
			{	
			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

 










			_Myproxy = _Parent_proxy;
 
			}
		}

	void _Clrcont()
		{	
		_Myproxy = 0;
		}

	const _Container_base12 *_Getcont() const
		{	
		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
		}

	_Iterator_base12 **_Getpnext()
		{	
		return (&_Mynextiter);
		}

	void _Orphan_me()
		{	
 












		}

	_Container_proxy *_Myproxy;
	_Iterator_base12 *_Mynextiter;
	};

		
inline void _Container_base12::_Orphan_all()
	{	
 










	}

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
	{	
 



	_Container_proxy *_Temp = _Myproxy;
	_Myproxy = _Right._Myproxy;
	_Right._Myproxy = _Temp;

	if (_Myproxy != 0)
		_Myproxy->_Mycont = (_Container_base12 *)this;
	if (_Right._Myproxy != 0)
		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
	}

 
typedef _Container_base0 _Container_base;
typedef _Iterator_base0 _Iterator_base;

 




	
struct _Zero_then_variadic_args_t
	{	
	};	

struct _One_then_variadic_args_t
	{	
	};	

template<class _Ty1,
	class _Ty2,
	bool = is_empty<_Ty1>::value && !is_final<_Ty1>::value>
	class _Compressed_pair final
		: private _Ty1

	{	
private:
	_Ty2 _Myval2;

	typedef _Ty1 _Mybase;	

public:
	template<class... _Other2>
		constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
			_Other2&&... _Val2)
		: _Ty1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	template<class _Other1,
		class... _Other2>
		_Compressed_pair(_One_then_variadic_args_t,
			_Other1&& _Val1, _Other2&&... _Val2)
		: _Ty1(::std:: forward<_Other1>(_Val1)),
			_Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}


	_Ty1& _Get_first() noexcept
		{	
		return (*this);
		}

	const _Ty1& _Get_first() const noexcept
		{	
		return (*this);
		}

	volatile _Ty1& _Get_first() volatile noexcept
		{	
		return (*this);
		}

	const volatile _Ty1& _Get_first() const volatile noexcept
		{	
		return (*this);
		}

	_Ty2& _Get_second() noexcept
		{	
		return (_Myval2);
		}

	const _Ty2& _Get_second() const noexcept
		{	
		return (_Myval2);
		}

	volatile _Ty2& _Get_second() volatile noexcept
		{	
		return (_Myval2);
		}

	const volatile _Ty2& _Get_second() const volatile noexcept
		{	
		return (_Myval2);
		}
	};

template<class _Ty1,
	class _Ty2>
	class _Compressed_pair<_Ty1, _Ty2, false> final

	{	
private:
	_Ty1 _Myval1;
	_Ty2 _Myval2;

public:
	template<class... _Other2>
		constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
			_Other2&&... _Val2)
		: _Myval1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	template<class _Other1,
		class... _Other2>
		_Compressed_pair(_One_then_variadic_args_t,
			_Other1&& _Val1, _Other2&&... _Val2)
		: _Myval1(::std:: forward<_Other1>(_Val1)),
			_Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}


	_Ty1& _Get_first() noexcept
		{	
		return (_Myval1);
		}

	const _Ty1& _Get_first() const noexcept
		{	
		return (_Myval1);
		}

	volatile _Ty1& _Get_first() volatile noexcept
		{	
		return (_Myval1);
		}

	const volatile _Ty1& _Get_first() const volatile noexcept
		{	
		return (_Myval1);
		}

	_Ty2& _Get_second() noexcept
		{	
		return (_Myval2);
		}

	const _Ty2& _Get_second() const noexcept
		{	
		return (_Myval2);
		}

	volatile _Ty2& _Get_second() volatile noexcept
		{	
		return (_Myval2);
		}

	const volatile _Ty2& _Get_second() const volatile noexcept
		{	
		return (_Myval2);
		}
	};

		
template<class _Ty,
	class = void>
	struct _Is_checked_helper
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_checked_helper<_Ty, void_t<
		typename _Ty::_Unchecked_type> >
		: true_type
	{	
	};

		
template<class _Iter> inline
	typename _Is_checked_helper<_Iter>::type _Is_checked(_Iter)
	{	
	return {};
	}

		
template<class _Iter> inline
	_Iter _Unchecked(_Iter _Src)
	{	
	return (_Src);
	}

 


		
 

template<class _Iter> inline
	decltype(_Unchecked(::std:: declval<_Iter>())) _Unchecked_idl0(_Iter _Src)
	{	
	return (_Unchecked(_Src));
	}

 









		
template<class _Iter,
	class _UIter> inline
	_Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
	{	
	_Dest = _Src;
	return (_Dest);
	}

		




















		
		
		


















		
		
struct input_iterator_tag
	{	
	};

struct _Mutable_iterator_tag	
	{	
	};

struct output_iterator_tag
	: _Mutable_iterator_tag
	{	
	};

struct forward_iterator_tag
	: input_iterator_tag, _Mutable_iterator_tag
	{	
	};

struct bidirectional_iterator_tag
	: forward_iterator_tag
	{	
	};

struct random_access_iterator_tag
	: bidirectional_iterator_tag
	{	
	};

		
struct _General_ptr_iterator_tag
	{	
	};

struct _Trivially_copyable_ptr_iterator_tag
	: _General_ptr_iterator_tag
	{	
	};

struct _Really_trivial_ptr_iterator_tag
	: _Trivially_copyable_ptr_iterator_tag
	{	
	};

	
struct _Any_tag
	{	
	constexpr _Any_tag() noexcept = default;
	template<class _Ty>
		constexpr _Any_tag(_Ty&&) noexcept {}
	};

		
template<class _Category,
	class _Ty,
	class _Diff = ptrdiff_t,
	class _Pointer = _Ty *,
	class _Reference = _Ty&>
	struct iterator
	{	
	typedef _Category iterator_category;
	typedef _Ty value_type;
	typedef _Diff difference_type;

	typedef _Pointer pointer;
	typedef _Reference reference;
	};

template<class _Category,
	class _Ty,
	class _Diff,
	class _Pointer,
	class _Reference,
	class _Base>
	struct _Iterator012
		: public _Base
	{	
	typedef _Category iterator_category;
	typedef _Ty value_type;
	typedef _Diff difference_type;

	typedef _Pointer pointer;
	typedef _Reference reference;
	};


typedef iterator<output_iterator_tag, void, void, void, void> _Outit;

		
template<class,
	class = void>
	struct _Iterator_traits_base
	{	
	};

template<class _Iter>
	struct _Iterator_traits_base<_Iter, void_t<
		typename _Iter::iterator_category,
		typename _Iter::value_type,
		typename _Iter::difference_type,
		typename _Iter::pointer,
		typename _Iter::reference
		> >
	{	
	typedef typename _Iter::iterator_category iterator_category;
	typedef typename _Iter::value_type value_type;
	typedef typename _Iter::difference_type difference_type;

	typedef typename _Iter::pointer pointer;
	typedef typename _Iter::reference reference;
	};

template<class _Iter>
	struct iterator_traits
		: _Iterator_traits_base<_Iter>
	{	
	};

template<class _Ty>
	struct iterator_traits<_Ty *>
	{	
	typedef random_access_iterator_tag iterator_category;
	typedef _Ty value_type;
	typedef ptrdiff_t difference_type;

	typedef _Ty *pointer;
	typedef _Ty& reference;
	};

template<class _Ty>
	struct iterator_traits<const _Ty *>
	{	
	typedef random_access_iterator_tag iterator_category;
	typedef _Ty value_type;
	typedef ptrdiff_t difference_type;

	typedef const _Ty *pointer;
	typedef const _Ty& reference;
	};

		
template<class _Iter>
	using _Iter_value_t = typename iterator_traits<_Iter>::value_type;

		
template<class _Iter>
	using _Iter_diff_t = typename iterator_traits<_Iter>::difference_type;

		
template<class _Iter>
	using _Iter_cat_t = typename iterator_traits<_Iter>::iterator_category;

		
template<class _Ty,
	class = void>
	struct _Is_iterator
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_iterator<_Ty, void_t<
		typename iterator_traits<_Ty>::iterator_category
		> >
		: true_type
	{	
	};


		
 
template<class _Iter,
	class _Diff> inline
	auto _Unchecked_n(_Iter _Src, _Diff)
	{	
	return (_Unchecked(_Src));
	}
 




























		
template<class _Ty1,
	class _Ty2>
	struct _Is_same_size
		: bool_constant<sizeof(_Ty1) == sizeof(_Ty2)>
	{	
	};

		
template<class _Elem,
	bool _Is_enum = is_enum<_Elem>::value>
	struct _Unwrap_enum
	{	
	typedef underlying_type_t<_Elem> type;
	};

template<class _Elem>
	struct _Unwrap_enum<_Elem, false>
	{	
	typedef _Elem type;
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Both_or_neither_bool
		: bool_constant<is_same<bool, _Ty1>::value == is_same<bool, _Ty2>::value>
	{	
	};

		
template<class _Source,
	class _Dest>
	struct _Ptr_cat_helper
	{	
	typedef typename _Unwrap_enum<_Source>::type _USource;
	typedef typename _Unwrap_enum<_Dest>::type _UDest;
	typedef conditional_t<
		conjunction<
			_Is_same_size<_USource, _UDest>,
			is_integral<_USource>,
			is_integral<_UDest>,
			_Both_or_neither_bool<_USource, _UDest>,
			
			negation<is_volatile<_Source>>,
			negation<is_volatile<_Dest>>
		>::value,
		_Really_trivial_ptr_iterator_tag,
		_General_ptr_iterator_tag> type;
	};

template<class _Elem>
	struct _Ptr_cat_helper<_Elem, _Elem>
	{	
	typedef conditional_t<
		is_trivially_copyable<_Elem>::value,
		conditional_t<is_trivial<_Elem>::value,
			_Really_trivial_ptr_iterator_tag,
			_Trivially_copyable_ptr_iterator_tag>,
		_General_ptr_iterator_tag> type;
	};

template<class _Anything>
	struct _Ptr_cat_helper<_Anything *, const _Anything *>
	{	
	typedef _Really_trivial_ptr_iterator_tag type;
	};

template<class _Source,
	class _Dest> inline
	_General_ptr_iterator_tag _Ptr_copy_cat(const _Source&, const _Dest&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	conditional_t<is_trivially_assignable<_Dest&, _Source&>::value,
		typename _Ptr_cat_helper<remove_const_t<_Source>, _Dest>::type,
		_General_ptr_iterator_tag>
		_Ptr_copy_cat(_Source * const&, _Dest * const&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	_General_ptr_iterator_tag _Ptr_move_cat(const _Source&, const _Dest&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	conditional_t<is_trivially_assignable<_Dest&, _Source>::value,
		typename _Ptr_cat_helper<remove_const_t<_Source>, _Dest>::type,
		_General_ptr_iterator_tag>
		_Ptr_move_cat(_Source * const&, _Dest * const&)
	{	
	return {};
	}

		

 
  
  
  
  
  
  
  
  
  
  

 











































































































































































































 
  
 





















		
		
template<class _InIt,
	class _Diff> inline
	void _Advance1(_InIt& _Where, _Diff _Off, input_iterator_tag)
	{	
 




	for (; 0 < _Off; --_Off)
		++_Where;
	}

template<class _BidIt,
	class _Diff> inline
	void _Advance1(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
	{	
	for (; 0 < _Off; --_Off)
		++_Where;
	for (; _Off < 0; ++_Off)
		--_Where;
	}

template<class _RanIt,
	class _Diff> inline
	void _Advance1(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
	{	
	_Where += _Off;
	}

template<class _InIt,
	class _Diff> inline
	void advance(_InIt& _Where, _Diff _Off)
	{	
		
	_Advance1(_Where, _Off, _Iter_cat_t<remove_const_t<_InIt>>());
	}

		
template<class _InIt> inline
	_Iter_diff_t<_InIt>
		_Distance1(_InIt _First, _InIt _Last, input_iterator_tag)
	{	
	_Iter_diff_t<_InIt> _Off = 0;
	for (; _First != _Last; ++_First)
		++_Off;

	return (_Off);
	}

template<class _RanIt> inline
	_Iter_diff_t<_RanIt>
		_Distance1(_RanIt _First, _RanIt _Last, random_access_iterator_tag)
	{	
 







	return (_Last - _First);
	}

template<class _InIt> inline
	_Iter_diff_t<_InIt>
		distance(_InIt _First, _InIt _Last)
	{	
	return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));
	}

		
template<class _InIt> inline
	_InIt next(_InIt _First, _Iter_diff_t<_InIt> _Off = 1)
	{	
	static_assert(is_base_of<input_iterator_tag,
		typename iterator_traits<_InIt>::iterator_category>::value,
		"next requires input iterator");

	::std:: advance(_First, _Off);
	return (_First);
	}

		
template<class _BidIt> inline
	_BidIt prev(_BidIt _First, _Iter_diff_t<_BidIt> _Off = 1)
	{	
	static_assert(is_base_of<bidirectional_iterator_tag,
		typename iterator_traits<_BidIt>::iterator_category>::value,
		"prev requires bidirectional iterator");

	::std:: advance(_First, -_Off);
	return (_First);
	}

		
template<class _Ty>
	struct pointer_traits;

template<class _RanIt>
	class reverse_iterator
		: public iterator<
			typename iterator_traits<_RanIt>::iterator_category,
			typename iterator_traits<_RanIt>::value_type,
			typename iterator_traits<_RanIt>::difference_type,
			typename iterator_traits<_RanIt>::pointer,
			typename iterator_traits<_RanIt>::reference>
	{	
	typedef reverse_iterator<_RanIt> _Myt;

public:
	typedef typename iterator_traits<_RanIt>::difference_type difference_type;
	typedef typename iterator_traits<_RanIt>::pointer pointer;
	typedef typename iterator_traits<_RanIt>::reference reference;
	typedef _RanIt iterator_type;

	reverse_iterator()
		: current()
		{	
		}

	explicit reverse_iterator(_RanIt _Right)
		: current(_Right)
		{	
		}

	template<class _Other>
		reverse_iterator(const reverse_iterator<_Other>& _Right)
		: current(_Right.base())
		{	
		}

	template<class _Other>
		_Myt& operator=(const reverse_iterator<_Other>& _Right)
		{	
		current = _Right.base();
		return (*this);
		}

	_RanIt base() const
		{	
		return (current);
		}

	reference operator*() const
		{	
		_RanIt _Tmp = current;
		return (*--_Tmp);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myt& operator++()
		{	
		--current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		++current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}



	_Myt& operator+=(difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		return (_Myt(current - _Off));
		}

	_Myt& operator-=(difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		return (_Myt(current + _Off));
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

protected:
	_RanIt current;	
	};

template<class _RanIt>
	struct _Is_checked_helper<reverse_iterator<_RanIt> >
		: public _Is_checked_helper<_RanIt>
	{	
	};

		
template<class _RanIt> inline
	reverse_iterator<_RanIt> operator+(
		typename reverse_iterator<_RanIt>::difference_type _Off,
		const reverse_iterator<_RanIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _RanIt2>
	auto inline operator-(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
			-> decltype(_Right.base() - _Left.base())
	{	
	return (_Right.base() - _Left.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator==(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Left.base() == _Right.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator!=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Right.base() < _Left.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _RanIt> inline
	reverse_iterator<_RanIt> make_reverse_iterator(_RanIt _Iter)
	{	
	return (reverse_iterator<_RanIt>(_Iter));
	}

		

template<class _Container>
	auto inline begin(_Container& _Cont) -> decltype(_Cont.begin())
	{	
	return (_Cont.begin());
	}

template<class _Container>
	auto inline begin(const _Container& _Cont) -> decltype(_Cont.begin())
	{	
	return (_Cont.begin());
	}

template<class _Container>
	auto inline end(_Container& _Cont) -> decltype(_Cont.end())
	{	
	return (_Cont.end());
	}

template<class _Container>
	auto inline end(const _Container& _Cont) -> decltype(_Cont.end())
	{	
	return (_Cont.end());
	}

template<class _Ty,
	size_t _Size> inline
	constexpr _Ty *begin(_Ty (&_Array)[_Size]) noexcept
	{	
	return (_Array);
	}

template<class _Ty,
	size_t _Size> inline
	constexpr _Ty *end(_Ty (&_Array)[_Size]) noexcept
	{	
	return (_Array + _Size);
	}

		
template<class _Container>
	constexpr auto inline cbegin(const _Container& _Cont)
		noexcept(noexcept(::std:: begin(_Cont)))
		-> decltype(::std:: begin(_Cont))
	{	
	return (::std:: begin(_Cont));
	}

template<class _Container>
	constexpr auto inline cend(const _Container& _Cont)
		noexcept(noexcept(::std:: end(_Cont)))
		-> decltype(::std:: end(_Cont))
	{	
	return (::std:: end(_Cont));
	}

		
template<class _Container>
	auto inline rbegin(_Container& _Cont) -> decltype(_Cont.rbegin())
	{	
	return (_Cont.rbegin());
	}

template<class _Container>
	auto inline rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin())
	{	
	return (_Cont.rbegin());
	}

template<class _Container>
	auto inline rend(_Container& _Cont) -> decltype(_Cont.rend())
	{	
	return (_Cont.rend());
	}

template<class _Container>
	auto inline rend(const _Container& _Cont) -> decltype(_Cont.rend())
	{	
	return (_Cont.rend());
	}

template<class _Ty,
	size_t _Size> inline
	reverse_iterator<_Ty *> rbegin(_Ty (&_Array)[_Size])
	{	
	return (reverse_iterator<_Ty *>(_Array + _Size));
	}

template<class _Ty,
	size_t _Size> inline
	reverse_iterator<_Ty *> rend(_Ty (&_Array)[_Size])
	{	
	return (reverse_iterator<_Ty *>(_Array));
	}

template<class _Elem> inline
	reverse_iterator<const _Elem *>
		rbegin(::std:: initializer_list<_Elem> _Ilist)
	{	
	return (reverse_iterator<const _Elem *>(_Ilist.end()));
	}

template<class _Elem> inline
	reverse_iterator<const _Elem *>
		rend(::std:: initializer_list<_Elem> _Ilist)
	{	
	return (reverse_iterator<const _Elem *>(_Ilist.begin()));
	}

		
template<class _Container>
	auto inline crbegin(const _Container& _Cont)
		-> decltype(::std:: rbegin(_Cont))
	{	
	return (::std:: rbegin(_Cont));
	}

template<class _Container>
	auto inline crend(const _Container& _Cont)
		-> decltype(::std:: rend(_Cont))
	{	
	return (::std:: rend(_Cont));
	}


template<class _Container>
	constexpr auto inline size(const _Container& _Cont)
		-> decltype(_Cont.size())
	{	
	return (_Cont.size());
	}

template<class _Ty,
	size_t _Size> inline
	constexpr size_t size(const _Ty(&)[_Size]) noexcept
	{	
	return (_Size);
	}

template<class _Container>
	constexpr auto inline empty(const _Container& _Cont)
		-> decltype(_Cont.empty())
	{	
	return (_Cont.empty());
	}

template<class _Ty,
	size_t _Size> inline
	constexpr bool empty(const _Ty(&)[_Size]) noexcept
	{	
	return (false);
	}

template<class _Elem> inline
	constexpr bool empty(
		::std:: initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.size() == 0);
	}

template<class _Container>
	constexpr auto inline data(_Container& _Cont)
		-> decltype(_Cont.data())
	{	
	return (_Cont.data());
	}

template<class _Container>
	constexpr auto inline data(const _Container& _Cont)
		-> decltype(_Cont.data())
	{	
	return (_Cont.data());
	}

template<class _Ty,
	size_t _Size> inline
	constexpr _Ty *data(_Ty(&_Array)[_Size]) noexcept
	{	
	return (_Array);
	}

template<class _Elem> inline
	constexpr const _Elem *data(
		::std:: initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.begin());
	}

		
template<class _Ty,
	size_t _Size>
	class _Array_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			_Ty,
			ptrdiff_t,
			const _Ty *,
			const _Ty&,
			_Iterator_base>
	{	
public:
	typedef _Array_const_iterator<_Ty, _Size> _Myiter;
	typedef random_access_iterator_tag iterator_category;

	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef const _Ty *pointer;
	typedef const _Ty& reference;
	enum {_EEN_SIZE = _Size};	
 
	_Array_const_iterator()
		: _Ptr(0)
		{	
		}

	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
		: _Ptr(_Parg + _Off)
		{	
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Ptr);
		}

	reference operator*() const
		{	
		return (*_Ptr);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		return (_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		return (_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		return (_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

	pointer _Ptr;	

 









































































































































































































	};

template<class _Ty,
	size_t _Size> inline
	typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
		_Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Ty,
	size_t _Size> inline
	_Array_const_iterator<_Ty, _Size>&
		_Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
			typename _Array_const_iterator<_Ty, _Size>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Ty,
	size_t _Size> inline
	_Array_const_iterator<_Ty, _Size> operator+(
		typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
		_Array_const_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Ty,
	size_t _Size>
	class _Array_iterator
		: public _Array_const_iterator<_Ty, _Size>
	{	
public:
	typedef _Array_iterator<_Ty, _Size> _Myiter;
	typedef _Array_const_iterator<_Ty, _Size> _Mybase;
	typedef random_access_iterator_tag iterator_category;

	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef _Ty *pointer;
	typedef _Ty& reference;

	_Array_iterator()
		{	
		}

	explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
		: _Mybase(_Parg, _Off)
		{	
		}
	enum {_EEN_SIZE = _Size};	
	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		((_Mybase *)this)->_Rechecked(_Right);
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return ((pointer)((_Mybase *)this)->_Unchecked());
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Ty,
	size_t _Size> inline
	typename _Array_iterator<_Ty, _Size>::_Unchecked_type
		_Unchecked(_Array_iterator<_Ty, _Size> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Ty,
	size_t _Size> inline
	_Array_iterator<_Ty, _Size>&
		_Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
			typename _Array_iterator<_Ty, _Size>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Ty,
	size_t _Size> inline
	_Array_iterator<_Ty, _Size> operator+(
		typename _Array_iterator<_Ty, _Size>::difference_type _Off,
		_Array_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _RanIt>
	class move_iterator
	{	
public:
	typedef move_iterator<_RanIt> _Myt;
	typedef typename iterator_traits<_RanIt>::iterator_category
		iterator_category;
	typedef typename iterator_traits<_RanIt>::value_type
		value_type;
	typedef typename iterator_traits<_RanIt>::difference_type
		difference_type;
	typedef _RanIt pointer;
	typedef typename iterator_traits<_RanIt>::reference _Ref0;
	typedef conditional_t<is_reference<_Ref0>::value,
		remove_reference_t<_Ref0>&&, _Ref0> reference;
	typedef _RanIt iterator_type;

	move_iterator()
		: current()
		{	
		}

	explicit move_iterator(iterator_type _Right)
		: current(_Right)
		{	
		}

	template<class _RanIt2>
		move_iterator(const move_iterator<_RanIt2>& _Right)
		: current(_Right.base())
		{	
		}

	template<class _RanIt2>
		_Myt& operator=(const move_iterator<_RanIt2>& _Right)
		{	
		current = _Right.base();
		return (*this);
		}

	_RanIt base() const
		{	
		return (current);
		}

	reference operator*() const
		{	
		return (static_cast<reference>(*current));
		}

	pointer operator->() const
		{	
		return (current);
		}

	_Myt& operator++()
		{	
		++current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		--current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	template<class _RanIt2>
		bool _Equal(const move_iterator<_RanIt2>& _Right) const
		{	
		return (current == _Right.base());
		}



	_Myt& operator+=(difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		return (_Myt(current + _Off));
		}

	_Myt& operator-=(difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		return (_Myt(current - _Off));
		}

	reference operator[](difference_type _Off) const
		{	
		return (::std:: move(current[_Off]));
		}

	template<class _RanIt2>
		bool _Less(const move_iterator<_RanIt2>& _Right) const
		{	
		return (current < _Right.base());
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		return (current - _Right.base());
		}

protected:
	iterator_type current;	
	};

template<class _RanIt>
	struct _Is_checked_helper<move_iterator<_RanIt> >
		: public _Is_checked_helper<_RanIt>
	{	
	};

		
template<class _RanIt,
	class _Diff> inline
	move_iterator<_RanIt>
		operator+(_Diff _Off,
		const move_iterator<_RanIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _RanIt2>
	auto inline operator-(
		move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
			-> decltype(_Left.base() - _Right.base())
	{	
	return (_Left.base() - _Right.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator==(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator!=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _RanIt> inline
	move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
	{	
	return (move_iterator<_RanIt>(_Iter));
	}

		
template<class _Traits>
	struct _Char_traits_eq
	{
	typedef typename _Traits::char_type _Elem;

	bool operator()(_Elem _Left, _Elem _Right) const
		{
		return (_Traits::eq(_Left, _Right));
		}
	};

		
template<class _Traits>
	struct _Char_traits_lt
	{
	typedef typename _Traits::char_type _Elem;

	bool operator()(_Elem _Left, _Elem _Right) const
		{
		return (_Traits::lt(_Left, _Right));
		}
	};

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_memmove(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	const char * const _First_ch = reinterpret_cast<const char *>(_First);
	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
	const size_t _Count = _Last_ch - _First_ch;
	:: memmove(_Dest_ch, _First_ch, _Count);
	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, (void)++_First)
		*_Dest = *_First;
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
		
	return (_Copy_unchecked1(_First, _Last,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Copy_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_no_deprecate(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	;
	return (_Copy_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt copy(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Copy_no_deprecate(_First, _Last, _Dest));
	}

 












		
template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
		_OutIt _Dest, input_iterator_tag)
	{	
	if (0 < _Count)
		{
		*_Dest = *_First;
		while (0 < --_Count)
			*++_Dest = *++_First;
		return (++_Dest);
		}

	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
		_OutIt _Dest, forward_iterator_tag)
	{	
	for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
		*_Dest = *_First;
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
		
		
	return (_Copy_n_unchecked2(_First, _Count,
		_Dest, _Iter_cat_t<_InIt>()));
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	if (0 < _Count)
		return (_Copy_memmove(_First, _First + _Count, _Dest));
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
	return (_Copy_n_unchecked1(_First, _Count,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
		
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Rechecked(_Dest,
		_Copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Unchecked_n(_Dest, _Count))));
	}

 







































		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_memmove(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	const char * const _First_ch = reinterpret_cast<const char *>(_First);
	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
	const size_t _Count = _Last_ch - _First_ch;
	return (static_cast<_BidIt2>(
		:: memmove(_Dest_ch - _Count, _First_ch, _Count)));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _General_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = *--_Last;
	return (_Dest);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_backward_memmove(_First, _Last, _Dest));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Copy_backward_unchecked1(_First, _Last,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Copy_backward_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Copy_backward_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	;
	return (_Copy_backward1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_BidIt1>(), _Iter_cat_t<_BidIt2>()));
	}

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, (void)++_First)
		*_Dest = ::std:: move(*_First);
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Move_unchecked1(_First, _Last,
		_Dest, _Ptr_move_cat(_First, _Dest)));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Move_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Move_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_no_deprecate(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	;
	return (_Move_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt move(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Move_no_deprecate(_First, _Last, _Dest));
	}

 












		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _General_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = ::std:: move(*--_Last);
	return (_Dest);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_backward_memmove(_First, _Last, _Dest));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Move_backward_unchecked1(_First, _Last,
		_Dest, _Ptr_move_cat(_First, _Dest)));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Move_backward_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Move_backward_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	;
	return (_Move_backward1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_BidIt1>(), _Iter_cat_t<_BidIt2>()));
	}

		
template<class _Ty>
	struct _Is_character
		: false_type
		{	
		};

template<>
	struct _Is_character<char>
		: true_type
		{	
		};

template<>
	struct _Is_character<signed char>
		: true_type
		{	
		};

template<>
	struct _Is_character<unsigned char>
		: true_type
		{	
		};

template<class _FwdIt,
	class _Ty>
	struct _Fill_memset_is_safe_helper
	{	
	typedef _Iter_value_t<_FwdIt> _Value_type;
	typedef typename conjunction<
		is_pointer<_FwdIt>,
		disjunction<
			conjunction<
				_Is_character<_Ty>,
				_Is_character<_Value_type>>,
			conjunction<
				is_same<bool, _Ty>,
				is_same<bool, _Value_type>>
		>>::type type;
	};

template<class _FwdIt,
	class _Ty> inline
	typename _Fill_memset_is_safe_helper<_FwdIt, _Ty>::type
	_Fill_memset_is_safe(const _FwdIt&, const _Ty&)
	{	
	return {};
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, false_type)
	{	
	for (; _First != _Last; ++_First)
		*_First = _Val;
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, true_type)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
	}

template<class _FwdIt,
	class _Ty> inline
	void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	;
	_Fill_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val);
	}

		
template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, false_type)
	{	
	for (; 0 < _Count; --_Count, (void)++_Dest)
		*_Dest = _Val;
	return (_Dest);
	}

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, true_type)
	{	
	if (0 < _Count)
		{
		:: memset(_Dest, _Val, _Count);
		return (_Dest + _Count);
		}

	return (_Dest);
	}

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n_unchecked(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
	{	
		
	return (_Fill_n_unchecked1(_Dest, _Count, _Val, _Fill_memset_is_safe(_Dest, _Val)));
	}

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
	{	
	return (_Rechecked(_Dest,
		_Fill_n_unchecked(_Unchecked_n(_Dest, _Count), _Count, _Val)));
	}

		
template<class _Elem1,
	class _Elem2>
	struct _Value_equality_is_bitwise_equality
		: bool_constant<static_cast<_Elem1>(-1) == static_cast<_Elem2>(-1)>
	{	
		
		
		
	};

template<class _Elem1,
	class _Elem2,
	class _Pr>
	struct _Equal_memcmp_is_safe_helper
		: false_type
	{	
		
	};

template<class _Elem1,
	class _Elem2>
	struct _Equal_memcmp_is_safe_helper<_Elem1, _Elem2, equal_to<>>
		: conjunction<
			_Is_same_size<_Elem1, _Elem2>,
			is_integral<_Elem1>,
			is_integral<_Elem2>,
			negation<is_same<bool, _Elem1>>,
			negation<is_same<bool, _Elem2>>,
			negation<is_volatile<_Elem1>>,
			negation<is_volatile<_Elem2>>,
			
			
			_Value_equality_is_bitwise_equality<_Elem1, _Elem2>
		>::type
	{	
	};

template<class _Elem1,
	class _Elem2>
	struct _Equal_memcmp_is_safe_helper<_Elem1 *, _Elem2 *, equal_to<>>
		: is_same<remove_cv_t<_Elem1>, remove_cv_t<_Elem2>>::type
	{	
	};

template<class _Elem>
	struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, _Char_traits_eq<char_traits<_Elem>>>
		: _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
	{	
	};

template<class _Elem>
	struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<_Elem>>
		: _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
	{	
		
	};

template<class _Iter1,
	class _Iter2,
	class _Pr> inline
	false_type _Equal_memcmp_is_safe(const _Iter1&, const _Iter2&, const _Pr&)
	{	
	return {};
	}

template<class _Obj1,
	class _Obj2,
	class _Pr> inline
	typename _Equal_memcmp_is_safe_helper<
		remove_const_t<_Obj1>,
		remove_const_t<_Obj2>,
		_Pr>::type
		_Equal_memcmp_is_safe(_Obj1 * const&, _Obj2 * const&, const _Pr&)
	{	
	return {};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred, false_type)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		if (!_Pred(*_First1, *_First2))
			return (false);
	return (true);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr&, true_type)
	{	
	const char * const _First1_ch = reinterpret_cast<const char *>(_First1);
	const char * const _First2_ch = reinterpret_cast<const char *>(_First2);
	const size_t _Count = reinterpret_cast<const char *>(_Last1) - _First1_ch;
	return (:: memcmp(_First1_ch, _First2_ch, _Count) == 0);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred)
	{	
	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,
		_Equal_memcmp_is_safe(_First1, _First2, _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred, input_iterator_tag, input_iterator_tag)
	{	
	return (_Equal_unchecked(_First1, _Last1, _Unchecked_idl0(_First2), _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Equal_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred)
	{	
	;
	;
	return (_Equal_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
		_First2, _Pred, _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
	return (_Equal_no_deprecate(_First1, _Last1, _First2, _Pred));
	}

 













		
template<class _InIt1,
	class _InIt2> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2)
	{	
	return (::std:: equal(_First1, _Last1, _First2,
		equal_to<>()));
	}

 











		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred,
			input_iterator_tag, input_iterator_tag)
	{	
		
	;
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
		if (!_Pred(*_First1, *_First2))
			return (false);
	return (_First1 == _Last1 && _First2 == _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred,
			random_access_iterator_tag, random_access_iterator_tag)
	{	
		
	if (_Last1 - _First1 != _Last2 - _First2)
		return (false);
	;
	return (_Equal_unchecked(_First1, _Last1, _First2, _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	return (_Equal_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred,
			_Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
	}

		
template<class _InIt1,
	class _InIt2> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: equal(_First1, _Last1, _First2, _Last2,
		equal_to<>()));
	}

		
template<class _Elem1,
	class _Elem2,
	class _FTy>
	struct _Lex_compare_check_element_types_helper
		: conjunction<
			_Is_character<_Elem1>,
			_Is_character<_Elem2>,
			_Is_character<_FTy>,
			is_unsigned<_FTy>
		>::type
	{	
	};

template<class _Elem1,
	class _Elem2>
	struct _Lex_compare_check_element_types_helper<_Elem1, _Elem2, void>
		: conjunction<
			_Is_character<_Elem1>,
			_Is_character<_Elem2>,
			is_unsigned<_Elem1>,
			is_unsigned<_Elem2>
		>::type
	{	
	};

template<class _Memcmp_pr>
	struct _Lex_compare_optimize
	{	
	};

template<class _Memcmp_pr,
	class _Obj1,
	class _Obj2,
	class _FTy>
	using _Lex_compare_check_element_types = _Lex_compare_optimize<conditional_t<
		_Lex_compare_check_element_types_helper<remove_const_t<_Obj1>, remove_const_t<_Obj2>, _FTy>::value,
		_Memcmp_pr, void>>;	

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	_Lex_compare_optimize<void> _Lex_compare_memcmp_classify(const _InIt1&, const _InIt2&, const _Pr&)
	{	
		
	return {};
	}

template<class _Obj1,
	class _Obj2,
	class _FTy> inline
	_Lex_compare_check_element_types<less<int>, _Obj1, _Obj2, _FTy>
		_Lex_compare_memcmp_classify(_Obj1 * const&, _Obj2 * const&, const less<_FTy>&)
	{	
	return {};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Lex_compare_unchecked1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred, _Lex_compare_optimize<void>)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
		{	
		if (_Pred(*_First1, *_First2))
			return (true);
		else if (_Pred(*_First2, *_First1))
			return (false);
		}

	return (_First1 == _Last1 && _First2 != _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr,
	class _Memcmp_pr> inline
	bool _Lex_compare_unchecked1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr&, _Lex_compare_optimize<_Memcmp_pr>)
	{	
	const size_t _Num1 = _Last1 - _First1;
	const size_t _Num2 = _Last2 - _First2;
	const int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
	return (_Memcmp_pr{}(_Ans, 0) || _Ans == 0 && _Num1 < _Num2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Lex_compare_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred)
	{	
	return (_Lex_compare_unchecked1(_First1, _Last1, _First2, _Last2, _Pred,
		_Lex_compare_memcmp_classify(_First1, _First2, _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Lex_compare_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
	}

		
template<class _InIt1,
	class _InIt2> inline
	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: lexicographical_compare(_First1, _Last1,
		_First2, _Last2, less<>()));
	}

		
template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, true_type, _Any_tag)
	{	
	return ((-128) <= _Val && _Val <= 127);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type)
	{	
	return (_Val <= 127 || static_cast<_Ty>((-128)) <= _Val);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type)
	{	
	return (_Val <= 127);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, false_type, true_type, _Any_tag)
	{	
	return (0 <= _Val && _Val <= 0xff);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, false_type, false_type, _Any_tag)
	{	
	return (_Val <= 0xff);
	}

template<class _InIt,
	class _Ty> inline
	bool _Within_limits(_InIt, const _Ty& _Val)
	{	
	typedef typename remove_pointer<_InIt>::type _Elem;
	return (_Within_limits(_Val, is_signed<_Elem>(), is_signed<_Ty>(),
		integral_constant<bool, -1 == static_cast<_Ty>(-1)>()));
	}

template<class _InIt> inline
	bool _Within_limits(_InIt, const bool&)
	{	
	return (true);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, true_type)
	{	
	if (!_Within_limits(_First, _Val))
		return (_Last);
	_First = static_cast<_InIt>(:: memchr(
		_First, static_cast<unsigned char>(_Val), _Last - _First));
	return (_First ? _First : _Last);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, false_type)
	{	
	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			break;
	return (_First);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	
	typedef integral_constant<bool,
		(is_same<_InIt, char *>::value
		|| is_same<_InIt, signed char *>::value
		|| is_same<_InIt, unsigned char *>::value
		|| is_same<_InIt, const char *>::value
		|| is_same<_InIt, const signed char *>::value
		|| is_same<_InIt, const unsigned char *>::value)
		&& is_integral<_Ty>::value
	> _Memchr_opt;
	return (_Find_unchecked1(_First, _Last, _Val, _Memchr_opt()));
	}

template<class _InIt,
	class _Ty> inline
	_InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	;
	return (_Rechecked(_First,
		_Find_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val)));
	}

		
template<class _InIt,
	class _Ty,
	class _Pr> inline
	_InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr& _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First, _Val))
			break;
	return (_First);
	}

		
template<class _InIt,
	class _Ty> inline
	_Iter_diff_t<_InIt>
		_Count_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	_Iter_diff_t<_InIt> _Count = 0;

	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			++_Count;
	return (_Count);
	}

template<class _InIt,
	class _Ty> inline
	_Iter_diff_t<_InIt>
		count(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	;
	return (_Count_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val));
	}

		
template<class _InIt,
	class _Ty,
	class _Pr> inline
	_Iter_diff_t<_InIt>
		_Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr& _Pred)
	{	
	_Iter_diff_t<_InIt> _Count = 0;

	for (; _First != _Last; ++_First)
		if (_Pred(*_First, _Val))
			++_Count;
	return (_Count);
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	void _Trim_matching_suffixes(_FwdIt1&, _FwdIt2&, _Pr&,
		forward_iterator_tag, forward_iterator_tag)
	{	
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	void _Trim_matching_suffixes(_FwdIt1& _Last1, _FwdIt2& _Last2, _Pr& _Pred,
		bidirectional_iterator_tag, bidirectional_iterator_tag)
	{	
	
	while (_Pred(*--_Last1, *--_Last2))
		;	
	++_Last1;
	++_Last2;
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Check_match_counts(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred)
	{	
	_Trim_matching_suffixes(_Last1, _Last2, _Pred,
		_Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>());
	for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
		if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
			{	
			_Iter_diff_t<_FwdIt2> _Count2 = _Count_pr(_First2, _Last2, *_Next1, _Pred);
			if (_Count2 == 0)
				return (false);	
			_FwdIt1 _Skip1 = ::std:: next(_Next1);
			_Iter_diff_t<_FwdIt1> _Count1 = _Count_pr(_Skip1, _Last1, *_Next1, _Pred) + 1;
			if (_Count2 != _Count1)
				return (false);	
			}

	return (true);
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr& _Pred)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		if (!_Pred(*_First1, *_First2))
			{	
			_FwdIt2 _Last2 = ::std:: next(_First2,
				::std:: distance(_First1, _Last1));
			return (_Check_match_counts(_First1, _Last1,
				_First2, _Last2, _Pred));
			}

	return (true);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_no_deprecate1(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr& _Pred, forward_iterator_tag, forward_iterator_tag)
	{	
	return (_Is_permutation_unchecked(_First1, _Last1, _Unchecked_idl0(_First2), _Pred));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_no_deprecate1(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Is_permutation_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_no_deprecate(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr& _Pred)
	{	
	;
	;
	return (_Is_permutation_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
		_First2, _Pred, _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
	return (_Is_permutation_no_deprecate(_First1, _Last1, _First2, _Pred));
	}

 













		
template<class _FwdIt1,
	class _FwdIt2> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2)
	{	
	return (::std:: is_permutation(_First1, _Last1,
		_First2, equal_to<>()));
	}


 










		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
		forward_iterator_tag, forward_iterator_tag)
	{	
		
	;
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
		if (!_Pred(*_First1, *_First2))
			{	
			if (::std:: distance(_First1, _Last1)
				!= ::std:: distance(_First2, _Last2))
				return (false);	
			else
				return (_Check_match_counts(_First1, _Last1,
					_First2, _Last2, _Pred));
			}

	return (_First1 == _Last1 && _First2 == _Last2);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
		
	if (_Last1 - _First1 != _Last2 - _First2)
		return (false);
	;
	return (_Is_permutation_unchecked(_First1, _Last1, _First2, _Pred));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
		
	;
	;
	return (_Is_permutation_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred,
		_Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	return (::std:: is_permutation(_First1, _Last1,
		_First2, _Last2, equal_to<>()));
	}

		
template<class _BidIt> inline
	void _Reverse_unchecked(_BidIt _First, _BidIt _Last)
	{	
	for (; _First != _Last && _First != --_Last; ++_First)
		::std:: iter_swap(_First, _Last);
	}

template<class _BidIt> inline
	void reverse(_BidIt _First, _BidIt _Last)
	{	
	;
	_Reverse_unchecked(_Unchecked(_First), _Unchecked(_Last));
	}

		
template<class _FwdIt> inline
	_FwdIt _Rotate_unchecked1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		forward_iterator_tag)
	{	
	for (_FwdIt _Next = _Mid, _Res = _Last; ; )
		{	
		::std:: iter_swap(_First, _Next);
		if (++_First == _Mid)
			{	
			if (++_Next == _Last)
				return (_Res == _Last ? _Mid : _Res);
			else
				_Mid = _Next;	
			}
		else if (++_Next == _Last)
			{	
			if (_Res == _Last)
				_Res = _First;
			_Next = _Mid;
			}
		}
	}

template<class _BidIt> inline
	pair<_BidIt, _BidIt> _Reverse_until_sentinel_unchecked(
		_BidIt _First, _BidIt _Sentinel, _BidIt _Last)
	{	
	while (_First != _Sentinel && _Last != _Sentinel)
		::std:: iter_swap(_First++, --_Last);
	return (::std:: make_pair(_First, _Last));
	}

template<class _BidIt> inline
	_BidIt _Rotate_unchecked1(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		bidirectional_iterator_tag)
	{	
	_Reverse_unchecked(_First, _Mid);
	_Reverse_unchecked(_Mid, _Last);
	pair<_BidIt, _BidIt> _Tmp = _Reverse_until_sentinel_unchecked(_First, _Mid, _Last);
	_Reverse_unchecked(_Tmp.first, _Tmp.second);
	return (_Mid != _Tmp.first ? _Tmp.first : _Tmp.second);
	}

template<class _RanIt> inline
	_RanIt _Rotate_unchecked1(_RanIt _First, _RanIt _Mid, _RanIt _Last,
		random_access_iterator_tag)
	{	
	_Reverse_unchecked(_First, _Mid);
	_Reverse_unchecked(_Mid, _Last);
	_Reverse_unchecked(_First, _Last);
	return (_First + (_Last - _Mid));
	}

template<class _FwdIt> inline
	_FwdIt _Rotate_unchecked(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
	{	
	if (_First == _Mid)
		return (_Last);
	if (_Mid == _Last)
		return (_First);
	return (_Rotate_unchecked1(_First, _Mid, _Last, _Iter_cat_t<_FwdIt>()));
	}

template<class _FwdIt> inline
	_FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
	{	
	;
	;
	return (_Rechecked(_First,
		_Rotate_unchecked(_Unchecked(_First), _Unchecked(_Mid),
		_Unchecked(_Last))));
	}

	
template<class _Diff,
	class _Urng>
	class _Rng_from_urng
	{	
public:
	typedef typename make_unsigned<_Diff>::type _Ty0;
	typedef typename _Urng::result_type _Ty1;

	typedef typename _If<sizeof (_Ty1) < sizeof (_Ty0),
		_Ty0, _Ty1>::type _Udiff;


	explicit _Rng_from_urng(_Urng& _Func)
		: _Ref(_Func), _Bits(8 * sizeof (_Udiff)), _Bmask(_Udiff(-1))
		{	
		for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
			--_Bits;
		}

	_Diff operator()(_Diff _Index)
		{	
		for (; ; )
			{	
			_Udiff _Ret = 0;	
			_Udiff _Mask = 0;	

			while (_Mask < _Udiff(_Index - 1))
				{	
				_Ret <<= _Bits - 1;	
				_Ret <<= 1;
				_Ret |= _Get_bits();
				_Mask <<= _Bits - 1;	
				_Mask <<= 1;
				_Mask |= _Bmask;
				}

			
			if (_Ret / _Index < _Mask / _Index
				|| _Mask % _Index == _Udiff(_Index - 1))
				return (_Ret % _Index);
			}
		}

	_Udiff _Get_all_bits()
		{	
		_Udiff _Ret = 0;

		for (size_t _Num = 0; _Num < 8 * sizeof (_Udiff);
			_Num += _Bits)
			{	
			_Ret <<= _Bits - 1;	
			_Ret <<= 1;
			_Ret |= _Get_bits();
			}

		return (_Ret);
		}

	_Rng_from_urng(const _Rng_from_urng&) = delete;
	_Rng_from_urng& operator=(const _Rng_from_urng&) = delete;

private:
	_Udiff _Get_bits()
		{	
		for (; ; )
			{	
			_Udiff _Val = _Ref() - (_Urng::min)();

			if (_Val <= _Bmask)
				return (_Val);
			}
		}

	_Urng& _Ref;	
	size_t _Bits;	
	_Udiff _Bmask;	
	};

		
template<class _Elem>
	class __declspec(dllimport) _Yarn
	{	
public:
	typedef _Yarn<_Elem> _Myt;

	 _Yarn()
		: _Myptr(0), _Nul(0)
		{	
		}

	 _Yarn(const _Myt& _Right)
		: _Myptr(0), _Nul(0)
		{	
		*this = _Right;
		}

	 _Yarn(const _Elem *_Right)
		: _Myptr(0), _Nul(0)
		{	
		*this = _Right;
		}

	_Myt&  operator=(const _Myt& _Right)
		{	
		return (*this = _Right._Myptr);
		}

	_Myt&  operator=(const _Elem *_Right)
		{	
		if (_Myptr != _Right)
			{	
			_Tidy();

			if (_Right != 0)
				{	
				const _Elem *_Ptr = _Right;
				while (*_Ptr != (_Elem)0)
					++_Ptr;
				size_t _Count = ((const char *)++_Ptr - (const char *)_Right);

 




				_Myptr = (_Elem *):: malloc(_Count);
 

				if (_Myptr != 0)
					:: memcpy(_Myptr, _Right, _Count);
				}
			}

		return (*this);
		}

	 ~_Yarn() noexcept
		{	
		_Tidy();
		}

	bool  empty() const
		{	
		return (_Myptr == 0);
		}

	const _Elem * c_str() const
		{	
		return (_Myptr != 0 ? _Myptr : &_Nul);
		}

	bool  _Empty() const
		{	
		return (_Myptr == 0);
		}

	const _Elem * _C_str() const
		{	
		return (_Myptr != 0 ? _Myptr : &_Nul);
		}

private:
	void  _Tidy()
		{	
		if (_Myptr != 0)

 



			:: free(_Myptr);
 

		_Myptr = 0;
		}

	_Elem *_Myptr;	
	_Elem _Nul;		
	};

	
template<class _Ty,
	class _Alloc>
	struct _Has_allocator_type
	{	
	template<class _Uty>
		static auto _Fn(int)
			-> is_convertible<_Alloc,
				typename _Uty::allocator_type>;
	template<class _Uty>
		static auto _Fn(_Wrap_int)
			-> false_type;

	typedef decltype(_Fn<_Ty>(0)) type;
	};

		
struct allocator_arg_t
	{	
	};

constexpr allocator_arg_t allocator_arg{};

[[noreturn]] __declspec(dllimport) void __cdecl _Xbad_alloc();
[[noreturn]] __declspec(dllimport) void __cdecl _Xinvalid_argument(  const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xlength_error(  const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xout_of_range(  const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xoverflow_error(  const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xruntime_error(  const char *);
}

namespace std {
		
template<class _Ty,
	class _Alloc>
	struct uses_allocator
		: _Has_allocator_type<_Ty, _Alloc>::type
	{	
	};

 
template<class _Ty,
	class _Alloc>
	constexpr bool uses_allocator_v = uses_allocator<_Ty, _Alloc>::value;
 
}	
 
 #pragma warning(pop)
 #pragma pack(pop)










 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 
  
 

 #pragma warning(disable: 4100)

namespace std {



 




 

 









		
inline
	__declspec(allocator) void *_Allocate(size_t _Count, size_t _Sz,
		bool _Try_aligned_allocation = true)
	{	
	void *_Ptr = 0;

	if (_Count == 0)
		return (_Ptr);

	
	if ((size_t)(-1) / _Sz < _Count)
		_Xbad_alloc();	
	const size_t _User_size = _Count * _Sz;

 
	if (_Try_aligned_allocation
		&& 4096 <= _User_size)
		{	
		static_assert(sizeof (void *) < 32,
			"Big allocations should at least match vector register size");
		const size_t _Block_size = (sizeof(void *) + 32 - 1) + _User_size;
		if (_Block_size <= _User_size)
			_Xbad_alloc();	
		const uintptr_t _Ptr_container =
			reinterpret_cast<uintptr_t>(::operator new(_Block_size));
		{ if (!(_Ptr_container != 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		_Ptr = reinterpret_cast<void *>((_Ptr_container + (sizeof(void *) + 32 - 1))
			& ~(32 - 1));
		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

 


		}
	else
 

		{	
		_Ptr = ::operator new(_User_size);
		{ if (!(_Ptr != 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		}
	return (_Ptr);
	}

		
inline
	void _Deallocate(void * _Ptr, size_t _Count, size_t _Sz)
	{	
 
	{ if (!(_Count <= (size_t)(-1) / _Sz)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
	const size_t _User_size = _Count * _Sz;
	if (4096 <= _User_size)
		{	
		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
		{ if (!((_Ptr_user & (32 - 1)) == 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
		const uintptr_t _Ptr_container =
			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

 







		
		{ if (!(_Ptr_container < _Ptr_user)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };

 




		{ if (!(sizeof(void *) <= _Ptr_user - _Ptr_container)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
 

		{ if (!(_Ptr_user - _Ptr_container <= (sizeof(void *) + 32 - 1))) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };

		_Ptr = reinterpret_cast<void *>(_Ptr_container);
		}
 

	::operator delete(_Ptr);
	}

		
template<class _Ty1,
	class _Ty2> inline
	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
	{	
	void *_Vptr = _Ptr;
	::new (_Vptr) _Ty1(::std:: forward<_Ty2>(_Val));
	}

template<class _Ty1> inline
	void _Construct(_Ty1 *_Ptr)
	{	
	void *_Vptr = _Ptr;

	::new (_Vptr) _Ty1();
	}

		
template<class _Alty>
	struct _Is_simple_alloc
		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
		&& is_same<typename _Alty::pointer,
			typename _Alty::value_type *>::value
		&& is_same<typename _Alty::const_pointer,
			const typename _Alty::value_type *>::value
		&& is_same<typename _Alty::reference,
			typename _Alty::value_type&>::value
		&& is_same<typename _Alty::const_reference,
			const typename _Alty::value_type&>::value>
	{	
	};

		
template<class _Value_type>
	struct _Simple_types
	{	
	typedef _Value_type value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef value_type *pointer;
	typedef const value_type *const_pointer;
	typedef value_type& reference;
	typedef const value_type& const_reference;
	};

		
template<class _Alty,
	class _Pointer>
	struct _Get_voidptr
	{	
	typedef typename _Alty::template rebind<void>::other _Alvoid;
	typedef typename _Alvoid::pointer type;
	};

template<class _Alty,
	class _Ty>
	struct _Get_voidptr<_Alty, _Ty *>
	{	
	typedef void *type;
	};

		
template<class _Ty>
	struct _Get_first_parameter;

template<template<class, class...> class _Ty,
	class _First,
	class... _Rest>
	struct _Get_first_parameter<_Ty<_First, _Rest...> >
	{	
	typedef _First type;
	};

		
template<class _Newfirst,
	class _Ty>
	struct _Replace_first_parameter;

template<class _Newfirst,
	template<class, class...> class _Ty,
	class _First,
	class... _Rest>
	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
	{	
	typedef _Ty<_Newfirst, _Rest...> type;
	};

		
template<class _Ty>
	struct _Get_element_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::element_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_first_parameter<_Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };

		
template<class _Ty>
	struct _Get_ptr_difference_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<ptrdiff_t>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };

		
template<class _Ty,
	class _Other>
	struct _Get_rebind_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::template rebind<_Other>::other>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Replace_first_parameter<_Other , _Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };

		
template<class _Ty>
	struct pointer_traits
	{	
	typedef typename _Get_element_type<_Ty>::type element_type;
	typedef _Ty pointer;
	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;

	template<class _Other>
		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;

	typedef typename _If<is_void<element_type>::value,
		char&,
		typename add_lvalue_reference<element_type>::type>::type _Reftype;

	static pointer pointer_to(_Reftype _Val)
		{	
		return (_Ty::pointer_to(_Val));
		}
	};

		
template<class _Ty>
	struct pointer_traits<_Ty *>
	{	
	typedef _Ty element_type;
	typedef _Ty *pointer;
	typedef ptrdiff_t difference_type;

	template<class _Other>
		using rebind = _Other *;

	typedef typename _If<is_void<_Ty>::value,
		char&,
		typename add_lvalue_reference<_Ty>::type>::type _Reftype;

	static pointer pointer_to(_Reftype _Val)
		{	
		return (::std:: addressof(_Val));
		}
	};


		
template<class _Ptrty> inline
	void _Destroy(_Ptrty _Ptr)
	{	
	typedef typename pointer_traits<_Ptrty>::element_type _Ty;
	_Ptr->~_Ty();
	}

		
template<class _Ptrty> inline
	auto _Const_cast(_Ptrty _Ptr)
	{	
	using _Elem = typename pointer_traits<_Ptrty>::element_type;
	using _Modifiable = remove_const_t<_Elem>;
	using _Dest = typename pointer_traits<_Ptrty>::template rebind<_Modifiable>;

	return (pointer_traits<_Dest>::pointer_to(const_cast<_Modifiable&>(*_Ptr)));
	}

template<class _Ty> inline
	auto _Const_cast(_Ty * _Ptr)
	{	
	return (const_cast<remove_const_t<_Ty> *>(_Ptr));
	}


		
template<class _Ty>
	struct _Get_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Ty::value_type *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };

		
template<class _Ty>
	struct _Get_const_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const typename _Ty::value_type>>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };

		
template<class _Ty>
	struct _Get_void_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<void>>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };

		
template<class _Ty>
	struct _Get_const_void_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const void>>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };

		
template<class _Ty>
	struct _Get_difference_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_ptr_difference_type< typename _Get_pointer_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };

		
template<class _Ty>
	struct _Get_size_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::size_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename make_unsigned< typename _Get_difference_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };

		
template<class _Ty>
	struct _Get_propagate_on_container_copy
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_copy_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };

		
template<class _Ty>
	struct _Get_propagate_on_container_move
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_move_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };

		
template<class _Ty>
	struct _Get_propagate_on_container_swap
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_swap>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };

		
template<class _Ty>
	struct _Get_is_always_equal
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::is_always_equal>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename is_empty<_Ty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };

		
template<class _Ty>
	class allocator;
template<class _Alloc>
	struct _Wrap_alloc;

template<class _Alloc>
	struct _Unwrap_alloc
	{	
	typedef _Alloc type;
	};

template<class _Alloc>
	struct _Unwrap_alloc<_Wrap_alloc<_Alloc>>
	{	
	typedef _Alloc type;
	};


		
template<class _Alloc>
	using _Unwrap_alloc_t = typename _Unwrap_alloc<_Alloc>::type;


		
template<class _Alloc,
	class = void>
	struct _Is_default_allocator
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_default_allocator<allocator<_Ty>, typename allocator<_Ty>::_Not_user_specialized>
		: true_type
	{	
	};

		
struct _Alloc_allocate
	{	
		

	template<class _Alloc,
		class _Size_type,
		class _Const_void_pointer>
		static auto _Fn(int, _Alloc& _Al,
			_Size_type _Count,
			_Const_void_pointer _Hint)
			-> decltype(_Al.allocate(_Count, _Hint))
		{	
		return (_Al.allocate(_Count, _Hint));
		}

	template<class _Alloc,
		class _Size_type,
		class _Const_void_pointer>
		static auto _Fn(_Wrap_int, _Alloc& _Al,
			_Size_type _Count,
			_Const_void_pointer)
			-> decltype(_Al.allocate(_Count))
		{	
		return (_Al.allocate(_Count));
		}
	};

		
struct _Has_no_alloc_construct_tag
	{	
	};

template<class _Void,
	class... _Types>
	struct _Has_no_alloc_construct
		: true_type
	{	
	};

template<class _Alloc,
	class _Ptr,
	class... _Args>
	struct _Has_no_alloc_construct<
		void_t<
			_Has_no_alloc_construct_tag,	
			decltype(::std:: declval<_Alloc&>().construct(::std:: declval<_Ptr>(), ::std:: declval<_Args>()...))>,
		_Alloc, _Ptr, _Args...>
		: false_type
	{	
	};

template<class _Alloc,
	class _Ptr,
	class... _Args>
	using _Uses_default_construct = disjunction<
		_Is_default_allocator<_Alloc>,
		_Has_no_alloc_construct<void, _Alloc, _Ptr, _Args...>>;

template<class _Alloc,
	class _Ptr,
	class... _Args>
	using _Uses_default_construct_t = typename _Uses_default_construct<_Alloc, _Ptr, _Args...>::type;


		
struct _Has_no_alloc_destroy_tag
	{	
	};

template<class _Alloc,
	class _Ptr,
	class = void>
	struct _Has_no_alloc_destroy
		: true_type
	{	
	};

template<class _Alloc,
	class _Ptr>
	struct _Has_no_alloc_destroy<_Alloc, _Ptr, void_t<
			_Has_no_alloc_destroy_tag,	
			decltype(::std:: declval<_Alloc&>().destroy(::std:: declval<_Ptr>()))>>
		: false_type
	{	
	};

template<class _Alloc,
	class _Ptr>
	using _Uses_default_destroy = disjunction<
		_Is_default_allocator<_Alloc>,
		_Has_no_alloc_destroy<_Alloc, _Ptr>>;

template<class _Alloc,
	class _Ptr>
	using _Uses_default_destroy_t = typename _Uses_default_destroy<_Alloc, _Ptr>::type;


		
struct _Alloc_max_size
	{	
	template<class _Ty>
		static auto _Fn(int, const _Ty& _Al) noexcept
			-> decltype(_Al.max_size())
		{	
		return (_Al.max_size());
		}

	template<class _Ty>
		static auto _Fn(_Wrap_int, const _Ty&) noexcept
			-> typename _Get_size_type<_Ty>::type
		{	
		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)()
			/ sizeof(typename _Ty::value_type));
		}
	};

		
struct _Alloc_select
	{	
		

	template<class _Ty>
		static auto _Fn(int, const _Ty& _Al)
			-> decltype((_Ty)_Al.select_on_container_copy_construction())
		{	
		return (_Al.select_on_container_copy_construction());
		}

	template<class _Ty>
		static auto _Fn(_Wrap_int, const _Ty& _Al)
			-> _Ty
		{	
		return (_Al);
		}
	};

		
template<class _Alloc>
	struct allocator_traits
	{	
	typedef _Alloc allocator_type;
	typedef typename _Alloc::value_type value_type;

	typedef typename _Get_pointer_type<_Alloc>::type
		pointer;
	typedef typename _Get_const_pointer_type<_Alloc>::type
		const_pointer;
	typedef typename _Get_void_pointer_type<_Alloc>::type
		void_pointer;
	typedef typename _Get_const_void_pointer_type<_Alloc>::type
		const_void_pointer;

	typedef typename _Get_size_type<_Alloc>::type size_type;
	typedef typename _Get_difference_type<_Alloc>::type difference_type;

	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
		propagate_on_container_copy_assignment;
	typedef typename _Get_propagate_on_container_move<_Alloc>::type
		propagate_on_container_move_assignment;
	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
		propagate_on_container_swap;
	typedef typename _Get_is_always_equal<_Alloc>::type
		is_always_equal;

	template<class _Other>
		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;

	template<class _Other>
		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;

	static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
		{	
		return (_Al.allocate(_Count));
		}

	static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
		const_void_pointer _Hint)
		{	
		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
		}

	static void deallocate(_Alloc& _Al,
		pointer _Ptr, size_type _Count)
		{	
		_Al.deallocate(_Ptr, _Count);
		}

	template<class _Ty,
		class... _Types>
		static void _Construct1(true_type, _Alloc&, _Ty *_Ptr,
			_Types&&... _Args)
		{	
		::new (static_cast<void *>(_Ptr))
			_Ty(::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty,
		class... _Types>
		static void _Construct1(false_type, _Alloc& _Al, _Ty *_Ptr,
			_Types&&... _Args)
		{	
		_Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty,
		class... _Types>
		static void construct(_Alloc& _Al, _Ty *_Ptr,
			_Types&&... _Args)
		{	
		_Construct1(_Uses_default_construct_t<_Unwrap_alloc_t<_Alloc>, _Ty *, _Types...>(),
			_Al, _Ptr, ::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty>
		static void _Destroy1(_Alloc&, _Ty *_Ptr, true_type)
		{	
		_Ptr->~_Ty();
		}

	template<class _Ty>
		static void _Destroy1(_Alloc& _Al, _Ty *_Ptr, false_type)
		{	
		_Al.destroy(_Ptr);
		}

	template<class _Ty>
		static void destroy(_Alloc& _Al, _Ty *_Ptr)
		{	
		_Destroy1(_Al, _Ptr, _Uses_default_destroy_t<_Unwrap_alloc_t<_Alloc>, _Ty *>());
		}

	static size_type max_size(const _Alloc& _Al) noexcept
		{	
		return (_Alloc_max_size::_Fn(0, _Al));
		}

	static _Alloc select_on_container_copy_construction(
		const _Alloc& _Al)
		{	
		return (_Alloc_select::_Fn(0, _Al));
		}
	};

		
template<class _Ty>
	class allocator
	{	
public:
	static_assert(!is_const<_Ty>::value,
		"The C++ Standard forbids containers of const elements "
		"because allocator<const T> is ill-formed.");

	typedef void _Not_user_specialized;

	typedef _Ty value_type;

	typedef value_type *pointer;
	typedef const value_type *const_pointer;

	typedef value_type& reference;
	typedef const value_type& const_reference;

	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	typedef true_type propagate_on_container_move_assignment;
	typedef true_type is_always_equal;

	template<class _Other>
		struct rebind
		{	
		typedef allocator<_Other> other;
		};

	pointer address(reference _Val) const noexcept
		{	
		return (::std:: addressof(_Val));
		}

	const_pointer address(const_reference _Val) const noexcept
		{	
		return (::std:: addressof(_Val));
		}

	allocator() noexcept
		{	
		}

	allocator(const allocator<_Ty>&) noexcept
		{	
		}

	template<class _Other>
		allocator(const allocator<_Other>&) noexcept
		{	
		}

	template<class _Other>
		allocator<_Ty>& operator=(const allocator<_Other>&)
		{	
		return (*this);
		}

	void deallocate(pointer _Ptr, size_type _Count)
		{	
		_Deallocate(_Ptr, _Count, sizeof (_Ty));
		}

	__declspec(allocator) pointer allocate(size_type _Count)
		{	
		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
		}

	__declspec(allocator) pointer allocate(size_type _Count, const void *)
		{	
		return (allocate(_Count));
		}

	template<class _Objty,
		class... _Types>
		void construct(_Objty *_Ptr, _Types&&... _Args)
		{	
		::new ((void *)_Ptr) _Objty(::std:: forward<_Types>(_Args)...);
		}


	template<class _Uty>
		void destroy(_Uty *_Ptr)
		{	
		_Ptr->~_Uty();
		}

	size_t max_size() const noexcept
		{	
		return ((size_t)(-1) / sizeof (_Ty));
		}
	};

		
template<>
	class allocator<void>
	{	
public:
	typedef void _Not_user_specialized;

	typedef void value_type;

	typedef void *pointer;
	typedef const void *const_pointer;

	template<class _Other>
		struct rebind
		{	
		typedef allocator<_Other> other;
		};

	allocator() noexcept
		{	
		}

	allocator(const allocator<void>&) noexcept
		{	
		}

	template<class _Other>
		allocator(const allocator<_Other>&) noexcept
		{	
		}

	template<class _Other>
		allocator<void>& operator=(const allocator<_Other>&)
		{	
		return (*this);
		}
	};

template<class _Ty,
	class _Other> inline
	bool operator==(const allocator<_Ty>&,
		const allocator<_Other>&) noexcept
	{	
	return (true);
	}

template<class _Ty,
	class _Other> inline
	bool operator!=(const allocator<_Ty>& _Left,
		const allocator<_Other>& _Right) noexcept
	{	
	return (false);
	}

		
template<class _Ty>
	struct allocator_traits<allocator<_Ty> >
	{	
	typedef allocator<_Ty> _Alloc;

	typedef _Alloc allocator_type;
	typedef _Ty value_type;

	typedef value_type *pointer;
	typedef const value_type *const_pointer;
	typedef void *void_pointer;
	typedef const void *const_void_pointer;

	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	typedef false_type propagate_on_container_copy_assignment;
	typedef true_type propagate_on_container_move_assignment;
	typedef false_type propagate_on_container_swap;
	typedef true_type is_always_equal;

	template<class _Other>
		using rebind_alloc = allocator<_Other>;

	template<class _Other>
		using rebind_traits = allocator_traits<allocator<_Other> >;

	static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
		{	
		return (_Al.allocate(_Count));
		}

	static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
		const_void_pointer _Hint)
		{	
		return (_Al.allocate(_Count, _Hint));
		}

	static void deallocate(_Alloc& _Al,
		pointer _Ptr, size_type _Count)
		{	
		_Al.deallocate(_Ptr, _Count);
		}

	template<class _Objty,
		class... _Types>
		static void construct(_Alloc& _Al, _Objty *_Ptr,
			_Types&&... _Args)
		{	
		_Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
		}


	template<class _Uty>
		static void destroy(_Alloc& _Al, _Uty *_Ptr)
		{	
		_Al.destroy(_Ptr);
		}

	static size_type max_size(const _Alloc& _Al) noexcept
		{	
		return (_Al.max_size());
		}

	static _Alloc select_on_container_copy_construction(
		const _Alloc& _Al)
		{	
		return (_Al);
		}
	};

		
template<class _Alloc>
	struct _Wrap_alloc
		: public _Alloc
	{	
	typedef _Alloc _Mybase;
	typedef allocator_traits<_Alloc> _Mytraits;

	typedef typename _Mytraits::value_type value_type;

	typedef typename _Mytraits::pointer pointer;
	typedef typename _Mytraits::const_pointer const_pointer;
	typedef typename _Mytraits::void_pointer void_pointer;
	typedef typename _Mytraits::const_void_pointer const_void_pointer;

	typedef typename _If<is_void<value_type>::value,
		int, value_type>::type& reference;
	typedef typename _If<is_void<const value_type>::value,
		const int, const value_type>::type& const_reference;

	typedef typename _Mytraits::size_type size_type;
	typedef typename _Mytraits::difference_type difference_type;

	typedef typename _Mytraits::propagate_on_container_copy_assignment
		propagate_on_container_copy_assignment;
	typedef typename _Mytraits::propagate_on_container_move_assignment
		propagate_on_container_move_assignment;
	typedef typename _Mytraits::propagate_on_container_swap
		propagate_on_container_swap;
	typedef typename _Mytraits::is_always_equal
		is_always_equal;

	_Wrap_alloc select_on_container_copy_construction(_Nil = _Nil()) const
		{	
		return (_Mytraits::select_on_container_copy_construction(*this));
		}

	template<class _Other>
		struct rebind
		{	
		typedef typename _Mytraits::template rebind_alloc<_Other>
			_Other_alloc;
		typedef _Wrap_alloc<_Other_alloc> other;
		};

	pointer address(reference _Val) const
		{	
		return (pointer_traits<pointer>::pointer_to(_Val));
		}

	const_pointer address(const_reference _Val) const
		{	
		return (pointer_traits<const_pointer>::pointer_to(_Val));
		}

	_Wrap_alloc() noexcept(is_nothrow_default_constructible<_Alloc>::value)
		: _Mybase()
		{	
		}

	_Wrap_alloc(const _Wrap_alloc& _Right) noexcept
		: _Mybase(_Right)
		{	
		}

	_Wrap_alloc(_Wrap_alloc&& _Right) noexcept
		: _Mybase(::std:: move(_Right))
		{	
		}

	template<class _Other>
		_Wrap_alloc(_Other&& _Right) noexcept
		: _Mybase(::std:: forward<_Other>(_Right))
		{	
		}

	_Wrap_alloc& operator=(const _Wrap_alloc& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	_Wrap_alloc& operator=(_Wrap_alloc&& _Right)
		{	
		_Mybase::operator=(::std:: move(_Right));
		return (*this);
		}

	template<class _Other>
		_Wrap_alloc& operator=(_Other&& _Right)
		{	
		_Mybase::operator=(::std:: forward<_Other>(_Right));
		return (*this);
		}

	__declspec(allocator) pointer allocate(size_type _Count)
		{	
		return (_Mybase::allocate(_Count));
		}

	__declspec(allocator) pointer allocate(size_type _Count,
		const_void_pointer _Hint, _Nil = _Nil())
		{	
		return (_Mytraits::allocate(*this, _Count, _Hint));
		}

	void deallocate(pointer _Ptr, size_type _Count)
		{	
		_Mybase::deallocate(_Ptr, _Count);
		}

	template<class _Ty,
		class... _Types>
		void construct(_Ty *_Ptr,
			_Types&&... _Args)
		{	
		_Mytraits::construct(*this, _Ptr,
			::std:: forward<_Types>(_Args)...);
		}


	template<class _Ty>
		void destroy(_Ty *_Ptr)
		{	
		_Mytraits::destroy(*this, _Ptr);
		}

	size_type max_size(_Nil = _Nil()) const noexcept
		{	
		return (_Mytraits::max_size(*this));
		}
	};

template<class _Ty,
	class _Other> inline
	bool operator==(const _Wrap_alloc<_Ty>& _Left,
		const _Wrap_alloc<_Other>& _Right) noexcept
	{	
	return (static_cast<const _Ty&>(_Left)
		== static_cast<const _Other&>(_Right));
	}

template<class _Ty,
	class _Other> inline
	bool operator!=(const _Wrap_alloc<_Ty>& _Left,
		const _Wrap_alloc<_Other>& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

		
template<class _Alty> inline
	void _Pocca(_Alty& _Left, const _Alty& _Right, true_type) noexcept
	{	
	_Left = _Right;
	}

template<class _Alty> inline
	void _Pocca(_Alty&, const _Alty&, false_type) noexcept
	{	
	}

template<class _Alty> inline
	void _Pocca(_Alty& _Left, const _Alty& _Right) noexcept
	{	
	typename _Alty::propagate_on_container_copy_assignment _Tag;
	_Pocca(_Left, _Right, _Tag);
	}

		
template<class _Alty> inline
	void _Pocma(_Alty& _Left, _Alty& _Right, true_type) noexcept
	{	
	_Left = ::std:: move(_Right);
	}

template<class _Alty> inline
	void _Pocma(_Alty&, _Alty&, false_type) noexcept
	{	
	}

template<class _Alty> inline
	void _Pocma(_Alty& _Left, _Alty& _Right) noexcept
	{	
	typename _Alty::propagate_on_container_move_assignment _Tag;
	_Pocma(_Left, _Right, _Tag);
	}

		
template<class _Alty> inline
	void _Pocs(_Alty& _Left, _Alty& _Right, true_type) noexcept
	{	
	_Swap_adl(_Left, _Right);
	}

template<class _Alty> inline
	void _Pocs(_Alty& _Left, _Alty& _Right, false_type) noexcept
	{	
	if (_Left != _Right)
		{	
 


		::std:: terminate();
 
		}
	}

template<class _Alty> inline
	void _Pocs(_Alty& _Left, _Alty& _Right) noexcept
	{	
	typename _Alty::propagate_on_container_swap _Tag;
	_Pocs(_Left, _Right, _Tag);
	}


		
template<class _Alloc,
	class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
	void _Destroy_range1(_Ptr _First, _Ptr _Last, _Wrap_alloc<_Alloc>& _Al, false_type)
	{	
	for (; _First != _Last; ++_First)
		_Al.destroy(_Unfancy(_First));
	}

template<class _Alloc,
	class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
	void _Destroy_range1(_Ptr, _Ptr, _Wrap_alloc<_Alloc>&, true_type)
	{	
		
	}

template<class _Alloc,
	class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
	void _Destroy_range(_Ptr _First, _Ptr _Last, _Wrap_alloc<_Alloc>& _Al)
	{	
		
		
	typedef typename _Alloc::value_type _Val;
	_Destroy_range1(_First, _Last, _Al, typename conjunction<
		is_trivially_destructible<_Val>,
		_Uses_default_destroy<_Alloc, _Val *>>::type());
	}


		
template<class _FwdIt> inline
	void _Destroy_range1(_FwdIt _First, _FwdIt _Last, false_type)
	{	
	for (; _First != _Last; ++_First)
		_Destroy(_First);
	}

template<class _FwdIt> inline
	void _Destroy_range1(_FwdIt, _FwdIt, true_type)
	{	
		
	}

template<class _FwdIt> inline
	void _Destroy_range(_FwdIt _First, _FwdIt _Last)
	{	
		
		
	_Destroy_range1(_First, _Last, is_trivially_destructible<_Iter_value_t<_FwdIt>>());
	}
}

		
  

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		
typedef enum memory_order {
	memory_order_relaxed,
	memory_order_consume,
	memory_order_acquire,
	memory_order_release,
	memory_order_acq_rel,
	memory_order_seq_cst
	} memory_order;

typedef _Uint32t _Uint4_t;
typedef _Uint4_t _Atomic_integral_t;

	
	




  
  
  
  
  

  
   
  



		

typedef long _Atomic_flag_t;

  

		
typedef _Atomic_integral_t _Atomic_counter_t;

inline _Atomic_integral_t
	_Get_atomic_count(const _Atomic_counter_t& _Counter)
	{	
	return (_Counter);
	}

inline void _Init_atomic_counter(_Atomic_counter_t& _Counter,
	_Atomic_integral_t _Value)
	{	
	_Counter = _Value;
	}

 
  
   
  


 

		
extern "C" {
__declspec(dllimport) void __cdecl _Lock_shared_ptr_spin_lock();
__declspec(dllimport) void __cdecl _Unlock_shared_ptr_spin_lock();
}
}
 
 #pragma warning(pop)
 #pragma pack(pop)









  
   












#pragma once













































































































































































































































































































































#pragma once












































































































































































































































































































































__pragma(pack(push, 8)) extern "C" {


























    typedef struct __declspec(align(16)) _SETJMP_FLOAT128
    {
        unsigned __int64 Part[2];
    } SETJMP_FLOAT128;

    
    typedef SETJMP_FLOAT128 _JBTYPE;

    typedef struct _JUMP_BUFFER
    {
        unsigned __int64 Frame;
        unsigned __int64 Rbx;
        unsigned __int64 Rsp;
        unsigned __int64 Rbp;
        unsigned __int64 Rsi;
        unsigned __int64 Rdi;
        unsigned __int64 R12;
        unsigned __int64 R13;
        unsigned __int64 R14;
        unsigned __int64 R15;
        unsigned __int64 Rip;
        unsigned long MxCsr;
        unsigned short FpCsr;
        unsigned short Spare;

        SETJMP_FLOAT128 Xmm6;
        SETJMP_FLOAT128 Xmm7;
        SETJMP_FLOAT128 Xmm8;
        SETJMP_FLOAT128 Xmm9;
        SETJMP_FLOAT128 Xmm10;
        SETJMP_FLOAT128 Xmm11;
        SETJMP_FLOAT128 Xmm12;
        SETJMP_FLOAT128 Xmm13;
        SETJMP_FLOAT128 Xmm14;
        SETJMP_FLOAT128 Xmm15;
    } _JUMP_BUFFER;




























































    
    typedef _JBTYPE jmp_buf[16];





    





int __cdecl _setjmp(
      jmp_buf _Buf
    );


    #pragma warning(push)
    #pragma warning(disable:4987) 
    __declspec(noreturn) void __cdecl longjmp(
          jmp_buf _Buf,
          int     _Value
        ) throw(...);
    #pragma warning(pop)








} __pragma(pack(pop))




    
        













#pragma once






























#pragma once































#pragma once































#pragma once
























#pragma once






























#pragma once





































#pragma once
















































#pragma once
































#pragma once













extern "C" { 




typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64    m64_u64;
    float               m64_f32[2];
    __int8              m64_i8[8];
    __int16             m64_i16[4];
    __int32             m64_i32[2];
    __int64             m64_i64;
    unsigned __int8     m64_u8[8];
    unsigned __int16    m64_u16[4];
    unsigned __int32    m64_u32[2];
} __m64;












































































































































}; 
























typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float               m128_f32[4];
     unsigned __int64    m128_u64[2];
     __int8              m128_i8[16];
     __int16             m128_i16[8];
     __int32             m128_i32[4];
     __int64             m128_i64[2];
     unsigned __int8     m128_u8[16];
     unsigned __int16    m128_u16[8];
     unsigned __int32    m128_u32[4];
 } __m128;







 
 
 
 
 
 
 
 
 
 




 
 
 
 
 
 
 
 
 
 












































































 
 
 


extern "C" { 
  






extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern float _mm_cvtss_f32(__m128 _A);














extern __int64 _mm_cvtss_si64(__m128 _A);
extern __int64 _mm_cvttss_si64(__m128 _A);
extern __m128  _mm_cvtsi64_ss(__m128 _A, __int64 _B);






extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);

























extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);



extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);
































 
 
 






















































































































}; 







typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8              m128i_i8[16];
    __int16             m128i_i16[8];
    __int32             m128i_i32[4];
    __int64             m128i_i64[2];
    unsigned __int8     m128i_u8[16];
    unsigned __int16    m128i_u16[8];
    unsigned __int32    m128i_u32[4];
    unsigned __int64    m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double              m128d_f64[2];
} __m128d;






 
 
 


extern "C" { 
  






extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);











extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);



extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);



extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);



extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);
extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);
extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);








extern __m128i _mm_set_epi64x(__int64 _I1,__int64 _I0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12,
                            char _B11, char _B10, char _B9, char _B8,
                            char _B7, char _B6, char _B5, char _B4,
                            char _B3, char _B2, char _B1, char _B0);



extern __m128i _mm_set1_epi64x(__int64 i);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);



extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3,
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12,
                             char _B11, char _B10, char _B9, char _B8,
                             char _B7, char _B6, char _B5, char _B4,
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);









extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128  _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128  _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);






extern __int64 _mm_cvtsd_si64(__m128d);
extern __int64 _mm_cvttsd_si64(__m128d);
extern __m128d _mm_cvtsi64_sd(__m128d, __int64);
extern __m128i _mm_cvtsi64_si128(__int64);
extern __int64 _mm_cvtsi128_si64(__m128i);





}; 







 
 
 














 
 
 


extern "C" { 
  






extern __m128 _mm_addsub_ps(__m128 , __m128 );
extern __m128 _mm_hadd_ps(__m128 , __m128 );
extern __m128 _mm_hsub_ps(__m128 , __m128 );
extern __m128 _mm_movehdup_ps(__m128 );
extern __m128 _mm_moveldup_ps(__m128 );





extern __m128d _mm_addsub_pd(__m128d , __m128d );
extern __m128d _mm_hadd_pd(__m128d , __m128d );
extern __m128d _mm_hsub_pd(__m128d , __m128d );
extern __m128d _mm_loaddup_pd(double const * );
extern __m128d _mm_movedup_pd(__m128d );




extern __m128i _mm_lddqu_si128(__m128i const * );







extern void _mm_monitor(void const * , unsigned , unsigned );




extern void _mm_mwait(unsigned , unsigned );


}; 















extern "C" {


    
    
    
    
    
    

    extern __m128i _mm_hadd_epi16 (__m128i, __m128i);
    extern __m128i _mm_hadd_epi32 (__m128i, __m128i);
    extern __m128i _mm_hadds_epi16 (__m128i, __m128i);







    
    
    
    
    
    
    

    extern __m128i _mm_hsub_epi16 (__m128i, __m128i);
    extern __m128i _mm_hsub_epi32 (__m128i, __m128i);
    extern __m128i _mm_hsubs_epi16 (__m128i, __m128i);







    
    
    
    
    
    
    
    

    extern __m128i _mm_maddubs_epi16 (__m128i, __m128i);





    
    

    extern __m128i _mm_mulhrs_epi16 (__m128i, __m128i);





    
    

    extern __m128i _mm_shuffle_epi8 (__m128i, __m128i);





    
    

    extern __m128i _mm_sign_epi8 (__m128i, __m128i);
    extern __m128i _mm_sign_epi16 (__m128i, __m128i);
    extern __m128i _mm_sign_epi32 (__m128i, __m128i);







    
    

    extern __m128i _mm_alignr_epi8 (__m128i, __m128i, int);





    
    

    extern __m128i _mm_abs_epi8 (__m128i);
    extern __m128i _mm_abs_epi16 (__m128i);
    extern __m128i _mm_abs_epi32 (__m128i);








};
























































extern "C" {


        
        

        extern __m128i _mm_blend_epi16 (__m128i, __m128i, const int );
        extern __m128i _mm_blendv_epi8 (__m128i, __m128i, __m128i mask);

        
        

        extern __m128  _mm_blend_ps (__m128, __m128, const int );
        extern __m128  _mm_blendv_ps(__m128, __m128, __m128 );

        
        

        extern __m128d _mm_blend_pd (__m128d, __m128d, const int );
        extern __m128d _mm_blendv_pd(__m128d, __m128d, __m128d );

        
        

        extern __m128  _mm_dp_ps(__m128, __m128, const int );
        extern __m128d _mm_dp_pd(__m128d, __m128d, const int );

        
        

        extern __m128i _mm_cmpeq_epi64(__m128i, __m128i);

        

        extern __m128i _mm_min_epi8 (__m128i, __m128i);
        extern __m128i _mm_max_epi8 (__m128i, __m128i);

        extern __m128i _mm_min_epu16(__m128i, __m128i);
        extern __m128i _mm_max_epu16(__m128i, __m128i);

        extern __m128i _mm_min_epi32(__m128i, __m128i);
        extern __m128i _mm_max_epi32(__m128i, __m128i);
        extern __m128i _mm_min_epu32(__m128i, __m128i);
        extern __m128i _mm_max_epu32(__m128i, __m128i);

        
        

        extern __m128i _mm_mullo_epi32(__m128i, __m128i);

        
        

        extern __m128i _mm_mul_epi32(__m128i, __m128i);

        
        

        extern int _mm_testz_si128(__m128i , __m128i );

        
        

        extern int _mm_testc_si128(__m128i , __m128i );

        
        
        

        extern int _mm_testnzc_si128(__m128i , __m128i );

        
        
        
        
        

        extern __m128 _mm_insert_ps(__m128 , __m128 , const int );

        




        
        

        extern int _mm_extract_ps(__m128 , const int );

        
        




        
        





        
        

        extern __m128i _mm_insert_epi8 (__m128i , int , const int );
        extern __m128i _mm_insert_epi32(__m128i , int , const int );


        extern __m128i _mm_insert_epi64(__m128i , __int64 , const int );

        
        

        extern int   _mm_extract_epi8 (__m128i , const int );
        extern int   _mm_extract_epi32(__m128i , const int );


        extern __int64 _mm_extract_epi64(__m128i , const int );


        
        

        extern __m128i _mm_minpos_epu16(__m128i);

        

        extern __m128d _mm_round_pd(__m128d , int );
        extern __m128d _mm_round_sd(__m128d , __m128d , int );

        

        extern __m128  _mm_round_ps(__m128  , int );
        extern __m128  _mm_round_ss(__m128 , __m128  , int );

        

        extern __m128i _mm_cvtepi8_epi32 (__m128i);
        extern __m128i _mm_cvtepi16_epi32(__m128i);
        extern __m128i _mm_cvtepi8_epi64 (__m128i);
        extern __m128i _mm_cvtepi32_epi64(__m128i);
        extern __m128i _mm_cvtepi16_epi64(__m128i);
        extern __m128i _mm_cvtepi8_epi16 (__m128i);

        

        extern __m128i _mm_cvtepu8_epi32 (__m128i);
        extern __m128i _mm_cvtepu16_epi32(__m128i);
        extern __m128i _mm_cvtepu8_epi64 (__m128i);
        extern __m128i _mm_cvtepu32_epi64(__m128i);
        extern __m128i _mm_cvtepu16_epi64(__m128i);
        extern __m128i _mm_cvtepu8_epi16 (__m128i);


        
        

        extern __m128i _mm_packus_epi32(__m128i, __m128i);

        
        
        

        extern __m128i _mm_mpsadbw_epu8(__m128i , __m128i , const int );

        



        extern __m128i _mm_stream_load_si128(const __m128i*);


}; 









extern "C" {














































    extern __m128i _mm_cmpistrm (__m128i , __m128i , const int );
    extern int     _mm_cmpistri (__m128i , __m128i , const int );

    extern __m128i _mm_cmpestrm (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestri (__m128i , int , __m128i , int , const int );





    extern int     _mm_cmpistrz (__m128i , __m128i , const int );
    extern int     _mm_cmpistrc (__m128i , __m128i , const int );
    extern int     _mm_cmpistrs (__m128i , __m128i , const int );
    extern int     _mm_cmpistro (__m128i , __m128i , const int );
    extern int     _mm_cmpistra (__m128i , __m128i , const int );

    extern int     _mm_cmpestrz (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestrc (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestrs (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestro (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestra (__m128i , int , __m128i , int , const int );






    extern __m128i _mm_cmpgt_epi64(__m128i , __m128i );





    extern int _mm_popcnt_u32(unsigned int );


    extern __int64 _mm_popcnt_u64(unsigned __int64 );






    extern unsigned int _mm_crc32_u8 (unsigned int , unsigned char );
    extern unsigned int _mm_crc32_u16(unsigned int , unsigned short );
    extern unsigned int _mm_crc32_u32(unsigned int , unsigned int );


    extern unsigned __int64 _mm_crc32_u64(unsigned __int64 , unsigned __int64 );



}; 









extern "C" {






extern __m128i _mm_aesdec_si128(__m128i , __m128i );





extern __m128i _mm_aesdeclast_si128(__m128i , __m128i );





extern __m128i _mm_aesenc_si128(__m128i , __m128i );





extern __m128i _mm_aesenclast_si128(__m128i , __m128i );





extern __m128i _mm_aesimc_si128(__m128i );






extern __m128i _mm_aeskeygenassist_si128(__m128i , const int );







extern __m128i _mm_clmulepi64_si128(__m128i , __m128i ,
                                            const int );



}; 








extern "C" {





typedef union __declspec(intrin_type) __declspec(align(32)) __m256 {
    float m256_f32[8];
} __m256;

typedef struct __declspec(intrin_type) __declspec(align(32)) __m256d {
    double m256d_f64[4];
} __m256d;

typedef union  __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8              m256i_i8[32];
    __int16             m256i_i16[16];
    __int32             m256i_i32[8];
    __int64             m256i_i64[4];
    unsigned __int8     m256i_u8[32];
    unsigned __int16    m256i_u16[16];
    unsigned __int32    m256i_u32[8];
    unsigned __int64    m256i_u64[4];
} __m256i;



















































extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_add_ps(__m256, __m256);












extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d);












extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_and_ps(__m256, __m256);








extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256);













extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int);













extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int);









extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d);









extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256);








extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_div_ps(__m256, __m256);














extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int);








extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256);








extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_max_ps(__m256, __m256);








extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_min_ps(__m256, __m256);









extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_mul_ps(__m256, __m256);








extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_or_ps(__m256, __m256);











extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int);












extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int);








extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_sub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_xor_ps(__m256, __m256);















extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int);
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int);















extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int);
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int);












extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int);





extern int __cdecl _mm_comi_sd(__m128d, __m128d, const int);












extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int);





extern int __cdecl _mm_comi_ss(__m128, __m128, const int);








extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i);








extern __m256  __cdecl _mm256_cvtepi32_ps(__m256i);









extern __m128  __cdecl _mm256_cvtpd_ps(__m256d);








extern __m256i __cdecl _mm256_cvtps_epi32(__m256);









extern __m256d __cdecl _mm256_cvtps_pd(__m128);












extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d);








extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d);












extern __m256i __cdecl _mm256_cvttps_epi32(__m256);







extern __m128  __cdecl _mm256_extractf128_ps(__m256, const int);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);









extern __m256  __cdecl _mm256_permutevar_ps(__m256, __m256i);
extern __m128  __cdecl _mm_permutevar_ps(__m128, __m128i);









extern __m256  __cdecl _mm256_permute_ps(__m256, int);
extern __m128  __cdecl _mm_permute_ps(__m128, int);









extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i);
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i);









extern __m256d __cdecl _mm256_permute_pd(__m256d, int);
extern __m128d __cdecl _mm_permute_pd(__m128d, int);








extern __m256  __cdecl _mm256_permute2f128_ps(__m256, __m256, int);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int);








extern __m256  __cdecl _mm256_broadcast_ss(float const *);
extern __m128  __cdecl _mm_broadcast_ss(float const *);







extern __m256d __cdecl _mm256_broadcast_sd(double const *);







extern __m256  __cdecl _mm256_broadcast_ps(__m128 const *);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *);









extern __m256  __cdecl _mm256_insertf128_ps(__m256, __m128, int);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int);








extern __m256d __cdecl _mm256_load_pd(double const *);
extern void    __cdecl _mm256_store_pd(double *, __m256d);








extern __m256  __cdecl _mm256_load_ps(float const *);
extern void    __cdecl _mm256_store_ps(float *, __m256);








extern __m256d __cdecl _mm256_loadu_pd(double const *);
extern void    __cdecl _mm256_storeu_pd(double *, __m256d);








extern __m256  __cdecl _mm256_loadu_ps(float const *);
extern void    __cdecl _mm256_storeu_ps(float *, __m256);








extern __m256i __cdecl _mm256_load_si256(__m256i const *);
extern void    __cdecl _mm256_store_si256(__m256i *, __m256i);








extern __m256i __cdecl _mm256_loadu_si256(__m256i const *);
extern void    __cdecl _mm256_storeu_si256(__m256i *, __m256i);







































































extern __m256d __cdecl _mm256_maskload_pd(double const *, __m256i);
extern void    __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d);
extern __m128d __cdecl _mm_maskload_pd(double const *, __m128i);
extern void    __cdecl _mm_maskstore_pd(double *, __m128i, __m128d);



















extern __m256  __cdecl _mm256_maskload_ps(float const *, __m256i);
extern void    __cdecl _mm256_maskstore_ps(float *, __m256i, __m256);
extern __m128  __cdecl _mm_maskload_ps(float const *, __m128i);
extern void    __cdecl _mm_maskstore_ps(float *, __m128i, __m128);







extern __m256  __cdecl _mm256_movehdup_ps(__m256);







extern __m256  __cdecl _mm256_moveldup_ps(__m256);







extern __m256d __cdecl _mm256_movedup_pd(__m256d);









extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *);







extern void    __cdecl _mm256_stream_si256(__m256i *, __m256i);








extern void    __cdecl _mm256_stream_pd(double *, __m256d);








extern void    __cdecl _mm256_stream_ps(float *, __m256);









extern __m256  __cdecl _mm256_rcp_ps(__m256);










extern __m256  __cdecl _mm256_rsqrt_ps(__m256);








extern __m256d __cdecl _mm256_sqrt_pd(__m256d);








extern __m256  __cdecl _mm256_sqrt_ps(__m256);












extern __m256d __cdecl _mm256_round_pd(__m256d, int);














extern __m256  __cdecl _mm256_round_ps(__m256, int);









extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d);







extern __m256  __cdecl _mm256_unpackhi_ps(__m256, __m256);







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d);







extern __m256  __cdecl _mm256_unpacklo_ps(__m256, __m256);









extern int     __cdecl _mm256_testz_si256(__m256i, __m256i);



extern int     __cdecl _mm256_testc_si256(__m256i, __m256i);



extern int     __cdecl _mm256_testnzc_si256(__m256i, __m256i);














extern int     __cdecl _mm256_testz_pd(__m256d, __m256d);
extern int     __cdecl _mm256_testc_pd(__m256d, __m256d);
extern int     __cdecl _mm256_testnzc_pd(__m256d, __m256d);
extern int     __cdecl _mm_testz_pd(__m128d, __m128d);
extern int     __cdecl _mm_testc_pd(__m128d, __m128d);
extern int     __cdecl _mm_testnzc_pd(__m128d, __m128d);












extern int     __cdecl _mm256_testz_ps(__m256, __m256);
extern int     __cdecl _mm256_testc_ps(__m256, __m256);
extern int     __cdecl _mm256_testnzc_ps(__m256, __m256);
extern int     __cdecl _mm_testz_ps(__m128, __m128);
extern int     __cdecl _mm_testc_ps(__m128, __m128);
extern int     __cdecl _mm_testnzc_ps(__m128, __m128);








extern int     __cdecl _mm256_movemask_pd(__m256d);








extern int     __cdecl _mm256_movemask_ps(__m256);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256  __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256  __cdecl _mm256_set_ps(float, float, float, float,
                                            float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int,
                                               int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64,
                                                __int64, __int64);










extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256  __cdecl _mm256_setr_ps(float, float, float, float,
                                             float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int,
                                                int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64,
                                                 __int64, __int64);







extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256  __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256  __cdecl _mm256_castpd_ps(__m256d);
extern __m256d __cdecl _mm256_castps_pd(__m256);
extern __m256i __cdecl _mm256_castps_si256(__m256);
extern __m256i __cdecl _mm256_castpd_si256(__m256d);
extern __m256  __cdecl _mm256_castsi256_ps(__m256i);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i);
extern __m128  __cdecl _mm256_castps256_ps128(__m256);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i);
extern __m256  __cdecl _mm256_castps128_ps256(__m128);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i);






extern __m128  __cdecl _mm_cvtph_ps(__m128i);
extern __m256  __cdecl _mm256_cvtph_ps(__m128i);
extern __m128i __cdecl _mm_cvtps_ph(__m128 , const int );
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int);




















extern unsigned __int64 __cdecl _xgetbv(unsigned int);


extern void __cdecl _xsetbv(unsigned int, unsigned __int64);






extern void __cdecl _xsave(void *, unsigned __int64);

extern void __cdecl _xsave64(void *, unsigned __int64);







extern void __cdecl _xsaveopt(void *, unsigned __int64);

extern void __cdecl _xsaveopt64(void *, unsigned __int64);






extern void __cdecl _xsavec(void *, unsigned __int64);

extern void __cdecl _xsavec64(void *, unsigned __int64);







extern void __cdecl _xrstor(void const *, unsigned __int64);

extern void __cdecl _xrstor64(void const *, unsigned __int64);







extern void __cdecl _xsaves(void *, unsigned __int64);

extern void __cdecl _xsaves64(void *, unsigned __int64);







extern void __cdecl _xrstors(void const *, unsigned __int64);

extern void __cdecl _xrstors64(void const *, unsigned __int64);






extern void __cdecl _fxsave(void *);

extern void __cdecl _fxsave64(void *);






extern void __cdecl _fxrstor(void const *);

extern void __cdecl _fxrstor64(void const *);








extern int __cdecl _rdrand16_step(unsigned short *);
extern int __cdecl _rdrand32_step(unsigned int *);

extern int __cdecl _rdrand64_step(unsigned __int64 *);






extern unsigned int     __cdecl _readfsbase_u32();
extern unsigned int     __cdecl _readgsbase_u32();
extern unsigned __int64 __cdecl _readfsbase_u64();
extern unsigned __int64 __cdecl _readgsbase_u64();




extern void __cdecl _writefsbase_u32(unsigned int);
extern void __cdecl _writegsbase_u32(unsigned int);
extern void __cdecl _writefsbase_u64(unsigned __int64);
extern void __cdecl _writegsbase_u64(unsigned __int64);





extern __m128  __cdecl _mm_fmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d);

extern __m256  __cdecl _mm256_fmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d);





extern __m128  __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d);

extern __m256  __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d);





extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i);





extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i);

extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i);





extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i);





extern __m256i __cdecl _mm256_abs_epi8(__m256i);
extern __m256i __cdecl _mm256_abs_epi16(__m256i);
extern __m256i __cdecl _mm256_abs_epi32(__m256i);

extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i);
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_slli_si256(__m256i, const int);

extern __m256i __cdecl _mm256_srli_si256(__m256i, const int);


extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_slli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i);

extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i);

extern __m256i __cdecl _mm256_srai_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int);

extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i);

extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i);

extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_srli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i);





extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int);

extern __m256i __cdecl _mm256_blend_epi32(__m256i,__m256i, const int);

extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int);

extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int);
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int);

extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int);
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int);





extern __m128  __cdecl _mm_broadcastss_ps(__m128);
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d);

extern __m128i __cdecl _mm_broadcastb_epi8(__m128i);
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i);
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i);
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i);

extern __m256  __cdecl _mm256_broadcastss_ps(__m128);
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d);

extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i);
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i);
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i);
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i);

extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i);






extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i);

extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i);






extern int __cdecl _mm256_movemask_epi8(__m256i);





extern __m128i __cdecl _mm_maskload_epi32(int const * ,
                                          __m128i     );
extern __m128i __cdecl _mm_maskload_epi64(__int64 const * ,
                                          __m128i         );

extern void __cdecl _mm_maskstore_epi32(int *   ,
                                        __m128i ,
                                        __m128i );
extern void __cdecl _mm_maskstore_epi64(__int64 * ,
                                        __m128i   ,
                                        __m128i   );

extern __m256i __cdecl _mm256_maskload_epi32(int const * ,
                                             __m256i     );
extern __m256i __cdecl _mm256_maskload_epi64(__int64 const * ,
                                             __m256i         );

extern void __cdecl _mm256_maskstore_epi32(int *   ,
                                           __m256i ,
                                           __m256i );
extern void __cdecl _mm256_maskstore_epi64(__int64 * ,
                                           __m256i   ,
                                           __m256i   );





extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i);
extern __m256  __cdecl _mm256_permutevar8x32_ps(__m256, __m256i);

extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int);
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int);

extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int);





extern __m256i  __cdecl _mm256_stream_load_si256(__m256i const *);






extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d        ,
                                                double const * ,
                                                __m128i        ,
                                                __m256d        ,
                                                const int      );
extern __m256  __cdecl _mm256_mask_i32gather_ps(__m256         ,
                                                float const *  ,
                                                __m256i        ,
                                                __m256         ,
                                                const int      );
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d        ,
                                                double const * ,
                                                __m256i        ,
                                                __m256d        ,
                                                const int      );
extern __m128  __cdecl _mm256_mask_i64gather_ps(__m128         ,
                                                float const *  ,
                                                __m256i        ,
                                                __m128         ,
                                                const int      );

extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d        ,
                                             double const * ,
                                             __m128i        ,
                                             __m128d        ,
                                             const int      );
extern __m128  __cdecl _mm_mask_i32gather_ps(__m128         ,
                                             float const *  ,
                                             __m128i        ,
                                             __m128         ,
                                             const int      );
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d        ,
                                             double const * ,
                                             __m128i        ,
                                             __m128d        ,
                                             const int      );
extern __m128  __cdecl _mm_mask_i64gather_ps(__m128         ,
                                             float const *  ,
                                             __m128i        ,
                                             __m128         ,
                                             const int      );


extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i     ,
                                                   int const * ,
                                                   __m256i     ,
                                                   __m256i     ,
                                                   const int   );
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i     ,
                                                   __int64 const * ,
                                                   __m128i     ,
                                                   __m256i     ,
                                                   const int   );
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i     ,
                                                   int     const * ,
                                                   __m256i     ,
                                                   __m128i     ,
                                                   const int   );
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i     ,
                                                   __int64 const * ,
                                                   __m256i     ,
                                                   __m256i     ,
                                                   const int   );

extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i         ,
                                                int const *     ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i         ,
                                                __int64 const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i         ,
                                                int     const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i         ,
                                                __int64 const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );





extern __m256d __cdecl _mm256_i32gather_pd(double const * ,
                                           __m128i        ,
                                           const int      );
extern __m256  __cdecl _mm256_i32gather_ps(float  const * ,
                                           __m256i        ,
                                           const int      );
extern __m256d __cdecl _mm256_i64gather_pd(double const * ,
                                           __m256i        ,
                                           const int      );
extern __m128  __cdecl _mm256_i64gather_ps(float  const * ,
                                           __m256i        ,
                                           const int      );

extern __m128d __cdecl _mm_i32gather_pd(double const * ,
                                        __m128i        ,
                                        const int      );
extern __m128  __cdecl _mm_i32gather_ps(float  const * ,
                                        __m128i        ,
                                        const int      );
extern __m128d __cdecl _mm_i64gather_pd(double const * ,
                                        __m128i        ,
                                        const int      );
extern __m128  __cdecl _mm_i64gather_ps(float  const * ,
                                        __m128i        ,
                                        const int      );

extern __m256i __cdecl _mm256_i32gather_epi32(int const *     ,
                                              __m256i         ,
                                              const int       );
extern __m256i __cdecl _mm256_i32gather_epi64(__int64 const * ,
                                              __m128i         ,
                                              const int       );
extern __m128i __cdecl _mm256_i64gather_epi32(int const *     ,
                                              __m256i         ,
                                              const int       );
extern __m256i __cdecl _mm256_i64gather_epi64(__int64 const * ,
                                              __m256i         ,
                                              const int       );

extern __m128i __cdecl _mm_i32gather_epi32(int const *     ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i32gather_epi64(__int64 const * ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i64gather_epi32(int     const * ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i64gather_epi64(__int64 const * ,
                                           __m128i         ,
                                           const int       );







extern unsigned int     _bextr_u32(unsigned int ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned int     _blsi_u32(unsigned int);
extern unsigned int     _blsmsk_u32(unsigned int);
extern unsigned int     _blsr_u32(unsigned int);
extern unsigned int     _bzhi_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _mulx_u32(unsigned int ,
                                  unsigned int ,
                                  unsigned int * );
extern unsigned int     _pdep_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _pext_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _rorx_u32(unsigned int ,
                                  const unsigned int );
extern int              _sarx_i32(int ,
                                  unsigned int );
extern unsigned int     _shlx_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _shrx_u32(unsigned int ,
                                          unsigned int );


extern unsigned __int64 _bextr_u64(unsigned __int64 ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned __int64 _blsi_u64(unsigned __int64);
extern unsigned __int64 _blsmsk_u64(unsigned __int64);
extern unsigned __int64 _blsr_u64(unsigned __int64);
extern unsigned __int64 _bzhi_u64(unsigned __int64 ,
                                  unsigned int );
extern unsigned __int64 _mulx_u64(unsigned __int64 ,
                                  unsigned __int64 ,
                                  unsigned __int64 * );
extern unsigned __int64 _pdep_u64(unsigned __int64 ,
                                  unsigned __int64 );
extern unsigned __int64 _pext_u64(unsigned __int64 ,
                                  unsigned __int64 );
extern unsigned __int64 _rorx_u64(unsigned __int64 ,
                                  const unsigned int );
extern __int64          _sarx_i64(__int64 ,
                                  unsigned int );
extern unsigned __int64 _shlx_u64(unsigned __int64 ,
                                  unsigned int );
extern unsigned __int64 _shrx_u64(unsigned __int64 ,
                                          unsigned int );









extern unsigned int     _lzcnt_u32(unsigned int);

extern unsigned __int64 _lzcnt_u64(unsigned __int64);









extern unsigned int     _tzcnt_u32(unsigned int);

extern unsigned __int64 _tzcnt_u64(unsigned __int64);







extern void __cdecl _invpcid(unsigned int , void * );


extern void _Store_HLERelease(long volatile *,long);
extern void _StorePointer_HLERelease(void * volatile *,void *);

extern long _InterlockedExchange_HLEAcquire(long volatile *,long);
extern long _InterlockedExchange_HLERelease(long volatile *,long);
extern void * _InterlockedExchangePointer_HLEAcquire(void *volatile *,void *);
extern void * _InterlockedExchangePointer_HLERelease(void *volatile *,void *);

extern long _InterlockedCompareExchange_HLEAcquire(long volatile *,long,long);
extern long _InterlockedCompareExchange_HLERelease(long volatile *,long,long);
extern __int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile *,__int64,__int64);
extern __int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile *,__int64,__int64);
extern void * _InterlockedCompareExchangePointer_HLEAcquire(void *volatile *,void *,void *);
extern void * _InterlockedCompareExchangePointer_HLERelease(void *volatile *,void *,void *);

extern long _InterlockedExchangeAdd_HLEAcquire(long volatile *,long);
extern long _InterlockedExchangeAdd_HLERelease(long volatile *,long);

extern long _InterlockedAnd_HLEAcquire(long volatile *,long);
extern long _InterlockedAnd_HLERelease(long volatile *,long);
extern long _InterlockedOr_HLEAcquire(long volatile *,long);
extern long _InterlockedOr_HLERelease(long volatile *,long);
extern long _InterlockedXor_HLEAcquire(long volatile *,long);
extern long _InterlockedXor_HLERelease(long volatile *,long);

extern unsigned char _interlockedbittestandset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandset_HLERelease(long *,long);
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandreset_HLERelease(long *,long);


extern void _Store64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedExchange64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedExchange64_HLERelease(__int64 volatile *,__int64);

extern __int64 _InterlockedExchangeAdd64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedExchangeAdd64_HLERelease(__int64 volatile *,__int64);

extern __int64 _InterlockedAnd64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedAnd64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedOr64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedOr64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedXor64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedXor64_HLERelease(__int64 volatile *,__int64);

extern unsigned char _interlockedbittestandset64_HLEAcquire(__int64 *,__int64);
extern unsigned char _interlockedbittestandset64_HLERelease(__int64 *,__int64);
extern unsigned char _interlockedbittestandreset64_HLEAcquire(__int64 *,__int64);
extern unsigned char _interlockedbittestandreset64_HLERelease(__int64 *,__int64);












extern unsigned int     __cdecl _xbegin(void);
extern void             __cdecl _xend(void);
extern void             __cdecl _xabort(const unsigned int);
extern unsigned char    __cdecl _xtest(void);








extern int __cdecl _rdseed16_step(unsigned short *);
extern int __cdecl _rdseed32_step(unsigned int *);

extern int __cdecl _rdseed64_step(unsigned __int64 *);











extern unsigned char __cdecl _addcarryx_u32(unsigned char ,
                                                   unsigned int ,
                                                   unsigned int ,
                                                   unsigned int * );



extern unsigned char __cdecl _addcarryx_u64(unsigned char ,
                                                   unsigned __int64 ,
                                                   unsigned __int64 ,
                                                   unsigned __int64 * );






extern unsigned short   __cdecl _load_be_u16(void const*);
extern unsigned int     __cdecl _load_be_u32(void const*);
extern unsigned __int64 __cdecl _load_be_u64(void const*);







extern void __cdecl _store_be_u16(void *, unsigned short);
extern void __cdecl _store_be_u32(void *, unsigned int);
extern void __cdecl _store_be_u64(void *, unsigned __int64);







extern __m128i __cdecl _mm_sha1msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1nexte_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1rnds4_epu32(__m128i, __m128i, const int);

extern __m128i __cdecl _mm_sha256msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256rnds2_epu32(__m128i, __m128i, __m128i);




extern void * __cdecl _bnd_set_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_narrow_ptr_bounds(const void *, const void *, size_t);
extern void * __cdecl _bnd_copy_ptr_bounds(const void *, const void *);
extern void * __cdecl _bnd_init_ptr_bounds(const void *);
extern void __cdecl _bnd_store_ptr_bounds(const void **, const void *);
extern void __cdecl _bnd_chk_ptr_lbounds(const void *);
extern void __cdecl _bnd_chk_ptr_ubounds(const void *);
extern void __cdecl _bnd_chk_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_load_ptr_bounds(const void **, const void *);
extern const void * __cdecl _bnd_get_ptr_lbound(const void *);
extern const void * __cdecl _bnd_get_ptr_ubound(const void *);


}; 







        












#pragma once


















extern "C" { 






























































































__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);


__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);


__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_hsubw_epi8(__m128i);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);


__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);


__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_roti_epi8(__m128i, int);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);



__m128i _mm_com_epu8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);



__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ss(__m128, __m128);
__m128d _mm_frcz_sd(__m128d, __m128d);








__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);



__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256 _mm256_frcz_ps(__m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);


void __llwpcb(void *);
void *__slwpcb();
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);

void __lwpval64(unsigned __int64, unsigned int, unsigned int);
unsigned char __lwpins64(unsigned __int64, unsigned int, unsigned int);



unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _andn_u32(unsigned int, unsigned int);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _lzcnt_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);

unsigned __int64 _bextr_u64(unsigned __int64, unsigned int, unsigned int);
unsigned __int64 _andn_u64(unsigned __int64, unsigned __int64);
unsigned __int64 _tzcnt_u64(unsigned __int64);
unsigned __int64 _lzcnt_u64(unsigned __int64);
unsigned __int64 _blsr_u64(unsigned __int64);
unsigned __int64 _blsmsk_u64(unsigned __int64);
unsigned __int64 _blsi_u64(unsigned __int64);



unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _t1mskc_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blci_u32(unsigned int);

unsigned __int64 _bextri_u64(unsigned __int64, unsigned int);
unsigned __int64 _blcfill_u64(unsigned __int64);
unsigned __int64 _blsfill_u64(unsigned __int64);
unsigned __int64 _blcs_u64(unsigned __int64);
unsigned __int64 _tzmsk_u64(unsigned __int64);
unsigned __int64 _blcic_u64(unsigned __int64);
unsigned __int64 _blsic_u64(unsigned __int64);
unsigned __int64 _t1mskc_u64(unsigned __int64);
unsigned __int64 _blcmsk_u64(unsigned __int64);
unsigned __int64 _blci_u64(unsigned __int64);


void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);

void _mm_clzero(void const *);


}; 






    

    



    




    






extern "C" {




















































































void * _AddressOfReturnAddress(void);
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask);

unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask);
























long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);


short _InterlockedAnd16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedAnd64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedAnd64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedAnd8(char volatile * _Value, char _Mask);


char _InterlockedAnd8_np(char volatile * _Value, char _Mask);



long _InterlockedAnd_np(long volatile * _Value, long _Mask);

long  _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);

unsigned char _InterlockedCompareExchange128(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult);


unsigned char _InterlockedCompareExchange128_np(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult);

short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);


short _InterlockedCompareExchange16_np(short volatile * _Destination, short _Exchange, short _Comparand);

__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);


__int64 _InterlockedCompareExchange64_np(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);

char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);



void * _InterlockedCompareExchangePointer(void * volatile * _Destination, void * _Exchange, void * _Comparand);


void * _InterlockedCompareExchangePointer_np(void * volatile * _Destination, void * _Exchange, void * _Comparand);



long _InterlockedCompareExchange_np(long volatile * _Destination, long _Exchange, long _Comparand);

long  _InterlockedDecrement(long volatile * _Addend);

short _InterlockedDecrement16(short volatile * _Addend);



__int64 _InterlockedDecrement64(__int64 volatile * _Addend);






long  _InterlockedExchange(long volatile * _Target, long _Value);

short _InterlockedExchange16(short volatile * _Target, short _Value);



__int64 _InterlockedExchange64(__int64 volatile * _Target, __int64 _Value);



char _InterlockedExchange8(char volatile * _Target, char _Value);



long  _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);



__int64 _InterlockedExchangeAdd64(__int64 volatile * _Addend, __int64 _Value);



char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);






void * _InterlockedExchangePointer(void * volatile * _Target, void * _Value);






long  _InterlockedIncrement(long volatile * _Addend);

short _InterlockedIncrement16(short volatile * _Addend);



__int64 _InterlockedIncrement64(__int64 volatile * _Addend);






long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);


short _InterlockedOr16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedOr64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedOr64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedOr8(char volatile * _Value, char _Mask);


char _InterlockedOr8_np(char volatile * _Value, char _Mask);



long _InterlockedOr_np(long volatile * _Value, long _Mask);

long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);


short _InterlockedXor16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedXor64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedXor64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedXor8(char volatile * _Value, char _Mask);


char _InterlockedXor8_np(char volatile * _Value, char _Mask);



long _InterlockedXor_np(long volatile * _Value, long _Mask);









void _ReadBarrier(void);






void _ReadWriteBarrier(void);
void * _ReturnAddress(void);

void _WriteBarrier(void);









void __addgsbyte(unsigned long, unsigned char);
void __addgsdword(unsigned long, unsigned long);
void __addgsqword(unsigned long, unsigned __int64);
void __addgsword(unsigned long, unsigned short);




void __code_seg(const char *);
void __cpuid(int[4], int);
void __cpuidex(int[4], int, int);
void __cdecl __debugbreak(void);

__int64 __emul(int, int);
unsigned __int64 __emulu(unsigned int, unsigned int);
__declspec(noreturn) void __fastfail(unsigned int);
void __faststorefence(void);
unsigned int __getcallerseflags(void);
void __halt(void);


unsigned char __inbyte(unsigned short);
void __inbytestring(unsigned short, unsigned char *, unsigned long);



void __incgsbyte(unsigned long);
void __incgsdword(unsigned long);
void __incgsqword(unsigned long);
void __incgsword(unsigned long);




unsigned long __indword(unsigned short);
void __indwordstring(unsigned short, unsigned long *, unsigned long);
void __int2c(void);
void __invlpg(void *);
unsigned short __inword(unsigned short);
void __inwordstring(unsigned short, unsigned short *, unsigned long);









void __lidt(void *);
unsigned __int64 __ll_lshift(unsigned __int64, int);
__int64 __ll_rshift(__int64, int);
unsigned int __lzcnt(unsigned int);
unsigned short __lzcnt16(unsigned short);
unsigned __int64 __lzcnt64(unsigned __int64);
void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);
void __movsq(unsigned long long *, unsigned long long const *, size_t);
void __movsw(unsigned short *, unsigned short const *, size_t);
__int64 __mulh(__int64, __int64);
void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned short, unsigned char);
void __outbytestring(unsigned short, unsigned char *, unsigned long);
void __outdword(unsigned short, unsigned long);
void __outdwordstring(unsigned short, unsigned long *, unsigned long);
void __outword(unsigned short, unsigned short);
void __outwordstring(unsigned short, unsigned short *, unsigned long);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);
unsigned __int64 __popcnt64(unsigned __int64);



unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int *);
unsigned __int64 __readcr0(void);

unsigned __int64 __readcr2(void);

unsigned __int64 __readcr3(void);

unsigned __int64 __readcr4(void);

unsigned __int64 __readcr8(void);

unsigned __int64 __readdr(unsigned int);

unsigned __int64 __readeflags(void);





unsigned char __readgsbyte(unsigned long);
unsigned long __readgsdword(unsigned long);
unsigned __int64 __readgsqword(unsigned long);
unsigned short __readgsword(unsigned long);
unsigned __int64 __readmsr(unsigned long);
unsigned __int64 __readpmc(unsigned long);




unsigned long __segmentlimit(unsigned long);

unsigned __int64 __shiftleft128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
void __sidt(void *);

void __stosb(unsigned char *, unsigned char, size_t);
void __stosd(unsigned long *, unsigned long, size_t);
void __stosq(unsigned __int64 *, unsigned __int64, size_t);
void __stosw(unsigned short *, unsigned short, size_t);
void __svm_clgi(void);
void __svm_invlpga(void *, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);





void __ud2(void);
unsigned __int64 __ull_rshift(unsigned __int64, int);
unsigned __int64 __umulh(unsigned __int64, unsigned __int64);
void __vmx_off(void);
unsigned char __vmx_on(unsigned __int64 *);
unsigned char __vmx_vmclear(unsigned __int64 *);
unsigned char __vmx_vmlaunch(void);
unsigned char __vmx_vmptrld(unsigned __int64 *);
void __vmx_vmptrst(unsigned __int64 *);
unsigned char __vmx_vmread(size_t, size_t *);
unsigned char __vmx_vmresume(void);
unsigned char __vmx_vmwrite(size_t, size_t);
void __wbinvd(void);


void __writecr0(unsigned __int64);

void __writecr3(unsigned __int64);

void __writecr4(unsigned __int64);

void __writecr8(unsigned __int64);

void __writedr(unsigned int, unsigned __int64);

void __writeeflags(unsigned __int64);





void __writegsbyte(unsigned long, unsigned char);
void __writegsdword(unsigned long, unsigned long);
void __writegsqword(unsigned long, unsigned __int64);
void __writegsword(unsigned long, unsigned short);
void __writemsr(unsigned long, unsigned __int64);





unsigned char _bittest(long const *, long);
unsigned char _bittest64(__int64 const *, __int64);
unsigned char _bittestandcomplement(long *, long);
unsigned char _bittestandcomplement64(__int64 *, __int64);
unsigned char _bittestandreset(long *, long);
unsigned char _bittestandreset64(__int64 *, __int64);
unsigned char _bittestandset(long *, long);
unsigned char _bittestandset64(__int64 *, __int64);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64);
  unsigned long __cdecl _byteswap_ulong(  unsigned long);
  unsigned short __cdecl _byteswap_ushort(  unsigned short);
void __cdecl _disable(void);
void __cdecl _enable(void);
unsigned char _interlockedbittestandreset(long volatile *, long);
unsigned char _interlockedbittestandreset64(__int64 volatile *, __int64);






unsigned char _interlockedbittestandset(long volatile *, long);
unsigned char _interlockedbittestandset64(__int64 volatile *, __int64);
















  unsigned long __cdecl _lrotl(  unsigned long,   int);
  unsigned long __cdecl _lrotr(  unsigned long,   int);




























































void _m_prefetch(void *);
void _m_prefetchw(volatile const void *);



































__m128i _mm_abs_epi16(__m128i);
__m128i _mm_abs_epi32(__m128i);
__m128i _mm_abs_epi8(__m128i);



__m128i _mm_add_epi16(__m128i, __m128i);
__m128i _mm_add_epi32(__m128i, __m128i);
__m128i _mm_add_epi64(__m128i, __m128i);
__m128i _mm_add_epi8(__m128i, __m128i);
__m128d _mm_add_pd(__m128d, __m128d);
__m128 _mm_add_ps(__m128, __m128);
__m128d _mm_add_sd(__m128d, __m128d);

__m128 _mm_add_ss(__m128, __m128);
__m128i _mm_adds_epi16(__m128i, __m128i);
__m128i _mm_adds_epi8(__m128i, __m128i);
__m128i _mm_adds_epu16(__m128i, __m128i);
__m128i _mm_adds_epu8(__m128i, __m128i);
__m128d _mm_addsub_pd(__m128d, __m128d);
__m128 _mm_addsub_ps(__m128, __m128);
__m128i _mm_alignr_epi8(__m128i, __m128i, int);

__m128d _mm_and_pd(__m128d, __m128d);
__m128 _mm_and_ps(__m128, __m128);
__m128i _mm_and_si128(__m128i, __m128i);
__m128d _mm_andnot_pd(__m128d, __m128d);
__m128 _mm_andnot_ps(__m128, __m128);
__m128i _mm_andnot_si128(__m128i, __m128i);
__m128i _mm_avg_epu16(__m128i, __m128i);
__m128i _mm_avg_epu8(__m128i, __m128i);
__m128i _mm_blend_epi16(__m128i, __m128i, int);
__m128d _mm_blend_pd(__m128d, __m128d, int);
__m128 _mm_blend_ps(__m128, __m128, int);
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i);
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d);
__m128 _mm_blendv_ps(__m128, __m128, __m128);
void _mm_clflush(void const *);
void _mm_clflushopt(void const *);
void _mm_clwb(void const *);
void _mm_clzero(void const *);
__m128i _mm_cmpeq_epi16(__m128i, __m128i);
__m128i _mm_cmpeq_epi32(__m128i, __m128i);
__m128i _mm_cmpeq_epi64(__m128i, __m128i);
__m128i _mm_cmpeq_epi8(__m128i, __m128i);
__m128d _mm_cmpeq_pd(__m128d, __m128d);
__m128 _mm_cmpeq_ps(__m128, __m128);
__m128d _mm_cmpeq_sd(__m128d, __m128d);
__m128 _mm_cmpeq_ss(__m128, __m128);
int _mm_cmpestra(__m128i, int, __m128i, int, int);
int _mm_cmpestrc(__m128i, int, __m128i, int, int);
int _mm_cmpestri(__m128i, int, __m128i, int, int);
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int);
int _mm_cmpestro(__m128i, int, __m128i, int, int);
int _mm_cmpestrs(__m128i, int, __m128i, int, int);
int _mm_cmpestrz(__m128i, int, __m128i, int, int);
__m128d _mm_cmpge_pd(__m128d, __m128d);
__m128 _mm_cmpge_ps(__m128, __m128);
__m128d _mm_cmpge_sd(__m128d, __m128d);
__m128 _mm_cmpge_ss(__m128, __m128);
__m128i _mm_cmpgt_epi16(__m128i, __m128i);
__m128i _mm_cmpgt_epi32(__m128i, __m128i);
__m128i _mm_cmpgt_epi64(__m128i, __m128i);
__m128i _mm_cmpgt_epi8(__m128i, __m128i);
__m128d _mm_cmpgt_pd(__m128d, __m128d);
__m128 _mm_cmpgt_ps(__m128, __m128);
__m128d _mm_cmpgt_sd(__m128d, __m128d);
__m128 _mm_cmpgt_ss(__m128, __m128);
int _mm_cmpistra(__m128i, __m128i, int);
int _mm_cmpistrc(__m128i, __m128i, int);
int _mm_cmpistri(__m128i, __m128i, int);
__m128i _mm_cmpistrm(__m128i, __m128i, int);
int _mm_cmpistro(__m128i, __m128i, int);
int _mm_cmpistrs(__m128i, __m128i, int);
int _mm_cmpistrz(__m128i, __m128i, int);
__m128d _mm_cmple_pd(__m128d, __m128d);
__m128 _mm_cmple_ps(__m128, __m128);
__m128d _mm_cmple_sd(__m128d, __m128d);
__m128 _mm_cmple_ss(__m128, __m128);
__m128i _mm_cmplt_epi16(__m128i, __m128i);
__m128i _mm_cmplt_epi32(__m128i, __m128i);
__m128i _mm_cmplt_epi8(__m128i, __m128i);
__m128d _mm_cmplt_pd(__m128d, __m128d);
__m128 _mm_cmplt_ps(__m128, __m128);
__m128d _mm_cmplt_sd(__m128d, __m128d);
__m128 _mm_cmplt_ss(__m128, __m128);
__m128d _mm_cmpneq_pd(__m128d, __m128d);
__m128 _mm_cmpneq_ps(__m128, __m128);
__m128d _mm_cmpneq_sd(__m128d, __m128d);
__m128 _mm_cmpneq_ss(__m128, __m128);
__m128d _mm_cmpnge_pd(__m128d, __m128d);
__m128 _mm_cmpnge_ps(__m128, __m128);
__m128d _mm_cmpnge_sd(__m128d, __m128d);
__m128 _mm_cmpnge_ss(__m128, __m128);
__m128d _mm_cmpngt_pd(__m128d, __m128d);
__m128 _mm_cmpngt_ps(__m128, __m128);
__m128d _mm_cmpngt_sd(__m128d, __m128d);
__m128 _mm_cmpngt_ss(__m128, __m128);
__m128d _mm_cmpnle_pd(__m128d, __m128d);
__m128 _mm_cmpnle_ps(__m128, __m128);
__m128d _mm_cmpnle_sd(__m128d, __m128d);
__m128 _mm_cmpnle_ss(__m128, __m128);
__m128d _mm_cmpnlt_pd(__m128d, __m128d);
__m128 _mm_cmpnlt_ps(__m128, __m128);
__m128d _mm_cmpnlt_sd(__m128d, __m128d);
__m128 _mm_cmpnlt_ss(__m128, __m128);
__m128d _mm_cmpord_pd(__m128d, __m128d);
__m128 _mm_cmpord_ps(__m128, __m128);
__m128d _mm_cmpord_sd(__m128d, __m128d);
__m128 _mm_cmpord_ss(__m128, __m128);
__m128d _mm_cmpunord_pd(__m128d, __m128d);
__m128 _mm_cmpunord_ps(__m128, __m128);
__m128d _mm_cmpunord_sd(__m128d, __m128d);
__m128 _mm_cmpunord_ss(__m128, __m128);
int _mm_comieq_sd(__m128d, __m128d);
int _mm_comieq_ss(__m128, __m128);
int _mm_comige_sd(__m128d, __m128d);
int _mm_comige_ss(__m128, __m128);
int _mm_comigt_sd(__m128d, __m128d);
int _mm_comigt_ss(__m128, __m128);
int _mm_comile_sd(__m128d, __m128d);
int _mm_comile_ss(__m128, __m128);
int _mm_comilt_sd(__m128d, __m128d);
int _mm_comilt_ss(__m128, __m128);
int _mm_comineq_sd(__m128d, __m128d);
int _mm_comineq_ss(__m128, __m128);
unsigned int _mm_crc32_u16(unsigned int, unsigned short);
unsigned int _mm_crc32_u32(unsigned int, unsigned int);
unsigned __int64 _mm_crc32_u64(unsigned __int64, unsigned __int64);
unsigned int _mm_crc32_u8(unsigned int, unsigned char);


__m128 _mm_cvt_si2ss(__m128, int);
int _mm_cvt_ss2si(__m128);
__m128i _mm_cvtepi16_epi32(__m128i);
__m128i _mm_cvtepi16_epi64(__m128i);
__m128i _mm_cvtepi32_epi64(__m128i);
__m128d _mm_cvtepi32_pd(__m128i);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtepi8_epi16(__m128i);
__m128i _mm_cvtepi8_epi32(__m128i);
__m128i _mm_cvtepi8_epi64(__m128i);
__m128i _mm_cvtepu16_epi32(__m128i);
__m128i _mm_cvtepu16_epi64(__m128i);
__m128i _mm_cvtepu32_epi64(__m128i);
__m128i _mm_cvtepu8_epi16(__m128i);
__m128i _mm_cvtepu8_epi32(__m128i);
__m128i _mm_cvtepu8_epi64(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);

__m128 _mm_cvtpd_ps(__m128d);

__m128i _mm_cvtps_epi32(__m128);
__m128d _mm_cvtps_pd(__m128);
int _mm_cvtsd_si32(__m128d);
__int64 _mm_cvtsd_si64(__m128d);
__int64 _mm_cvtsd_si64x(__m128d);
__m128 _mm_cvtsd_ss(__m128, __m128d);
int _mm_cvtsi128_si32(__m128i);
__int64 _mm_cvtsi128_si64(__m128i);
__int64 _mm_cvtsi128_si64x(__m128i);
__m128d _mm_cvtsi32_sd(__m128d, int);
__m128i _mm_cvtsi32_si128(int);
__m128d _mm_cvtsi64_sd(__m128d, __int64);
__m128i _mm_cvtsi64_si128(__int64);
__m128 _mm_cvtsi64_ss(__m128, __int64);
__m128d _mm_cvtsi64x_sd(__m128d, __int64);
__m128i _mm_cvtsi64x_si128(__int64);
__m128 _mm_cvtsi64x_ss(__m128, __int64);
__m128d _mm_cvtss_sd(__m128d, __m128);
__int64 _mm_cvtss_si64(__m128);
__int64 _mm_cvtss_si64x(__m128);

int _mm_cvtt_ss2si(__m128);
__m128i _mm_cvttpd_epi32(__m128d);

__m128i _mm_cvttps_epi32(__m128);
int _mm_cvttsd_si32(__m128d);
__int64 _mm_cvttsd_si64(__m128d);
__int64 _mm_cvttsd_si64x(__m128d);
__int64 _mm_cvttss_si64(__m128);
__int64 _mm_cvttss_si64x(__m128);
__m128d _mm_div_pd(__m128d, __m128d);
__m128 _mm_div_ps(__m128, __m128);
__m128d _mm_div_sd(__m128d, __m128d);
__m128 _mm_div_ss(__m128, __m128);
__m128d _mm_dp_pd(__m128d, __m128d, int);
__m128 _mm_dp_ps(__m128, __m128, int);
int _mm_extract_epi16(__m128i, int);
int _mm_extract_epi32(__m128i, int);
__int64 _mm_extract_epi64(__m128i, int);
int _mm_extract_epi8(__m128i, int);
int _mm_extract_ps(__m128, int);
__m128i _mm_extract_si64(__m128i, __m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
unsigned int _mm_getcsr(void);
__m128i _mm_hadd_epi16(__m128i, __m128i);
__m128i _mm_hadd_epi32(__m128i, __m128i);
__m128d _mm_hadd_pd(__m128d, __m128d);


__m128 _mm_hadd_ps(__m128, __m128);
__m128i _mm_hadds_epi16(__m128i, __m128i);

__m128i _mm_hsub_epi16(__m128i, __m128i);
__m128i _mm_hsub_epi32(__m128i, __m128i);
__m128d _mm_hsub_pd(__m128d, __m128d);


__m128 _mm_hsub_ps(__m128, __m128);
__m128i _mm_hsubs_epi16(__m128i, __m128i);

__m128i _mm_insert_epi16(__m128i, int, int);
__m128i _mm_insert_epi32(__m128i, int, int);
__m128i _mm_insert_epi64(__m128i, __int64, int);
__m128i _mm_insert_epi8(__m128i, int, int);
__m128 _mm_insert_ps(__m128, __m128, int);
__m128i _mm_insert_si64(__m128i, __m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
__m128i _mm_lddqu_si128(__m128i const *);
void _mm_lfence(void);
__m128d _mm_load1_pd(double const *);
__m128d _mm_load_pd(double const *);
__m128 _mm_load_ps(float const *);
__m128 _mm_load_ps1(float const *);
__m128d _mm_load_sd(double const *);
__m128i _mm_load_si128(__m128i const *);
__m128 _mm_load_ss(float const *);
__m128d _mm_loaddup_pd(double const *);
__m128d _mm_loadh_pd(__m128d, double const *);
__m128 _mm_loadh_pi(__m128, __m64 const *);
__m128i _mm_loadl_epi64(__m128i const *);
__m128d _mm_loadl_pd(__m128d, double const *);
__m128 _mm_loadl_pi(__m128, __m64 const *);
__m128d _mm_loadr_pd(double const *);
__m128 _mm_loadr_ps(float const *);
__m128d _mm_loadu_pd(double const *);
__m128 _mm_loadu_ps(float const *);
__m128i _mm_loadu_si128(__m128i const *);
__m128i _mm_madd_epi16(__m128i, __m128i);
__m128i _mm_maddubs_epi16(__m128i, __m128i);

void _mm_maskmoveu_si128(__m128i, __m128i, char *);
__m128i _mm_max_epi16(__m128i, __m128i);
__m128i _mm_max_epi32(__m128i, __m128i);
__m128i _mm_max_epi8(__m128i, __m128i);
__m128i _mm_max_epu16(__m128i, __m128i);
__m128i _mm_max_epu32(__m128i, __m128i);
__m128i _mm_max_epu8(__m128i, __m128i);
__m128d _mm_max_pd(__m128d, __m128d);
__m128 _mm_max_ps(__m128, __m128);
__m128d _mm_max_sd(__m128d, __m128d);
__m128 _mm_max_ss(__m128, __m128);
void _mm_mfence(void);
__m128i _mm_min_epi16(__m128i, __m128i);
__m128i _mm_min_epi32(__m128i, __m128i);
__m128i _mm_min_epi8(__m128i, __m128i);
__m128i _mm_min_epu16(__m128i, __m128i);
__m128i _mm_min_epu32(__m128i, __m128i);
__m128i _mm_min_epu8(__m128i, __m128i);
__m128d _mm_min_pd(__m128d, __m128d);
__m128 _mm_min_ps(__m128, __m128);
__m128d _mm_min_sd(__m128d, __m128d);
__m128 _mm_min_ss(__m128, __m128);
__m128i _mm_minpos_epu16(__m128i);
void _mm_monitor(void const *, unsigned int, unsigned int);
__m128i _mm_move_epi64(__m128i);
__m128d _mm_move_sd(__m128d, __m128d);
__m128 _mm_move_ss(__m128, __m128);
__m128d _mm_movedup_pd(__m128d);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_movehl_ps(__m128, __m128);
__m128 _mm_moveldup_ps(__m128);
__m128 _mm_movelh_ps(__m128, __m128);
int _mm_movemask_epi8(__m128i);
int _mm_movemask_pd(__m128d);
int _mm_movemask_ps(__m128);


__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int);
__m128i _mm_mul_epi32(__m128i, __m128i);
__m128i _mm_mul_epu32(__m128i, __m128i);
__m128d _mm_mul_pd(__m128d, __m128d);
__m128 _mm_mul_ps(__m128, __m128);
__m128d _mm_mul_sd(__m128d, __m128d);
__m128 _mm_mul_ss(__m128, __m128);

__m128i _mm_mulhi_epi16(__m128i, __m128i);
__m128i _mm_mulhi_epu16(__m128i, __m128i);
__m128i _mm_mulhrs_epi16(__m128i, __m128i);

__m128i _mm_mullo_epi16(__m128i, __m128i);
__m128i _mm_mullo_epi32(__m128i, __m128i);
void _mm_mwait(unsigned int, unsigned int);
__m128d _mm_or_pd(__m128d, __m128d);
__m128 _mm_or_ps(__m128, __m128);
__m128i _mm_or_si128(__m128i, __m128i);
__m128i _mm_packs_epi16(__m128i, __m128i);
__m128i _mm_packs_epi32(__m128i, __m128i);
__m128i _mm_packus_epi16(__m128i, __m128i);
__m128i _mm_packus_epi32(__m128i, __m128i);
void _mm_pause(void);
int _mm_popcnt_u32(unsigned int);
__int64 _mm_popcnt_u64(unsigned __int64);
void _mm_prefetch(char const *, int);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128d _mm_round_pd(__m128d, int);
__m128 _mm_round_ps(__m128, int);
__m128d _mm_round_sd(__m128d, __m128d, int);
__m128 _mm_round_ss(__m128, __m128, int);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128i _mm_sad_epu8(__m128i, __m128i);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi32(int);

__m128i _mm_set1_epi64x(__int64);
__m128i _mm_set1_epi8(char);
__m128d _mm_set1_pd(double);



__m128i _mm_set_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_set_epi32(int, int, int, int);

__m128i _mm_set_epi64x(__int64, __int64);
__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_set_pd(double, double);



__m128 _mm_set_ps(float, float, float, float);
__m128 _mm_set_ps1(float);
__m128d _mm_set_sd(double);
__m128 _mm_set_ss(float);
void _mm_setcsr(unsigned int);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_setr_epi32(int, int, int, int);

__m128i _mm_setr_epi64x(__int64, __int64);
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_setr_pd(double, double);



__m128 _mm_setr_ps(float, float, float, float);
__m128d _mm_setzero_pd(void);
__m128 _mm_setzero_ps(void);
__m128i _mm_setzero_si128(void);

void _mm_sfence(void);
__m128i _mm_shuffle_epi32(__m128i, int);
__m128i _mm_shuffle_epi8(__m128i, __m128i);
__m128d _mm_shuffle_pd(__m128d, __m128d, int);

__m128 _mm_shuffle_ps(__m128, __m128, unsigned int);
__m128i _mm_shufflehi_epi16(__m128i, int);
__m128i _mm_shufflelo_epi16(__m128i, int);
__m128i _mm_sign_epi16(__m128i, __m128i);
__m128i _mm_sign_epi32(__m128i, __m128i);
__m128i _mm_sign_epi8(__m128i, __m128i);



__m128i _mm_sll_epi16(__m128i, __m128i);
__m128i _mm_sll_epi32(__m128i, __m128i);
__m128i _mm_sll_epi64(__m128i, __m128i);
__m128i _mm_slli_epi16(__m128i, int);
__m128i _mm_slli_epi32(__m128i, int);
__m128i _mm_slli_epi64(__m128i, int);
__m128i _mm_slli_si128(__m128i, int);
__m128d _mm_sqrt_pd(__m128d);
__m128 _mm_sqrt_ps(__m128);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128 _mm_sqrt_ss(__m128);
__m128i _mm_sra_epi16(__m128i, __m128i);
__m128i _mm_sra_epi32(__m128i, __m128i);
__m128i _mm_srai_epi16(__m128i, int);
__m128i _mm_srai_epi32(__m128i, int);
__m128i _mm_srl_epi16(__m128i, __m128i);
__m128i _mm_srl_epi32(__m128i, __m128i);
__m128i _mm_srl_epi64(__m128i, __m128i);
__m128i _mm_srli_epi16(__m128i, int);
__m128i _mm_srli_epi32(__m128i, int);
__m128i _mm_srli_epi64(__m128i, int);
__m128i _mm_srli_si128(__m128i, int);
void _mm_store1_pd(double *, __m128d);
void _mm_store_pd(double *, __m128d);
void _mm_store_ps(float *, __m128);
void _mm_store_ps1(float *, __m128);
void _mm_store_sd(double *, __m128d);
void _mm_store_si128(__m128i *, __m128i);
void _mm_store_ss(float *, __m128);
void _mm_storeh_pd(double *, __m128d);
void _mm_storeh_pi(__m64 *, __m128);
void _mm_storel_epi64(__m128i *, __m128i);
void _mm_storel_pd(double *, __m128d);
void _mm_storel_pi(__m64 *, __m128);
void _mm_storer_pd(double *, __m128d);
void _mm_storer_ps(float *, __m128);
void _mm_storeu_pd(double *, __m128d);
void _mm_storeu_ps(float *, __m128);
void _mm_storeu_si128(__m128i *, __m128i);
__m128i _mm_stream_load_si128(const __m128i *);
void _mm_stream_pd(double *, __m128d);

void _mm_stream_ps(float *, __m128);
void _mm_stream_sd(double *, __m128d);
void _mm_stream_si128(__m128i *, __m128i);
void _mm_stream_si32(int *, int);
void _mm_stream_si64x(__int64 *, __int64);
void _mm_stream_ss(float *, __m128);
__m128i _mm_sub_epi16(__m128i, __m128i);
__m128i _mm_sub_epi32(__m128i, __m128i);
__m128i _mm_sub_epi64(__m128i, __m128i);
__m128i _mm_sub_epi8(__m128i, __m128i);
__m128d _mm_sub_pd(__m128d, __m128d);
__m128 _mm_sub_ps(__m128, __m128);
__m128d _mm_sub_sd(__m128d, __m128d);

__m128 _mm_sub_ss(__m128, __m128);
__m128i _mm_subs_epi16(__m128i, __m128i);
__m128i _mm_subs_epi8(__m128i, __m128i);
__m128i _mm_subs_epu16(__m128i, __m128i);
__m128i _mm_subs_epu8(__m128i, __m128i);
int _mm_testc_si128(__m128i, __m128i);
int _mm_testnzc_si128(__m128i, __m128i);
int _mm_testz_si128(__m128i, __m128i);
int _mm_ucomieq_sd(__m128d, __m128d);
int _mm_ucomieq_ss(__m128, __m128);
int _mm_ucomige_sd(__m128d, __m128d);
int _mm_ucomige_ss(__m128, __m128);
int _mm_ucomigt_sd(__m128d, __m128d);
int _mm_ucomigt_ss(__m128, __m128);
int _mm_ucomile_sd(__m128d, __m128d);
int _mm_ucomile_ss(__m128, __m128);
int _mm_ucomilt_sd(__m128d, __m128d);
int _mm_ucomilt_ss(__m128, __m128);
int _mm_ucomineq_sd(__m128d, __m128d);
int _mm_ucomineq_ss(__m128, __m128);
__m128i _mm_unpackhi_epi16(__m128i, __m128i);
__m128i _mm_unpackhi_epi32(__m128i, __m128i);
__m128i _mm_unpackhi_epi64(__m128i, __m128i);
__m128i _mm_unpackhi_epi8(__m128i, __m128i);
__m128d _mm_unpackhi_pd(__m128d, __m128d);
__m128 _mm_unpackhi_ps(__m128, __m128);
__m128i _mm_unpacklo_epi16(__m128i, __m128i);
__m128i _mm_unpacklo_epi32(__m128i, __m128i);
__m128i _mm_unpacklo_epi64(__m128i, __m128i);
__m128i _mm_unpacklo_epi8(__m128i, __m128i);
__m128d _mm_unpacklo_pd(__m128d, __m128d);
__m128 _mm_unpacklo_ps(__m128, __m128);
__m128d _mm_xor_pd(__m128d, __m128d);
__m128 _mm_xor_ps(__m128, __m128);
__m128i _mm_xor_si128(__m128i, __m128i);
__int64 _mul128(__int64 _Multiplier, __int64 _Multiplicand, __int64 * _HighProduct);
unsigned int __cdecl _rotl(  unsigned int _Value,   int _Shift);
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotl64(  unsigned __int64 _Value,   int _Shift);
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift);
unsigned int __cdecl _rotr(  unsigned int _Value,   int _Shift);
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotr64(  unsigned __int64 _Value,   int _Shift);
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift);
int __cdecl _setjmp(jmp_buf);
int __cdecl _setjmpex(jmp_buf);
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct);
void _rsm(void);
void _lgdt(void *);
void _sgdt(void *);
void _clac(void);
void _stac(void);
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *);
unsigned char __cdecl _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *);
void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);


}






   

   


  








 
 #pragma warning(pop)
 #pragma pack(pop)










 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4700)

namespace std {
		
template<class _Ty> inline
	pair<_Ty *, ptrdiff_t>
		get_temporary_buffer(ptrdiff_t _Count) noexcept
	{	
	_Ty *_Pbuf;

	if (_Count < 0)
		_Count = 0;
	else if (((size_t)(-1) / sizeof (_Ty) < _Count))
		_Xbad_alloc();	
	for (_Pbuf = 0; 0 < _Count; _Count /= 2)
		if ((_Pbuf = (_Ty *)operator new(
			(size_t)_Count * sizeof (_Ty), nothrow)) != 0)
			break;

	return (pair<_Ty *, ptrdiff_t>(_Pbuf, _Count));
	}

		
template<class _Ty> inline
	void return_temporary_buffer(_Ty *_Pbuf)
	{	
	operator delete(_Pbuf);
	}

		
template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_unchecked1(_InIt _First, _InIt _Last,
		_FwdIt _Dest, _General_ptr_iterator_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, (void)++_First)
		_Construct(_Unfancy(_Dest), *_First);
	} catch (...) {
	_Destroy_range(_Next, _Dest);
	throw;
	}

	return (_Dest);
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_unchecked1(_InIt _First, _InIt _Last,
		_FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_unchecked(_InIt _First, _InIt _Last,
		_FwdIt _Dest)
	{	
	return (_Uninitialized_copy_unchecked1(_First, _Last,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy1(_InIt _First, _InIt _Last,
		_FwdIt _Dest, input_iterator_tag, forward_iterator_tag)
	{	
	return (_Rechecked(_Dest,
		_Uninitialized_copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy1(_InIt _First, _InIt _Last,
		_FwdIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Uninitialized_copy_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt uninitialized_copy(_InIt _First, _InIt _Last,
		_FwdIt _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	;
	return (_Uninitialized_copy1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_FwdIt>()));
	}

 












		
template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n_unchecked1(_InIt _First, _Diff _Count,
		_FwdIt _Dest, _General_ptr_iterator_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
		_Construct(_Unfancy(_Dest), *_First);
	} catch (...) {
	_Destroy_range(_Next, _Dest);
	throw;
	}

	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n_unchecked1(_InIt _First, _Diff _Count,
		_FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
	{	
	if (0 < _Count)
		return (_Copy_memmove(_First, _First + _Count, _Dest));
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n_unchecked(_InIt _First, _Diff _Count,
		_FwdIt _Dest)
	{	
	return (_Uninitialized_copy_n_unchecked1(_First, _Count,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest)
	{	
		
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Rechecked(_Dest,
		_Uninitialized_copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Unchecked_n(_Dest, _Count))));
	}

 







































		
template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_copy_al_unchecked1(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al, _General_ptr_iterator_tag, _Any_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, (void)++_First)
		_Al.construct(_Unfancy(_Dest), *_First);
	} catch (...) {
	_Destroy_range(_Next, _Dest, _Al);
	throw;
	}

	return (_Dest);
	}

template<class _Ty1,
	class _Ty2,
	class _Alloc> inline
	_Ty2 *_Uninitialized_copy_al_unchecked1(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
		_Wrap_alloc<_Alloc>&, _Really_trivial_ptr_iterator_tag, true_type)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_copy_al_unchecked(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al)
	{	
	return (_Uninitialized_copy_al_unchecked1(_First, _Last, _Dest, _Al,
		_Ptr_copy_cat(_First, _Dest),
		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), decltype(*_First)>()));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al)
	{	
		
		
	return (_Rechecked(_Dest,
		_Uninitialized_copy_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest), _Al)));
	}

		
template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_move_al_unchecked1(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al, _General_ptr_iterator_tag, _Any_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, (void)++_First)
		_Al.construct(_Unfancy(_Dest), ::std:: move(*_First));
	} catch (...) {
	_Destroy_range(_Next, _Dest, _Al);
	throw;
	}

	return (_Dest);
	}

template<class _Ty1,
	class _Ty2,
	class _Alloc> inline
	_Ty2 *_Uninitialized_move_al_unchecked1(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
		_Wrap_alloc<_Alloc>&, _Really_trivial_ptr_iterator_tag, true_type)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_move_al_unchecked(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al)
	{	
	typedef decltype(::std:: move(*_First)) _Src_type; 
	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,
		_Ptr_move_cat(_First, _Dest),
		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), _Src_type>()));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al)
	{	
		
		
	return (_Rechecked(_Dest,
		_Uninitialized_move_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest), _Al)));
	}

		
template<class _FwdIt,
	class _Tval> inline
	void _Uninitialized_fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Tval& _Val, false_type)
	{	
	_FwdIt _Next = _First;

	try {
	for (; _First != _Last; ++_First)
		_Construct(_Unfancy(_First), _Val);
	} catch (...) {
	_Destroy_range(_Next, _First);
	throw;
	}
	}

template<class _FwdIt,
	class _Tval> inline
	void _Uninitialized_fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Tval& _Val, true_type)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

template<class _FwdIt,
	class _Tval> inline
	void _Uninitialized_fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
	{	
	_Uninitialized_fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
	}

template<class _FwdIt,
	class _Tval> inline
	void uninitialized_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
	{	
	;
	_Uninitialized_fill_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val);
	}

		
template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt _Uninitialized_fill_n_unchecked1(_FwdIt _First, _Diff _Count, const _Tval& _Val, false_type)
	{	
	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, (void)++_First)
		_Construct(_Unfancy(_First), _Val);
	} catch (...) {
	_Destroy_range(_Next, _First);
	throw;
	}

	return (_First);
	}

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt _Uninitialized_fill_n_unchecked1(_FwdIt _First, _Diff _Count, const _Tval& _Val, true_type)
	{	
	if (0 < _Count)
		{
		:: memset(_First, _Val, _Count);
		return (_First + _Count);
		}

	return (_First);
	}

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt _Uninitialized_fill_n_unchecked(_FwdIt _First, _Diff _Count, const _Tval& _Val)
	{	
	return (_Uninitialized_fill_n_unchecked1(_First, _Count, _Val, _Fill_memset_is_safe(_First, _Val)));
	}

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt uninitialized_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval& _Val)
	{	
	return (_Rechecked(_First,
		_Uninitialized_fill_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Val)));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	void _Uninit_alloc_fill_n1(_FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt> * _Pval,
		_Wrap_alloc<_Alloc>& _Al, false_type)
	{	
	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, (void)++_First)
		_Al.construct(_Unfancy(_First), *_Pval);
	} catch (...) {
	_Destroy_range(_Next, _First, _Al);
	throw;
	}
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	void _Uninit_alloc_fill_n1(_FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt> * _Pval,
		_Wrap_alloc<_Alloc>&, true_type)
	{	
	:: memset(_First, *_Pval, _Count);
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	void _Uninitialized_fill_n(_FwdIt _First, _Diff _Count,
		const _Iter_value_t<_FwdIt> * _Pval, _Wrap_alloc<_Alloc>& _Al)
	{	
	_Uninit_alloc_fill_n1(_First, _Count, _Pval, _Al,
		typename conjunction<decltype(_Fill_memset_is_safe(_First, *_Pval)),
			_Uses_default_construct<_Alloc, decltype(_Unfancy(_First)), decltype(*_Pval)>>::type());
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	void _Uninitialized_default_fill_n1(_FwdIt _First, _Diff _Count,
		_Wrap_alloc<_Alloc>& _Al, false_type)
	{	
	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, (void)++_First)
		_Al.construct(_Unfancy(_First));
	} catch (...) {
	_Destroy_range(_Next, _First, _Al);
	throw;
	}
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	void _Uninitialized_default_fill_n1(_FwdIt _First, _Diff _Count,
		_Wrap_alloc<_Alloc>&, true_type)
	{	
	:: memset(_First, 0, _Count * sizeof(_Iter_value_t<_FwdIt>));
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	void _Uninitialized_default_fill_n(_FwdIt _First, _Diff _Count,
		_Wrap_alloc<_Alloc>& _Al)
	{	
	typedef _Iter_value_t<_FwdIt> _Ty;
	_Uninitialized_default_fill_n1(_First, _Count, _Al,
		typename conjunction<
			is_pointer<_FwdIt>,
			is_scalar<_Ty>,
			negation<is_volatile<_Ty>>,
			negation<is_member_pointer<_Ty>>,
			_Uses_default_construct<_Alloc, decltype(_Unfancy(_First))>>::type());
	}

		
template<class _OutIt,
	class _Ty>
	class raw_storage_iterator
		: public _Outit
	{	
public:
	explicit raw_storage_iterator(_OutIt _First)
		: _Next(_First)
		{	
		}

	raw_storage_iterator& operator*()
		{	
		return (*this);
		}

	raw_storage_iterator& operator=(const _Ty& _Val)
		{	
		_Construct(_Unfancy(_Next), _Val);
		return (*this);
		}

	raw_storage_iterator& operator=(_Ty&& _Val)
		{	
		_Construct(_Unfancy(_Next), ::std:: move(_Val));
		return (*this);
		}

	raw_storage_iterator& operator++()
		{	
		++_Next;
		return (*this);
		}

	raw_storage_iterator operator++(int)
		{	
		raw_storage_iterator _Ans = *this;
		++_Next;
		return (_Ans);
		}

	_OutIt base() const
		{	
		return (_Next);
		}

private:
	_OutIt _Next;	
	};

		
template<class _Ty>
	class _Temp_iterator
		: public _Outit
	{	
public:
	typedef _Ty *_Pty;

	_Temp_iterator(ptrdiff_t _Count = 0)
		{	
		_Buf._Begin = 0;
		_Buf._Current = 0;
		_Buf._Hiwater = 0;
		_Buf._Size = _Count;	
		_Pbuf = &_Buf;
		}

	_Temp_iterator(const _Temp_iterator& _Right)
		{	
		_Buf._Begin = 0;	
		_Buf._Current = 0;
		_Buf._Hiwater = 0;
		_Buf._Size = 0;
		*this = _Right;
		}

	~_Temp_iterator() noexcept
		{	
		if (_Buf._Begin != 0)
			{	
			for (_Pty _Next = _Buf._Begin;
				_Next != _Buf._Hiwater; ++_Next)
				_Destroy(_Next);
			::std:: return_temporary_buffer(_Buf._Begin);
			}
		}

	_Temp_iterator& operator=(const _Temp_iterator& _Right)
		{	
		_Pbuf = _Right._Pbuf;
		return (*this);
		}

	_Temp_iterator& operator=(const _Ty& _Val)
		{	
		if (_Pbuf->_Current < _Pbuf->_Hiwater)
			*_Pbuf->_Current++ = _Val;	
		else
			{	
			_Pty _Ptr = _Pbuf->_Current;
			_Construct(_Ptr, _Val);
			_Pbuf->_Hiwater = ++_Pbuf->_Current;
			}

		return (*this);
		}

	_Temp_iterator& operator=(_Ty&& _Val)
		{	
		if (_Pbuf->_Current < _Pbuf->_Hiwater)
			*_Pbuf->_Current++ =
				::std:: forward<_Ty>(_Val);	
		else
			{	
			_Pty _Ptr = _Pbuf->_Current;
			_Construct(_Ptr, ::std:: forward<_Ty>(_Val));
			_Pbuf->_Hiwater = ++_Pbuf->_Current;
			}

		return (*this);
		}

	_Temp_iterator& operator*()
		{	
		return (*this);
		}

	_Temp_iterator& operator++()
		{	
		return (*this);
		}

	_Temp_iterator& operator++(int)
		{	
		return (*this);
		}

	_Temp_iterator& _Init()
		{	
		_Pbuf->_Current = _Pbuf->_Begin;
		return (*this);
		}

	_Pty _First() const
		{	
		return (_Pbuf->_Begin);
		}

	_Pty _Last() const
		{	
		return (_Pbuf->_Current);
		}

	ptrdiff_t _Maxlen()
		{	
		if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)
			{	
			pair<_Pty, ptrdiff_t> _Pair =

				::std:: get_temporary_buffer<_Ty>(_Pbuf->_Size);

			_Pbuf->_Begin = _Pair.first;
			_Pbuf->_Current = _Pair.first;
			_Pbuf->_Hiwater = _Pair.first;
			_Pbuf->_Size = _Pair.second;
			}

		return (_Pbuf->_Size);
		}

private:
	struct _Bufpar
		{	
		_Pty _Begin;	
		_Pty _Current;	
		_Pty _Hiwater;	
		ptrdiff_t _Size;	
		};
	_Bufpar _Buf;	
	_Bufpar *_Pbuf;	
	};

 
		
template<class _Ty>
	class auto_ptr;

template<class _Ty>
	struct auto_ptr_ref
		{	
	explicit auto_ptr_ref(_Ty *_Right)
		: _Ref(_Right)
		{	
		}

	_Ty *_Ref;	
	};

template<class _Ty>
	class auto_ptr
		{	
public:
	typedef auto_ptr<_Ty> _Myt;
	typedef _Ty element_type;

	explicit auto_ptr(_Ty *_Ptr = 0) noexcept
		: _Myptr(_Ptr)
		{	
		}

	auto_ptr(_Myt& _Right) noexcept
		: _Myptr(_Right.release())
		{	
		}

	auto_ptr(auto_ptr_ref<_Ty> _Right) noexcept
		{	
		_Ty *_Ptr = _Right._Ref;
		_Right._Ref = 0;	
		_Myptr = _Ptr;	
		}

	template<class _Other>
		operator auto_ptr<_Other>() noexcept
		{	
		return (auto_ptr<_Other>(*this));
		}

	template<class _Other>
		operator auto_ptr_ref<_Other>() noexcept
		{	
		_Other *_Cvtptr = _Myptr;	
		auto_ptr_ref<_Other> _Ans(_Cvtptr);
		_Myptr = 0;	
		return (_Ans);
		}

	template<class _Other>
		_Myt& operator=(auto_ptr<_Other>& _Right) noexcept
		{	
		reset(_Right.release());
		return (*this);
		}

	template<class _Other>
		auto_ptr(auto_ptr<_Other>& _Right) noexcept
		: _Myptr(_Right.release())
		{	
		}

	_Myt& operator=(_Myt& _Right) noexcept
		{	
		reset(_Right.release());
		return (*this);
		}

	_Myt& operator=(auto_ptr_ref<_Ty> _Right) noexcept
		{	
		_Ty *_Ptr = _Right._Ref;
		_Right._Ref = 0;	
		reset(_Ptr);	
		return (*this);
		}

	~auto_ptr() noexcept
		{	
		delete _Myptr;
		}

	_Ty& operator*() const noexcept
		{	
 




		return (*get());
		}

	_Ty *operator->() const noexcept
		{	
 




		return (get());
		}

	_Ty *get() const noexcept
		{	
		return (_Myptr);
		}

	_Ty *release() noexcept
		{	
		_Ty *_Tmp = _Myptr;
		_Myptr = 0;
		return (_Tmp);
		}

	void reset(_Ty *_Ptr = 0)
		{	
		if (_Ptr != _Myptr)
			delete _Myptr;
		_Myptr = _Ptr;
		}

private:
	_Ty *_Myptr;	
	};
 
}

 
 #pragma warning(pop)
 #pragma pack(pop)










#pragma once






#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
 #pragma warning(disable: 4127)

  #pragma warning(disable: 4251)

template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Ax = allocator<_Elem> >
	class basic_string;

		
template<class _Mystr>
	class _String_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			typename _Mystr::value_type,
			typename _Mystr::difference_type,
			typename _Mystr::const_pointer,
			typename _Mystr::const_reference,
			_Iterator_base>
	{	
public:
	typedef _String_const_iterator<_Mystr> _Myiter;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Mystr::value_type value_type;
	typedef typename _Mystr::difference_type difference_type;
	typedef typename _Mystr::const_pointer pointer;
	typedef typename _Mystr::const_reference reference;

	_String_const_iterator()
		: _Ptr()
		{	
		}

	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
		: _Ptr(_Parg)
		{	
		this->_Adopt(_Pstring);
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Ptr);
		}

	reference operator*() const
		{	
 



















		;

		return (*_Ptr);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
 
















		++_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
 
















		--_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
 


























		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

 
















	void _Compat(const _Myiter&) const
		{	
		}
 

	pointer _Ptr;	
	};

template<class _Mystr> inline
	typename _String_const_iterator<_Mystr>::_Unchecked_type
		_Unchecked(_String_const_iterator<_Mystr> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Mystr> inline
	_String_const_iterator<_Mystr>
		_Rechecked(_String_const_iterator<_Mystr>& _Iter,
			typename _String_const_iterator<_Mystr>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Mystr> inline
	_String_const_iterator<_Mystr> operator+(
		typename _String_const_iterator<_Mystr>
			::difference_type _Off,
		_String_const_iterator<_Mystr> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Mystr>
	class _String_iterator
		: public _String_const_iterator<_Mystr>
	{	
public:
	typedef _String_iterator<_Mystr> _Myiter;
	typedef _String_const_iterator<_Mystr> _Mybase;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Mystr::value_type value_type;
	typedef typename _Mystr::difference_type difference_type;
	typedef typename _Mystr::pointer pointer;
	typedef typename _Mystr::reference reference;

	_String_iterator()
		{	
		}

	_String_iterator(pointer _Parg, const _Container_base *_Pstring)
		: _Mybase(_Parg, _Pstring)
		{	
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Const_cast(this->_Ptr));
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Mystr> inline
	typename _String_iterator<_Mystr>::_Unchecked_type
		_Unchecked(_String_iterator<_Mystr> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Mystr> inline
	_String_iterator<_Mystr>
		_Rechecked(_String_iterator<_Mystr>& _Iter,
			typename _String_iterator<_Mystr>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Mystr> inline
	_String_iterator<_Mystr> operator+(
		typename _String_iterator<_Mystr>
			::difference_type _Off,
		_String_iterator<_Mystr> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Value_type,
	class _Size_type,
	class _Difference_type,
	class _Pointer,
	class _Const_pointer,
	class _Reference,
	class _Const_reference>
	struct _String_iter_types
	{	
	typedef _Value_type value_type;
	typedef _Size_type size_type;
	typedef _Difference_type difference_type;
	typedef _Pointer pointer;
	typedef _Const_pointer const_pointer;
	typedef _Reference reference;
	typedef _Const_reference const_reference;
	};

template<class _Ty,
	class _Alloc0>
	struct _String_base_types
	{	
	typedef _Alloc0 _Alloc;
	typedef _String_base_types<_Ty, _Alloc> _Myt;

	typedef _Wrap_alloc<_Alloc> _Alty0;
	typedef typename _Alty0::template rebind<_Ty>::other _Alty;


	typedef typename _If<_Is_simple_alloc<_Alty>::value,
		_Simple_types<typename _Alty::value_type>,
		_String_iter_types<typename _Alty::value_type,
			typename _Alty::size_type,
			typename _Alty::difference_type,
			typename _Alty::pointer,
			typename _Alty::const_pointer,
			typename _Alty::reference,
			typename _Alty::const_reference> >::type
		_Val_types;
	};

		
template<class _Val_types>
	class _String_val
		: public _Container_base
	{	
public:
	typedef _String_val<_Val_types> _Myt;

	typedef typename _Val_types::value_type value_type;
	typedef typename _Val_types::size_type size_type;
	typedef typename _Val_types::difference_type difference_type;
	typedef typename _Val_types::pointer pointer;
	typedef typename _Val_types::const_pointer const_pointer;
	typedef typename _Val_types::reference reference;
	typedef typename _Val_types::const_reference const_reference;

	typedef _String_iterator<_Myt> iterator;
	typedef _String_const_iterator<_Myt> const_iterator;

	_String_val()
		: _Bx(),
		_Mysize(0),
		_Myres(0)
		{	
		}

	enum
		{	
		_BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
			: 16 / sizeof (value_type)};
	enum
		{	
		_ALLOC_MASK = sizeof (value_type) <= 1 ? 15
			: sizeof (value_type) <= 2 ? 7
			: sizeof (value_type) <= 4 ? 3
			: sizeof (value_type) <= 8 ? 1 : 0};

	value_type *_Myptr()
		{	
		return (this->_BUF_SIZE <= _Myres
			? _Unfancy(_Bx._Ptr)
			: _Bx._Buf);
		}

	const value_type *_Myptr() const
		{	
		return (this->_BUF_SIZE <= _Myres
			? _Unfancy(_Bx._Ptr)
			: _Bx._Buf);
		}

	union _Bxty
		{	
		_Bxty()
			{	
			}

		~_Bxty() noexcept
			{	
			}

		value_type _Buf[_BUF_SIZE];
		pointer _Ptr;
		char _Alias[_BUF_SIZE];	
		} _Bx;

	size_type _Mysize;	
	size_type _Myres;	
	};

		
template<class _Alloc_types>
	class _String_alloc
	{	
public:
	typedef _String_alloc<_Alloc_types> _Myt;
	typedef typename _Alloc_types::_Alloc _Alloc;
	typedef typename _Alloc_types::_Alty _Alty;
	typedef typename _Alloc_types::_Val_types _Val_types;

	typedef typename _Val_types::value_type value_type;
	typedef typename _Val_types::size_type size_type;
	typedef typename _Val_types::difference_type difference_type;
	typedef typename _Val_types::pointer pointer;
	typedef typename _Val_types::const_pointer const_pointer;
	typedef typename _Val_types::reference reference;
	typedef typename _Val_types::const_reference const_reference;

	typedef _String_iterator<_String_val<_Val_types> > iterator;
	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;

	enum
		{	
		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
		};

	enum
		{	
		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
		};

	value_type *_Myptr()
		{	
		return (_Get_data()._Myptr());
		}

	const value_type *_Myptr() const
		{	
		return (_Get_data()._Myptr());
		}

 
	_String_alloc()
		: _Mypair(_Zero_then_variadic_args_t())
		{	
		}

	template<class _Any_alloc,
		class = enable_if_t<!is_same<decay_t<_Any_alloc>, _Myt>::value> >
		_String_alloc(_Any_alloc&& _Al)
		: _Mypair(_One_then_variadic_args_t(),
			::std:: forward<_Any_alloc>(_Al))
		{	
		}

	void _Copy_alloc(const _Alty& _Al)
		{	
		_Pocca(_Getal(), _Al);
		}

	void _Move_alloc(_Alty& _Al)
		{	
		_Pocma(_Getal(), _Al);
		}

 





































































	void _Orphan_all()
		{	
		_Get_data()._Orphan_all();
		}

	void _Swap_all(_Myt& _Right)
		{	
		_Get_data()._Swap_all(_Right._Get_data());
		}

	_Alty& _Getal() noexcept
		{	
		return (_Mypair._Get_first());
		}

	const _Alty& _Getal() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	_String_val<_Val_types>& _Get_data() noexcept
		{	
		return (_Mypair._Get_second());
		}

	const _String_val<_Val_types>& _Get_data() const noexcept
		{	
		return (_Mypair._Get_second());
		}

	typedef typename _String_val<_Val_types>::_Bxty _Bxty;

	_Bxty& _Bx() noexcept
		{	
		return (_Get_data()._Bx);
		}

	const _Bxty& _Bx() const noexcept
		{	
		return (_Get_data()._Bx);
		}

	size_type& _Mysize() noexcept
		{	
		return (_Get_data()._Mysize);
		}

	const size_type& _Mysize() const noexcept
		{	
		return (_Get_data()._Mysize);
		}

	size_type& _Myres() noexcept
		{	
		return (_Get_data()._Myres);
		}

	const size_type& _Myres() const noexcept
		{	
		return (_Get_data()._Myres);
		}

private:
	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
	};

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_string
		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
	{	
public:
	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
	typedef _Traits traits_type;
	typedef _Alloc allocator_type;

	typedef typename _Mybase::_Alty _Alty;

	typedef typename _Mybase::value_type value_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;

	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;

	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	basic_string(const _Myt& _Right)

		: _Mybase(_Right._Getal().select_on_container_copy_construction())


		{	
		_Tidy();
		assign(_Right, 0, npos);
		}

	basic_string(const _Myt& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Right, 0, npos);
		}

	basic_string() noexcept(is_nothrow_default_constructible<_Alloc>::value)
		: _Mybase()
		{	
		_Tidy();
		}

	explicit basic_string(const _Alloc& _Al) noexcept
		: _Mybase(_Al)
		{	
		_Tidy();
		}

	basic_string(const _Myt& _Right, size_type _Roff,
		size_type _Count = npos)
		: _Mybase(_Right._Getal())
		{	
		_Tidy();
		assign(_Right, _Roff, _Count);
		}

	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
		const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Right, _Roff, _Count);
		}

	basic_string(const _Elem *_Ptr, size_type _Count)
		: _Mybase()
		{	
		_Tidy();
		assign(_Ptr, _Count);
		}

	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Ptr, _Count);
		}

	basic_string(const _Elem *_Ptr)
		: _Mybase()
		{	
		_Tidy();
		assign(_Ptr);
		}

	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Ptr);
		}

	basic_string(size_type _Count, _Elem _Ch)
		: _Mybase()
		{	
		_Tidy();
		assign(_Count, _Ch);
		}

	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Count, _Ch);
		}

	template<class _Iter,
		class = typename enable_if<_Is_iterator<_Iter>::value,
			void>::type>
		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		;
		_Tidy();
		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat_t<_Iter>());
		}

	template<class _Iter>
		void _Construct(_Iter _First,
			_Iter _Last, input_iterator_tag)
		{	
		try {
		for (; _First != _Last; ++_First)
			append((size_type)1, (_Elem)*_First);
		} catch (...) {
		_Tidy(true);
		throw;
		}
		}

	template<class _Iter>
		void _Construct(_Iter _First,
			_Iter _Last, forward_iterator_tag)
		{	
		size_type _Count = ::std:: distance(_First, _Last);
		reserve(_Count);
		_Construct(_First, _Last, input_iterator_tag());
		}

	void _Construct(_Elem *_First,
		_Elem *_Last, random_access_iterator_tag)
		{	
		if (_First != _Last)
			assign(_First, _Last - _First);
		}

	void _Construct(const _Elem *_First,
		const _Elem *_Last, random_access_iterator_tag)
		{	
		if (_First != _Last)
			assign(_First, _Last - _First);
		}

	basic_string(_Myt&& _Right) noexcept
		: _Mybase(::std:: move(_Right._Getal()))
		{	
		_Tidy();
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	basic_string(_Myt&& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		if (this->_Getal() != _Right._Getal())
			assign(_Right.begin(), _Right.end());
		else
			_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		noexcept(_Alty::propagate_on_container_move_assignment::value || _Alty::is_always_equal::value)
		{	
		if (this != &_Right)
			{	
			_Tidy(true);

			if (_Alty::propagate_on_container_move_assignment::value
				&& this->_Getal() != _Right._Getal())
				this->_Move_alloc(_Right._Getal());

			if (this->_Getal() != _Right._Getal())
				assign(_Right.begin(), _Right.end());
			else
				_Assign_rv(::std:: forward<_Myt>(_Right));
			}
		return (*this);
		}

	_Myt& assign(_Myt&& _Right) noexcept
		{	
		if (this == &_Right)
			;
		else if (get_allocator() != _Right.get_allocator()
			&& this->_BUF_SIZE <= _Right._Myres())
			*this = _Right;
		else
			{	
			_Tidy(true);
			_Assign_rv(::std:: forward<_Myt>(_Right));
			}
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (_Right._Myres() < this->_BUF_SIZE)
			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
				_Right._Mysize() + 1);
		else
			{	
			this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Right._Bx()._Ptr);
			_Right._Bx()._Ptr = pointer();
			}
		this->_Mysize() = _Right._Mysize();
		this->_Myres() = _Right._Myres();
		_Right._Tidy();
		}

	basic_string(::std:: initializer_list<_Elem> _Ilist,
		const _Alloc& _Al = allocator_type())
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Ilist.begin(), _Ilist.end());
		}

	_Myt& operator=(::std:: initializer_list<_Elem> _Ilist)
		{	
		return (assign(_Ilist.begin(), _Ilist.end()));
		}

	_Myt& operator+=(::std:: initializer_list<_Elem> _Ilist)
		{	
		return (append(_Ilist.begin(), _Ilist.end()));
		}

	_Myt& assign(::std:: initializer_list<_Elem> _Ilist)
		{	
		return (assign(_Ilist.begin(), _Ilist.end()));
		}

	_Myt& append(::std:: initializer_list<_Elem> _Ilist)
		{	
		return (append(_Ilist.begin(), _Ilist.end()));
		}

	iterator insert(const_iterator _Where,
		::std:: initializer_list<_Elem> _Ilist)
		{	
		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		::std:: initializer_list<_Elem> _Ilist)
		{	
		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
		}

	~basic_string() noexcept
		{	
		_Tidy(true);
		}

	 static const size_type npos;	

	_Myt& operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			if (this->_Getal() != _Right._Getal()
				&& _Alty::propagate_on_container_copy_assignment::value)
				{	
				_Tidy(true);
				this->_Copy_alloc(_Right._Getal());
				}

			assign(_Right);
			}
		return (*this);
		}

	_Myt& operator=(const _Elem *_Ptr)
		{	
		return (assign(_Ptr));
		}

	_Myt& operator=(_Elem _Ch)
		{	
		return (assign(1, _Ch));
		}

	_Myt& operator+=(const _Myt& _Right)
		{	
		return (append(_Right));
		}

	_Myt& operator+=(const _Elem *_Ptr)
		{	
		return (append(_Ptr));
		}

	_Myt& operator+=(_Elem _Ch)
		{	
		return (append((size_type)1, _Ch));
		}

	_Myt& append(const _Myt& _Right)
		{	
		return (append(_Right, 0, npos));
		}

	_Myt& append(const _Myt& _Right,
		size_type _Roff, size_type _Count = npos)
		{	
		_Right._Check_offset(_Roff);
		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
		if (npos - this->_Mysize() <= _Count)
			_Xlen();	

		const size_type _Num = this->_Mysize() + _Count;
		if (0 < _Count && _Grow(_Num))
			{	
			_Traits::copy(this->_Myptr() + this->_Mysize(),
				_Right._Myptr() + _Roff, _Count);
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& append(const _Elem *_Ptr, size_type _Count)
		{	
		;
		if (_Inside(_Ptr))
			return (append(*this,
				_Ptr - this->_Myptr(), _Count));	
		if (npos - this->_Mysize() <= _Count)
			_Xlen();	

		const size_type _Num = this->_Mysize() + _Count;
		if (0 < _Count && _Grow(_Num))
			{	
			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& append(const _Elem *_Ptr)
		{	
		;
		return (append(_Ptr, _Traits::length(_Ptr)));
		}

	_Myt& append(size_type _Count, _Elem _Ch)
		{	
		if (npos - this->_Mysize() <= _Count)
			_Xlen();	

		const size_type _Num = this->_Mysize() + _Count;
		if (0 < _Count && _Grow(_Num))
			{	
			_Chassign(this->_Mysize(), _Count, _Ch);
			_Eos(_Num);
			}
		return (*this);
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			_Myt&>::type
		append(_Iter _First, _Iter _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& append(const_pointer _First, const_pointer _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& append(const_iterator _First, const_iterator _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& assign(const _Myt& _Right)
		{	
		return (assign(_Right, 0, npos));
		}

	_Myt& assign(const _Myt& _Right,
		size_type _Roff, size_type _Count = npos)
		{	
		_Right._Check_offset(_Roff);
		_Count = _Right._Clamp_suffix_size(_Roff, _Count);

		if (this == &_Right)
			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	
		else if (_Grow(_Count))
			{	
			_Traits::copy(this->_Myptr(),
				_Right._Myptr() + _Roff, _Count);
			_Eos(_Count);
			}
		return (*this);
		}

	_Myt& assign(const _Elem *_Ptr, size_type _Count)
		{	
		;
		if (_Inside(_Ptr))
			return (assign(*this,
				_Ptr - this->_Myptr(), _Count));	

		if (_Grow(_Count))
			{	
			_Traits::copy(this->_Myptr(), _Ptr, _Count);
			_Eos(_Count);
			}
		return (*this);
		}

	_Myt& assign(const _Elem *_Ptr)
		{	
		;
		return (assign(_Ptr, _Traits::length(_Ptr)));
		}

	_Myt& assign(size_type _Count, _Elem _Ch)
		{	
		if (_Count == npos)
			_Xlen();	

		if (_Grow(_Count))
			{	
			_Chassign(0, _Count, _Ch);
			_Eos(_Count);
			}
		return (*this);
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			_Myt&>::type
		assign(_Iter _First, _Iter _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& assign(const_pointer _First, const_pointer _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& assign(const_iterator _First, const_iterator _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& insert(size_type _Off, const _Myt& _Right)
		{	
		return (insert(_Off, _Right, 0, npos));
		}

	_Myt& insert(size_type _Off,
		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
		{	
		_Check_offset(_Off);
		_Right._Check_offset(_Roff);
		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
		if (npos - this->_Mysize() <= _Count)
			_Xlen();	

		const size_type _Num = this->_Mysize() + _Count;
		if (0 < _Count && _Grow(_Num))
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off,
				this->_Mysize() - _Off);	
			if (this == &_Right)
				_Traits::move(this->_Myptr() + _Off,
					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
						_Count);	
			else
				_Traits::copy(this->_Myptr() + _Off,
					_Right._Myptr() + _Roff, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& insert(size_type _Off,
		const _Elem *_Ptr, size_type _Count)
		{	
		;
		if (_Inside(_Ptr))
			return (insert(_Off, *this,
				_Ptr - this->_Myptr(), _Count));	
		_Check_offset(_Off);
		if (npos - this->_Mysize() <= _Count)
			_Xlen();	
		const size_type _Num = this->_Mysize() + _Count;
		if (0 < _Count && _Grow(_Num))
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off,
				this->_Mysize() - _Off);	
			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& insert(size_type _Off, const _Elem *_Ptr)
		{	
		;
		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
		}

	_Myt& insert(size_type _Off,
		size_type _Count, _Elem _Ch)
		{	
		_Check_offset(_Off);
		if (npos - this->_Mysize() <= _Count)
			_Xlen();	
		const size_type _Num = this->_Mysize() + _Count;
		if (0 < _Count && _Grow(_Num))
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off,
				this->_Mysize() - _Off);	
			_Chassign(_Off, _Count, _Ch);	
			_Eos(_Num);
			}
		return (*this);
		}

	iterator insert(const_iterator _Where)
		{	
		return (insert(_Where, _Elem()));
		}

	iterator insert(const_iterator _Where, _Elem _Ch)
		{	
		size_type _Off = _Where - begin();
		insert(_Off, 1, _Ch);
		return (begin() + _Off);
		}

	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
		{	
		size_type _Off = _Where - begin();
		insert(_Off, _Count, _Ch);
		return (begin() + _Off);
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			iterator>::type
		insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
		size_type _Off = _Where - begin();
		replace(_Where, _Where, _First, _Last);
		return (begin() + _Off);
		}

	iterator insert(const_iterator _Where,
		const_pointer _First, const_pointer _Last)
		{	
		size_type _Off = _Where - begin();
		replace(_Where, _Where, _First, _Last);
		return (begin() + _Off);
		}

	iterator insert(const_iterator _Where,
		const_iterator _First, const_iterator _Last)
		{	
		size_type _Off = _Where - begin();
		replace(_Where, _Where, _First, _Last);
		return (begin() + _Off);
		}

	_Myt& erase(size_type _Off = 0)
		{	
		_Check_offset(_Off);
		_Eos(_Off);
		return (*this);
		}

	_Myt& erase(size_type _Off, size_type _Count)
		{	
		_Check_offset(_Off);
		if (this->_Mysize() - _Off <= _Count)
			_Eos(_Off);	
		else if (0 < _Count)
			{	
			value_type *_Ptr = this->_Myptr() + _Off;
			size_type _Newsize = this->_Mysize() - _Count;
			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
			_Eos(_Newsize);
			}
		return (*this);
		}

	iterator erase(const_iterator _Where)
		{	
		size_type _Count = _Where - begin();
		erase(_Count, 1);
		return (begin() + _Count);
		}

	iterator erase(const_iterator _First, const_iterator _Last)
		{	
		;
		size_type _Count = _First - begin();
		erase(_Count, _Last - _First);
		return (begin() + _Count);
		}

	void clear() noexcept
		{	
		_Eos(0);
		}

	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
		{	
		return (replace(_Off, _N0, _Right, 0, npos));
		}

	_Myt& replace(size_type _Off,
		size_type _N0, const _Myt& _Right, size_type _Roff,
			size_type _Count = npos)
		{	
		_Check_offset(_Off);
		_Right._Check_offset(_Roff);
		_N0 = _Clamp_suffix_size(_Off, _N0);
		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
		if (npos - _Count <= this->_Mysize() - _N0)
			_Xlen();	

		const size_type _Nm = this->_Mysize() - _N0 - _Off;	
		const size_type _Newsize = this->_Mysize() + _Count - _N0;
		if (this->_Mysize() < _Newsize)
			_Grow(_Newsize);

		if (_Count == _N0)
			{	
			_Traits::move(this->_Myptr() + _Off,
				_Right._Myptr() + _Roff, _Count);	
			}
		else if (this != &_Right)
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::copy(this->_Myptr() + _Off,
				_Right._Myptr() + _Roff, _Count);	
			}
		else if (_Count < _N0)
			{	
			_Traits::move(this->_Myptr() + _Off,
				this->_Myptr() + _Roff, _Count);	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			}
		else if (_Roff <= _Off)
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(this->_Myptr() + _Off,
				this->_Myptr() + _Roff, _Count);	
			}
		else if (_Off + _N0 <= _Roff)
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(this->_Myptr() + _Off,
				this->_Myptr() + (_Roff + _Count - _N0),
				_Count);	
			}
		else
			{	
			_Traits::move(this->_Myptr() + _Off,
				this->_Myptr() + _Roff, _N0);	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(this->_Myptr() + _Off + _N0,
				this->_Myptr() + _Roff + _Count,
				_Count - _N0);	
			}

		_Eos(_Newsize);
		return (*this);
		}

	_Myt& replace(size_type _Off,
		size_type _N0, const _Elem *_Ptr, size_type _Count)
		{	
		;
		if (_Inside(_Ptr))
			return (replace(_Off, _N0, *this,
				_Ptr - this->_Myptr(),
				_Count));	
		_Check_offset(_Off);
		_N0 = _Clamp_suffix_size(_Off, _N0);
		if (npos - _Count <= this->_Mysize() - _N0)
			_Xlen();	
		size_type _Nm = this->_Mysize() - _N0 - _Off;

		if (_Count < _N0)
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0,
				_Nm);	
		const size_type _Num = this->_Mysize() + _Count - _N0;
		if ((0 < _Count || 0 < _N0)
			&& _Grow(_Num))
			{	
			if (_N0 < _Count)
				_Traits::move(this->_Myptr() + _Off + _Count,
					this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
		{	
		;
		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
		}

	_Myt& replace(size_type _Off,
		size_type _N0, size_type _Count, _Elem _Ch)
		{	
		_Check_offset(_Off);
		_N0 = _Clamp_suffix_size(_Off, _N0);
		if (npos - _Count <= this->_Mysize() - _N0)
			_Xlen();	
		size_type _Nm = this->_Mysize() - _N0 - _Off;

		if (_Count < _N0)
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0,
				_Nm);	
		const size_type _Num = this->_Mysize() + _Count - _N0;
		if ((0 < _Count || 0 < _N0)
			&& _Grow(_Num))
			{	
			if (_N0 < _Count)
				_Traits::move(this->_Myptr() + _Off + _Count,
					this->_Myptr() + _Off + _N0, _Nm);	
			_Chassign(_Off, _Count, _Ch);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Myt& _Right)
		{	
		return (replace(_First - begin(), _Last - _First, _Right));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Elem *_Ptr, size_type _Count)
		{	
		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Elem *_Ptr)
		{	
		return (replace(_First - begin(), _Last - _First, _Ptr));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		size_type _Count, _Elem _Ch)
		{	
		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			_Myt&>::type
		replace(const_iterator _First, const_iterator _Last,
			_Iter _First2, _Iter _Last2)
		{	
		_Myt _Right(_First2, _Last2);
		replace(_First, _Last, _Right);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const_pointer _First2, const_pointer _Last2)
		{	
		if (_First2 == _Last2)
			erase(_First - begin(), _Last - _First);
		else
			replace(_First - begin(), _Last - _First,
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		pointer _First2, pointer _Last2)
		{	
		if (_First2 == _Last2)
			erase(_First - begin(), _Last - _First);
		else
			replace(_First - begin(), _Last - _First,
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const_iterator _First2, const_iterator _Last2)
		{	
		if (_First2 == _Last2)
			erase(_First - begin(), _Last - _First);
		else
			replace(_First - begin(), _Last - _First,
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		iterator _First2, iterator _Last2)
		{	
		if (_First2 == _Last2)
			erase(_First - begin(), _Last - _First);
		else
			replace(_First - begin(), _Last - _First,
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	iterator begin() noexcept
		{	
		auto _Mydata = &this->_Get_data();
		return (iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));
		}

	const_iterator begin() const noexcept
		{	
		auto _Mydata = &this->_Get_data();
		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));
		}

	iterator end() noexcept
		{	
		auto _Mydata = &this->_Get_data();
		return (iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));
		}

	const_iterator end() const noexcept
		{	
		auto _Mydata = &this->_Get_data();
		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));
		}

	reverse_iterator rbegin() noexcept
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend() noexcept
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator(begin()));
		}

	const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	const_iterator cend() const noexcept
		{	
		return (end());
		}

	const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	void shrink_to_fit()
		{	
		if ((size() | this->_ALLOC_MASK) < capacity())
			{	
			_Myt _Tmp(*this);
			swap(_Tmp);
			}
		}

	reference at(size_type _Off)
		{	
		_Check_offset_exclusive(_Off);
		return (this->_Myptr()[_Off]);
		}

	const_reference at(size_type _Off) const
		{	
		_Check_offset_exclusive(_Off);
		return (this->_Myptr()[_Off]);
		}

	reference operator[](size_type _Off)
		{	
 







		return (this->_Myptr()[_Off]);
		}

	const_reference operator[](size_type _Off) const
		{	
 







		return (this->_Myptr()[_Off]);
		}

	void push_back(_Elem _Ch)
		{	
		auto& _Dx = this->_Get_data();
		auto& _Sz = _Dx._Mysize;
		if (_Sz == _Dx._Myres)
			_Grow(_Sz + 1); 
		auto _Ptr = _Dx._Myptr();
		_Traits::assign(_Ptr[_Sz], _Ch);
		++_Sz;
		_Traits::assign(_Ptr[_Sz], _Elem());
		}

	void pop_back()
		{	
		erase(this->_Mysize() - 1);	
		}

	reference front()
		{	
		return (*begin());
		}

	const_reference front() const
		{	
		return (*begin());
		}

	reference back()
		{	
		return (*(end() - 1));
		}

	const_reference back() const
		{	
		return (*(end() - 1));
		}

	const _Elem *c_str() const noexcept
		{	
		return (this->_Myptr());
		}

	const _Elem *data() const noexcept
		{	
		return (this->_Myptr());
		}








	size_type length() const noexcept
		{	
		return (this->_Mysize());
		}

	size_type size() const noexcept
		{	
		return (this->_Mysize());
		}

	size_type max_size() const noexcept
		{	
		const size_type _Num = this->_Getal().max_size();
		return (_Num <= 1 ? 1 : _Num - 1);
		}

	void resize(size_type _Newsize)
		{	
		resize(_Newsize, _Elem());
		}

	void resize(size_type _Newsize, _Elem _Ch)
		{	
		if (_Newsize <= this->_Mysize())
			_Eos(_Newsize);
		else
			append(_Newsize - this->_Mysize(), _Ch);
		}

	size_type capacity() const noexcept
		{	
		return (this->_Myres());
		}

	void reserve(size_type _Newcap = 0)
		{	
		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
			{	
			size_type _Size = this->_Mysize();
			if (_Grow(_Newcap, true))
				_Eos(_Size);
			}
		}

	bool empty() const noexcept
		{	
		return (this->_Mysize() == 0);
		}

	
	size_type copy(_Elem *_Ptr,
		size_type _Count, size_type _Off = 0) const
		{	
		;
		_Check_offset(_Off);
		_Count = _Clamp_suffix_size(_Off, _Count);
		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
		return (_Count);
		}

	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
		size_type _Count, size_type _Off = 0) const
		{	
		;
		_Check_offset(_Off);
		_Count = _Clamp_suffix_size(_Off, _Count);
		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
		return (_Count);
		}

	void _Swap_bx(_Myt& _Right)
		{	
		if (this->_BUF_SIZE <= this->_Myres())
			if (this->_BUF_SIZE <= _Right._Myres())
				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
			else
				{	
				pointer _Ptr = this->_Bx()._Ptr;
				this->_Getal().destroy(::std:: addressof(this->_Bx()._Ptr));
				_Traits::copy(this->_Bx()._Buf,
					_Right._Bx()._Buf, _Right._Mysize() + 1);
				this->_Getal().construct(::std:: addressof(_Right._Bx()._Ptr), _Ptr);
				}
		else
			if (_Right._Myres() < this->_BUF_SIZE)
				::std:: swap(this->_Bx()._Buf, _Right._Bx()._Buf);
			else
				{	
				pointer _Ptr = _Right._Bx()._Ptr;
				this->_Getal().destroy(::std:: addressof(_Right._Bx()._Ptr));
				_Traits::copy(_Right._Bx()._Buf,
					this->_Bx()._Buf, this->_Mysize() + 1);
				this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Ptr);
				}
		}

	void swap(_Myt& _Right)
		noexcept(_Alty::propagate_on_container_swap::value || _Alty::is_always_equal::value)
		{	
		if (this != &_Right)
			{	
			_Pocs(this->_Getal(), _Right._Getal());
			this->_Swap_all(_Right);
			_Swap_bx(_Right);
			::std:: swap(this->_Mysize(), _Right._Mysize());
			::std:: swap(this->_Myres(), _Right._Myres());
			}
		}

	size_type find(const _Myt& _Right, size_type _Off = 0) const noexcept
		{	
		return (find(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
		;
		if (_Count == 0 && _Off <= this->_Mysize())
			return (_Off);	

		size_type _Nm;
		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
			{	
			const _Elem *_Uptr, *_Vptr;
			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
					return (_Uptr - this->_Myptr());	
			}

		return (npos);	
		}

	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
		{	
		;
		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find(_Elem _Ch, size_type _Off = 0) const
		{	
		return (find((const _Elem *)&_Ch, _Off, 1));
		}

	size_type rfind(const _Myt& _Right, size_type _Off = npos) const noexcept
		{	
		return (rfind(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type rfind(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
		;
		if (_Count == 0)
			return (_Off < this->_Mysize() ? _Off
				: this->_Mysize());	
		if (_Count <= this->_Mysize())
			{	
			const _Elem *_Uptr = this->_Myptr() +
				(_Off < this->_Mysize() - _Count ? _Off
					: this->_Mysize() - _Count);
			for (; ; --_Uptr)
				if (_Traits::eq(*_Uptr, *_Ptr)
					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
					return (_Uptr - this->_Myptr());	
				else if (_Uptr == this->_Myptr())
					break;	
			}

		return (npos);	
		}

	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
		{	
		;
		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type rfind(_Elem _Ch, size_type _Off = npos) const
		{	
		return (rfind((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_first_of(const _Myt& _Right,
		size_type _Off = 0) const noexcept
		{	
		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_first_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
		;
		if (0 < _Count && _Off < this->_Mysize())
			{	
			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
			for (const _Elem *_Uptr = this->_Myptr() + _Off;
				_Uptr < _Vptr; ++_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
					return (_Uptr - this->_Myptr());	
			}

		return (npos);	
		}

	size_type find_first_of(const _Elem *_Ptr,
		size_type _Off = 0) const
		{	
		;
		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_first_of(_Elem _Ch,
		size_type _Off = 0) const
		{	
		return (find((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_last_of(const _Myt& _Right,
		size_type _Off = npos) const noexcept
		{	
		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_last_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
		;
		if (0 < _Count && 0 < this->_Mysize())
			{	
			const _Elem *_Uptr = this->_Myptr()
				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
			for (; ; --_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
					return (_Uptr - this->_Myptr());	
				else if (_Uptr == this->_Myptr())
					break;	
			}

		return (npos);	
		}

	size_type find_last_of(const _Elem *_Ptr,
		size_type _Off = npos) const
		{	
		;
		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_last_of(_Elem _Ch,
		size_type _Off = npos) const
		{	
		return (rfind((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_first_not_of(const _Myt& _Right,
		size_type _Off = 0) const noexcept
		{	
		return (find_first_not_of(_Right._Myptr(), _Off,
			_Right.size()));
		}

	size_type find_first_not_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
		;
		if (_Off < this->_Mysize())
			{	
			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
			for (const _Elem *_Uptr = this->_Myptr() + _Off;
				_Uptr < _Vptr; ++_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
					return (_Uptr - this->_Myptr());
			}
		return (npos);
		}

	size_type find_first_not_of(const _Elem *_Ptr,
		size_type _Off = 0) const
		{	
		;
		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_first_not_of(_Elem _Ch,
		size_type _Off = 0) const
		{	
		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_last_not_of(const _Myt& _Right,
		size_type _Off = npos) const noexcept
		{	
		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_last_not_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
		;
		if (0 < this->_Mysize())
			{	
			const _Elem *_Uptr = this->_Myptr()
				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
			for (; ; --_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
					return (_Uptr - this->_Myptr());
				else if (_Uptr == this->_Myptr())
					break;
			}
		return (npos);
		}

	size_type find_last_not_of(const _Elem *_Ptr,
		size_type _Off = npos) const
		{	
		;
		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_last_not_of(_Elem _Ch,
		size_type _Off = npos) const
		{	
		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
		}

	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
		{	
		return (_Myt(*this, _Off, _Count, get_allocator()));
		}

	static int _Traits_compare(const _Elem * const _Left, const size_type _Left_size,
		const _Elem * const _Right, const size_type _Right_size)
		{	
		const size_type _Min_size = _Left_size < _Right_size ? _Left_size : _Right_size;
		const int _Ans = _Traits::compare(_Left, _Right, _Min_size);

		if (_Ans != 0)
			return (_Ans);

		if (_Left_size < _Right_size)
			return (-1);

		if (_Left_size > _Right_size)
			return (1);

		return (0);
		}

	size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const
		{	
		const size_type _Max_effective_size = this->_Mysize() - _Off;
		if (_Size <= _Max_effective_size)
			return (_Size);
		else
			return (_Max_effective_size);
		}

	int compare(const _Myt& _Right) const noexcept
		{	
		return (_Traits_compare(this->_Myptr(), this->_Mysize(),
			_Right._Myptr(), _Right._Mysize()));
		}

	int compare(size_type _Off,
		size_type _N0, const _Myt& _Right) const
		{	
		_Check_offset(_Off);
		return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
			_Right._Myptr(), _Right._Mysize()));
		}

	int compare(size_type _Off,
		size_type _N0, const _Myt& _Right,
		size_type _Roff, size_type _Count = npos) const
		{	
		_Check_offset(_Off);
		_Right._Check_offset(_Roff);
		return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
			_Right._Myptr() + _Roff, _Right._Clamp_suffix_size(_Roff, _Count)));
		}

	int compare(const _Elem *_Ptr) const
		{	
		;
		return (_Traits_compare(this->_Myptr(), this->_Mysize(),
			_Ptr, _Traits::length(_Ptr)));
		}

	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
		{	
		;
		_Check_offset(_Off);
		return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
			_Ptr, _Traits::length(_Ptr)));
		}

	int compare(size_type _Off,
		size_type _N0, const _Elem *_Ptr, size_type _Count) const
		{	
		;
		_Check_offset(_Off);
		return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
			_Ptr, _Count));
		}

	allocator_type get_allocator() const noexcept
		{	
		allocator_type _Ret(this->_Getal());
		return (_Ret);
		}

	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
		{	
		if (_Count == 1)
			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
		else
			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
		}

	void _Copy(size_type _Newsize, size_type _Oldlen)
		{	
		size_type _Newres = _Newsize | this->_ALLOC_MASK;
		if (max_size() < _Newres)
			_Newres = _Newsize;	
		else if (this->_Myres() / 2 <= _Newres / 3)
			;
		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
			_Newres = this->_Myres()
				+ this->_Myres() / 2;	
		else
			_Newres = max_size();	

		pointer _Ptr;
		try {
			_Ptr = this->_Getal().allocate(_Newres + 1);
		} catch (...) {
			_Newres = _Newsize;	
			try {
				_Ptr = this->_Getal().allocate(_Newres + 1);
			} catch (...) {
			_Tidy(true);	
			throw;
			}
		}

		if (0 < _Oldlen)
			_Traits::copy(_Unfancy(_Ptr), this->_Myptr(),
				_Oldlen);	
		_Tidy(true);
		this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Ptr);
		this->_Myres() = _Newres;
		_Eos(_Oldlen);
		}

	void _Eos(size_type _Newsize)
		{	
		auto& _Dx = this->_Get_data();
		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());
		}

	bool _Grow(size_type _Newsize,
		bool _Trim = false)
		{	
		if (max_size() < _Newsize)
			_Xlen();	
		if (this->_Myres() < _Newsize)
			_Copy(_Newsize, this->_Mysize());	
		else if (_Trim && _Newsize < this->_BUF_SIZE)
			_Tidy(true,	
				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
		else if (_Newsize == 0)
			_Eos(0);	
		return (0 < _Newsize);	
		}

	bool _Inside(const _Elem *_Ptr)
		{	
		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
			|| this->_Myptr() + this->_Mysize() <= _Ptr)
			return (false);	
		else
			return (true);
		}

	void _Tidy(bool _Built = false,
		size_type _Newsize = 0)
		{	
		if (!_Built)
			;
		else if (this->_BUF_SIZE <= this->_Myres())
			{	
			pointer _Ptr = this->_Bx()._Ptr;
			this->_Getal().destroy(::std:: addressof(this->_Bx()._Ptr));
			if (0 < _Newsize)
				_Traits::copy(this->_Bx()._Buf,
					_Unfancy(_Ptr), _Newsize);
			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
			}
		this->_Myres() = this->_BUF_SIZE - 1;
		_Eos(_Newsize);
		}

	[[noreturn]] void _Xlen() const
		{	
		_Xlength_error("string too long");
		}

	void _Check_offset(const size_type _Off) const
		{	
		if (this->_Mysize() < _Off)
			_Xran();
		}

	void _Check_offset_exclusive(const size_type _Off) const
		{	
		if (this->_Mysize() <= _Off)
			_Xran();
		}

	[[noreturn]] void _Xran() const
		{	
		_Xout_of_range("invalid string position");
		}
	};

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	 const typename basic_string<_Elem, _Traits, _Alloc>::size_type
		basic_string<_Elem, _Traits, _Alloc>::npos =
			(typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);

		

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>& _Right)
			noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem *_Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Traits::length(_Left) + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(1 + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + _Traits::length(_Right));
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + 1);
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	if (_Right.size() <= _Left.capacity() - _Left.size()
		|| _Right.capacity() - _Right.size() < _Left.size())
		return (::std:: move(_Left.append(_Right)));
	else
		return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem *_Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	typedef typename basic_string<_Elem, _Traits, _Alloc>::size_type
		size_type;
	return (::std:: move(_Right.insert((size_type)0, (size_type)1, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem *_Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem _Right)
	{	
	return (::std:: move(_Left.append(1, _Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (_Left.compare(_Right) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right.compare(_Left) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Left.compare(_Right) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const _Elem *_Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right.compare(_Left) > 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Left < _Right));
	}

typedef basic_string<char, char_traits<char>, allocator<char> >
	string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >
	wstring;

	
template<class _Elem,
	class _Traits,
	class _Alloc>
	struct hash<basic_string<_Elem, _Traits, _Alloc> >
	{	
	typedef basic_string<_Elem, _Traits, _Alloc> argument_type;
	typedef size_t result_type;

	size_t operator()(const argument_type& _Keyval) const
		{	
		return (_Hash_seq((const unsigned char *)_Keyval.c_str(),
			_Keyval.size() * sizeof (_Elem)));
		}
	};

typedef basic_string<char16_t, char_traits<char16_t>, allocator<char16_t> >
	u16string;
typedef basic_string<char32_t, char_traits<char32_t>, allocator<char32_t> >
	u32string;
}

 
 #pragma warning(pop)
 #pragma pack(pop)










 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
namespace std {
		
class logic_error
	: public ::std:: exception
	{	
public:
	typedef ::std:: exception _Mybase;

	explicit logic_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit logic_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 






	};

		
class domain_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit domain_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit domain_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 






	};

		
class invalid_argument
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit invalid_argument(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit invalid_argument(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 






	};

		
class length_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit length_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit length_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 






	};

		
class out_of_range
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit out_of_range(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit out_of_range(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 






	};

		
class runtime_error
	: public ::std:: exception
	{	
public:
	typedef ::std:: exception _Mybase;

	explicit runtime_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit runtime_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 






	};

		
class overflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit overflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit overflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 






	};

		
class underflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit underflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit underflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 






	};

		
class range_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit range_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit range_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 






	};
}
 
 #pragma warning(pop)
 #pragma pack(pop)









 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4127)
 #pragma warning(disable: 4244)

namespace std {
 

		
template<class _Myvec>
	class _Vector_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			typename _Myvec::value_type,
			typename _Myvec::difference_type,
			typename _Myvec::const_pointer,
			typename _Myvec::const_reference,
			_Iterator_base>
	{	
public:
	typedef _Vector_const_iterator<_Myvec> _Myiter;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Myvec::value_type value_type;
	typedef typename _Myvec::difference_type difference_type;
	typedef typename _Myvec::const_pointer pointer;
	typedef typename _Myvec::const_reference reference;
	typedef typename _Myvec::pointer _Tptr;

	_Vector_const_iterator()
		: _Ptr()
		{	
		}

	_Vector_const_iterator(_Tptr _Parg, const _Container_base *_Pvector)
		: _Ptr(_Parg)
		{	
		this->_Adopt(_Pvector);
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		_Ptr = _Const_cast(_Right);
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Ptr);
		}

	reference operator*() const
		{	
 

















		;

		return (*_Ptr);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
 
















		++_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
 
















		--_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
 






















		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

 
















	void _Compat(const _Myiter&) const
		{	
		}
 

	_Tptr _Ptr;	
	};

template<class _Myvec> inline
	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Myvec> inline
	_Vector_const_iterator<_Myvec>&
		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
			typename _Vector_const_iterator<_Myvec>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Myvec> inline
	_Vector_const_iterator<_Myvec> operator+(
		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
		_Vector_const_iterator<_Myvec> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Myvec>
	class _Vector_iterator
		: public _Vector_const_iterator<_Myvec>
	{	
public:
	typedef _Vector_iterator<_Myvec> _Myiter;
	typedef _Vector_const_iterator<_Myvec> _Mybase;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Myvec::value_type value_type;
	typedef typename _Myvec::difference_type difference_type;
	typedef typename _Myvec::pointer pointer;
	typedef typename _Myvec::reference reference;

	_Vector_iterator()
		{	
		}

	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
		: _Mybase(_Parg, _Pvector)
		{	
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (this->_Ptr);
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Myvec> inline
	typename _Vector_iterator<_Myvec>::_Unchecked_type
		_Unchecked(_Vector_iterator<_Myvec> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Myvec> inline
	_Vector_iterator<_Myvec>&
		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
			typename _Vector_iterator<_Myvec>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Myvec> inline
	_Vector_iterator<_Myvec> operator+(
		typename _Vector_iterator<_Myvec>::difference_type _Off,
		_Vector_iterator<_Myvec> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Value_type,
	class _Size_type,
	class _Difference_type,
	class _Pointer,
	class _Const_pointer,
	class _Reference,
	class _Const_reference>
	struct _Vec_iter_types
	{	
	typedef _Value_type value_type;
	typedef _Size_type size_type;
	typedef _Difference_type difference_type;
	typedef _Pointer pointer;
	typedef _Const_pointer const_pointer;
	typedef _Reference reference;
	typedef _Const_reference const_reference;
	};

template<class _Ty,
	class _Alloc0>
	struct _Vec_base_types
	{	
	typedef _Alloc0 _Alloc;
	typedef _Vec_base_types<_Ty, _Alloc> _Myt;

	typedef _Wrap_alloc<_Alloc> _Alty0;
	typedef typename _Alty0::template rebind<_Ty>::other _Alty;


	typedef typename _If<_Is_simple_alloc<_Alty>::value,
		_Simple_types<typename _Alty::value_type>,
		_Vec_iter_types<typename _Alty::value_type,
			typename _Alty::size_type,
			typename _Alty::difference_type,
			typename _Alty::pointer,
			typename _Alty::const_pointer,
			typename _Alty::reference,
			typename _Alty::const_reference> >::type
		_Val_types;
	};

		
template<class _Val_types>
	class _Vector_val
		: public _Container_base
	{	
public:
	typedef _Vector_val<_Val_types> _Myt;

	typedef typename _Val_types::value_type value_type;
	typedef typename _Val_types::size_type size_type;
	typedef typename _Val_types::difference_type difference_type;
	typedef typename _Val_types::pointer pointer;
	typedef typename _Val_types::const_pointer const_pointer;
	typedef typename _Val_types::reference reference;
	typedef typename _Val_types::const_reference const_reference;

	typedef _Vector_iterator<_Myt> iterator;
	typedef _Vector_const_iterator<_Myt> const_iterator;

	_Vector_val()
		: _Myfirst(),
		_Mylast(),
		_Myend()
		{	
		}

	pointer _Myfirst;	
	pointer _Mylast;	
	pointer _Myend;	
	};

		
template<class _Alloc_types>
	class _Vector_alloc
	{	
public:
	typedef _Vector_alloc<_Alloc_types> _Myt;
	typedef typename _Alloc_types::_Alloc _Alloc;
	typedef typename _Alloc_types::_Alty _Alty;
	typedef typename _Alloc_types::_Val_types _Val_types;

	typedef typename _Val_types::value_type value_type;
	typedef typename _Val_types::size_type size_type;
	typedef typename _Val_types::difference_type difference_type;
	typedef typename _Val_types::pointer pointer;
	typedef typename _Val_types::const_pointer const_pointer;
	typedef typename _Val_types::reference reference;
	typedef typename _Val_types::const_reference const_reference;

	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;

 
	_Vector_alloc()
		: _Mypair(_Zero_then_variadic_args_t())
		{	
		}

	template<class _Any_alloc,
		class = enable_if_t<!is_same<decay_t<_Any_alloc>, _Myt>::value> >
		_Vector_alloc(_Any_alloc&& _Al)
		: _Mypair(_One_then_variadic_args_t(),
			::std:: forward<_Any_alloc>(_Al))
		{	
		}

	void _Copy_alloc(const _Alty& _Al)
		{	
		_Pocca(_Getal(), _Al);
		}

	void _Move_alloc(_Alty& _Al)
		{	
		_Pocma(_Getal(), _Al);
		}

 





































































	void _Orphan_all()
		{	
		_Get_data()._Orphan_all();
		}

	void _Swap_all(_Myt& _Right)
		{	
		_Get_data()._Swap_all(_Right._Get_data());
		}

	_Alty& _Getal() noexcept
		{	
		return (_Mypair._Get_first());
		}

	const _Alty& _Getal() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	_Vector_val<_Val_types>& _Get_data() noexcept
		{	
		return (_Mypair._Get_second());
		}

	const _Vector_val<_Val_types>& _Get_data() const noexcept
		{	
		return (_Mypair._Get_second());
		}

	pointer& _Myfirst() noexcept
		{	
		return (_Get_data()._Myfirst);
		}

	const pointer& _Myfirst() const noexcept
		{	
		return (_Get_data()._Myfirst);
		}

	pointer& _Mylast() noexcept
		{	
		return (_Get_data()._Mylast);
		}

	const pointer& _Mylast() const noexcept
		{	
		return (_Get_data()._Mylast);
		}

	pointer& _Myend() noexcept
		{	
		return (_Get_data()._Myend);
		}

	const pointer& _Myend() const noexcept
		{	
		return (_Get_data()._Myend);
		}

private:
	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
	};

		
template<class _Ty,
	class _Alloc = allocator<_Ty> >
	class vector
		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
	{	
public:
	typedef vector<_Ty, _Alloc> _Myt;
	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
	typedef _Alloc allocator_type;

	typedef typename _Mybase::_Alty _Alty;

	typedef typename _Mybase::value_type value_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;

 
 

	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;

	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	vector() noexcept(is_nothrow_default_constructible<_Alloc>::value)
		: _Mybase()
		{	
		}

	explicit vector(const _Alloc& _Al) noexcept
		: _Mybase(_Al)
		{	
		}

	explicit vector(size_type _Count)
		: _Mybase()
		{	
		if (_Buy(_Count))
			{	
			try {
			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
				this->_Getal());
			this->_Mylast() += _Count;
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

	vector(size_type _Count, const value_type& _Val)
		: _Mybase()
		{	
		_Construct_n(_Count, ::std:: addressof(_Val));
		}

	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Construct_n(_Count, ::std:: addressof(_Val));
		}

	vector(const _Myt& _Right)

		: _Mybase(_Right._Getal().select_on_container_copy_construction())


		{	
		if (_Buy(_Right.size()))
			try {
			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
				this->_Myfirst());
			} catch (...) {
			_Tidy();
			throw;
			}
		}

	vector(const _Myt& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		if (_Buy(_Right.size()))
			try {
			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
				this->_Myfirst());
			} catch (...) {
			_Tidy();
			throw;
			}
		}

	template<class _Iter,
		class = typename enable_if<_Is_iterator<_Iter>::value,
			void>::type>
		vector(_Iter _First, _Iter _Last)
		: _Mybase()
		{	
		_Construct(_First, _Last);
		}

	template<class _Iter,
		class = typename enable_if<_Is_iterator<_Iter>::value,
			void>::type>
		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Construct(_First, _Last);
		}

	template<class _Iter>
		void _Construct(_Iter _First, _Iter _Last)
		{	
		_Construct(_First, _Last, _Iter_cat_t<_Iter>());
		}

	template<class _Iter>
		void _Construct(_Iter _First, _Iter _Last,
			input_iterator_tag)
		{	
		try {

		for (; _First != _Last; ++_First)
			emplace_back(*_First);

		} catch (...) {
		_Tidy();
		throw;
		}
		}

	template<class _Iter>
		void _Construct(_Iter _First, _Iter _Last,
			forward_iterator_tag)
		{	
		if (_Buy(::std:: distance(_First, _Last)))
			{	
			try {
			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

	void _Construct_n(size_type _Count, const value_type *_Pval)
		{	
		if (_Buy(_Count))
			{	
			try {
			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

	vector(_Myt&& _Right) noexcept
		: _Mybase(::std:: move(_Right._Getal()))
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right), true_type());
		}

	vector(_Myt&& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		noexcept(_Alty::propagate_on_container_move_assignment::value || _Alty::is_always_equal::value)
		{	
		if (this != &_Right)
			{	
			_Tidy();
			if (_Alty::propagate_on_container_move_assignment::value
				&& this->_Getal() != _Right._Getal())
				this->_Move_alloc(_Right._Getal());

			_Assign_rv(::std:: forward<_Myt>(_Right));
			}
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right, true_type)
		{	
		this->_Swap_all((_Myt&)_Right);
		this->_Myfirst() = _Right._Myfirst();
		this->_Mylast() = _Right._Mylast();
		this->_Myend() = _Right._Myend();

		_Right._Myfirst() = pointer();
		_Right._Mylast() = pointer();
		_Right._Myend() = pointer();
		}

	void _Assign_rv(_Myt&& _Right, false_type)
		{	
		if (get_allocator() == _Right.get_allocator())
			_Assign_rv(::std:: forward<_Myt>(_Right), true_type());
		else
			_Construct(::std:: make_move_iterator(_Right.begin()),
				::std:: make_move_iterator(_Right.end()));
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right),
			typename _Alty::propagate_on_container_move_assignment());
		}


	void push_back(value_type&& _Val)
		{	
		if (_Inside(::std:: addressof(_Val)))
			{	
			size_type _Idx = ::std:: addressof(_Val) - _Unfancy(this->_Myfirst());
			if (this->_Mylast() == this->_Myend())
				_Reserve(1);
			_Orphan_range(this->_Mylast(), this->_Mylast());
			this->_Getal().construct(_Unfancy(this->_Mylast()),
				::std:: forward<value_type>(this->_Myfirst()[_Idx]));
			++this->_Mylast();
			}
		else
			{	
			if (this->_Mylast() == this->_Myend())
				_Reserve(1);
			_Orphan_range(this->_Mylast(), this->_Mylast());
			this->_Getal().construct(_Unfancy(this->_Mylast()),
				::std:: forward<value_type>(_Val));
			++this->_Mylast();
			}
		}

	iterator insert(const_iterator _Where, _Ty&& _Val)
		{	
		return (emplace(_Where, ::std:: move(_Val)));
		}

	template<class... _Valty>
		void emplace_back(_Valty&&... _Val)
		{	
		if (this->_Mylast() == this->_Myend())
			_Reserve(1);
		_Orphan_range(this->_Mylast(), this->_Mylast());
		this->_Getal().construct(_Unfancy(this->_Mylast()),
			::std:: forward<_Valty>(_Val)...);
		++this->_Mylast();
		}

	template<class... _Valty>
		iterator emplace(const_iterator _Where, _Valty&&... _Val)
		{	
		size_type _Off = (_Where)._Ptr - this->_Myfirst();

 




		emplace_back(::std:: forward<_Valty>(_Val)...);
		::std:: rotate(begin() + _Off, end() - 1, end());
		return (begin() + _Off);
		}


	vector(::std:: initializer_list<value_type> _Ilist,
		const _Alloc& _Al = allocator_type())
		: _Mybase(_Al)
		{	
		_Construct(_Ilist.begin(), _Ilist.end());
		}

	_Myt& operator=(::std:: initializer_list<value_type> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		return (*this);
		}

	void assign(::std:: initializer_list<value_type> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		}

	iterator insert(const_iterator _Where,
		::std:: initializer_list<value_type> _Ilist)
		{	
		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
		}

	~vector() noexcept
		{	
		_Tidy();
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			if (this->_Getal() != _Right._Getal()
				&& _Alty::propagate_on_container_copy_assignment::value)
				{	
				_Tidy();
				this->_Copy_alloc(_Right._Getal());
				}

			this->_Orphan_all();

			if (_Right.empty())
				clear();	
			else if (_Right.size() <= size())
				{	
				pointer _Ptr = _Copy_unchecked(_Right._Myfirst(),
					_Right._Mylast(), this->_Myfirst());	
				_Destroy(_Ptr, this->_Mylast());	
				this->_Mylast() = this->_Myfirst() + _Right.size();
				}
			else if (_Right.size() <= capacity())
				{	
				pointer _Ptr = _Right._Myfirst() + size();
				_Copy_unchecked(_Right._Myfirst(),
					_Ptr, this->_Myfirst());
				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
					this->_Mylast());
				}
			else
				{	
				if (this->_Myfirst() != pointer())
					{	
					_Destroy(this->_Myfirst(), this->_Mylast());
					this->_Getal().deallocate(this->_Myfirst(),
						this->_Myend() - this->_Myfirst());
					}
				if (_Buy(_Right.size()))
					try {
					this->_Mylast() =
						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
						this->_Myfirst());
					} catch (...) {
					_Tidy();
					throw;
					}
				}
			}
		return (*this);
		}

	void reserve(size_type _Count)
		{	
		if (capacity() < _Count)
			{	
			if (max_size() < _Count)
				_Xlen();
			_Reallocate(_Count);
			}
		}

	size_type capacity() const noexcept
		{	
		return (this->_Myend() - this->_Myfirst());
		}

	size_type _Unused_capacity() const noexcept
		{	
		return (this->_Myend() - this->_Mylast());
		}

	size_type _Has_unused_capacity() const noexcept
		{	
		return (this->_Myend() != this->_Mylast());
		}

	iterator begin() noexcept
		{	
		return (iterator(this->_Myfirst(), &this->_Get_data()));
		}

	const_iterator begin() const noexcept
		{	
		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
		}

	iterator end() noexcept
		{	
		return (iterator(this->_Mylast(), &this->_Get_data()));
		}

	const_iterator end() const noexcept
		{	
		return (const_iterator(this->_Mylast(), &this->_Get_data()));
		}

	iterator _Make_iter(const_iterator _Where) const
		{	
		return (iterator(_Where._Ptr, &this->_Get_data()));
		}

	reverse_iterator rbegin() noexcept
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend() noexcept
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator(begin()));
		}

	const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	const_iterator cend() const noexcept
		{	
		return (end());
		}

	const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	void shrink_to_fit()
		{	
		if (_Has_unused_capacity())
			{	
			if (empty())
				_Tidy();
			else
				_Reallocate(size());
			}
		}

	void resize(size_type _Newsize)
		{	
		if (_Newsize < size())
			_Pop_back_n(size() - _Newsize);
		else if (size() < _Newsize)
			{	
			_Reserve(_Newsize - size());
			try {
			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
				this->_Getal());
			} catch (...) {
			_Tidy();
			throw;
			}
			this->_Mylast() += _Newsize - size();
			}
		}

	void resize(size_type _Newsize, const value_type& _Val)
		{	
		if (_Newsize < size())
			_Pop_back_n(size() - _Newsize);
		else if (size() < _Newsize)
			{	
			const value_type *_Ptr = ::std:: addressof(_Val);

			if (_Inside(_Ptr))
				{	
				const difference_type _Idx = _Ptr
					- _Unfancy(this->_Myfirst());
				_Reserve(_Newsize - size());
				_Ptr = _Unfancy(this->_Myfirst()) + _Idx;
				}
			else
				_Reserve(_Newsize - size());

			try {
			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
			} catch (...) {
			_Tidy();
			throw;
			}
			this->_Mylast() += _Newsize - size();
			}
		}

	size_type size() const noexcept
		{	
		return (this->_Mylast() - this->_Myfirst());
		}

	size_type max_size() const noexcept
		{	
		return (this->_Getal().max_size());
		}

	bool empty() const noexcept
		{	
		return (this->_Myfirst() == this->_Mylast());
		}

	_Alloc get_allocator() const noexcept
		{	
		_Alloc _Ret(this->_Getal());
		return (_Ret);
		}

	const_reference at(size_type _Pos) const
		{	
		if (size() <= _Pos)
			_Xran();
		return (*(this->_Myfirst() + _Pos));
		}

	reference at(size_type _Pos)
		{	
		if (size() <= _Pos)
			_Xran();
		return (*(this->_Myfirst() + _Pos));
		}

	const_reference operator[](size_type _Pos) const
		{	
 










		return (*(this->_Myfirst() + _Pos));
		}

	reference operator[](size_type _Pos)
		{	
 










		return (*(this->_Myfirst() + _Pos));
		}

	_Ty * data() noexcept
		{	
		return (_Unfancy(this->_Myfirst()));
		}

	const _Ty * data() const noexcept
		{	
		return (_Unfancy(this->_Myfirst()));
		}

	reference front()
		{	
		return (*begin());
		}

	const_reference front() const
		{	
		return (*begin());
		}

	reference back()
		{	
		return (*(end() - 1));
		}

	const_reference back() const
		{	
		return (*(end() - 1));
		}

	void push_back(const value_type& _Val)
		{	
		if (_Inside(::std:: addressof(_Val)))
			{	
			size_type _Idx = ::std:: addressof(_Val) - _Unfancy(this->_Myfirst());
			if (this->_Mylast() == this->_Myend())
				_Reserve(1);
			_Orphan_range(this->_Mylast(), this->_Mylast());
			this->_Getal().construct(_Unfancy(this->_Mylast()),
				this->_Myfirst()[_Idx]);
			++this->_Mylast();
			}
		else
			{	
			if (this->_Mylast() == this->_Myend())
				_Reserve(1);
			_Orphan_range(this->_Mylast(), this->_Mylast());
			this->_Getal().construct(_Unfancy(this->_Mylast()),
				_Val);
			++this->_Mylast();
			}
		}

 













	void pop_back()
		{	
		this->_Getal().destroy(_Unfancy(this->_Mylast() - 1));
		--this->_Mylast();
		}
 

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			void>::type
		assign(_Iter _First, _Iter _Last)
		{	
		clear();
		_Assign(_First, _Last, _Iter_cat_t<_Iter>());
		}

	template<class _Iter>
		void _Assign(_Iter _First, _Iter _Last,
			input_iterator_tag)
		{	
		for (; _First != _Last; ++_First)
			emplace_back(*_First);
		}

	template<class _Iter>
		void _Assign(_Iter _First, _Iter _Last,
			forward_iterator_tag)
		{	
		size_type _Newsize = ::std:: distance(_First, _Last);

		if (capacity() < _Newsize)
			{	
			size_type _Newcapacity = _Grow_to(_Newsize);
			_Tidy();
			_Buy(_Newcapacity);
			}

		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
		}

	void assign(size_type _Count, const value_type& _Val)
		{	
		clear();
		insert(begin(), _Count, _Val);
		}

	iterator insert(const_iterator _Where, const _Ty& _Val)
		{	
		return (_Insert_n(_Where, (size_type)1, _Val));
		}

	iterator insert(const_iterator _Where, size_type _Count,
		const _Ty& _Val)
		{	
		return (_Insert_n(_Where, _Count, _Val));
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			iterator>::type
		insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
		size_type _Off = (_Where)._Ptr - this->_Myfirst();
		_Insert(_Where, _First, _Last, _Iter_cat_t<_Iter>());
		return (begin() + _Off);
		}

	template<class _Iter>
		void _Insert(const_iterator _Where,
			_Iter _First, _Iter _Last,
				input_iterator_tag)
		{	
		size_type _Off = (_Where)._Ptr - this->_Myfirst();

 




		if (_First != _Last)
			{	
			size_type _Oldsize = size();

			try {
			for (; _First != _Last; ++_First)
				push_back(*_First);	

			} catch (...) {
			erase(begin() + _Oldsize, end());
			throw;
			}

			::std:: rotate(begin() + _Off, begin() + _Oldsize, end());
			}
		}

	template<class _Iter>
		void _Insert(const_iterator _Where,
			_Iter _First, _Iter _Last,
				forward_iterator_tag)
		{	
 







		size_type _Count = ::std:: distance(_First, _Last);
		if (_Count == 0)
			;
		else if (_Unused_capacity() < _Count)
			{	
			if (max_size() - size() < _Count)
				_Xlen();	

			size_type _Capacity = _Grow_to(size() + _Count);
			pointer _Newvec = this->_Getal().allocate(_Capacity);
			pointer _Ptr = _Newvec;

			try {
			_Ptr = _Umove(this->_Myfirst(), (_Where)._Ptr,
				_Newvec);	
			_Ptr = _Ucopy(_First, _Last, _Ptr);	
			_Umove((_Where)._Ptr, this->_Mylast(),
				_Ptr);	
			} catch (...) {
			_Destroy(_Newvec, _Ptr);
			this->_Getal().deallocate(_Newvec, _Capacity);
			throw;
			}

			_Count += size();
			if (this->_Myfirst() != pointer())
				{	
				_Destroy(this->_Myfirst(), this->_Mylast());
				this->_Getal().deallocate(this->_Myfirst(),
					this->_Myend() - this->_Myfirst());
				}

			this->_Orphan_all();
			this->_Myend() = _Newvec + _Capacity;
			this->_Mylast() = _Newvec + _Count;
			this->_Myfirst() = _Newvec;
			}
		else
			{	
			_Ucopy(_First, _Last, this->_Mylast());
			::std:: rotate((_Where)._Ptr, this->_Mylast(),
				this->_Mylast() + _Count);
			this->_Mylast() += _Count;
			_Orphan_range((_Where)._Ptr, this->_Mylast());
			}
		}

 














	iterator erase(const_iterator _Where)
		{	
		_Move_unchecked((_Where)._Ptr + 1, this->_Mylast(),
			(_Where)._Ptr);
		_Destroy(this->_Mylast() - 1, this->_Mylast());
		--this->_Mylast();
		return (_Make_iter(_Where));
		}
 

	iterator erase(const_iterator _First_arg,
		const_iterator _Last_arg)
		{	
		if (_First_arg == begin() && _Last_arg == end())
			clear();
		else if (_First_arg != _Last_arg)
			{	
			iterator _First = _Make_iter(_First_arg);
			iterator _Last = _Make_iter(_Last_arg);

			if (_First != _Last)
				{	
 









				pointer _Ptr = _Move_unchecked((_Last)._Ptr, this->_Mylast(),
					(_First)._Ptr);
 

				_Destroy(_Ptr, this->_Mylast());
				this->_Mylast() = _Ptr;
				}
			}
		return (_Make_iter(_First_arg));
		}

	void _Pop_back_n(size_type _Count)
		{	
		pointer _Ptr = this->_Mylast() - _Count;

 



		_Destroy(_Ptr, this->_Mylast());
		this->_Mylast() = _Ptr;
		}

	void clear() noexcept
		{	
		this->_Orphan_all();
		_Destroy(this->_Myfirst(), this->_Mylast());
		this->_Mylast() = this->_Myfirst();
		}

	void swap(_Myt& _Right)
		noexcept(_Alty::propagate_on_container_swap::value || _Alty::is_always_equal::value)
		{	
		if (this != &_Right)
			{	
			_Pocs(this->_Getal(), _Right._Getal());
			this->_Swap_all(_Right);
			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
			_Swap_adl(this->_Mylast(), _Right._Mylast());
			_Swap_adl(this->_Myend(), _Right._Myend());
			}
		}

protected:
	bool _Buy(size_type _Capacity)
		{	
		this->_Myfirst() = pointer();
		this->_Mylast() = pointer();
		this->_Myend() = pointer();

		if (_Capacity == 0)
			return (false);
		else if (max_size() < _Capacity)
			_Xlen();	
		else
			{	
			this->_Myfirst() = this->_Getal().allocate(_Capacity);
			this->_Mylast() = this->_Myfirst();
			this->_Myend() = this->_Myfirst() + _Capacity;
			}
		return (true);
		}

	void _Destroy(pointer _First, pointer _Last)
		{	
		_Destroy_range(_First, _Last, this->_Getal());
		}

	size_type _Grow_to(size_type _Count) const
		{	
		size_type _Capacity = capacity();

		_Capacity = max_size() - _Capacity / 2 < _Capacity
			? 0 : _Capacity + _Capacity / 2;	
		if (_Capacity < _Count)
			_Capacity = _Count;
		return (_Capacity);
		}

	bool _Inside(const value_type *_Ptr) const
		{	
		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);
		}

	void _Reallocate(size_type _Count)
		{	
		pointer _Ptr = this->_Getal().allocate(_Count);

		try {
		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
		} catch (...) {
		this->_Getal().deallocate(_Ptr, _Count);
		throw;
		}

		size_type _Size = size();
		if (this->_Myfirst() != pointer())
			{	
			_Destroy(this->_Myfirst(), this->_Mylast());
			this->_Getal().deallocate(this->_Myfirst(),
				this->_Myend() - this->_Myfirst());
			}

		this->_Orphan_all();
		this->_Myend() = _Ptr + _Count;
		this->_Mylast() = _Ptr + _Size;
		this->_Myfirst() = _Ptr;
		}

	void _Reserve(size_type _Count)
		{	
		if (_Unused_capacity() < _Count)
			{	
			if (max_size() - size() < _Count)
				_Xlen();
			_Reallocate(_Grow_to(size() + _Count));
			}
		}

	void _Tidy()
		{	
		if (this->_Myfirst() != pointer())
			{	
			this->_Orphan_all();
			_Destroy(this->_Myfirst(), this->_Mylast());
			this->_Getal().deallocate(this->_Myfirst(),
				this->_Myend() - this->_Myfirst());
			this->_Myfirst() = pointer();
			this->_Mylast() = pointer();
			this->_Myend() = pointer();
			}
		}

	template<class _Iter>
		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
		{	
		return (_Uninitialized_copy(_First, _Last,
			_Ptr, this->_Getal()));
		}

	template<class _Iter>
		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
		{	
		return (_Uninitialized_move(_First, _Last,
			_Ptr, this->_Getal()));
		}

	iterator _Insert_n(const_iterator _Where,
		size_type _Count, const value_type& _Val)
		{	
 






		size_type _Off = (_Where)._Ptr - this->_Myfirst();
		if (_Count == 0)
			;
		else if (_Unused_capacity() < _Count)
			{	
			if (max_size() - size() < _Count)
				_Xlen();	

			size_type _Capacity = _Grow_to(size() + _Count);
			pointer _Newvec = this->_Getal().allocate(_Capacity);
			size_type _Whereoff = (_Where)._Ptr - this->_Myfirst();
			int _Ncopied = 0;

			try {
			_Ufill(_Newvec + _Whereoff, _Count,
				::std:: addressof(_Val));	
			++_Ncopied;
			_Umove(this->_Myfirst(), (_Where)._Ptr,
				_Newvec);	
			++_Ncopied;
			_Umove((_Where)._Ptr, this->_Mylast(),
				_Newvec + (_Whereoff + _Count));	
			} catch (...) {
			if (1 < _Ncopied)
				_Destroy(_Newvec, _Newvec + _Whereoff);
			if (0 < _Ncopied)
				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
			this->_Getal().deallocate(_Newvec, _Capacity);
			throw;
			}

			_Count += size();
			if (this->_Myfirst() != pointer())
				{	
				_Destroy(this->_Myfirst(), this->_Mylast());
				this->_Getal().deallocate(this->_Myfirst(),
					this->_Myend() - this->_Myfirst());
				}

			this->_Orphan_all();
			this->_Myend() = _Newvec + _Capacity;
			this->_Mylast() = _Newvec + _Count;
			this->_Myfirst() = _Newvec;
			}
		else if ((size_type)(this->_Mylast() - (_Where)._Ptr)
			< _Count)
			{	
			value_type _Tmp = _Val;	

			_Umove((_Where)._Ptr, this->_Mylast(),
				(_Where)._Ptr + _Count);	

			try {
			_Ufill(this->_Mylast(),
				_Count - (this->_Mylast() - (_Where)._Ptr),
				::std:: addressof(_Tmp));	
			} catch (...) {
			_Destroy((_Where)._Ptr + _Count,
				this->_Mylast() + _Count);
			throw;
			}

			this->_Mylast() += _Count;
			_Orphan_range((_Where)._Ptr, this->_Mylast());
			::std:: fill((_Where)._Ptr, this->_Mylast() - _Count,
				_Tmp);	
			}
		else
			{	
			value_type _Tmp = _Val;	

			pointer _Oldend = this->_Mylast();
			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
				this->_Mylast());	

			_Orphan_range((_Where)._Ptr, this->_Mylast());
			_Move_backward_unchecked((_Where)._Ptr, _Oldend - _Count,
				_Oldend);	
			::std:: fill((_Where)._Ptr,
				(_Where)._Ptr + _Count, _Tmp);	
			}
		return (begin() + _Off);
		}

	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
		{	
		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
		return (_Ptr + _Count);
		}

	[[noreturn]] void _Xlen() const
		{	
		_Xlength_error("vector<T> too long");
		}

	[[noreturn]] void _Xran() const
		{	
		_Xout_of_range("invalid vector<T> subscript");
		}

 


















	void _Orphan_range(pointer, pointer) const
		{	
		}
 
	};

		

template<class _Ty,
	class _Alloc> inline
	void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

template<class _Ty,
	class _Alloc> inline
	bool operator==(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (_Left.size() == _Right.size()
		&& ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator!=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator<(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
		_Right.begin(), _Right.end()));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator>(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Alloc> inline
	bool operator<=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator>=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}




typedef unsigned int _Vbase;	
const int _VBITS = 8 * sizeof (_Vbase);	

		
template<class _Alloc>
	class _Vb_iter_base
		: public _Iterator012<random_access_iterator_tag,
			bool,
			typename _Alloc::difference_type,
			bool *,
			bool,
			_Iterator_base>
	{	
public:
	typedef typename _Alloc::size_type _Sizet;
	typedef vector<bool, _Alloc> _Mycont;

	_Vb_iter_base()
		: _Myptr(0), _Myoff(0)
		{	
		}

	_Vb_iter_base(const _Vbase *_Ptr, _Sizet _Off,
		const _Container_base *_Mypvbool)
		: _Myptr(_Ptr), _Myoff(_Off)
		{	
		this->_Adopt(_Mypvbool);
		}

	void _Advance(_Sizet _Off)
		{	
		_Myoff += _Off;
		_Myptr += _Myoff / _VBITS;
		_Myoff %= _VBITS;
		}

	int _Valid(_Sizet _Inc) const
		{	
 








		(void) _Inc;
		return (-1);
 
		}

	const _Vbase *_Myptr;
	_Sizet _Myoff;
	};

		
template<class _Alloc>
	class _Vb_reference
		: public _Vb_iter_base<_Alloc>
	{	
	typedef _Vb_iter_base<_Alloc> _Mybase;
	typedef _Vb_reference<_Alloc> _Mytype;

	_Vb_reference() noexcept
		{	
		}

public:
	_Vb_reference(const _Mybase& _Right)
		: _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont())
		{	
		}

	_Mytype& operator=(const _Mytype& _Right) noexcept
		{	
		return (*this = bool(_Right));
		}

	_Mytype& operator=(bool _Val) noexcept
		{	
		if (_Val)
			*(_Vbase *)_Getptr() |= _Mask();
		else
			*(_Vbase *)_Getptr() &= (~_Mask());	
		return (*this);
		}

	void flip() noexcept
		{	
		*(_Vbase *)_Getptr() ^= _Mask();
		}

	operator bool() const noexcept
		{	
		return ((*_Getptr() & _Mask()) != 0);
		}

	const _Vbase *_Getptr() const
		{	
 













		return (this->_Myptr);
		}

protected:
	_Vbase _Mask() const
		{	
		return ((_Vbase)(1) << this->_Myoff);
		}
	};

template<class _Alloc> inline
	void swap(_Vb_reference<_Alloc> _Left,
		_Vb_reference<_Alloc> _Right)
	{	
	bool _Val = _Left;	
	_Left = _Right;
	_Right = _Val;
	}

		
template<class _Alloc>
	class _Vb_const_iterator
		: public _Vb_iter_base<_Alloc>
	{	
public:
	typedef _Vb_iter_base<_Alloc> _Mybase;
	typedef _Vb_const_iterator<_Alloc> _Mytype;

	typedef _Vb_reference<_Alloc> _Reft;
	typedef bool const_reference;

	typedef random_access_iterator_tag iterator_category;
	typedef bool value_type;
	typedef typename _Alloc::size_type size_type;
	typedef typename _Alloc::difference_type difference_type;
	typedef const_reference *pointer;
	typedef const_reference reference;

	_Vb_const_iterator()
		{	
		}

	_Vb_const_iterator(const _Vbase *_Ptr, const _Container_base *_Mypvbool)
		: _Mybase(_Ptr, 0, _Mypvbool)
		{	
		}

	const_reference operator*() const
		{	
		return (_Reft(*this));
		}

	_Mytype& operator++()
		{	
		_Inc();
		return (*this);
		}

	_Mytype operator++(int)
		{	
		_Mytype _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Mytype& operator--()
		{	
		_Dec();
		return (*this);
		}

	_Mytype operator--(int)
		{	
		_Mytype _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Mytype& operator+=(difference_type _Off)
		{	
		if (_Off < 0 && this->_Myoff < 0 - (size_type)_Off)
			{	
			this->_Myoff += _Off;
			this->_Myptr -= 1 + ((size_type)(-1) - this->_Myoff) / _VBITS;
			this->_Myoff %= _VBITS;
			}
		else
			{	
			this->_Myoff += _Off;
			this->_Myptr += this->_Myoff / _VBITS;
			this->_Myoff %= _VBITS;
			}
		return (*this);
		}

	_Mytype operator+(difference_type _Off) const
		{	
		_Mytype _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Mytype& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Mytype operator-(difference_type _Off) const
		{	
		_Mytype _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(
		const _Mytype& _Right) const
		{	
		_Compat(_Right);
		return (_VBITS * (this->_Myptr - _Right._Myptr)
			+ (difference_type)this->_Myoff
			- (difference_type)_Right._Myoff);
		}

	const_reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Mytype& _Right) const
		{	
		_Compat(_Right);
		return (this->_Myptr == _Right._Myptr
			&& this->_Myoff == _Right._Myoff);
		}

	bool operator!=(const _Mytype& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Mytype& _Right) const
		{	
		_Compat(_Right);
		return (this->_Myptr < _Right._Myptr
			|| (this->_Myptr == _Right._Myptr
				&& this->_Myoff < _Right._Myoff));
		}

	bool operator>(const _Mytype& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Mytype& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Mytype& _Right) const
		{	
		return (!(*this < _Right));
		}

 













	void _Compat(const _Mytype&) const
		{	
		}
 

	void _Dec()
		{	
		if (this->_Myoff != 0)
			--this->_Myoff;
		else
			{	
 











			this->_Myoff = _VBITS - 1;
			--this->_Myptr;
			}
		}

	void _Inc()
		{	
		if (this->_Myoff < _VBITS - 1)
			++this->_Myoff;
		else
			{	
 











			this->_Myoff = 0;
			++this->_Myptr;
			}
		}
	};

template<class _Alloc> inline
	_Vb_const_iterator<_Alloc> operator+(
		typename _Alloc::difference_type _Off,
		_Vb_const_iterator<_Alloc> _Right)
		{	
		return (_Right += _Off);
		}

template<class _Alloc>
	struct _Is_checked_helper<_Vb_const_iterator<_Alloc> >
		: public true_type
	{	
	};

	
template<class _Alloc>
	class _Vb_iterator
		: public _Vb_const_iterator<_Alloc>
	{	
public:
	typedef _Vb_const_iterator<_Alloc> _Mybase;
	typedef _Vb_iterator<_Alloc> _Mytype;

	typedef _Vb_reference<_Alloc> _Reft;
	typedef bool const_reference;

	typedef random_access_iterator_tag iterator_category;
	typedef bool value_type;
	typedef typename _Alloc::size_type size_type;
	typedef typename _Alloc::difference_type difference_type;
	typedef _Reft *pointer;
	typedef _Reft reference;

	_Vb_iterator()
		{	
		}

	_Vb_iterator(_Vbase *_Ptr, _Container_base *_Mypvbool)
		: _Mybase(_Ptr, _Mypvbool)
		{	
		}

	reference operator*() const
		{	
		return (_Reft(*this));
		}

	_Mytype& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Mytype operator++(int)
		{	
		_Mytype _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Mytype& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Mytype operator--(int)
		{	
		_Mytype _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Mytype& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Mytype operator+(difference_type _Off) const
		{	
		_Mytype _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Mytype& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Mytype operator-(difference_type _Off) const
		{	
		_Mytype _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Alloc> inline
	_Vb_iterator<_Alloc> operator+(typename _Alloc::difference_type _Off,
		_Vb_iterator<_Alloc> _Right)
		{	
		return (_Right += _Off);
		}

template<class _Alloc>
	struct _Is_checked_helper<_Vb_iterator<_Alloc> >
		: public true_type
	{	
	};

		
template<class _Alloc>
	class _Vb_val
		: public _Container_base
	{	
public:
	typedef vector<_Vbase, _Alloc> _Vectype;
	typedef typename _Vectype::_Alty _Alty;
	typedef typename _Alty::size_type size_type;

	_Vb_val(size_type _Count, const bool& _Val)
		: _Myvec(_Nw(_Count), (_Vbase) (_Val ? -1 : 0))
		{	
		_Alloc_proxy();
		_Mysize = 0;
		}

	_Vb_val(size_type _Count, const bool& _Val, const _Alloc& _Al)
		: _Myvec(_Nw(_Count), (_Vbase)(_Val ? -1 : 0), _Al)
		{	
		_Alloc_proxy();
		_Mysize = 0;
		}

	_Vb_val(const _Vb_val& _Right)
		: _Myvec(_Right._Myvec),
			_Mysize(_Right._Mysize)
		{	
		_Alloc_proxy();
		}

	_Vb_val(const _Vb_val& _Right, const _Alloc& _Al)
		: _Myvec(_Right._Myvec, _Al),
			_Mysize(_Right._Mysize)
		{	
		_Alloc_proxy();
		}

	_Vb_val(_Vb_val&& _Right)
		: _Myvec(::std:: forward<_Vectype>(_Right._Myvec)),
			_Mysize(_Right._Mysize)
		{	
		_Right._Mysize = 0;
		_Alloc_proxy();
		}

	_Vb_val(_Vb_val&& _Right, const _Alloc& _Al)
		: _Myvec(::std:: forward<_Vectype>(_Right._Myvec), _Al),
			_Mysize(_Right._Mysize)
		{	
		_Right._Mysize = 0;
		_Alloc_proxy();
		}

	~_Vb_val() noexcept
		{	
		_Free_proxy();
		}

 
	void _Alloc_proxy()
		{	
		}

	void _Free_proxy()
		{	
		}

 




















	static size_type _Nw(size_type _Count)
		{	
		return ((_Count + _VBITS - 1) / _VBITS);
		}

	_Vectype _Myvec;	
	typename _Alty::size_type _Mysize;	
	};

		

template<class _Alloc>
	class vector<bool, _Alloc>
		: public _Vb_val<_Alloc>
	{	
public:
	typedef vector<bool, _Alloc> _Myt;
	typedef _Vb_val<_Alloc> _Mybase;
	typedef typename _Mybase::_Alty _Alty;
	typedef typename _Mybase::_Vectype _Vectype;

	typedef typename _Alty::size_type size_type;
	typedef typename _Alty::difference_type difference_type;
	typedef bool _Ty;
	typedef _Alloc allocator_type;

	typedef _Vb_reference<_Alty> reference;
	typedef bool const_reference;
	typedef bool value_type;

	typedef reference _Reft;
	typedef _Vb_const_iterator<_Alty> const_iterator;
	typedef _Vb_iterator<_Alty> iterator;

	typedef iterator pointer;
	typedef const_iterator const_pointer;
	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	static const int _VBITS = ::std:: _VBITS;
	enum {_EEN_VBITS = _VBITS};	
	vector()
		: _Mybase(0, false)
		{	
		}

	explicit vector(const _Alloc& _Al)
		: _Mybase(0, false, _Al)
		{	
		}

	explicit vector(size_type _Count, const _Alloc& _Al = _Alloc())
		: _Mybase(_Count, false, _Al)
		{	
		_Trim(_Count);
		}

	vector(size_type _Count, const bool& _Val, const _Alloc& _Al = _Alloc())
		: _Mybase(_Count, _Val, _Al)
		{	
		_Trim(_Count);
		}

	vector(const _Myt& _Right)
		: _Mybase(_Right)
		{	
		}

	vector(const _Myt& _Right, const _Alloc& _Al)
		: _Mybase(_Right, _Al)
		{	
		}

	template<class _Iter,
		class = typename enable_if<_Is_iterator<_Iter>::value,
			void>::type>
		vector(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
		: _Mybase(0, false, _Al)
		{	
		_BConstruct(_First, _Last);
		}

	template<class _Iter>
		void _BConstruct(_Iter _First, _Iter _Last)
		{	
		insert(begin(), _First, _Last);
		}

	vector(_Myt&& _Right)
		: _Mybase(::std:: forward<_Myt>(_Right))
		{	
		}

	vector(_Myt&& _Right, const _Alloc& _Al)
		: _Mybase(::std:: forward<_Myt>(_Right), _Al)
		{	
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			clear();

			if (_Alty::propagate_on_container_move_assignment::value
				&& this->get_allocator() != _Right.get_allocator())
				{	
				this->_Free_proxy();
				this->_Myvec = ::std:: move(_Right._Myvec);
				this->_Alloc_proxy();
				}
			else
				this->_Myvec = ::std:: move(_Right._Myvec);


			this->_Mysize = _Right._Mysize;
			_Right._Mysize = 0;
			}
		return (*this);
		}

	template<class... _Valty>
		void emplace_back(_Valty&&... _Val)
		{	
		bool _Tmp(::std:: forward<_Valty>(_Val)...);
		push_back(_Tmp);
		}

	template<class... _Valty>
		iterator emplace(const_iterator _Where, _Valty&&... _Val)
		{	
		bool _Tmp(::std:: forward<_Valty>(_Val)...);
		return (insert(_Where, _Tmp));
		}


	vector(::std:: initializer_list<bool> _Ilist,
			const _Alloc& _Al = allocator_type())
		: _Mybase(0, false, _Al)
		{	
		insert(begin(), _Ilist.begin(), _Ilist.end());
		}

	_Myt& operator=(::std:: initializer_list<bool> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		return (*this);
		}

	void assign(::std:: initializer_list<bool> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		}

	iterator insert(const_iterator _Where,
			::std:: initializer_list<bool> _Ilist)
		{	
		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
		}

	~vector() noexcept
		{	
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		this->_Mysize = _Right._Mysize;
		this->_Myvec = _Right._Myvec;
		return (*this);
		}

	void reserve(size_type _Count)
		{	
		this->_Myvec.reserve(this->_Nw(_Count));
		}

	size_type capacity() const noexcept
		{	
		return (this->_Myvec.capacity() * _VBITS);
		}

	iterator begin() noexcept
		{	
		return (iterator(this->_Myvec.data(), this));
		}

	const_iterator begin() const noexcept
		{	
		return (const_iterator(this->_Myvec.data(), this));
		}

	iterator end() noexcept
		{	
		iterator _Tmp = begin();
		if (0 < this->_Mysize)
			_Tmp += this->_Mysize;
		return (_Tmp);
		}

	const_iterator end() const noexcept
		{	
		const_iterator _Tmp = begin();
		if (0 < this->_Mysize)
			_Tmp += this->_Mysize;
		return (_Tmp);
		}

	const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	const_iterator cend() const noexcept
		{	
		return (end());
		}

	const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	void shrink_to_fit()
		{	
		if (this->_Myvec._Has_unused_capacity())
			{	
			_Myt _Tmp(*this);
			swap(_Tmp);
			}
		}

	iterator _Make_iter(const_iterator _Where)
		{	
		iterator _Tmp = begin();
		if (0 < this->_Mysize)
			_Tmp += _Where - begin();
		return (_Tmp);
		}

	reverse_iterator rbegin() noexcept
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend() noexcept
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator(begin()));
		}

	void resize(size_type _Newsize, bool _Val = false)
		{	
		if (size() < _Newsize)
			_Insert_n(end(), _Newsize - size(), _Val);
		else if (_Newsize < size())
			erase(begin() + _Newsize, end());
		}

	size_type size() const noexcept
		{	
		return (this->_Mysize);
		}

	size_type max_size() const noexcept
		{	
		const size_type _Maxsize = this->_Myvec.max_size();
		return (_Maxsize < (size_type)(-1) / _VBITS
			? _Maxsize * _VBITS : (size_type)(-1));
		}

	bool empty() const noexcept
		{	
		return (size() == 0);
		}

	_Alloc get_allocator() const noexcept
		{	
		_Alloc _Ret(this->_Myvec.get_allocator());
		return (_Ret);
		}

	const_reference at(size_type _Off) const
		{	
		if (size() <= _Off)
			_Xran();
		return ((*this)[_Off]);
		}

	reference at(size_type _Off)
		{	
		if (size() <= _Off)
			_Xran();
		return ((*this)[_Off]);
		}

	const_reference operator[](size_type _Off) const
		{	
		const_iterator _It = begin();
		_It._Advance(_Off);
		return (*_It);
		}

	reference operator[](size_type _Off)
		{	
		iterator _It = begin();
		_It._Advance(_Off);
		return (*_It);
		}

	reference front()
		{	
		return (*begin());
		}

	const_reference front() const
		{	
		return (*begin());
		}

	reference back()
		{	
		return (*(end() - 1));
		}

	const_reference back() const
		{	
		return (*(end() - 1));
		}

	void push_back(const bool& _Val)
		{	
		insert(end(), _Val);
		}

	void pop_back()
		{	
		erase(end() - 1);
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			void>::type
		assign(_Iter _First, _Iter _Last)
		{	
		erase(begin(), end());
		insert(begin(), _First, _Last);
		}

	void assign(size_type _Count, const bool& _Val)
		{	
		erase(begin(), end());
		_Insert_n(begin(), _Count, _Val);
		}

	iterator insert(const_iterator _Where, const bool& _Val)
		{	
		return (_Insert_n(_Where, (size_type)1, _Val));
		}

	iterator insert(const_iterator _Where, size_type _Count,
		const bool& _Val)
		{	
		return (_Insert_n(_Where, _Count, _Val));
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			iterator>::type
		insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
		size_type _Off = _Where - begin();
		_Insert(_Where, _First, _Last, _Iter_cat_t<_Iter>());
		return (begin() + _Off);
		}

	template<class _Iter>
		void _Insert(const_iterator _Where,
			_Iter _First, _Iter _Last,
				input_iterator_tag)
		{	
		size_type _Off = _Where - begin();

		for (; _First != _Last; ++_First, (void)++_Off)
			insert(begin() + _Off, *_First);
		}

	template<class _Iter>
		void _Insert(const_iterator _Where,
			_Iter _First, _Iter _Last,
			forward_iterator_tag)
		{	
		;
		size_type _Count = ::std:: distance(_First, _Last);
		size_type _Off = _Insert_x(_Where, _Count);
		::std:: copy(_First, _Last, begin() + _Off);
		}

	iterator erase(const_iterator _Where_arg)
		{	
		iterator _Where = _Make_iter(_Where_arg);
		size_type _Off = _Where - begin();

 






		::std:: copy(_Where + 1, end(), _Where);
 

		_Trim(this->_Mysize - 1);
		return (begin() + _Off);
		}

	iterator erase(const_iterator _First_arg,
		const_iterator _Last_arg)
		{	
		iterator _First = _Make_iter(_First_arg);
		iterator _Last = _Make_iter(_Last_arg);
		size_type _Off = _First - begin();

		if (_First != _Last)
			{	
 








			iterator _Next = ::std:: copy(_Last, end(), _First);
			_Trim(_Next - begin());
 
			}
		return (begin() + _Off);
		}

	void clear() noexcept
		{	
		erase(begin(), end());
		}

	void flip() noexcept
		{	
		for (typename _Vectype::iterator _Next = this->_Myvec.begin();
			_Next != this->_Myvec.end(); ++_Next)
			*_Next = (_Vbase)~*_Next;
		_Trim(this->_Mysize);
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			this->_Swap_all(_Right);
			this->_Myvec.swap(_Right._Myvec);
			::std:: swap(this->_Mysize, _Right._Mysize);
			}
		}

	static void swap(reference _Left, reference _Right) noexcept
		{	
		bool _Val = _Left;	

		_Left = _Right;
		_Right = _Val;
		}

	size_t hash() const
		{	
		return (_Hash_seq((const unsigned char *)this->_Myvec.data(),
			this->_Myvec.size() * sizeof (_Vbase)));
		}

	iterator _Insert_n(const_iterator _Where,
		size_type _Count, const bool& _Val)
		{	
		size_type _Off = _Insert_x(_Where, _Count);
		::std:: fill(begin() + _Off, begin() + (_Off + _Count), _Val);
		return (begin() + _Off);
		}

	size_type _Insert_x(const_iterator _Where, size_type _Count)
		{	
		size_type _Off = _Where - begin();

 





		if (_Count == 0)
			;
		else if (max_size() - size() < _Count)
			_Xlen();	
		else
			{	
			this->_Myvec.resize(this->_Nw(size() + _Count), 0);
			if (empty())
				this->_Mysize += _Count;
			else
				{	
				iterator _Oldend = end();
				this->_Mysize += _Count;
				::std:: copy_backward(begin() + _Off, _Oldend, end());
				}

 


			}
		return (_Off);
		}

 
























	void _Orphan_range(size_type, size_type) const
		{	
		}
 

	void _Trim(size_type _Size)
		{	
		if (max_size() < _Size)
			_Xlen();	
		size_type _Words = this->_Nw(_Size);

		if (_Words < this->_Myvec.size())
			this->_Myvec.erase(this->_Myvec.begin() + _Words,
				this->_Myvec.end());
		this->_Mysize = _Size;
		_Size %= _VBITS;
		if (0 < _Size)
			this->_Myvec[_Words - 1] &= ((_Vbase)(1) << _Size) - 1;
		}

	[[noreturn]] void _Xlen() const
		{	
		_Xlength_error("vector<bool> too long");
		}

	[[noreturn]] void _Xran() const
		{	
		_Xout_of_range("invalid vector<bool> subscript");
		}
	};

template<class _Alloc> inline
	bool operator==(const vector<bool, _Alloc>& _Left,
		const vector<bool, _Alloc>& _Right)
	{	
	return (_Left.size() == _Right.size()
		&& ::std:: equal(_Left._Myvec.begin(), _Left._Myvec.end(),
			_Right._Myvec.begin()));
	}

template<class _Alloc> inline
	bool operator!=(const vector<bool, _Alloc>& _Left,
		const vector<bool, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

	
template<class _Alloc>
	struct hash<vector<bool, _Alloc> >
	{	
	typedef vector<bool, _Alloc> argument_type;
	typedef size_t result_type;

	size_t operator()(const argument_type& _Keyval) const
		{	
		return (_Keyval.hash());
		}
	};
}

 
 #pragma warning(pop)
 #pragma pack(pop)











#pragma once






#pragma once







 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
	
template<bool _Same,
	class _Dest,
	class... _Srcs>
	struct _Tuple_implicit_val0
		: false_type
	{	
	};

template<class... _Dests,
	class... _Srcs>
	struct _Tuple_implicit_val0<true, tuple<_Dests...>, _Srcs...>
		: conjunction<
			is_constructible<_Dests, _Srcs>...,
			is_convertible<_Srcs, _Dests>...
		>::type
	{	
	};

template<class _Dest,
	class... _Srcs>
	struct _Tuple_implicit_val
		: _Tuple_implicit_val0<tuple_size<_Dest>::value == sizeof...(_Srcs), _Dest, _Srcs...>::type
	{	
	};

template<class _Dest,
	class... _Srcs>
	using _Tuple_implicit_t = enable_if_t<_Tuple_implicit_val<_Dest, _Srcs...>::value, int>;

	
template<bool _Same,
	class _Dest,
	class... _Srcs>
	struct _Tuple_explicit_val0
		: false_type
	{	
	};

template<class... _Dests,
	class... _Srcs>
	struct _Tuple_explicit_val0<true, tuple<_Dests...>, _Srcs...>
		: conjunction<
			is_constructible<_Dests, _Srcs>...,
			negation<conjunction<is_convertible<_Srcs, _Dests>...>>
		>::type
	{	
	};

template<class _Dest,
	class... _Srcs>
	struct _Tuple_explicit_val
		: _Tuple_explicit_val0<tuple_size<_Dest>::value == sizeof...(_Srcs), _Dest, _Srcs...>::type
	{	
	};

template<class _Dest,
	class... _Srcs>
	using _Tuple_explicit_t = enable_if_t<_Tuple_explicit_val<_Dest, _Srcs...>::value, int>;

	
template<class _Myt,
	class... _Other>
	struct _Tuple_convert_copy
	{	
	typedef int type;
	};

template<class _This,
	class _Uty>
	struct _Tuple_convert_copy<tuple<_This>, _Uty>
		: enable_if<!is_same<_This, _Uty>::value
			&& !is_constructible<_This, const tuple<_Uty>&>::value
			&& !is_convertible<const tuple<_Uty>&, _This>::value, int>
	{	
	};

template<class _Myt,
	class... _Other>
	using _Tuple_convert_copy_t = typename _Tuple_convert_copy<_Myt, _Other...>::type;

	
template<class _Myt,
	class... _Other>
	struct _Tuple_convert_move
	{	
	typedef int type;
	};

template<class _This,
	class _Uty>
	struct _Tuple_convert_move<tuple<_This>, _Uty>
		: enable_if<!is_same<_This, _Uty>::value
			&& !is_constructible<_This, tuple<_Uty> >::value
			&& !is_convertible<tuple<_Uty>, _This>::value, int>
	{	
	};

template<class _Myt,
	class... _Other>
	using _Tuple_convert_move_t = typename _Tuple_convert_move<_Myt, _Other...>::type;

	
template<class _Myt,
	class _This2,
	class... _Rest2>
	struct _Tuple_perfect_val
		: true_type
	{	
	};

template<class _Myt,
	class _This2>
	struct _Tuple_perfect_val<_Myt, _This2>
		: negation<is_same<_Myt, remove_const_t<remove_reference_t<_This2>>>>::type
	{	
	};

	
struct _Ignore
	{	
	template<class _Ty>
		void operator=(const _Ty&) const
		{	
		}
	};

constexpr _Ignore ignore{};

		
struct _Tuple_alloc_t
	{	
	};

constexpr _Tuple_alloc_t _Tuple_alloc{};

	
template<class _Ty>
	struct _Tuple_val
	{	
	constexpr _Tuple_val()
		: _Val()
		{	
		}

	template<class _Other>
		constexpr _Tuple_val(_Other&& _Arg)
		: _Val(::std:: forward<_Other>(_Arg))
		{	
		}

	template<class _Other>
		_Tuple_val& operator=(_Other&& _Right)
		{	
		_Val = ::std:: forward<_Other>(_Right);
		return (*this);
		}

	template<class _Alloc,
		class... _Other>
		_Tuple_val(const _Alloc&,
			typename enable_if<!uses_allocator<_Ty, _Alloc>::value,
				_Tuple_alloc_t>::type, _Other&&... _Arg)
		: _Val(::std:: forward<_Other>(_Arg)...)
		{	
		}

	template<class _Alloc,
		class... _Other>
		_Tuple_val(const _Alloc& _Al,
			typename enable_if<uses_allocator<_Ty, _Alloc>::value
				&& is_constructible<_Ty,
					allocator_arg_t, _Alloc>::value,
				_Tuple_alloc_t>::type, _Other&&... _Arg)
		: _Val(allocator_arg, _Al, ::std:: forward<_Other>(_Arg)...)
		{	
		}

	template<class _Alloc,
		class... _Other>
		_Tuple_val(const _Alloc& _Al,
			typename enable_if<uses_allocator<_Ty, _Alloc>::value
				&& !is_constructible<_Ty,
					allocator_arg_t, _Alloc>::value,
				_Tuple_alloc_t>::type, _Other&&... _Arg)
		: _Val(::std:: forward<_Other>(_Arg)..., _Al)
		{	
		}

	_Ty _Val;
	};

	
struct _Exact_args_t
	{	
	};

struct _Unpack_tuple_t
	{	
	};

struct _Alloc_exact_args_t
	{	
	};

struct _Alloc_unpack_tuple_t
	{	
	};

template<class... _Types>
	class tuple;

template<>
	class tuple<>
	{	
public:
	typedef tuple<> _Myt;

	constexpr tuple() noexcept
		{	
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc&) noexcept
		{	
		}

	constexpr tuple(const tuple&) noexcept
		{	
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc&, const _Myt&) noexcept
		{	
		}

	template<class _Tag,
		enable_if_t<is_same<_Tag, _Exact_args_t>::value, int> = 0>
		constexpr tuple(_Tag) noexcept
		{	
		}

	template<class _Tag,
		enable_if_t<is_same<_Tag, _Unpack_tuple_t>::value, int> = 0>
		constexpr tuple(_Tag, const _Myt&) noexcept
		{	
		}

	template<class _Tag,
		class _Alloc,
		enable_if_t<is_same<_Tag, _Alloc_exact_args_t>::value, int> = 0>
		tuple(_Tag, const _Alloc&) noexcept
		{	
		}

	void swap(_Myt&) noexcept
		{	
		}

	constexpr bool _Equals(const _Myt&) const noexcept
		{	
		return (true);
		}

	constexpr bool _Less(const _Myt&) const noexcept
		{	
		return (false);
		}
	};

template<class _This,
	class... _Rest>
	class tuple<_This, _Rest...>
		: private tuple<_Rest...>
	{	
public:
	typedef _This _This_type;
	typedef tuple<_This, _Rest...> _Myt;
	typedef tuple<_Rest...> _Mybase;
	static constexpr size_t _Mysize = 1 + sizeof...(_Rest);

	template<class _Tag,
		class _This2,
		class... _Rest2,
		enable_if_t<is_same<_Tag, _Exact_args_t>::value, int> = 0>
		constexpr tuple(_Tag, _This2&& _This_arg, _Rest2&&... _Rest_arg)
		: _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
			_Myfirst(::std:: forward<_This2>(_This_arg))
		{	
		}




















	template<class _Tag,
		class... _Other,
		enable_if_t<is_same<_Tag, _Unpack_tuple_t>::value, int> = 0>
		constexpr tuple(_Tag, const tuple<_Other...>& _Right)
		: _Mybase(_Unpack_tuple_t{}, _Right._Get_rest()),
			_Myfirst(_Right._Myfirst._Val)
		{	
		}

	template<class _Tag,
		class... _Other,
		enable_if_t<is_same<_Tag, _Unpack_tuple_t>::value, int> = 0>
		constexpr tuple(_Tag, tuple<_Other...>&& _Right)
		: _Mybase(_Unpack_tuple_t{}, (typename tuple<_Other...>::_Mybase&&) _Right),
			_Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val))
		{	
		}

	template<class _Tag,
		class _Alloc,
		class _This2,
		class... _Rest2,
		enable_if_t<is_same<_Tag, _Alloc_exact_args_t>::value, int> = 0>
		tuple(_Tag, const _Alloc& _Al, _This2&& _This_arg, _Rest2&&... _Rest_arg)
		: _Mybase(_Alloc_exact_args_t{}, _Al, ::std:: forward<_Rest2>(_Rest_arg)...),
			_Myfirst(_Al, _Tuple_alloc, ::std:: forward<_This2>(_This_arg))
		{	
		}

	template<class _Tag,
		class _Alloc,
		class _Tpl,
		size_t... _Indices,
		enable_if_t<is_same<_Tag, _Alloc_unpack_tuple_t>::value, int> = 0> inline
		tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, integer_sequence<size_t, _Indices...>);

	template<class _Tag,
		class _Alloc,
		class _Tpl,
		enable_if_t<is_same<_Tag, _Alloc_unpack_tuple_t>::value, int> = 0>
		tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: forward<_Tpl>(_Right),
			make_integer_sequence<size_t, tuple_size<remove_reference_t<_Tpl>>::value>{})
		{	
		}

	template<class _This2 = _This,
		class = enable_if_t<conjunction<is_default_constructible<_This2>,
										is_default_constructible<_Rest>...>::value> >
		constexpr tuple()
		: _Mybase(), _Myfirst()
		{	
		}

	template<class... _Other,
		_Tuple_implicit_t<_Myt, const _Other&...> = 0,
		_Tuple_convert_copy_t<_Myt, _Other...> = 0>
		constexpr tuple(const tuple<_Other...>& _Right)


		: _Mybase(_Unpack_tuple_t{}, _Right._Get_rest()),
			_Myfirst(_Right._Myfirst._Val)
		{	
		}

	template<class... _Other,
		_Tuple_explicit_t<_Myt, const _Other&...> = 0,
		_Tuple_convert_copy_t<_Myt, _Other...> = 0>
		constexpr explicit tuple(const tuple<_Other...>& _Right)


		: _Mybase(_Unpack_tuple_t{}, _Right._Get_rest()),
			_Myfirst(_Right._Myfirst._Val)
		{	
		}

	template<class _Alloc,
		class... _Other,
		_Tuple_implicit_t<_Myt, const _Other&...> = 0,
		_Tuple_convert_copy_t<_Myt, _Other...> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const tuple<_Other...>& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{	
		}

	template<class _Alloc,
		class... _Other,
		_Tuple_explicit_t<_Myt, const _Other&...> = 0,
		_Tuple_convert_copy_t<_Myt, _Other...> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			const tuple<_Other...>& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{	
		}

	template<class _This2 = _This,
		_Tuple_implicit_t<_Myt, const _This2&, const _Rest&...> = 0>
		constexpr tuple(const _This& _This_arg, const _Rest&... _Rest_arg)


		: _Mybase(_Exact_args_t{}, _Rest_arg...), _Myfirst(_This_arg)
		{	
		}

	template<class _This2 = _This,
		_Tuple_explicit_t<_Myt, const _This2&, const _Rest&...> = 0>
		constexpr explicit tuple(const _This& _This_arg, const _Rest&... _Rest_arg)


		: _Mybase(_Exact_args_t{}, _Rest_arg...), _Myfirst(_This_arg)
		{	
		}

	template<class _Alloc,
		class _This2 = _This,
		_Tuple_implicit_t<_Myt, const _This2&, const _Rest&...> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const _This& _This_arg, const _Rest&... _Rest_arg)
		: tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...)
		{	
		}

	template<class _Alloc,
		class _This2 = _This,
		_Tuple_explicit_t<_Myt, const _This2&, const _Rest&...> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			const _This& _This_arg, const _Rest&... _Rest_arg)
		: tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...)
		{	
		}

	template<class _This2,
		class... _Rest2,
		enable_if_t<conjunction<
			_Tuple_perfect_val<_Myt, _This2, _Rest2...>,
			_Tuple_implicit_val<_Myt, _This2, _Rest2...>
		>::value, int> = 0>
		constexpr tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)


		: _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
			_Myfirst(::std:: forward<_This2>(_This_arg))
		{	
		}

	template<class _This2,
		class... _Rest2,
		enable_if_t<conjunction<
			_Tuple_perfect_val<_Myt, _This2, _Rest2...>,
			_Tuple_explicit_val<_Myt, _This2, _Rest2...>
		>::value, int> = 0>
		constexpr explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)


		: _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
			_Myfirst(::std:: forward<_This2>(_This_arg))
		{	
		}

	template<class _Alloc,
		class _This2,
		class... _Rest2,
		enable_if_t<conjunction<
			_Tuple_perfect_val<_Myt, _This2, _Rest2...>,
			_Tuple_implicit_val<_Myt, _This2, _Rest2...>
		>::value, int> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			_This2&& _This_arg, _Rest2&&... _Rest_arg)
		: tuple(_Alloc_exact_args_t{}, _Al, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
		{	
		}

	template<class _Alloc,
		class _This2,
		class... _Rest2,
		enable_if_t<conjunction<
			_Tuple_perfect_val<_Myt, _This2, _Rest2...>,
			_Tuple_explicit_val<_Myt, _This2, _Rest2...>
		>::value, int> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			_This2&& _This_arg, _Rest2&&... _Rest_arg)
		: tuple(_Alloc_exact_args_t{}, _Al, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
		{	
		}

	template<class... _Other,
		_Tuple_implicit_t<_Myt, _Other...> = 0,
		_Tuple_convert_move_t<_Myt, _Other...> = 0>
		constexpr tuple(tuple<_Other...>&& _Right)


		: _Mybase(_Unpack_tuple_t{}, (typename tuple<_Other...>::_Mybase&&) _Right),
			_Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val))
		{	
		}

	template<class... _Other,
		_Tuple_explicit_t<_Myt, _Other...> = 0,
		_Tuple_convert_move_t<_Myt, _Other...> = 0>
		constexpr explicit tuple(tuple<_Other...>&& _Right)


		: _Mybase(_Unpack_tuple_t{}, (typename tuple<_Other...>::_Mybase&&) _Right),
			_Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val))
		{	
		}

	template<class _Alloc,
		class... _Other,
		_Tuple_implicit_t<_Myt, _Other...> = 0,
		_Tuple_convert_move_t<_Myt, _Other...> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			tuple<_Other...>&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{	
		}

	template<class _Alloc,
		class... _Other,
		_Tuple_explicit_t<_Myt, _Other...> = 0,
		_Tuple_convert_move_t<_Myt, _Other...> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			tuple<_Other...>&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{	
		}

	template<class... _Other>
		_Myt& operator=(const tuple<_Other...>& _Right)
		{	
		_Myfirst._Val = _Right._Myfirst._Val;
		_Get_rest() = _Right._Get_rest();
		return (*this);
		}

	template<class... _Other>
		_Myt& operator=(tuple<_Other...>&& _Right)
		{	
		_Myfirst._Val = ::std:: forward<typename tuple<_Other...>::_This_type>
			(_Right._Myfirst._Val);
		_Get_rest() = ::std:: forward<typename tuple<_Other...>::_Mybase>
			(_Right._Get_rest());
		return (*this);
		}

	template<class... _Other>
		constexpr bool _Equals(const tuple<_Other...>& _Right) const
		{	
		static_assert(_Mysize == sizeof...(_Other),
			"comparing tuple to object with different size");
		return (_Myfirst._Val == _Right._Myfirst._Val
			&& _Mybase::_Equals(_Right._Get_rest()));
		}

	template<class... _Other>
		constexpr bool _Less(const tuple<_Other...>& _Right) const
		{	
		static_assert(_Mysize == sizeof...(_Other),
			"comparing tuple to object with different size");
		return (_Myfirst._Val < _Right._Myfirst._Val
			|| (!(_Right._Myfirst._Val < _Myfirst._Val)
				&& _Mybase::_Less(_Right._Get_rest())));
		}

	template<class _Alloc,
		class _This2 = _This,
		class = enable_if_t<conjunction<is_default_constructible<_This2>,
										is_default_constructible<_Rest>...>::value> >
		tuple(allocator_arg_t, const _Alloc& _Al)
		: _Mybase(allocator_arg, _Al), _Myfirst(_Al, _Tuple_alloc)
		{	
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const _Myt& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{	
		}

	tuple(const _Myt&) = default;
	tuple(_Myt&&) = default;

	template<class _First,
		class _Second,
		_Tuple_implicit_t<_Myt, const _First&, const _Second&> = 0>
		constexpr tuple(const pair<_First, _Second>& _Right)


		: _Mybase(_Exact_args_t{}, _Right.second), _Myfirst(_Right.first)
		{	
		}

	template<class _First,
		class _Second,
		_Tuple_explicit_t<_Myt, const _First&, const _Second&> = 0>
		constexpr explicit tuple(const pair<_First, _Second>& _Right)


		: _Mybase(_Exact_args_t{}, _Right.second), _Myfirst(_Right.first)
		{	
		}

	template<class _Alloc,
		class _First,
		class _Second,
		_Tuple_implicit_t<_Myt, const _First&, const _Second&> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const pair<_First, _Second>& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{	
		}

	template<class _Alloc,
		class _First,
		class _Second,
		_Tuple_explicit_t<_Myt, const _First&, const _Second&> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			const pair<_First, _Second>& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{	
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		_Myfirst._Val = _Right._Myfirst._Val;
		_Get_rest() = _Right._Get_rest();
		return (*this);
		}

	template<class _First,
		class _Second>
		_Myt& operator=(const pair<_First, _Second>& _Right)
		{	
		static_assert(_Mysize == 2,
			"assigning to tuple from object with different size");
		_Myfirst._Val = _Right.first;
		_Get_rest()._Myfirst._Val = _Right.second;
		return (*this);
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc& _Al,
			_Myt&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{	
		}

	template<class _First,
		class _Second,
		_Tuple_implicit_t<_Myt, _First, _Second> = 0>
		constexpr tuple(pair<_First, _Second>&& _Right)


		: _Mybase(_Exact_args_t{}, ::std:: forward<_Second>(_Right.second)),
			_Myfirst(::std:: forward<_First>(_Right.first))
		{	
		}

	template<class _First,
		class _Second,
		_Tuple_explicit_t<_Myt, _First, _Second> = 0>
		constexpr explicit tuple(pair<_First, _Second>&& _Right)


		: _Mybase(_Exact_args_t{}, ::std:: forward<_Second>(_Right.second)),
			_Myfirst(::std:: forward<_First>(_Right.first))
		{	
		}

	template<class _Alloc,
		class _First,
		class _Second,
		_Tuple_implicit_t<_Myt, _First, _Second> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			pair<_First, _Second>&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{	
		}

	template<class _Alloc,
		class _First,
		class _Second,
		_Tuple_explicit_t<_Myt, _First, _Second> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			pair<_First, _Second>&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{	
		}

	_Myt& operator=(_Myt&& _Right)
		noexcept(is_nothrow_move_assignable<_This>::value && is_nothrow_move_assignable<_Mybase>::value)
		{	
		_Myfirst._Val = ::std:: forward<_This>(_Right._Myfirst._Val);
		_Get_rest() = ::std:: forward<_Mybase>(_Right._Get_rest());
		return (*this);
		}

	template<class _First,
		class _Second>
		_Myt& operator=(pair<_First, _Second>&& _Right)
		{	
		static_assert(_Mysize == 2,
			"assigning to tuple from object with different size");
		_Myfirst._Val = ::std:: forward<_First>(_Right.first);
		_Get_rest()._Myfirst._Val = ::std:: forward<_Second>(_Right.second);
		return (*this);
		}

	_Mybase& _Get_rest() noexcept
		{	
		return (*this);
		}

	constexpr const _Mybase& _Get_rest() const noexcept
		{	
		return (*this);
		}

	_Tuple_val<_This> _Myfirst;	

	void swap(tuple& _Right)
		noexcept((conjunction<_Is_nothrow_swappable<_This>, _Is_nothrow_swappable<_Rest>...>::value))
		{	
		_Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
		_Mybase::swap(_Right._Get_rest());
		}
	};


	

template<class... _Types1,
	class... _Types2> inline
	constexpr bool operator==(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (_Left._Equals(_Right));
	}

template<class... _Types1,
	class... _Types2> inline
	constexpr bool operator!=(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class... _Types1,
	class... _Types2> inline
	constexpr bool operator<(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class... _Types1,
	class... _Types2> inline
	constexpr bool operator>=(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class... _Types1,
	class... _Types2> inline
	constexpr bool operator>(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (_Right < _Left);
	}

template<class... _Types1,
	class... _Types2> inline
	constexpr bool operator<=(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class... _Types,
	class = enable_if_t<conjunction<_Is_swappable<_Types>...>::value>> inline
	void swap(tuple<_Types...>& _Left,
		tuple<_Types...>& _Right)
			noexcept(noexcept(_Left.swap(_Right)))
	{	
	return (_Left.swap(_Right));
	}


	
template<class _Ty,
	class _Tuple>
	struct _Tuple_element;

template<class _This,
	class... _Rest>
	struct _Tuple_element<_This, tuple<_This, _Rest...> >
	{	
	typedef int _Check_type;
	static_assert(is_void<typename _Tuple_element<_This,
		tuple<_Rest...> >::_Check_type>::value,
		"duplicate type T in get<T>(tuple)");

	typedef _This type;
	typedef tuple<_This, _Rest...> _Ttype;
	};

template<class _Ty,
	class _This,
	class... _Rest>
	struct _Tuple_element<_Ty, tuple<_This, _Rest...> >
		: public _Tuple_element<_Ty, tuple<_Rest...> >
	{	
	};

template<class _Ty>
	struct _Tuple_element<_Ty, tuple<> >
	{	
	typedef void _Check_type;	
	};

template<class _Ty,
	class _Tuple>
	struct _Tuple_element<_Ty, const _Tuple>
		: public _Tuple_element<_Ty, _Tuple>
	{	
	typedef _Tuple_element<_Ty, _Tuple> _Mybase;
	typedef typename add_const<typename _Mybase::type>::type type;
	};

template<class _Ty,
	class _Tuple>
	struct _Tuple_element<_Ty, volatile _Tuple>
		: public _Tuple_element<_Ty, _Tuple>
	{	
	typedef _Tuple_element<_Ty, _Tuple> _Mybase;
	typedef typename add_volatile<typename _Mybase::type>::type type;
	};

template<class _Ty,
	class _Tuple>
	struct _Tuple_element<_Ty, const volatile _Tuple>
		: public _Tuple_element<_Ty, _Tuple>
	{	
	typedef _Tuple_element<_Ty, _Tuple> _Mybase;
	typedef typename add_cv<typename _Mybase::type>::type type;
	};

	
template<size_t _Index,
	class... _Types> inline
	constexpr typename tuple_element<_Index, tuple<_Types...> >::type&
		get(tuple<_Types...>& _Tuple) noexcept
	{	
	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
		_Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<size_t _Index,
	class... _Types> inline
	constexpr const typename tuple_element<_Index, tuple<_Types...> >::type&
		get(const tuple<_Types...>& _Tuple) noexcept
	{	
	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
		_Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<size_t _Index,
	class... _Types> inline
	constexpr typename tuple_element<_Index, tuple<_Types...> >::type&&
		get(tuple<_Types...>&& _Tuple) noexcept
	{	
	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
		_Ttype;
	typedef typename tuple_element<_Index, tuple<_Types...> >::type&&
		_RRtype;
	return (::std:: forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
	}

	
template<class _Ty,
	class... _Types> inline
	constexpr _Ty& get(tuple<_Types...>& _Tuple) noexcept
	{	
	typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<class _Ty,
	class... _Types> inline
	constexpr const _Ty& get(const tuple<_Types...>& _Tuple) noexcept
	{	
	typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<class _Ty,
	class... _Types> inline
	constexpr _Ty&& get(tuple<_Types...>&& _Tuple) noexcept
	{	
	typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
	return (::std:: forward<_Ty&&>(((_Ttype&)_Tuple)._Myfirst._Val));
	}

	













template<class _This,
	class... _Rest>
	template<class _Tag,
		class _Alloc,
		class _Tpl,
		size_t... _Indices,
		enable_if_t<is_same<_Tag, _Alloc_unpack_tuple_t>::value, int>> inline
		tuple<_This, _Rest...>::tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, integer_sequence<size_t, _Indices...>)
		: tuple(_Alloc_exact_args_t{}, _Al, ::std:: get<_Indices>(::std:: forward<_Tpl>(_Right))...)
		{	
		}

	
template<class... _Types> inline
	constexpr tuple<typename _Unrefwrap<_Types>::type...>
		make_tuple(_Types&&... _Args)
	{	
	typedef tuple<typename _Unrefwrap<_Types>::type...> _Ttype;
	return (_Ttype(::std:: forward<_Types>(_Args)...));
	}

	
template<class... _Types> inline
	constexpr tuple<_Types&...>
		tie(_Types&... _Args) noexcept
	{	
	typedef tuple<_Types&...> _Ttype;
	return (_Ttype(_Args...));
	}


	

template<class... _Types> inline
	constexpr tuple<_Types&&...>
		forward_as_tuple(_Types&&... _Args) noexcept
	{	
	return (tuple<_Types&&...>(::std:: forward<_Types>(_Args)...));
	}


	
template<class _Seq_type1,
	class _Seq_type2>
	struct _Cat_sequences;

template<size_t... _Indexes1,
	size_t... _Indexes2>
	struct _Cat_sequences<integer_sequence<size_t, _Indexes1...>,
		integer_sequence<size_t, _Indexes2...> >
	{	
	typedef integer_sequence<size_t, _Indexes1..., _Indexes2...> type;
	};

	
template<class _Ty,
	size_t _Size>
	class array;

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	constexpr _Ty& get(array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	constexpr const _Ty& get(const array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	constexpr _Ty&& get(array<_Ty, _Size>&& _Arr) noexcept;

	
template<class _Ty,
	class... _For_array>
	struct _View_as_tuple
	{	
	static_assert(_Always_false<_Ty>::value,
		"Unsupported tuple_cat arguments.");
	};

template<class... _Types>
	struct _View_as_tuple<tuple<_Types...> >
	{	
	typedef tuple<_Types...> type;
	};

template<class _Ty1,
	class _Ty2>
	struct _View_as_tuple<pair<_Ty1, _Ty2> >
	{	
	typedef tuple<_Ty1, _Ty2> type;
	};

template<class _Ty,
	class... _Types>
	struct _View_as_tuple<array<_Ty, 0>, _Types...>
	{	
	typedef tuple<_Types...> type;
	};

template<class _Ty,
	size_t _Size,
	class... _Types>
	struct _View_as_tuple<array<_Ty, _Size>, _Types...>
		: _View_as_tuple<array<_Ty, _Size - 1>, _Ty, _Types...>
	{	
	};

	
template<size_t _Nx,
	class _Ty>
	struct _Repeat_for
		: integral_constant<size_t, _Nx>
	{	
	};

	
template<class _Ret,
	class _Kx_arg,
	class _Ix_arg,
	size_t _Ix_next,
	class... _Tuples>
	struct _Tuple_cat2
	{	
	static_assert(sizeof...(_Tuples) == 0,
		"Unsupported tuple_cat arguments.");
	typedef _Ret type;
	typedef _Kx_arg _Kx_arg_seq;
	typedef _Ix_arg _Ix_arg_seq;
	};

template<class... _Types1,
	class _Kx_arg,
	size_t... _Ix,
	size_t _Ix_next,
	class... _Types2,
	class... _Rest>
	struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg,
		integer_sequence<size_t, _Ix...>, _Ix_next,
		tuple<_Types2...>, _Rest...>
		: _Tuple_cat2<
			tuple<_Types1..., _Types2...>,
			typename _Cat_sequences<_Kx_arg,
				make_integer_sequence<size_t, sizeof...(_Types2)> >::type,
			integer_sequence<size_t, _Ix...,
				_Repeat_for<_Ix_next, _Types2>::value...>,
			_Ix_next + 1,
			_Rest...>
	{	
	};

template<class... _Tuples>
	struct _Tuple_cat1
		: _Tuple_cat2<tuple<>, integer_sequence<size_t>,
				integer_sequence<size_t>, 0,
			typename _View_as_tuple<typename decay<_Tuples>::type>::type...>
	{	
	};

template<class _Ret,
	size_t... _Kx,
	size_t... _Ix,
	class _Ty> inline
	constexpr _Ret _Tuple_cat(integer_sequence<size_t, _Kx...>,
		integer_sequence<size_t, _Ix...>, _Ty&& _Arg)
	{	
	return (_Ret(::std:: get<_Kx>(::std:: get<_Ix>(::std:: forward<_Ty>(_Arg)))...));
	}

template<class _Ret,
	class _Ty> inline
	constexpr _Ret _Tuple_cat(integer_sequence<size_t>,
		integer_sequence<size_t>, _Ty&&)
	{	
	return (_Ret());
	}

template<class... _Tuples> inline
	constexpr typename _Tuple_cat1<_Tuples...>::type
		tuple_cat(_Tuples&&... _Tpls)
	{	
	typedef _Tuple_cat1<_Tuples...> _Cat1;
	return (_Tuple_cat<typename _Cat1::type>(
		typename _Cat1::_Kx_arg_seq(), typename _Cat1::_Ix_arg_seq(),
		::std:: forward_as_tuple(::std:: forward<_Tuples>(_Tpls)...)));
	}


	
template<class _Tpl,
	class _Fx,
	size_t... _Indices> inline
	void _For_each_tuple_element_impl(_Tpl&& _Tuple,
		_Fx _Func, integer_sequence<size_t, _Indices...>)
	{	
	int _Ignored[] = { (static_cast<void>(_Func(
		::std:: get<_Indices>(::std:: forward<_Tpl>(_Tuple))
		)), 0)... };
	(void)_Ignored;
	}

template<class _Tpl,
	class _Fx> inline
	void _For_each_tuple_element(_Tpl&& _Tuple, _Fx _Func)
	{	
	_For_each_tuple_element_impl(
		::std:: forward<_Tpl>(_Tuple),
		_Func,
		make_integer_sequence<size_t,
			tuple_size<remove_reference_t<_Tpl>>::value>()
		);
	}


	
template<class _Ty1,
	class _Ty2>
	template<class _Tuple1,
		class _Tuple2,
		size_t... _Indexes1,
		size_t... _Indexes2> inline
		pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
			_Tuple2& _Val2,
			integer_sequence<size_t, _Indexes1...>,
			integer_sequence<size_t, _Indexes2...>)
		: first(::std:: get<_Indexes1>(::std:: move(_Val1))...),
			second(::std:: get<_Indexes2>(::std:: move(_Val2))...)
		{	
		(void) _Val1;	
		(void) _Val2;
		}

	
template<class _Ty1,
	class _Ty2>
	template<class... _Types1,
		class... _Types2> inline
		pair<_Ty1, _Ty2>::pair(piecewise_construct_t,
			tuple<_Types1...> _Val1,
			tuple<_Types2...> _Val2)
		: pair(_Val1, _Val2,
			make_integer_sequence<size_t, sizeof...(_Types1)>(),
			make_integer_sequence<size_t, sizeof...(_Types2)>())
		{	
		}

}

namespace std {
	
template<class... _Types,
	class _Alloc>
	struct uses_allocator<tuple<_Types...>, _Alloc>
		: true_type
	{	
	};

}	


namespace std {
namespace tr1 {	
using ::std:: get;
using ::std:: ignore;
using ::std:: make_tuple;
using ::std:: ref;
using ::std:: tie;
using ::std:: tuple;
}	
}


 
 #pragma warning(pop)
 #pragma pack(pop)












#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4127)
namespace std {
		
template<class _Mytree,
	class _Base = _Iterator_base0>
	class _Tree_unchecked_const_iterator
		: public _Iterator012<bidirectional_iterator_tag,
			typename _Mytree::value_type,
			typename _Mytree::difference_type,
			typename _Mytree::const_pointer,
			typename _Mytree::const_reference,
			_Base>
	{	
public:
	typedef _Tree_unchecked_const_iterator<_Mytree, _Base> _Myiter;
	typedef bidirectional_iterator_tag iterator_category;

	typedef typename _Mytree::_Nodeptr _Nodeptr;
	typedef typename _Mytree::value_type value_type;
	typedef typename _Mytree::difference_type difference_type;
	typedef typename _Mytree::const_pointer pointer;
	typedef typename _Mytree::const_reference reference;

	_Tree_unchecked_const_iterator()
		: _Ptr()
		{	
		}

	_Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
		: _Ptr(_Pnode)
		{	
		this->_Adopt(_Plist);
		}

	reference operator*() const
		{	
		return (_Mytree::_Myval(_Ptr));
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		if (_Mytree::_Isnil(_Ptr))
			;	
		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
			_Ptr = _Mytree::_Min(
				_Mytree::_Right(_Ptr));	
		else
			{	
			_Nodeptr _Pnode;
			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
				&& _Ptr == _Mytree::_Right(_Pnode))
				_Ptr = _Pnode;	
			_Ptr = _Pnode;	
			}
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		if (_Mytree::_Isnil(_Ptr))
			_Ptr = _Mytree::_Right(_Ptr);	
		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
			_Ptr = _Mytree::_Max(
				_Mytree::_Left(_Ptr));	
		else
			{	
			_Nodeptr _Pnode;
			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
				&& _Ptr == _Mytree::_Left(_Pnode))
				_Ptr = _Pnode;	
			if (_Mytree::_Isnil(_Ptr))
				;	
			else
				_Ptr = _Pnode;	
			}
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	bool operator==(const _Myiter& _Right) const
		{	
		return (_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	_Nodeptr _Mynode() const
		{	
		return (_Ptr);
		}

	_Nodeptr _Ptr;	
	};

	
template<class _Mytree>
	class _Tree_unchecked_iterator
		: public _Tree_unchecked_const_iterator<_Mytree>
	{	
public:
	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
	typedef bidirectional_iterator_tag iterator_category;

	typedef typename _Mytree::_Nodeptr _Nodeptr;
	typedef typename _Mytree::value_type value_type;
	typedef typename _Mytree::difference_type difference_type;
	typedef typename _Mytree::pointer pointer;
	typedef typename _Mytree::reference reference;

	_Tree_unchecked_iterator()
		{	
		}

	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
		: _Mybase(_Pnode, _Plist)
		{	
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++static_cast<_Mybase&>(*this);
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--static_cast<_Mybase&>(*this);
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}
	};

	
template<class _Mytree>
	class _Tree_const_iterator
		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
	{	
public:
	typedef _Tree_const_iterator<_Mytree> _Myiter;
	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
	typedef bidirectional_iterator_tag iterator_category;

	typedef typename _Mytree::_Nodeptr _Nodeptr;
	typedef typename _Mytree::value_type value_type;
	typedef typename _Mytree::difference_type difference_type;
	typedef typename _Mytree::const_pointer pointer;
	typedef typename _Mytree::const_reference reference;

	_Tree_const_iterator()
		: _Mybase()
		{	
		}

	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
		: _Mybase(_Pnode, _Plist)
		{	
		}

	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right._Ptr;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
		}

	reference operator*() const
		{	
 
















		return (_Mytree::_Myval(this->_Ptr));
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
 













		++static_cast<_Mybase&>(*this);
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
 























		--static_cast<_Mybase&>(*this);
 

		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	bool operator==(const _Myiter& _Right) const
		{	
 










		return (this->_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}
	};

template<class _Mytree> inline
	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Mytree> inline
	_Tree_const_iterator<_Mytree>&
		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
			typename _Tree_const_iterator<_Mytree>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

	
template<class _Mytree>
	class _Tree_iterator
		: public _Tree_const_iterator<_Mytree>
	{	
public:
	typedef _Tree_iterator<_Mytree> _Myiter;
	typedef _Tree_const_iterator<_Mytree> _Mybase;
	typedef bidirectional_iterator_tag iterator_category;

	typedef typename _Mytree::_Nodeptr _Nodeptr;
	typedef typename _Mytree::value_type value_type;
	typedef typename _Mytree::difference_type difference_type;

	typedef typename _Mytree::pointer pointer;
	typedef typename _Mytree::reference reference;

	_Tree_iterator()
		{	
		}

	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
		: _Mybase(_Pnode, _Plist)
		{	
		}

	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right._Ptr;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++static_cast<_Mybase&>(*this);
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--static_cast<_Mybase&>(*this);
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}
	};

template<class _Mytree> inline
	typename _Tree_iterator<_Mytree>::_Unchecked_type
		_Unchecked(_Tree_iterator<_Mytree> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Mytree> inline
	_Tree_iterator<_Mytree>&
		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
			typename _Tree_iterator<_Mytree>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

		
template<class _Value_type,
	class _Size_type,
	class _Difference_type,
	class _Pointer,
	class _Const_pointer,
	class _Reference,
	class _Const_reference,
	class _Nodeptr_type>
	struct _Tree_iter_types
	{	
	typedef _Value_type value_type;
	typedef _Size_type size_type;
	typedef _Difference_type difference_type;
	typedef _Pointer pointer;
	typedef _Const_pointer const_pointer;
	typedef _Reference reference;
	typedef _Const_reference const_reference;
	typedef _Nodeptr_type _Nodeptr;
	};

template<class _Value_type,
	class _Voidptr>
	struct _Tree_node
		{	
		_Voidptr _Left;	
		_Voidptr _Parent;	
		_Voidptr _Right;	
		char _Color;	
		char _Isnil;	
		_Value_type _Myval;	

	private:
		_Tree_node& operator=(const _Tree_node&);
		};

template<class _Value_type>
	struct _Tree_node<_Value_type, void *>
		{	
		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
		_Nodeptr _Left;	
		_Nodeptr _Parent;	
		_Nodeptr _Right;	
		char _Color;	
		char _Isnil;	
		_Value_type _Myval;	

	private:
		_Tree_node& operator=(const _Tree_node&);
		};

template<class _Ty>
	struct _Tree_simple_types
		: public _Simple_types<_Ty>
	{	
	typedef _Tree_node<_Ty, void *> _Node;
	typedef _Node *_Nodeptr;
	};

template<class _Ty,
	class _Alloc0>
	struct _Tree_base_types
	{	
	typedef _Alloc0 _Alloc;
	typedef _Tree_base_types<_Ty, _Alloc> _Myt;

	typedef _Wrap_alloc<_Alloc> _Alty0;
	typedef typename _Alty0::template rebind<_Ty>::other _Alty;

	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
		_Voidptr;
	typedef _Tree_node<typename _Alty::value_type,
		_Voidptr> _Node;

	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
	typedef typename _Alnod_type::pointer _Nodeptr;
	typedef _Nodeptr& _Nodepref;

	typedef typename _If<_Is_simple_alloc<_Alty>::value,
		_Tree_simple_types<typename _Alty::value_type>,
		_Tree_iter_types<typename _Alty::value_type,
			typename _Alty::size_type,
			typename _Alty::difference_type,
			typename _Alty::pointer,
			typename _Alty::const_pointer,
			typename _Alty::reference,
			typename _Alty::const_reference,
			_Nodeptr> >::type
		_Val_types;
	};

		
template<class _Val_types>
	class _Tree_val
		: public _Container_base
	{	
public:
	typedef _Tree_val<_Val_types> _Myt;

	typedef typename _Val_types::_Nodeptr _Nodeptr;
	typedef _Nodeptr& _Nodepref;

	typedef typename _Val_types::value_type value_type;
	typedef typename _Val_types::size_type size_type;
	typedef typename _Val_types::difference_type difference_type;
	typedef typename _Val_types::pointer pointer;
	typedef typename _Val_types::const_pointer const_pointer;
	typedef typename _Val_types::reference reference;
	typedef typename _Val_types::const_reference const_reference;

	typedef _Tree_const_iterator<_Myt> const_iterator;
	typedef _Tree_iterator<_Myt> iterator;

	_Tree_val()
		: _Myhead(),
		_Mysize(0)
		{	
		}

	enum _Redbl
		{	
		_Red, _Black};

	static char& _Color(_Nodeptr _Pnode)
		{	
		return ((char&)_Pnode->_Color);
		}

	static char& _Isnil(_Nodeptr _Pnode)
		{	
		return ((char&)_Pnode->_Isnil);
		}

	static _Nodepref _Left(_Nodeptr _Pnode)
		{	
		return ((_Nodepref)_Pnode->_Left);
		}

	static _Nodepref _Parent(_Nodeptr _Pnode)
		{	
		return ((_Nodepref)_Pnode->_Parent);
		}

	static _Nodepref _Right(_Nodeptr _Pnode)
		{	
		return ((_Nodepref)_Pnode->_Right);
		}

	static reference _Myval(_Nodeptr _Pnode)
		{	
		return ((reference)_Pnode->_Myval);
		}

	static _Nodeptr _Max(_Nodeptr _Pnode)
		{	
		while (!_Isnil(_Right(_Pnode)))
			_Pnode = _Right(_Pnode);
		return (_Pnode);
		}

	static _Nodeptr _Min(_Nodeptr _Pnode)
		{	
		while (!_Isnil(_Left(_Pnode)))
			_Pnode = _Left(_Pnode);
		return (_Pnode);
		}

	_Nodeptr _Myhead;	
	size_type _Mysize;	
	};

		
template<class _Traits>
	class _Tree_comp_alloc
	{	
public:
	typedef _Tree_comp_alloc<_Traits> _Myt;

	typedef typename _Traits::allocator_type allocator_type;
	typedef typename _Traits::key_compare key_compare;

	typedef _Tree_base_types<typename _Traits::value_type,
		allocator_type> _Alloc_types;

	typedef typename _Alloc_types::_Alloc _Alloc;
	typedef typename _Alloc_types::_Alnod_type _Alty;
	typedef typename _Alloc_types::_Node _Node;
	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
	typedef typename _Alloc_types::_Val_types _Val_types;

	typedef _Nodeptr& _Nodepref;

	typedef typename _Val_types::value_type value_type;
	typedef typename _Val_types::size_type size_type;
	typedef typename _Val_types::difference_type difference_type;
	typedef typename _Val_types::pointer pointer;
	typedef typename _Val_types::const_pointer const_pointer;
	typedef typename _Val_types::reference reference;
	typedef typename _Val_types::const_reference const_reference;

	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;

	enum _Redbl
		{	
		_Red, _Black
		};

	static char& _Color(_Nodeptr _Pnode)
		{	
		return (_Tree_val<_Val_types>::_Color(_Pnode));
		}

	static char& _Isnil(_Nodeptr _Pnode)
		{	
		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
		}

	static _Nodepref _Left(_Nodeptr _Pnode)
		{	
		return (_Tree_val<_Val_types>::_Left(_Pnode));
		}

	static _Nodepref _Parent(_Nodeptr _Pnode)
		{	
		return (_Tree_val<_Val_types>::_Parent(_Pnode));
		}

	static _Nodepref _Right(_Nodeptr _Pnode)
		{	
		return (_Tree_val<_Val_types>::_Right(_Pnode));
		}

	static reference _Myval(_Nodeptr _Pnode)
		{	
		return (_Tree_val<_Val_types>::_Myval(_Pnode));
		}

	static _Nodeptr _Max(_Nodeptr _Pnode)
		{	
		return (_Tree_val<_Val_types>::_Max(_Pnode));
		}

	static _Nodeptr _Min(_Nodeptr _Pnode)
		{	
		return (_Tree_val<_Val_types>::_Min(_Pnode));
		}

	_Tree_comp_alloc(const key_compare& _Parg)
		: _Mypair(_One_then_variadic_args_t(), _Parg,
			_Zero_then_variadic_args_t())
		{	
		_Construct();
		}

	template<class _Any_alloc,
		class = enable_if_t<!is_same<decay_t<_Any_alloc>, _Myt>::value> >
		_Tree_comp_alloc(const key_compare& _Parg, _Any_alloc&& _Al)
		: _Mypair(_One_then_variadic_args_t(), _Parg,
			_One_then_variadic_args_t(),
			::std:: forward<_Any_alloc>(_Al))
		{	
		_Construct();
		}

 
	void _Construct()
		{	
		_Myhead() = _Buyheadnode();
		}

	~_Tree_comp_alloc() noexcept
		{	
		_Freeheadnode(_Myhead());
		}

	void _Copy_alloc(const _Alty& _Al)
		{	
		_Pocca(_Getal(), _Al);
		}

	void _Move_alloc(_Alty& _Al)
		{	
		_Pocma(_Getal(), _Al);
		}

 


































































	void _Orphan_all()
		{	
		_Get_data()._Orphan_all();
		}

	void _Swap_all(_Myt& _Right)
		{	
		_Get_data()._Swap_all(_Right._Get_data());
		}

	_Nodeptr _Buyheadnode()
		{	
		_Nodeptr _Pnode = _Getal().allocate(1);

		try {
		_Getal().construct(
			::std:: addressof(_Left(_Pnode)), _Pnode);
		_Getal().construct(
			::std:: addressof(_Parent(_Pnode)), _Pnode);
		_Getal().construct(
			::std:: addressof(_Right(_Pnode)), _Pnode);
		} catch (...) {
		_Getal().deallocate(_Pnode, 1);
		throw;
		}

		_Color(_Pnode) = _Black;
		_Isnil(_Pnode) = true;
		return (_Pnode);
		}

	void _Freeheadnode(_Nodeptr _Pnode)
		{	
		_Getal().destroy(
			::std:: addressof(_Left(_Pnode)));
		_Getal().destroy(
			::std:: addressof(_Parent(_Pnode)));
		_Getal().destroy(
			::std:: addressof(_Right(_Pnode)));
		_Getal().deallocate(_Pnode, 1);
		}

	_Nodeptr _Buynode0()
		{	
		_Nodeptr _Pnode = _Getal().allocate(1);

		try {
		_Getal().construct(
			::std:: addressof(_Left(_Pnode)), _Myhead());
		_Getal().construct(
			::std:: addressof(_Parent(_Pnode)), _Myhead());
		_Getal().construct(
			::std:: addressof(_Right(_Pnode)), _Myhead());
		} catch (...) {
		_Getal().deallocate(_Pnode, 1);
		throw;
		}

		return (_Pnode);
		}

	void _Freenode0(_Nodeptr _Pnode)
		{	
		_Getal().destroy(
			::std:: addressof(_Left(_Pnode)));
		_Getal().destroy(
			::std:: addressof(_Parent(_Pnode)));
		_Getal().destroy(
			::std:: addressof(_Right(_Pnode)));
		_Getal().deallocate(_Pnode, 1);
		}

	template<class... _Valty>
		_Nodeptr _Buynode(_Valty&&... _Val)
		{	
		_Nodeptr _Pnode = _Buynode0();

		this->_Color(_Pnode) = _Red;
		this->_Isnil(_Pnode) = false;

		try {
		this->_Getal().construct(
			::std:: addressof(_Myval(_Pnode)),
				::std:: forward<_Valty>(_Val)...);
		} catch (...) {
		_Freenode0(_Pnode);
		throw;
		}

		return (_Pnode);
		}

	key_compare& _Getcomp() noexcept
		{	
		return (_Mypair._Get_first());
		}

	const key_compare& _Getcomp() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	_Alty& _Getal() noexcept
		{	
		return (_Mypair._Get_second()._Get_first());
		}

	const _Alty& _Getal() const noexcept
		{	
		return (_Mypair._Get_second()._Get_first());
		}

	_Tree_val<_Val_types>& _Get_data() noexcept
		{	
		return (_Mypair._Get_second()._Get_second());
		}

	const _Tree_val<_Val_types>& _Get_data() const noexcept
		{	
		return (_Mypair._Get_second()._Get_second());
		}

	_Nodeptr& _Myhead() noexcept
		{	
		return (_Get_data()._Myhead);
		}

	const _Nodeptr& _Myhead() const noexcept
		{	
		return (_Get_data()._Myhead);
		}

	size_type& _Mysize() noexcept
		{	
		return (_Get_data()._Mysize);
		}

	const size_type& _Mysize() const noexcept
		{	
		return (_Get_data()._Mysize);
		}

private:
	_Compressed_pair<key_compare,
		_Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
	};

		
template<class _Traits>
	class _Tree
		: public _Tree_comp_alloc<_Traits>
	{	
public:
	typedef _Tree<_Traits> _Myt;
	typedef _Tree_comp_alloc<_Traits> _Mybase;

	typedef typename _Traits::key_type key_type;
	typedef typename _Traits::value_compare value_compare;
	enum
		{	
		_Multi = _Traits::_Multi};

	typedef typename _Mybase::_Node _Node;
	typedef typename _Mybase::_Nodeptr _Nodeptr;
	typedef typename _Mybase::_Alty _Alty;

	typedef typename _Mybase::key_compare key_compare;
	typedef typename _Mybase::allocator_type allocator_type;

	typedef typename _Mybase::value_type value_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;

	typedef typename _Mybase::const_iterator const_iterator;
	typedef typename _If<is_same<key_type, value_type>::value,
		typename _Mybase::const_iterator,
		typename _Mybase::iterator>::type iterator;

	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	typedef pair<iterator, bool> _Pairib;
	typedef pair<iterator, iterator> _Pairii;
	typedef pair<const_iterator, const_iterator> _Paircc;

	struct _Copy_tag
		{	
		};
	struct _Move_tag
		{	
		};

	_Tree(const key_compare& _Parg)
		: _Mybase(_Parg)
		{	
		}

	_Tree(const key_compare& _Parg,
		const allocator_type& _Al)
		: _Mybase(_Parg, _Al)
		{	
		}

	template<class _Any_alloc>
		_Tree(const _Myt& _Right, _Any_alloc&& _Al)
		: _Mybase(_Right.key_comp(), ::std:: forward<_Any_alloc>(_Al))
		{	
		try {
		_Copy(_Right, _Copy_tag());
		} catch (...) {
		_Tidy();
		throw;
		}
		}

	_Tree(_Myt&& _Right)
		: _Mybase(_Right.key_comp(), ::std:: move(_Right._Getal()))
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right), true_type());
		}

	_Tree(_Myt&& _Right, const allocator_type& _Al)
		: _Mybase(_Right.key_comp(), _Al)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			clear();
			if (_Alty::propagate_on_container_move_assignment::value
				&& this->_Getal() != _Right._Getal())
				this->_Move_alloc(_Right._Getal());

			_Assign_rv(::std:: forward<_Myt>(_Right));
			}
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right, true_type)
		{	
		this->_Swap_all(_Right);
		_Swap_adl(this->_Getcomp(), _Right._Getcomp());
		_Swap_adl(this->_Myhead(), _Right._Myhead());
		::std:: swap(this->_Mysize(), _Right._Mysize());
		}

	void _Assign_rv(_Myt&& _Right, false_type)
		{	
		if (get_allocator() == _Right.get_allocator())
			_Assign_rv(::std:: forward<_Myt>(_Right), true_type());
		else
			_Copy(_Right, _Move_tag());
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right),
			typename _Alty::propagate_on_container_move_assignment());
		}

	template<class... _Valty>
		_Pairib emplace(_Valty&&... _Val)
		{	
		_Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
		return (_Insert_nohint(false,
			this->_Myval(_Newnode), _Newnode));
		}

	template<class... _Valty>
		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
		{	
		_Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
		return (_Insert_hint(_Where,
			this->_Myval(_Newnode), _Newnode));
		}

	~_Tree() noexcept
		{	
		_Tidy();
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			clear();
			if (this->_Getal() != _Right._Getal()
				&& _Alty::propagate_on_container_copy_assignment::value)
				this->_Copy_alloc(_Right._Getal());

			this->_Getcomp() = _Right._Getcomp();
			_Copy(_Right, _Copy_tag());
			}
		return (*this);
		}

	iterator begin() noexcept
		{	
		return (iterator(_Lmost(), &this->_Get_data()));
		}

	const_iterator begin() const noexcept
		{	
		return (const_iterator(_Lmost(), &this->_Get_data()));
		}

	iterator end() noexcept
		{	
		return (iterator(this->_Myhead(), &this->_Get_data()));
		}

	const_iterator end() const noexcept
		{	
		return (const_iterator(this->_Myhead(), &this->_Get_data()));
		}

	reverse_iterator rbegin() noexcept
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend() noexcept
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator(begin()));
		}

	const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	const_iterator cend() const noexcept
		{	
		return (end());
		}

	const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	size_type size() const noexcept
		{	
		return (this->_Mysize());
		}

	size_type max_size() const noexcept
		{	
		return (this->_Getal().max_size());
		}

	bool empty() const noexcept
		{	
		return (size() == 0);
		}

	allocator_type get_allocator() const noexcept
		{	
		allocator_type _Ret(this->_Getal());
		return (_Ret);
		}

	key_compare key_comp() const
		{	
		return (this->_Getcomp());
		}

	value_compare value_comp() const
		{	
		return (value_compare(key_comp()));
		}

	template<bool _Multi2 = _Multi,
		enable_if_t<!_Multi2, int> = 0>
		_Pairib insert(const value_type& _Val)
		{	
		return (_Insert_nohint(false,
			_Val, _Nil()));
		}

	template<bool _Multi2 = _Multi,
		enable_if_t<_Multi2, int> = 0>
		iterator insert(const value_type& _Val)
		{	
		return (_Insert_nohint(false,
			_Val, _Nil()).first);
		}

	template<bool _Multi2 = _Multi,
		enable_if_t<!_Multi2, int> = 0>
		_Pairib insert(value_type&& _Val)
		{	
		return (_Insert_nohint(false,
			::std:: forward<value_type>(_Val), _Nil()));
		}

	template<bool _Multi2 = _Multi,
		enable_if_t<_Multi2, int> = 0>
		iterator insert(value_type&& _Val)
		{	
		return (_Insert_nohint(false,
			::std:: forward<value_type>(_Val), _Nil()).first);
		}

	iterator insert(const_iterator _Where,
		const value_type& _Val)
		{	
		return (_Insert_hint(_Where,
			_Val, _Nil()));
		}

	iterator insert(const_iterator _Where, value_type&& _Val)
		{	
		return (_Insert_hint(_Where,
			::std:: forward<value_type>(_Val), _Nil()));
		}

	template<class _Iter>
		void insert(_Iter _First, _Iter _Last)
		{	
		;
		for (; _First != _Last; ++_First)
			emplace_hint(end(), *_First);
		}

	void insert(::std:: initializer_list<value_type> _Ilist)
		{	
		insert(_Ilist.begin(), _Ilist.end());
		}

	iterator erase(const_iterator _Where)
		{	
 








		_Nodeptr _Erasednode = _Where._Mynode();	
		++_Where;	
 

		_Nodeptr _Fixnode;	
		_Nodeptr _Fixnodeparent;	
		_Nodeptr _Pnode = _Erasednode;

		if (this->_Isnil(this->_Left(_Pnode)))
			_Fixnode = this->_Right(_Pnode);	
		else if (this->_Isnil(this->_Right(_Pnode)))
			_Fixnode = this->_Left(_Pnode);	
		else
			{	
			_Pnode = _Where._Mynode();	
			_Fixnode = this->_Right(_Pnode);	
			}

		if (_Pnode == _Erasednode)
			{	
			_Fixnodeparent = this->_Parent(_Erasednode);
			if (!this->_Isnil(_Fixnode))
				this->_Parent(_Fixnode) = _Fixnodeparent;	

			if (_Root() == _Erasednode)
				_Root() = _Fixnode;	
			else if (this->_Left(_Fixnodeparent) == _Erasednode)
				this->_Left(_Fixnodeparent) = _Fixnode;	
			else
				this->_Right(_Fixnodeparent) =
					_Fixnode;	

			if (_Lmost() == _Erasednode)
				_Lmost() = this->_Isnil(_Fixnode)
					? _Fixnodeparent	
					: this->_Min(_Fixnode);	

			if (_Rmost() == _Erasednode)
				_Rmost() = this->_Isnil(_Fixnode)
					? _Fixnodeparent	
					: this->_Max(_Fixnode);	
			}
		else
			{	
			this->_Parent(this->_Left(_Erasednode)) =
				_Pnode;	
			this->_Left(_Pnode) =
				this->_Left(_Erasednode);	

			if (_Pnode == this->_Right(_Erasednode))
				_Fixnodeparent = _Pnode;	
			else
				{	
				_Fixnodeparent =
					this->_Parent(_Pnode);	
				if (!this->_Isnil(_Fixnode))
					this->_Parent(_Fixnode) = _Fixnodeparent;	
				this->_Left(_Fixnodeparent) = _Fixnode;	
				this->_Right(_Pnode) =
					this->_Right(_Erasednode);	
				this->_Parent(this->_Right(_Erasednode)) =
					_Pnode;	
				}

			if (_Root() == _Erasednode)
				_Root() = _Pnode;	
			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
				this->_Left(this->_Parent(_Erasednode)) =
					_Pnode;	
			else
				this->_Right(this->_Parent(_Erasednode)) =
					_Pnode;	

			this->_Parent(_Pnode) =
				this->_Parent(_Erasednode);	
			::std:: swap(this->_Color(_Pnode),
				this->_Color(_Erasednode));	
			}

		if (this->_Color(_Erasednode) == this->_Black)
			{	
			for (; _Fixnode != _Root()
				&& this->_Color(_Fixnode) == this->_Black;
				_Fixnodeparent = this->_Parent(_Fixnode))
				if (_Fixnode == this->_Left(_Fixnodeparent))
					{	
					_Pnode = this->_Right(_Fixnodeparent);
					if (this->_Color(_Pnode) == this->_Red)
						{	
						this->_Color(_Pnode) = this->_Black;
						this->_Color(_Fixnodeparent) = this->_Red;
						_Lrotate(_Fixnodeparent);
						_Pnode = this->_Right(_Fixnodeparent);
						}

					if (this->_Isnil(_Pnode))
						_Fixnode = _Fixnodeparent;	
					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
						{	
						this->_Color(_Pnode) = this->_Red;
						_Fixnode = _Fixnodeparent;
						}
					else
						{	
						if (this->_Color(this->_Right(_Pnode))
							== this->_Black)
							{	
							this->_Color(this->_Left(_Pnode)) = this->_Black;
							this->_Color(_Pnode) = this->_Red;
							_Rrotate(_Pnode);
							_Pnode = this->_Right(_Fixnodeparent);
							}

						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
						this->_Color(_Fixnodeparent) = this->_Black;
						this->_Color(this->_Right(_Pnode)) = this->_Black;
						_Lrotate(_Fixnodeparent);
						break;	
						}
					}
				else
					{	
					_Pnode = this->_Left(_Fixnodeparent);
					if (this->_Color(_Pnode) == this->_Red)
						{	
						this->_Color(_Pnode) = this->_Black;
						this->_Color(_Fixnodeparent) = this->_Red;
						_Rrotate(_Fixnodeparent);
						_Pnode = this->_Left(_Fixnodeparent);
						}

					if (this->_Isnil(_Pnode))
						_Fixnode = _Fixnodeparent;	
					else if (this->_Color(this->_Right(_Pnode)) ==
						this->_Black
						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
						{	
						this->_Color(_Pnode) = this->_Red;
						_Fixnode = _Fixnodeparent;
						}
					else
						{	
						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
							{	
							this->_Color(this->_Right(_Pnode)) = this->_Black;
							this->_Color(_Pnode) = this->_Red;
							_Lrotate(_Pnode);
							_Pnode = this->_Left(_Fixnodeparent);
							}

						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
						this->_Color(_Fixnodeparent) = this->_Black;
						this->_Color(this->_Left(_Pnode)) = this->_Black;
						_Rrotate(_Fixnodeparent);
						break;	
						}
					}

			this->_Color(_Fixnode) = this->_Black;	
			}

		this->_Getal().destroy(
			::std:: addressof(this->_Myval(_Erasednode)));	

		this->_Getal().deallocate(_Erasednode, 1);

		if (0 < this->_Mysize())
			--this->_Mysize();

		return (iterator(_Where._Ptr,
			&this->_Get_data()));	
		}

	iterator erase(const_iterator _First, const_iterator _Last)
		{	
		if (_First == begin() && _Last == end())
			{	
			clear();
			return (begin());
			}
		else
			{	
			while (_First != _Last)
				erase(_First++);
			return (iterator(_First._Ptr, &this->_Get_data()));
			}
		}

	size_type erase(const key_type& _Keyval)
		{	
		_Pairii _Where = equal_range(_Keyval);
		size_type _Num = ::std:: distance(_Where.first, _Where.second);
		erase(_Where.first, _Where.second);
		return (_Num);
		}

	void clear() noexcept
		{	
 



		_Erase(_Root());
		_Root() = this->_Myhead();
		_Lmost() = this->_Myhead();
		_Rmost() = this->_Myhead();
		this->_Mysize() = 0;
		}

	iterator find(const key_type& _Keyval)
		{	
		iterator _Where = lower_bound(_Keyval);
		return (_Where == end()
			|| this->_Getcomp()(_Keyval, this->_Key(_Where._Mynode()))
					? end() : _Where);
		}

	const_iterator find(const key_type& _Keyval) const
		{	
		const_iterator _Where = lower_bound(_Keyval);
		return (_Where == end()
			|| this->_Getcomp()(_Keyval, this->_Key(_Where._Mynode()))
					? end() : _Where);
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		iterator find(const _Other& _Keyval)
		{	
		iterator _Where = lower_bound(_Keyval);
		return (_Where == end()
			|| this->_Getcomp()(_Keyval, this->_Key(_Where._Mynode()))
					? end() : _Where);
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		const_iterator find(const _Other& _Keyval) const
		{	
		const_iterator _Where = lower_bound(_Keyval);
		return (_Where == end()
			|| this->_Getcomp()(_Keyval, this->_Key(_Where._Mynode()))
					? end() : _Where);
		}

	size_type count(const key_type& _Keyval) const
		{	
		_Paircc _Ans = equal_range(_Keyval);
		return (::std:: distance(_Ans.first, _Ans.second));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		size_type count(const _Other& _Keyval) const
		{	
		_Paircc _Ans = equal_range(_Keyval);
		return (::std:: distance(_Ans.first, _Ans.second));
		}

	iterator lower_bound(const key_type& _Keyval)
		{	
		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
		}

	const_iterator lower_bound(const key_type& _Keyval) const
		{	
		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		iterator lower_bound(const _Other& _Keyval)
		{	
		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		const_iterator lower_bound(const _Other& _Keyval) const
		{	
		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
		}

	iterator upper_bound(const key_type& _Keyval)
		{	
		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
		}

	const_iterator upper_bound(const key_type& _Keyval) const
		{	
		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		iterator upper_bound(const _Other& _Keyval)
		{	
		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		const_iterator upper_bound(const _Other& _Keyval) const
		{	
		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
		}

	_Pairii equal_range(const key_type& _Keyval)
		{	
		return (_Eqrange(_Keyval));
		}

	_Paircc equal_range(const key_type& _Keyval) const
		{	
		return (_Eqrange(_Keyval));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		_Pairii equal_range(const _Other& _Keyval)
		{	
		return (_Eqrange(_Keyval));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		_Paircc equal_range(const _Other& _Keyval) const
		{	
		return (_Eqrange(_Keyval));
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Pocs(this->_Getal(), _Right._Getal());
			this->_Swap_all(_Right);
			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
			_Swap_adl(this->_Myhead(), _Right._Myhead());
			::std:: swap(this->_Mysize(), _Right._Mysize());
			}
		}

protected:
	template<class _Valty>
		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
		{	
		return (_Node);
		}

	template<class _Valty>
		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
		{	
		return (this->_Buynode(::std:: forward<_Valty>(_Val)));
		}

	void _Destroy_if_not_nil(_Nodeptr _Newnode)
		{	
		this->_Getal().destroy(
			::std:: addressof(this->_Myval(_Newnode)));

		this->_Getal().deallocate(_Newnode, 1);
		}

	void _Destroy_if_not_nil(_Nil)
		{	
		}

	template<class _Valty,
		class _Nodety>
		iterator _Insert_hint(const_iterator _Where,
			_Valty&& _Val, _Nodety _Newnode)
		{	
		const_iterator _Next;
		bool _Leftish = false;	

		try {

 




		if (size() == 0)
			return (_Insert_at(true, this->_Myhead(),
				::std:: forward<_Valty>(_Val), _Newnode));	
		else if (this->_Multi)
			{	
			if (_Where == begin())
				{	
				if (!this->_Getcomp()(this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
					return (_Insert_at(true, _Where._Mynode(),
						::std:: forward<_Valty>(_Val), _Newnode));
				_Leftish = true;	
				}
			else if (_Where == end())
				{	
				if (!this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Rmost())))
					return (_Insert_at(false, _Rmost(),
						::std:: forward<_Valty>(_Val), _Newnode));
				}
			else if (!this->_Getcomp()(this->_Key(_Where._Mynode()), this->_Kfn(_Val))
				&& !this->_Getcomp()(this->_Kfn(_Val), this->_Key((--(_Next = _Where))._Mynode())))
				{	
				if (this->_Isnil(this->_Right(_Next._Mynode())))
					return (_Insert_at(false, _Next._Mynode(),
						::std:: forward<_Valty>(_Val), _Newnode));
				else
					return (_Insert_at(true, _Where._Mynode(),
						::std:: forward<_Valty>(_Val), _Newnode));
				}
			else if (!this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Where._Mynode()))
				&& (++(_Next = _Where) == end()
					|| !this->_Getcomp()(this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
				{	
				if (this->_Isnil(this->_Right(_Where._Mynode())))
					return (_Insert_at(false, _Where._Mynode(),
						::std:: forward<_Valty>(_Val), _Newnode));
				else
					return (_Insert_at(true, _Next._Mynode(),
						::std:: forward<_Valty>(_Val), _Newnode));
				}
			else
				_Leftish = true;	
			}
		else
			{	
			if (_Where == begin())
				{	
				if (this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Where._Mynode())))
					return (_Insert_at(true, _Where._Mynode(),
						::std:: forward<_Valty>(_Val), _Newnode));
				}
			else if (_Where == end())
				{	
				if (this->_Getcomp()(this->_Key(_Rmost()), this->_Kfn(_Val)))
					return (_Insert_at(false, _Rmost(),
						::std:: forward<_Valty>(_Val), _Newnode));
				}
			else if (this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Where._Mynode()))
				&& this->_Getcomp()(this->_Key((--(_Next = _Where))._Mynode()), this->_Kfn(_Val)))
				{	
				if (this->_Isnil(this->_Right(_Next._Mynode())))
					return (_Insert_at(false, _Next._Mynode(),
						::std:: forward<_Valty>(_Val), _Newnode));
				else
					return (_Insert_at(true, _Where._Mynode(),
						::std:: forward<_Valty>(_Val), _Newnode));
				}
			else if (this->_Getcomp()(this->_Key(_Where._Mynode()), this->_Kfn(_Val))
				&& (++(_Next = _Where) == end()
					|| this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
				{	
				if (this->_Isnil(this->_Right(_Where._Mynode())))
					return (_Insert_at(false, _Where._Mynode(),
						::std:: forward<_Valty>(_Val), _Newnode));
				else
					return (_Insert_at(true, _Next._Mynode(),
						::std:: forward<_Valty>(_Val), _Newnode));
				}
			}
		} catch (...) {
		_Destroy_if_not_nil(_Newnode);
		throw;
		}

		return (_Insert_nohint(_Leftish,
			::std:: forward<_Valty>(_Val), _Newnode).first);
		}

	template<class _Valty,
		class _Nodety>
		_Pairib _Insert_nohint(bool _Leftish,
			_Valty&& _Val, _Nodety _Newnode)
		{	
		try {
		_Nodeptr _Trynode = _Root();
		_Nodeptr _Wherenode = this->_Myhead();
		bool _Addleft = true;	

		while (!this->_Isnil(_Trynode))
			{	
			_Wherenode = _Trynode;
			if (_Leftish)
				_Addleft = !this->_Getcomp()(this->_Key(_Trynode), this->_Kfn(_Val));	
			else
				_Addleft = this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Trynode));	
			_Trynode = _Addleft ? this->_Left(_Trynode)
				: this->_Right(_Trynode);
			}

		if (this->_Multi)
			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
				::std:: forward<_Valty>(_Val), _Newnode), true));
		else
			{	
			iterator _Where = iterator(_Wherenode, &this->_Get_data());
			if (!_Addleft)
				;	
			else if (_Where == begin())
				return (_Pairib(_Insert_at(true, _Wherenode,
					::std:: forward<_Valty>(_Val), _Newnode), true));
			else
				--_Where;	

			if (this->_Getcomp()(this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
					::std:: forward<_Valty>(_Val), _Newnode), true));
			else
				{	
				_Destroy_if_not_nil(_Newnode);
				return (_Pairib(_Where, false));
				}
			}
		} catch (...) {
		_Destroy_if_not_nil(_Newnode);
		throw;
		}
		}

	template<class _Valty,
		class _Nodety>
		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
		_Valty&& _Val, _Nodety _Node)
		{	
		if (max_size() - 1 <= this->_Mysize())
			{	
			_Destroy_if_not_nil(_Node);
			_Xlength_error("map/set<T> too long");
			}
		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
			::std:: forward<_Valty>(_Val));

		++this->_Mysize();
		_Newnode->_Parent = _Wherenode;

		if (_Wherenode == this->_Myhead())
			{	
			_Root() = _Newnode;
			_Lmost() = _Newnode;
			_Rmost() = _Newnode;
			}
		else if (_Addleft)
			{	
			this->_Left(_Wherenode) = _Newnode;
			if (_Wherenode == _Lmost())
				_Lmost() = _Newnode;
			}
		else
			{	
			this->_Right(_Wherenode) = _Newnode;
			if (_Wherenode == _Rmost())
				_Rmost() = _Newnode;
			}

		for (_Nodeptr _Pnode = _Newnode;
			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
			if (this->_Parent(_Pnode)
				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
				{	
				_Wherenode =
					this->_Right(this->_Parent(this->_Parent(_Pnode)));
				if (this->_Color(_Wherenode) == this->_Red)
					{	
					this->_Color(this->_Parent(_Pnode)) = this->_Black;
					this->_Color(_Wherenode) = this->_Black;
					this->_Color(this->_Parent(this->_Parent(_Pnode)))
						= this->_Red;
					_Pnode = this->_Parent(this->_Parent(_Pnode));
					}
				else
					{	
					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
						{	
						_Pnode = this->_Parent(_Pnode);
						_Lrotate(_Pnode);
						}
					this->_Color(this->_Parent(_Pnode)) =
						this->_Black;	
					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
						this->_Red;
					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
					}
				}
			else
				{	
				_Wherenode =
					this->_Left(this->_Parent(this->_Parent(_Pnode)));
				if (this->_Color(_Wherenode) == this->_Red)
					{	
					this->_Color(this->_Parent(_Pnode)) = this->_Black;
					this->_Color(_Wherenode) = this->_Black;
					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
						this->_Red;
					_Pnode = this->_Parent(this->_Parent(_Pnode));
					}
				else
					{	
					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
						{	
						_Pnode = this->_Parent(_Pnode);
						_Rrotate(_Pnode);
						}
					this->_Color(this->_Parent(_Pnode)) =
						this->_Black;	
					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
						this->_Red;
					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
					}
				}

		this->_Color(_Root()) = this->_Black;	
		return (iterator(_Newnode, &this->_Get_data()));
		}

	template<class _Moveit>
		void _Copy(const _Myt& _Right, _Moveit _Movefl)
		{	
		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
		this->_Mysize() = _Right.size();
		if (!this->_Isnil(_Root()))
			{	
			_Lmost() = this->_Min(_Root());
			_Rmost() = this->_Max(_Root());
			}
		else
			{	
			_Lmost() = this->_Myhead();
			_Rmost() = this->_Myhead();
			}
		}

	template<class _Ty,
		class _Is_set>
		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
		{	
		return (this->_Buynode(_Val));
		}

	template<class _Ty>
		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
		{	
		return (this->_Buynode(::std:: move(_Val)));
		}

	template<class _Ty>
		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
		{	
		return (this->_Buynode(
			::std:: move(const_cast<key_type&>(_Val.first)),
			::std:: move(_Val.second)));
		}

	template<class _Moveit>
		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
			_Moveit _Movefl)
		{	
		_Nodeptr _Newroot = this->_Myhead();	

		if (!this->_Isnil(_Rootnode))
			{	
			typename is_same<key_type, value_type>::type _Is_set;
			_Nodeptr _Pnode = _Copy_or_move(
				this->_Myval(_Rootnode), _Movefl, _Is_set);
			_Pnode->_Parent = _Wherenode;
			_Pnode->_Color = this->_Color(_Rootnode);
			if (this->_Isnil(_Newroot))
				_Newroot = _Pnode;	

			try {
			this->_Left(_Pnode) =
				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
			this->_Right(_Pnode) =
				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
			} catch (...) {
			_Erase(_Newroot);	
			throw;
			}
			}

		return (_Newroot);	
		}

	template<class _Other>
		_Paircc _Eqrange(const _Other& _Keyval) const
		{	
		_Nodeptr _Pnode = _Root();
		_Nodeptr _Lonode = this->_Myhead();	
		_Nodeptr _Hinode = this->_Myhead();	

		while (!this->_Isnil(_Pnode))
			if (this->_Getcomp()(this->_Key(_Pnode), _Keyval))
				_Pnode = this->_Right(_Pnode);	
			else
				{	
				if (this->_Isnil(_Hinode)
						&& this->_Getcomp()(_Keyval, this->_Key(_Pnode)))
					_Hinode = _Pnode;	
				_Lonode = _Pnode;
				_Pnode = this->_Left(_Pnode);	
				}

		_Pnode = this->_Isnil(_Hinode) ? _Root()
			: this->_Left(_Hinode);	
		while (!this->_Isnil(_Pnode))
			if (this->_Getcomp()(_Keyval, this->_Key(_Pnode)))
				{	
				_Hinode = _Pnode;
				_Pnode = this->_Left(_Pnode);	
				}
			else
				_Pnode = this->_Right(_Pnode);	

		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
		return (_Paircc(_First, _Last));
		}

	template<class _Other>
		_Pairii _Eqrange(const _Other& _Keyval)
		{	
		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
		return (_Pairii(_First, _Last));
		}

	void _Erase(_Nodeptr _Rootnode)
		{	
		for (_Nodeptr _Pnode = _Rootnode;
			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
			{	
			_Erase(this->_Right(_Pnode));
			_Pnode = this->_Left(_Pnode);
			this->_Getal().destroy(
				::std:: addressof(this->_Myval(_Rootnode)));

			this->_Getal().deallocate(_Rootnode, 1);
			}
		}

	bool _Compare(const key_type& _Left, const key_type& _Right) const
		{	
		return (this->_Getcomp()(_Left, _Right));
		}

	template<class _Ty1,
		class _Ty2>
		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
		{	
		return (this->_Getcomp()(_Left, _Right));
		}

	template<class _Other>
		_Nodeptr _Lbound(const _Other& _Keyval) const
		{	
		_Nodeptr _Pnode = _Root();
		_Nodeptr _Wherenode = this->_Myhead();	

		while (!this->_Isnil(_Pnode))
			if (_Compare(this->_Key(_Pnode), _Keyval))
				_Pnode = this->_Right(_Pnode);	
			else
				{	
				_Wherenode = _Pnode;
				_Pnode = this->_Left(_Pnode);	
				}

		return (_Wherenode);	
		}

	_Nodeptr& _Lmost() const
		{	
		return (this->_Left(this->_Myhead()));
		}

	void _Lrotate(_Nodeptr _Wherenode)
		{	
		_Nodeptr _Pnode = this->_Right(_Wherenode);
		this->_Right(_Wherenode) = this->_Left(_Pnode);

		if (!this->_Isnil(this->_Left(_Pnode)))
			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

		if (_Wherenode == _Root())
			_Root() = _Pnode;
		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
		else
			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

		this->_Left(_Pnode) = _Wherenode;
		this->_Parent(_Wherenode) = _Pnode;
		}

	_Nodeptr& _Rmost() const
		{	
		return (this->_Right(this->_Myhead()));
		}

	_Nodeptr& _Root() const
		{	
		return (this->_Parent(this->_Myhead()));
		}

	void _Rrotate(_Nodeptr _Wherenode)
		{	
		_Nodeptr _Pnode = this->_Left(_Wherenode);
		this->_Left(_Wherenode) = this->_Right(_Pnode);

		if (!this->_Isnil(this->_Right(_Pnode)))
			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

		if (_Wherenode == _Root())
			_Root() = _Pnode;
		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
		else
			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

		this->_Right(_Pnode) = _Wherenode;
		this->_Parent(_Wherenode) = _Pnode;
		}

	template<class _Other>
		_Nodeptr _Ubound(const _Other& _Keyval) const
		{	
		_Nodeptr _Pnode = _Root();
		_Nodeptr _Wherenode = this->_Myhead();	

		while (!this->_Isnil(_Pnode))
			if (_Compare(_Keyval, this->_Key(_Pnode)))
				{	
				_Wherenode = _Pnode;
				_Pnode = this->_Left(_Pnode);	
				}
			else
				_Pnode = this->_Right(_Pnode);	

		return (_Wherenode);	
		}

 

















	void _Tidy()
		{	
		erase(begin(), end());
		}

	const key_type& _Kfn(const value_type& _Val) const
		{	
		return (_Traits::_Kfn(_Val));
		}

	const key_type& _Key(_Nodeptr _Pnode) const
		{	
		return ((const key_type&)this->_Kfn(this->_Myval(_Pnode)));
		}
	};

		
template<class _Traits> inline
	bool operator==(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
	{	
	return (_Left.size() == _Right.size()
		&& ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
	}

template<class _Traits> inline
	bool operator!=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Traits> inline
	bool operator<(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
	{	
	return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
		_Right.begin(), _Right.end()));
	}

template<class _Traits> inline
	bool operator>(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Traits> inline
	bool operator<=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Traits> inline
	bool operator>=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
	{	
	return (!(_Left < _Right));
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)










 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
namespace std {
		
template<class _Kty,	
	class _Ty,	
	class _Pr,	
	class _Alloc,	
	bool _Mfl>	
	class _Tmap_traits
	{	
public:
	typedef _Kty key_type;
	typedef pair<const _Kty, _Ty> value_type;
	typedef _Pr key_compare;
	typedef _Alloc allocator_type;

	enum
		{	
		_Multi = _Mfl};

	class value_compare
		{	
		friend class _Tmap_traits<_Kty, _Ty, _Pr, _Alloc, _Mfl>;

	public:
		typedef value_type first_argument_type;
		typedef value_type second_argument_type;
		typedef bool result_type;

		bool operator()(const value_type& _Left,
			const value_type& _Right) const
			{	
			return (comp(_Left.first, _Right.first));
			}

		value_compare(key_compare _Pred)
			: comp(_Pred)
			{	
			}

	protected:
		key_compare comp;	
		};

	template<class _Ty1,
		class _Ty2>
		static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val)
		{	
		return (_Val.first);
		}
	};

		
template<class _Kty,
	class _Ty,
	class _Pr = less<_Kty>,
	class _Alloc = allocator<pair<const _Kty, _Ty> > >
	class map
		: public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false> >
	{	
public:
	typedef map<_Kty, _Ty, _Pr, _Alloc> _Myt;
	typedef _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false> > _Mybase;
	typedef _Kty key_type;
	typedef _Ty mapped_type;
	typedef _Pr key_compare;
	typedef typename _Mybase::value_compare value_compare;
	typedef typename _Mybase::allocator_type allocator_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;
	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;
	typedef typename _Mybase::reverse_iterator reverse_iterator;
	typedef typename _Mybase::const_reverse_iterator
		const_reverse_iterator;
	typedef typename _Mybase::value_type value_type;

	typedef typename _Mybase::_Alty _Alty;
	typedef typename _Mybase::_Pairib _Pairib;

	map()
		: _Mybase(key_compare())
		{	
		}

	explicit map(const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		}

	map(const _Myt& _Right)
		: _Mybase(_Right,
			_Right._Getal().select_on_container_copy_construction())
		{	
		}

	map(const _Myt& _Right, const allocator_type& _Al)
		: _Mybase(_Right, _Al)
		{	
		}

	explicit map(const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		}

	map(const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		}

	template<class _Iter>
		map(_Iter _First, _Iter _Last)
		: _Mybase(key_compare())
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		map(_Iter _First, _Iter _Last,
			const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		map(_Iter _First, _Iter _Last,
			const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		insert(_First, _Last);
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	map(_Myt&& _Right)
		: _Mybase(::std:: move(_Right))
		{	
		}

	map(_Myt&& _Right, const allocator_type& _Al)
		: _Mybase(::std:: move(_Right), _Al)
		{	
		}

	_Myt& operator=(_Myt&& _Right)
		noexcept(_Alty::is_always_equal::value && is_nothrow_move_assignable<_Pr>::value)
		{	
		_Mybase::operator=(::std:: move(_Right));
		return (*this);
		}

	mapped_type& operator[](key_type&& _Keyval)
		{	
		return (try_emplace(::std:: move(_Keyval)).first->second);
		}

	void swap(_Myt& _Right)
		noexcept(_Alty::is_always_equal::value && _Is_nothrow_swappable<_Pr>::value)
		{	
		_Mybase::swap(_Right);
		}

	using _Mybase::insert;

	template<class _Valty,
		class = enable_if_t<is_constructible<value_type, _Valty>::value> >
		_Pairib insert(_Valty&& _Val)
		{	
		return (this->emplace(::std:: forward<_Valty>(_Val)));
		}

	template<class _Valty,
		class = enable_if_t<is_constructible<value_type, _Valty>::value> >
		iterator insert(const_iterator _Where, _Valty&& _Val)
		{	
		return (this->emplace_hint(_Where, ::std:: forward<_Valty>(_Val)));
		}

	template<class _Keyty,
		class... _Mappedty>
		_Pairib _Try_emplace(_Keyty&& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		iterator _Where = _Mybase::lower_bound(_Keyval);
		if (_Where == _Mybase::end()
			|| _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Mynode())))
			return (_Pairib(
				_Mybase::emplace_hint(_Where,
					piecewise_construct,
					::std:: forward_as_tuple(
						::std:: forward<_Keyty>(_Keyval)),
					::std:: forward_as_tuple(
						::std:: forward<_Mappedty>(_Mapval)...)),
				true));
		else
			return (_Pairib(_Where, false));
		}

	template<class... _Mappedty>
		_Pairib try_emplace(const key_type& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		return (_Try_emplace(_Keyval, ::std:: forward<_Mappedty>(_Mapval)...));
		}

	template<class... _Mappedty>
		iterator try_emplace(const_iterator, const key_type& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		return (_Try_emplace(_Keyval,
			::std:: forward<_Mappedty>(_Mapval)...).first);
		}

	template<class... _Mappedty>
		_Pairib try_emplace(key_type&& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		return (_Try_emplace(::std:: move(_Keyval),
			::std:: forward<_Mappedty>(_Mapval)...));
		}

	template<class... _Mappedty>
		iterator try_emplace(const_iterator, key_type&& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		return (_Try_emplace(::std:: move(_Keyval),
			::std:: forward<_Mappedty>(_Mapval)...).first);
		}

	template<class _Keyty,
		class _Mappedty>
		_Pairib _Insert_or_assign(_Keyty&& _Keyval,
			_Mappedty&& _Mapval)
		{	
		iterator _Where = _Mybase::lower_bound(_Keyval);
		if (_Where == _Mybase::end()
			|| _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Mynode())))
			return (_Pairib(
				_Mybase::emplace_hint(_Where,
					::std:: forward<_Keyty>(_Keyval),
					::std:: forward<_Mappedty>(_Mapval)),
				true));
		else
			{	
			_Where->second = ::std:: forward<_Mappedty>(_Mapval);
			return (_Pairib(_Where, false));
			}
		}

	template<class _Mappedty>
		_Pairib insert_or_assign(const key_type& _Keyval,
			_Mappedty&& _Mapval)
		{	
		return (_Insert_or_assign(_Keyval,
			::std:: forward<_Mappedty>(_Mapval)));
		}

	template<class _Mappedty>
		iterator insert_or_assign(const_iterator, const key_type& _Keyval,
			_Mappedty&& _Mapval)
		{	
		return (_Insert_or_assign(_Keyval,
			::std:: forward<_Mappedty>(_Mapval)).first);
		}

	template<class _Mappedty>
		_Pairib insert_or_assign(key_type&& _Keyval,
			_Mappedty&& _Mapval)
		{	
		return (_Insert_or_assign(::std:: move(_Keyval),
			::std:: forward<_Mappedty>(_Mapval)));
		}

	template<class _Mappedty>
		iterator insert_or_assign(const_iterator, key_type&& _Keyval,
			_Mappedty&& _Mapval)
		{	
		return (_Insert_or_assign(::std:: move(_Keyval),
			::std:: forward<_Mappedty>(_Mapval)).first);
		}

	map(::std:: initializer_list<value_type> _Ilist)
		: _Mybase(key_compare())
		{	
		insert(_Ilist);
		}

	map(::std:: initializer_list<value_type> _Ilist,
		const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		insert(_Ilist);
		}

	map(::std:: initializer_list<value_type> _Ilist,
		const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		insert(_Ilist);
		}

	_Myt& operator=(::std:: initializer_list<value_type> _Ilist)
		{	
		_Mybase::clear();
		insert(_Ilist);
		return (*this);
		}

	mapped_type& operator[](const key_type& _Keyval)
		{	
		return (try_emplace(_Keyval).first->second);
		}

	mapped_type& at(const key_type& _Keyval)
		{	
		iterator _Where = _Mybase::lower_bound(_Keyval);
		if (_Where == _Mybase::end()
			|| _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Mynode())))
			_Xout_of_range("invalid map<K, T> key");
		return (_Where->second);
		}

	const mapped_type& at(const key_type& _Keyval) const
		{	
		const_iterator _Where = _Mybase::lower_bound(_Keyval);
		if (_Where == _Mybase::end()
			|| _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Mynode())))
			_Xout_of_range("invalid map<K, T> key");
		return (_Where->second);
		}
	};

template<class _Kty,
	class _Ty,
	class _Pr,
	class _Alloc> inline
	void swap(map<_Kty, _Ty, _Pr, _Alloc>& _Left,
		map<_Kty, _Ty, _Pr, _Alloc>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

		
template<class _Kty,
	class _Ty,
	class _Pr = less<_Kty>,
	class _Alloc = allocator<pair<const _Kty, _Ty> > >
	class multimap
		: public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true> >
	{	
public:
	typedef multimap<_Kty, _Ty, _Pr, _Alloc> _Myt;
	typedef _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true> > _Mybase;
	typedef _Kty key_type;
	typedef _Ty mapped_type;
	typedef _Pr key_compare;
	typedef typename _Mybase::value_compare value_compare;
	typedef typename _Mybase::allocator_type allocator_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;
	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;
	typedef typename _Mybase::reverse_iterator reverse_iterator;
	typedef typename _Mybase::const_reverse_iterator
		const_reverse_iterator;
	typedef typename _Mybase::value_type value_type;

	typedef typename _Mybase::_Alty _Alty;

	multimap()
		: _Mybase(key_compare())
		{	
		}

	explicit multimap(const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		}

	multimap(const _Myt& _Right)
		: _Mybase(_Right,
			_Right._Getal().select_on_container_copy_construction())
		{	
		}

	multimap(const _Myt& _Right, const allocator_type& _Al)
		: _Mybase(_Right, _Al)
		{	
		}

	explicit multimap(const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		}

	multimap(const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		}

	template<class _Iter>
		multimap(_Iter _First, _Iter _Last)
		: _Mybase(key_compare())
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		multimap(_Iter _First, _Iter _Last,
			const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		multimap(_Iter _First, _Iter _Last,
			const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		insert(_First, _Last);
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	multimap(_Myt&& _Right)
		: _Mybase(::std:: move(_Right))
		{	
		}

	multimap(_Myt&& _Right, const allocator_type& _Al)
		: _Mybase(::std:: move(_Right), _Al)
		{	
		}

	_Myt& operator=(_Myt&& _Right)
		noexcept(_Alty::is_always_equal::value && is_nothrow_move_assignable<_Pr>::value)
		{	
		_Mybase::operator=(::std:: move(_Right));
		return (*this);
		}

	template<class... _Valty>
		iterator emplace(_Valty&&... _Val)
		{	
		return (_Mybase::emplace(::std:: forward<_Valty>(_Val)...).first);
		}

	void swap(_Myt& _Right)
		noexcept(_Alty::is_always_equal::value && _Is_nothrow_swappable<_Pr>::value)
		{	
		_Mybase::swap(_Right);
		}

	using _Mybase::insert;

	template<class _Valty,
		class = enable_if_t<is_constructible<value_type, _Valty>::value> >
		iterator insert(_Valty&& _Val)
		{	
		return (this->emplace(::std:: forward<_Valty>(_Val)));
		}

	template<class _Valty,
		class = enable_if_t<is_constructible<value_type, _Valty>::value> >
		iterator insert(const_iterator _Where, _Valty&& _Val)
		{	
		return (this->emplace_hint(_Where, ::std:: forward<_Valty>(_Val)));
		}

	multimap(::std:: initializer_list<value_type> _Ilist)
		: _Mybase(key_compare())
		{	
		insert(_Ilist);
		}

	multimap(::std:: initializer_list<value_type> _Ilist,
		const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		insert(_Ilist);
		}

	multimap(::std:: initializer_list<value_type> _Ilist,
		const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		insert(_Ilist);
		}

	_Myt& operator=(::std:: initializer_list<value_type> _Ilist)
		{	
		_Mybase::clear();
		insert(_Ilist);
		return (*this);
		}
	};

template<class _Kty,
	class _Ty,
	class _Pr,
	class _Alloc> inline
	void swap(multimap<_Kty, _Ty, _Pr, _Alloc>& _Left,
		multimap<_Kty, _Ty, _Pr, _Alloc>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)










#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
 #pragma warning(disable: 4244 28309 28285)

namespace std {
		
const int _ISORT_MAX = 32;	

template<class _Iter1,
	class _Iter2,
	class _UIter1,
	class _UIter2> inline
	pair<_Iter1, _Iter2>
		_Rechecked_both(_Iter1 _Dest1, _Iter2 _Dest2, pair<_UIter1, _UIter2> _Src)
	{	
	return (pair<_Iter1, _Iter2>(
		_Rechecked(_Dest1, _Src.first),
		_Rechecked(_Dest2, _Src.second)
		));
	}

 































		
template<class _InIt,
	class _Fn1> inline
	void _For_each_unchecked(_InIt _First, _InIt _Last, _Fn1& _Func)
	{	
	for (; _First != _Last; ++_First)
		_Func(*_First);
	}

template<class _InIt,
	class _Fn1> inline
	_Fn1 for_each(_InIt _First, _InIt _Last, _Fn1 _Func)
	{	
	;
	_For_each_unchecked(_Unchecked(_First), _Unchecked(_Last), _Func);
	return (_Func);
	}

		
template<class _InIt,
	class _Pr> inline
	_InIt _Find_if_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			break;
	return (_First);
	}

template<class _InIt,
	class _Pr> inline
	_InIt find_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	return (_Rechecked(_First,
		_Find_if_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Adjacent_find_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
	{	
	if (_First != _Last)
		for (_FwdIt _Firstb; (void)(_Firstb = _First), ++_First != _Last; )
			if (_Pred(*_Firstb, *_First))
				return (_Firstb);
	return (_Last);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Adjacent_find_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: adjacent_find(_First, _Last, equal_to<>()));
	}

		
template<class _InIt,
	class _Pr> inline
	typename iterator_traits<_InIt>::difference_type
		_Count_if_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
	{	
	typename iterator_traits<_InIt>::difference_type _Count = 0;

	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			++_Count;
	return (_Count);
	}

template<class _InIt,
	class _Pr> inline
	typename iterator_traits<_InIt>::difference_type
		count_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	return (_Count_if_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2>
		_Mismatch_unchecked(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2, _Pr& _Pred)
	{	
	for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )
		{	
		++_First1;
		++_First2;
		}

	return (pair<_InIt1, _InIt2>(_First1, _First2));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	auto _Mismatch_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred, input_iterator_tag, input_iterator_tag)
			-> pair<_InIt1, decltype(_Unchecked_idl0(_First2))>
	{	
	return (_Mismatch_unchecked(_First1, _Last1,
		_Unchecked_idl0(_First2), _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, decltype(_Unchecked(::std:: declval<_InIt2>()))>
		_Mismatch_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Mismatch_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2>
		_Mismatch_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2, _Pr& _Pred)
	{	
	;
	;
	return (_Rechecked_both(_First1, _First2,
		_Mismatch_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
			_First2, _Pred, _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>())));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2>
		mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
	return (_Mismatch_no_deprecate(_First1, _Last1, _First2, _Pred));
	}

 














		
template<class _InIt1,
	class _InIt2> inline
	pair<_InIt1, _InIt2>
		mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2)
	{	
	return (::std:: mismatch(_First1, _Last1, _First2,
		equal_to<>()));
	}

 












		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2>
		_Mismatch_unchecked(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2
		&& _Pred(*_First1, *_First2); )
		{	
		++_First1;
		++_First2;
		}

	return (pair<_InIt1, _InIt2>(_First1, _First2));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2>
		mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Rechecked_both(_First1, _First2,
		_Mismatch_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred)));
	}

		
template<class _InIt1,
	class _InIt2> inline
	pair<_InIt1, _InIt2>
		mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: mismatch(_First1, _Last1, _First2, _Last2,
		equal_to<>()));
	}

		
template<class _InIt,
	class _Pr> inline
	bool _All_of_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			return (false);
	return (true);
	}

template<class _InIt,
	class _Pr> inline
	bool all_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	return (_All_of_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt,
	class _Pr> inline
	bool _Any_of_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			return (true);
	return (false);
	}

template<class _InIt,
	class _Pr> inline
	bool any_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	return (_Any_of_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt,
	class _Pr> inline
	bool _None_of_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			return (false);
	return (true);
	}

template<class _InIt,
	class _Pr> inline
	bool none_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	return (_None_of_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt,
	class _Pr> inline
	_InIt _Find_if_not_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			break;
	return (_First);
	}

template<class _InIt,
	class _Pr> inline
	_InIt find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	return (_Rechecked(_First,
		_Find_if_not_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Copy_if_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest,
		_Pr& _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			{	
			;
			*_Dest++ = *_First;
			}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Copy_if_no_deprecate(_InIt _First, _InIt _Last, _OutIt _Dest,
		_Pr& _Pred)
	{	
	;
	return (_Rechecked(_Dest,
		_Copy_if_unchecked(_Unchecked(_First), _Unchecked(_Last),
		_Unchecked_idl0(_Dest), _Pred)));
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
		_Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Copy_if_no_deprecate(_First, _Last, _Dest, _Pred));
	}

 













		
template<class _InIt,
	class _OutIt1,
	class _OutIt2,
	class _Pr> inline
	pair<_OutIt1, _OutIt2>
		_Partition_copy_unchecked(_InIt _First, _InIt _Last,
			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr& _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			{	
			;
			*_Dest1++ = *_First;
			}
		else
			{	
			;
			*_Dest2++ = *_First;
			}

	return (pair<_OutIt1, _OutIt2>(_Dest1, _Dest2));
	}

template<class _InIt,
	class _OutIt1,
	class _OutIt2,
	class _Pr> inline
	pair<_OutIt1, _OutIt2>
		_Partition_copy_no_deprecate(_InIt _First, _InIt _Last,
			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr& _Pred)
	{	
	;
	return (_Rechecked_both(_Dest1, _Dest2,
		_Partition_copy_unchecked(_Unchecked(_First), _Unchecked(_Last),
		_Unchecked_idl0(_Dest1), _Unchecked_idl0(_Dest2), _Pred)));
	}

template<class _InIt,
	class _OutIt1,
	class _OutIt2,
	class _Pr> inline
	pair<_OutIt1, _OutIt2>
		partition_copy(_InIt _First, _InIt _Last,
			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } };
	(_Unchecked_iterators::_Deprecate(_Is_checked(_Dest1)));
	(_Unchecked_iterators::_Deprecate(_Is_checked(_Dest2)));
	return (_Partition_copy_no_deprecate(_First, _Last, _Dest1, _Dest2, _Pred));
	}

 
















































		
template<class _InIt,
	class _Pr> inline
	bool _Is_partitioned_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			break;	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			return (false);	
	return (true);
	}

template<class _InIt,
	class _Pr> inline
	bool is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	return (_Is_partitioned_unchecked(_Unchecked(_First), _Unchecked(_Last),
		_Pred));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Partition_point_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
	{	
	_Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);
	while (0 < _Count)
		{	
		_Iter_diff_t<_FwdIt> _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Pred(*_Mid))
			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}

	return (_First);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	return (_Rechecked(_First,
		_Partition_point_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 _Search_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
		forward_iterator_tag, forward_iterator_tag)
	{	
	for (; ; ++_First1)
		{	
		_FwdIt1 _Mid1 = _First1;
		for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
			if (_Mid2 == _Last2)
				return (_First1);
			else if (_Mid1 == _Last1)
				return (_Last1);
			else if (!_Pred(*_Mid1, *_Mid2))
				break;
		}
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 _Search_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	_Iter_diff_t<_FwdIt1> _Count1 = _Last1 - _First1;
	_Iter_diff_t<_FwdIt2> _Count2 = _Last2 - _First2;

	for (; _Count2 <= _Count1; ++_First1, (void)--_Count1)
		{	
		_FwdIt1 _Mid1 = _First1;
		for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
			if (_Mid2 == _Last2)
				return (_First1);
			else if (!_Pred(*_Mid1, *_Mid2))
				break;
		}

	return (_Last1);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Rechecked(_First1,
		_Search_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred,
			_Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>())));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	return (::std:: search(_First1, _Last1, _First2, _Last2,
		equal_to<>()));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	_FwdIt _Search_n_unchecked(_FwdIt _First, _FwdIt _Last,
		_Diff _Count, const _Ty& _Val, _Pr& _Pred, forward_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First);

	for (; _First != _Last; ++_First)
		if (_Pred(*_First, _Val))
			{	
			_FwdIt _Mid = _First;

			for (_Diff _Count1 = _Count; ; )
				if (--_Count1 == 0)
					return (_First);	
				else if (++_Mid == _Last)
					return (_Last);	
				else if (!_Pred(*_Mid, _Val))
					{	
					break;
					}

			_First = _Mid;	
			}

	return (_Last);
	}

template<class _FwdIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	_FwdIt _Search_n_unchecked(_FwdIt _First, _FwdIt _Last,
		_Diff _Count, const _Ty& _Val, _Pr& _Pred, random_access_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First);

	_FwdIt _Oldfirst = _First;
	for (_Diff _Inc = 0; _Count <= _Last - _Oldfirst; )
		{	
		_First = _Oldfirst + _Inc;
		if (_Pred(*_First, _Val))
			{	
			_Diff _Count1 = _Count;
			_FwdIt _Mid = _First;

			for (; _Oldfirst != _First && _Pred(_First[-1], _Val);
				--_First)
				--_Count1;	

			if (_Count1 <= _Last - _Mid)
				for (; ; )
					{	
					if (--_Count1 == 0)
						return (_First);	
					else if (!_Pred(*++_Mid, _Val))
						{	
						break;
						}
					}
			_Oldfirst = ++_Mid;	
			_Inc = 0;
			}
		else
			{	
			_Oldfirst = _First + 1;
			_Inc = _Count - 1;
			}
		}

	return (_Last);
	}

template<class _FwdIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	_FwdIt search_n(_FwdIt _First, _FwdIt _Last,
		_Diff _Count, const _Ty& _Val, _Pr _Pred)
	{	
	;
	return (_Rechecked(_First,
		_Search_n_unchecked(_Unchecked(_First), _Unchecked(_Last), _Count, _Val,
			_Pred, _Iter_cat_t<_FwdIt>())));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Ty> inline
	_FwdIt search_n(_FwdIt _First, _FwdIt _Last,
		_Diff _Count, const _Ty& _Val)
	{	
	return (::std:: search_n(_First, _Last, _Count, _Val,
		equal_to<>()));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 _Find_end_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred)
	{	
	_Iter_diff_t<_FwdIt1> _Count1 = ::std:: distance(_First1, _Last1);
	_Iter_diff_t<_FwdIt2> _Count2 = ::std:: distance(_First2, _Last2);
	_FwdIt1 _Ans = _Last1;

	if (0 < _Count2)
		{	
		;
		for (; _Count2 <= _Count1; ++_First1, (void)--_Count1)
			{	
			_FwdIt1 _Mid1 = _First1;
			for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1)
				if (!_Pred(*_Mid1, *_Mid2))
					break;
				else if (++_Mid2 == _Last2)
					{	
					_Ans = _First1;
					break;
					}
			}
		}

	return (_Ans);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First1,
		_Find_end_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred)));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	return (::std:: find_end(_First1, _Last1, _First2, _Last2,
		equal_to<>()));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 _Find_first_of_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred)
	{	
	for (; _First1 != _Last1; ++_First1)
		for (_FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++_Mid2)
			if (_Pred(*_First1, *_Mid2))
				return (_First1);
	return (_First1);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Rechecked(_First1,
		_Find_first_of_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred)));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	return (::std:: find_first_of(_First1, _Last1, _First2, _Last2,
		equal_to<>()));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 _Swap_ranges_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _Dest)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_Dest)
		::std:: iter_swap(_First1, _Dest);
	return (_Dest);
	}

template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 _Swap_ranges1(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _Dest,
		forward_iterator_tag, forward_iterator_tag)
	{	
	return (_Rechecked(_Dest,
		_Swap_ranges_unchecked(_First1, _Last1, _Unchecked_idl0(_Dest))));
	}

template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 _Swap_ranges1(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _Dest,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Swap_ranges_unchecked(_First1, _Last1, _Unchecked(_Dest))));
	}

template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	;
	return (_Swap_ranges1(_Unchecked(_First1), _Unchecked(_Last1),
		_Dest, _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
	}

 












		
template<class _InIt,
	class _OutIt,
	class _Fn1> inline
	_OutIt _Transform_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn1& _Func)
	{	
	for (; _First != _Last; ++_First, (void)++_Dest)
		*_Dest = _Func(*_First);
	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Fn1> inline
	_OutIt _Transform_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn1& _Func,
		input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Transform_unchecked(_First, _Last, _Unchecked_idl0(_Dest), _Func)));
	}

template<class _InIt,
	class _OutIt,
	class _Fn1> inline
	_OutIt _Transform_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn1& _Func,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Transform_unchecked(_First, _Last, _Unchecked(_Dest), _Func)));
	}

template<class _InIt,
	class _OutIt,
	class _Fn1> inline
	_OutIt _Transform_no_deprecate(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn1& _Func)
	{	
	;
	;
	return (_Transform_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Func, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
	}

template<class _InIt,
	class _OutIt,
	class _Fn1> inline
	_OutIt transform(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn1 _Func)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Transform_no_deprecate(_First, _Last, _Dest, _Func));
	}

 













		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn2> inline
	_OutIt _Transform_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2& _Func)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_First2, ++_Dest)
		*_Dest = _Func(*_First1, *_First2);
	return (_Dest);
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn2> inline
	_OutIt _Transform_no_deprecate2(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2& _Func,
		input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Transform_unchecked(_First1, _Last1, _First2, _Unchecked_idl0(_Dest), _Func)));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn2> inline
	_OutIt _Transform_no_deprecate2(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2& _Func,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Transform_unchecked(_First1, _Last1, _First2, _Unchecked(_Dest), _Func)));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn2> inline
	_OutIt _Transform_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2& _Func,
		input_iterator_tag, input_iterator_tag)
	{	
	return (_Transform_no_deprecate2(_First1, _Last1,
		_Unchecked_idl0(_First2), _Dest, _Func,
		_Iter_cat_t<_InIt1>(), _Iter_cat_t<_OutIt>()));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn2> inline
	_OutIt _Transform_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2& _Func,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Transform_no_deprecate2(_First1, _Last1,
		_Unchecked(_First2), _Dest, _Func,
		_Iter_cat_t<_InIt1>(), _Iter_cat_t<_OutIt>()));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn2> inline
	_OutIt _Transform_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2& _Func)
	{	
	;
	;
	;
	return (_Transform_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
		_First2, _Dest, _Func,
		_Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn2> inline
	_OutIt transform(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } };
	(_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
	(_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Transform_no_deprecate(_First1, _Last1, _First2, _Dest, _Func));
	}

 











































		
template<class _FwdIt,
	class _Ty> inline
	void _Replace_unchecked(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Oldval, const _Ty& _Newval)
	{	
	for (; _First != _Last; ++_First)
		if (*_First == _Oldval)
			*_First = _Newval;
	}

template<class _FwdIt,
	class _Ty> inline
	void replace(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Oldval, const _Ty& _Newval)
	{	
	;
	_Replace_unchecked(_Unchecked(_First), _Unchecked(_Last),
		_Oldval, _Newval);
	}

		
template<class _FwdIt,
	class _Pr,
	class _Ty> inline
	void _Replace_if_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			*_First = _Val;
	}

template<class _FwdIt,
	class _Pr,
	class _Ty> inline
	void replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
	{	
	;
	_Replace_if_unchecked(_Unchecked(_First), _Unchecked(_Last),
		_Pred, _Val);
	}

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Replace_copy_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
	{	
	for (; _First != _Last; ++_First, (void)++_Dest)
		*_Dest = *_First == _Oldval ? _Newval : *_First;
	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Replace_copy1(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
		input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Replace_copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest),
		_Oldval, _Newval)));
	}

template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Replace_copy1(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Replace_copy_unchecked(_First, _Last, _Unchecked(_Dest),
		_Oldval, _Newval)));
	}

template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt replace_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	;
	return (_Replace_copy1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Oldval, _Newval,
		_Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
	}

 













		
template<class _InIt,
	class _OutIt,
	class _Pr,
	class _Ty> inline
	_OutIt _Replace_copy_if_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr& _Pred, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First, (void)++_Dest)
		*_Dest = _Pred(*_First) ? _Val : *_First;
	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Pr,
	class _Ty> inline
	_OutIt _Replace_copy_if_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr& _Pred, const _Ty& _Val,
		input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Replace_copy_if_unchecked(_First, _Last, _Unchecked_idl0(_Dest), _Pred, _Val)));
	}

template<class _InIt,
	class _OutIt,
	class _Pr,
	class _Ty> inline
	_OutIt _Replace_copy_if_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr& _Pred, const _Ty& _Val,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Replace_copy_if_unchecked(_First, _Last, _Unchecked(_Dest), _Pred, _Val)));
	}

template<class _InIt,
	class _OutIt,
	class _Pr,
	class _Ty> inline
	_OutIt _Replace_copy_if_no_deprecate(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr& _Pred, const _Ty& _Val)
	{	
	;
	;
	return (_Replace_copy_if_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Pred, _Val,
		_Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
	}

template<class _InIt,
	class _OutIt,
	class _Pr,
	class _Ty> inline
	_OutIt replace_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, const _Ty& _Val)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Replace_copy_if_no_deprecate(_First, _Last, _Dest, _Pred, _Val));
	}

 














		
template<class _FwdIt,
	class _Fn0> inline
	void _Generate_unchecked(_FwdIt _First, _FwdIt _Last, _Fn0& _Func)
	{	
	for (; _First != _Last; ++_First)
		*_First = _Func();
	}

template<class _FwdIt,
	class _Fn0> inline
	void generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)
	{	
	;
	_Generate_unchecked(_Unchecked(_First), _Unchecked(_Last), _Func);
	}

		
template<class _OutIt,
	class _Diff,
	class _Fn0> inline
	_OutIt _Generate_n_unchecked(_OutIt _Dest, _Diff _Count, _Fn0& _Func)
	{	
	for (; 0 < _Count; --_Count, (void)++_Dest)
		*_Dest = _Func();
	return (_Dest);
	}

template<class _OutIt,
	class _Diff,
	class _Fn0> inline
	_OutIt generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)
	{	
	return (_Rechecked(_Dest,
		_Generate_n_unchecked(_Unchecked_n(_Dest, _Count), _Count, _Func)));
	}

 











		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Remove_copy_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First)
		if (!(*_First == _Val))
			{	
			;
			*_Dest++ = *_First;
			}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt remove_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Val)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	;
	return (_Rechecked(_Dest,
		_Remove_copy_unchecked(_Unchecked(_First), _Unchecked(_Last),
		_Unchecked_idl0(_Dest), _Val)));
	}

 













		
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Remove_copy_if_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr& _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			{	
			;
			*_Dest++ = *_First;
			}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Remove_copy_if_no_deprecate(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr& _Pred)
	{	
	;
	return (_Rechecked(_Dest,
		_Remove_copy_if_unchecked(_Unchecked(_First), _Unchecked(_Last),
		_Unchecked_idl0(_Dest), _Pred)));
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt remove_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Remove_copy_if_no_deprecate(_First, _Last, _Dest, _Pred));
	}

 













		
template<class _FwdIt,
	class _Ty> inline
	_FwdIt _Remove_unchecked(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_First = _Find_unchecked(_First, _Last, _Val);
	_FwdIt _Next = _First;
	if (_First != _Last)
		{
		for (++_First; _First != _Last; ++_First)
			if (!(*_First == _Val))
				*_Next++ = ::std:: move(*_First);
		}

	return (_Next);
	}

template<class _FwdIt,
	class _Ty> inline
	_FwdIt remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	;
	return (_Rechecked(_First,
		_Remove_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val)));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Remove_if_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
	{	
	_First = _Find_if_unchecked(_First, _Last, _Pred);
	_FwdIt _Next = _First;
	if (_First != _Last)
		{
		for (++_First; _First != _Last; ++_First)
		if (!_Pred(*_First))
			*_Next++ = ::std:: move(*_First);
		}

	return (_Next);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	return (_Rechecked(_First,
		_Remove_if_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Unique_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
	{	
	if (_First != _Last)
		for (_FwdIt _Firstb; (void)(_Firstb = _First), ++_First != _Last; )
			if (_Pred(*_Firstb, *_First))
				{	
				for (; ++_First != _Last; )
					if (!_Pred(*_Firstb, *_First))
						*++_Firstb = ::std:: move(*_First);
				return (++_Firstb);
				}

	return (_Last);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Unique_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt unique(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: unique(_First, _Last, equal_to<>()));
	}

		
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Unique_copy_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr& _Pred, input_iterator_tag)
	{	
	if (_First != _Last)
		{
		_Iter_value_t<_InIt> _Val = *_First;

		for (*_Dest++ = _Val; ++_First != _Last; )
			if (!_Pred(_Val, *_First))
				{	
				_Val = *_First;
				*_Dest++ = _Val;
				}
		}

	return (_Dest);
	}

template<class _FwdIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Unique_copy_unchecked(_FwdIt _First, _FwdIt _Last,
		_OutIt _Dest, _Pr& _Pred, forward_iterator_tag)
	{	
	if (_First != _Last)
		{
		_FwdIt _Firstb = _First;

		for (*_Dest++ = *_Firstb; ++_First != _Last; )
			if (!_Pred(*_Firstb, *_First))
				{	
				_Firstb = _First;
				*_Dest++ = *_Firstb;
				}
		}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Unique_copy_no_deprecate(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr& _Pred)
	{	
	;
	;
	return (_Rechecked(_Dest,
		_Unique_copy_unchecked(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked_idl0(_Dest), _Pred, _Iter_cat_t<_InIt>())));
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Unique_copy_no_deprecate(_First, _Last, _Dest, _Pred));
	}

 













		
template<class _InIt,
	class _OutIt> inline
	_OutIt unique_copy(_InIt _First, _InIt _Last, _OutIt _Dest)
	{	
	return (::std:: unique_copy(_First, _Last, _Dest,
		equal_to<>()));
	}

 











		
template<class _BidIt,
	class _OutIt> inline
	_OutIt _Reverse_copy_unchecked(_BidIt _First, _BidIt _Last,
		_OutIt _Dest)
	{	
	for (; _First != _Last; ++_Dest)
		*_Dest = *--_Last;
	return (_Dest);
	}

template<class _BidIt,
	class _OutIt> inline
	_OutIt _Reverse_copy1(_BidIt _First, _BidIt _Last,
		_OutIt _Dest,
		bidirectional_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Reverse_copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _BidIt,
	class _OutIt> inline
	_OutIt _Reverse_copy1(_BidIt _First, _BidIt _Last,
		_OutIt _Dest,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Reverse_copy_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _BidIt,
	class _OutIt> inline
	_OutIt reverse_copy(_BidIt _First, _BidIt _Last,
		_OutIt _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	;
	return (_Reverse_copy1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_BidIt>(), _Iter_cat_t<_OutIt>()));
	}

 












		
template<class _FwdIt,
	class _OutIt> inline
	_OutIt _Rotate_copy_unchecked(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		_OutIt _Dest)
	{	
	_Dest = _Copy_unchecked(_Mid, _Last, _Dest);
	return (_Copy_unchecked(_First, _Mid, _Dest));
	}

template<class _FwdIt,
	class _OutIt> inline
	_OutIt _Rotate_copy1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		_OutIt _Dest, forward_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Rotate_copy_unchecked(_First, _Mid, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _FwdIt,
	class _OutIt> inline
	_OutIt _Rotate_copy1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Rotate_copy_unchecked(_First, _Mid, _Last, _Unchecked(_Dest))));
	}

template<class _FwdIt,
	class _OutIt> inline
	_OutIt rotate_copy(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		_OutIt _Dest)
	{	
	;
	;
	return (_Rotate_copy1(_Unchecked(_First), _Unchecked(_Mid),
		_Unchecked(_Last), _Dest, _Iter_cat_t<_FwdIt>(), _Iter_cat_t<_OutIt>()));
	}

		
template<class _RanIt,
	class _Fn1> inline
	void _Random_shuffle_unchecked(_RanIt _First, _RanIt _Last, _Fn1& _Func)
	{	
	if (_Last - _First < 2)
		return;

	_RanIt _Next = _First;
	for (_Iter_diff_t<_RanIt> _Index = 2; ++_Next != _Last; ++_Index)
		{	
		_Iter_diff_t<_RanIt> _Off = _Func(_Index);

 










		::std:: iter_swap(_Next, _First + _Off);
		}
	}

template<class _RanIt,
	class _Fn1> inline
	void _Random_shuffle1(_RanIt _First, _RanIt _Last, _Fn1& _Func)
	{	
	;
	_Random_shuffle_unchecked(_Unchecked(_First), _Unchecked(_Last), _Func);
	}

template<class _RanIt,
	class _Urng> inline
	void shuffle(_RanIt _First, _RanIt _Last, _Urng&& _Func)
	{	
	typedef typename iterator_traits<_RanIt>::difference_type _Diff;
	typedef typename remove_reference<_Urng>::type _Urng0;
	_Rng_from_urng<_Diff, _Urng0> _Rng(_Func);
	_Random_shuffle1(_First, _Last, _Rng);
	}

 
		
template<class _RanIt,
	class _Fn1> inline
	void random_shuffle(_RanIt _First, _RanIt _Last, _Fn1&& _Func)
	{	
	_Random_shuffle1(_First, _Last, _Func);
	}

	
struct _Rand_urng_from_func
	{	
	typedef unsigned int result_type;

	static result_type (min)()
		{	
		return (0);
		}

	static result_type (max)()
		{	
		return (0x7fff);
		}

	result_type operator()()
		{	
		return (:: rand());
		}
	};

		
template<class _RanIt> inline
	void random_shuffle(_RanIt _First, _RanIt _Last)
	{	
	_Rand_urng_from_func _Func;
	::std:: shuffle(_First, _Last, _Func);
	}
 

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Partition_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred,
		forward_iterator_tag)
	{	
	while (_First != _Last && _Pred(*_First))
		++_First;	

	if (_First == _Last)
		return (_First);	

	for (_FwdIt _Next = ::std:: next(_First); _Next != _Last; ++_Next)
		if (_Pred(*_Next))
			::std:: iter_swap(_First++, _Next);	

	return (_First);
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt _Partition_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred,
		bidirectional_iterator_tag)
	{	
	for (; ; ++_First)
		{	
		for (; _First != _Last && _Pred(*_First); ++_First)
			;	
		if (_First == _Last)
			break;	

		for (; _First != --_Last && !_Pred(*_Last); )
			;	
		if (_First == _Last)
			break;	

		::std:: iter_swap(_First, _Last);	
		}

	return (_First);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt partition(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	return (_Rechecked(_First,
		_Partition_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred,
			_Iter_cat_t<_FwdIt>())));
	}

		
template<class _BidIt,
	class _Diff,
	class _Ty> inline
	_BidIt _Buffered_rotate_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Diff _Count1, _Diff _Count2, _Temp_iterator<_Ty>& _Tempbuf)
	{	
	if (_Count1 == 0 || _Count2 == 0)
		{	
		::std:: advance(_First, _Count2);
		return (_First);
		}
	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
		{	
		_Move_unchecked(_First, _Mid, _Tempbuf._Init());
		_Move_unchecked(_Mid, _Last, _First);
		return (_Move_backward_unchecked(_Tempbuf._First(), _Tempbuf._Last(),
			_Last));
		}
	else if (_Count2 <= _Tempbuf._Maxlen())
		{	
		_Move_unchecked(_Mid, _Last, _Tempbuf._Init());
		_Move_backward_unchecked(_First, _Mid, _Last);
		return (_Move_unchecked(_Tempbuf._First(), _Tempbuf._Last(), _First));
		}
	else
		{	
		return (_Rotate_unchecked(_First, _Mid, _Last));
		}
	}

template<class _BidIt,
	class _Pr,
	class _Diff,
	class _Ty> inline
	_BidIt _Stable_partition_unchecked1(_BidIt _First, _BidIt _Last, _Pr& _Pred,
		_Diff _Count, _Temp_iterator<_Ty>& _Tempbuf)
	{	
	if (_Count == 0)
		return (_First);
	else if (_Count == 1)
		return (_Pred(*_First) ? _Last : _First);
	else if (_Count <= _Tempbuf._Maxlen())
		{	
		_BidIt _Next = _First;
		for (_Tempbuf._Init(); _First != _Last; ++_First)
			if (_Pred(*_First))
				*_Next++ = ::std:: move(*_First);
			else
				*_Tempbuf++ = ::std:: move(*_First);

		_Move_unchecked(_Tempbuf._First(), _Tempbuf._Last(), _Next);	
		return (_Next);
		}
	else
		{	
		_BidIt _Mid = _First;
		::std:: advance(_Mid, _Count / 2);

		_BidIt _Left = _Stable_partition_unchecked1(_First, _Mid, _Pred,
			_Count / 2, _Tempbuf);	
		_BidIt _Right = _Stable_partition_unchecked1(_Mid, _Last, _Pred,
			_Count - _Count / 2, _Tempbuf);	

		_Diff _Count1 = ::std:: distance(_Left, _Mid);
		_Diff _Count2 = ::std:: distance(_Mid, _Right);

		return (_Buffered_rotate_unchecked(_Left, _Mid, _Right,
			_Count1, _Count2, _Tempbuf));	
		}
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt _Stable_partition_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
	{	
	if (_First == _Last)
		return (_First);
	_Iter_diff_t<_BidIt> _Count = ::std:: distance(_First, _Last);
	_Temp_iterator<_Iter_value_t<_BidIt>> _Tempbuf(_Count);
	return (_Stable_partition_unchecked1(_First, _Last, _Pred, _Count, _Tempbuf));
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	return (_Rechecked(_First,
		_Stable_partition_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

 





















  
 

		
template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Push_heap_by_index(_RanIt _First, _Diff _Hole,
		_Diff _Top, _Ty&& _Val, _Pr& _Pred)
	{	
	for (_Diff _Idx = (_Hole - 1) / 2;
		_Top < _Hole && _Pred(*(_First + _Idx), _Val);
		_Idx = (_Hole - 1) / 2)
		{	
		*(_First + _Hole) = ::std:: move(*(_First + _Idx));
		_Hole = _Idx;
		}

	*(_First + _Hole) = ::std:: move(_Val);	
	}

template<class _RanIt,
	class _Pr> inline
	void _Push_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
	{	
	typedef _Iter_diff_t<_RanIt> _Diff;
	_Diff _Count = _Last - _First;
	if (2 <= _Count)
		{
		_Iter_value_t<_RanIt> _Val = ::std:: move(*--_Last);
		_Push_heap_by_index(_First, --_Count, _Diff(0), ::std:: move(_Val), _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	_Push_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
	}

		
template<class _RanIt> inline
	void push_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: push_heap(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Pop_heap_hole_by_index(_RanIt _First, _Diff _Hole, _Diff _Bottom,
		_Ty&& _Val, _Pr& _Pred)
	{	
		
	const _Diff _Top = _Hole;
	_Diff _Idx = _Hole;

	
	
	const _Diff _Max_sequence_non_leaf = (_Bottom - 1) / 2;
	while (_Idx < _Max_sequence_non_leaf)
		{	
		_Idx = 2 * _Idx + 2;
		if (_Pred(*(_First + _Idx), *(_First + (_Idx - 1))))
			--_Idx;
		*(_First + _Hole) = ::std:: move(*(_First + _Idx));
		_Hole = _Idx;
		}

	if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0)
		{	
		*(_First + _Hole) = ::std:: move(*(_First + (_Bottom - 1)));
		_Hole = _Bottom - 1;
		}

	_Push_heap_by_index(_First, _Hole, _Top, ::std:: move(_Val), _Pred);
	}

template<class _RanIt,
	class _Ty,
	class _Pr> inline
	void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest,
		_Ty&& _Val, _Pr& _Pred)
	{	
		
		
	*_Dest = ::std:: move(*_First);
	_Pop_heap_hole_by_index(_First, _Iter_diff_t<_RanIt>(0), _Iter_diff_t<_RanIt>(_Last - _First),
		::std:: move(_Val), _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
	{	
	if (2 <= _Last - _First)
		{
		--_Last;
		_Iter_value_t<_RanIt> _Val = ::std:: move(*_Last);
		_Pop_heap_hole_unchecked(_First, _Last, _Last,
			::std:: move(_Val), _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	_Pop_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
	}

		
template<class _RanIt> inline
	void pop_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: pop_heap(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Pr> inline
	void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
	{	
	_Iter_diff_t<_RanIt> _Bottom = _Last - _First;
	if (2 <= _Bottom)
		{
		for (_Iter_diff_t<_RanIt> _Hole = _Bottom / 2; 0 < _Hole; )
			{	
			--_Hole;
			_Iter_value_t<_RanIt> _Val = ::std:: move(*(_First + _Hole));
			_Pop_heap_hole_by_index(_First, _Hole, _Bottom,
				::std:: move(_Val), _Pred);
			}
		}
	}

template<class _RanIt,
	class _Pr> inline
	void make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	_Make_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
	}

		
template<class _RanIt> inline
	void make_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: make_heap(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Pr> inline
	void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
	{	
	for (; 2 <= _Last - _First; --_Last)
		_Pop_heap_unchecked(_First, _Last, _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	;
	_Sort_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
	}

		
template<class _RanIt> inline
	void sort_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: sort_heap(_First, _Last, less<>());
	}

		
template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	_FwdIt _Lower_bound_unchecked(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr& _Pred)
	{	
	_Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);

	while (0 < _Count)
		{	
		_Iter_diff_t<_FwdIt> _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Pred(*_Mid, _Val))
			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}

	return (_First);
	}

template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	
	;
	return (_Rechecked(_First,
		_Lower_bound_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred)));
	}

		
template<class _FwdIt,
	class _Ty> inline
	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: lower_bound(_First, _Last, _Val, less<>()));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	_FwdIt _Upper_bound_unchecked(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr& _Pred)
	{	
	_Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);

	while (0 < _Count)
		{	
		_Iter_diff_t<_FwdIt> _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (!_Pred(_Val, *_Mid))
			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}

	return (_First);
	}

template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	
	;
	return (_Rechecked(_First,
		_Upper_bound_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred)));
	}

		
template<class _FwdIt,
	class _Ty> inline
	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: upper_bound(_First, _Last, _Val, less<>()));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	pair<_FwdIt, _FwdIt>
		_Equal_range_unchecked(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val, _Pr& _Pred)
	{	
	_Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);

	while (0 < _Count)
		{	
		_Iter_diff_t<_FwdIt> _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Pred(*_Mid, _Val))
			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else if (_Pred(_Val, *_Mid))
			_Count = _Count2;	
		else
			{	
			_FwdIt _First2 = _Lower_bound_unchecked(_First, _Mid, _Val, _Pred);
			::std:: advance(_First, _Count);
			_FwdIt _Last2 = _Upper_bound_unchecked(++_Mid, _First, _Val, _Pred);
			return (pair<_FwdIt, _FwdIt>(_First2, _Last2));
			}
		}

	return (pair<_FwdIt, _FwdIt>(_First, _First));	
	}

template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	pair<_FwdIt, _FwdIt>
		equal_range(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val, _Pr _Pred)
	{	
	;
	return (_Rechecked_both(_First, _Last,
		_Equal_range_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred)));
	}

		
template<class _FwdIt,
	class _Ty> inline
	pair<_FwdIt, _FwdIt>
		equal_range(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val)
	{	
	return (::std:: equal_range(_First, _Last, _Val, less<>()));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	bool _Binary_search_unchecked(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr& _Pred)
	{	
	_First = _Lower_bound_unchecked(_First, _Last, _Val, _Pred);
	return (_First != _Last && !_Pred(_Val, *_First));
	}

template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	bool binary_search(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	
	;
	return (_Binary_search_unchecked(_Unchecked(_First), _Unchecked(_Last),
		_Val, _Pred));
	}

		
template<class _FwdIt,
	class _Ty> inline
	bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: binary_search(_First, _Last, _Val, less<>()));
	}

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Merge_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr& _Pred)
	{	
	if (_First1 != _Last1 && _First2 != _Last2)
		for (; ; )
			{	
			if (_Pred(*_First2, *_First1))
				{
				*_Dest++ = *_First2++;
				if (_First2 == _Last2)
					break;
				}
			else
				{
				*_Dest++ = *_First1++;
				if (_First1 == _Last1)
					break;
				}
			}

	_Dest = _Copy_unchecked(_First1, _Last1, _Dest);	
	return (_Copy_unchecked(_First2, _Last2, _Dest));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Merge_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr& _Pred, input_iterator_tag,
		input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Merge_unchecked(_First1, _Last1, _First2, _Last2, _Unchecked_idl0(_Dest), _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Merge_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr& _Pred, random_access_iterator_tag,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Merge_unchecked(_First1, _Last1, _First2, _Last2, _Unchecked(_Dest), _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Merge_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr& _Pred)
	{	
	;
	;
	;
	return (_Merge_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred,
		_Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>(), _Iter_cat_t<_OutIt>()));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Merge_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pred));
	}

 
















		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest,
		less<>()));
	}

 













		
template<class _BidIt1,
	class _BidIt2,
	class _BidIt3,
	class _Pr> inline
	_BidIt3 _Buffered_merge_backward_unchecked(_BidIt1 _First1, _BidIt1 _Last1,
		_BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr& _Pred,
		bool _In_place = false)
	{	
	if (_First1 != _Last1 && _First2 != _Last2)
		for (; ; )
			{	
			if (_Pred(*--_Last2, *--_Last1))
				{
				*--_Dest = ::std:: move(*_Last1);
				++_Last2;
				if (_First1 == _Last1)
					break;
				}
			else
				{
				*--_Dest = ::std:: move(*_Last2);
				++_Last1;
				if (_First2 == _Last2)
					break;
				}
			}

	_Dest = _Move_backward_unchecked(_First2, _Last2, _Dest);	
	if (!_In_place)
		_Dest = _Move_backward_unchecked(_First1, _Last1, _Dest);
	return (_Dest);
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Buffered_merge_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr& _Pred, bool _In_place = false)
	{	
	if (_First1 != _Last1 && _First2 != _Last2)
		for (; ; )
			{	
			if (_Pred(*_First2, *_First1))
				{	
				*_Dest++ = ::std:: move(*_First2++);
				if (_First2 == _Last2)
					break;
				}
			else
				{	
				*_Dest++ = ::std:: move(*_First1++);
				if (_First1 == _Last1)
					break;
				}
			}

	_Dest = _Move_unchecked(_First1, _Last1, _Dest);	
	if (!_In_place)
		_Dest = _Move_unchecked(_First2, _Last2, _Dest);
	return (_Dest);
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Buffered_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Diff _Count1, _Diff _Count2,
			_Temp_iterator<_Ty>& _Tempbuf, _Pr& _Pred)
	{	
	if (_Count1 == 0 || _Count2 == 0)
		;	
	else if (_Count1 + _Count2 == 2)
		{	
		if (_Pred(*_Mid, *_First))
			::std:: iter_swap(_First, _Mid);
		}
	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
		{	
		_Move_unchecked(_First, _Mid, _Tempbuf._Init());
		_Buffered_merge_unchecked(_Tempbuf._First(), _Tempbuf._Last(),
			_Mid, _Last, _First, _Pred, true);
		}
	else if (_Count2 <= _Tempbuf._Maxlen())
		{	
		_Move_unchecked(_Mid, _Last, _Tempbuf._Init());
		_Buffered_merge_backward_unchecked(_First, _Mid,
			_Tempbuf._First(), _Tempbuf._Last(), _Last, _Pred, true);
		}
	else
		{	
		_BidIt _Firstn, _Lastn;
		_Diff _Count1n, _Count2n;
		if (_Count2 < _Count1)
			{	
			_Count1n = _Count1 / 2;
			_Firstn = _First;
			::std:: advance(_Firstn, _Count1n);
			_Lastn = _Lower_bound_unchecked(_Mid, _Last, *_Firstn, _Pred);
			_Count2n = ::std:: distance(_Mid, _Lastn);
			}
		else
			{	
			_Count2n = _Count2 / 2;
			_Lastn = _Mid;
			::std:: advance(_Lastn, _Count2n);
			_Firstn = _Upper_bound_unchecked(_First, _Mid, *_Lastn, _Pred);
			_Count1n = ::std:: distance(_First, _Firstn);
			}
		_BidIt _Midn = _Buffered_rotate_unchecked(_Firstn, _Mid, _Lastn,
			_Count1 - _Count1n, _Count2n, _Tempbuf);	
		_Buffered_merge_unchecked(_First, _Firstn, _Midn,
			_Count1n, _Count2n, _Tempbuf, _Pred);	
		_Buffered_merge_unchecked(_Midn, _Lastn, _Last,
			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);
		}
	}

template<class _BidIt,
	class _Pr> inline
	void _Inplace_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr& _Pred)
	{	
	if (_First != _Mid && _Mid != _Last)
		{
		_Iter_diff_t<_BidIt> _Count1 = ::std:: distance(_First, _Mid);
		_Iter_diff_t<_BidIt> _Count2 = ::std:: distance(_Mid, _Last);
		_Temp_iterator<_Iter_value_t<_BidIt>> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);
		_Buffered_merge_unchecked(_First, _Mid, _Last,
			_Count1, _Count2, _Tempbuf, _Pred);
		}
	}

template<class _BidIt,
	class _Pr> inline
	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	_Inplace_merge_unchecked(
		_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred);
	}

		
template<class _BidIt> inline
	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
	{	
	::std:: inplace_merge(_First, _Mid, _Last, less<>());
	}

		
template<class _BidIt,
	class _Pr> inline
	void _Insertion_sort_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
	{	
	if (_First != _Last)
		for (_BidIt _Next = _First; ++_Next != _Last; )
			{	
			_BidIt _Next1 = _Next;
			_Iter_value_t<_BidIt> _Val = ::std:: move(*_Next);

			if (_Pred(_Val, *_First))
				{	
				_Move_backward_unchecked(_First, _Next, ++_Next1);
				*_First = ::std:: move(_Val);
				}
			else
				{	
				for (_BidIt _First1 = _Next1;
					_Pred(_Val, *--_First1);
					_Next1 = _First1)
					*_Next1 = ::std:: move(*_First1);	
				*_Next1 = ::std:: move(_Val);	
				}
			}
	}

template<class _RanIt,
	class _Pr> inline
	void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr& _Pred)
	{	
	if (_Pred(*_Mid, *_First))
		::std:: iter_swap(_Mid, _First);
	if (_Pred(*_Last, *_Mid))
		{	
		::std:: iter_swap(_Last, _Mid);
		if (_Pred(*_Mid, *_First))
			::std:: iter_swap(_Mid, _First);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr& _Pred)
	{	
	if (40 < _Last - _First)
		{	
		size_t _Step = (_Last - _First + 1) / 8;
		_Med3_unchecked(_First, _First + _Step, _First + 2 * _Step, _Pred);
		_Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);
		_Med3_unchecked(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);
		_Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);
		}
	else
		_Med3_unchecked(_First, _Mid, _Last, _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	pair<_RanIt, _RanIt>
		_Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
	{	
	_RanIt _Mid = _First + (_Last - _First) / 2;
	_Guess_median_unchecked(_First, _Mid, _Last - 1, _Pred);
	_RanIt _Pfirst = _Mid;
	_RanIt _Plast = _Pfirst + 1;

	while (_First < _Pfirst
		&& !_Pred(*(_Pfirst - 1), *_Pfirst)
		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))
		--_Pfirst;
	while (_Plast < _Last
		&& !_Pred(*_Plast, *_Pfirst)
		&& !_Pred(*_Pfirst, *_Plast))
		++_Plast;

	_RanIt _Gfirst = _Plast;
	_RanIt _Glast = _Pfirst;

	for (; ; )
		{	
		for (; _Gfirst < _Last; ++_Gfirst)
			if (_Pred(*_Pfirst, *_Gfirst))
				;
			else if (_Pred(*_Gfirst, *_Pfirst))
				break;
			else if (_Plast++ != _Gfirst)
				::std:: iter_swap(_Plast - 1, _Gfirst);
		for (; _First < _Glast; --_Glast)
			if (_Pred(*(_Glast - 1), *_Pfirst))
				;
			else if (_Pred(*_Pfirst, *(_Glast - 1)))
				break;
			else if (--_Pfirst != _Glast - 1)
				::std:: iter_swap(_Pfirst, _Glast - 1);
		if (_Glast == _First && _Gfirst == _Last)
			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

		if (_Glast == _First)
			{	
			if (_Plast != _Gfirst)
				::std:: iter_swap(_Pfirst, _Plast);
			++_Plast;
			::std:: iter_swap(_Pfirst++, _Gfirst++);
			}
		else if (_Gfirst == _Last)
			{	
			if (--_Glast != --_Pfirst)
				::std:: iter_swap(_Glast, _Pfirst);
			::std:: iter_swap(_Pfirst, --_Plast);
			}
		else
			::std:: iter_swap(_Gfirst++, --_Glast);
		}
	}

template<class _RanIt,
	class _Diff,
	class _Pr> inline
	void _Sort_unchecked1(_RanIt _First, _RanIt _Last, _Diff _Ideal, _Pr& _Pred)
	{	
	_Diff _Count;
	while (_ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal)
		{	
		pair<_RanIt, _RanIt> _Mid =
			_Partition_by_median_guess_unchecked(_First, _Last, _Pred);
		_Ideal /= 2, _Ideal += _Ideal / 2;	

		if (_Mid.first - _First < _Last - _Mid.second)
			{	
			_Sort_unchecked1(_First, _Mid.first, _Ideal, _Pred);
			_First = _Mid.second;
			}
		else
			{	
			_Sort_unchecked1(_Mid.second, _Last, _Ideal, _Pred);
			_Last = _Mid.first;
			}
		}

	if (_ISORT_MAX < _Count)
		{	
		_Make_heap_unchecked(_First, _Last, _Pred);
		_Sort_heap_unchecked(_First, _Last, _Pred);
		}
	else if (2 <= _Count)
		_Insertion_sort_unchecked(_First, _Last, _Pred);	
	}

template<class _RanIt,
	class _Pr> inline
	void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
	{	
	_Sort_unchecked1(_First, _Last, _Last - _First, _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	void sort(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	_Sort_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
	}

		
template<class _RanIt> inline
	void sort(_RanIt _First, _RanIt _Last)
	{	
	::std:: sort(_First, _Last, less<>());
	}

		
template<class _BidIt,
	class _OutIt,
	class _Diff,
	class _Pr> inline
	void _Chunked_merge_unchecked(_BidIt _First, _BidIt _Last, _OutIt _Dest,
		_Diff _Chunk, _Diff _Count, _Pr& _Pred)
	{	
	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)
		{	
		_BidIt _Mid1 = _First;
		::std:: advance(_Mid1, _Chunk);
		_BidIt _Mid2 = _Mid1;
		::std:: advance(_Mid2, _Chunk);

		_Dest = _Buffered_merge_unchecked(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);
		_First = _Mid2;
		}

	if (_Count <= _Chunk)
		_Move_unchecked(_First, _Last, _Dest);	
	else
		{	
		_BidIt _Mid1 = _First;
		::std:: advance(_Mid1, _Chunk);

		_Buffered_merge_unchecked(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Buffered_merge_sort_unchecked(_BidIt _First, _BidIt _Last, _Diff _Count,
		_Temp_iterator<_Ty>& _Tempbuf, _Pr& _Pred)
	{	
	_BidIt _Mid = _First;
	for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)
		{	
		_BidIt _Midn = _Mid;
		::std:: advance(_Midn, (int)_ISORT_MAX);

		_Insertion_sort_unchecked(_Mid, _Midn, _Pred);
		_Mid = _Midn;
		}
	_Insertion_sort_unchecked(_Mid, _Last, _Pred);	

	for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)
		{	
		_Chunked_merge_unchecked(_First, _Last, _Tempbuf._Init(),
			_Chunk, _Count, _Pred);
		_Chunked_merge_unchecked(_Tempbuf._First(), _Tempbuf._Last(), _First,
			_Chunk *= 2, _Count, _Pred);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Stable_sort_unchecked1(_BidIt _First, _BidIt _Last, _Diff _Count,
		_Temp_iterator<_Ty>& _Tempbuf, _Pr& _Pred)
	{	
	if (_Count <= _ISORT_MAX)
		_Insertion_sort_unchecked(_First, _Last, _Pred);	
	else
		{	
		_Diff _Count2 = (_Count + 1) / 2;
		_BidIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Count2 <= _Tempbuf._Maxlen())
			{	
			_Buffered_merge_sort_unchecked(_First, _Mid, _Count2, _Tempbuf, _Pred);
			_Buffered_merge_sort_unchecked(_Mid, _Last, _Count - _Count2,
				_Tempbuf, _Pred);
			}
		else
			{	
			_Stable_sort_unchecked1(_First, _Mid, _Count2, _Tempbuf, _Pred);
			_Stable_sort_unchecked1(_Mid, _Last, _Count - _Count2, _Tempbuf, _Pred);
			}

		_Buffered_merge_unchecked(_First, _Mid, _Last,
			_Count2, _Count - _Count2, _Tempbuf, _Pred);	
		}
	}

template<class _BidIt,
	class _Pr> inline
	void _Stable_sort_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
	{	
	if (_First != _Last)
		{
		_Iter_diff_t<_BidIt> _Count = ::std:: distance(_First, _Last);
		_Temp_iterator<_Iter_value_t<_BidIt>> _Tempbuf((_Count + 1) / 2);
		_Stable_sort_unchecked1(_First, _Last, _Count, _Tempbuf, _Pred);
		}
	}

template<class _BidIt,
	class _Pr> inline
	void stable_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	_Stable_sort_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
	}

		
template<class _BidIt> inline
	void stable_sort(_BidIt _First, _BidIt _Last)
	{	
	::std:: stable_sort(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Pr> inline
	void _Partial_sort_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last,
		_Pr& _Pred)
	{	
	if (_First == _Mid)
		return;	
	_Make_heap_unchecked(_First, _Mid, _Pred);
	for (_RanIt _Next = _Mid; _Next < _Last; ++_Next)
		if (_Pred(*_Next, *_First))
			{	
			_Iter_value_t<_RanIt> _Val = ::std:: move(*_Next);
			_Pop_heap_hole_unchecked(_First, _Mid, _Next, ::std:: move(_Val), _Pred);
			}
	_Sort_heap_unchecked(_First, _Mid, _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	;
	_Partial_sort_unchecked(
		_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred);
	}

		
template<class _RanIt> inline
	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last)
	{	
	::std:: partial_sort(_First, _Mid, _Last, less<>());
	}

		
template<class _InIt,
	class _RanIt,
	class _Pr> inline
	_RanIt _Partial_sort_copy_unchecked(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2, _Pr& _Pred)
	{	
	_RanIt _Mid2 = _First2;
	if (_First1 != _Last1 && _First2 != _Last2)
		{
		for (; _First1 != _Last1 && _Mid2 != _Last2; ++_First1, (void)++_Mid2)
			*_Mid2 = *_First1;	
		_Make_heap_unchecked(_First2, _Mid2, _Pred);

		for (; _First1 != _Last1; ++_First1)
			if (_Pred(*_First1, *_First2))
				_Pop_heap_hole_by_index(_First2, _Iter_diff_t<_RanIt>(0), _Iter_diff_t<_RanIt>(_Mid2 - _First2),
					_Iter_value_t<_InIt>(*_First1), _Pred);	

		_Sort_heap_unchecked(_First2, _Mid2, _Pred);
		}

	return (_Mid2);
	}

template<class _InIt,
	class _RanIt,
	class _Pr> inline
	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First2,
		_Partial_sort_copy_unchecked(
			_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred)));
	}

		
template<class _InIt,
	class _RanIt> inline
	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2)
	{	
	return (::std:: partial_sort_copy(_First1, _Last1, _First2, _Last2,
		less<>()));
	}

		
template<class _RanIt,
	class _Pr> inline
	void _Nth_element_unchecked(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr& _Pred)
	{	
	if (_Nth == _Last)
		return;	

	for (; _ISORT_MAX < _Last - _First; )
		{	
		pair<_RanIt, _RanIt> _Mid =
			_Partition_by_median_guess_unchecked(_First, _Last, _Pred);

		if (_Mid.second <= _Nth)
			_First = _Mid.second;
		else if (_Mid.first <= _Nth)
			return;	
		else
			_Last = _Mid.first;
		}

	_Insertion_sort_unchecked(_First, _Last, _Pred);	
	}

template<class _RanIt,
	class _Pr> inline
	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	;
	_Nth_element_unchecked(
		_Unchecked(_First), _Unchecked(_Nth), _Unchecked(_Last), _Pred);
	}

		
template<class _RanIt> inline
	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)
	{	
	::std:: nth_element(_First, _Nth, _Last, less<>());
	}

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Includes_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First2, *_First1))
			return (false);
		else if (_Pred(*_First1, *_First2))
			++_First1;
		else
			{	
			++_First1;
			++_First2;
			}

	return (_First2 == _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool includes(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	return (_Includes_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
	}

		
template<class _InIt1,
	class _InIt2> inline
	bool includes(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: includes(_First1, _Last1, _First2, _Last2,
		less<>()));
	}

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_union_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr& _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (_Pred(*_First2, *_First1))
			{	
			*_Dest++ = *_First2;
			++_First2;
			}
		else
			{	
			*_Dest++ = *_First1;
			++_First1;
			++_First2;
			}
	_Dest = _Copy_no_deprecate(_First1, _Last1, _Dest);
	return (_Copy_no_deprecate(_First2, _Last2, _Dest));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_union_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr& _Pred)
	{	
	;
	;
	;
	return (_Rechecked(_Dest,
		_Set_union_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Unchecked_idl0(_Dest), _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Set_union_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pred));
	}

 















		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
	{	
	return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest,
		less<>()));
	}

 












		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_intersection_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr& _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			++_First1;
		else if (_Pred(*_First2, *_First1))
			++_First2;
		else
			{	
			;
			*_Dest++ = *_First1++;
			++_First2;
			}

	return (_Dest);
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_intersection_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr& _Pred)
	{	
	;
	;
	return (_Rechecked(_Dest,
		_Set_intersection_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Unchecked_idl0(_Dest), _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Set_intersection_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pred));
	}

 















		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
	{	
	return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest,
		less<>()));
	}

 












		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_difference_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr& _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			{	
			;
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (_Pred(*_First2, *_First1))
			++_First2;
		else
			{	
			++_First1;
			++_First2;
			}

	return (_Copy_no_deprecate(_First1, _Last1, _Dest));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_difference_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr& _Pred)
	{	
	;
	;
	return (_Rechecked(_Dest,
		_Set_difference_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Unchecked_idl0(_Dest), _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Set_difference_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pred));
	}

 
















		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest,
		less<>()));
	}

 













		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_symmetric_difference_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr& _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			{	
			;
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (_Pred(*_First2, *_First1))
			{	
			;
			*_Dest++ = *_First2;
			++_First2;
			}
		else
			{	
			++_First1;
			++_First2;
			}
	_Dest = _Copy_no_deprecate(_First1, _Last1, _Dest);
	return (_Copy_no_deprecate(_First2, _Last2, _Dest));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_symmetric_difference_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr& _Pred)
	{	
	;
	;
	return (_Rechecked(_Dest,
		_Set_symmetric_difference_no_deprecate1(
		_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Unchecked_idl0(_Dest), _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Set_symmetric_difference_no_deprecate(
		_First1, _Last1, _First2, _Last2, _Dest, _Pred));
	}

 
















		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2,
		_Dest, less<>()));
	}

 













		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Max_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		for (; ++_First != _Last; )
			if (_Pred(*_Found, *_First))
				_Found = _First;
	return (_Found);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	return (_Rechecked(_First,
		_Max_element_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt max_element(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: max_element(_First, _Last, less<>()));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Min_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		for (; ++_First != _Last; )
			if (_Pred(*_First, *_Found))
				_Found = _First;
	return (_Found);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	return (_Rechecked(_First,
		_Min_element_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt min_element(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: min_element(_First, _Last, less<>()));
	}

		
template<class _FwdIt,
	class _Pr> inline
	pair<_FwdIt, _FwdIt>
		_Minmax_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
	{	
	pair<_FwdIt, _FwdIt> _Found(_First, _First);

	if (_First != _Last)
		for (; ++_First != _Last; )
			{	
			_FwdIt _Next = _First;
			if (++_Next == _Last)
				{	
				if (_Pred(*_First, *_Found.first))
					_Found.first = _First;
				else if (!_Pred(*_First, *_Found.second))
					_Found.second = _First;
				}
			else
				{	
				if (_Pred(*_Next, *_First))
					{	
					if (_Pred(*_Next, *_Found.first))
						_Found.first = _Next;
					if (!_Pred(*_First, *_Found.second))
						_Found.second = _First;
					}
				else
					{	
					if (_Pred(*_First, *_Found.first))
						_Found.first = _First;
					if (!_Pred(*_Next, *_Found.second))
						_Found.second = _Next;
					}
				_First = _Next;
				}
			}

	return (_Found);
	}

template<class _FwdIt,
	class _Pr> inline
	pair<_FwdIt, _FwdIt>
		minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	return (_Rechecked_both(_First, _Last,
		_Minmax_element_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	pair<_FwdIt, _FwdIt>
		minmax_element(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: minmax_element(_First, _Last, less<>()));
	}

		
template<class _Ty,
	class _Pr> inline
	constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right,
		_Pr _Pred)
		noexcept(noexcept(_Pred(_Left, _Right)))
	{	
	return (_Pred(_Left, _Right) ? _Right : _Left);
	}

template<class _Ty,
	class _Pr> inline
		
	_Ty (max)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
	{	
	const _Ty *_Res = _Max_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pred);
	return (*_Res);
	}

		
template<class _Ty> inline

	 

	constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
		noexcept(noexcept(((_Left) < (_Right))))
	{	
	return (((_Left) < (_Right)) ? _Right : _Left);
	}

template<class _Ty> inline
		
	_Ty (max)(::std:: initializer_list<_Ty> _Ilist)
	{	
	return ((::std:: max)(_Ilist, less<>()));
	}

		
template<class _Ty,
	class _Pr> inline
	constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right,
		_Pr _Pred)
		noexcept(noexcept(_Pred(_Right, _Left)))
	{	
	return (_Pred(_Right, _Left) ? _Right : _Left);
	}

template<class _Ty,
	class _Pr> inline
		
	_Ty (min)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
	{	
	const _Ty *_Res = _Min_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pred);
	return (*_Res);
	}

		
template<class _Ty> inline

	 

	constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
		noexcept(noexcept(((_Right) < (_Left))))
	{	
	return (((_Right) < (_Left)) ? _Right : _Left);
	}

template<class _Ty> inline
		
	_Ty (min)(::std:: initializer_list<_Ty> _Ilist)
	{	
	return ((::std:: min)(_Ilist, less<>()));
	}


		
template<class _Ty,
	class _Pr> inline
	constexpr pair<const _Ty&, const _Ty&>
		minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
	{	
	return (_Pred(_Right, _Left)
		? pair<const _Ty&, const _Ty&>(_Right, _Left)
		: pair<const _Ty&, const _Ty&>(_Left, _Right));
	}

template<class _Ty,
	class _Pr> inline
		
	pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist,
		_Pr _Pred)
	{	
	pair<const _Ty *, const _Ty *> _Res = _Minmax_element_unchecked(
		_Ilist.begin(), _Ilist.end(), _Pred);
	return (pair<_Ty, _Ty>(*_Res.first, *_Res.second));
	}

		
template<class _Ty> inline
	constexpr pair<const _Ty&, const _Ty&>
		minmax(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left
		? pair<const _Ty&, const _Ty&>(_Right, _Left)
		: pair<const _Ty&, const _Ty&>(_Left, _Right));
	}

template<class _Ty> inline
		
	pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist)
	{	
	return (::std:: minmax(_Ilist, less<>()));
	}

		
template<class _BidIt,
	class _Pr> inline
	bool _Next_permutation_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
	{	
	_BidIt _Next = _Last;
	if (_First == _Last || _First == --_Next)
		return (false);

	for (; ; )
		{	
		_BidIt _Next1 = _Next;
		if (_Pred(*--_Next, *_Next1))
			{	
			_BidIt _Mid = _Last;
			for (; !_Pred(*_Next, *--_Mid); )
				;
			::std:: iter_swap(_Next, _Mid);
			_Reverse_unchecked(_Next1, _Last);
			return (true);
			}

		if (_Next == _First)
			{	
			_Reverse_unchecked(_First, _Last);
			return (false);
			}
		}
	}

template<class _BidIt,
	class _Pr> inline
	bool next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	return (_Next_permutation_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _BidIt> inline
	bool next_permutation(_BidIt _First, _BidIt _Last)
	{	
	return (::std:: next_permutation(_First, _Last, less<>()));
	}

		
template<class _BidIt,
	class _Pr> inline
	bool _Prev_permutation_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
	{	
	_BidIt _Next = _Last;
	if (_First == _Last || _First == --_Next)
		return (false);

	for (; ; )
		{	
		_BidIt _Next1 = _Next;
		if (_Pred(*_Next1, *--_Next))
			{	
			_BidIt _Mid = _Last;
			for (; !_Pred(*--_Mid, *_Next); )
				;
			::std:: iter_swap(_Next, _Mid);
			_Reverse_unchecked(_Next1, _Last);
			return (true);
			}

		if (_Next == _First)
			{	
			_Reverse_unchecked(_First, _Last);
			return (false);
			}
		}
	}

template<class _BidIt,
	class _Pr> inline
	bool prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	return (_Prev_permutation_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _BidIt> inline
	bool prev_permutation(_BidIt _First, _BidIt _Last)
	{	
	return (::std:: prev_permutation(_First, _Last, less<>()));
	}

		
template<class _RanIt,
	class _Pr> inline
	_RanIt _Is_heap_until_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
	{	
	_Iter_diff_t<_RanIt> _Size = _Last - _First;

	if (2 <= _Size)
		for (_Iter_diff_t<_RanIt> _Off = 0; ++_Off < _Size; )
			if (_Pred(*(_First + (_Off - 1) / 2), *(_First + _Off)))
				return (_First + _Off);
	return (_Last);
	}

template<class _RanIt,
	class _Pr> inline
	_RanIt is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	return (_Rechecked(_First,
		_Is_heap_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

template<class _RanIt,
	class _Pr> inline
	bool is_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	return (_Is_heap_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred) == _Unchecked(_Last));
	}

		
template<class _RanIt> inline
	_RanIt is_heap_until(_RanIt _First, _RanIt _Last)
	{	
	return (::std:: is_heap_until(_First, _Last, less<>()));
	}

template<class _RanIt> inline
	bool is_heap(_RanIt _First, _RanIt _Last)
	{	
	return (::std:: is_heap(_First, _Last, less<>()));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Is_sorted_until_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
	{	
	if (_First != _Last)
		for (_FwdIt _Next = _First; ++_Next != _Last; ++_First)
			if (_Pred(*_Next, *_First))
				return (_Next);
	return (_Last);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	return (_Rechecked(_First,
		_Is_sorted_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

template<class _FwdIt,
	class _Pr> inline
	bool is_sorted(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	return (_Is_sorted_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred) == _Unchecked(_Last));
	}

		
template<class _FwdIt> inline
	_FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: is_sorted_until(_First, _Last, less<>()));
	}

template<class _FwdIt> inline
	bool is_sorted(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: is_sorted(_First, _Last, less<>()));
	}

































}
 
 #pragma warning(pop)
 #pragma pack(pop)











#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
namespace std {
		
template<class _Kty,	
	class _Pr,	
	class _Alloc,	
	bool _Mfl>	
	class _Tset_traits
	{	
public:
	typedef _Kty key_type;
	typedef _Kty value_type;
	typedef _Pr key_compare;
	typedef _Alloc allocator_type;

	enum
		{	
		_Multi = _Mfl};

	typedef key_compare value_compare;

	static const _Kty& _Kfn(const value_type& _Val)
		{	
		return (_Val);
		}
	};

		
template<class _Kty,
	class _Pr = less<_Kty>,
	class _Alloc = allocator<_Kty> >
	class set
		: public _Tree<_Tset_traits<_Kty, _Pr, _Alloc, false> >
	{	
public:
	typedef set<_Kty, _Pr, _Alloc> _Myt;
	typedef _Tree<_Tset_traits<_Kty, _Pr, _Alloc, false> > _Mybase;
	typedef _Kty key_type;
	typedef _Pr key_compare;
	typedef typename _Mybase::value_compare value_compare;
	typedef typename _Mybase::allocator_type allocator_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;
	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;
	typedef typename _Mybase::reverse_iterator reverse_iterator;
	typedef typename _Mybase::const_reverse_iterator
		const_reverse_iterator;
	typedef typename _Mybase::value_type value_type;

	typedef typename _Mybase::_Alty _Alty;

	set()
		: _Mybase(key_compare())
		{	
		}

	explicit set(const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		}

	set(const _Myt& _Right)
		: _Mybase(_Right,
			_Right._Getal().select_on_container_copy_construction())
		{	
		}

	set(const _Myt& _Right, const allocator_type& _Al)
		: _Mybase(_Right, _Al)
		{	
		}

	explicit set(const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		}

	set(const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		}

	template<class _Iter>
		set(_Iter _First, _Iter _Last)
		: _Mybase(key_compare())
		{	
		this->insert(_First, _Last);
		}

	template<class _Iter>
		set(_Iter _First, _Iter _Last,
			const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		this->insert(_First, _Last);
		}

	template<class _Iter>
		set(_Iter _First, _Iter _Last,
			const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		this->insert(_First, _Last);
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	set(_Myt&& _Right)
		: _Mybase(::std:: move(_Right))
		{	
		}

	set(_Myt&& _Right, const allocator_type& _Al)
		: _Mybase(::std:: move(_Right), _Al)
		{	
		}

	_Myt& operator=(_Myt&& _Right)
		noexcept(_Alty::is_always_equal::value && is_nothrow_move_assignable<_Pr>::value)
		{	
		_Mybase::operator=(::std:: move(_Right));
		return (*this);
		}

	void swap(_Myt& _Right)
		noexcept(_Alty::is_always_equal::value && _Is_nothrow_swappable<_Pr>::value)
		{	
		_Mybase::swap(_Right);
		}

	set(::std:: initializer_list<value_type> _Ilist)
		: _Mybase(key_compare())
		{	
		this->insert(_Ilist);
		}

	set(::std:: initializer_list<value_type> _Ilist,
			const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		this->insert(_Ilist);
		}

	set(::std:: initializer_list<value_type> _Ilist,
			const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		this->insert(_Ilist);
		}

	_Myt& operator=(::std:: initializer_list<value_type> _Ilist)
		{	
		this->clear();
		this->insert(_Ilist);
		return (*this);
		}
	};

template<class _Kty,
	class _Pr,
	class _Alloc> inline
	void swap(set<_Kty, _Pr, _Alloc>& _Left,
		set<_Kty, _Pr, _Alloc>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

		
template<class _Kty,
	class _Pr = less<_Kty>,
	class _Alloc = allocator<_Kty> >
	class multiset
		: public _Tree<_Tset_traits<_Kty, _Pr, _Alloc, true> >
	{	
public:
	typedef multiset<_Kty, _Pr, _Alloc> _Myt;
	typedef _Tree<_Tset_traits<_Kty, _Pr, _Alloc, true> > _Mybase;
	typedef _Kty key_type;
	typedef _Pr key_compare;
	typedef typename _Mybase::value_compare value_compare;
	typedef typename _Mybase::allocator_type allocator_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;
	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;
	typedef typename _Mybase::reverse_iterator reverse_iterator;
	typedef typename _Mybase::const_reverse_iterator
		const_reverse_iterator;
	typedef typename _Mybase::value_type value_type;

	typedef typename _Mybase::_Alty _Alty;

	multiset()
		: _Mybase(key_compare())
		{	
		}

	explicit multiset(const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		}

	multiset(const _Myt& _Right)
		: _Mybase(_Right,
			_Right._Getal().select_on_container_copy_construction())
		{	
		}

	multiset(const _Myt& _Right, const allocator_type& _Al)
		: _Mybase(_Right, _Al)
		{	
		}

	explicit multiset(const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		}

	multiset(const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		}

	template<class _Iter>
		multiset(_Iter _First, _Iter _Last)
		: _Mybase(key_compare())
		{	
		this->insert(_First, _Last);
		}

	template<class _Iter>
		multiset(_Iter _First, _Iter _Last,
			const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		this->insert(_First, _Last);
		}

	template<class _Iter>
		multiset(_Iter _First, _Iter _Last,
			const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		this->insert(_First, _Last);
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	multiset(_Myt&& _Right)
		: _Mybase(::std:: move(_Right))
		{	
		}

	multiset(_Myt&& _Right, const allocator_type& _Al)
		: _Mybase(::std:: move(_Right), _Al)
		{	
		}

	_Myt& operator=(_Myt&& _Right)
		noexcept(_Alty::is_always_equal::value && is_nothrow_move_assignable<_Pr>::value)
		{	
		_Mybase::operator=(::std:: move(_Right));
		return (*this);
		}

	template<class... _Valty>
		iterator emplace(_Valty&&... _Val)
		{	
		return (_Mybase::emplace(::std:: forward<_Valty>(_Val)...).first);
		}

	void swap(_Myt& _Right)
		noexcept(_Alty::is_always_equal::value && _Is_nothrow_swappable<_Pr>::value)
		{	
		_Mybase::swap(_Right);
		}

	multiset(::std:: initializer_list<value_type> _Ilist)
		: _Mybase(key_compare())
		{	
		this->insert(_Ilist);
		}

	multiset(::std:: initializer_list<value_type> _Ilist,
			const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		this->insert(_Ilist);
		}

	multiset(::std:: initializer_list<value_type> _Ilist,
			const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		this->insert(_Ilist);
		}

	_Myt& operator=(::std:: initializer_list<value_type> _Ilist)
		{	
		this->clear();
		this->insert(_Ilist);
		return (*this);
		}
	};

template<class _Kty,
	class _Pr,
	class _Alloc> inline
	void swap(multiset<_Kty, _Pr, _Alloc>& _Left,
		multiset<_Kty, _Pr, _Alloc>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)





































































































































































































































#pragma once












































































































































 





























































#pragma warning(push)

#pragma warning(disable:4001) 


#pragma once





























































































































































































































































#pragma warning(pop)













#pragma once


#pragma region Application Family





















































































































#pragma warning(disable:4514)

#pragma warning(disable:4103)


#pragma warning(push)

#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)










#pragma once




































































































































































































































































































































__pragma(pack(push, 8)) extern "C" {




typedef enum _EXCEPTION_DISPOSITION
{
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;

















    

        struct _EXCEPTION_RECORD;
        struct _CONTEXT;
        struct _DISPATCHER_CONTEXT;

        __declspec(dllimport) EXCEPTION_DISPOSITION __C_specific_handler(
                 struct _EXCEPTION_RECORD*   ExceptionRecord,
                 void*                       EstablisherFrame,
              struct _CONTEXT*            ContextRecord,
              struct _DISPATCHER_CONTEXT* DispatcherContext
            );

    












unsigned long __cdecl _exception_code(void);
void *        __cdecl _exception_info(void);
int           __cdecl _abnormal_termination(void);










} __pragma(pack(pop))









#pragma once




































































































































































































































































































































__pragma(pack(push, 8)) extern "C" {










} __pragma(pack(pop))

















#pragma once


extern "C" {


















#pragma once


















#pragma once




 


  
 

 



  
 

 
  
  
 
























extern "C" {


































































































































































































































































































































































































































                                

}























































































































































































































#pragma once






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#pragma once



extern "C" {







































































































    
    
    
    
    
    
    
    
    
    
    




    
    
    
    
    

    
    
    
    
    
    
    

    
    
    
    



    
    


    
    
    
    
    
    
    
    
    
    
    
    


    
    


    
    


    
    



    
    









    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    


    


    
    
    
    
    

    


    
    
    
    
    

    


    
    
    
    
    

    


    
    
    
    
    


    




    
    
    
    
    

    


    
    
    
    
    


    


    
    
    
    
    
    

    


    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    

    
    
    
    

    

    
    
    

    

    
    
    
    
    
    
    
    
    
    
    
    

    
    


    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    


    
    
    
    
     
    

    
    
        
        
        
        
    
    
    
    
    
    

    
    
    

    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    

    

    
    
    
    
    
    
    
    
    
    
    
    
    


    
    
    
    
    
    


    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    
    
    
    

    
    

    
    

    
    
    
    
    
    


    
    
    

    
	

    
    


    
    


    
    
    


    
    
    


    
    











































































    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    



    
    
    

    
    
    


}




























#pragma region Application Family























extern "C" {








typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef   char *PSZ;


































































































typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;
typedef FLOAT               *PFLOAT;
typedef BOOL            *PBOOL;
typedef BOOL             *LPBOOL;
typedef BYTE            *PBYTE;
typedef BYTE             *LPBYTE;
typedef int             *PINT;
typedef int              *LPINT;
typedef WORD            *PWORD;
typedef WORD             *LPWORD;
typedef long             *LPLONG;
typedef DWORD           *PDWORD;
typedef DWORD            *LPDWORD;
typedef void             *LPVOID;
typedef const void       *LPCVOID;

typedef int                 INT;
typedef unsigned int        UINT;
typedef unsigned int        *PUINT;

























#pragma warning(push)

#pragma warning(disable:4201) 
#pragma warning(disable:4214) 


extern "C" {










#pragma once





__pragma(pack(push, 8)) extern "C" {









  __declspec(dllimport) int __cdecl _isctype(  int _C,   int _Type);
  __declspec(dllimport) int __cdecl _isctype_l(  int _C,   int _Type,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl isalpha(  int _C);
  __declspec(dllimport) int __cdecl _isalpha_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl isupper(  int _C);
  __declspec(dllimport) int __cdecl _isupper_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl islower(  int _C);
  __declspec(dllimport) int __cdecl _islower_l(  int _C,   _locale_t _Locale);


   __declspec(dllimport) int __cdecl isdigit(  int _C);

  __declspec(dllimport) int __cdecl _isdigit_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isxdigit(  int _C);
  __declspec(dllimport) int __cdecl _isxdigit_l(  int _C,   _locale_t _Locale);


   __declspec(dllimport) int __cdecl isspace(  int _C);

  __declspec(dllimport) int __cdecl _isspace_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl ispunct(  int _C);
  __declspec(dllimport) int __cdecl _ispunct_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isblank(  int _C);
  __declspec(dllimport) int __cdecl _isblank_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl isalnum(  int _C);
  __declspec(dllimport) int __cdecl _isalnum_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isprint(  int _C);
  __declspec(dllimport) int __cdecl _isprint_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isgraph(  int _C);
  __declspec(dllimport) int __cdecl _isgraph_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl iscntrl(  int _C);
  __declspec(dllimport) int __cdecl _iscntrl_l(  int _C,   _locale_t _Locale);


   __declspec(dllimport) int __cdecl toupper(  int _C);


   __declspec(dllimport) int __cdecl tolower(  int _C);

   __declspec(dllimport) int __cdecl _tolower(  int _C);
  __declspec(dllimport) int __cdecl _tolower_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl _toupper(  int _C);
  __declspec(dllimport) int __cdecl _toupper_l(  int _C,   _locale_t _Locale);

  __declspec(dllimport) int __cdecl __isascii(  int _C);
  __declspec(dllimport) int __cdecl __toascii(  int _C);
  __declspec(dllimport) int __cdecl __iscsymf(  int _C);
  __declspec(dllimport) int __cdecl __iscsym(  int _C);









 
    
    
    






















    
    
    



        
    



    
    
    
    
    
    
    
    



    














    __inline __crt_locale_data_public* __cdecl __acrt_get_locale_data_prefix(void const volatile* const _LocalePointers)
    {
        _locale_t const _TypedLocalePointers = (_locale_t)_LocalePointers;
        return (__crt_locale_data_public*)_TypedLocalePointers->locinfo;
    }

    



    __inline int __cdecl _chvalidchk_l(
              int       const _C,
              int       const _Mask,
          _locale_t const _Locale
        )
    {
        


        if (_Locale)
        {
            return __acrt_get_locale_data_prefix(_Locale)->_locale_pctype[_C] & _Mask;
        }
            
        return (__pctype_func()[(_C)] & (_Mask));
        
    }

    
    

    __inline int __cdecl _ischartype_l(
              int       const _C,
              int       const _Mask,
          _locale_t const _Locale
        )
    {
        if (_Locale && __acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max > 1)
        {
            return _isctype_l(_C, _Mask, _Locale);
        }

        return _chvalidchk_l(_C, _Mask, _Locale);
    }

    
    
    
    
    
    
    
    
    
    
    
    

    
    

    
    


    
    
    
    
    

    
    
    
    





    
    
    
    
    





} __pragma(pack(pop))



























































































#pragma once



extern "C" {


    
    
    

    
    
    

    


    
    
    
    


    



    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    


    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    















}


















































































































 
 typedef unsigned __int64 POINTER_64_INT;
 
  
 



































#pragma once



extern "C" {


typedef signed char         INT8, *PINT8;
typedef signed short        INT16, *PINT16;
typedef signed int          INT32, *PINT32;
typedef signed __int64      INT64, *PINT64;
typedef unsigned char       UINT8, *PUINT8;
typedef unsigned short      UINT16, *PUINT16;
typedef unsigned int        UINT32, *PUINT32;
typedef unsigned __int64    UINT64, *PUINT64;





typedef signed int LONG32, *PLONG32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;





























    typedef __int64 INT_PTR, *PINT_PTR;
    typedef unsigned __int64 UINT_PTR, *PUINT_PTR;

    typedef __int64 LONG_PTR, *PLONG_PTR;
    typedef unsigned __int64 ULONG_PTR, *PULONG_PTR;

    























typedef __int64 SHANDLE_PTR;
typedef unsigned __int64 HANDLE_PTR;
typedef unsigned int UHALF_PTR, *PUHALF_PTR;
typedef int HALF_PTR, *PHALF_PTR;


__inline
unsigned long
HandleToULong(
    const void *h
    )
{
    return((unsigned long) (ULONG_PTR) h );
}

__inline
long
HandleToLong(
    const void *h
    )
{
    return((long) (LONG_PTR) h );
}

__inline
void *
ULongToHandle(
    const unsigned long h
    )
{
    return((void *) (UINT_PTR) h );
}


__inline
void *
LongToHandle(
    const long h
    )
{
    return((void *) (INT_PTR) h );
}


__inline
unsigned long
PtrToUlong(
    const void  *p
    )
{
    return((unsigned long) (ULONG_PTR) p );
}

__inline
unsigned int
PtrToUint(
    const void  *p
    )
{
    return((unsigned int) (UINT_PTR) p );
}

__inline
unsigned short
PtrToUshort(
    const void  *p
    )
{
    return((unsigned short) (unsigned long) (ULONG_PTR) p );
}

__inline
long
PtrToLong(
    const void  *p
    )
{
    return((long) (LONG_PTR) p );
}

__inline
int
PtrToInt(
    const void  *p
    )
{
    return((int) (INT_PTR) p );
}

__inline
short
PtrToShort(
    const void  *p
    )
{
    return((short) (long) (LONG_PTR) p );
}

__inline
void *
IntToPtr(
    const int i
    )

{
    return( (void *)(INT_PTR)i );
}

__inline
void *
UIntToPtr(
    const unsigned int ui
    )

{
    return( (void *)(UINT_PTR)ui );
}

__inline
void *
LongToPtr(
    const long l
    )

{
    return( (void *)(LONG_PTR)l );
}

__inline
void *
ULongToPtr(
    const unsigned long ul
    )

{
    return( (void *)(ULONG_PTR)ul );
}






__inline
void *
Ptr32ToPtr(
    const void * __ptr32 p
    )
{
    return((void *) (ULONG_PTR) (unsigned long) p);
}

__inline
void *
Handle32ToHandle(
    const void * __ptr32 h
    )
{
    return((void *) (LONG_PTR) (long) h);
}

__inline
void * __ptr32
PtrToPtr32(
    const void *p
    )
{
    return((void * __ptr32) (unsigned long) (ULONG_PTR) p);
}
































































































typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;















































typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;





typedef __int64 LONG64, *PLONG64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;







typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;




}













































































































































































typedef void *PVOID;
typedef void * __ptr64 PVOID64;








































typedef char CHAR;
typedef short SHORT;
typedef long LONG;

typedef int INT;








typedef wchar_t WCHAR;    





typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;

typedef   WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef   PWSTR *PZPWSTR;
typedef   const PWSTR *PCZPWSTR;
typedef   WCHAR __unaligned *LPUWSTR, *PUWSTR;
typedef   const WCHAR *LPCWSTR, *PCWSTR;
typedef   PCWSTR *PZPCWSTR;
typedef   const PCWSTR *PCZPCWSTR;
typedef   const WCHAR __unaligned *LPCUWSTR, *PCUWSTR;

typedef   WCHAR *PZZWSTR;
typedef   const WCHAR *PCZZWSTR;
typedef   WCHAR __unaligned *PUZZWSTR;
typedef   const WCHAR __unaligned *PCUZZWSTR;

typedef  WCHAR *PNZWCH;
typedef  const WCHAR *PCNZWCH;
typedef  WCHAR __unaligned *PUNZWCH;
typedef  const WCHAR __unaligned *PCUNZWCH;



typedef const WCHAR *LPCWCHAR, *PCWCHAR;
typedef const WCHAR __unaligned *LPCUWCHAR, *PCUWCHAR;





typedef unsigned long UCSCHAR;



















typedef UCSCHAR *PUCSCHAR;
typedef const UCSCHAR *PCUCSCHAR;

typedef UCSCHAR *PUCSSTR;
typedef UCSCHAR __unaligned *PUUCSSTR;

typedef const UCSCHAR *PCUCSSTR;
typedef const UCSCHAR __unaligned *PCUUCSSTR;

typedef UCSCHAR __unaligned *PUUCSCHAR;
typedef const UCSCHAR __unaligned *PCUUCSCHAR;







typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;

typedef   CHAR *NPSTR, *LPSTR, *PSTR;
typedef   PSTR *PZPSTR;
typedef   const PSTR *PCZPSTR;
typedef   const CHAR *LPCSTR, *PCSTR;
typedef   PCSTR *PZPCSTR;
typedef   const PCSTR *PCZPCSTR;

typedef   CHAR *PZZSTR;
typedef   const CHAR *PCZZSTR;

typedef  CHAR *PNZCH;
typedef  const CHAR *PCNZCH;

































typedef char TCHAR, *PTCHAR;
typedef unsigned char TBYTE , *PTBYTE ;



typedef LPCH LPTCH, PTCH;
typedef LPCCH LPCTCH, PCTCH;
typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR;
typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;
typedef PZZSTR PZZTSTR, PUZZTSTR;
typedef PCZZSTR PCZZTSTR, PCUZZTSTR;
typedef PZPSTR PZPTSTR;
typedef PNZCH PNZTCH, PUNZTCH;
typedef PCNZCH PCNZTCH, PCUNZTCH;






typedef SHORT *PSHORT;  
typedef LONG *PLONG;    








typedef struct _PROCESSOR_NUMBER {
    WORD   Group;
    BYTE  Number;
    BYTE  Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;






typedef struct _GROUP_AFFINITY {
    KAFFINITY Mask;
    WORD   Group;
    WORD   Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;








typedef void *HANDLE;









typedef HANDLE *PHANDLE;







typedef BYTE   FCHAR;
typedef WORD   FSHORT;
typedef DWORD  FLONG;










typedef   long HRESULT;






    























































typedef char CCHAR;          
typedef DWORD LCID;         
typedef PDWORD PLCID;       
typedef WORD   LANGID;      








typedef enum {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID, *PCOMPARTMENT_ID;



























typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;









typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;




















typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;




typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    } ;
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;

    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;




typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } ;
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;

    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;





typedef LONG_PTR RTL_REFERENCE_COUNT, *PRTL_REFERENCE_COUNT;









typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG  DWORDLONG;
typedef DWORDLONG *PDWORDLONG;





































































































































extern "C" {









unsigned char
__cdecl
_rotl8 (
      unsigned char Value,
      unsigned char Shift
    );

unsigned short
__cdecl
_rotl16 (
      unsigned short Value,
      unsigned char Shift
    );

unsigned char
__cdecl
_rotr8 (
      unsigned char Value,
      unsigned char Shift
    );

unsigned short
__cdecl
_rotr16 (
      unsigned short Value,
      unsigned char Shift
    );

#pragma intrinsic(_rotl8)
#pragma intrinsic(_rotl16)
#pragma intrinsic(_rotr8)
#pragma intrinsic(_rotr16)










unsigned int
__cdecl
_rotl (
      unsigned int Value,
      int Shift
    );

unsigned __int64
__cdecl
_rotl64 (
      unsigned __int64 Value,
      int Shift
    );

unsigned int
__cdecl
_rotr (
      unsigned int Value,
      int Shift
    );

unsigned __int64
__cdecl
_rotr64 (
      unsigned __int64 Value,
      int Shift
    );

#pragma intrinsic(_rotl)
#pragma intrinsic(_rotl64)
#pragma intrinsic(_rotr)
#pragma intrinsic(_rotr64)




}






typedef BYTE  BOOLEAN;           
typedef BOOLEAN *PBOOLEAN;       





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;








typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;
























typedef struct _GUID {
    unsigned long  Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char  Data4[ 8 ];
} GUID;















































typedef GUID *LPGUID;




typedef const GUID *LPCGUID;





typedef GUID IID;
typedef IID *LPIID;


typedef GUID CLSID;
typedef CLSID *LPCLSID;


typedef GUID FMTID;
typedef FMTID *LPFMTID;






















































__inline int InlineIsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
   return (
      ((unsigned long *) &rguid1)[0] == ((unsigned long *) &rguid2)[0] &&
      ((unsigned long *) &rguid1)[1] == ((unsigned long *) &rguid2)[1] &&
      ((unsigned long *) &rguid1)[2] == ((unsigned long *) &rguid2)[2] &&
      ((unsigned long *) &rguid1)[3] == ((unsigned long *) &rguid2)[3]);
}

__inline int IsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
    return !memcmp(&rguid1, &rguid2, sizeof(GUID));
}





























__inline bool operator==(const GUID & guidOne, const GUID & guidOther)
{
    return !!IsEqualGUID(guidOne,guidOther);
}

__inline bool operator!=(const GUID & guidOne, const GUID & guidOther)
{
    return !(guidOne == guidOther);
}










typedef struct  _OBJECTID {     
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;












































































#pragma region Application Family




extern "C++" 
template <typename T, size_t N>
char (*RtlpNumberOf( __unaligned T (&)[N] ))[N];




#pragma endregion
























































































































typedef
 
 
EXCEPTION_DISPOSITION
__stdcall
EXCEPTION_ROUTINE (
      struct _EXCEPTION_RECORD *ExceptionRecord,
      PVOID EstablisherFrame,
      struct _CONTEXT *ContextRecord,
      PVOID DispatcherContext
    );

typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;






























































































































































































































































































































































































































































































































































































































































































































































































































































extern "C++" {

    template <size_t S>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE;

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<1>
    {
        typedef INT8 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<2>
    {
        typedef INT16 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<4>
    {
        typedef INT32 type;
    };

    
    template <class T>
    struct _ENUM_FLAG_SIZED_INTEGER
    {
        typedef typename _ENUM_FLAG_INTEGER_FOR_SIZE<sizeof(T)>::type type;
    };

}





























  



























































  







typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;







typedef struct __declspec(align(16)) _M128A {
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;





typedef struct __declspec(align(16)) _XSAVE_FORMAT {
    WORD   ControlWord;
    WORD   StatusWord;
    BYTE  TagWord;
    BYTE  Reserved1;
    WORD   ErrorOpcode;
    DWORD ErrorOffset;
    WORD   ErrorSelector;
    WORD   Reserved2;
    DWORD DataOffset;
    WORD   DataSelector;
    WORD   Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];



    M128A XmmRegisters[16];
    BYTE  Reserved4[96];








} XSAVE_FORMAT, *PXSAVE_FORMAT;



typedef struct __declspec(align(8)) _XSAVE_AREA_HEADER {
    DWORD64 Mask;
    DWORD64 Reserved[7];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;

typedef struct __declspec(align(16)) _XSAVE_AREA {
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;

typedef struct _XSTATE_CONTEXT {
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
      PXSAVE_AREA Area;





    PVOID Buffer;





} XSTATE_CONTEXT, *PXSTATE_CONTEXT;





typedef struct _SCOPE_TABLE_AMD64 {
    DWORD Count;
    struct {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_AMD64, *PSCOPE_TABLE_AMD64;













extern "C" {




























 
BOOLEAN
_bittest (
      LONG const *Base,
      LONG Offset
    );

BOOLEAN
_bittestandcomplement (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_bittestandset (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_bittestandreset (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_interlockedbittestandset (
       LONG volatile *Base,
      LONG Offset
    );

BOOLEAN
_interlockedbittestandreset (
       LONG volatile *Base,
      LONG Offset
    );

BOOLEAN
_bittest64 (
      LONG64 const *Base,
      LONG64 Offset
    );

BOOLEAN
_bittestandcomplement64 (
      LONG64 *Base,
      LONG64 Offset
    );

BOOLEAN
_bittestandset64 (
      LONG64 *Base,
      LONG64 Offset
    );

BOOLEAN
_bittestandreset64 (
      LONG64 *Base,
      LONG64 Offset
    );

BOOLEAN
_interlockedbittestandset64 (
       LONG64 volatile *Base,
      LONG64 Offset
    );

BOOLEAN
_interlockedbittestandreset64 (
       LONG64 volatile *Base,
      LONG64 Offset
    );

#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)

#pragma intrinsic(_bittest64)
#pragma intrinsic(_bittestandcomplement64)
#pragma intrinsic(_bittestandset64)
#pragma intrinsic(_bittestandreset64)
#pragma intrinsic(_interlockedbittestandset64)
#pragma intrinsic(_interlockedbittestandreset64)










 
BOOLEAN
_BitScanForward (
      DWORD *Index,
      DWORD Mask
    );

 
BOOLEAN
_BitScanReverse (
      DWORD *Index,
      DWORD Mask
    );

 
BOOLEAN
_BitScanForward64 (
      DWORD *Index,
      DWORD64 Mask
    );

 
BOOLEAN
_BitScanReverse64 (
      DWORD *Index,
      DWORD64 Mask
    );

#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)
#pragma intrinsic(_BitScanForward64)
#pragma intrinsic(_BitScanReverse64)













































































































SHORT
_InterlockedIncrement16 (
       SHORT volatile *Addend
    );

SHORT
_InterlockedDecrement16 (
       SHORT volatile *Addend
    );

SHORT
_InterlockedCompareExchange16 (
       SHORT volatile *Destination,
      SHORT ExChange,
      SHORT Comperand
    );

LONG
_InterlockedAnd (
       LONG volatile *Destination,
      LONG Value
    );

LONG
_InterlockedOr (
       LONG volatile *Destination,
      LONG Value
    );

LONG
_InterlockedXor (
       LONG volatile *Destination,
      LONG Value
    );

LONG64
_InterlockedAnd64 (
       LONG64 volatile *Destination,
      LONG64 Value
    );

LONG64
_InterlockedOr64 (
       LONG64 volatile *Destination,
      LONG64 Value
    );

LONG64
_InterlockedXor64 (
       LONG64 volatile *Destination,
      LONG64 Value
    );

LONG
_InterlockedIncrement (
       LONG volatile *Addend
    );

LONG
_InterlockedDecrement (
       LONG volatile *Addend
    );

LONG
_InterlockedExchange (
       LONG volatile *Target,
      LONG Value
    );

LONG
_InterlockedExchangeAdd (
       LONG volatile *Addend,
      LONG Value
    );



__forceinline
LONG
_InterlockedAdd (
       LONG volatile *Addend,
      LONG Value
    )

{
    return _InterlockedExchangeAdd(Addend, Value) + Value;
}



LONG
_InterlockedCompareExchange (
       LONG volatile *Destination,
      LONG ExChange,
      LONG Comperand
    );

LONG64
_InterlockedIncrement64 (
       LONG64 volatile *Addend
    );

LONG64
_InterlockedDecrement64 (
       LONG64 volatile *Addend
    );

LONG64
_InterlockedExchange64 (
       LONG64 volatile *Target,
      LONG64 Value
    );

LONG64
_InterlockedExchangeAdd64 (
       LONG64 volatile *Addend,
      LONG64 Value
    );



__forceinline
LONG64
_InterlockedAdd64 (
       LONG64 volatile *Addend,
      LONG64 Value
    )

{
    return _InterlockedExchangeAdd64(Addend, Value) + Value;
}



LONG64
_InterlockedCompareExchange64 (
       LONG64 volatile *Destination,
      LONG64 ExChange,
      LONG64 Comperand
    );

BOOLEAN
_InterlockedCompareExchange128 (
       LONG64 volatile *Destination,
      LONG64 ExchangeHigh,
      LONG64 ExchangeLow,
      LONG64 *ComparandResult
    );

  PVOID
_InterlockedCompareExchangePointer (
      
     PVOID volatile *Destination,
      PVOID Exchange,
      PVOID Comperand
    );

  PVOID
_InterlockedExchangePointer(
      
     PVOID volatile *Target,
      PVOID Value
    );

#pragma intrinsic(_InterlockedIncrement16)
#pragma intrinsic(_InterlockedDecrement16)
#pragma intrinsic(_InterlockedCompareExchange16)
#pragma intrinsic(_InterlockedAnd)
#pragma intrinsic(_InterlockedOr)
#pragma intrinsic(_InterlockedXor)
#pragma intrinsic(_InterlockedIncrement)
#pragma intrinsic(_InterlockedDecrement)
#pragma intrinsic(_InterlockedExchange)
#pragma intrinsic(_InterlockedExchangeAdd)
#pragma intrinsic(_InterlockedCompareExchange)
#pragma intrinsic(_InterlockedAnd64)
#pragma intrinsic(_InterlockedOr64)
#pragma intrinsic(_InterlockedXor64)
#pragma intrinsic(_InterlockedIncrement64)
#pragma intrinsic(_InterlockedDecrement64)
#pragma intrinsic(_InterlockedExchange64)
#pragma intrinsic(_InterlockedExchangeAdd64)
#pragma intrinsic(_InterlockedCompareExchange64)



#pragma intrinsic(_InterlockedCompareExchange128)



#pragma intrinsic(_InterlockedExchangePointer)
#pragma intrinsic(_InterlockedCompareExchangePointer)






CHAR
_InterlockedExchange8 (
       CHAR volatile *Target,
      CHAR Value
    );

SHORT
_InterlockedExchange16 (
       SHORT volatile *Destination,
      SHORT ExChange
    );

#pragma intrinsic(_InterlockedExchange8)
#pragma intrinsic(_InterlockedExchange16)












char
_InterlockedAnd8 (
       char volatile *Destination,
      char Value
    );

char
_InterlockedOr8 (
       char volatile *Destination,
      char Value
    );

char
_InterlockedXor8 (
       char volatile *Destination,
      char Value
    );

SHORT
_InterlockedAnd16(
       SHORT volatile *Destination,
      SHORT Value
    );

SHORT
_InterlockedOr16(
       SHORT volatile *Destination,
      SHORT Value
    );

SHORT
_InterlockedXor16(
       SHORT volatile *Destination,
      SHORT Value
    );

#pragma intrinsic (_InterlockedAnd8)
#pragma intrinsic (_InterlockedOr8)
#pragma intrinsic (_InterlockedXor8)
#pragma intrinsic (_InterlockedAnd16)
#pragma intrinsic (_InterlockedOr16)
#pragma intrinsic (_InterlockedXor16)











void
__cpuidex (
    int CPUInfo[4],
    int Function,
    int SubLeaf
    );

#pragma intrinsic(__cpuidex)









void
_mm_clflush (
      void const *Address
    );

#pragma intrinsic(_mm_clflush)



void
_ReadWriteBarrier (
    void
    );

#pragma intrinsic(_ReadWriteBarrier)















void
__faststorefence (
    void
    );



void
_mm_lfence (
    void
    );

void
_mm_mfence (
    void
    );

void
_mm_sfence (
    void
    );

void
_mm_pause (
    void
    );

void
_mm_prefetch (
      CHAR const *a,
      int sel
    );

void
_m_prefetchw (
      volatile const void *Source
    );












#pragma intrinsic(__faststorefence)



#pragma intrinsic(_mm_pause)
#pragma intrinsic(_mm_prefetch)
#pragma intrinsic(_mm_lfence)
#pragma intrinsic(_mm_mfence)
#pragma intrinsic(_mm_sfence)
#pragma intrinsic(_m_prefetchw)























unsigned int
_mm_getcsr (
    void
    );

void
_mm_setcsr (
      unsigned int MxCsr
    );

#pragma intrinsic(_mm_getcsr)
#pragma intrinsic(_mm_setcsr)







unsigned __int32
__getcallerseflags (
    void
    );

#pragma intrinsic(__getcallerseflags)







DWORD
__segmentlimit (
      DWORD Selector
    );

#pragma intrinsic(__segmentlimit)







DWORD64
__readpmc (
      DWORD Counter
    );

#pragma intrinsic(__readpmc)







DWORD64
__rdtsc (
    void
    );

#pragma intrinsic(__rdtsc)





void
__movsb (
      PBYTE  Destination,
      BYTE  const *Source,
      SIZE_T Count
    );

void
__movsw (
      PWORD   Destination,
      WORD   const *Source,
      SIZE_T Count
    );

void
__movsd (
      PDWORD Destination,
      DWORD const *Source,
      SIZE_T Count
    );

void
__movsq (
      PDWORD64 Destination,
      DWORD64 const *Source,
      SIZE_T Count
    );

#pragma intrinsic(__movsb)
#pragma intrinsic(__movsw)
#pragma intrinsic(__movsd)
#pragma intrinsic(__movsq)





void
__stosb (
      PBYTE  Destination,
      BYTE  Value,
      SIZE_T Count
    );

void
__stosw (
      PWORD   Destination,
      WORD   Value,
      SIZE_T Count
    );

void
__stosd (
      PDWORD Destination,
      DWORD Value,
      SIZE_T Count
    );

void
__stosq (
      PDWORD64 Destination,
      DWORD64 Value,
      SIZE_T Count
    );

#pragma intrinsic(__stosb)
#pragma intrinsic(__stosw)
#pragma intrinsic(__stosd)
#pragma intrinsic(__stosq)








LONGLONG
__mulh (
      LONG64 Multiplier,
      LONG64 Multiplicand
    );

ULONGLONG
__umulh (
      DWORD64 Multiplier,
      DWORD64 Multiplicand
    );

#pragma intrinsic(__mulh)
#pragma intrinsic(__umulh)







DWORD64
__popcnt64 (
      DWORD64 operand
    );



#pragma intrinsic(__popcnt64)










DWORD64
__shiftleft128 (
      DWORD64 LowPart,
      DWORD64 HighPart,
      BYTE  Shift
    );

DWORD64
__shiftright128 (
      DWORD64 LowPart,
      DWORD64 HighPart,
      BYTE  Shift
    );

#pragma intrinsic(__shiftleft128)
#pragma intrinsic(__shiftright128)







LONG64
_mul128 (
      LONG64 Multiplier,
      LONG64 Multiplicand,
      LONG64 *HighProduct
    );

#pragma intrinsic(_mul128)





DWORD64
_umul128 (
      DWORD64 Multiplier,
      DWORD64 Multiplicand,
      DWORD64 *HighProduct
    );

#pragma intrinsic(_umul128)



__forceinline
LONG64
MultiplyExtract128 (
      LONG64 Multiplier,
      LONG64 Multiplicand,
      BYTE  Shift
    )

{

    LONG64 extractedProduct;
    LONG64 highProduct;
    LONG64 lowProduct;
    BOOLEAN negate;
    DWORD64 uhighProduct;
    DWORD64 ulowProduct;

    lowProduct = _mul128(Multiplier, Multiplicand, &highProduct);
    negate = 0;
    uhighProduct = (DWORD64)highProduct;
    ulowProduct = (DWORD64)lowProduct;
    if (highProduct < 0) {
        negate = 1;
        uhighProduct = (DWORD64)(-highProduct);
        ulowProduct = (DWORD64)(-lowProduct);
        if (ulowProduct != 0) {
            uhighProduct -= 1;
        }
    }

    extractedProduct = (LONG64)__shiftright128(ulowProduct, uhighProduct, Shift);
    if (negate != 0) {
        extractedProduct = -extractedProduct;
    }

    return extractedProduct;
}

__forceinline
DWORD64
UnsignedMultiplyExtract128 (
      DWORD64 Multiplier,
      DWORD64 Multiplicand,
      BYTE  Shift
    )

{

    DWORD64 extractedProduct;
    DWORD64 highProduct;
    DWORD64 lowProduct;

    lowProduct = _umul128(Multiplier, Multiplicand, &highProduct);
    extractedProduct = __shiftright128(lowProduct, highProduct, Shift);
    return extractedProduct;
}





BYTE 
__readgsbyte (
      DWORD Offset
    );

WORD  
__readgsword (
      DWORD Offset
    );

DWORD
__readgsdword (
      DWORD Offset
    );

DWORD64
__readgsqword (
      DWORD Offset
    );

void
__writegsbyte (
      DWORD Offset,
      BYTE  Data
    );

void
__writegsword (
      DWORD Offset,
      WORD   Data
    );

void
__writegsdword (
      DWORD Offset,
      DWORD Data
    );

void
__writegsqword (
      DWORD Offset,
      DWORD64 Data
    );

#pragma intrinsic(__readgsbyte)
#pragma intrinsic(__readgsword)
#pragma intrinsic(__readgsdword)
#pragma intrinsic(__readgsqword)
#pragma intrinsic(__writegsbyte)
#pragma intrinsic(__writegsword)
#pragma intrinsic(__writegsdword)
#pragma intrinsic(__writegsqword)



void
__incgsbyte (
      DWORD Offset
    );

void
__addgsbyte (
      DWORD Offset,
      BYTE  Value
    );

void
__incgsword (
      DWORD Offset
    );

void
__addgsword (
      DWORD Offset,
      WORD   Value
    );

void
__incgsdword (
      DWORD Offset
    );

void
__addgsdword (
      DWORD Offset,
      DWORD Value
    );

void
__incgsqword (
      DWORD Offset
    );

void
__addgsqword (
      DWORD Offset,
      DWORD64 Value
    );
















}





























































typedef XSAVE_FORMAT XMM_SAVE_AREA32, *PXMM_SAVE_AREA32;




































typedef struct __declspec(align(16)) _CONTEXT {

    
    
    
    
    
    

    DWORD64 P1Home;
    DWORD64 P2Home;
    DWORD64 P3Home;
    DWORD64 P4Home;
    DWORD64 P5Home;
    DWORD64 P6Home;

    
    
    

    DWORD ContextFlags;
    DWORD MxCsr;

    
    
    

    WORD   SegCs;
    WORD   SegDs;
    WORD   SegEs;
    WORD   SegFs;
    WORD   SegGs;
    WORD   SegSs;
    DWORD EFlags;

    
    
    

    DWORD64 Dr0;
    DWORD64 Dr1;
    DWORD64 Dr2;
    DWORD64 Dr3;
    DWORD64 Dr6;
    DWORD64 Dr7;

    
    
    

    DWORD64 Rax;
    DWORD64 Rcx;
    DWORD64 Rdx;
    DWORD64 Rbx;
    DWORD64 Rsp;
    DWORD64 Rbp;
    DWORD64 Rsi;
    DWORD64 Rdi;
    DWORD64 R8;
    DWORD64 R9;
    DWORD64 R10;
    DWORD64 R11;
    DWORD64 R12;
    DWORD64 R13;
    DWORD64 R14;
    DWORD64 R15;

    
    
    

    DWORD64 Rip;

    
    
    

    union {
        XMM_SAVE_AREA32 FltSave;
        struct {
            M128A Header[2];
            M128A Legacy[8];
            M128A Xmm0;
            M128A Xmm1;
            M128A Xmm2;
            M128A Xmm3;
            M128A Xmm4;
            M128A Xmm5;
            M128A Xmm6;
            M128A Xmm7;
            M128A Xmm8;
            M128A Xmm9;
            M128A Xmm10;
            M128A Xmm11;
            M128A Xmm12;
            M128A Xmm13;
            M128A Xmm14;
            M128A Xmm15;
        } ;
    } ;

    
    
    

    M128A VectorRegister[26];
    DWORD64 VectorControl;

    
    
    

    DWORD64 DebugControl;
    DWORD64 LastBranchToRip;
    DWORD64 LastBranchFromRip;
    DWORD64 LastExceptionToRip;
    DWORD64 LastExceptionFromRip;
} CONTEXT, *PCONTEXT;






typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY RUNTIME_FUNCTION, *PRUNTIME_FUNCTION;
typedef SCOPE_TABLE_AMD64 SCOPE_TABLE, *PSCOPE_TABLE;




















typedef struct _UNWIND_HISTORY_TABLE_ENTRY {
    DWORD64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
} UNWIND_HISTORY_TABLE_ENTRY, *PUNWIND_HISTORY_TABLE_ENTRY;

typedef struct _UNWIND_HISTORY_TABLE {
    DWORD Count;
    BYTE  LocalHint;
    BYTE  GlobalHint;
    BYTE  Search;
    BYTE  Once;
    DWORD64 LowAddress;
    DWORD64 HighAddress;
    UNWIND_HISTORY_TABLE_ENTRY Entry[12];
} UNWIND_HISTORY_TABLE, *PUNWIND_HISTORY_TABLE;





typedef
 
PRUNTIME_FUNCTION
GET_RUNTIME_FUNCTION_CALLBACK (
      DWORD64 ControlPc,
      PVOID Context
    );
typedef GET_RUNTIME_FUNCTION_CALLBACK *PGET_RUNTIME_FUNCTION_CALLBACK;

typedef
 
DWORD   
OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK (
      HANDLE Process,
      PVOID TableAddress,
      PDWORD Entries,
      PRUNTIME_FUNCTION* Functions
    );
typedef OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK *POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK;








typedef struct _DISPATCHER_CONTEXT {
    DWORD64 ControlPc;
    DWORD64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
    DWORD64 EstablisherFrame;
    DWORD64 TargetIp;
    PCONTEXT ContextRecord;
    PEXCEPTION_ROUTINE LanguageHandler;
    PVOID HandlerData;
    PUNWIND_HISTORY_TABLE HistoryTable;
    DWORD ScopeIndex;
    DWORD Fill0;
} DISPATCHER_CONTEXT, *PDISPATCHER_CONTEXT;





struct _EXCEPTION_POINTERS;
typedef
LONG
(*PEXCEPTION_FILTER) (
    struct _EXCEPTION_POINTERS *ExceptionPointers,
    PVOID EstablisherFrame
    );

typedef
void
(*PTERMINATION_HANDLER) (
    BOOLEAN _abnormal_termination,
    PVOID EstablisherFrame
    );






typedef struct _KNONVOLATILE_CONTEXT_POINTERS {
    union {
        PM128A FloatingContext[16];
        struct {
            PM128A Xmm0;
            PM128A Xmm1;
            PM128A Xmm2;
            PM128A Xmm3;
            PM128A Xmm4;
            PM128A Xmm5;
            PM128A Xmm6;
            PM128A Xmm7;
            PM128A Xmm8;
            PM128A Xmm9;
            PM128A Xmm10;
            PM128A Xmm11;
            PM128A Xmm12;
            PM128A Xmm13;
            PM128A Xmm14;
            PM128A Xmm15;
        } ;
    } ;

    union {
        PDWORD64 IntegerContext[16];
        struct {
            PDWORD64 Rax;
            PDWORD64 Rcx;
            PDWORD64 Rdx;
            PDWORD64 Rbx;
            PDWORD64 Rsp;
            PDWORD64 Rbp;
            PDWORD64 Rsi;
            PDWORD64 Rdi;
            PDWORD64 R8;
            PDWORD64 R9;
            PDWORD64 R10;
            PDWORD64 R11;
            PDWORD64 R12;
            PDWORD64 R13;
            PDWORD64 R14;
            PDWORD64 R15;
        } ;
    } ;

} KNONVOLATILE_CONTEXT_POINTERS, *PKNONVOLATILE_CONTEXT_POINTERS;







typedef struct _SCOPE_TABLE_ARM {
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM, *PSCOPE_TABLE_ARM;






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































extern "C" {

























void
__int2c (
    void
    );

#pragma intrinsic(__int2c)



































































































}




















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































typedef struct _LDT_ENTRY {
    WORD    LimitLow;
    WORD    BaseLow;
    union {
        struct {
            BYTE    BaseMid;
            BYTE    Flags1;     
            BYTE    Flags2;     
            BYTE    BaseHi;
        } Bytes;
        struct {
            DWORD   BaseMid : 8;
            DWORD   Type : 5;
            DWORD   Dpl : 2;
            DWORD   Pres : 1;
            DWORD   LimitHi : 4;
            DWORD   Sys : 1;
            DWORD   Reserved_0 : 1;
            DWORD   Default_Big : 1;
            DWORD   Granularity : 1;
            DWORD   BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































extern "C" {


__forceinline
CHAR
ReadAcquire8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
CHAR
ReadNoFence8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
SHORT
ReadAcquire16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
SHORT
ReadNoFence16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG
ReadAcquire (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG
ReadNoFence (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease (
       LONG volatile *Destination,
      LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence (
       LONG volatile *Destination,
      LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG64
ReadAcquire64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG64
ReadNoFence64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *Destination = Value;
    return;
}


}








__forceinline
CHAR
ReadRaw8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *(CHAR *)Source;
    return Value;
}

__forceinline
void
WriteRaw8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *(CHAR *)Destination = Value;
    return;
}

__forceinline
SHORT
ReadRaw16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *(SHORT *)Source;
    return Value;
}

__forceinline
void
WriteRaw16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *(SHORT *)Destination = Value;
    return;
}

__forceinline
LONG
ReadRaw (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *(LONG *)Source;
    return Value;
}

__forceinline
void
WriteRaw (
       LONG volatile *Destination,
      LONG Value
    )

{

    *(LONG *)Destination = Value;
    return;
}

__forceinline
LONG64
ReadRaw64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *(LONG64 *)Source;
    return Value;
}

__forceinline
void
WriteRaw64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *(LONG64 *)Destination = Value;
    return;
}





__forceinline
BYTE 
ReadUCharAcquire (
       BYTE  const volatile *Source
    )

{

    return (BYTE )ReadAcquire8((PCHAR)Source);
}

__forceinline
BYTE 
ReadUCharNoFence (
       BYTE  const volatile *Source
    )

{

    return (BYTE )ReadNoFence8((PCHAR)Source);
}

__forceinline
BYTE 
ReadUCharRaw (
       BYTE  const volatile *Source
    )

{

    return (BYTE )ReadRaw8((PCHAR)Source);
}

__forceinline
void
WriteUCharRelease (
       BYTE  volatile *Destination,
      BYTE  Value
    )

{

    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharNoFence (
       BYTE  volatile *Destination,
      BYTE  Value
    )

{

    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharRaw (
       BYTE  volatile *Destination,
      BYTE  Value
    )

{

    WriteRaw8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
WORD  
ReadUShortAcquire (
       WORD   const volatile *Source
    )

{

    return (WORD  )ReadAcquire16((PSHORT)Source);
}

__forceinline
WORD  
ReadUShortNoFence (
       WORD   const volatile *Source
    )

{

    return (WORD  )ReadNoFence16((PSHORT)Source);
}

__forceinline
WORD  
ReadUShortRaw (
       WORD   const volatile *Source
    )

{

    return (WORD  )ReadRaw16((PSHORT)Source);
}

__forceinline
void
WriteUShortRelease (
       WORD   volatile *Destination,
      WORD   Value
    )

{

    WriteRelease16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortNoFence (
       WORD   volatile *Destination,
      WORD   Value
    )

{

    WriteNoFence16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortRaw (
       WORD   volatile *Destination,
      WORD   Value
    )

{

    WriteRaw16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
DWORD
ReadULongAcquire (
       DWORD const volatile *Source
    )

{

    return (DWORD)ReadAcquire((PLONG)Source);
}

__forceinline
DWORD
ReadULongNoFence (
       DWORD const volatile *Source
    )

{

    return (DWORD)ReadNoFence((PLONG)Source);
}

__forceinline
DWORD
ReadULongRaw (
       DWORD const volatile *Source
    )

{

    return (DWORD)ReadRaw((PLONG)Source);
}

__forceinline
void
WriteULongRelease (
       DWORD volatile *Destination,
      DWORD Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongNoFence (
       DWORD volatile *Destination,
      DWORD Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongRaw (
       DWORD volatile *Destination,
      DWORD Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
DWORD64
ReadULong64Acquire (
       DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadAcquire64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64NoFence (
       DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadNoFence64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64Raw (
       DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadRaw64((PLONG64)Source);
}

__forceinline
void
WriteULong64Release (
       DWORD64 volatile *Destination,
      DWORD64 Value
    )

{

    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64NoFence (
       DWORD64 volatile *Destination,
      DWORD64 Value
    )

{

    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64Raw (
       DWORD64 volatile *Destination,
      DWORD64 Value
    )

{

    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}

















































































































__forceinline
PVOID
ReadPointerAcquire (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadAcquire64((PLONG64)Source);
}

__forceinline
PVOID
ReadPointerNoFence (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadNoFence64((PLONG64)Source);
}

__forceinline
PVOID
ReadPointerRaw (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadRaw64((PLONG64)Source);
}

__forceinline
void
WritePointerRelease (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WritePointerNoFence (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WritePointerRaw (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}



































































typedef struct _WOW64_FLOATING_SAVE_AREA {
    DWORD   ControlWord;
    DWORD   StatusWord;
    DWORD   TagWord;
    DWORD   ErrorOffset;
    DWORD   ErrorSelector;
    DWORD   DataOffset;
    DWORD   DataSelector;
    BYTE    RegisterArea[80];
    DWORD   Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA;

typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;

























#pragma warning(disable:4103)

#pragma pack(push,4)



















typedef struct _WOW64_CONTEXT {

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DWORD ContextFlags;

    
    
    
    
    

    DWORD   Dr0;
    DWORD   Dr1;
    DWORD   Dr2;
    DWORD   Dr3;
    DWORD   Dr6;
    DWORD   Dr7;

    
    
    
    

    WOW64_FLOATING_SAVE_AREA FloatSave;

    
    
    
    

    DWORD   SegGs;
    DWORD   SegFs;
    DWORD   SegEs;
    DWORD   SegDs;

    
    
    
    

    DWORD   Edi;
    DWORD   Esi;
    DWORD   Ebx;
    DWORD   Edx;
    DWORD   Ecx;
    DWORD   Eax;

    
    
    
    

    DWORD   Ebp;
    DWORD   Eip;
    DWORD   SegCs;              
    DWORD   EFlags;             
    DWORD   Esp;
    DWORD   SegSs;

    
    
    
    
    

    BYTE    ExtendedRegisters[512];

} WOW64_CONTEXT;

typedef WOW64_CONTEXT *PWOW64_CONTEXT;




























#pragma warning(disable:4103)

#pragma pack(pop)










typedef struct _WOW64_LDT_ENTRY {
    WORD    LimitLow;
    WORD    BaseLow;
    union {
        struct {
            BYTE    BaseMid;
            BYTE    Flags1;     
            BYTE    Flags2;     
            BYTE    BaseHi;
        } Bytes;
        struct {
            DWORD   BaseMid : 8;
            DWORD   Type : 5;
            DWORD   Dpl : 2;
            DWORD   Pres : 1;
            DWORD   LimitHi : 4;
            DWORD   Sys : 1;
            DWORD   Reserved_0 : 1;
            DWORD   Default_Big : 1;
            DWORD   Granularity : 1;
            DWORD   BaseHi : 8;
        } Bits;
    } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY;






















typedef struct _EXCEPTION_RECORD {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32 {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64 {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;




















typedef PVOID PACCESS_TOKEN;            
typedef PVOID PSECURITY_DESCRIPTOR;     
typedef PVOID PSID;     
typedef PVOID PCLAIMS_BLOB;     








































typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
























































typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;




































#pragma warning(disable:4103)

#pragma pack(push,4)









typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;




























#pragma warning(disable:4103)

#pragma pack(pop)










































typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE  Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;





typedef struct _SID {
   BYTE  Revision;
   BYTE  SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];

} SID, *PISID;






                                                






typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
    SidTypeLabel
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {



    PSID Sid;

    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;


typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

typedef struct _SID_AND_ATTRIBUTES_HASH {
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;










































































































































































































































































































































































typedef enum {

    WinNullSid                                  = 0,
    WinWorldSid                                 = 1,
    WinLocalSid                                 = 2,
    WinCreatorOwnerSid                          = 3,
    WinCreatorGroupSid                          = 4,
    WinCreatorOwnerServerSid                    = 5,
    WinCreatorGroupServerSid                    = 6,
    WinNtAuthoritySid                           = 7,
    WinDialupSid                                = 8,
    WinNetworkSid                               = 9,
    WinBatchSid                                 = 10,
    WinInteractiveSid                           = 11,
    WinServiceSid                               = 12,
    WinAnonymousSid                             = 13,
    WinProxySid                                 = 14,
    WinEnterpriseControllersSid                 = 15,
    WinSelfSid                                  = 16,
    WinAuthenticatedUserSid                     = 17,
    WinRestrictedCodeSid                        = 18,
    WinTerminalServerSid                        = 19,
    WinRemoteLogonIdSid                         = 20,
    WinLogonIdsSid                              = 21,
    WinLocalSystemSid                           = 22,
    WinLocalServiceSid                          = 23,
    WinNetworkServiceSid                        = 24,
    WinBuiltinDomainSid                         = 25,
    WinBuiltinAdministratorsSid                 = 26,
    WinBuiltinUsersSid                          = 27,
    WinBuiltinGuestsSid                         = 28,
    WinBuiltinPowerUsersSid                     = 29,
    WinBuiltinAccountOperatorsSid               = 30,
    WinBuiltinSystemOperatorsSid                = 31,
    WinBuiltinPrintOperatorsSid                 = 32,
    WinBuiltinBackupOperatorsSid                = 33,
    WinBuiltinReplicatorSid                     = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid             = 36,
    WinBuiltinNetworkConfigurationOperatorsSid  = 37,
    WinAccountAdministratorSid                  = 38,
    WinAccountGuestSid                          = 39,
    WinAccountKrbtgtSid                         = 40,
    WinAccountDomainAdminsSid                   = 41,
    WinAccountDomainUsersSid                    = 42,
    WinAccountDomainGuestsSid                   = 43,
    WinAccountComputersSid                      = 44,
    WinAccountControllersSid                    = 45,
    WinAccountCertAdminsSid                     = 46,
    WinAccountSchemaAdminsSid                   = 47,
    WinAccountEnterpriseAdminsSid               = 48,
    WinAccountPolicyAdminsSid                   = 49,
    WinAccountRasAndIasServersSid               = 50,
    WinNTLMAuthenticationSid                    = 51,
    WinDigestAuthenticationSid                  = 52,
    WinSChannelAuthenticationSid                = 53,
    WinThisOrganizationSid                      = 54,
    WinOtherOrganizationSid                     = 55,
    WinBuiltinIncomingForestTrustBuildersSid    = 56,
    WinBuiltinPerfMonitoringUsersSid            = 57,
    WinBuiltinPerfLoggingUsersSid               = 58,
    WinBuiltinAuthorizationAccessSid            = 59,
    WinBuiltinTerminalServerLicenseServersSid   = 60,
    WinBuiltinDCOMUsersSid                      = 61,
    WinBuiltinIUsersSid                         = 62,
    WinIUserSid                                 = 63,
    WinBuiltinCryptoOperatorsSid                = 64,
    WinUntrustedLabelSid                        = 65,
    WinLowLabelSid                              = 66,
    WinMediumLabelSid                           = 67,
    WinHighLabelSid                             = 68,
    WinSystemLabelSid                           = 69,
    WinWriteRestrictedCodeSid                   = 70,
    WinCreatorOwnerRightsSid                    = 71,
    WinCacheablePrincipalsGroupSid              = 72,
    WinNonCacheablePrincipalsGroupSid           = 73,
    WinEnterpriseReadonlyControllersSid         = 74,
    WinAccountReadonlyControllersSid            = 75,
    WinBuiltinEventLogReadersGroup              = 76,
    WinNewEnterpriseReadonlyControllersSid      = 77,
    WinBuiltinCertSvcDComAccessGroup            = 78,
    WinMediumPlusLabelSid                       = 79,
    WinLocalLogonSid                            = 80,
    WinConsoleLogonSid                          = 81,
    WinThisOrganizationCertificateSid           = 82,
    WinApplicationPackageAuthoritySid           = 83,
    WinBuiltinAnyPackageSid                     = 84,
    WinCapabilityInternetClientSid              = 85,
    WinCapabilityInternetClientServerSid        = 86,
    WinCapabilityPrivateNetworkClientServerSid  = 87,
    WinCapabilityPicturesLibrarySid             = 88,
    WinCapabilityVideosLibrarySid               = 89,
    WinCapabilityMusicLibrarySid                = 90,
    WinCapabilityDocumentsLibrarySid            = 91,
    WinCapabilitySharedUserCertificatesSid      = 92,
    WinCapabilityEnterpriseAuthenticationSid    = 93,
    WinCapabilityRemovableStorageSid            = 94,
    WinBuiltinRDSRemoteAccessServersSid         = 95,
    WinBuiltinRDSEndpointServersSid             = 96,
    WinBuiltinRDSManagementServersSid           = 97,
    WinUserModeDriversSid                       = 98,
    WinBuiltinHyperVAdminsSid                   = 99,
    WinAccountCloneableControllersSid           = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid          = 102,
    WinAuthenticationAuthorityAssertedSid       = 103,
    WinAuthenticationServiceAssertedSid         = 104,
    WinLocalAccountSid                          = 105,
    WinLocalAccountAndAdministratorSid          = 106,
    WinAccountProtectedUsersSid                 = 107,
} WELL_KNOWN_SID_TYPE;
































































































typedef struct _ACL {
    BYTE  AclRevision;
    BYTE  Sbz1;
    WORD   AclSize;
    WORD   AceCount;
    WORD   Sbz2;
} ACL;
typedef ACL *PACL;






















typedef struct _ACE_HEADER {
    BYTE  AceType;
    BYTE  AceFlags;
    WORD   AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;












































































































typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_RESOURCE_ATTRIBUTE_ACE, *PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_SCOPED_POLICY_ID_ACE, *PSYSTEM_SCOPED_POLICY_ID_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;

typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_PROCESS_TRUST_LABEL_ACE, *PSYSTEM_PROCESS_TRUST_LABEL_ACE;















typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;






typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;















typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;


























typedef WORD   SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;

























































































typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE  Revision;
    BYTE  Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   BYTE  Revision;
   BYTE  Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;

   
typedef struct _SECURITY_OBJECT_AI_PARAMS {
    DWORD Size;             
    DWORD ConstraintMask;
} SECURITY_OBJECT_AI_PARAMS, *PSECURITY_OBJECT_AI_PARAMS;



















































typedef struct _OBJECT_TYPE_LIST {
    WORD   Level;
    WORD   Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;















typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;


















































typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;
















typedef enum _ACCESS_REASON_TYPE{

    AccessReasonNone                    = 0x00000000,   

    
    
    
    
    
    AccessReasonAllowedAce                  = 0x00010000,   
    AccessReasonDeniedAce                   = 0x00020000,   

    AccessReasonAllowedParentAce            = 0x00030000,   
    AccessReasonDeniedParentAce             = 0x00040000,   

    AccessReasonNotGrantedByCape            = 0x00050000,   
    AccessReasonNotGrantedByParentCape      = 0x00060000,   

    AccessReasonNotGrantedToAppContainer    = 0x00070000,   

    AccessReasonMissingPrivilege            = 0x00100000,
    AccessReasonFromPrivilege               = 0x00200000,


    AccessReasonIntegrityLevel              = 0x00300000,

    AccessReasonOwnership                   = 0x00400000,

    AccessReasonNullDacl                    = 0x00500000,
    AccessReasonEmptyDacl                   = 0x00600000,

    AccessReasonNoSD                        = 0x00700000,
    AccessReasonNoGrant                     = 0x00800000,   

    AccessReasonTrustLabel                  = 0x00900000    
}
ACCESS_REASON_TYPE;

 












typedef DWORD ACCESS_REASON;

typedef struct _ACCESS_REASONS{
        ACCESS_REASON Data[32];
} ACCESS_REASONS, *PACCESS_REASONS;
























typedef struct _SE_SECURITY_DESCRIPTOR
{
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;

typedef struct _SE_ACCESS_REQUEST
{
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;      
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;


typedef struct _SE_ACCESS_REPLY
{
    DWORD Size;
    DWORD ResultListCount;  
    PACCESS_MASK GrantedAccess;
    PDWORD    AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET* Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;






























































typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;


































































typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_ELEVATION_TYPE {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;






typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    TokenIsAppContainer,
    TokenCapabilities,
    TokenAppContainerSid,
    TokenAppContainerNumber,
    TokenUserClaimAttributes,
    TokenDeviceClaimAttributes,
    TokenRestrictedUserClaimAttributes,
    TokenRestrictedDeviceClaimAttributes,
    TokenDeviceGroups,
    TokenRestrictedDeviceGroups,
    TokenSecurityAttributes,
    TokenIsRestricted,
    TokenProcessTrustLevel,
    MaxTokenInfoClass  
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;






typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;

typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;



    SID_AND_ATTRIBUTES Groups[1];

} TOKEN_GROUPS, *PTOKEN_GROUPS;


typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;


typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_USER_CLAIMS {
    PCLAIMS_BLOB UserClaims;
} TOKEN_USER_CLAIMS, *PTOKEN_USER_CLAIMS;

typedef struct _TOKEN_DEVICE_CLAIMS {
    PCLAIMS_BLOB DeviceClaims;
} TOKEN_DEVICE_CLAIMS, *PTOKEN_DEVICE_CLAIMS;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;

typedef struct _TOKEN_LINKED_TOKEN {
    HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;

typedef struct _TOKEN_ELEVATION {
    DWORD TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;

typedef struct _TOKEN_MANDATORY_LABEL {
    SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;








typedef struct _TOKEN_MANDATORY_POLICY {
    DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;

typedef struct _TOKEN_ACCESS_INFORMATION {
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
    DWORD AppContainerNumber;
    PSID PackageSid;
    PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    PSID TrustLevelSid;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;







typedef struct _TOKEN_AUDIT_POLICY {
    BYTE  PerUserPolicy[(((56)) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;



typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_ORIGIN {
    LUID OriginatingLogonSession ;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN ;


typedef enum _MANDATORY_LEVEL {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow,
    MandatoryLevelMedium,
    MandatoryLevelHigh,
    MandatoryLevelSystem,
    MandatoryLevelSecureProcess,
    MandatoryLevelCount
} MANDATORY_LEVEL, *PMANDATORY_LEVEL;

typedef struct _TOKEN_APPCONTAINER_INFORMATION {
    PSID TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, *PTOKEN_APPCONTAINER_INFORMATION;

typedef struct _TOKEN_SID_INFORMATION {
    PSID Sid;
} TOKEN_SID_INFORMATION, *PTOKEN_SID_INFORMATION;






























typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
    DWORD64             Version;
    PWSTR               Name;
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;








typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
    PVOID   pValue;         
    DWORD   ValueLength;    
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
    *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;



































































typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {

    
    
    
    

    PWSTR   Name; 

    
    
    

    WORD    ValueType;

    
    
    
    

    WORD    Reserved;

    
    
    

    DWORD   Flags;

    
    
    

    DWORD   ValueCount;

    
    
    

    union {
        PLONG64                                         pInt64;
        PDWORD64                                        pUint64;
        PWSTR                                           *ppString;
        PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE            pFqbn;
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE    pOctetString;
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_V1, *PCLAIM_SECURITY_ATTRIBUTE_V1;






typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {

    
    
    
    

    DWORD   Name;

    
    
    

    WORD    ValueType;

    
    
    
    

    WORD    Reserved;

    
    
    

    DWORD   Flags;

    
    
    

    DWORD   ValueCount;

    
    
    

    union {
        DWORD pInt64[1];
        DWORD pUint64[1];
        DWORD ppString[1];
        DWORD pFqbn[1];
        DWORD pOctetString[1];
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;





















typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {

    
    
    

    WORD    Version;

    
    
    

    WORD    Reserved;

    DWORD   AttributeCount;
    union {
        PCLAIM_SECURITY_ATTRIBUTE_V1    pAttributeV1;
    } Attribute;
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;








typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;






typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;





















typedef enum _SE_LEARNING_MODE_DATA_TYPE {
    SeLearningModeInvalidType = 0,
    SeLearningModeSettings,
    SeLearningModeMax
} SE_LEARNING_MODE_DATA_TYPE;



typedef struct _SECURITY_CAPABILITIES {
    PSID AppContainerSid;
    PSID_AND_ATTRIBUTES Capabilities;
    DWORD CapabilityCount;
    DWORD Reserved;
} SECURITY_CAPABILITIES, *PSECURITY_CAPABILITIES, *LPSECURITY_CAPABILITIES;































































typedef struct _JOB_SET_ARRAY {
    HANDLE JobHandle;   
    DWORD MemberLevel;  
    DWORD Flags;        
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;




typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    PEXCEPTION_ROUTINE Handler;
} EXCEPTION_REGISTRATION_RECORD;

typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;

    union {
        PVOID FiberData;
        DWORD Version;
    };



    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;




typedef struct _NT_TIB32 {
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;


    union {
        DWORD FiberData;
        DWORD Version;
    };




    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64 {
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;


    union {
        DWORD64 FiberData;
        DWORD Version;
    };





    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;








typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {  
    DWORD UmsVersion;   
        PVOID UmsContext;   
        PVOID UmsCompletionList;   
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES; 

typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;







typedef union _RATE_QUOTA_LIMIT {
    DWORD RateData;
    struct {
        DWORD RatePercent : 7;
        DWORD Reserved0   : 25;
    } ;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;               
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;             
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD  Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;

typedef struct _IO_COUNTERS {
    ULONGLONG  ReadOperationCount;
    ULONGLONG  WriteOperationCount;
    ULONGLONG  OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;




typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter,
    MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;
typedef enum _PROCESS_MITIGATION_POLICY {
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessDynamicCodePolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    ProcessReserved1Policy,
    ProcessSignaturePolicy,
    MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY;






typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableBottomUpRandomization : 1;
            DWORD EnableForceRelocateImages : 1;
            DWORD EnableHighEntropy : 1;
            DWORD DisallowStrippedImages : 1;
            DWORD ReservedFlags : 28;
        };
    };
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY;

typedef struct _PROCESS_MITIGATION_DEP_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD Enable : 1;
            DWORD DisableAtlThunkEmulation : 1;
            DWORD ReservedFlags : 30;
        };
    };
    BOOLEAN Permanent;
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY;

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD RaiseExceptionOnInvalidHandleReference : 1;
            DWORD HandleExceptionsPermanentlyEnabled : 1;
            DWORD ReservedFlags : 30;
        };
    };
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisallowWin32kSystemCalls : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisableExtensionPoints : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD ProhibitDynamicCode : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, *PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY;


typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD MicrosoftSignedOnly : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, *PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;


typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;





typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
    ToleranceLow = 1,
    ToleranceMedium,
    ToleranceHigh
} JOBOBJECT_RATE_CONTROL_TOLERANCE;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium,
    ToleranceIntervalLong
} JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    DWORD LimitFlags;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION, *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;

typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
    DWORD ControlFlags;
    union {
        DWORD CpuRate;
        DWORD Weight;
    };
} JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, *PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;




















































































































typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,  
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    JobObjectGroupInformation,
    JobObjectNotificationLimitInformation,
    JobObjectLimitViolationInformation,
    JobObjectGroupInformationEx,
    JobObjectCpuRateControlInformation,
    JobObjectCompletionFilter,
    JobObjectCompletionCounter,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information,
    JobObjectReserved3Information,
    JobObjectReserved4Information,
    JobObjectReserved5Information,
    JobObjectReserved6Information,
    JobObjectReserved7Information,
    JobObjectReserved8Information,
    JobObjectReserved9Information,
    MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;


typedef enum _FIRMWARE_TYPE {
    FirmwareTypeUnknown,
    FirmwareTypeBios,
    FirmwareTypeUefi,
    FirmwareTypeMax
} FIRMWARE_TYPE, *PFIRMWARE_TYPE;






























typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;



typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;



typedef struct _CACHE_DESCRIPTOR {
    BYTE   Level;
    BYTE   Associativity;
    WORD   LineSize;
    DWORD  Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG_PTR   ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union {
        struct {
            BYTE  Flags;
        } ProcessorCore;
        struct {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG  Reserved[2];
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

typedef struct _PROCESSOR_RELATIONSHIP {
    BYTE  Flags;
    BYTE  Reserved[21];
    WORD   GroupCount;
      GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;

typedef struct _NUMA_NODE_RELATIONSHIP {
    DWORD NodeNumber;
    BYTE  Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;

typedef struct _CACHE_RELATIONSHIP {
    BYTE  Level;
    BYTE  Associativity;
    WORD   LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE  Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;

typedef struct _PROCESSOR_GROUP_INFO {
    BYTE  MaximumProcessorCount;
    BYTE  ActiveProcessorCount;
    BYTE  Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;

typedef struct _GROUP_RELATIONSHIP {
    WORD   MaximumGroupCount;
    WORD   ActiveGroupCount;
    BYTE  Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;

  struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } ;
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;



typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
    DWORD64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;




























































































typedef struct _XSTATE_FEATURE {
    DWORD Offset;
    DWORD Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;

typedef struct _XSTATE_CONFIGURATION {
    
    DWORD64 EnabledFeatures;

    
    DWORD64 EnabledVolatileFeatures;

    
    DWORD Size;

    DWORD OptimizedSave : 1;

    
    XSTATE_FEATURE Features[(64)];

} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;


typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MEMORY_BASIC_INFORMATION32 {
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;

typedef struct __declspec(align(16)) _MEMORY_BASIC_INFORMATION64 {
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD     AllocationProtect;
    DWORD     __alignment1;
    ULONGLONG RegionSize;
    DWORD     State;
    DWORD     Protect;
    DWORD     Type;
    DWORD     __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;

























#pragma region Desktop Family           






#pragma endregion                       





















































































































































typedef struct _FILE_ID_128 {                               
    BYTE  Identifier[16];                                   
} FILE_ID_128, *PFILE_ID_128;                               





typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;






typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
























































typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD  ReparseTag;
    WORD   ReparseDataLength;
    WORD   Reserved;
    GUID   ReparseGuid;
    struct {
        BYTE   DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;































































































typedef struct _SCRUB_DATA_INPUT {

    
    
    

    DWORD Size;

    
    
    
    
    
    

    DWORD Flags;

    
    
    
    
    

    DWORD MaximumIos;

    
    
    

    DWORD Reserved[17];

    
    
    
    
    

    BYTE  ResumeContext[816];

} SCRUB_DATA_INPUT, *PSCRUB_DATA_INPUT;



typedef struct _SCRUB_PARITY_EXTENT {

    LONGLONG Offset;

    ULONGLONG Length;

} SCRUB_PARITY_EXTENT, *PSCRUB_PARITY_EXTENT;

typedef struct _SCRUB_PARITY_EXTENT_DATA {

    
    
    

    WORD   Size;

    
    
    

    WORD   Flags;

    
    
    

    WORD   NumberOfParityExtents;

    
    
    

    WORD   MaximumNumberOfParityExtents;

    
    
    

    SCRUB_PARITY_EXTENT ParityExtents[1];

} SCRUB_PARITY_EXTENT_DATA, *PSCRUB_PARITY_EXTENT_DATA;



typedef struct _SCRUB_DATA_OUTPUT {

    
    
    

    DWORD Size;

    
    
    
    
    
    
    

    DWORD Flags;

    
    
    

    DWORD Status;

    
    
    
    

    ULONGLONG ErrorFileOffset;

    
    
    
    

    ULONGLONG ErrorLength;

    
    
    

    ULONGLONG NumberOfBytesRepaired;

    
    
    

    ULONGLONG NumberOfBytesFailed;

    
    
    

    ULONGLONG InternalFileReference;



    
    
    
    
    
    

    WORD   ResumeContextLength;

    
    
    
    
    

    WORD   ParityExtentDataOffset;

    
    
    

    DWORD Reserved[5];











    
    
    
    
    
    
    
    
    
    
    
    

    BYTE  ResumeContext[816];

} SCRUB_DATA_OUTPUT, *PSCRUB_DATA_OUTPUT;














typedef enum _SharedVirtualDiskSupportType
{
    
    
    
    SharedVirtualDisksUnsupported = 0,

    
    
    
    SharedVirtualDisksSupported = 1
} SharedVirtualDiskSupportType;

typedef enum _SharedVirtualDiskHandleState
{
    
    
    
    SharedVirtualDiskHandleStateNone = 0,

    
    
    
    
    SharedVirtualDiskHandleStateFileShared = 1,

    
    
    
    
    SharedVirtualDiskHandleStateHandleShared = 3
} SharedVirtualDiskHandleState;





typedef struct _SHARED_VIRTUAL_DISK_SUPPORT {
    
    
    
    
    SharedVirtualDiskSupportType SharedVirtualDiskSupport;

    
    
    
    
    SharedVirtualDiskHandleState HandleState;
} SHARED_VIRTUAL_DISK_SUPPORT, *PSHARED_VIRTUAL_DISK_SUPPORT;








































extern "C" const GUID  GUID_MAX_POWER_SAVINGS;






extern "C" const GUID  GUID_MIN_POWER_SAVINGS;






extern "C" const GUID  GUID_TYPICAL_POWER_SAVINGS;







extern "C" const GUID  NO_SUBGROUP_GUID;







extern "C" const GUID  ALL_POWERSCHEMES_GUID;




































extern "C" const GUID  GUID_POWERSCHEME_PERSONALITY;








extern "C" const GUID  GUID_ACTIVE_POWERSCHEME;














extern "C" const GUID  GUID_IDLE_RESILIENCY_SUBGROUP;





extern "C" const GUID  GUID_IDLE_RESILIENCY_PERIOD;






extern "C" const GUID  GUID_IDLE_RESILIENCY_PLATFORM_STATE;






extern "C" const GUID  GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;












extern "C" const GUID  GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;








extern "C" const GUID  GUID_VIDEO_SUBGROUP;





extern "C" const GUID  GUID_VIDEO_POWERDOWN_TIMEOUT;





extern "C" const GUID  GUID_VIDEO_ANNOYANCE_TIMEOUT;





extern "C" const GUID  GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;





extern "C" const GUID  GUID_VIDEO_DIM_TIMEOUT;





extern "C" const GUID  GUID_VIDEO_ADAPTIVE_POWERDOWN;





extern "C" const GUID  GUID_MONITOR_POWER_ON;




extern "C" const GUID  GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;





extern "C" const GUID  GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;




extern "C" const GUID  GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;






extern "C" const GUID  GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;





extern "C" const GUID  GUID_CONSOLE_DISPLAY_STATE;







extern "C" const GUID  GUID_ALLOW_DISPLAY_REQUIRED;







extern "C" const GUID  GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;






extern "C" const GUID  GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;






extern "C" const GUID  GUID_NON_ADAPTIVE_INPUT_TIMEOUT;







extern "C" const GUID  GUID_DISK_SUBGROUP;





extern "C" const GUID  GUID_DISK_POWERDOWN_TIMEOUT;






extern "C" const GUID  GUID_DISK_IDLE_TIMEOUT;








extern "C" const GUID  GUID_DISK_BURST_IGNORE_THRESHOLD;





extern "C" const GUID  GUID_DISK_ADAPTIVE_POWERDOWN;








extern "C" const GUID  GUID_SLEEP_SUBGROUP;







extern "C" const GUID  GUID_SLEEP_IDLE_THRESHOLD;





extern "C" const GUID  GUID_STANDBY_TIMEOUT;








extern "C" const GUID  GUID_UNATTEND_SLEEP_TIMEOUT;





extern "C" const GUID  GUID_HIBERNATE_TIMEOUT;





extern "C" const GUID  GUID_HIBERNATE_FASTS4_POLICY;








extern "C" const GUID  GUID_CRITICAL_POWER_TRANSITION;





extern "C" const GUID  GUID_SYSTEM_AWAYMODE;





extern "C" const GUID  GUID_ALLOW_AWAYMODE;





extern "C" const GUID  GUID_VIDEO_FULLSCREEN_PLAYBACK;






extern "C" const GUID  GUID_AUDIO_PLAYBACK;







extern "C" const GUID  GUID_ALLOW_STANDBY_STATES;






extern "C" const GUID  GUID_ALLOW_RTC_WAKE;







extern "C" const GUID  GUID_ALLOW_SYSTEM_REQUIRED;








extern "C" const GUID  GUID_SYSTEM_BUTTON_SUBGROUP;


















extern "C" const GUID  GUID_POWERBUTTON_ACTION;





extern "C" const GUID  GUID_SLEEPBUTTON_ACTION;






extern "C" const GUID  GUID_USERINTERFACEBUTTON_ACTION;





extern "C" const GUID  GUID_LIDCLOSE_ACTION;
extern "C" const GUID  GUID_LIDOPEN_POWERSTATE;








extern "C" const GUID  GUID_BATTERY_SUBGROUP;











extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_0;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_0;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_0;

extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_1;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_1;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_1;

extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_2;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_2;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_2;

extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_3;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_3;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_3;

extern "C" const GUID  GUID_CS_BATTERY_SAVER_THRESHOLD;
extern "C" const GUID  GUID_CS_BATTERY_SAVER_ACTION;
extern "C" const GUID  GUID_CS_BATTERY_SAVER_TIMEOUT;








extern "C" const GUID  GUID_PROCESSOR_SETTINGS_SUBGROUP;





extern "C" const GUID  GUID_PROCESSOR_THROTTLE_POLICY;















extern "C" const GUID  GUID_PROCESSOR_THROTTLE_MAXIMUM;







extern "C" const GUID  GUID_PROCESSOR_THROTTLE_MINIMUM;







extern "C" const GUID  GUID_PROCESSOR_ALLOW_THROTTLING;





extern "C" const GUID  GUID_PROCESSOR_IDLESTATE_POLICY;





extern "C" const GUID  GUID_PROCESSOR_PERFSTATE_POLICY;







extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_POLICY;







extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_POLICY;








extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_TIME;








extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_TIME;







extern "C" const GUID  GUID_PROCESSOR_PERF_TIME_CHECK;







extern "C" const GUID  GUID_PROCESSOR_PERF_BOOST_POLICY;










extern "C" const GUID  GUID_PROCESSOR_PERF_BOOST_MODE;














extern "C" const GUID  GUID_PROCESSOR_IDLE_ALLOW_SCALING;






extern "C" const GUID  GUID_PROCESSOR_IDLE_DISABLE;








extern "C" const GUID  GUID_PROCESSOR_IDLE_STATE_MAXIMUM;








extern "C" const GUID  GUID_PROCESSOR_IDLE_TIME_CHECK;








extern "C" const GUID  GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;












extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_MAX_CORES;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_MIN_CORES;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PARKING_CORE_OVERRIDE;







extern "C" const GUID  GUID_PROCESSOR_PARKING_PERF_STATE;







extern "C" const GUID  GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;








extern "C" const GUID  GUID_PROCESSOR_PERF_HISTORY;







extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_HISTORY;







extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_HISTORY;







extern "C" const GUID  GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;









extern "C" const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT;






extern "C" const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;







extern "C" const GUID  GUID_PROCESSOR_DISTRIBUTE_UTILITY;







extern "C" const GUID  GUID_SYSTEM_COOLING_POLICY;









extern "C" const GUID  GUID_LOCK_CONSOLE_ON_WAKE;









extern "C" const GUID  GUID_DEVICE_IDLE_POLICY;




















extern "C" const GUID  GUID_ACDC_POWER_SOURCE;















extern "C" const GUID  GUID_LIDSWITCH_STATE_CHANGE;
















extern "C" const GUID  GUID_BATTERY_PERCENTAGE_REMAINING;






extern "C" const GUID  GUID_GLOBAL_USER_PRESENCE;










extern "C" const GUID  GUID_SESSION_DISPLAY_STATUS;









extern "C" const GUID  GUID_SESSION_USER_PRESENCE;






extern "C" const GUID  GUID_IDLE_BACKGROUND_TASK;






extern "C" const GUID  GUID_BACKGROUND_TASK_NOTIFICATION;







extern "C" const GUID  GUID_APPLAUNCH_BUTTON;










extern "C" const GUID  GUID_PCIEXPRESS_SETTINGS_SUBGROUP;





extern "C" const GUID  GUID_PCIEXPRESS_ASPM_POLICY;











extern "C" const GUID  GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;






extern "C" const GUID  GUID_INTSTEER_SUBGROUP;


extern "C" const GUID  GUID_INTSTEER_MODE;


extern "C" const GUID  GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;


extern "C" const GUID  GUID_INTSTEER_TIME_UNPARK_TRIGGER;


typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking     = 1,
    PowerSystemSleeping1   = 2,
    PowerSystemSleeping2   = 3,
    PowerSystemSleeping3   = 4,
    PowerSystemHibernate   = 5,
    PowerSystemShutdown    = 6,
    PowerSystemMaximum     = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;



typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject
} POWER_ACTION, *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn,
    PowerMonitorDim
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;









typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;

















typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;




















typedef struct CM_Power_Data_s {
    DWORD               PD_Size;
    DEVICE_POWER_STATE  PD_MostRecentPowerState;
    DWORD               PD_Capabilities;
    DWORD               PD_D1Latency;
    DWORD               PD_D2Latency;
    DWORD               PD_D3Latency;
    DEVICE_POWER_STATE  PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE  PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;





typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,                                   
    LastSleepTime,                                  
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
    SetPowerSettingValue,
    NotifyUserPowerSetting,
    PowerInformationLevelUnused0,
    SystemMonitorHiberBootPowerOff,
    SystemVideoState,
    TraceApplicationPowerMessage,
    TraceApplicationPowerMessageEnd,
    ProcessorPerfStates,
    ProcessorIdleStates,
    ProcessorCap,
    SystemWakeSource,
    SystemHiberFileInformation,
    TraceServicePowerMessage,
    ProcessorLoad,
    PowerShutdownNotification,
    MonitorCapabilities,
    SessionPowerInit,
    SessionDisplayState,
    PowerRequestCreate,
    PowerRequestAction,
    GetPowerRequestList,
    ProcessorInformationEx,
    NotifyUserModeLegacyPowerEvent,
    GroupPark,
    ProcessorIdleDomains,
    WakeTimerList,
    SystemHiberFileSize,
    ProcessorIdleStatesHv,
    ProcessorPerfStatesHv,
    ProcessorPerfCapHv,
    ProcessorSetIdle,
    LogicalProcessorIdling,
    UserPresence,
    PowerSettingNotificationName,
    GetPowerSettingValue,
    IdleResiliency,
    SessionRITState,
    SessionConnectNotification,
    SessionPowerCleanup,
    SessionLockState,
    SystemHiberbootState,
    PlatformInformation,
    PdcInvocation,
    MonitorInvocation,
    FirmwareTableInformationRegistered,
    SetShutdownSelectedTime,
    SuspendResumeInvocation,
    PlmPowerRequestCreate,
    ScreenOff,
    CsDeviceNotification,
    PlatformRole,
    LastResumePerformance,
    DisplayBurst,
    ExitLatencySamplingPercentage,
    RegisterSpmPowerSettings,
    PlatformIdleStates,
    ProcessorIdleVeto,
    PlatformIdleVeto,
    SystemBatteryStatePrecise,
    ThermalEvent,
    PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;





typedef enum {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 0xff
} POWER_USER_PRESENCE_TYPE, *PPOWER_USER_PRESENCE_TYPE;

typedef struct _POWER_USER_PRESENCE {
	POWER_USER_PRESENCE_TYPE UserPresence;
} POWER_USER_PRESENCE, *PPOWER_USER_PRESENCE;




typedef struct _POWER_SESSION_CONNECT {
    BOOLEAN Connected;  
    BOOLEAN Console;    
} POWER_SESSION_CONNECT, *PPOWER_SESSION_CONNECT;

typedef struct _POWER_SESSION_TIMEOUTS {
    DWORD InputTimeout;
    DWORD DisplayTimeout;
} POWER_SESSION_TIMEOUTS, *PPOWER_SESSION_TIMEOUTS;




typedef struct _POWER_SESSION_RIT_STATE {
    BOOLEAN Active;  
    DWORD LastInputTime; 
} POWER_SESSION_RIT_STATE, *PPOWER_SESSION_RIT_STATE;




typedef struct _POWER_SESSION_WINLOGON {
    DWORD SessionId; 
    BOOLEAN Console; 
    BOOLEAN Locked; 
} POWER_SESSION_WINLOGON, *PPOWER_SESSION_WINLOGON;




typedef struct _POWER_IDLE_RESILIENCY {
    DWORD CoalescingTimeout;
    DWORD IdleResiliencyPeriod;
} POWER_IDLE_RESILIENCY, *PPOWER_IDLE_RESILIENCY;




typedef enum {
    MonitorRequestReasonUnknown,
    MonitorRequestReasonPowerButton,
    MonitorRequestReasonRemoteConnection,
    MonitorRequestReasonScMonitorpower,
    MonitorRequestReasonUserInput,
    MonitorRequestReasonAcDcDisplayBurst,
    MonitorRequestReasonUserDisplayBurst,
    MonitorRequestReasonPoSetSystemState,
    MonitorRequestReasonSetThreadExecutionState,
    MonitorRequestReasonFullWake,
    MonitorRequestReasonSessionUnlock,
    MonitorRequestReasonScreenOffRequest,
    MonitorRequestReasonIdleTimeout,
    MonitorRequestReasonPolicyChange,
    MonitorRequestReasonSleepButton,
    MonitorRequestReasonLid,
    MonitorRequestReasonBatteryCountChange,
    MonitorRequestReasonMax
} POWER_MONITOR_REQUEST_REASON;




typedef struct _POWER_MONITOR_INVOCATION {
    BOOLEAN On;
    BOOLEAN Console;
    POWER_MONITOR_REQUEST_REASON RequestReason;
} POWER_MONITOR_INVOCATION, *PPOWER_MONITOR_INVOCATION;





typedef struct _RESUME_PERFORMANCE {
    DWORD PostTimeMs;
    ULONGLONG TotalResumeTimeMs;
    ULONGLONG ResumeCompleteTimestamp;
} RESUME_PERFORMANCE, *PRESUME_PERFORMANCE;





typedef enum {
    PoAc,
    PoDc,
    PoHot,
    PoConditionMaximum
} SYSTEM_POWER_CONDITION;

typedef struct {

    
    
    
    
    DWORD       Version;


    
    
    
    GUID        Guid;


    
    
    
    
    SYSTEM_POWER_CONDITION PowerCondition;

    
    
    
    DWORD       DataLength;

    
    
    
    BYTE    Data[1];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;



typedef struct {
    GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;






typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {

    
    
    
    
    LARGE_INTEGER       ActivationTime;

    
    
    
    DWORD               Flags;

    
    
    
    DWORD               ButtonInstanceID;


} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;





typedef enum _POWER_PLATFORM_ROLE {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer, 
    PlatformRoleSlate,             
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE, *PPOWER_PLATFORM_ROLE;



















typedef struct _POWER_PLATFORM_INFORMATION {
    BOOLEAN AoAc;
} POWER_PLATFORM_INFORMATION, *PPOWER_PLATFORM_INFORMATION;






typedef struct {
    DWORD       Granularity;
    DWORD       Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;




typedef struct {
    DWORD   Frequency;
    DWORD   Flags;
    DWORD   PercentFrequency;
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;

typedef struct {
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE  PromotePercent;
    BYTE  DemotePercent;
    BYTE  StateType;
    BYTE  Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1;            
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;          
    DWORD OldState;             
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;          
    DWORD OldState;             
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX;

typedef struct {
    DWORD Frequency;            
    DWORD Power;                
    BYTE  PercentFrequency;
    BYTE  IncreaseLevel;        
    BYTE  DecreaseLevel;        
    BYTE  Type;                 
    DWORD IncreaseTime;         
    DWORD DecreaseTime;         
    DWORD64 Control;            
    DWORD64 Status;             
    DWORD HitCount;
    DWORD Reserved1;            
    DWORD64 Reserved2;
    DWORD64 Reserved3;
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;         
    DWORD MaxPerfState;         
    DWORD MinPerfState;         
    DWORD LowestPerfState;      
    DWORD ThermalConstraint;
    BYTE  BusyAdjThreshold;
    BYTE  PolicyType;           
    BYTE  Type;
    BYTE  Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors;   
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;         
    DWORD MaxPerfState;         
    DWORD MinPerfState;         
    DWORD LowestPerfState;      
    DWORD ThermalConstraint;
    BYTE  BusyAdjThreshold;
    BYTE  PolicyType;           
    BYTE  Type;
    BYTE  Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors;     
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX;







typedef struct {
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD IdleTimeBuckets[6];
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING State[1];
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;







typedef struct {
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX;

typedef struct {
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD CancelledTransitions;
    PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD AbortCount;
    DWORD64 StartTime;
      PPM_IDLE_STATE_ACCOUNTING_EX State[1];
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX;




























































extern "C" const GUID  PPM_PERFSTATE_CHANGE_GUID;


extern "C" const GUID  PPM_PERFSTATE_DOMAIN_CHANGE_GUID;


extern "C" const GUID  PPM_IDLESTATE_CHANGE_GUID;


extern "C" const GUID  PPM_PERFSTATES_DATA_GUID;


extern "C" const GUID  PPM_IDLESTATES_DATA_GUID;


extern "C" const GUID  PPM_IDLE_ACCOUNTING_GUID;


extern "C" const GUID  PPM_IDLE_ACCOUNTING_EX_GUID;


extern "C" const GUID  PPM_THERMALCONSTRAINT_GUID;


extern "C" const GUID  PPM_PERFMON_PERFSTATE_GUID;


extern "C" const GUID  PPM_THERMAL_POLICY_CHANGE_GUID;


typedef struct {
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;

typedef struct {
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;

typedef struct {
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;

typedef struct {
    DWORD ThermalConstraint;
    DWORD64 Processors;
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;

#pragma warning(push)
#pragma warning(disable:4121)

typedef struct {
    BYTE  Mode;
    DWORD64 Processors;
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;

#pragma warning(pop)




typedef struct {
    POWER_ACTION    Action;
    DWORD           Flags;
    DWORD           EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;
































typedef struct {
    BOOLEAN                 Enable;
    BYTE                    Spare[3];
    DWORD                   BatteryLevel;
    POWER_ACTION_POLICY     PowerPolicy;
    SYSTEM_POWER_STATE      MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;








typedef struct _SYSTEM_POWER_POLICY {
    DWORD                   Revision;       

    
    POWER_ACTION_POLICY     PowerButton;
    POWER_ACTION_POLICY     SleepButton;
    POWER_ACTION_POLICY     LidClose;
    SYSTEM_POWER_STATE      LidOpenWake;
    DWORD                   Reserved;

    
    POWER_ACTION_POLICY     Idle;
    DWORD                   IdleTimeout;
    BYTE                    IdleSensitivity;

    BYTE                    DynamicThrottle;
    BYTE                    Spare2[2];

    
    SYSTEM_POWER_STATE      MinSleep;
    SYSTEM_POWER_STATE      MaxSleep;
    SYSTEM_POWER_STATE      ReducedLatencySleep;
    DWORD                   WinLogonFlags;

    DWORD                   Spare3;

    
    
    DWORD                   DozeS4Timeout;

    
    DWORD                   BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL      DischargePolicy[4];

    
    DWORD                   VideoTimeout;
    BOOLEAN                 VideoDimDisplay;
    DWORD                   VideoReserved[3];

    
    DWORD                   SpindownTimeout;

    
    BOOLEAN                 OptimizeForPower;
    BYTE                    FanThrottleTolerance;
    BYTE                    ForcedThrottle;
    BYTE                    MinThrottle;
    POWER_ACTION_POLICY     OverThrottled;

} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;










typedef struct {
    DWORD TimeCheck;
    BYTE  DemotePercent;
    BYTE  PromotePercent;
    BYTE  Spare[2];
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;

typedef struct {
    WORD   Revision;
    union {
        WORD   AsWORD  ;
        struct {
            WORD   AllowScaling : 1;
            WORD   Disabled : 1;
            WORD   Reserved : 14;
        } ;
    } Flags;

    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO Policy[0x3];
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;














typedef struct _PROCESSOR_POWER_POLICY_INFO {

    
    DWORD                   TimeCheck;                      
    DWORD                   DemoteLimit;                    
    DWORD                   PromoteLimit;                   

    
    BYTE                    DemotePercent;
    BYTE                    PromotePercent;
    BYTE                    Spare[2];

    
    DWORD                   AllowDemotion:1;
    DWORD                   AllowPromotion:1;
    DWORD                   Reserved:30;

} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;


typedef struct _PROCESSOR_POWER_POLICY {
    DWORD                       Revision;       

    
    BYTE                        DynamicThrottle;
    BYTE                        Spare[3];

    
    DWORD                       DisableCStates:1;
    DWORD                       Reserved:31;

    
    
    
    DWORD                       PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];

} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;





typedef struct {
    DWORD Revision;
    BYTE  MaxThrottle;
    BYTE  MinThrottle;
    BYTE  BusyAdjThreshold;
    union {
        BYTE  Spare;
        union {
            BYTE  AsBYTE ;
            struct {
                BYTE  NoDomainAccounting : 1;
                BYTE  IncreasePolicy: 2;
                BYTE  DecreasePolicy: 2;
                BYTE  Reserved : 3;
            } ;
        } Flags;
    } ;

    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;


typedef struct _ADMINISTRATOR_POWER_POLICY {

    
    SYSTEM_POWER_STATE      MinSleep;
    SYSTEM_POWER_STATE      MaxSleep;

    
    DWORD                   MinVideoTimeout;
    DWORD                   MaxVideoTimeout;

    
    DWORD                   MinSpindownTimeout;
    DWORD                   MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;


typedef struct {
    
    BOOLEAN             PowerButtonPresent;
    BOOLEAN             SleepButtonPresent;
    BOOLEAN             LidPresent;
    BOOLEAN             SystemS1;
    BOOLEAN             SystemS2;
    BOOLEAN             SystemS3;
    BOOLEAN             SystemS4;           
    BOOLEAN             SystemS5;           
    BOOLEAN             HiberFilePresent;
    BOOLEAN             FullWake;
    BOOLEAN             VideoDimPresent;
    BOOLEAN             ApmPresent;
    BOOLEAN             UpsPresent;

    
    BOOLEAN             ThermalControl;
    BOOLEAN             ProcessorThrottle;
    BYTE                ProcessorMinThrottle;





    BYTE                ProcessorMaxThrottle;
    BOOLEAN             FastSystemS4;
    BOOLEAN             Hiberboot;
    BOOLEAN             WakeAlarmPresent;
    BOOLEAN             AoAc;


    
    BOOLEAN             DiskSpinDown;
    BYTE                spare3[8];

    
    BOOLEAN             SystemBatteriesPresent;
    BOOLEAN             BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];

    
    SYSTEM_POWER_STATE  AcOnLineWake;
    SYSTEM_POWER_STATE  SoftLidWake;
    SYSTEM_POWER_STATE  RtcWake;
    SYSTEM_POWER_STATE  MinDeviceWakeState; 
    SYSTEM_POWER_STATE  DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

typedef struct {
    BOOLEAN             AcOnLine;
    BOOLEAN             BatteryPresent;
    BOOLEAN             Charging;
    BOOLEAN             Discharging;
    BOOLEAN             Spare1[3];

    BYTE                Tag;

    DWORD               MaxCapacity;
    DWORD               RemainingCapacity;
    DWORD               Rate;
    DWORD               EstimatedTime;

    DWORD               DefaultAlert1;
    DWORD               DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;


































#pragma warning(disable:4103)

#pragma pack(push,4)







































#pragma warning(disable:4103)

#pragma pack(push,2)



















typedef struct _IMAGE_DOS_HEADER {      
    WORD   e_magic;                     
    WORD   e_cblp;                      
    WORD   e_cp;                        
    WORD   e_crlc;                      
    WORD   e_cparhdr;                   
    WORD   e_minalloc;                  
    WORD   e_maxalloc;                  
    WORD   e_ss;                        
    WORD   e_sp;                        
    WORD   e_csum;                      
    WORD   e_ip;                        
    WORD   e_cs;                        
    WORD   e_lfarlc;                    
    WORD   e_ovno;                      
    WORD   e_res[4];                    
    WORD   e_oemid;                     
    WORD   e_oeminfo;                   
    WORD   e_res2[10];                  
    LONG   e_lfanew;                    
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {      
    WORD   ne_magic;                    
    CHAR   ne_ver;                      
    CHAR   ne_rev;                      
    WORD   ne_enttab;                   
    WORD   ne_cbenttab;                 
    LONG   ne_crc;                      
    WORD   ne_flags;                    
    WORD   ne_autodata;                 
    WORD   ne_heap;                     
    WORD   ne_stack;                    
    LONG   ne_csip;                     
    LONG   ne_sssp;                     
    WORD   ne_cseg;                     
    WORD   ne_cmod;                     
    WORD   ne_cbnrestab;                
    WORD   ne_segtab;                   
    WORD   ne_rsrctab;                  
    WORD   ne_restab;                   
    WORD   ne_modtab;                   
    WORD   ne_imptab;                   
    LONG   ne_nrestab;                  
    WORD   ne_cmovent;                  
    WORD   ne_align;                    
    WORD   ne_cres;                     
    BYTE   ne_exetyp;                   
    BYTE   ne_flagsothers;              
    WORD   ne_pretthunks;               
    WORD   ne_psegrefbytes;             
    WORD   ne_swaparea;                 
    WORD   ne_expver;                   
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {      
    WORD   e32_magic;                   
    BYTE   e32_border;                  
    BYTE   e32_worder;                  
    DWORD  e32_level;                   
    WORD   e32_cpu;                     
    WORD   e32_os;                      
    DWORD  e32_ver;                     
    DWORD  e32_mflags;                  
    DWORD  e32_mpages;                  
    DWORD  e32_startobj;                
    DWORD  e32_eip;                     
    DWORD  e32_stackobj;                
    DWORD  e32_esp;                     
    DWORD  e32_pagesize;                
    DWORD  e32_lastpagesize;            
    DWORD  e32_fixupsize;               
    DWORD  e32_fixupsum;                
    DWORD  e32_ldrsize;                 
    DWORD  e32_ldrsum;                  
    DWORD  e32_objtab;                  
    DWORD  e32_objcnt;                  
    DWORD  e32_objmap;                  
    DWORD  e32_itermap;                 
    DWORD  e32_rsrctab;                 
    DWORD  e32_rsrccnt;                 
    DWORD  e32_restab;                  
    DWORD  e32_enttab;                  
    DWORD  e32_dirtab;                  
    DWORD  e32_dircnt;                  
    DWORD  e32_fpagetab;                
    DWORD  e32_frectab;                 
    DWORD  e32_impmod;                  
    DWORD  e32_impmodcnt;               
    DWORD  e32_impproc;                 
    DWORD  e32_pagesum;                 
    DWORD  e32_datapage;                
    DWORD  e32_preload;                 
    DWORD  e32_nrestab;                 
    DWORD  e32_cbnrestab;               
    DWORD  e32_nressum;                 
    DWORD  e32_autodata;                
    DWORD  e32_debuginfo;               
    DWORD  e32_debuglen;                
    DWORD  e32_instpreload;             
    DWORD  e32_instdemand;              
    DWORD  e32_heapsize;                
    BYTE   e32_res3[12];                
    DWORD  e32_winresoff;
    DWORD  e32_winreslen;
    WORD   e32_devid;                   
    WORD   e32_ddkver;                  
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;





























#pragma warning(disable:4103)

#pragma pack(pop)














typedef struct _IMAGE_FILE_HEADER {
    WORD    Machine;
    WORD    NumberOfSections;
    DWORD   TimeDateStamp;
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
    WORD    SizeOfOptionalHeader;
    WORD    Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;






















































typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD   VirtualAddress;
    DWORD   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {
    
    
    

    WORD    Magic;
    BYTE    MajorLinkerVersion;
    BYTE    MinorLinkerVersion;
    DWORD   SizeOfCode;
    DWORD   SizeOfInitializedData;
    DWORD   SizeOfUninitializedData;
    DWORD   AddressOfEntryPoint;
    DWORD   BaseOfCode;
    DWORD   BaseOfData;

    
    
    

    DWORD   ImageBase;
    DWORD   SectionAlignment;
    DWORD   FileAlignment;
    WORD    MajorOperatingSystemVersion;
    WORD    MinorOperatingSystemVersion;
    WORD    MajorImageVersion;
    WORD    MinorImageVersion;
    WORD    MajorSubsystemVersion;
    WORD    MinorSubsystemVersion;
    DWORD   Win32VersionValue;
    DWORD   SizeOfImage;
    DWORD   SizeOfHeaders;
    DWORD   CheckSum;
    WORD    Subsystem;
    WORD    DllCharacteristics;
    DWORD   SizeOfStackReserve;
    DWORD   SizeOfStackCommit;
    DWORD   SizeOfHeapReserve;
    DWORD   SizeOfHeapCommit;
    DWORD   LoaderFlags;
    DWORD   NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD   Magic;
    BYTE   MajorLinkerVersion;
    BYTE   MinorLinkerVersion;
    DWORD  SizeOfCode;
    DWORD  SizeOfInitializedData;
    DWORD  SizeOfUninitializedData;
    DWORD  AddressOfEntryPoint;
    DWORD  BaseOfCode;
    DWORD  BaseOfData;
    DWORD  BaseOfBss;
    DWORD  GprMask;
    DWORD  CprMask[4];
    DWORD  GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD        Magic;
    BYTE        MajorLinkerVersion;
    BYTE        MinorLinkerVersion;
    DWORD       SizeOfCode;
    DWORD       SizeOfInitializedData;
    DWORD       SizeOfUninitializedData;
    DWORD       AddressOfEntryPoint;
    DWORD       BaseOfCode;
    ULONGLONG   ImageBase;
    DWORD       SectionAlignment;
    DWORD       FileAlignment;
    WORD        MajorOperatingSystemVersion;
    WORD        MinorOperatingSystemVersion;
    WORD        MajorImageVersion;
    WORD        MinorImageVersion;
    WORD        MajorSubsystemVersion;
    WORD        MinorSubsystemVersion;
    DWORD       Win32VersionValue;
    DWORD       SizeOfImage;
    DWORD       SizeOfHeaders;
    DWORD       CheckSum;
    WORD        Subsystem;
    WORD        DllCharacteristics;
    ULONGLONG   SizeOfStackReserve;
    ULONGLONG   SizeOfStackCommit;
    ULONGLONG   SizeOfHeapReserve;
    ULONGLONG   SizeOfHeapCommit;
    DWORD       LoaderFlags;
    DWORD       NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;






typedef IMAGE_OPTIONAL_HEADER64             IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER64            PIMAGE_OPTIONAL_HEADER;







typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;


typedef IMAGE_NT_HEADERS64                  IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS64                 PIMAGE_NT_HEADERS;







































































typedef struct ANON_OBJECT_HEADER {
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
} ANON_OBJECT_HEADER;

typedef struct ANON_OBJECT_HEADER_V2 {
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
    DWORD   Flags;           
    DWORD   MetaDataSize;    
    DWORD   MetaDataOffset;  
} ANON_OBJECT_HEADER_V2;

typedef struct ANON_OBJECT_HEADER_BIGOBJ {
   
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;         
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
    DWORD   Flags;           
    DWORD   MetaDataSize;    
    DWORD   MetaDataOffset;  

    
    DWORD   NumberOfSections; 
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;







typedef struct _IMAGE_SECTION_HEADER {
    BYTE    Name[8];
    union {
            DWORD   PhysicalAddress;
            DWORD   VirtualSize;
    } Misc;
    DWORD   VirtualAddress;
    DWORD   SizeOfRawData;
    DWORD   PointerToRawData;
    DWORD   PointerToRelocations;
    DWORD   PointerToLinenumbers;
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

























































































#pragma warning(disable:4103)

#pragma pack(push,2)














typedef struct _IMAGE_SYMBOL {
    union {
        BYTE    ShortName[8];
        struct {
            DWORD   Short;     
            DWORD   Long;      
        } Name;
        DWORD   LongName[2];    
    } N;
    DWORD   Value;
    SHORT   SectionNumber;
    WORD    Type;
    BYTE    StorageClass;
    BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL __unaligned *PIMAGE_SYMBOL;



typedef struct _IMAGE_SYMBOL_EX {
    union {
        BYTE     ShortName[8];
        struct {
            DWORD   Short;     
            DWORD   Long;      
        } Name;
        DWORD   LongName[2];    
    } N;
    DWORD   Value;
    LONG    SectionNumber;
    WORD    Type;
    BYTE    StorageClass;
    BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX __unaligned *PIMAGE_SYMBOL_EX;

















































































































































#pragma warning(disable:4103)

#pragma pack(push,2)









typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    BYTE  bAuxType;                  
    BYTE  bReserved;                 
    DWORD SymbolTableIndex;
    BYTE  rgbReserved[12];           
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF __unaligned *PIMAGE_AUX_SYMBOL_TOKEN_DEF;




























#pragma warning(disable:4103)

#pragma pack(pop)













typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD    TagIndex;                      
        union {
            struct {
                WORD    Linenumber;             
                WORD    Size;                   
            } LnSz;
           DWORD    TotalSize;
        } Misc;
        union {
            struct {                            
                DWORD    PointerToLinenumber;
                DWORD    PointerToNextFunction;
            } Function;
            struct {                            
                WORD     Dimension[4];
            } Array;
        } FcnAry;
        WORD    TvIndex;                        
    } Sym;
    struct {
        BYTE    Name[18];
    } File;
    struct {
        DWORD   Length;                         
        WORD    NumberOfRelocations;            
        WORD    NumberOfLinenumbers;            
        DWORD   CheckSum;                       
        SHORT   Number;                         
        BYTE    Selection;                      
	BYTE    bReserved;
	SHORT   HighNumber;                     
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct {
        DWORD crc;
        BYTE  rgbReserved[14];
    } CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL __unaligned *PIMAGE_AUX_SYMBOL;

typedef union _IMAGE_AUX_SYMBOL_EX {
    struct {
        DWORD   WeakDefaultSymIndex;                       
        DWORD   WeakSearchType;
        BYTE    rgbReserved[12];
    } Sym;
    struct {
        BYTE    Name[sizeof(IMAGE_SYMBOL_EX)];
    } File;
    struct {
        DWORD   Length;                         
        WORD    NumberOfRelocations;            
        WORD    NumberOfLinenumbers;            
        DWORD   CheckSum;                       
        SHORT   Number;                         
        BYTE    Selection;                      
        BYTE    bReserved;
        SHORT   HighNumber;                     
        BYTE    rgbReserved[2];
    } Section;
    struct{
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        BYTE  rgbReserved[2];
    };
    struct {
        DWORD crc;
        BYTE  rgbReserved[16];
    } CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX __unaligned *PIMAGE_AUX_SYMBOL_EX;

typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;






















typedef struct _IMAGE_RELOCATION {
    union {
        DWORD   VirtualAddress;
        DWORD   RelocCount;             
    } ;
    DWORD   SymbolTableIndex;
    WORD    Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION __unaligned *PIMAGE_RELOCATION;




























































































































                                                
                                                
                                                
                                                




















































































































































































































































typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD   SymbolTableIndex;               
        DWORD   VirtualAddress;                 
    } Type;
    WORD    Linenumber;                         
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER __unaligned *PIMAGE_LINENUMBER;





























#pragma warning(disable:4103)

#pragma pack(pop)














typedef struct _IMAGE_BASE_RELOCATION {
    DWORD   VirtualAddress;
    DWORD   SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION __unaligned * PIMAGE_BASE_RELOCATION;









































typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE     Name[16];                          
    BYTE     Date[12];                          
    BYTE     UserID[6];                         
    BYTE     GroupID[6];                        
    BYTE     Mode[8];                           
    BYTE     Size[10];                          
    BYTE     EndHeader[2];                      
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;











typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Name;
    DWORD   Base;
    DWORD   NumberOfFunctions;
    DWORD   NumberOfNames;
    DWORD   AddressOfFunctions;     
    DWORD   AddressOfNames;         
    DWORD   AddressOfNameOrdinals;  
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD    Hint;
    CHAR   Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

























#pragma warning(disable:4103)

#pragma pack(push,8)









typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString;  
        ULONGLONG Function;         
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;    
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;




























#pragma warning(disable:4103)

#pragma pack(pop)









typedef struct _IMAGE_THUNK_DATA32 {
    union {
        DWORD ForwarderString;      
        DWORD Function;             
        DWORD Ordinal;
        DWORD AddressOfData;        
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;












typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;         
    ULONGLONG AddressOfCallBacks;     
    DWORD SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY64;

typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD   StartAddressOfRawData;
    DWORD   EndAddressOfRawData;
    DWORD   AddressOfIndex;             
    DWORD   AddressOfCallBacks;         
    DWORD   SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;




typedef IMAGE_THUNK_DATA64              IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA64             PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY64           IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY64          PIMAGE_TLS_DIRECTORY;










typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD   Characteristics;            
        DWORD   OriginalFirstThunk;         
    } ;
    DWORD   TimeDateStamp;                  
                                            
                                            
                                            

    DWORD   ForwarderChain;                 
    DWORD   Name;
    DWORD   FirstThunk;                     
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR __unaligned *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;

typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
    union {
        DWORD AllAttributes;
        struct {
            DWORD RvaBased : 1;             
            DWORD ReservedAttributes : 31;
        };
    } Attributes;

    DWORD DllNameRVA;                       
    DWORD ModuleHandleRVA;                  
    DWORD ImportAddressTableRVA;            
    DWORD ImportNameTableRVA;               
    DWORD BoundImportAddressTableRVA;       
    DWORD UnloadInformationTableRVA;        
    DWORD TimeDateStamp;                    
                                            

} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR;

typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;



















typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    WORD    NumberOfNamedEntries;
    WORD    NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;


















typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        } ;
        DWORD   Name;
        WORD    Id;
    } ;
    union {
        DWORD   OffsetToData;
        struct {
            DWORD   OffsetToDirectory:31;
            DWORD   DataIsDirectory:1;
        } ;
    } ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;










typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD    Length;
    CHAR    NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD    Length;
    WCHAR   NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;











typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD   OffsetToData;
    DWORD   Size;
    DWORD   CodePage;
    DWORD   Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;





typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
    DWORD   Size;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   GlobalFlagsClear;
    DWORD   GlobalFlagsSet;
    DWORD   CriticalSectionDefaultTimeout;
    DWORD   DeCommitFreeBlockThreshold;
    DWORD   DeCommitTotalFreeThreshold;
    DWORD   LockPrefixTable;                
    DWORD   MaximumAllocationSize;
    DWORD   VirtualMemoryThreshold;
    DWORD   ProcessHeapFlags;
    DWORD   ProcessAffinityMask;
    WORD    CSDVersion;
    WORD    Reserved1;
    DWORD   EditList;                       
    DWORD   SecurityCookie;                 
    DWORD   SEHandlerTable;                 
    DWORD   SEHandlerCount;
    DWORD   GuardCFCheckFunctionPointer;    
    DWORD   Reserved2;
    DWORD   GuardCFFunctionTable;           
    DWORD   GuardCFFunctionCount;
    DWORD   GuardFlags;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
    DWORD      Size;
    DWORD      TimeDateStamp;
    WORD       MajorVersion;
    WORD       MinorVersion;
    DWORD      GlobalFlagsClear;
    DWORD      GlobalFlagsSet;
    DWORD      CriticalSectionDefaultTimeout;
    ULONGLONG  DeCommitFreeBlockThreshold;
    ULONGLONG  DeCommitTotalFreeThreshold;
    ULONGLONG  LockPrefixTable;             
    ULONGLONG  MaximumAllocationSize;
    ULONGLONG  VirtualMemoryThreshold;
    ULONGLONG  ProcessAffinityMask;
    DWORD      ProcessHeapFlags;
    WORD       CSDVersion;
    WORD       Reserved1;
    ULONGLONG  EditList;                    
    ULONGLONG  SecurityCookie;              
    ULONGLONG  SEHandlerTable;              
    ULONGLONG  SEHandlerCount;
    ULONGLONG  GuardCFCheckFunctionPointer; 
    ULONGLONG  Reserved2;
    ULONGLONG  GuardCFFunctionTable;        
    ULONGLONG  GuardCFFunctionCount;
    DWORD      GuardFlags;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;


typedef IMAGE_LOAD_CONFIG_DIRECTORY64     IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY64    PIMAGE_LOAD_CONFIG_DIRECTORY;























typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD Ret : 2;
            DWORD H : 1;
            DWORD Reg : 3;
            DWORD R : 1;
            DWORD L : 1;
            DWORD C : 1;
            DWORD StackAdjust : 10;
        } ;
    } ;
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    union {
        DWORD UnwindInfoAddress;
        DWORD UnwindData;
    } ;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;




















typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;







typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Type;
    DWORD   SizeOfData;
    DWORD   AddressOfRawData;
    DWORD   PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;















typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD   NumberOfSymbols;
    DWORD   LvaToFirstSymbol;
    DWORD   NumberOfLinenumbers;
    DWORD   LvaToFirstLinenumber;
    DWORD   RvaToFirstByteOfCode;
    DWORD   RvaToLastByteOfCode;
    DWORD   RvaToFirstByteOfData;
    DWORD   RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD       ulOffStart;             
    DWORD       cbProcSize;             
    DWORD       cdwLocals;              
    WORD        cdwParams;              
    WORD        cbProlog : 8;           
    WORD        cbRegs   : 3;           
    WORD        fHasSEH  : 1;           
    WORD        fUseBP   : 1;           
    WORD        reserved : 1;           
    WORD        cbFrame  : 2;           
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD       DataType;               
    DWORD       Length;                 
                                        
    BOOLEAN     Unicode;                
    BYTE        Reserved[ 3 ];
    BYTE        Data[ 1 ];              
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;








typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD   StartingAddress;
    DWORD   EndingAddress;
    DWORD   EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG   StartingAddress;
    ULONGLONG   EndingAddress;
    union {
        ULONGLONG   EndOfPrologue;
        ULONGLONG   UnwindInfoAddress;
    } ;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;





















typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD        Signature;
    WORD        Flags;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       ImageBase;
    DWORD       SizeOfImage;
    DWORD       NumberOfSections;
    DWORD       ExportedNamesSize;
    DWORD       DebugDirectorySize;
    DWORD       SectionAlignment;
    DWORD       Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;

typedef struct _NON_PAGED_DEBUG_INFO {
    WORD        Signature;
    WORD        Flags;
    DWORD       Size;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       SizeOfImage;
    ULONGLONG   ImageBase;
    
    
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;











                                                









typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;                 
                                                
    int :7;                                     
    unsigned int AmaskShift: 8;                 
    int :16;                                    
    DWORD FirstEntryRVA;                        
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;                         
    DWORD NewInst;                              
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;




























#pragma warning(disable:4103)

#pragma pack(pop)
















typedef struct IMPORT_OBJECT_HEADER {
    WORD    Sig1;                       
    WORD    Sig2;                       
    WORD    Version;
    WORD    Machine;
    DWORD   TimeDateStamp;              
    DWORD   SizeOfData;                 

    union {
        WORD    Ordinal;                
        WORD    Hint;
    } ;

    WORD    Type : 2;                   
    WORD    NameType : 3;               
    WORD    Reserved : 11;              
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,          
    IMPORT_OBJECT_NAME = 1,             
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,   
    IMPORT_OBJECT_NAME_UNDECORATE = 3,  
                                        
} IMPORT_OBJECT_NAME_TYPE;





typedef enum ReplacesCorHdrNumericDefines
{

    COMIMAGE_FLAGS_ILONLY               =0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED        =0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY           =0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED     =0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT    =0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA       =0x00010000,


    COR_VERSION_MAJOR_V2                =2,
    COR_VERSION_MAJOR                   =COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR                   =5,
    COR_DELETED_NAME_LENGTH             =8,
    COR_VTABLEGAP_NAME_LENGTH           =8,


    NATIVE_TYPE_MAX_CB                  =1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,


    IMAGE_COR_MIH_METHODRVA             =0x01,
    IMAGE_COR_MIH_EHRVA                 =0x02,
    IMAGE_COR_MIH_BASICBLOCK            =0x08,


    COR_VTABLE_32BIT                    =0x01,          
    COR_VTABLE_64BIT                    =0x02,          
    COR_VTABLE_FROM_UNMANAGED           =0x04,          
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN  =0x08,  
    COR_VTABLE_CALL_MOST_DERIVED        =0x10,          


    IMAGE_COR_EATJ_THUNK_SIZE           =32,            


    
    MAX_CLASS_NAME                      =1024,
    MAX_PACKAGE_NAME                    =1024,
} ReplacesCorHdrNumericDefines;


typedef struct IMAGE_COR20_HEADER
{
    
    DWORD                   cb;
    WORD                    MajorRuntimeVersion;
    WORD                    MinorRuntimeVersion;

    
    IMAGE_DATA_DIRECTORY    MetaData;
    DWORD                   Flags;

    
    
    union {
        DWORD               EntryPointToken;
        DWORD               EntryPointRVA;
    } ;

    
    IMAGE_DATA_DIRECTORY    Resources;
    IMAGE_DATA_DIRECTORY    StrongNameSignature;

    
    IMAGE_DATA_DIRECTORY    CodeManagerTable;
    IMAGE_DATA_DIRECTORY    VTableFixups;
    IMAGE_DATA_DIRECTORY    ExportAddressTableJumps;

    
    IMAGE_DATA_DIRECTORY    ManagedNativeHeader;

} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;







































































































































































































































































#pragma region Application Family






__declspec(dllimport)
 
WORD  
__stdcall
RtlCaptureStackBackTrace(
      DWORD FramesToSkip,
      DWORD FramesToCapture,
      PVOID * BackTrace,
      PDWORD BackTraceHash
    );





#pragma endregion

#pragma region Desktop Family






__declspec(dllimport)
void
__stdcall
RtlCaptureContext(
      PCONTEXT ContextRecord
    );





#pragma endregion



#pragma region Application Family



__declspec(dllimport)
void
__stdcall
RtlUnwind(
      PVOID TargetFrame,
      PVOID TargetIp,
      PEXCEPTION_RECORD ExceptionRecord,
      PVOID ReturnValue
    );



#pragma endregion




#pragma region Desktop Family



__declspec(dllimport)
BOOLEAN
__cdecl
RtlAddFunctionTable(
      PRUNTIME_FUNCTION FunctionTable,
      DWORD EntryCount,
      DWORD64 BaseAddress
    );


__declspec(dllimport)
BOOLEAN
__cdecl
RtlDeleteFunctionTable(
      PRUNTIME_FUNCTION FunctionTable
    );


__declspec(dllimport)
BOOLEAN
__cdecl
RtlInstallFunctionTableCallback(
      DWORD64 TableIdentifier,
      DWORD64 BaseAddress,
      DWORD Length,
      PGET_RUNTIME_FUNCTION_CALLBACK Callback,
      PVOID Context,
      PCWSTR OutOfProcessCallbackDll
    );







__declspec(dllimport)
DWORD   
__stdcall
RtlAddGrowableFunctionTable(
      PVOID * DynamicTable,
      PRUNTIME_FUNCTION FunctionTable,
      DWORD EntryCount,
      DWORD MaximumEntryCount,
      ULONG_PTR RangeBase,
      ULONG_PTR RangeEnd
    );


__declspec(dllimport)
void
__stdcall
RtlGrowFunctionTable(
      PVOID DynamicTable,
      DWORD NewEntryCount
    );


__declspec(dllimport)
void
__stdcall
RtlDeleteGrowableFunctionTable(
      PVOID DynamicTable
    );







#pragma endregion

#pragma region Application Family



__declspec(dllimport)
PRUNTIME_FUNCTION
__stdcall
RtlLookupFunctionEntry(
      DWORD64 ControlPc,
      PDWORD64 ImageBase,
      PUNWIND_HISTORY_TABLE HistoryTable
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
void
__cdecl
RtlRestoreContext(
      PCONTEXT ContextRecord,
      struct _EXCEPTION_RECORD * ExceptionRecord
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
void
__stdcall
RtlUnwindEx(
      PVOID TargetFrame,
      PVOID TargetIp,
      PEXCEPTION_RECORD ExceptionRecord,
      PVOID ReturnValue,
      PCONTEXT ContextRecord,
      PUNWIND_HISTORY_TABLE HistoryTable
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
PEXCEPTION_ROUTINE
__stdcall
RtlVirtualUnwind(
      DWORD HandlerType,
      DWORD64 ImageBase,
      DWORD64 ControlPc,
      PRUNTIME_FUNCTION FunctionEntry,
      PCONTEXT ContextRecord,
      PVOID * HandlerData,
      PDWORD64 EstablisherFrame,
      PKNONVOLATILE_CONTEXT_POINTERS ContextPointers
    );



#pragma endregion

































































































































































































































































































#pragma region Application Family






__declspec(dllimport)
PVOID
__stdcall
RtlPcToFileHeader(
      PVOID PcValue,
      PVOID * BaseOfImage
    );





#pragma endregion


#pragma region Desktop Family








 
__declspec(dllimport)
SIZE_T
__stdcall
RtlCompareMemory(
      const void * Source1,
      const void * Source2,
      SIZE_T Length
    );







#pragma endregion



























#pragma warning(push)
#pragma warning(disable:4324)   

typedef struct __declspec(align(16)) _SLIST_ENTRY {
    struct _SLIST_ENTRY *Next;
} SLIST_ENTRY, *PSLIST_ENTRY;

#pragma warning(pop)









typedef union __declspec(align(16)) _SLIST_HEADER {
    struct {  
        ULONGLONG Alignment;
        ULONGLONG Region;
    } ;
    struct {  
        ULONGLONG Depth:16;
        ULONGLONG Sequence:48;
        ULONGLONG Reserved:4;
        ULONGLONG NextEntry:60; 
    } HeaderX64;
} SLIST_HEADER, *PSLIST_HEADER;




























#pragma region Desktop Family


__declspec(dllimport)
void
__stdcall
RtlInitializeSListHead (
      PSLIST_HEADER ListHead
    );

 
__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlFirstEntrySList (
      const SLIST_HEADER *ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPopEntrySList (
      PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushEntrySList (
      PSLIST_HEADER ListHead,
        PSLIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushListSListEx (
      PSLIST_HEADER ListHead,
        PSLIST_ENTRY List,
      PSLIST_ENTRY ListEnd,
      DWORD Count
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedFlushSList (
      PSLIST_HEADER ListHead
    );

__declspec(dllimport)
WORD  
__stdcall
RtlQueryDepthSList (
      PSLIST_HEADER ListHead
    );


#pragma endregion


























typedef union _RTL_RUN_ONCE {       
    PVOID Ptr;                      
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;     



typedef struct _RTL_BARRIER {                       
            DWORD Reserved1;                        
            DWORD Reserved2;                        
            ULONG_PTR Reserved3[2];                 
            DWORD Reserved4;                        
            DWORD Reserved5;                        
} RTL_BARRIER, *PRTL_BARRIER;                       






































__declspec(noreturn)
void
__fastfail(
      unsigned int Code
    );

#pragma intrinsic(__fastfail)

















#pragma region Desktop Family


__forceinline
DWORD
HEAP_MAKE_TAG_FLAGS (
      DWORD TagBase,
      DWORD Tag
    )

{
    return ((DWORD)((TagBase) + ((Tag) << 18)));
}


#pragma endregion


































































__forceinline
PVOID
RtlSecureZeroMemory(
      PVOID ptr,
      SIZE_T cnt
    )
{
    volatile char *vptr = (volatile char *)ptr;



    __stosb((PBYTE )((DWORD64)vptr), 0, cnt);





















    return ptr;
}






















typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD   Length;
    WORD   Flags;
    BYTE  Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;





typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;


typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
    WORD   wServicePackMajor;
    WORD   wServicePackMinor;
    WORD   wSuiteMask;
    BYTE  wProductType;
    BYTE  wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
    WORD   wServicePackMajor;
    WORD   wServicePackMinor;
    WORD   wSuiteMask;
    BYTE  wProductType;
    BYTE  wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;





typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;














































#pragma region Desktop Family


















__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
      ULONGLONG ConditionMask,
      DWORD TypeMask,
      BYTE  Condition
    );






#pragma endregion



#pragma region Desktop Family






__declspec(dllimport)
BOOLEAN
__stdcall
RtlGetProductInfo(
       DWORD  OSMajorVersion,
       DWORD  OSMinorVersion,
       DWORD  SpMajorVersion,
       DWORD  SpMinorVersion,
      PDWORD ReturnedProductType
    );






#pragma endregion



typedef enum _RTL_UMS_THREAD_INFO_CLASS {
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext,
    UmsThreadPriority,              
    UmsThreadAffinity,              
    UmsThreadTeb,
    UmsThreadIsSuspended,
    UmsThreadIsTerminated,
    UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON {
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked,
    UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;

typedef
 
void
__stdcall
RTL_UMS_SCHEDULER_ENTRY_POINT(
      RTL_UMS_SCHEDULER_REASON Reason,
      ULONG_PTR ActivationPayload,
      PVOID SchedulerParam
    );

typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;




















































#pragma region Desktop Family








__declspec(dllimport)
DWORD
__stdcall
RtlCrc32(
      const void *Buffer,
      size_t Size,
      DWORD InitialCrc
    );

__declspec(dllimport)
ULONGLONG
__stdcall
RtlCrc64(
      const void *Buffer,
      size_t Size,
      ULONGLONG InitialCrc
    );




#pragma endregion






typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD   Type;
    WORD   CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD   CreatorBackTraceIndexHigh;
    WORD   SpareWORD  ;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;




















#pragma pack(push, 8)

typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;

    
    
    
    

    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;        
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;        
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

#pragma pack(pop)

typedef struct _RTL_SRWLOCK {                            
        PVOID Ptr;                                       
} RTL_SRWLOCK, *PRTL_SRWLOCK;                            

typedef struct _RTL_CONDITION_VARIABLE {                    
        PVOID Ptr;                                       
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;      


typedef
void
(__stdcall *PAPCFUNC)(
      ULONG_PTR Parameter
    );
typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef enum _HEAP_INFORMATION_CLASS {

    HeapCompatibilityInformation = 0,
    HeapEnableTerminationOnCorruption = 1










} HEAP_INFORMATION_CLASS;
























typedef void (__stdcall * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );   
typedef void (__stdcall * WORKERCALLBACKFUNC) (PVOID );                 
typedef void (__stdcall * APC_CALLBACK_FUNCTION) (DWORD   , PVOID, PVOID); 
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK; 
typedef
void
(__stdcall *PFLS_CALLBACK_FUNCTION) (
     PVOID lpFlsData
    );

typedef
BOOLEAN
(__stdcall *PSECURE_MEMORY_CACHE_CALLBACK) (
      PVOID Addr,
      SIZE_T Range
    );




typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation                       = 1,
    ActivationContextDetailedInformation                    = 2,
    AssemblyDetailedInformationInActivationContext          = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext  = 4,
    RunlevelInformationInActivationContext                  = 5,
    CompatibilityInformationInActivationContext             = 6,
    ActivationContextManifestResourceName                   = 7,
    MaxActivationContextInfoClass,

    
    
    
    AssemblyDetailedInformationInActivationContxt           = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt   = 4
} ACTIVATION_CONTEXT_INFO_CLASS;




typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX * PCACTIVATION_CONTEXT_QUERY_INDEX;







typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;

    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;










typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;      
    DWORD ulManifestPathType;                   
    DWORD ulManifestPathLength;                 
    LARGE_INTEGER liManifestLastWriteTime;      
    DWORD ulPolicyPathType;                     
    DWORD ulPolicyPathLength;                   
    LARGE_INTEGER liPolicyLastWriteTime;        
    DWORD ulMetadataSatelliteRosterIndex;

    DWORD ulManifestVersionMajor;               
    DWORD ulManifestVersionMinor;               
    DWORD ulPolicyVersionMajor;                 
    DWORD ulPolicyVersionMinor;                 
    DWORD ulAssemblyDirectoryNameLength;        

    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;

    DWORD  ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;

typedef enum
{
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
    ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;

typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL  RunLevel;
    DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, * PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION * PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ;

typedef enum
{
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;

typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;

#pragma warning(push)
#pragma warning(disable:4200)

typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
    DWORD ElementCount;
    COMPATIBILITY_CONTEXT_ELEMENT Elements[];
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, * PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

#pragma warning(pop)

typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION * PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;




typedef struct _SUPPORTED_OS_INFO {
    WORD   OsCount;
    WORD   MitigationExist;
    WORD   OsList[(4)];
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO;

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;




typedef struct _HARDWARE_COUNTER_DATA {
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA;



typedef struct _PERFORMANCE_DATA {
    WORD   Size;
    BYTE  Version;
    BYTE  HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA HwCounters[16];
} PERFORMANCE_DATA, *PPERFORMANCE_DATA;














































typedef struct _EVENTLOGRECORD {
    DWORD  Length;        
    DWORD  Reserved;      
    DWORD  RecordNumber;  
    DWORD  TimeGenerated; 
    DWORD  TimeWritten;   
    DWORD  EventID;
    WORD   EventType;
    WORD   NumStrings;
    WORD   EventCategory;
    WORD   ReservedFlags; 
    DWORD  ClosingRecordNumber; 
    DWORD  StringOffset;  
    DWORD  UserSidLength;
    DWORD  UserSidOffset;
    DWORD  DataLength;
    DWORD  DataOffset;    
    
    
    
    
    
    
    
    
    
    
    
} EVENTLOGRECORD, *PEVENTLOGRECORD;






#pragma warning(push)

#pragma warning(disable : 4200) 

struct _EVENTSFORLOGFILE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

struct _PACKEDEVENTINFO;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO;



struct _EVENTSFORLOGFILE
{
    DWORD           ulSize;
    WCHAR           szLogicalLogFile[256];        
    DWORD           ulNumRecords;
    EVENTLOGRECORD  pEventLogRecords[];
};

struct _PACKEDEVENTINFO
{
    DWORD               ulSize;  
    DWORD               ulNumEventsForLogFile; 
    DWORD               ulOffsets[];           
};




#pragma warning(pop)
























































                                                    


                                                    


                                                    


                                                    
                                                    






























































                                                      


















                                            






























































typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType               = 0x00000001,
    FileSystemType           = 0x00000002,
    Win32ServiceOwnProcess   = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType              = 0x00000004,
    RecognizerType           = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad    = 0x00000000,
    SystemLoad  = 0x00000001,
    AutoLoad    = 0x00000002,
    DemandLoad  = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError   = 0x00000000,
    NormalError   = 0x00000001,
    SevereError   = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;

































































typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;












typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;










typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;









typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
















typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;























































































typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;









typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;











typedef struct _TAPE_WMI_OPERATIONS {
   DWORD Method;
   DWORD DataBufferSize;
   PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;




typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
   TapeDriveProblemNone, TapeDriveReadWriteWarning,
   TapeDriveReadWriteError, TapeDriveReadWarning,
   TapeDriveWriteWarning, TapeDriveReadError,
   TapeDriveWriteError, TapeDriveHardwareError,
   TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
   TapeDriveTimetoClean, TapeDriveCleanDriveNow,
   TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;







extern "C" {


























extern "C" {



typedef GUID UOW, *PUOW;
typedef GUID CRM_PROTOCOL_ID, *PCRM_PROTOCOL_ID;

















































typedef ULONG NOTIFICATION_MASK;






















































typedef struct _TRANSACTION_NOTIFICATION {
    PVOID         TransactionKey;
    ULONG         TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG         ArgumentLength;
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID   EnlistmentId;
    UOW    UOW;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;



typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

typedef ULONG SAVEPOINT_ID, *PSAVEPOINT_ID;

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID  UOW;
    GUID  TmIdentity;
    ULONG BufferLength;
    
} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID  UOW;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;







typedef struct _KCRM_MARSHAL_HEADER {
    ULONG              VersionMajor;
    ULONG              VersionMinor;
    ULONG              NumProtocols;
    ULONG              Unused;        
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;

typedef struct _KCRM_TRANSACTION_BLOB {
    UOW                UOW;
    GUID               TmIdentity;
    ULONG              IsolationLevel;
    ULONG              IsolationFlags;
    ULONG              Timeout;
    WCHAR              Description[64];
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;

typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID    ProtocolId;
      ULONG StaticInfoLength;
    ULONG              TransactionIdInfoLength; 
    ULONG              Unused1;        
    ULONG              Unused2;        
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;


}












































































































































































typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted,
    TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;


typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt,
    TransactionStateCommittedNotify,
} TRANSACTION_STATE;


typedef struct _TRANSACTION_BASIC_INFORMATION {
    GUID    TransactionId;
    DWORD   State;
    DWORD   Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    GUID    TmIdentity;
    LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    GUID  LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    DWORD LogPathLength;
      WCHAR LogPath[1]; 

} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONGLONG  LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;



typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
    GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION;



typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    DWORD              IsolationLevel;
    DWORD              IsolationFlags;
    LARGE_INTEGER      Timeout;
    DWORD              Outcome;
    DWORD              DescriptionLength;
    WCHAR              Description[1];            

} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;



typedef struct _TRANSACTION_BIND_INFORMATION {
    HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;

typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    GUID   EnlistmentId;
    GUID   ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    DWORD                       NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1]; 
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;


typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    GUID    ResourceManagerId;
    DWORD   DescriptionLength;
    WCHAR   Description[1];            
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    HANDLE    IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;




typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation

    ,


    TransactionBindInformation, 
    TransactionDTCPrivateInformation 
    ,

} TRANSACTION_INFORMATION_CLASS;


typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation,
    TransactionManagerLogInformation,
    TransactionManagerLogPathInformation,
    TransactionManagerRecoveryInformation = 4

    ,



    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5



} TRANSACTIONMANAGER_INFORMATION_CLASS;



typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;


typedef struct _ENLISTMENT_BASIC_INFORMATION {
    GUID    EnlistmentId;
    GUID    TransactionId;
    GUID    ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;

typedef struct _ENLISTMENT_CRM_INFORMATION {
    GUID   CrmTransactionManagerId;
    GUID   CrmResourceManagerId;
    GUID   CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;



typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;

typedef struct _TRANSACTION_LIST_ENTRY {
    UOW    UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;

typedef struct _TRANSACTION_LIST_INFORMATION {
    DWORD   NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1]; 
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;






typedef enum _KTMOBJECT_TYPE {

    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID

} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;









typedef struct _KTMOBJECT_CURSOR {

    
    
    

    GUID    LastQuery;

    
    
    

    DWORD   ObjectIdCount;

    
    
    

    GUID    ObjectIds[1];

} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;




}



typedef DWORD TP_VERSION, *PTP_VERSION; 

typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;

typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context
    );

typedef struct _TP_POOL TP_POOL, *PTP_POOL; 

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;

typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
}TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP; 

typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(
      PVOID ObjectContext,
      PVOID CleanupContext
    );








typedef struct _TP_CALLBACK_ENVIRON_V3 {
    TP_VERSION                         Version;
    PTP_POOL                           Pool;
    PTP_CLEANUP_GROUP                  CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK  CleanupGroupCancelCallback;
    PVOID                              RaceDll;
    struct _ACTIVATION_CONTEXT        *ActivationContext;
    PTP_SIMPLE_CALLBACK                FinalizationCallback;
    union {
        DWORD                          Flags;
        struct {
            DWORD                      LongFunction :  1;
            DWORD                      Persistent   :  1;
            DWORD                      Private      : 30;
        } s;
    } u;
    TP_CALLBACK_PRIORITY               CallbackPriority;
    DWORD                              Size;
} TP_CALLBACK_ENVIRON_V3;

typedef TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;



























__forceinline
void
TpInitializeCallbackEnviron(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{



    CallbackEnviron->Version = 3;







    CallbackEnviron->Pool = 0;
    CallbackEnviron->CleanupGroup = 0;
    CallbackEnviron->CleanupGroupCancelCallback = 0;
    CallbackEnviron->RaceDll = 0;
    CallbackEnviron->ActivationContext = 0;
    CallbackEnviron->FinalizationCallback = 0;
    CallbackEnviron->u.Flags = 0;



    CallbackEnviron->CallbackPriority = TP_CALLBACK_PRIORITY_NORMAL;
    CallbackEnviron->Size = sizeof(TP_CALLBACK_ENVIRON);



}

__forceinline
void
TpSetCallbackThreadpool(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         PTP_POOL             Pool
    )
{
    CallbackEnviron->Pool = Pool;
}

__forceinline
void
TpSetCallbackCleanupGroup(
       PTP_CALLBACK_ENVIRON              CallbackEnviron,
          PTP_CLEANUP_GROUP                 CleanupGroup,
      PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback
    )
{
    CallbackEnviron->CleanupGroup = CleanupGroup;
    CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
}

__forceinline
void
TpSetCallbackActivationContext(
       PTP_CALLBACK_ENVIRON CallbackEnviron,
      struct _ACTIVATION_CONTEXT *ActivationContext
    )
{
    CallbackEnviron->ActivationContext = ActivationContext;
}

__forceinline
void
TpSetCallbackNoActivationContext(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->ActivationContext = (struct _ACTIVATION_CONTEXT *)(LONG_PTR) -1; 
}

__forceinline
void
TpSetCallbackLongFunction(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.LongFunction = 1;
}

__forceinline
void
TpSetCallbackRaceWithDll(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         PVOID                DllHandle
    )
{
    CallbackEnviron->RaceDll = DllHandle;
}

__forceinline
void
TpSetCallbackFinalizationCallback(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         PTP_SIMPLE_CALLBACK  FinalizationCallback
    )
{
    CallbackEnviron->FinalizationCallback = FinalizationCallback;
}



__forceinline
void
TpSetCallbackPriority(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         TP_CALLBACK_PRIORITY Priority
    )
{
    CallbackEnviron->CallbackPriority = Priority;
}



__forceinline
void
TpSetCallbackPersistent(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.Persistent = 1;
}


__forceinline
void
TpDestroyCallbackEnviron(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    
    
    
    
    

    (CallbackEnviron);
}




typedef struct _TP_WORK TP_WORK, *PTP_WORK;

typedef void (__stdcall *PTP_WORK_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
          PTP_WORK              Work
    );

typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;

typedef void (__stdcall *PTP_TIMER_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
          PTP_TIMER             Timer
    );

typedef DWORD    TP_WAIT_RESULT;

typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;

typedef void (__stdcall *PTP_WAIT_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
          PTP_WAIT              Wait,
             TP_WAIT_RESULT        WaitResult
    );

typedef struct _TP_IO TP_IO, *PTP_IO;



__forceinline
struct _TEB *
NtCurrentTeb (
    void
    )

{
    return (struct _TEB *)__readgsqword(((LONG)(LONG_PTR)&(((NT_TIB *)0)->Self)));
}

__forceinline
PVOID
GetCurrentFiber (
    void
    )

{

    return (PVOID)__readgsqword(((LONG)(LONG_PTR)&(((NT_TIB *)0)->FiberData)));
}

__forceinline
PVOID
GetFiberData (
    void
    )

{

    return *(PVOID *)GetCurrentFiber();
}
































































}



#pragma warning(pop)












typedef UINT_PTR            WPARAM;
typedef LONG_PTR            LPARAM;
typedef LONG_PTR            LRESULT;




















typedef HANDLE          *SPHANDLE;
typedef HANDLE           *LPHANDLE;
typedef HANDLE              HGLOBAL;
typedef HANDLE              HLOCAL;
typedef HANDLE              GLOBALHANDLE;
typedef HANDLE              LOCALHANDLE;



typedef INT_PTR ( __stdcall *FARPROC)();
typedef INT_PTR ( __stdcall *NEARPROC)();
typedef INT_PTR (__stdcall *PROC)();
















typedef WORD                ATOM;   

struct HKEY__{int unused;}; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;
struct HMETAFILE__{int unused;}; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__{int unused;}; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;      
struct HRGN__{int unused;}; typedef struct HRGN__ *HRGN;
struct HRSRC__{int unused;}; typedef struct HRSRC__ *HRSRC;
struct HSPRITE__{int unused;}; typedef struct HSPRITE__ *HSPRITE;
struct HLSURF__{int unused;}; typedef struct HLSURF__ *HLSURF;
struct HSTR__{int unused;}; typedef struct HSTR__ *HSTR;
struct HTASK__{int unused;}; typedef struct HTASK__ *HTASK;
struct HWINSTA__{int unused;}; typedef struct HWINSTA__ *HWINSTA;
struct HKL__{int unused;}; typedef struct HKL__ *HKL;


typedef int HFILE;








typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;



}



#pragma endregion















#pragma region Application Family


struct HWND__{int unused;}; typedef struct HWND__ *HWND;
struct HHOOK__{int unused;}; typedef struct HHOOK__ *HHOOK;


#pragma endregion














#pragma region Application Family




typedef void * HGDIOBJ;






struct HACCEL__{int unused;}; typedef struct HACCEL__ *HACCEL;


struct HBITMAP__{int unused;}; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__{int unused;}; typedef struct HBRUSH__ *HBRUSH;


struct HCOLORSPACE__{int unused;}; typedef struct HCOLORSPACE__ *HCOLORSPACE;


struct HDC__{int unused;}; typedef struct HDC__ *HDC;

struct HGLRC__{int unused;}; typedef struct HGLRC__ *HGLRC;          
struct HDESK__{int unused;}; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__{int unused;}; typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__{int unused;}; typedef struct HFONT__ *HFONT;

struct HICON__{int unused;}; typedef struct HICON__ *HICON;

struct HMENU__{int unused;}; typedef struct HMENU__ *HMENU;


struct HPALETTE__{int unused;}; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__{int unused;}; typedef struct HPEN__ *HPEN;



struct HWINEVENTHOOK__{int unused;}; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;



#pragma endregion




#pragma region Application Family


struct HMONITOR__{int unused;}; typedef struct HMONITOR__ *HMONITOR;


#pragma endregion



#pragma region Desktop Family


struct HUMPD__{int unused;}; typedef struct HUMPD__ *HUMPD;


#pragma endregion



#pragma region Application Family



typedef HICON HCURSOR;      




typedef DWORD   COLORREF;


#pragma endregion

#pragma region Desktop Family


typedef DWORD   *LPCOLORREF;




#pragma endregion

#pragma region Application Family


typedef struct tagRECT
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECT, *PRECT,  *NPRECT,  *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL       
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG  x;
    LONG  y;
} POINT, *PPOINT,  *NPPOINT,  *LPPOINT;

typedef struct _POINTL      
{
    LONG  x;
    LONG  y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG        cx;
    LONG        cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE               SIZEL;
typedef SIZE               *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT   x;
    SHORT   y;




} POINTS, *PPOINTS, *LPPOINTS;


#pragma endregion

































}





















#pragma once


#pragma warning(push)

#pragma warning(disable:4001) 
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 














































































































#pragma once




#pragma warning(disable:4514)

#pragma warning(disable:4103)


#pragma warning(push)

#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)






extern "C" {















typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union {
        struct {
            DWORD Offset;
            DWORD OffsetHigh;
        } ;
        PVOID Pointer;
    } ;

    HANDLE  hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;


















typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
      CHAR   cFileName[ 260 ];
      CHAR   cAlternateFileName[ 14 ];





} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
      WCHAR  cFileName[ 260 ];
      WCHAR  cAlternateFileName[ 14 ];





} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;





typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;




typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;




typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;


typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;


typedef enum _FILE_INFO_BY_HANDLE_CLASS {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    FileFullDirectoryInfo,
    FileFullDirectoryRestartInfo,

    FileStorageInfo, 
    FileAlignmentInfo,    
    FileIdInfo,
    FileIdExtdDirectoryInfo,
    FileIdExtdDirectoryRestartInfo,

    MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS;


typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
         DWORD dwErrorCode,
         DWORD dwNumberOfBytesTransfered,
      LPOVERLAPPED lpOverlapped
    );




typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } ;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;








typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
        struct {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR *ReasonStrings;

        } Detailed;

        LPWSTR SimpleReasonString;
    } Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;














typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;







typedef PCONTEXT LPCONTEXT;


























































}






#pragma warning(pop)

















 











#pragma once
























extern "C" {





#pragma region Desktop Family





__declspec(dllimport)
 
LPCH
__stdcall
GetEnvironmentStrings(
    void
    );


__declspec(dllimport)
 
LPWCH
__stdcall
GetEnvironmentStringsW(
    void
    );








__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsW(
         LPWCH NewEnvironment
    );





__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsA(
         LPCH penv
    );

__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsW(
         LPWCH penv
    );







__declspec(dllimport)
HANDLE
__stdcall
GetStdHandle(
      DWORD nStdHandle
    );


__declspec(dllimport)
BOOL
__stdcall
SetStdHandle(
      DWORD nStdHandle,
      HANDLE hHandle
    );





__declspec(dllimport)
BOOL
__stdcall
SetStdHandleEx(
      DWORD nStdHandle,
      HANDLE hHandle,
      PHANDLE phPrevValue
    );







#pragma endregion

#pragma region Application Family





__declspec(dllimport)
LPSTR
__stdcall
GetCommandLineA(
    void
    );

__declspec(dllimport)
LPWSTR
__stdcall
GetCommandLineW(
    void
    );










#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
 
DWORD
__stdcall
GetEnvironmentVariableA(
      LPCSTR lpName,
      LPSTR lpBuffer,
      DWORD nSize
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetEnvironmentVariableW(
      LPCWSTR lpName,
      LPWSTR lpBuffer,
      DWORD nSize
    );







__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableA(
      LPCSTR lpName,
      LPCSTR lpValue
    );

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableW(
      LPCWSTR lpName,
      LPCWSTR lpValue
    );







__declspec(dllimport)
 
DWORD
__stdcall
ExpandEnvironmentStringsA(
      LPCSTR lpSrc,
      LPSTR lpDst,
      DWORD nSize
    );

__declspec(dllimport)
 
DWORD
__stdcall
ExpandEnvironmentStringsW(
      LPCWSTR lpSrc,
      LPWSTR lpDst,
      DWORD nSize
    );







__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryA(
      LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryW(
      LPCWSTR lpPathName
    );







__declspec(dllimport)
 
DWORD
__stdcall
GetCurrentDirectoryA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetCurrentDirectoryW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );







__declspec(dllimport)
DWORD
__stdcall
SearchPathW(
      LPCWSTR lpPath,
      LPCWSTR lpFileName,
      LPCWSTR lpExtension,
      DWORD nBufferLength,
      LPWSTR lpBuffer,
      LPWSTR * lpFilePart
    );















__declspec(dllimport)
DWORD
__stdcall
SearchPathA(
      LPCSTR lpPath,
      LPCSTR lpFileName,
      LPCSTR lpExtension,
      DWORD nBufferLength,
      LPSTR lpBuffer,
      LPSTR * lpFilePart
    );





__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathA(
      LPCSTR ExeName
    );

__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathW(
      LPCWSTR ExeName
    );














#pragma endregion





}







 
 












#pragma once

























extern "C" {


#pragma region Application Family

















#pragma endregion







#pragma region Desktop Family



__declspec(dllimport)
LONG
__stdcall
CompareFileTime(
      const FILETIME * lpFileTime1,
      const FILETIME * lpFileTime2
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryA(
      LPCSTR lpPathName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryW(
      LPCWSTR lpPathName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );








#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
HANDLE
__stdcall
CreateFileA(
      LPCSTR lpFileName,
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD dwCreationDisposition,
      DWORD dwFlagsAndAttributes,
      HANDLE hTemplateFile
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateFileW(
      LPCWSTR lpFileName,
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD dwCreationDisposition,
      DWORD dwFlagsAndAttributes,
      HANDLE hTemplateFile
    );







__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceW(
      DWORD dwFlags,
      LPCWSTR lpDeviceName,
      LPCWSTR lpTargetPath
    );







#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
DeleteFileA(
      LPCSTR lpFileName
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteFileW(
      LPCWSTR lpFileName
    );








#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointW(
      LPCWSTR lpszVolumeMountPoint
    );






__declspec(dllimport)
BOOL
__stdcall
FileTimeToLocalFileTime(
      const FILETIME * lpFileTime,
      LPFILETIME lpLocalFileTime
    );



#pragma endregion

#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
FindClose(
      HANDLE hFindFile
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
FindCloseChangeNotification(
      HANDLE hChangeHandle
    );


__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationA(
      LPCSTR lpPathName,
      BOOL bWatchSubtree,
      DWORD dwNotifyFilter
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationW(
      LPCWSTR lpPathName,
      BOOL bWatchSubtree,
      DWORD dwNotifyFilter
    );







__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileA(
      LPCSTR lpFileName,
      LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileW(
      LPCWSTR lpFileName,
      LPWIN32_FIND_DATAW lpFindFileData
    );








#pragma endregion

#pragma region Application Family






__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExA(
      LPCSTR lpFileName,
      FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
      FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
      DWORD dwAdditionalFlags
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExW(
      LPCWSTR lpFileName,
      FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
      FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
      DWORD dwAdditionalFlags
    );










#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeW(
      LPWSTR lpszVolumeName,
      DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextChangeNotification(
      HANDLE hChangeHandle
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
FindNextFileA(
      HANDLE hFindFile,
      LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
BOOL
__stdcall
FindNextFileW(
      HANDLE hFindFile,
      LPWIN32_FIND_DATAW lpFindFileData
    );








#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeW(
      HANDLE hFindVolume,
      LPWSTR lpszVolumeName,
      DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindVolumeClose(
      HANDLE hFindVolume
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
FlushFileBuffers(
      HANDLE hFile
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceA(
      LPCSTR lpRootPathName,
      LPDWORD lpSectorsPerCluster,
      LPDWORD lpBytesPerSector,
      LPDWORD lpNumberOfFreeClusters,
      LPDWORD lpTotalNumberOfClusters
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceW(
      LPCWSTR lpRootPathName,
      LPDWORD lpSectorsPerCluster,
      LPDWORD lpBytesPerSector,
      LPDWORD lpNumberOfFreeClusters,
      LPDWORD lpTotalNumberOfClusters
    );








#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExA(
      LPCSTR lpDirectoryName,
      PULARGE_INTEGER lpFreeBytesAvailableToCaller,
      PULARGE_INTEGER lpTotalNumberOfBytes,
      PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExW(
      LPCWSTR lpDirectoryName,
      PULARGE_INTEGER lpFreeBytesAvailableToCaller,
      PULARGE_INTEGER lpTotalNumberOfBytes,
      PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );








#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
UINT
__stdcall
GetDriveTypeA(
      LPCSTR lpRootPathName
    );

__declspec(dllimport)
UINT
__stdcall
GetDriveTypeW(
      LPCWSTR lpRootPathName
    );







__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesA(
      LPCSTR lpFileName
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesW(
      LPCWSTR lpFileName
    );








#pragma endregion

#pragma region Application Family



typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;


#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExA(
      LPCSTR lpFileName,
      GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExW(
      LPCWSTR lpFileName,
      GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation
    );








#pragma endregion

#pragma region Desktop Family



typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandle(
      HANDLE hFile,
      LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileSize(
      HANDLE hFile,
      LPDWORD lpFileSizeHigh
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileSizeEx(
      HANDLE hFile,
      PLARGE_INTEGER lpFileSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileTime(
      HANDLE hFile,
      LPFILETIME lpCreationTime,
      LPFILETIME lpLastAccessTime,
      LPFILETIME lpLastWriteTime
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileType(
      HANDLE hFile
    );





__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleA(
      HANDLE hFile,
      LPSTR lpszFilePath,
      DWORD cchFilePath,
      DWORD dwFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleW(
      HANDLE hFile,
      LPWSTR lpszFilePath,
      DWORD cchFilePath,
      DWORD dwFlags
    );









__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameA(
      LPCSTR lpFileName,
      DWORD nBufferLength,
      LPSTR lpBuffer,
     LPSTR * lpFilePart
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameW(
      LPCWSTR lpFileName,
      DWORD nBufferLength,
      LPWSTR lpBuffer,
     LPWSTR * lpFilePart
    );







__declspec(dllimport)
DWORD
__stdcall
GetLogicalDrives(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );






__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameA(
      LPCSTR lpszShortPath,
      LPSTR lpszLongPath,
      DWORD cchBuffer
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameW(
      LPCWSTR lpszShortPath,
      LPWSTR lpszLongPath,
      DWORD cchBuffer
    );







__declspec(dllimport)
 
DWORD
__stdcall
GetShortPathNameW(
      LPCWSTR lpszLongPath,
      LPWSTR lpszShortPath,
      DWORD cchBuffer
    );






__declspec(dllimport)
UINT
__stdcall
GetTempFileNameW(
      LPCWSTR lpPathName,
      LPCWSTR lpPrefixString,
      UINT uUnique,
      LPWSTR lpTempFileName
    );









__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationByHandleW(
      HANDLE hFile,
      LPWSTR lpVolumeNameBuffer,
      DWORD nVolumeNameSize,
      LPDWORD lpVolumeSerialNumber,
      LPDWORD lpMaximumComponentLength,
      LPDWORD lpFileSystemFlags,
      LPWSTR lpFileSystemNameBuffer,
      DWORD nFileSystemNameSize
    );




__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationW(
      LPCWSTR lpRootPathName,
      LPWSTR lpVolumeNameBuffer,
      DWORD nVolumeNameSize,
      LPDWORD lpVolumeSerialNumber,
      LPDWORD lpMaximumComponentLength,
      LPDWORD lpFileSystemFlags,
      LPWSTR lpFileSystemNameBuffer,
      DWORD nFileSystemNameSize
    );






__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameW(
      LPCWSTR lpszFileName,
      LPWSTR lpszVolumePathName,
      DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
LocalFileTimeToFileTime(
      const FILETIME * lpLocalFileTime,
      LPFILETIME lpFileTime
    );


__declspec(dllimport)
BOOL
__stdcall
LockFile(
      HANDLE hFile,
      DWORD dwFileOffsetLow,
      DWORD dwFileOffsetHigh,
      DWORD nNumberOfBytesToLockLow,
      DWORD nNumberOfBytesToLockHigh
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
LockFileEx(
      HANDLE hFile,
      DWORD dwFlags,
      DWORD dwReserved,
      DWORD nNumberOfBytesToLockLow,
      DWORD nNumberOfBytesToLockHigh,
      LPOVERLAPPED lpOverlapped
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceW(
      LPCWSTR lpDeviceName,
      LPWSTR lpTargetPath,
      DWORD ucchMax
    );







#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
BOOL
__stdcall
ReadFile(
      HANDLE hFile,
       LPVOID lpBuffer,
      DWORD nNumberOfBytesToRead,
      LPDWORD lpNumberOfBytesRead,
      LPOVERLAPPED lpOverlapped
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
ReadFileEx(
      HANDLE hFile,
       LPVOID lpBuffer,
      DWORD nNumberOfBytesToRead,
      LPOVERLAPPED lpOverlapped,
      LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)
 
BOOL
__stdcall
ReadFileScatter(
      HANDLE hFile,
      FILE_SEGMENT_ELEMENT aSegmentArray[],
      DWORD nNumberOfBytesToRead,
      LPDWORD lpReserved,
      LPOVERLAPPED lpOverlapped
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryA(
      LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryW(
      LPCWSTR lpPathName
    );







__declspec(dllimport)
BOOL
__stdcall
SetEndOfFile(
      HANDLE hFile
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesA(
      LPCSTR lpFileName,
      DWORD dwFileAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesW(
      LPCWSTR lpFileName,
      DWORD dwFileAttributes
    );










__declspec(dllimport)
BOOL
__stdcall
SetFileInformationByHandle(
      HANDLE hFile,
      FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
      LPVOID lpFileInformation,
      DWORD dwBufferSize
    );





#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
SetFilePointer(
      HANDLE hFile,
      LONG lDistanceToMove,
      PLONG lpDistanceToMoveHigh,
      DWORD dwMoveMethod
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
SetFilePointerEx(
      HANDLE hFile,
      LARGE_INTEGER liDistanceToMove,
      PLARGE_INTEGER lpNewFilePointer,
      DWORD dwMoveMethod
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetFileTime(
      HANDLE hFile,
      const FILETIME * lpCreationTime,
      const FILETIME * lpLastAccessTime,
      const FILETIME * lpLastWriteTime
    );





__declspec(dllimport)
BOOL
__stdcall
SetFileValidData(
      HANDLE hFile,
      LONGLONG ValidDataLength
    );




__declspec(dllimport)
BOOL
__stdcall
UnlockFile(
      HANDLE hFile,
      DWORD dwFileOffsetLow,
      DWORD dwFileOffsetHigh,
      DWORD nNumberOfBytesToUnlockLow,
      DWORD nNumberOfBytesToUnlockHigh
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
UnlockFileEx(
      HANDLE hFile,
      DWORD dwReserved,
      DWORD nNumberOfBytesToUnlockLow,
      DWORD nNumberOfBytesToUnlockHigh,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFile(
      HANDLE hFile,
      LPCVOID lpBuffer,
      DWORD nNumberOfBytesToWrite,
      LPDWORD lpNumberOfBytesWritten,
      LPOVERLAPPED lpOverlapped
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
WriteFileEx(
      HANDLE hFile,
      LPCVOID lpBuffer,
      DWORD nNumberOfBytesToWrite,
      LPOVERLAPPED lpOverlapped,
      LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFileGather(
      HANDLE hFile,
      FILE_SEGMENT_ELEMENT aSegmentArray[],
      DWORD nNumberOfBytesToWrite,
      LPDWORD lpReserved,
      LPOVERLAPPED lpOverlapped
    );



#pragma endregion








#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetTempPathW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointW(
      LPCWSTR lpszVolumeMountPoint,
      LPWSTR lpszVolumeName,
      DWORD cchBufferLength
    );









__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameW(
      LPCWSTR lpszVolumeName,
         LPWCH lpszVolumePathNames,
      DWORD cchBufferLength,
      PDWORD lpcchReturnLength
    );









#pragma endregion

#pragma region Application Family






typedef struct _CREATEFILE2_EXTENDED_PARAMETERS {
    DWORD dwSize;   
    DWORD dwFileAttributes;
    DWORD dwFileFlags;   
    DWORD dwSecurityQosFlags;	
    LPSECURITY_ATTRIBUTES lpSecurityAttributes; 
    HANDLE hTemplateFile;      
} CREATEFILE2_EXTENDED_PARAMETERS, *PCREATEFILE2_EXTENDED_PARAMETERS, *LPCREATEFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HANDLE
__stdcall
CreateFile2(
      LPCWSTR lpFileName,
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      DWORD dwCreationDisposition,
      LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams
    );





#pragma endregion









#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
SetFileIoOverlappedRange(
      HANDLE FileHandle,
      PUCHAR OverlappedRangeStart,
      ULONG Length
    );





#pragma endregion

#pragma region Desktop Family






__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeA(
      LPCSTR lpFileName,
      LPDWORD lpFileSizeHigh
    );

__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeW(
      LPCWSTR lpFileName,
      LPDWORD lpFileSizeHigh
    );










#pragma endregion









}





 











#pragma once























extern "C" {







#pragma region Application Family





__declspec(dllimport)
BOOL
__stdcall
IsDebuggerPresent(
    void
    );




#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
void
__stdcall
DebugBreak(
    void
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
void
__stdcall
OutputDebugStringA(
      LPCSTR lpOutputString
    );

__declspec(dllimport)
void
__stdcall
OutputDebugStringW(
      LPCWSTR lpOutputString
    );








#pragma endregion



#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
ContinueDebugEvent(
      DWORD dwProcessId,
      DWORD dwThreadId,
      DWORD dwContinueStatus
    );


__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEvent(
      LPDEBUG_EVENT lpDebugEvent,
      DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcess(
      DWORD dwProcessId
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcessStop(
      DWORD dwProcessId
    );




  
__declspec(dllimport)
BOOL
__stdcall
CheckRemoteDebuggerPresent(
      HANDLE hProcess,
      PBOOL pbDebuggerPresent
    );
  
  





#pragma endregion






}








 









#pragma once




















extern "C" {


#pragma region Application Family



__declspec(dllimport)
 
PVOID
__stdcall
EncodePointer(
      PVOID Ptr
    );


__declspec(dllimport)
 
PVOID
__stdcall
DecodePointer(
      PVOID Ptr
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
PVOID
__stdcall
EncodeSystemPointer(
      PVOID Ptr
    );


__declspec(dllimport)
 
PVOID
__stdcall
DecodeSystemPointer(
      PVOID Ptr
    );


__declspec(dllimport)
BOOL
__stdcall
Beep(
      DWORD dwFreq,
      DWORD dwDuration
    );



#pragma endregion


}





 









#pragma once




















extern "C" {







#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
CloseHandle(
      HANDLE hObject
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateHandle(
      HANDLE hSourceProcessHandle,
      HANDLE hSourceHandle,
      HANDLE hTargetProcessHandle,
     LPHANDLE lpTargetHandle,
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      DWORD dwOptions
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetHandleInformation(
      HANDLE hObject,
      LPDWORD lpdwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetHandleInformation(
      HANDLE hObject,
      DWORD dwMask,
      DWORD dwFlags
    );



#pragma endregion


}





 











#pragma once






















extern "C" {







#pragma region Desktop Family







typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
      struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;






#pragma endregion

#pragma region Application Family



__declspec(dllimport)

void
__stdcall
RaiseException(
      DWORD dwExceptionCode,
      DWORD dwExceptionFlags,
      DWORD nNumberOfArguments,
      const ULONG_PTR * lpArguments
    );



#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
LONG
__stdcall
UnhandledExceptionFilter(
      struct _EXCEPTION_POINTERS * ExceptionInfo
    );


__declspec(dllimport)
LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
      LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );



#pragma endregion

#pragma region Application Family





__declspec(dllimport)
   
DWORD
__stdcall
GetLastError(
    void
    );




__declspec(dllimport)
void
__stdcall
SetLastError(
      DWORD dwErrCode
    );



#pragma endregion

#pragma region Desktop Family






__declspec(dllimport)
UINT
__stdcall
GetErrorMode(
    void
    );




__declspec(dllimport)
UINT
__stdcall
SetErrorMode(
      UINT uMode
    );



#pragma endregion





#pragma region Desktop Family






__declspec(dllimport)
 
PVOID
__stdcall
AddVectoredExceptionHandler(
      ULONG First,
      PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredExceptionHandler(
      PVOID Handle
    );


__declspec(dllimport)
 
PVOID
__stdcall
AddVectoredContinueHandler(
      ULONG First,
      PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredContinueHandler(
      PVOID Handle
    );
































#pragma endregion







}







 











#pragma once






















extern "C" {







#pragma region Application Family










__declspec(dllimport)
DWORD
__stdcall
FlsAlloc(
      PFLS_CALLBACK_FUNCTION lpCallback
    );


__declspec(dllimport)
PVOID
__stdcall
FlsGetValue(
      DWORD dwFlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
FlsSetValue(
      DWORD dwFlsIndex,
      PVOID lpFlsData
    );


__declspec(dllimport)
BOOL
__stdcall
FlsFree(
      DWORD dwFlsIndex
    );





#pragma endregion





#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
IsThreadAFiber(
    void
    );





#pragma endregion







}







 
 










#pragma once























extern "C" {









__declspec(dllimport)
BOOL
__stdcall
CreatePipe(
      PHANDLE hReadPipe,
      PHANDLE hWritePipe,
      LPSECURITY_ATTRIBUTES lpPipeAttributes,
      DWORD nSize
    );


__declspec(dllimport)
BOOL
__stdcall
ConnectNamedPipe(
      HANDLE hNamedPipe,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
DisconnectNamedPipe(
      HANDLE hNamedPipe
    );


__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeHandleState(
      HANDLE hNamedPipe,
      LPDWORD lpMode,
      LPDWORD lpMaxCollectionCount,
      LPDWORD lpCollectDataTimeout
    );


__declspec(dllimport)
BOOL
__stdcall
PeekNamedPipe(
      HANDLE hNamedPipe,
      LPVOID lpBuffer,
      DWORD nBufferSize,
      LPDWORD lpBytesRead,
      LPDWORD lpTotalBytesAvail,
      LPDWORD lpBytesLeftThisMessage
    );


__declspec(dllimport)
BOOL
__stdcall
TransactNamedPipe(
      HANDLE hNamedPipe,
      LPVOID lpInBuffer,
      DWORD nInBufferSize,
      LPVOID lpOutBuffer,
      DWORD nOutBufferSize,
      LPDWORD lpBytesRead,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeW(
      LPCWSTR lpName,
      DWORD dwOpenMode,
      DWORD dwPipeMode,
      DWORD nMaxInstances,
      DWORD nOutBufferSize,
      DWORD nInBufferSize,
      DWORD nDefaultTimeOut,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeW(
      LPCWSTR lpNamedPipeName,
      DWORD nTimeOut
    );









__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameW(
      HANDLE Pipe,
      LPWSTR ClientComputerName,
      ULONG ClientComputerNameLength
    );















__declspec(dllimport)
 
BOOL
__stdcall
ImpersonateNamedPipeClient(
      HANDLE hNamedPipe
    );
                               





}







 









#pragma once




















extern "C" {






__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceCounter(
      LARGE_INTEGER * lpPerformanceCount
    );


__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceFrequency(
      LARGE_INTEGER * lpFrequency
    );



}





 









#pragma once























extern "C" {


#pragma region Desktop Family







typedef struct _HEAP_SUMMARY {
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
} HEAP_SUMMARY, *PHEAP_SUMMARY;
typedef PHEAP_SUMMARY LPHEAP_SUMMARY;


#pragma endregion

#pragma region Desktop Family







__declspec(dllimport)
 
HANDLE
__stdcall
HeapCreate(
      DWORD flOptions,
      SIZE_T dwInitialSize,
      SIZE_T dwMaximumSize
    );


__declspec(dllimport)
BOOL
__stdcall
HeapDestroy(
      HANDLE hHeap
    );

    

#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
 
LPVOID
__stdcall
HeapAlloc(
      HANDLE hHeap,
      DWORD dwFlags,
      SIZE_T dwBytes
    );


__declspec(dllimport)
 
 
 
LPVOID
__stdcall
HeapReAlloc(
      HANDLE hHeap,
      DWORD dwFlags,
      LPVOID lpMem,
      SIZE_T dwBytes
    );


__declspec(dllimport)
 
BOOL
__stdcall
HeapFree(
      HANDLE hHeap,
      DWORD dwFlags,
        LPVOID lpMem
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapSize(
      HANDLE hHeap,
      DWORD dwFlags,
      LPCVOID lpMem
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
HeapValidate(
      HANDLE hHeap,
      DWORD dwFlags,
      LPCVOID lpMem
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapCompact(
      HANDLE hHeap,
      DWORD dwFlags
    );





BOOL
__stdcall
HeapSummary(
      HANDLE hHeap,
      DWORD dwFlags,
      LPHEAP_SUMMARY lpSummary
    );





#pragma endregion

#pragma region Application Family



__declspec(dllimport)
HANDLE
__stdcall
GetProcessHeap(
    void
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetProcessHeaps(
      DWORD NumberOfHeaps,
      PHANDLE ProcessHeaps
    );


__declspec(dllimport)
BOOL
__stdcall
HeapLock(
      HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapUnlock(
      HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapWalk(
      HANDLE hHeap,
      LPPROCESS_HEAP_ENTRY lpEntry
    );


__declspec(dllimport)
BOOL
__stdcall
HeapSetInformation(
      HANDLE HeapHandle,
      HEAP_INFORMATION_CLASS HeapInformationClass,
      PVOID HeapInformation,
      SIZE_T HeapInformationLength
    );


__declspec(dllimport)
BOOL
__stdcall
HeapQueryInformation(
      HANDLE HeapHandle,
      HEAP_INFORMATION_CLASS HeapInformationClass,
      PVOID HeapInformation,
      SIZE_T HeapInformationLength,
      PSIZE_T ReturnLength
    );

    

#pragma endregion






}





 











#pragma once























extern "C" {







#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResult(
      HANDLE hFile,
      LPOVERLAPPED lpOverlapped,
      LPDWORD lpNumberOfBytesTransferred,
      BOOL bWait
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateIoCompletionPort(
      HANDLE FileHandle,
      HANDLE ExistingCompletionPort,
      ULONG_PTR CompletionKey,
      DWORD NumberOfConcurrentThreads
    );


__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatus(
      HANDLE CompletionPort,
      LPDWORD lpNumberOfBytesTransferred,
      PULONG_PTR lpCompletionKey,
      LPOVERLAPPED * lpOverlapped,
      DWORD dwMilliseconds
    );





__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatusEx(
      HANDLE CompletionPort,
      LPOVERLAPPED_ENTRY lpCompletionPortEntries,
      ULONG ulCount,
      PULONG ulNumEntriesRemoved,
      DWORD dwMilliseconds,
      BOOL fAlertable
    );




__declspec(dllimport)
BOOL
__stdcall
PostQueuedCompletionStatus(
      HANDLE CompletionPort,
      DWORD dwNumberOfBytesTransferred,
      ULONG_PTR dwCompletionKey,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
DeviceIoControl(
      HANDLE hDevice,
      DWORD dwIoControlCode,
      LPVOID lpInBuffer,
      DWORD nInBufferSize,
      LPVOID lpOutBuffer,
      DWORD nOutBufferSize,
      LPDWORD lpBytesReturned,
      LPOVERLAPPED lpOverlapped
    );





__declspec(dllimport)
BOOL
__stdcall
CancelIoEx(
      HANDLE hFile,
      LPOVERLAPPED lpOverlapped
    );





#pragma endregion








#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResultEx(
      HANDLE hFile,
      LPOVERLAPPED lpOverlapped,
      LPDWORD lpNumberOfBytesTransferred,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
CancelIo(
      HANDLE hFile
    );





__declspec(dllimport)
BOOL
__stdcall
CancelSynchronousIo(
      HANDLE hThread
    );





#pragma endregion









}







 
 











#pragma once























extern "C" {








#pragma region Application Family









typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;


#pragma endregion






#pragma region Application Family






__declspec(dllimport)
void
__stdcall
InitializeSRWLock(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockExclusive(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockShared(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockExclusive(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockShared(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockExclusive(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockShared(
      PSRWLOCK SRWLock
    );





#pragma endregion

#pragma region Desktop Family

















__declspec(dllimport)
void
__stdcall
InitializeCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );





#pragma endregion

#pragma region Application Family



__declspec(dllimport)
void
__stdcall
EnterCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
InitializeCriticalSectionAndSpinCount(
      LPCRITICAL_SECTION lpCriticalSection,
      DWORD dwSpinCount
    );



#pragma endregion

#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
InitializeCriticalSectionEx(
      LPCRITICAL_SECTION lpCriticalSection,
      DWORD dwSpinCount,
      DWORD Flags
    );





#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
SetCriticalSectionSpinCount(
      LPCRITICAL_SECTION lpCriticalSection,
      DWORD dwSpinCount
    );



#pragma endregion

#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
TryEnterCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );




__declspec(dllimport)
void
__stdcall
DeleteCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );










typedef RTL_RUN_ONCE INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;


















typedef
BOOL
(__stdcall *PINIT_ONCE_FN) (
      PINIT_ONCE InitOnce,
      PVOID Parameter,
     PVOID *Context
    );




__declspec(dllimport)
void
__stdcall
InitOnceInitialize(
      PINIT_ONCE InitOnce
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceExecuteOnce(
      PINIT_ONCE InitOnce,
       PINIT_ONCE_FN InitFn,
      PVOID Parameter,
     LPVOID * Context
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceBeginInitialize(
      LPINIT_ONCE lpInitOnce,
      DWORD dwFlags,
      PBOOL fPending,
     LPVOID * lpContext
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceComplete(
      LPINIT_ONCE lpInitOnce,
      DWORD dwFlags,
      LPVOID lpContext
    );








typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;
















__declspec(dllimport)
void
__stdcall
InitializeConditionVariable(
      PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeConditionVariable(
      PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeAllConditionVariable(
      PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableCS(
      PCONDITION_VARIABLE ConditionVariable,
      PCRITICAL_SECTION CriticalSection,
      DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableSRW(
      PCONDITION_VARIABLE ConditionVariable,
      PSRWLOCK SRWLock,
      DWORD dwMilliseconds,
      ULONG Flags
    );








__declspec(dllimport)
BOOL
__stdcall
SetEvent(
      HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ResetEvent(
      HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseSemaphore(
      HANDLE hSemaphore,
      LONG lReleaseCount,
      LPLONG lpPreviousCount
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseMutex(
      HANDLE hMutex
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObject(
      HANDLE hHandle,
      DWORD dwMilliseconds
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
DWORD
__stdcall
SleepEx(
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObjectEx(
      HANDLE hHandle,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjectsEx(
      DWORD nCount,
      const HANDLE * lpHandles,
      BOOL bWaitAll,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );










#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexA(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      BOOL bInitialOwner,
      LPCSTR lpName
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexW(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      BOOL bInitialOwner,
      LPCWSTR lpName
    );








#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
HANDLE
__stdcall
OpenMutexW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );







#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventA(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      BOOL bManualReset,
      BOOL bInitialState,
      LPCSTR lpName
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventW(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      BOOL bManualReset,
      BOOL bInitialState,
      LPCWSTR lpName
    );








#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
HANDLE
__stdcall
OpenEventA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );

__declspec(dllimport)
 
HANDLE
__stdcall
OpenEventW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );







__declspec(dllimport)
 
HANDLE
__stdcall
OpenSemaphoreW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );







#pragma endregion




#pragma region Desktop Family



typedef
void
(__stdcall *PTIMERAPCROUTINE)(
      LPVOID lpArgToCompletionRoutine,
          DWORD dwTimerLowValue,
          DWORD dwTimerHighValue
    );

__declspec(dllimport)
 
HANDLE
__stdcall
OpenWaitableTimerW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpTimerName
    );









BOOL
__stdcall
SetWaitableTimerEx(
      HANDLE hTimer,
      const LARGE_INTEGER * lpDueTime,
      LONG lPeriod,
      PTIMERAPCROUTINE pfnCompletionRoutine,
      LPVOID lpArgToCompletionRoutine,
      PREASON_CONTEXT WakeContext,
      ULONG TolerableDelay
    );




__declspec(dllimport)
BOOL
__stdcall
SetWaitableTimer(
      HANDLE hTimer,
      const LARGE_INTEGER * lpDueTime,
      LONG lPeriod,
      PTIMERAPCROUTINE pfnCompletionRoutine,
      LPVOID lpArgToCompletionRoutine,
      BOOL fResume
    );


__declspec(dllimport)
BOOL
__stdcall
CancelWaitableTimer(
      HANDLE hTimer
    );



#pragma endregion




#pragma region Application Family





__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexExA(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      LPCSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexExW(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      LPCWSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );










__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventExA(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      LPCSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventExW(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      LPCWSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );







__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreExW(
      LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
      LONG lInitialCount,
      LONG lMaximumCount,
      LPCWSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );







#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerExW(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
      LPCWSTR lpTimerName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );







#pragma endregion












#pragma region Desktop Family



typedef RTL_BARRIER SYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER;





BOOL
__stdcall
EnterSynchronizationBarrier(
      LPSYNCHRONIZATION_BARRIER lpBarrier,
      DWORD dwFlags
    );


BOOL
__stdcall
InitializeSynchronizationBarrier(
      LPSYNCHRONIZATION_BARRIER lpBarrier,
      LONG lTotalThreads,
      LONG lSpinCount
    );


BOOL
__stdcall
DeleteSynchronizationBarrier(
      LPSYNCHRONIZATION_BARRIER lpBarrier
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
void
__stdcall
Sleep(
      DWORD dwMilliseconds
    );


BOOL
__stdcall
WaitOnAddress(
      volatile void * Address,
      PVOID CompareAddress,
      SIZE_T AddressSize,
      DWORD dwMilliseconds
    );


void
__stdcall
WakeByAddressSingle(
      PVOID Address
    );


void
__stdcall
WakeByAddressAll(
      PVOID Address
    );

    

#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
      HANDLE hObjectToSignal,
      HANDLE hObjectToWaitOn,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );





#pragma endregion








}







 
 










#pragma once






















extern "C" {










__declspec(dllimport)
void
__stdcall
InitializeSListHead(
      PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPopEntrySList(
      PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushEntrySList(
      PSLIST_HEADER ListHead,
      PSLIST_ENTRY ListEntry
    );







__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushListSListEx(
      PSLIST_HEADER ListHead,
      PSLIST_ENTRY List,
      PSLIST_ENTRY ListEnd,
      ULONG Count
    );




__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedFlushSList(
      PSLIST_HEADER ListHead
    );


__declspec(dllimport)
USHORT
__stdcall
QueryDepthSList(
      PSLIST_HEADER ListHead
    );












}






 












#pragma once

























extern "C" {








#pragma region Desktop Family



typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

typedef struct _STARTUPINFOA {
    DWORD   cb;
    LPSTR   lpReserved;
    LPSTR   lpDesktop;
    LPSTR   lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD   cb;
    LPWSTR  lpReserved;
    LPWSTR  lpDesktop;
    LPWSTR  lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;




typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;





__declspec(dllimport)
DWORD
__stdcall
QueueUserAPC(
      PAPCFUNC pfnAPC,
      HANDLE hThread,
      ULONG_PTR dwData
    );




__declspec(dllimport)
BOOL
__stdcall
GetProcessTimes(
      HANDLE hProcess,
      LPFILETIME lpCreationTime,
      LPFILETIME lpExitTime,
      LPFILETIME lpKernelTime,
      LPFILETIME lpUserTime
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
HANDLE
__stdcall
GetCurrentProcess(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessId(
    void
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitProcess(
      UINT uExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
TerminateProcess(
      HANDLE hProcess,
      UINT uExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
GetExitCodeProcess(
      HANDLE hProcess,
      LPDWORD lpExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
SwitchToThread(
    void
    );


#pragma endregion

#pragma region Application Family


__declspec(dllimport)
 
HANDLE
__stdcall
CreateThread(
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      SIZE_T dwStackSize,
      LPTHREAD_START_ROUTINE lpStartAddress,
        LPVOID lpParameter,
      DWORD dwCreationFlags,
      LPDWORD lpThreadId
    );


#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
 
HANDLE
__stdcall
CreateRemoteThread(
      HANDLE hProcess,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      SIZE_T dwStackSize,
      LPTHREAD_START_ROUTINE lpStartAddress,
      LPVOID lpParameter,
      DWORD dwCreationFlags,
      LPDWORD lpThreadId
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
HANDLE
__stdcall
GetCurrentThread(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentThreadId(
    void
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HANDLE
__stdcall
OpenThread(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      DWORD dwThreadId
    );


#pragma endregion

#pragma region Application Family


__declspec(dllimport)
BOOL
__stdcall
SetThreadPriority(
      HANDLE hThread,
      int nPriority
    );


#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetThreadPriorityBoost(
      HANDLE hThread,
      BOOL bDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadPriorityBoost(
      HANDLE hThread,
      PBOOL pDisablePriorityBoost
    );


#pragma endregion

#pragma region Application Family


__declspec(dllimport)
int
__stdcall
GetThreadPriority(
      HANDLE hThread
    );


__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitThread(
      DWORD dwExitCode
    );


#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
TerminateThread(
      HANDLE hThread,
      DWORD dwExitCode
    );


#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
BOOL
__stdcall
GetExitCodeThread(
      HANDLE hThread,
      LPDWORD lpExitCode
    );


__declspec(dllimport)
DWORD
__stdcall
SuspendThread(
      HANDLE hThread
    );


__declspec(dllimport)
DWORD
__stdcall
ResumeThread(
      HANDLE hThread
    );









#pragma endregion



#pragma region Application Family




















































#pragma endregion

#pragma region Desktop Family



 
__declspec(dllimport)
DWORD
__stdcall
TlsAlloc(
    void
    );


__declspec(dllimport)
LPVOID
__stdcall
TlsGetValue(
      DWORD dwTlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
TlsSetValue(
      DWORD dwTlsIndex,
      LPVOID lpTlsValue
    );


__declspec(dllimport)
BOOL
__stdcall
TlsFree(
      DWORD dwTlsIndex
    );



#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
BOOL
__stdcall
CreateProcessA(
      LPCSTR lpApplicationName,
      LPSTR lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL bInheritHandles,
      DWORD dwCreationFlags,
      LPVOID lpEnvironment,
      LPCSTR lpCurrentDirectory,
      LPSTARTUPINFOA lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );

__declspec(dllimport)
BOOL
__stdcall
CreateProcessW(
      LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL bInheritHandles,
      DWORD dwCreationFlags,
      LPVOID lpEnvironment,
      LPCWSTR lpCurrentDirectory,
      LPSTARTUPINFOW lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );









__declspec(dllimport)
BOOL
__stdcall
SetProcessShutdownParameters(
      DWORD dwLevel,
      DWORD dwFlags
    );


__declspec(dllimport)
DWORD
__stdcall
GetProcessVersion(
      DWORD ProcessId
    );


__declspec(dllimport)
void
__stdcall
GetStartupInfoW(
      LPSTARTUPINFOW lpStartupInfo
    );






#pragma endregion





#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserW(
      HANDLE hToken,
      LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL bInheritHandles,
      DWORD dwCreationFlags,
      LPVOID lpEnvironment,
      LPCWSTR lpCurrentDirectory,
      LPSTARTUPINFOW lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );







#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
SetThreadToken(
      PHANDLE Thread,
      HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
OpenProcessToken(
      HANDLE ProcessHandle,
      DWORD DesiredAccess,
     PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
OpenThreadToken(
      HANDLE ThreadHandle,
      DWORD DesiredAccess,
      BOOL OpenAsSelf,
     PHANDLE TokenHandle
    );



#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetPriorityClass(
      HANDLE hProcess,
      DWORD dwPriorityClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadStackGuarantee(
      PULONG StackSizeInBytes
    );


__declspec(dllimport)
DWORD
__stdcall
GetPriorityClass(
      HANDLE hProcess
    );


__declspec(dllimport)
BOOL
__stdcall
ProcessIdToSessionId(
      DWORD dwProcessId,
      DWORD * pSessionId
    );






__declspec(dllimport)
DWORD
__stdcall
GetProcessId(
      HANDLE Process
    );







__declspec(dllimport)
DWORD
__stdcall
GetThreadId(
      HANDLE Thread
    );





typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;


#pragma endregion




#pragma region Application Family



__declspec(dllimport)
void
__stdcall
FlushProcessWriteBuffers(
    void
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetProcessIdOfThread(
      HANDLE Thread
    );


__declspec(dllimport)
 
BOOL
__stdcall
InitializeProcThreadAttributeList(
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
      DWORD dwAttributeCount,
      DWORD dwFlags,
      PSIZE_T lpSize
    );


__declspec(dllimport)
void
__stdcall
DeleteProcThreadAttributeList(
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
    );




__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityUpdateMode(
      HANDLE hProcess,
      DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessAffinityUpdateMode(
      HANDLE hProcess,
      LPDWORD lpdwFlags
    );




__declspec(dllimport)
BOOL
__stdcall
UpdateProcThreadAttribute(
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
      DWORD dwFlags,
      DWORD_PTR Attribute,
      PVOID lpValue,
      SIZE_T cbSize,
      PVOID lpPreviousValue,
      PSIZE_T lpReturnSize
    );



#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
 
HANDLE
__stdcall
CreateRemoteThreadEx(
      HANDLE hProcess,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      SIZE_T dwStackSize,
      LPTHREAD_START_ROUTINE lpStartAddress,
      LPVOID lpParameter,
      DWORD dwCreationFlags,
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
      LPDWORD lpThreadId
    );



#pragma endregion









#pragma region Desktop Family






__declspec(dllimport)
void
__stdcall
GetCurrentThreadStackLimits(
      PULONG_PTR LowLimit,
      PULONG_PTR HighLimit
    );




__declspec(dllimport)
BOOL
__stdcall
GetThreadContext(
      HANDLE hThread,
      LPCONTEXT lpContext
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadContext(
      HANDLE hThread,
      const CONTEXT * lpContext
    );





__declspec(dllimport)
BOOL
__stdcall
SetProcessMitigationPolicy(
      PROCESS_MITIGATION_POLICY MitigationPolicy,
      PVOID lpBuffer,
      SIZE_T dwLength
    );


__declspec(dllimport)
BOOL
__stdcall
GetProcessMitigationPolicy(
      HANDLE hProcess,
      PROCESS_MITIGATION_POLICY MitigationPolicy,
      PVOID lpBuffer,
      SIZE_T dwLength
    );





#pragma endregion







#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
FlushInstructionCache(
      HANDLE hProcess,
      LPCVOID lpBaseAddress,
      SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadTimes(
      HANDLE hThread,
      LPFILETIME lpCreationTime,
      LPFILETIME lpExitTime,
      LPFILETIME lpKernelTime,
      LPFILETIME lpUserTime
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenProcess(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      DWORD dwProcessId
    );



#pragma endregion

#pragma region Application Family



BOOL
__stdcall
IsProcessorFeaturePresent(
      DWORD ProcessorFeature
    );



#pragma endregion






#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetProcessHandleCount(
      HANDLE hProcess,
      PDWORD pdwHandleCount
    );



#pragma endregion






#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessorNumber(
    void
    );



#pragma endregion






#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
SetThreadIdealProcessorEx(
      HANDLE hThread,
      PPROCESSOR_NUMBER lpIdealProcessor,
      PPROCESSOR_NUMBER lpPreviousIdealProcessor
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetThreadIdealProcessorEx(
      HANDLE hThread,
      PPROCESSOR_NUMBER lpIdealProcessor
    );


__declspec(dllimport)
void
__stdcall
GetCurrentProcessorNumberEx(
      PPROCESSOR_NUMBER ProcNumber
    );



#pragma endregion









#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
GetProcessPriorityBoost(
      HANDLE hProcess,
      PBOOL pDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessPriorityBoost(
      HANDLE hProcess,
      BOOL bDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadIOPendingFlag(
      HANDLE hThread,
      PBOOL lpIOIsPending
    );


__declspec(dllimport)
BOOL
__stdcall
GetSystemTimes(
      PFILETIME lpIdleTime,
      PFILETIME lpKernelTime,
      PFILETIME lpUserTime
    );








typedef enum _THREAD_INFORMATION_CLASS {
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadInformationClassMax
} THREAD_INFORMATION_CLASS;




__declspec(dllimport)
BOOL
__stdcall
GetThreadInformation(
      HANDLE hThread,
      THREAD_INFORMATION_CLASS ThreadInformationClass,
      LPVOID ThreadInformation,
      DWORD ThreadInformationSize
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadInformation(
      HANDLE hThread,
      THREAD_INFORMATION_CLASS ThreadInformationClass,
      LPVOID ThreadInformation,
      DWORD ThreadInformationSize
    );













typedef struct _MEMORY_PRIORITY_INFORMATION {
    ULONG MemoryPriority;
} MEMORY_PRIORITY_INFORMATION, *PMEMORY_PRIORITY_INFORMATION;






__declspec(dllimport)
BOOL
__stdcall
IsProcessCritical(
      HANDLE hProcess,
      PBOOL Critical
    );







__declspec(dllimport)
BOOL
__stdcall
SetProtectedPolicy(
      LPCGUID PolicyGuid,
      ULONG_PTR PolicyValue,
      PULONG_PTR OldPolicyValue
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProtectedPolicy(
      LPCGUID PolicyGuid,
      PULONG_PTR PolicyValue
    );





#pragma endregion









}








 
 












#pragma once












#pragma warning(disable:4514)

#pragma warning(disable:4103)



#pragma warning(push)

#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)























extern "C" {








#pragma region Application Family



typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;          
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        } ;
    } ;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;


#pragma endregion





#pragma region Desktop Family



__declspec(deprecated)
__declspec(dllimport)
 
DWORD
__stdcall
GetVersion(
    void
    );


typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

__declspec(dllimport)
BOOL
__stdcall
GlobalMemoryStatusEx(
      LPMEMORYSTATUSEX lpBuffer
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
void
__stdcall
GetSystemTime(
      LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)
void
__stdcall
GetSystemTimeAsFileTime(
      LPFILETIME lpSystemTimeAsFileTime
    );


__declspec(dllimport)
void
__stdcall
GetLocalTime(
      LPSYSTEMTIME lpSystemTime
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetLocalTime(
      const SYSTEMTIME * lpSystemTime
    );


__declspec(dllimport)
void
__stdcall
GetSystemInfo(
      LPSYSTEM_INFO lpSystemInfo
    );



#pragma endregion




#pragma region Desktop Family



 
__declspec(dllimport)
DWORD
__stdcall
GetTickCount(
    void
    );



#pragma endregion

#pragma region Application Family






__declspec(dllimport)
ULONGLONG
__stdcall
GetTickCount64(
    void
    );





#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
GetSystemTimeAdjustment(
      PDWORD lpTimeAdjustment,
      PDWORD lpTimeIncrement,
      PBOOL lpTimeAdjustmentDisabled
    );


__declspec(dllimport)
 
UINT
__stdcall
GetSystemDirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );

__declspec(dllimport)
 
UINT
__stdcall
GetSystemDirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );







__declspec(dllimport)
 
 
UINT
__stdcall
GetWindowsDirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );

__declspec(dllimport)
 
 
UINT
__stdcall
GetWindowsDirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );







__declspec(dllimport)
 
UINT
__stdcall
GetSystemWindowsDirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );

__declspec(dllimport)
 
UINT
__stdcall
GetSystemWindowsDirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );








#pragma endregion






#pragma region Desktop Family



typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
} COMPUTER_NAME_FORMAT ;


#pragma endregion






#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameExA(
      COMPUTER_NAME_FORMAT NameType,
      LPSTR lpBuffer,
      LPDWORD nSize
    );

__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameExW(
      COMPUTER_NAME_FORMAT NameType,
      LPWSTR lpBuffer,
      LPDWORD nSize
    );








#pragma endregion







#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExW(
      COMPUTER_NAME_FORMAT NameType,
      LPCWSTR lpBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
SetSystemTime(
      const SYSTEMTIME * lpSystemTime
    );



#pragma endregion






#pragma region Desktop Family



__declspec(deprecated)
__declspec(dllimport)
 
BOOL
__stdcall
GetVersionExA(
      LPOSVERSIONINFOA lpVersionInformation
    );

__declspec(deprecated)
__declspec(dllimport)
 
BOOL
__stdcall
GetVersionExW(
      LPOSVERSIONINFOW lpVersionInformation
    );







__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformation(
      PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
      PDWORD ReturnedLength
    );





__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformationEx(
      LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
      PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,
      PDWORD ReturnedLength
    );





#pragma endregion







#pragma region Application Family






__declspec(dllimport)
void
__stdcall
GetNativeSystemInfo(
      LPSYSTEM_INFO lpSystemInfo
    );





#pragma endregion

#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
GetProductInfo(
      DWORD dwOSMajorVersion,
      DWORD dwOSMinorVersion,
      DWORD dwSpMajorVersion,
      DWORD dwSpMinorVersion,
      PDWORD pdwReturnedProductType
    );







__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
      ULONGLONG ConditionMask,
      ULONG TypeMask,
      UCHAR Condition
    );







__declspec(dllimport)
BOOL
__stdcall
GetOsSafeBootMode(
      PDWORD Flags
    );




__declspec(dllimport)
void
__stdcall
GetSystemTimePreciseAsFileTime(
      LPFILETIME lpSystemTimeAsFileTime
    );


__declspec(dllimport)
UINT
__stdcall
EnumSystemFirmwareTables(
      DWORD FirmwareTableProviderSignature,
      PVOID pFirmwareTableEnumBuffer,
      DWORD BufferSize
    );


__declspec(dllimport)
UINT
__stdcall
GetSystemFirmwareTable(
      DWORD FirmwareTableProviderSignature,
      DWORD FirmwareTableID,
      PVOID pFirmwareTableBuffer,
      DWORD BufferSize
    );



#pragma endregion









#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
DnsHostnameToComputerNameExW(
      LPCWSTR Hostname,
      LPWSTR ComputerName,
      LPDWORD nSize
    );


__declspec(dllimport)
 
BOOL
__stdcall
GetPhysicallyInstalledSystemMemory(
      PULONGLONG TotalMemoryInKilobytes
    );




__declspec(dllimport)
BOOL
__stdcall
SetComputerNameEx2W(
      COMPUTER_NAME_FORMAT NameType,
      DWORD Flags,
      LPCWSTR lpBuffer
    );






__declspec(dllimport)
 
BOOL
__stdcall
SetSystemTimeAdjustment(
      DWORD dwTimeAdjustment,
      BOOL bTimeAdjustmentDisabled
    );


__declspec(dllimport)
BOOL
__stdcall
InstallELAMCertificateInfo(
      HANDLE ELAMFile
    );



#pragma endregion









}






#pragma warning(pop)















 












#pragma once


























extern "C" {


#pragma region Application Family











#pragma endregion

#pragma region Desktop Family






#pragma endregion

#pragma region Application Family







#pragma endregion






#pragma region Desktop Family



__declspec(dllimport)
   
LPVOID
__stdcall
VirtualAlloc(
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flAllocationType,
      DWORD flProtect
    );







 
__declspec(dllimport)
BOOL
__stdcall
VirtualFree(
        LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD dwFreeType
    );


__declspec(dllimport)
 
BOOL
__stdcall
VirtualProtect(
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flNewProtect,
      PDWORD lpflOldProtect
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
SIZE_T
__stdcall
VirtualQuery(
      LPCVOID lpAddress,
      PMEMORY_BASIC_INFORMATION lpBuffer,
      SIZE_T dwLength
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
   
LPVOID
__stdcall
VirtualAllocEx(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flAllocationType,
      DWORD flProtect
    );









 
__declspec(dllimport)
BOOL
__stdcall
VirtualFreeEx(
      HANDLE hProcess,
        LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD dwFreeType
    );


__declspec(dllimport)
 
BOOL
__stdcall
VirtualProtectEx(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flNewProtect,
      PDWORD lpflOldProtect
    );


__declspec(dllimport)
SIZE_T
__stdcall
VirtualQueryEx(
      HANDLE hProcess,
      LPCVOID lpAddress,
      PMEMORY_BASIC_INFORMATION lpBuffer,
      SIZE_T dwLength
    );


__declspec(dllimport)
 
BOOL
__stdcall
ReadProcessMemory(
      HANDLE hProcess,
      LPCVOID lpBaseAddress,
      LPVOID lpBuffer,
      SIZE_T nSize,
      SIZE_T * lpNumberOfBytesRead
    );


__declspec(dllimport)
 
BOOL
__stdcall
WriteProcessMemory(
      HANDLE hProcess,
      LPVOID lpBaseAddress,
      LPCVOID lpBuffer,
      SIZE_T nSize,
      SIZE_T * lpNumberOfBytesWritten
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingW(
      HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
      DWORD flProtect,
      DWORD dwMaximumSizeHigh,
      DWORD dwMaximumSizeLow,
      LPCWSTR lpName
    );






__declspec(dllimport)
 
HANDLE
__stdcall
OpenFileMappingW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );






__declspec(dllimport)
   
LPVOID
__stdcall
MapViewOfFile(
      HANDLE hFileMappingObject,
      DWORD dwDesiredAccess,
      DWORD dwFileOffsetHigh,
      DWORD dwFileOffsetLow,
      SIZE_T dwNumberOfBytesToMap
    );


__declspec(dllimport)
   
LPVOID
__stdcall
MapViewOfFileEx(
      HANDLE hFileMappingObject,
      DWORD dwDesiredAccess,
      DWORD dwFileOffsetHigh,
      DWORD dwFileOffsetLow,
      SIZE_T dwNumberOfBytesToMap,
      LPVOID lpBaseAddress
    );



#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
FlushViewOfFile(
      LPCVOID lpBaseAddress,
      SIZE_T dwNumberOfBytesToFlush
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile(
      LPCVOID lpBaseAddress
    );



#pragma endregion







#pragma region Desktop Family



__declspec(dllimport)
SIZE_T
__stdcall
GetLargePageMinimum(
    void
    );


__declspec(dllimport)
 
BOOL
__stdcall
GetProcessWorkingSetSizeEx(
      HANDLE hProcess,
      PSIZE_T lpMinimumWorkingSetSize,
      PSIZE_T lpMaximumWorkingSetSize,
      PDWORD Flags
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSizeEx(
      HANDLE hProcess,
      SIZE_T dwMinimumWorkingSetSize,
      SIZE_T dwMaximumWorkingSetSize,
      DWORD Flags
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualLock(
      LPVOID lpAddress,
      SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualUnlock(
      LPVOID lpAddress,
      SIZE_T dwSize
    );


__declspec(dllimport)
 
UINT
__stdcall
GetWriteWatch(
      DWORD dwFlags,
      PVOID lpBaseAddress,
      SIZE_T dwRegionSize,
      PVOID * lpAddresses,
      ULONG_PTR * lpdwCount,
      LPDWORD lpdwGranularity
    );


__declspec(dllimport)
UINT
__stdcall
ResetWriteWatch(
      LPVOID lpBaseAddress,
      SIZE_T dwRegionSize
    );





typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;

__declspec(dllimport)
 
HANDLE
__stdcall
CreateMemoryResourceNotification(
      MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
    );


__declspec(dllimport)
 
BOOL
__stdcall
QueryMemoryResourceNotification(
      HANDLE ResourceNotificationHandle,
      PBOOL ResourceState
    );













__declspec(dllimport)
 
BOOL
__stdcall
GetSystemFileCacheSize(
      PSIZE_T lpMinimumFileCacheSize,
      PSIZE_T lpMaximumFileCacheSize,
      PDWORD lpFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetSystemFileCacheSize(
      SIZE_T MinimumFileCacheSize,
      SIZE_T MaximumFileCacheSize,
      DWORD Flags
    );







__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingNumaW(
      HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
      DWORD flProtect,
      DWORD dwMaximumSizeHigh,
      DWORD dwMaximumSizeLow,
      LPCWSTR lpName,
      DWORD nndPreferred
    );











typedef struct _WIN32_MEMORY_RANGE_ENTRY {
    PVOID VirtualAddress;
    SIZE_T NumberOfBytes;
} WIN32_MEMORY_RANGE_ENTRY, *PWIN32_MEMORY_RANGE_ENTRY;

__declspec(dllimport)
BOOL
__stdcall
PrefetchVirtualMemory(
      HANDLE hProcess,
      ULONG_PTR NumberOfEntries,
      PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses,
      ULONG Flags
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFileEx(
      PVOID BaseAddress,
      ULONG UnmapFlags
    );





#pragma endregion

#pragma region Application Family






__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingFromApp(
      HANDLE hFile,
      PSECURITY_ATTRIBUTES SecurityAttributes,
      ULONG PageProtection,
      ULONG64 MaximumSize,
      PCWSTR Name
    );


__declspec(dllimport)
   
PVOID
__stdcall
MapViewOfFileFromApp(
      HANDLE hFileMappingObject,
      ULONG DesiredAccess,
      ULONG64 FileOffset,
      SIZE_T NumberOfBytesToMap
    );





#pragma endregion









#pragma region Desktop Family






__declspec(dllimport)
 
BOOL
__stdcall
AllocateUserPhysicalPages(
      HANDLE hProcess,
      PULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );


__declspec(dllimport)
 
BOOL
__stdcall
FreeUserPhysicalPages(
      HANDLE hProcess,
      PULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );


__declspec(dllimport)
 
BOOL
__stdcall
MapUserPhysicalPages(
      PVOID VirtualAddress,
      ULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );







__declspec(dllimport)
 
BOOL
__stdcall
AllocateUserPhysicalPagesNuma(
      HANDLE hProcess,
      PULONG_PTR NumberOfPages,
      PULONG_PTR PageArray,
      DWORD nndPreferred
    );


__declspec(dllimport)
 
LPVOID
__stdcall
VirtualAllocExNuma(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flAllocationType,
      DWORD flProtect,
      DWORD nndPreferred
    );









__declspec(dllimport)
 
BOOL
__stdcall
GetMemoryErrorHandlingCapabilities(
      PULONG Capabilities
    );


 
typedef
void
__stdcall
BAD_MEMORY_CALLBACK_ROUTINE(
    void
    );

typedef BAD_MEMORY_CALLBACK_ROUTINE *PBAD_MEMORY_CALLBACK_ROUTINE;

__declspec(dllimport)
 
PVOID
__stdcall
RegisterBadMemoryNotification(
      PBAD_MEMORY_CALLBACK_ROUTINE Callback
    );


__declspec(dllimport)
 
BOOL
__stdcall
UnregisterBadMemoryNotification(
      PVOID RegistrationHandle
    );





#pragma endregion








#pragma region Application Family




















































#pragma endregion








}








 









#pragma once





















extern "C" {






#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
QueueUserWorkItem(
      LPTHREAD_START_ROUTINE Function,
      PVOID Context,
      ULONG Flags
    );


__declspec(dllimport)
 
BOOL
__stdcall
UnregisterWaitEx(
      HANDLE WaitHandle,
      HANDLE CompletionEvent
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateTimerQueue(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
CreateTimerQueueTimer(
     PHANDLE phNewTimer,
      HANDLE TimerQueue,
      WAITORTIMERCALLBACK Callback,
      PVOID Parameter,
      DWORD DueTime,
      DWORD Period,
      ULONG Flags
    );


__declspec(dllimport)
 
BOOL
__stdcall
ChangeTimerQueueTimer(
      HANDLE TimerQueue,
      HANDLE Timer,
      ULONG DueTime,
      ULONG Period
    );


__declspec(dllimport)
 
BOOL
__stdcall
DeleteTimerQueueTimer(
      HANDLE TimerQueue,
      HANDLE Timer,
      HANDLE CompletionEvent
    );


__declspec(dllimport)
 
BOOL
__stdcall
DeleteTimerQueueEx(
      HANDLE TimerQueue,
      HANDLE CompletionEvent
    );



#pragma endregion


}





 
 









#pragma once























extern "C" {






#pragma region Desktop Family



typedef
void
(__stdcall *PTP_WIN32_IO_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
      PVOID                 Overlapped,
             ULONG                 IoResult,
             ULONG_PTR             NumberOfBytesTransferred,
          PTP_IO                Io
    );




__declspec(dllimport)
 
PTP_POOL
__stdcall
CreateThreadpool(
      PVOID reserved
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolThreadMaximum(
      PTP_POOL ptpp,
      DWORD cthrdMost
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolThreadMinimum(
      PTP_POOL ptpp,
      DWORD cthrdMic
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolStackInformation(
      PTP_POOL ptpp,
      PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
BOOL
__stdcall
QueryThreadpoolStackInformation(
      PTP_POOL ptpp,
      PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpool(
      PTP_POOL ptpp
    );


__declspec(dllimport)
 
PTP_CLEANUP_GROUP
__stdcall
CreateThreadpoolCleanupGroup(
    void
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroupMembers(
      PTP_CLEANUP_GROUP ptpcg,
      BOOL fCancelPendingCallbacks,
      PVOID pvCleanupContext
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroup(
      PTP_CLEANUP_GROUP ptpcg
    );


__declspec(dllimport)
void
__stdcall
SetEventWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HANDLE evt
    );


__declspec(dllimport)
void
__stdcall
ReleaseSemaphoreWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HANDLE sem,
      DWORD crel
    );


__declspec(dllimport)
void
__stdcall
ReleaseMutexWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HANDLE mut
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSectionWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      PCRITICAL_SECTION pcs
    );


__declspec(dllimport)
void
__stdcall
FreeLibraryWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HMODULE mod
    );


__declspec(dllimport)
BOOL
__stdcall
CallbackMayRunLong(
      PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)
void
__stdcall
DisassociateCurrentThreadFromCallback(
      PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)
 
BOOL
__stdcall
TrySubmitThreadpoolCallback(
      PTP_SIMPLE_CALLBACK pfns,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
 
PTP_WORK
__stdcall
CreateThreadpoolWork(
      PTP_WORK_CALLBACK pfnwk,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SubmitThreadpoolWork(
      PTP_WORK pwk
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWorkCallbacks(
      PTP_WORK pwk,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWork(
      PTP_WORK pwk
    );


__declspec(dllimport)
 
PTP_TIMER
__stdcall
CreateThreadpoolTimer(
      PTP_TIMER_CALLBACK pfnti,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolTimer(
      PTP_TIMER pti,
      PFILETIME pftDueTime,
      DWORD msPeriod,
      DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
IsThreadpoolTimerSet(
      PTP_TIMER pti
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolTimerCallbacks(
      PTP_TIMER pti,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolTimer(
      PTP_TIMER pti
    );


__declspec(dllimport)
 
PTP_WAIT
__stdcall
CreateThreadpoolWait(
      PTP_WAIT_CALLBACK pfnwa,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolWait(
      PTP_WAIT pwa,
      HANDLE h,
      PFILETIME pftTimeout
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWaitCallbacks(
      PTP_WAIT pwa,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWait(
      PTP_WAIT pwa
    );


__declspec(dllimport)
 
PTP_IO
__stdcall
CreateThreadpoolIo(
      HANDLE fl,
      PTP_WIN32_IO_CALLBACK pfnio,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
StartThreadpoolIo(
      PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
CancelThreadpoolIo(
      PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolIoCallbacks(
      PTP_IO pio,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolIo(
      PTP_IO pio
    );





__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolTimerEx(
      PTP_TIMER pti,
      PFILETIME pftDueTime,
      DWORD msPeriod,
      DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolWaitEx(
      PTP_WAIT pwa,
      HANDLE h,
      PFILETIME pftTimeout,
      PVOID Reserved
    );








#pragma endregion


}





 









#pragma once





















extern "C" {


#pragma region Desktop Family






typedef struct _CONTRACT_DESCRIPTION CONTRACT_DESCRIPTION;

typedef struct _BEM_REFERENCE BEM_REFERENCE;

typedef void (__stdcall* BEM_FREE_INTERFACE_CALLBACK)(  void* interfaceInstance);

HRESULT
__stdcall
BemCreateReference(
      const GUID & iid,
      void * interfaceInstance,
      BEM_FREE_INTERFACE_CALLBACK freeCallback,
     BEM_REFERENCE ** reference
    );


HRESULT
__stdcall
BemCreateContractFrom(
      LPCWSTR dllPath,
      const GUID & extensionId,
      const CONTRACT_DESCRIPTION * contractDescription,
      void * hostContract,
     void ** contract
    );


HRESULT
__stdcall
BemCopyReference(
      BEM_REFERENCE * reference,
     BEM_REFERENCE ** copiedReference
    );

        
void
__stdcall
BemFreeReference(
      BEM_REFERENCE * reference
    );

    
void
__stdcall
BemFreeContract(
      void * contract
    );

    



#pragma endregion


}





 









#pragma once





















extern "C" {


#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
IsProcessInJob(
      HANDLE ProcessHandle,
      HANDLE JobHandle,
      PBOOL Result
    );





#pragma endregion


}





 









#pragma once





















extern "C" {


#pragma region Desktop Family









__declspec(dllimport)
BOOL
__stdcall
Wow64DisableWow64FsRedirection(
      PVOID * OldValue
    );


__declspec(dllimport)
BOOL
__stdcall
Wow64RevertWow64FsRedirection(
      PVOID OlValue
    );









__declspec(dllimport)
BOOL
__stdcall
IsWow64Process(
      HANDLE hProcess,
      PBOOL Wow64Process
    );





#pragma endregion


}





 
 











#pragma once

























extern "C" {


#pragma region Desktop Family















typedef struct tagENUMUILANG {
    ULONG  NumOfEnumUILang;    
    ULONG  SizeOfEnumUIBuffer; 
    LANGID *pEnumUIBuffer;
} ENUMUILANG, *PENUMUILANG;



typedef BOOL (__stdcall* ENUMRESLANGPROCA)(
      HMODULE hModule,
      LPCSTR lpType,
      LPCSTR lpName,
      WORD wLanguage,
      LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROCW)(
      HMODULE hModule,
      LPCWSTR lpType,
      LPCWSTR lpName,
      WORD wLanguage,
      LONG_PTR lParam);






typedef BOOL (__stdcall* ENUMRESNAMEPROCA)(
      HMODULE hModule,
      LPCSTR lpType,
      LPSTR lpName,
      LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROCW)(
      HMODULE hModule,
      LPCWSTR lpType,
      LPWSTR lpName,
      LONG_PTR lParam);






typedef BOOL (__stdcall* ENUMRESTYPEPROCA)(
      HMODULE hModule,
      LPSTR lpType,
      LONG_PTR lParam
    );
typedef BOOL (__stdcall* ENUMRESTYPEPROCW)(
      HMODULE hModule,
      LPWSTR lpType,
      LONG_PTR lParam
    );

































#pragma endregion





#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
DisableThreadLibraryCalls(
      HMODULE hLibModule
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceExW(
      HMODULE hModule,
      LPCWSTR lpType,
      LPCWSTR lpName,
      WORD wLanguage
    );







#pragma endregion

#pragma region Application Family






__declspec(dllimport)
int
__stdcall
FindStringOrdinal(
      DWORD dwFindStringOrdinalFlags,
      LPCWSTR lpStringSource,
      int cchSource,
      LPCWSTR lpStringValue,
      int cchValue,
      BOOL bIgnoreCase
    );




__declspec(dllimport)
BOOL
__stdcall
FreeLibrary(
      HMODULE hLibModule
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
FreeLibraryAndExitThread(
      HMODULE hLibModule,
      DWORD dwExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
FreeResource(
      HGLOBAL hResData
    );


__declspec(dllimport)
 
 
DWORD
__stdcall
GetModuleFileNameA(
      HMODULE hModule,
      LPSTR lpFilename,
      DWORD nSize
    );

__declspec(dllimport)
 
 
DWORD
__stdcall
GetModuleFileNameW(
      HMODULE hModule,
      LPWSTR lpFilename,
      DWORD nSize
    );







__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleA(
      LPCSTR lpModuleName
    );

__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleW(
      LPCWSTR lpModuleName
    );














typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXA)(
             DWORD        dwFlags,
         LPCSTR     lpModuleName,
     HMODULE*    phModule
    );
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXW)(
             DWORD        dwFlags,
         LPCWSTR     lpModuleName,
     HMODULE*    phModule
    );






__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExA(
      DWORD dwFlags,
      LPCSTR lpModuleName,
      HMODULE * phModule
    );

__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExW(
      DWORD dwFlags,
      LPCWSTR lpModuleName,
      HMODULE * phModule
    );










#pragma endregion

#pragma region Application Family



__declspec(dllimport)
FARPROC
__stdcall
GetProcAddress(
      HMODULE hModule,
      LPCSTR lpProcName
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryExA(
      LPCSTR lpLibFileName,
      HANDLE hFile,
      DWORD dwFlags
    );

__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryExW(
      LPCWSTR lpLibFileName,
      HANDLE hFile,
      DWORD dwFlags
    );





















__declspec(dllimport)
 
HGLOBAL
__stdcall
LoadResource(
      HMODULE hModule,
      HRSRC hResInfo
    );



#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
int
__stdcall
LoadStringA(
      HINSTANCE hInstance,
      UINT uID,
      LPSTR lpBuffer,
      int cchBufferMax
    );

__declspec(dllimport)
int
__stdcall
LoadStringW(
      HINSTANCE hInstance,
      UINT uID,
      LPWSTR lpBuffer,
      int cchBufferMax
    );








#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
LPVOID
__stdcall
LockResource(
      HGLOBAL hResData
    );


__declspec(dllimport)
DWORD
__stdcall
SizeofResource(
      HMODULE hModule,
      HRSRC hResInfo
    );



#pragma endregion



#pragma region Desktop Family



typedef PVOID DLL_DIRECTORY_COOKIE, *PDLL_DIRECTORY_COOKIE;

__declspec(dllimport)
DLL_DIRECTORY_COOKIE
__stdcall
AddDllDirectory(
      PCWSTR NewDirectory
    );


__declspec(dllimport)
BOOL
__stdcall
RemoveDllDirectory(
      DLL_DIRECTORY_COOKIE Cookie
    );


__declspec(dllimport)
BOOL
__stdcall
SetDefaultDllDirectories(
      DWORD DirectoryFlags
    );



#pragma endregion






#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExA(
      HMODULE hModule,
      LPCSTR lpType,
      LPCSTR lpName,
      ENUMRESLANGPROCA lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExW(
      HMODULE hModule,
      LPCWSTR lpType,
      LPCWSTR lpName,
      ENUMRESLANGPROCW lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );







__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExA(
      HMODULE hModule,
      LPCSTR lpType,
      ENUMRESNAMEPROCA lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExW(
      HMODULE hModule,
      LPCWSTR lpType,
      ENUMRESNAMEPROCW lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );







__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExA(
      HMODULE hModule,
      ENUMRESTYPEPROCA lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExW(
      HMODULE hModule,
      ENUMRESTYPEPROCW lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );










#pragma endregion








}






 
 










#pragma once























extern "C" {




#pragma region Desktop Family










__declspec(dllimport)
BOOL
__stdcall
AccessCheck(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      PGENERIC_MAPPING GenericMapping,
      PPRIVILEGE_SET PrivilegeSet,
      LPDWORD PrivilegeSetLength,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPWSTR ObjectTypeName,
      LPWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      DWORD DesiredAccess,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByType(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID PrincipalSelfSid,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      PPRIVILEGE_SET PrivilegeSet,
      LPDWORD PrivilegeSetLength,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultList(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID PrincipalSelfSid,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      PPRIVILEGE_SET PrivilegeSet,
      LPDWORD PrivilegeSetLength,
      LPDWORD GrantedAccessList,
      LPDWORD AccessStatusList
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPCWSTR ObjectTypeName,
      LPCWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      DWORD DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPCWSTR ObjectTypeName,
      LPCWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      DWORD DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccessList,
      LPDWORD AccessStatusList,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      HANDLE ClientToken,
      LPCWSTR ObjectTypeName,
      LPCWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      DWORD DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccessList,
      LPDWORD AccessStatusList,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAceEx(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedObjectAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      GUID * ObjectTypeGuid,
      GUID * InheritedObjectTypeGuid,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAceEx(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedObjectAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      GUID * ObjectTypeGuid,
      GUID * InheritedObjectTypeGuid,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD dwStartingAceIndex,
      LPVOID pAceList,
      DWORD nAceListLength
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD dwAccessMask,
      PSID pSid,
      BOOL bAuditSuccess,
      BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAceEx(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD dwAccessMask,
      PSID pSid,
      BOOL bAuditSuccess,
      BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessObjectAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      GUID * ObjectTypeGuid,
      GUID * InheritedObjectTypeGuid,
      PSID pSid,
      BOOL bAuditSuccess,
      BOOL bAuditFailure
    );





__declspec(dllimport)
BOOL
__stdcall
AddMandatoryAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD MandatoryPolicy,
      PSID pLabelSid
    );









__declspec(dllimport)
BOOL
__stdcall
AddResourceAttributeAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid,
      PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo,
      PDWORD pReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AddScopedPolicyIDAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid
    );






__declspec(dllimport)
BOOL
__stdcall
AdjustTokenGroups(
      HANDLE TokenHandle,
      BOOL ResetToDefault,
      PTOKEN_GROUPS NewState,
      DWORD BufferLength,
      PTOKEN_GROUPS PreviousState,
      PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenPrivileges(
      HANDLE TokenHandle,
      BOOL DisableAllPrivileges,
      PTOKEN_PRIVILEGES NewState,
      DWORD BufferLength,
      PTOKEN_PRIVILEGES PreviousState,
      PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateAndInitializeSid(
      PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
      BYTE nSubAuthorityCount,
      DWORD nSubAuthority0,
      DWORD nSubAuthority1,
      DWORD nSubAuthority2,
      DWORD nSubAuthority3,
      DWORD nSubAuthority4,
      DWORD nSubAuthority5,
      DWORD nSubAuthority6,
      DWORD nSubAuthority7,
     PSID * pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateLocallyUniqueId(
      PLUID Luid
    );


__declspec(dllimport)
BOOL
__stdcall
AreAllAccessesGranted(
      DWORD GrantedAccess,
      DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
AreAnyAccessesGranted(
      DWORD GrantedAccess,
      DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembership(
      HANDLE TokenHandle,
      PSID SidToCheck,
      PBOOL IsMember
    );







__declspec(dllimport)
BOOL
__stdcall
CheckTokenCapability(
      HANDLE TokenHandle,
      PSID CapabilitySidToCheck,
      PBOOL HasCapability
    );


__declspec(dllimport)
BOOL
__stdcall
GetAppContainerAce(
      PACL Acl,
      DWORD StartingAceIndex,
     PVOID * AppContainerAce,
      DWORD * AppContainerAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembershipEx(
      HANDLE TokenHandle,
      PSID SidToCheck,
      DWORD Flags,
      PBOOL IsMember
    );






__declspec(dllimport)
BOOL
__stdcall
ConvertToAutoInheritPrivateObjectSecurity(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
     PSECURITY_DESCRIPTOR * NewSecurityDescriptor,
      GUID * ObjectType,
      BOOLEAN IsDirectoryObject,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CopySid(
      DWORD nDestinationSidLength,
      PSID pDestinationSid,
      PSID pSourceSid
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurity(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CreatorDescriptor,
     PSECURITY_DESCRIPTOR * NewDescriptor,
      BOOL IsDirectoryObject,
      HANDLE Token,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityEx(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CreatorDescriptor,
     PSECURITY_DESCRIPTOR * NewDescriptor,
      GUID * ObjectType,
      BOOL IsContainerObject,
      ULONG AutoInheritFlags,
      HANDLE Token,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityWithMultipleInheritance(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CreatorDescriptor,
     PSECURITY_DESCRIPTOR * NewDescriptor,
      GUID ** ObjectTypes,
      ULONG GuidCount,
      BOOL IsContainerObject,
      ULONG AutoInheritFlags,
      HANDLE Token,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreateRestrictedToken(
      HANDLE ExistingTokenHandle,
      DWORD Flags,
      DWORD DisableSidCount,
      PSID_AND_ATTRIBUTES SidsToDisable,
      DWORD DeletePrivilegeCount,
      PLUID_AND_ATTRIBUTES PrivilegesToDelete,
      DWORD RestrictedSidCount,
      PSID_AND_ATTRIBUTES SidsToRestrict,
     PHANDLE NewTokenHandle
    );





__declspec(dllimport)
 
BOOL
__stdcall
CreateWellKnownSid(
      WELL_KNOWN_SID_TYPE WellKnownSidType,
      PSID DomainSid,
      PSID pSid,
      DWORD * cbSid
    );


__declspec(dllimport)
 
BOOL
__stdcall
EqualDomainSid(
      PSID pSid1,
      PSID pSid2,
      BOOL * pfEqual
    );




__declspec(dllimport)
BOOL
__stdcall
DeleteAce(
      PACL pAcl,
      DWORD dwAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
DestroyPrivateObjectSecurity(
        PSECURITY_DESCRIPTOR * ObjectDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateToken(
      HANDLE ExistingTokenHandle,
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
     PHANDLE DuplicateTokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateTokenEx(
      HANDLE hExistingToken,
      DWORD dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpTokenAttributes,
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
      TOKEN_TYPE TokenType,
     PHANDLE phNewToken
    );


__declspec(dllimport)
BOOL
__stdcall
EqualPrefixSid(
      PSID pSid1,
      PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
EqualSid(
      PSID pSid1,
      PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
FindFirstFreeAce(
      PACL pAcl,
     LPVOID * pAce
    );


__declspec(dllimport)
PVOID
__stdcall
FreeSid(
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetAce(
      PACL pAcl,
      DWORD dwAceIndex,
     LPVOID * pAce
    );


__declspec(dllimport)
BOOL
__stdcall
GetAclInformation(
      PACL pAcl,
      LPVOID pAclInformation,
      DWORD nAclInformationLength,
      ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityW(
      LPCWSTR lpFileName,
      SECURITY_INFORMATION RequestedInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      DWORD nLength,
      LPDWORD lpnLengthNeeded
    );






__declspec(dllimport)
BOOL
__stdcall
GetKernelObjectSecurity(
      HANDLE Handle,
      SECURITY_INFORMATION RequestedInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      DWORD nLength,
      LPDWORD lpnLengthNeeded
    );


__declspec(dllimport)
 
 
DWORD
__stdcall
GetLengthSid(
        PSID pSid
    );


__declspec(dllimport)
 
BOOL
__stdcall
GetPrivateObjectSecurity(
      PSECURITY_DESCRIPTOR ObjectDescriptor,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ResultantDescriptor,
      DWORD DescriptorLength,
      PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorControl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSECURITY_DESCRIPTOR_CONTROL pControl,
      LPDWORD lpdwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorDacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      LPBOOL lpbDaclPresent,
     PACL * pDacl,
      LPBOOL lpbDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorGroup(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
     PSID * pGroup,
      LPBOOL lpbGroupDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorLength(
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorOwner(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
     PSID * pOwner,
      LPBOOL lpbOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorRMControl(
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorSacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      LPBOOL lpbSaclPresent,
     PACL * pSacl,
      LPBOOL lpbSaclDefaulted
    );


__declspec(dllimport)
PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority(
      PSID pSid
    );


__declspec(dllimport)
DWORD
__stdcall
GetSidLengthRequired(
      UCHAR nSubAuthorityCount
    );


__declspec(dllimport)
PDWORD
__stdcall
GetSidSubAuthority(
      PSID pSid,
      DWORD nSubAuthority
    );


__declspec(dllimport)
PUCHAR
__stdcall
GetSidSubAuthorityCount(
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetTokenInformation(
      HANDLE TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      LPVOID TokenInformation,
      DWORD TokenInformationLength,
      PDWORD ReturnLength
    );





__declspec(dllimport)
 
BOOL
__stdcall
GetWindowsAccountDomainSid(
      PSID pSid,
      PSID pDomainSid,
      DWORD * cbDomainSid
    );




__declspec(dllimport)
BOOL
__stdcall
ImpersonateAnonymousToken(
      HANDLE ThreadHandle
    );


 
__declspec(dllimport)
BOOL
__stdcall
ImpersonateLoggedOnUser(
      HANDLE hToken
    );


 
__declspec(dllimport)
BOOL
__stdcall
ImpersonateSelf(
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeAcl(
      PACL pAcl,
      DWORD nAclLength,
      DWORD dwAclRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSecurityDescriptor(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      DWORD dwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSid(
      PSID Sid,
      PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
      BYTE nSubAuthorityCount
    );


__declspec(dllimport)
BOOL
__stdcall
IsTokenRestricted(
      HANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidAcl(
      PACL pAcl
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSecurityDescriptor(
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSid(
      PSID pSid
    );





__declspec(dllimport)
BOOL
__stdcall
IsWellKnownSid(
      PSID pSid,
      WELL_KNOWN_SID_TYPE WellKnownSidType
    );




__declspec(dllimport)
 
BOOL
__stdcall
MakeAbsoluteSD(
      PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
      PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
      LPDWORD lpdwAbsoluteSecurityDescriptorSize,
      PACL pDacl,
      LPDWORD lpdwDaclSize,
      PACL pSacl,
      LPDWORD lpdwSaclSize,
      PSID pOwner,
      LPDWORD lpdwOwnerSize,
      PSID pPrimaryGroup,
      LPDWORD lpdwPrimaryGroupSize
    );


__declspec(dllimport)
 
BOOL
__stdcall
MakeSelfRelativeSD(
      PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
      PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
      LPDWORD lpdwBufferLength
    );


__declspec(dllimport)
void
__stdcall
MapGenericMask(
      PDWORD AccessMask,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPWSTR ObjectTypeName,
      LPWSTR ObjectName,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      DWORD GrantedAccess,
      PPRIVILEGE_SET Privileges,
      BOOL ObjectCreation,
      BOOL AccessGranted,
      LPBOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );






__declspec(dllimport)
BOOL
__stdcall
PrivilegeCheck(
      HANDLE ClientToken,
      PPRIVILEGE_SET RequiredPrivileges,
      LPBOOL pfResult
    );


__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmW(
      LPCWSTR SubsystemName,
      LPCWSTR ServiceName,
      HANDLE ClientToken,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );









__declspec(dllimport)
void
__stdcall
QuerySecurityAccessMask(
      SECURITY_INFORMATION SecurityInformation,
      LPDWORD DesiredAccess
    );




__declspec(dllimport)
BOOL
__stdcall
RevertToSelf(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
SetAclInformation(
      PACL pAcl,
      LPVOID pAclInformation,
      DWORD nAclInformationLength,
      ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityW(
      LPCWSTR lpFileName,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );





__declspec(dllimport)
BOOL
__stdcall
SetKernelObjectSecurity(
      HANDLE Handle,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR SecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurity(
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ModificationDescriptor,
      PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
      PGENERIC_MAPPING GenericMapping,
      HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurityEx(
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ModificationDescriptor,
      PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
      ULONG AutoInheritFlags,
      PGENERIC_MAPPING GenericMapping,
      HANDLE Token
    );





__declspec(dllimport)
void
__stdcall
SetSecurityAccessMask(
      SECURITY_INFORMATION SecurityInformation,
      LPDWORD DesiredAccess
    );




__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorControl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
      SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorDacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      BOOL bDaclPresent,
      PACL pDacl,
      BOOL bDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorGroup(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID pGroup,
      BOOL bGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorOwner(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID pOwner,
      BOOL bOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
SetSecurityDescriptorRMControl(
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorSacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      BOOL bSaclPresent,
      PACL pSacl,
      BOOL bSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetTokenInformation(
      HANDLE TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      LPVOID TokenInformation,
      DWORD TokenInformationLength
    );







__declspec(dllimport)
BOOL
__stdcall
SetCachedSigningLevel(
      PHANDLE SourceFiles,
      ULONG SourceFileCount,
      ULONG Flags,
      HANDLE TargetFile
    );


__declspec(dllimport)
BOOL
__stdcall
GetCachedSigningLevel(
      HANDLE File,
      PULONG Flags,
      PULONG SigningLevel,
      PUCHAR Thumbprint,
      PULONG ThumbprintSize,
      PULONG ThumbprintAlgorithm
    );

    



#pragma endregion




}






 









#pragma once





















extern "C" {


#pragma region Desktop Family





__declspec(dllimport)
HANDLE
__stdcall
CreatePrivateNamespaceW(
      LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
      LPVOID lpBoundaryDescriptor,
      LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenPrivateNamespaceW(
      LPVOID lpBoundaryDescriptor,
      LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
BOOLEAN
__stdcall
ClosePrivateNamespace(
      HANDLE Handle,
      ULONG Flags
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateBoundaryDescriptorW(
      LPCWSTR Name,
      ULONG Flags
    );


__declspec(dllimport)
BOOL
__stdcall
AddSIDToBoundaryDescriptor(
      HANDLE * BoundaryDescriptor,
      PSID RequiredSid
    );


__declspec(dllimport)
void
__stdcall
DeleteBoundaryDescriptor(
      HANDLE BoundaryDescriptor
    );



#pragma endregion


}





 









#pragma once





















extern "C" {


#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetNumaHighestNodeNumber(
      PULONG HighestNodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMaskEx(
      USHORT Node,
      PGROUP_AFFINITY ProcessorMask
    );





#pragma endregion


}





 
 









#pragma once























extern "C" {


#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
GetProcessGroupAffinity(
      HANDLE hProcess,
      PUSHORT GroupCount,
      PUSHORT GroupArray
    );





#pragma endregion


#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
GetThreadGroupAffinity(
      HANDLE hThread,
      PGROUP_AFFINITY GroupAffinity
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadGroupAffinity(
      HANDLE hThread,
      const GROUP_AFFINITY * GroupAffinity,
      PGROUP_AFFINITY PreviousGroupAffinity
    );





#pragma endregion


}





 









#pragma once






















#pragma region Desktop Family




extern "C" {









BOOL
__stdcall
GetAppContainerNamedObjectPath(
      HANDLE Token,
      PSID AppContainerSid,
      ULONG ObjectPathLength,
      LPWSTR ObjectPath,
      PULONG ReturnLength
    );





}



#pragma endregion




 









#pragma once




















extern "C" {


#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
QueryThreadCycleTime(
      HANDLE ThreadHandle,
      PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessCycleTime(
      HANDLE ProcessHandle,
      PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTime(
      PULONG BufferLength,
      PULONG64 ProcessorIdleCycleTime
    );







__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTimeEx(
      USHORT Group,
      PULONG BufferLength,
      PULONG64 ProcessorIdleCycleTime
    );

    



#pragma endregion

#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
QueryUnbiasedInterruptTime(
      PULONGLONG UnbiasedTime
    );





#pragma endregion


}






extern "C" {


#pragma region Application Family













#pragma endregion

#pragma region Desktop Family





#pragma endregion

#pragma region Application Family

























































































































































































typedef void (__stdcall *PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter
    );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;

typedef LPVOID (__stdcall *PFIBER_CALLOUT_ROUTINE)(
    LPVOID lpParameter
    );












typedef LPVOID LPLDT_ENTRY;






































































































typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
















typedef struct _DCB {
    DWORD DCBlength;      
    DWORD BaudRate;       
    DWORD fBinary: 1;     
    DWORD fParity: 1;     
    DWORD fOutxCtsFlow:1; 
    DWORD fOutxDsrFlow:1; 
    DWORD fDtrControl:2;  
    DWORD fDsrSensitivity:1; 
    DWORD fTXContinueOnXoff: 1; 
    DWORD fOutX: 1;       
    DWORD fInX: 1;        
    DWORD fErrorChar: 1;  
    DWORD fNull: 1;       
    DWORD fRtsControl:2;  
    DWORD fAbortOnError:1; 
    DWORD fDummy2:17;     
    WORD wReserved;       
    WORD XonLim;          
    WORD XoffLim;         
    BYTE ByteSize;        
    BYTE Parity;          
    BYTE StopBits;        
    char XonChar;         
    char XoffChar;        
    char ErrorChar;       
    char EofChar;         
    char EvtChar;         
    WORD wReserved1;      
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;          
    DWORD ReadTotalTimeoutMultiplier;   
    DWORD ReadTotalTimeoutConstant;     
    DWORD WriteTotalTimeoutMultiplier;  
    DWORD WriteTotalTimeoutConstant;    
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;               
    WORD wVersion;              
    WORD wReserved;             
    DCB dcb;                    
    DWORD dwProviderSubType;    

    DWORD dwProviderOffset;     

    DWORD dwProviderSize;       
    WCHAR wcProviderData[1];    
} COMMCONFIG,*LPCOMMCONFIG;




































typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;



























































































typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;

typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;


typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;





















































































































































































































typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;







#pragma endregion

#pragma region Desktop Family


int




__stdcall




WinMain (
      HINSTANCE hInstance,
      HINSTANCE hPrevInstance,
      LPSTR lpCmdLine,
      int nShowCmd
    );

int



__stdcall

wWinMain(
      HINSTANCE hInstance,
      HINSTANCE hPrevInstance,
      LPWSTR lpCmdLine,
      int nShowCmd
    );

__declspec(dllimport)
 
 
HGLOBAL
__stdcall
GlobalAlloc(
      UINT uFlags,
      SIZE_T dwBytes
    );

__declspec(dllimport)
   
HGLOBAL
__stdcall
GlobalReAlloc (
      HGLOBAL hMem,
      SIZE_T dwBytes,
      UINT uFlags
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalSize (
      HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalFlags (
      HGLOBAL hMem
    );

__declspec(dllimport)
 
LPVOID
__stdcall
GlobalLock (
      HGLOBAL hMem
    );

__declspec(dllimport)
 
HGLOBAL
__stdcall
GlobalHandle (
      LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnlock(
      HGLOBAL hMem
    );

__declspec(dllimport)
 
 
HGLOBAL
__stdcall
GlobalFree(
      HGLOBAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalCompact(
      DWORD dwMinFree
    );

__declspec(dllimport)
void
__stdcall
GlobalFix(
      HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalUnfix(
      HGLOBAL hMem
    );

__declspec(dllimport)
LPVOID
__stdcall
GlobalWire(
      HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnWire(
      HGLOBAL hMem
    );

 
__declspec(dllimport)
void
__stdcall
GlobalMemoryStatus(
      LPMEMORYSTATUS lpBuffer
    );

__declspec(dllimport)
 
 
HLOCAL
__stdcall
LocalAlloc(
      UINT uFlags,
      SIZE_T uBytes
    );

__declspec(dllimport)
   
HLOCAL
__stdcall
LocalReAlloc(
      HLOCAL hMem,
      SIZE_T uBytes,
      UINT uFlags
    );

__declspec(dllimport)
 
LPVOID
__stdcall
LocalLock(
      HLOCAL hMem
    );

__declspec(dllimport)
 
HLOCAL
__stdcall
LocalHandle(
      LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
LocalUnlock(
      HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalSize(
      HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalFlags(
      HLOCAL hMem
    );

__declspec(dllimport)
 
 
HLOCAL
__stdcall
LocalFree(
      HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalShrink(
      HLOCAL hMem,
      UINT cbNewSize
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalCompact(
      UINT uMinFree
    );



__declspec(dllimport)
BOOL
__stdcall
GetProcessorSystemCycleTime (
      USHORT Group,
      PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,
      PDWORD ReturnedLength
    );



















__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeA(
       LPCSTR lpApplicationName,
      LPDWORD  lpBinaryType
    );
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeW(
       LPCWSTR lpApplicationName,
      LPDWORD  lpBinaryType
    );






__declspec(dllimport)
 
DWORD
__stdcall
GetShortPathNameA(
      LPCSTR lpszLongPath,
      LPSTR  lpszShortPath,
      DWORD cchBuffer
    );






__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameTransactedA(
          LPCSTR lpszShortPath,
      LPSTR  lpszLongPath,
          DWORD cchBuffer,
          HANDLE hTransaction
    );
__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameTransactedW(
          LPCWSTR lpszShortPath,
      LPWSTR  lpszLongPath,
          DWORD cchBuffer,
          HANDLE hTransaction
    );








__declspec(dllimport)
BOOL
__stdcall
GetProcessAffinityMask(
       HANDLE hProcess,
      PDWORD_PTR lpProcessAffinityMask,
      PDWORD_PTR lpSystemAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityMask(
      HANDLE hProcess,
      DWORD_PTR dwProcessAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessIoCounters(
       HANDLE hProcess,
      PIO_COUNTERS lpIoCounters
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSize(
       HANDLE hProcess,
      PSIZE_T lpMinimumWorkingSetSize,
      PSIZE_T lpMaximumWorkingSetSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSize(
      HANDLE hProcess,
      SIZE_T dwMinimumWorkingSetSize,
      SIZE_T dwMaximumWorkingSetSize
    );

__declspec(dllimport)

void
__stdcall
FatalExit(
      int ExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsA(
         LPCH NewEnvironment
    );





#pragma endregion

#pragma region Application Family


__declspec(dllimport)
void
__stdcall
RaiseFailFastException(
      PEXCEPTION_RECORD pExceptionRecord,
      PCONTEXT pContextRecord,
      DWORD dwFlags
    );


#pragma endregion







#pragma region Application Family




__declspec(dllimport)
void
__stdcall
SwitchToFiber(
      LPVOID lpFiber
    );

__declspec(dllimport)
void
__stdcall
DeleteFiber(
      LPVOID lpFiber
    );



__declspec(dllimport)
BOOL
__stdcall
ConvertFiberToThread(
    void
    );





__declspec(dllimport)
 
PVOID
__stdcall
CalloutOnFiberStack(
      PVOID lpFiber,
      PFIBER_CALLOUT_ROUTINE lpStartAddress,
      PVOID lpParameter
    );



__declspec(dllimport)
 
LPVOID
__stdcall
CreateFiberEx(
          SIZE_T dwStackCommitSize,
          SIZE_T dwStackReserveSize,
          DWORD dwFlags,
          LPFIBER_START_ROUTINE lpStartAddress,
      LPVOID lpParameter
    );

__declspec(dllimport)
 
LPVOID
__stdcall
ConvertThreadToFiberEx(
      LPVOID lpParameter,
          DWORD dwFlags
    );


#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
 
LPVOID
__stdcall
CreateFiber(
          SIZE_T dwStackSize,
          LPFIBER_START_ROUTINE lpStartAddress,
      LPVOID lpParameter
    );

__declspec(dllimport)
 
LPVOID
__stdcall
ConvertThreadToFiber(
      LPVOID lpParameter
    );


#pragma endregion









#pragma region Desktop Family






typedef void *PUMS_CONTEXT;

typedef void *PUMS_COMPLETION_LIST;

typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;

typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;

typedef struct _UMS_SCHEDULER_STARTUP_INFO {

    
    
    
    ULONG UmsVersion;

    
    
    
    PUMS_COMPLETION_LIST CompletionList;

    
    
    
    
    PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;

    
    
    
    PVOID SchedulerParam;

} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO;

typedef struct _UMS_SYSTEM_THREAD_INFORMATION {
    ULONG UmsVersion;
    union {
        struct {
            ULONG IsUmsSchedulerThread : 1;
            ULONG IsUmsWorkerThread : 1;
        } ;
        ULONG ThreadUmsFlags;
    } ;
} UMS_SYSTEM_THREAD_INFORMATION, *PUMS_SYSTEM_THREAD_INFORMATION;

 
__declspec(dllimport)
BOOL
__stdcall
CreateUmsCompletionList(
     PUMS_COMPLETION_LIST* UmsCompletionList
    );

__declspec(dllimport)
BOOL
__stdcall
DequeueUmsCompletionListItems(
      PUMS_COMPLETION_LIST UmsCompletionList,
      DWORD WaitTimeOut,
      PUMS_CONTEXT* UmsThreadList
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsCompletionListEvent(
      PUMS_COMPLETION_LIST UmsCompletionList,
      PHANDLE UmsCompletionEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ExecuteUmsThread(
      PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
UmsThreadYield(
      PVOID SchedulerParam
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsCompletionList(
      PUMS_COMPLETION_LIST UmsCompletionList
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetCurrentUmsThread(
    void
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetNextUmsListItem(
      PUMS_CONTEXT UmsContext
    );

__declspec(dllimport)
BOOL
__stdcall
QueryUmsThreadInformation(
      PUMS_CONTEXT UmsThread,
      UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
      PVOID UmsThreadInformation,
      ULONG UmsThreadInformationLength,
      PULONG ReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetUmsThreadInformation(
      PUMS_CONTEXT UmsThread,
      UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
      PVOID UmsThreadInformation,
      ULONG UmsThreadInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsThreadContext(
      PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
CreateUmsThreadContext(
     PUMS_CONTEXT *lpUmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
EnterUmsSchedulingMode(
      PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsSystemThreadInformation(
      HANDLE ThreadHandle,
      PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo
    );




#pragma endregion







#pragma region Desktop Family


__declspec(dllimport)
DWORD_PTR
__stdcall
SetThreadAffinityMask(
      HANDLE hThread,
      DWORD_PTR dwThreadAffinityMask
    );

#pragma endregion

#pragma region Application Family


__declspec(dllimport)
DWORD
__stdcall
SetThreadIdealProcessor(
      HANDLE hThread,
      DWORD dwIdealProcessor
    );


#pragma endregion

#pragma region Desktop Family






typedef enum _PROCESS_INFORMATION_CLASS {
    ProcessMemoryPriority,
    ProcessInformationClassMax
} PROCESS_INFORMATION_CLASS;



__declspec(dllimport)
BOOL
__stdcall
GetProcessInformation (
      HANDLE hProcess,
      PROCESS_INFORMATION_CLASS ProcessInformationClass,
      LPVOID ProcessInformation,
      DWORD ProcessInformationSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessInformation (
      HANDLE hProcess,
      PROCESS_INFORMATION_CLASS ProcessInformationClass,
      LPVOID ProcessInformation,
      DWORD ProcessInformationSize
    );








__declspec(dllimport)
BOOL
__stdcall
SetProcessDEPPolicy(
      DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessDEPPolicy(
      HANDLE hProcess,
      LPDWORD lpFlags,
      PBOOL lpPermanent
    );



__declspec(dllimport)
BOOL
__stdcall
RequestWakeupLatency(
      LATENCY_TIME latency
    );

__declspec(dllimport)
BOOL
__stdcall
IsSystemResumeAutomatic(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadSelectorEntry(
       HANDLE hThread,
       DWORD dwSelector,
      LPLDT_ENTRY lpSelectorEntry
    );

__declspec(dllimport)
EXECUTION_STATE
__stdcall
SetThreadExecutionState(
      EXECUTION_STATE esFlags
    );







typedef REASON_CONTEXT POWER_REQUEST_CONTEXT, *PPOWER_REQUEST_CONTEXT, *LPPOWER_REQUEST_CONTEXT;

__declspec(dllimport)
HANDLE
__stdcall
PowerCreateRequest (
      PREASON_CONTEXT Context
    );

__declspec(dllimport)
BOOL
__stdcall
PowerSetRequest (
      HANDLE PowerRequest,
      POWER_REQUEST_TYPE RequestType
    );

__declspec(dllimport)
BOOL
__stdcall
PowerClearRequest (
      HANDLE PowerRequest,
      POWER_REQUEST_TYPE RequestType
    );




#pragma endregion

#pragma region Application Family







#pragma endregion

#pragma region Desktop Family









































__declspec(dllimport)
BOOL
__stdcall
SetFileCompletionNotificationModes(
      HANDLE FileHandle,
      UCHAR Flags
    );












__declspec(dllimport)
DWORD
__stdcall
GetThreadErrorMode(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadErrorMode(
      DWORD dwNewMode,
      LPDWORD lpOldMode
    );





__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadContext(
         HANDLE hThread,
      PWOW64_CONTEXT lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
Wow64SetThreadContext(
      HANDLE hThread,
      const WOW64_CONTEXT *lpContext
    );





__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadSelectorEntry(
      HANDLE hThread,
      DWORD dwSelector,
      PWOW64_LDT_ENTRY lpSelectorEntry
    );







__declspec(dllimport)
DWORD
__stdcall
Wow64SuspendThread(
      HANDLE hThread
    );



__declspec(dllimport)
BOOL
__stdcall
DebugSetProcessKillOnExit(
      BOOL KillOnExit
    );

__declspec(dllimport)
BOOL
__stdcall
DebugBreakProcess (
      HANDLE Process
    );


#pragma endregion

#pragma region Application Family







#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
PulseEvent(
      HANDLE hEvent
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjects(
      DWORD nCount,
      const HANDLE *lpHandles,
      BOOL bWaitAll,
      DWORD dwMilliseconds
    );

__declspec(dllimport)
ATOM
__stdcall
GlobalDeleteAtom(
      ATOM nAtom
    );

__declspec(dllimport)
BOOL
__stdcall
InitAtomTable(
      DWORD nSize
    );

__declspec(dllimport)
ATOM
__stdcall
DeleteAtom(
      ATOM nAtom
    );

__declspec(dllimport)
UINT
__stdcall
SetHandleCount(
      UINT uNumber
    );

__declspec(dllimport)
BOOL
__stdcall
RequestDeviceWakeup(
      HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
CancelDeviceWakeupRequest(
      HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
GetDevicePowerState(
       HANDLE hDevice,
      BOOL *pfOn
    );

__declspec(dllimport)
BOOL
__stdcall
SetMessageWaitingIndicator(
      HANDLE hMsgIndicator,
      ULONG ulMsgCount
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameA(
      HANDLE hFile,
      LPCSTR lpShortName
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameW(
      HANDLE hFile,
      LPCWSTR lpShortName
    );











__declspec(dllimport)
DWORD
__stdcall
LoadModule(
      LPCSTR lpModuleName,
      LPVOID lpParameterBlock
    );


 
__declspec(dllimport)
UINT
__stdcall
WinExec(
      LPCSTR lpCmdLine,
      UINT uCmdShow
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommBreak(
      HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommError(
           HANDLE hFile,
      LPDWORD lpErrors,
      LPCOMSTAT lpStat
    );

__declspec(dllimport)
BOOL
__stdcall
SetupComm(
      HANDLE hFile,
      DWORD dwInQueue,
      DWORD dwOutQueue
    );

__declspec(dllimport)
BOOL
__stdcall
EscapeCommFunction(
      HANDLE hFile,
      DWORD dwFunc
    );

__declspec(dllimport)
 
BOOL
__stdcall
GetCommConfig(
           HANDLE hCommDev,
      LPCOMMCONFIG lpCC,
        LPDWORD lpdwSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommMask(
       HANDLE hFile,
      LPDWORD lpEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommProperties(
         HANDLE hFile,
      LPCOMMPROP lpCommProp
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommModemStatus(
       HANDLE hFile,
      LPDWORD lpModemStat
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommState(
       HANDLE hFile,
      LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommTimeouts(
       HANDLE hFile,
      LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
PurgeComm(
      HANDLE hFile,
      DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommBreak(
      HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommConfig(
      HANDLE hCommDev,
      LPCOMMCONFIG lpCC,
      DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommMask(
      HANDLE hFile,
      DWORD dwEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommState(
      HANDLE hFile,
      LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommTimeouts(
      HANDLE hFile,
      LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
TransmitCommChar(
      HANDLE hFile,
      char cChar
    );

__declspec(dllimport)
BOOL
__stdcall
WaitCommEvent(
             HANDLE hFile,
          LPDWORD lpEvtMask,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
DWORD
__stdcall
SetTapePosition(
      HANDLE hDevice,
      DWORD dwPositionMethod,
      DWORD dwPartition,
      DWORD dwOffsetLow,
      DWORD dwOffsetHigh,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapePosition(
       HANDLE hDevice,
       DWORD dwPositionType,
      LPDWORD lpdwPartition,
      LPDWORD lpdwOffsetLow,
      LPDWORD lpdwOffsetHigh
    );

__declspec(dllimport)
DWORD
__stdcall
PrepareTape(
      HANDLE hDevice,
      DWORD dwOperation,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
EraseTape(
      HANDLE hDevice,
      DWORD dwEraseType,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
CreateTapePartition(
      HANDLE hDevice,
      DWORD dwPartitionMethod,
      DWORD dwCount,
      DWORD dwSize
    );

__declspec(dllimport)
DWORD
__stdcall
WriteTapemark(
      HANDLE hDevice,
      DWORD dwTapemarkType,
      DWORD dwTapemarkCount,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeStatus(
      HANDLE hDevice
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeParameters(
         HANDLE hDevice,
         DWORD dwOperation,
      LPDWORD lpdwSize,
      LPVOID lpTapeInformation
    );




__declspec(dllimport)
DWORD
__stdcall
SetTapeParameters(
      HANDLE hDevice,
      DWORD dwOperation,
      LPVOID lpTapeInformation
    );





#pragma endregion

#pragma region Application Family


__declspec(dllimport)
int
__stdcall
MulDiv(
      int nNumber,
      int nNumerator,
      int nDenominator
    );


#pragma endregion

#pragma region Desktop Family


typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
} DEP_SYSTEM_POLICY_TYPE;



__declspec(dllimport)
DEP_SYSTEM_POLICY_TYPE
__stdcall
GetSystemDEPPolicy(
    void
    );





__declspec(dllimport)
BOOL
__stdcall
GetSystemRegistryQuota(
      PDWORD pdwQuotaAllowed,
      PDWORD pdwQuotaUsed
    );







__declspec(dllimport)
BOOL
__stdcall
FileTimeToDosDateTime(
       const FILETIME *lpFileTime,
      LPWORD lpFatDate,
      LPWORD lpFatTime
    );

__declspec(dllimport)
BOOL
__stdcall
DosDateTimeToFileTime(
       WORD wFatDate,
       WORD wFatTime,
      LPFILETIME lpFileTime
    );


#pragma endregion


#pragma region Application Family



__declspec(dllimport)
 
DWORD
__stdcall
FormatMessageA(
          DWORD dwFlags,
      LPCVOID lpSource,
          DWORD dwMessageId,
          DWORD dwLanguageId,
         LPSTR lpBuffer,
          DWORD nSize,
      va_list *Arguments
    );
__declspec(dllimport)
 
DWORD
__stdcall
FormatMessageW(
          DWORD dwFlags,
      LPCVOID lpSource,
          DWORD dwMessageId,
          DWORD dwLanguageId,
         LPWSTR lpBuffer,
          DWORD nSize,
      va_list *Arguments
    );













































#pragma endregion

#pragma region Desktop Family










__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeInfo(
           HANDLE hNamedPipe,
      LPDWORD lpFlags,
      LPDWORD lpOutBufferSize,
      LPDWORD lpInBufferSize,
      LPDWORD lpMaxInstances
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotA(
          LPCSTR lpName,
          DWORD nMaxMessageSize,
          DWORD lReadTimeout,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotW(
          LPCWSTR lpName,
          DWORD nMaxMessageSize,
          DWORD lReadTimeout,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
GetMailslotInfo(
           HANDLE hMailslot,
      LPDWORD lpMaxMessageSize,
      LPDWORD lpNextSize,
      LPDWORD lpMessageCount,
      LPDWORD lpReadTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
SetMailslotInfo(
      HANDLE hMailslot,
      DWORD lReadTimeout
    );





__declspec(dllimport)
BOOL
__stdcall
EncryptFileA(
      LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
EncryptFileW(
      LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
DecryptFileA(
            LPCSTR lpFileName,
      DWORD dwReserved
    );
__declspec(dllimport)
BOOL
__stdcall
DecryptFileW(
            LPCWSTR lpFileName,
      DWORD dwReserved
    );





















__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusA(
       LPCSTR lpFileName,
      LPDWORD  lpStatus
    );
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusW(
       LPCWSTR lpFileName,
      LPDWORD  lpStatus
    );












typedef
DWORD
(__stdcall *PFE_EXPORT_FUNC)(
      PBYTE pbData,
      PVOID pvCallbackContext,
          ULONG ulLength
    );

typedef
DWORD
(__stdcall *PFE_IMPORT_FUNC)(
      PBYTE pbData,
      PVOID pvCallbackContext,
       PULONG ulLength
    );












__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawA(
             LPCSTR lpFileName,
             ULONG    ulFlags,
     PVOID   *pvContext
    );
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawW(
             LPCWSTR lpFileName,
             ULONG    ulFlags,
     PVOID   *pvContext
    );






__declspec(dllimport)
DWORD
__stdcall
ReadEncryptedFileRaw(
          PFE_EXPORT_FUNC pfExportCallback,
      PVOID           pvCallbackContext,
          PVOID           pvContext
    );

__declspec(dllimport)
DWORD
__stdcall
WriteEncryptedFileRaw(
          PFE_IMPORT_FUNC pfImportCallback,
      PVOID           pvCallbackContext,
          PVOID           pvContext
    );

__declspec(dllimport)
void
__stdcall
CloseEncryptedFileRaw(
      PVOID           pvContext
    );





__declspec(dllimport)
int
__stdcall
lstrcmpA(
      LPCSTR lpString1,
      LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpW(
      LPCWSTR lpString1,
      LPCWSTR lpString2
    );






__declspec(dllimport)
int
__stdcall
lstrcmpiA(
      LPCSTR lpString1,
      LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpiW(
      LPCWSTR lpString1,
      LPCWSTR lpString2
    );






__declspec(dllimport)
 
 
 
 
LPSTR
__stdcall
lstrcpynA(
      LPSTR lpString1,
      LPCSTR lpString2,
      int iMaxLength
    );
__declspec(dllimport)
 
 
 
 
LPWSTR
__stdcall
lstrcpynW(
      LPWSTR lpString1,
      LPCWSTR lpString2,
      int iMaxLength
    );







#pragma warning(push)
#pragma warning(disable:4995)


__declspec(dllimport)
LPSTR
__stdcall
lstrcpyA(
      LPSTR lpString1, 
       LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpyW(
      LPWSTR lpString1, 
       LPCWSTR lpString2
    );






__declspec(dllimport)
LPSTR
__stdcall
lstrcatA(
      LPSTR lpString1, 
         LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcatW(
      LPWSTR lpString1, 
         LPCWSTR lpString2
    );







#pragma warning(pop)


__declspec(dllimport)
int
__stdcall
lstrlenA(
      LPCSTR lpString
    );
__declspec(dllimport)
int
__stdcall
lstrlenW(
      LPCWSTR lpString
    );






__declspec(dllimport)
HFILE
__stdcall
OpenFile(
         LPCSTR lpFileName,
      LPOFSTRUCT lpReOpenBuff,
         UINT uStyle
    );

__declspec(dllimport)
HFILE
__stdcall
_lopen(
      LPCSTR lpPathName,
      int iReadWrite
    );

__declspec(dllimport)
HFILE
__stdcall
_lcreat(
      LPCSTR lpPathName,
      int  iAttribute
    );

__declspec(dllimport)
UINT
__stdcall
_lread(
      HFILE hFile,
      LPVOID lpBuffer,
      UINT uBytes
    );

__declspec(dllimport)
UINT
__stdcall
_lwrite(
      HFILE hFile,
      LPCCH lpBuffer,
      UINT uBytes
    );

__declspec(dllimport)
long
__stdcall
_hread(
      HFILE hFile,
      LPVOID lpBuffer,
      long lBytes
    );

__declspec(dllimport)
long
__stdcall
_hwrite(
      HFILE hFile,
      LPCCH lpBuffer,
      long lBytes
    );

__declspec(dllimport)
HFILE
__stdcall
_lclose(
      HFILE hFile
    );

__declspec(dllimport)
LONG
__stdcall
_llseek(
      HFILE hFile,
      LONG lOffset,
      int iOrigin
    );

__declspec(dllimport)
BOOL
__stdcall
IsTextUnicode(
      const void* lpv,
             int iSize,
      LPINT lpiResult
    );


__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
      HANDLE hObjectToSignal,
      HANDLE hObjectToWaitOn,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


__declspec(dllimport)
BOOL
__stdcall
BackupRead(
         HANDLE hFile,
      LPBYTE lpBuffer,
         DWORD nNumberOfBytesToRead,
        LPDWORD lpNumberOfBytesRead,
         BOOL bAbort,
         BOOL bProcessSecurity,
      LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupSeek(
         HANDLE hFile,
         DWORD  dwLowBytesToSeek,
         DWORD  dwHighBytesToSeek,
        LPDWORD lpdwLowByteSeeked,
        LPDWORD lpdwHighByteSeeked,
      LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupWrite(
         HANDLE hFile,
      LPBYTE lpBuffer,
         DWORD nNumberOfBytesToWrite,
        LPDWORD lpNumberOfBytesWritten,
         BOOL bAbort,
         BOOL bProcessSecurity,
      LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD          dwStreamId ;
        DWORD          dwStreamAttributes ;
        LARGE_INTEGER  Size ;
        DWORD          dwStreamNameSize ;
        WCHAR          cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;




















































typedef struct _STARTUPINFOEXA {
    STARTUPINFOA StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;
typedef struct _STARTUPINFOEXW {
    STARTUPINFOW StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXW, *LPSTARTUPINFOEXW;




typedef STARTUPINFOEXA STARTUPINFOEX;
typedef LPSTARTUPINFOEXA LPSTARTUPINFOEX;







#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
 
HANDLE
__stdcall
OpenMutexA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );




__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreA(
      LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
          LONG lInitialCount,
          LONG lMaximumCount,
      LPCSTR lpName
    );
__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreW(
      LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
          LONG lInitialCount,
          LONG lMaximumCount,
      LPCWSTR lpName
    );






__declspec(dllimport)
 
HANDLE
__stdcall
OpenSemaphoreA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );






__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerA(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
          BOOL bManualReset,
      LPCSTR lpTimerName
    );
__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerW(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
          BOOL bManualReset,
      LPCWSTR lpTimerName
    );






__declspec(dllimport)
 
HANDLE
__stdcall
OpenWaitableTimerA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpTimerName
    );






__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreExA(
         LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
         LPCSTR lpName,
       DWORD dwFlags,
             DWORD dwDesiredAccess
    );




__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerExA(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
      LPCSTR lpTimerName,
          DWORD dwFlags,
          DWORD dwDesiredAccess
    );








__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingA(
          HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
          DWORD flProtect,
          DWORD dwMaximumSizeHigh,
          DWORD dwMaximumSizeLow,
      LPCSTR lpName
    );






__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingNumaA(
          HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
          DWORD flProtect,
          DWORD dwMaximumSizeHigh,
          DWORD dwMaximumSizeLow,
      LPCSTR lpName,
          DWORD nndPreferred
    );







__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );




__declspec(dllimport)
 
DWORD
__stdcall
GetLogicalDriveStringsA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );





__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryA(
      LPCSTR lpLibFileName
    );
__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryW(
      LPCWSTR lpLibFileName
    );







#pragma endregion

#pragma region Application Family




__declspec(dllimport)
 
HMODULE
__stdcall
LoadPackagedLibrary (
            LPCWSTR lpwLibFileName,
      DWORD Reserved
    );




#pragma endregion

#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameA(
      HANDLE hProcess,
      DWORD dwFlags,
      LPSTR lpExeName,
      PDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameW(
      HANDLE hProcess,
      DWORD dwFlags,
      LPWSTR lpExeName,
      PDWORD lpdwSize
    );























typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
    ProcThreadAttributeParentProcess        = 0,
    ProcThreadAttributeHandleList           = 2,

    ProcThreadAttributeGroupAffinity        = 3,
    ProcThreadAttributePreferredNode        = 4,
    ProcThreadAttributeIdealProcessor       = 5,
    ProcThreadAttributeUmsThread            = 6,
    ProcThreadAttributeMitigationPolicy     = 7,


    ProcThreadAttributeSecurityCapabilities = 9,

    ProcThreadAttributeProtectionLevel      = 11,
} PROC_THREAD_ATTRIBUTE_NUM;



































































































































































__declspec(dllimport)
BOOL
__stdcall
GetProcessShutdownParameters(
      LPDWORD lpdwLevel,
      LPDWORD lpdwFlags
    );

__declspec(dllimport)
void
__stdcall
FatalAppExitA(
      UINT uAction,
      LPCSTR lpMessageText
    );
__declspec(dllimport)
void
__stdcall
FatalAppExitW(
      UINT uAction,
      LPCWSTR lpMessageText
    );






__declspec(dllimport)
void
__stdcall
GetStartupInfoA(
      LPSTARTUPINFOA lpStartupInfo
    );


























































__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize
    );








__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize,
      PDWORD pdwAttribubutes
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize,
      PDWORD pdwAttribubutes
    );








__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pValue,
      DWORD    nSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pValue,
      DWORD    nSize
    );








__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pValue,
      DWORD    nSize,
      DWORD    dwAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pValue,
      DWORD    nSize,
      DWORD    dwAttributes
    );










__declspec(dllimport)
BOOL
__stdcall
GetFirmwareType (
      PFIRMWARE_TYPE FirmwareType
    );


__declspec(dllimport)
BOOL
__stdcall
IsNativeVhdBoot (
      PBOOL NativeVhdBoot
    );



__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceA(
      HMODULE hModule,
          LPCSTR lpName,
          LPCSTR lpType
    );
__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceW(
      HMODULE hModule,
          LPCWSTR lpName,
          LPCWSTR lpType
    );






__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceExA(
      HMODULE hModule,
          LPCSTR lpType,
          LPCSTR lpName,
          WORD    wLanguage
    );




__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesA(
      HMODULE hModule,
          ENUMRESTYPEPROCA lpEnumFunc,
          LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesW(
      HMODULE hModule,
          ENUMRESTYPEPROCW lpEnumFunc,
          LONG_PTR lParam
    );






__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesA(
      HMODULE hModule,
          LPCSTR lpType,
          ENUMRESNAMEPROCA lpEnumFunc,
          LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesW(
      HMODULE hModule,
          LPCWSTR lpType,
          ENUMRESNAMEPROCW lpEnumFunc,
          LONG_PTR lParam
    );






__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesA(
      HMODULE hModule,
          LPCSTR lpType,
          LPCSTR lpName,
          ENUMRESLANGPROCA lpEnumFunc,
          LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesW(
      HMODULE hModule,
          LPCWSTR lpType,
          LPCWSTR lpName,
          ENUMRESLANGPROCW lpEnumFunc,
          LONG_PTR lParam
    );






__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceA(
      LPCSTR pFileName,
      BOOL bDeleteExistingResources
    );
__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceW(
      LPCWSTR pFileName,
      BOOL bDeleteExistingResources
    );






__declspec(dllimport)
BOOL
__stdcall
UpdateResourceA(
      HANDLE hUpdate,
      LPCSTR lpType,
      LPCSTR lpName,
      WORD wLanguage,
      LPVOID lpData,
      DWORD cb
    );
__declspec(dllimport)
BOOL
__stdcall
UpdateResourceW(
      HANDLE hUpdate,
      LPCWSTR lpType,
      LPCWSTR lpName,
      WORD wLanguage,
      LPVOID lpData,
      DWORD cb
    );






__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceA(
      HANDLE hUpdate,
      BOOL   fDiscard
    );
__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceW(
      HANDLE hUpdate,
      BOOL   fDiscard
    );








__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomW(
      LPCWSTR lpString
    );






__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExA(
      LPCSTR lpString,
      DWORD Flags
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExW(
      LPCWSTR lpString,
      DWORD Flags
    );






__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomW(
      LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameA(
      ATOM nAtom,
      LPSTR lpBuffer,
      int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameW(
      ATOM nAtom,
      LPWSTR lpBuffer,
      int nSize
    );






__declspec(dllimport)
ATOM
__stdcall
AddAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
AddAtomW(
      LPCWSTR lpString
    );






__declspec(dllimport)
ATOM
__stdcall
FindAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
FindAtomW(
      LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GetAtomNameA(
      ATOM nAtom,
      LPSTR lpBuffer,
      int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GetAtomNameW(
      ATOM nAtom,
      LPWSTR lpBuffer,
      int nSize
    );






__declspec(dllimport)
UINT
__stdcall
GetProfileIntA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      INT nDefault
    );
__declspec(dllimport)
UINT
__stdcall
GetProfileIntW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      INT nDefault
    );






__declspec(dllimport)
DWORD
__stdcall
GetProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpDefault,
      LPSTR lpReturnedString,
          DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpDefault,
      LPWSTR lpReturnedString,
          DWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpString
    );






__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionA(
      LPCSTR lpAppName,
      LPSTR lpReturnedString,
      DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionW(
      LPCWSTR lpAppName,
      LPWSTR lpReturnedString,
      DWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionA(
      LPCSTR lpAppName,
      LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionW(
      LPCWSTR lpAppName,
      LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntA(
          LPCSTR lpAppName,
          LPCSTR lpKeyName,
          INT nDefault,
      LPCSTR lpFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntW(
          LPCWSTR lpAppName,
          LPCWSTR lpKeyName,
          INT nDefault,
      LPCWSTR lpFileName
    );






























__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpDefault,
      LPSTR lpReturnedString,
          DWORD nSize,
      LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpDefault,
      LPWSTR lpReturnedString,
          DWORD nSize,
      LPCWSTR lpFileName
    );


































__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpString,
      LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpString,
      LPCWSTR lpFileName
    );






__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionA(
          LPCSTR lpAppName,
      LPSTR lpReturnedString,
          DWORD nSize,
      LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionW(
          LPCWSTR lpAppName,
      LPWSTR lpReturnedString,
          DWORD nSize,
      LPCWSTR lpFileName
    );






























__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionA(
      LPCSTR lpAppName,
      LPCSTR lpString,
      LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionW(
      LPCWSTR lpAppName,
      LPCWSTR lpString,
      LPCWSTR lpFileName
    );







__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
      LPSTR lpszReturnBuffer,
          DWORD nSize,
      LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesW(
      LPWSTR lpszReturnBuffer,
          DWORD nSize,
      LPCWSTR lpFileName
    );




























__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructA(
          LPCSTR lpszSection,
          LPCSTR lpszKey,
      LPVOID   lpStruct,
          UINT     uSizeStruct,
      LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructW(
          LPCWSTR lpszSection,
          LPCWSTR lpszKey,
      LPVOID   lpStruct,
          UINT     uSizeStruct,
      LPCWSTR szFile
    );
































__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructA(
          LPCSTR lpszSection,
          LPCSTR lpszKey,
      LPVOID lpStruct,
          UINT     uSizeStruct,
      LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructW(
          LPCWSTR lpszSection,
          LPCWSTR lpszKey,
      LPVOID lpStruct,
          UINT     uSizeStruct,
      LPCWSTR szFile
    );






__declspec(dllimport)
DWORD
__stdcall
GetTempPathA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );




__declspec(dllimport)
UINT
__stdcall
GetTempFileNameA(
      LPCSTR lpPathName,
      LPCSTR lpPrefixString,
      UINT uUnique,
      LPSTR lpTempFileName
    );































__declspec(dllimport)
 
UINT
__stdcall
GetSystemWow64DirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );
__declspec(dllimport)
 
UINT
__stdcall
GetSystemWow64DirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );






__declspec(dllimport)
BOOLEAN
__stdcall
Wow64EnableWow64FsRedirection (
      BOOLEAN Wow64FsEnableRedirection
    );




typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_A)(  LPSTR lpBuffer,   UINT uSize);
typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_W)(  LPWSTR lpBuffer,   UINT uSize);


































































__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryA(
      LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryW(
      LPCWSTR lpPathName
    );






__declspec(dllimport)
 
DWORD
__stdcall
GetDllDirectoryA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );
__declspec(dllimport)
 
DWORD
__stdcall
GetDllDirectoryW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );













__declspec(dllimport)
BOOL
__stdcall
SetSearchPathMode (
      DWORD Flags
    );


#pragma endregion

#pragma region Application Family























#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExA(
          LPCSTR lpTemplateDirectory,
          LPCSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExW(
          LPCWSTR lpTemplateDirectory,
          LPCWSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );








__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedA(
      LPCSTR lpTemplateDirectory,
          LPCSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedW(
      LPCWSTR lpTemplateDirectory,
          LPCWSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          HANDLE hTransaction
    );






__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedA(
      LPCSTR lpPathName,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedW(
      LPCWSTR lpPathName,
          HANDLE hTransaction
    );






__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameTransactedA(
                 LPCSTR lpFileName,
                 DWORD nBufferLength,
      LPSTR lpBuffer,
     LPSTR *lpFilePart,
                 HANDLE hTransaction
    );
__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameTransactedW(
                 LPCWSTR lpFileName,
                 DWORD nBufferLength,
      LPWSTR lpBuffer,
     LPWSTR *lpFilePart,
                 HANDLE hTransaction
    );














__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceA(
          DWORD dwFlags,
          LPCSTR lpDeviceName,
      LPCSTR lpTargetPath
    );




__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceA(
      LPCSTR lpDeviceName,
      LPSTR lpTargetPath,
          DWORD ucchMax
    );








__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedA(
            LPCSTR lpFileName,
            DWORD dwDesiredAccess,
            DWORD dwShareMode,
        LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            DWORD dwCreationDisposition,
            DWORD dwFlagsAndAttributes,
        HANDLE hTemplateFile,
            HANDLE hTransaction,
        PUSHORT pusMiniVersion,
      PVOID  lpExtendedParameter
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedW(
            LPCWSTR lpFileName,
            DWORD dwDesiredAccess,
            DWORD dwShareMode,
        LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            DWORD dwCreationDisposition,
            DWORD dwFlagsAndAttributes,
        HANDLE hTemplateFile,
            HANDLE hTransaction,
        PUSHORT pusMiniVersion,
      PVOID  lpExtendedParameter
    );











__declspec(dllimport)
HANDLE
__stdcall
ReOpenFile(
      HANDLE  hOriginalFile,
      DWORD   dwDesiredAccess,
      DWORD   dwShareMode,
      DWORD   dwFlagsAndAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedA(
          LPCSTR lpFileName,
          DWORD dwFileAttributes,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedW(
          LPCWSTR lpFileName,
          DWORD dwFileAttributes,
          HANDLE hTransaction
    );






__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedA(
       LPCSTR lpFileName,
       GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedW(
       LPCWSTR lpFileName,
       GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation,
          HANDLE hTransaction
    );






__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedA(
           LPCSTR lpFileName,
      LPDWORD  lpFileSizeHigh,
           HANDLE hTransaction
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedW(
           LPCWSTR lpFileName,
      LPDWORD  lpFileSizeHigh,
           HANDLE hTransaction
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedA(
          LPCSTR lpFileName,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedW(
          LPCWSTR lpFileName,
          HANDLE hTransaction
    );









#pragma endregion

#pragma region Application Family





















#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3A(
           LPCSTR lpName,
      LPSTR lpOemName,
           DWORD OemNameSize,
      PBOOL pbNameContainsSpaces ,
          PBOOL pbNameLegal
    );
__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3W(
           LPCWSTR lpName,
      LPSTR lpOemName,
           DWORD OemNameSize,
      PBOOL pbNameContainsSpaces ,
          PBOOL pbNameLegal
    );









#pragma endregion



#pragma region Desktop Family




__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedA(
            LPCSTR lpFileName,
            FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
            FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
            DWORD dwAdditionalFlags,
            HANDLE hTransaction
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedW(
            LPCWSTR lpFileName,
            FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
            FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
            DWORD dwAdditionalFlags,
            HANDLE hTransaction
    );









#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
CopyFileA(
      LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
      BOOL bFailIfExists
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileW(
      LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
      BOOL bFailIfExists
    );





























#pragma endregion



#pragma region Desktop Family


typedef
DWORD
(__stdcall *LPPROGRESS_ROUTINE)(
          LARGE_INTEGER TotalFileSize,
          LARGE_INTEGER TotalBytesTransferred,
          LARGE_INTEGER StreamSize,
          LARGE_INTEGER StreamBytesTransferred,
          DWORD dwStreamNumber,
          DWORD dwCallbackReason,
          HANDLE hSourceFile,
          HANDLE hDestinationFile,
      LPVOID lpData
    );

__declspec(dllimport)
BOOL
__stdcall
CopyFileExA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
         LPPROGRESS_ROUTINE lpProgressRoutine,
         LPVOID lpData,
    
      LPBOOL pbCancel,
             DWORD dwCopyFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileExW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
         LPPROGRESS_ROUTINE lpProgressRoutine,
         LPVOID lpData,
    
      LPBOOL pbCancel,
             DWORD dwCopyFlags
    );








__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedA(
          LPCSTR lpExistingFileName,
          LPCSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
      LPBOOL pbCancel,
          DWORD dwCopyFlags,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedW(
          LPCWSTR lpExistingFileName,
          LPCWSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
      LPBOOL pbCancel,
          DWORD dwCopyFlags,
          HANDLE hTransaction
    );









#pragma endregion

#pragma region Application Family








typedef enum _COPYFILE2_MESSAGE_TYPE {
     COPYFILE2_CALLBACK_NONE = 0,
     COPYFILE2_CALLBACK_CHUNK_STARTED,
     COPYFILE2_CALLBACK_CHUNK_FINISHED,
     COPYFILE2_CALLBACK_STREAM_STARTED,
     COPYFILE2_CALLBACK_STREAM_FINISHED,
     COPYFILE2_CALLBACK_POLL_CONTINUE,
     COPYFILE2_CALLBACK_ERROR,
     COPYFILE2_CALLBACK_MAX,
} COPYFILE2_MESSAGE_TYPE;

typedef enum _COPYFILE2_MESSAGE_ACTION {
    COPYFILE2_PROGRESS_CONTINUE = 0,
    COPYFILE2_PROGRESS_CANCEL,
    COPYFILE2_PROGRESS_STOP,
    COPYFILE2_PROGRESS_QUIET,
    COPYFILE2_PROGRESS_PAUSE,
} COPYFILE2_MESSAGE_ACTION;

typedef enum _COPYFILE2_COPY_PHASE {
    COPYFILE2_PHASE_NONE = 0,
    COPYFILE2_PHASE_PREPARE_SOURCE,
    COPYFILE2_PHASE_PREPARE_DEST,
    COPYFILE2_PHASE_READ_SOURCE,
    COPYFILE2_PHASE_WRITE_DESTINATION,
    COPYFILE2_PHASE_SERVER_COPY,
    COPYFILE2_PHASE_NAMEGRAFT_COPY,
    
    COPYFILE2_PHASE_MAX,
} COPYFILE2_COPY_PHASE;



typedef struct COPYFILE2_MESSAGE {

    COPYFILE2_MESSAGE_TYPE  Type;
    DWORD                   dwPadding;

    union {

        struct {
            DWORD           dwStreamNumber; 
            DWORD           dwReserved;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliChunkNumber; 
            ULARGE_INTEGER  uliChunkSize;  
            ULARGE_INTEGER  uliStreamSize; 
            ULARGE_INTEGER  uliTotalFileSize; 
        } ChunkStarted;

        struct {
            DWORD           dwStreamNumber; 
            DWORD           dwFlags;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliChunkNumber; 
            ULARGE_INTEGER  uliChunkSize;  
            ULARGE_INTEGER  uliStreamSize; 
            ULARGE_INTEGER  uliStreamBytesTransferred; 
            ULARGE_INTEGER  uliTotalFileSize; 
            ULARGE_INTEGER  uliTotalBytesTransferred; 
        } ChunkFinished;

        struct {
            DWORD           dwStreamNumber;
            DWORD           dwReserved;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliStreamSize; 
            ULARGE_INTEGER  uliTotalFileSize; 
        } StreamStarted;

        struct {
            DWORD           dwStreamNumber;
            DWORD           dwReserved;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliStreamSize;
            ULARGE_INTEGER  uliStreamBytesTransferred;
            ULARGE_INTEGER  uliTotalFileSize;
            ULARGE_INTEGER  uliTotalBytesTransferred;
        } StreamFinished;

        struct {
            DWORD           dwReserved;
        } PollContinue;

        struct {
            COPYFILE2_COPY_PHASE    CopyPhase;
            DWORD                   dwStreamNumber;
            HRESULT                 hrFailure;
            DWORD                   dwReserved;
            ULARGE_INTEGER          uliChunkNumber;
            ULARGE_INTEGER          uliStreamSize;
            ULARGE_INTEGER          uliStreamBytesTransferred;
            ULARGE_INTEGER          uliTotalFileSize;
            ULARGE_INTEGER          uliTotalBytesTransferred;
        } Error;

    } Info;

} COPYFILE2_MESSAGE;

typedef
COPYFILE2_MESSAGE_ACTION (__stdcall *PCOPYFILE2_PROGRESS_ROUTINE)(
         const COPYFILE2_MESSAGE     *pMessage,
     PVOID                       pvCallbackContext
);

typedef struct COPYFILE2_EXTENDED_PARAMETERS {
  DWORD                         dwSize;
  DWORD                         dwCopyFlags;
  BOOL                          *pfCancel;
  PCOPYFILE2_PROGRESS_ROUTINE   pProgressRoutine;
  PVOID                         pvCallbackContext;
} COPYFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HRESULT
__stdcall
CopyFile2(
         PCWSTR                          pwszExistingFileName,
         PCWSTR                          pwszNewFileName,
     COPYFILE2_EXTENDED_PARAMETERS   *pExtendedParameters
);




#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
MoveFileA(
      LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileW(
      LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName
    );



























#pragma endregion

#pragma region Application Family


__declspec(dllimport)
BOOL
__stdcall
MoveFileExA(
          LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
          DWORD    dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileExW(
          LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
          DWORD    dwFlags
    );







#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressA(
          LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressW(
          LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags
    );








__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedA(
          LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedW(
          LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags,
          HANDLE hTransaction
    );








#pragma endregion

#pragma region Application Family












#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
BOOL
__stdcall
ReplaceFileA(
            LPCSTR lpReplacedFileName,
            LPCSTR lpReplacementFileName,
        LPCSTR lpBackupFileName,
            DWORD    dwReplaceFlags,
      LPVOID   lpExclude,
      LPVOID  lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
ReplaceFileW(
            LPCWSTR lpReplacedFileName,
            LPCWSTR lpReplacementFileName,
        LPCWSTR lpBackupFileName,
            DWORD    dwReplaceFlags,
      LPVOID   lpExclude,
      LPVOID  lpReserved
    );













__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkA(
            LPCSTR lpFileName,
            LPCSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkW(
            LPCWSTR lpFileName,
            LPCWSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );













__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedA(
            LPCSTR lpFileName,
            LPCSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedW(
            LPCWSTR lpFileName,
            LPCWSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            HANDLE hTransaction
    );















typedef enum _STREAM_INFO_LEVELS {

    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel

} STREAM_INFO_LEVELS;

typedef struct _WIN32_FIND_STREAM_DATA {

    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[ 260 + 36 ];

} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;

__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamW(
            LPCWSTR lpFileName,
            STREAM_INFO_LEVELS InfoLevel,
      LPVOID lpFindStreamData,
      DWORD dwFlags
    );


__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamTransactedW (
            LPCWSTR lpFileName,
            STREAM_INFO_LEVELS InfoLevel,
      LPVOID lpFindStreamData,
      DWORD dwFlags,
            HANDLE hTransaction
    );


__declspec(dllimport)
BOOL
__stdcall
FindNextStreamW(
       HANDLE hFindStream,
      LPVOID lpFindStreamData
    );




__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameW (
         LPCWSTR lpFileName,
         DWORD dwFlags,
      LPDWORD StringLength,
      PWSTR LinkName
    );

__declspec(dllimport)
BOOL
__stdcall
FindNextFileNameW (
         HANDLE hFindStream,
      LPDWORD StringLength,
      PWSTR LinkName
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameTransactedW (
          LPCWSTR lpFileName,
          DWORD dwFlags,
       LPDWORD StringLength,
      PWSTR LinkName,
      HANDLE hTransaction
    );



__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeA(
          LPCSTR lpName,
          DWORD dwOpenMode,
          DWORD dwPipeMode,
          DWORD nMaxInstances,
          DWORD nOutBufferSize,
          DWORD nInBufferSize,
          DWORD nDefaultTimeOut,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateA(
           HANDLE hNamedPipe,
      LPDWORD lpState,
      LPDWORD lpCurInstances,
      LPDWORD lpMaxCollectionCount,
      LPDWORD lpCollectDataTimeout,
      LPSTR lpUserName,
           DWORD nMaxUserNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateW(
           HANDLE hNamedPipe,
      LPDWORD lpState,
      LPDWORD lpCurInstances,
      LPDWORD lpMaxCollectionCount,
      LPDWORD lpCollectDataTimeout,
      LPWSTR lpUserName,
           DWORD nMaxUserNameSize
    );






__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeA(
       LPCSTR lpNamedPipeName,
      LPVOID lpInBuffer,
       DWORD nInBufferSize,
      LPVOID lpOutBuffer,
       DWORD nOutBufferSize,
      LPDWORD lpBytesRead,
       DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeW(
       LPCWSTR lpNamedPipeName,
      LPVOID lpInBuffer,
       DWORD nInBufferSize,
      LPVOID lpOutBuffer,
       DWORD nOutBufferSize,
      LPDWORD lpBytesRead,
       DWORD nTimeOut
    );






__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeA(
      LPCSTR lpNamedPipeName,
      DWORD nTimeOut
    );







__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameA(
      HANDLE Pipe,
       LPSTR ClientComputerName,
      ULONG ClientComputerNameLength
    );





__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientProcessId(
      HANDLE Pipe,
      PULONG ClientProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientSessionId(
      HANDLE Pipe,
      PULONG ClientSessionId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerProcessId(
      HANDLE Pipe,
      PULONG ServerProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerSessionId(
      HANDLE Pipe,
      PULONG ServerSessionId
    );



__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelA(
      LPCSTR lpRootPathName,
      LPCSTR lpVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelW(
      LPCWSTR lpRootPathName,
      LPCWSTR lpVolumeName
    );






__declspec(dllimport)
void
__stdcall
SetFileApisToOEM( void );

__declspec(dllimport)
void
__stdcall
SetFileApisToANSI( void );

__declspec(dllimport)
BOOL
__stdcall
AreFileApisANSI( void );

__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationA(
       LPCSTR lpRootPathName,
      LPSTR lpVolumeNameBuffer,
           DWORD nVolumeNameSize,
      LPDWORD lpVolumeSerialNumber,
      LPDWORD lpMaximumComponentLength,
      LPDWORD lpFileSystemFlags,
      LPSTR lpFileSystemNameBuffer,
           DWORD nFileSystemNameSize
    );







__declspec(dllimport)
BOOL
__stdcall
SetFileBandwidthReservation(
       HANDLE  hFile,
       DWORD   nPeriodMilliseconds,
       DWORD   nBytesPerPeriod,
       BOOL    bDiscardable,
      LPDWORD lpTransferSize,
      LPDWORD lpNumOutstandingRequests
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileBandwidthReservation(
       HANDLE  hFile,
      LPDWORD lpPeriodMilliseconds,
      LPDWORD lpBytesPerPeriod,
      LPBOOL  pDiscardable,
      LPDWORD lpTransferSize,
      LPDWORD lpNumOutstandingRequests
    );







__declspec(dllimport)
BOOL
__stdcall
ClearEventLogA (
          HANDLE hEventLog,
      LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
ClearEventLogW (
          HANDLE hEventLog,
      LPCWSTR lpBackupFileName
    );






__declspec(dllimport)
BOOL
__stdcall
BackupEventLogA (
      HANDLE hEventLog,
      LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
BackupEventLogW (
      HANDLE hEventLog,
      LPCWSTR lpBackupFileName
    );






__declspec(dllimport)
BOOL
__stdcall
CloseEventLog (
      HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
DeregisterEventSource (
      HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyChangeEventLog(
      HANDLE  hEventLog,
      HANDLE  hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfEventLogRecords (
       HANDLE hEventLog,
      PDWORD NumberOfRecords
    );

__declspec(dllimport)
BOOL
__stdcall
GetOldestEventLogRecord (
       HANDLE hEventLog,
      PDWORD OldestRecord
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogA (
      LPCSTR lpUNCServerName,
          LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogW (
      LPCWSTR lpUNCServerName,
          LPCWSTR lpSourceName
    );






__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceA (
      LPCSTR lpUNCServerName,
          LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceW (
      LPCWSTR lpUNCServerName,
          LPCWSTR lpSourceName
    );






__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogA (
      LPCSTR lpUNCServerName,
          LPCSTR lpFileName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogW (
      LPCWSTR lpUNCServerName,
          LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
ReadEventLogA (
       HANDLE     hEventLog,
       DWORD      dwReadFlags,
       DWORD      dwRecordOffset,
      LPVOID     lpBuffer,
       DWORD      nNumberOfBytesToRead,
      DWORD      *pnBytesRead,
      DWORD      *pnMinNumberOfBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
ReadEventLogW (
       HANDLE     hEventLog,
       DWORD      dwReadFlags,
       DWORD      dwRecordOffset,
      LPVOID     lpBuffer,
       DWORD      nNumberOfBytesToRead,
      DWORD      *pnBytesRead,
      DWORD      *pnMinNumberOfBytesNeeded
    );






__declspec(dllimport)
BOOL
__stdcall
ReportEventA (
          HANDLE     hEventLog,
          WORD       wType,
          WORD       wCategory,
          DWORD      dwEventID,
      PSID       lpUserSid,
          WORD       wNumStrings,
          DWORD      dwDataSize,
      LPCSTR *lpStrings,
      LPVOID lpRawData
    );
__declspec(dllimport)
BOOL
__stdcall
ReportEventW (
          HANDLE     hEventLog,
          WORD       wType,
          WORD       wCategory,
          DWORD      dwEventID,
      PSID       lpUserSid,
          WORD       wNumStrings,
          DWORD      dwDataSize,
      LPCWSTR *lpStrings,
      LPVOID lpRawData
    );









typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD    dwFull;
}
EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetEventLogInformation (
       HANDLE     hEventLog,
       DWORD      dwInfoLevel,
      LPVOID lpBuffer,
       DWORD      cbBufSize,
      LPDWORD    pcbBytesNeeded
    );








typedef ULONG OPERATION_ID;





typedef struct _OPERATION_START_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_START_PARAMETERS, *POPERATION_START_PARAMETERS;







typedef struct _OPERATION_END_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_END_PARAMETERS, *POPERATION_END_PARAMETERS;



__declspec(dllimport)
BOOL
__stdcall
OperationStart (
      OPERATION_START_PARAMETERS* OperationStartParams
    );

__declspec(dllimport)
BOOL
__stdcall
OperationEnd (
      OPERATION_END_PARAMETERS* OperationEndParams
    );









__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
          LPCSTR SubsystemName,
      LPVOID HandleId,
          LPSTR ObjectTypeName,
      LPSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
          DWORD DesiredAccess,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
         LPDWORD GrantedAccess,
         LPBOOL AccessStatus,
         LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          LPCSTR ObjectTypeName,
      LPCSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
          DWORD DesiredAccess,
          AUDIT_EVENT_TYPE AuditType,
          DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
          DWORD ObjectTypeListLength,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
         LPDWORD GrantedAccess,
         LPBOOL AccessStatus,
         LPBOOL pfGenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          LPCSTR ObjectTypeName,
      LPCSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
          DWORD DesiredAccess,
          AUDIT_EVENT_TYPE AuditType,
          DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
          DWORD ObjectTypeListLength,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
            LPDWORD GrantedAccess,
            LPDWORD AccessStatusList,
         LPBOOL pfGenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          HANDLE ClientToken,
          LPCSTR ObjectTypeName,
      LPCSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
          DWORD DesiredAccess,
          AUDIT_EVENT_TYPE AuditType,
          DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
          DWORD ObjectTypeListLength,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
            LPDWORD GrantedAccess,
            LPDWORD AccessStatusList,
         LPBOOL pfGenerateOnClose
    );





__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          LPSTR ObjectTypeName,
      LPSTR ObjectName,
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
          HANDLE ClientToken,
          DWORD DesiredAccess,
          DWORD GrantedAccess,
      PPRIVILEGE_SET Privileges,
          BOOL ObjectCreation,
          BOOL AccessGranted,
         LPBOOL GenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
      LPCSTR SubsystemName,
      LPVOID HandleId,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );




__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmA (
      LPCSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmA (
      LPCSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
      LPCSTR SubsystemName,
      LPCSTR ServiceName,
      HANDLE ClientToken,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );





__declspec(dllimport)
BOOL
__stdcall
AddConditionalAce (
      PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         UCHAR AceType,
         DWORD AccessMask,
         PSID pSid,
        PWCHAR ConditionStr,
      DWORD *ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityA (
      LPCSTR lpFileName,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );




__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityA (
       LPCSTR lpFileName,
       SECURITY_INFORMATION RequestedInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
       DWORD nLength,
      LPDWORD lpnLengthNeeded
    );





__declspec(dllimport)
BOOL
__stdcall
ReadDirectoryChangesW(
             HANDLE hDirectory,
      LPVOID lpBuffer,
             DWORD nBufferLength,
             BOOL bWatchSubtree,
             DWORD dwNotifyFilter,
        LPDWORD lpBytesReturned,
      LPOVERLAPPED lpOverlapped,
         LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );




__declspec(dllimport)
  
LPVOID
__stdcall
MapViewOfFileExNuma(
          HANDLE hFileMappingObject,
          DWORD dwDesiredAccess,
          DWORD dwFileOffsetHigh,
          DWORD dwFileOffsetLow,
          SIZE_T dwNumberOfBytesToMap,
      LPVOID lpBaseAddress,
          DWORD nndPreferred
    );



__declspec(dllimport)
BOOL
__stdcall
IsBadReadPtr(
      const void *lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadWritePtr(
      LPVOID lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeReadPtr(
      const void *lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeWritePtr(
      LPVOID lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadCodePtr(
      FARPROC lpfn
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrA(
      LPCSTR lpsz,
          UINT_PTR ucchMax
    );
__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrW(
      LPCWSTR lpsz,
          UINT_PTR ucchMax
    );






__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidA(
      LPCSTR lpSystemName,
      PSID Sid,
      LPSTR Name,
       LPDWORD cchName,
      LPSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidW(
      LPCWSTR lpSystemName,
      PSID Sid,
      LPWSTR Name,
       LPDWORD cchName,
      LPWSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );






__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameA(
      LPCSTR lpSystemName,
          LPCSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameW(
      LPCWSTR lpSystemName,
          LPCWSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPWSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );








__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameLocalA(
          LPCSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameLocalW(
          LPCWSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPWSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );






__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidLocalA(
      PSID Sid,
      LPSTR Name,
       LPDWORD cchName,
      LPSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidLocalW(
      PSID Sid,
      LPWSTR Name,
       LPDWORD cchName,
      LPWSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );






























__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueA(
      LPCSTR lpSystemName,
          LPCSTR lpName,
         PLUID   lpLuid
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueW(
      LPCWSTR lpSystemName,
          LPCWSTR lpName,
         PLUID   lpLuid
    );






__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeNameA(
      LPCSTR lpSystemName,
          PLUID   lpLuid,
      LPSTR lpName,
       LPDWORD cchName
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeNameW(
      LPCWSTR lpSystemName,
          PLUID   lpLuid,
      LPWSTR lpName,
       LPDWORD cchName
    );






__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeDisplayNameA(
      LPCSTR lpSystemName,
          LPCSTR lpName,
      LPSTR lpDisplayName,
       LPDWORD cchDisplayName,
         LPDWORD lpLanguageId
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeDisplayNameW(
      LPCWSTR lpSystemName,
          LPCWSTR lpName,
      LPWSTR lpDisplayName,
       LPDWORD cchDisplayName,
         LPDWORD lpLanguageId
    );






__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBA(
       LPCSTR lpDef,
      LPDCB lpDCB
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBW(
       LPCWSTR lpDef,
      LPDCB lpDCB
    );






__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
       LPCSTR lpDef,
      LPDCB lpDCB,
      LPCOMMTIMEOUTS lpCommTimeouts
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
       LPCWSTR lpDef,
      LPDCB lpDCB,
      LPCOMMTIMEOUTS lpCommTimeouts
    );






__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogA(
          LPCSTR lpszName,
      HWND hWnd,
       LPCOMMCONFIG lpCC
    );
__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogW(
          LPCWSTR lpszName,
      HWND hWnd,
       LPCOMMCONFIG lpCC
    );






__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigA(
         LPCSTR lpszName,
      LPCOMMCONFIG lpCC,
      LPDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigW(
         LPCWSTR lpszName,
      LPCOMMCONFIG lpCC,
      LPDWORD lpdwSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigA(
      LPCSTR lpszName,
      LPCOMMCONFIG lpCC,
      DWORD dwSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigW(
      LPCWSTR lpszName,
      LPCOMMCONFIG lpCC,
      DWORD dwSize
    );












__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameA (
      LPSTR lpBuffer,
      LPDWORD nSize
    );
__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameW (
      LPWSTR lpBuffer,
      LPDWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetComputerNameA (
      LPCSTR lpComputerName
    );
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameW (
      LPCWSTR lpComputerName
    );









__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExA (
      COMPUTER_NAME_FORMAT NameType,
      LPCSTR lpBuffer
    );





__declspec(dllimport)
 
BOOL
__stdcall
DnsHostnameToComputerNameA (
         LPCSTR Hostname,
      LPSTR ComputerName,
      LPDWORD nSize
    );
__declspec(dllimport)
 
BOOL
__stdcall
DnsHostnameToComputerNameW (
         LPCWSTR Hostname,
      LPWSTR ComputerName,
      LPDWORD nSize
    );








__declspec(dllimport)
BOOL
__stdcall
GetUserNameA (
      LPSTR lpBuffer,
      LPDWORD pcbBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetUserNameW (
      LPWSTR lpBuffer,
      LPDWORD pcbBuffer
    );


































__declspec(dllimport)
BOOL
__stdcall
LogonUserA (
             LPCSTR lpszUsername,
         LPCSTR lpszDomain,
         LPCSTR lpszPassword,
             DWORD dwLogonType,
             DWORD dwLogonProvider,
     PHANDLE phToken
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserW (
             LPCWSTR lpszUsername,
         LPCWSTR lpszDomain,
         LPCWSTR lpszPassword,
             DWORD dwLogonType,
             DWORD dwLogonProvider,
     PHANDLE phToken
    );






__declspec(dllimport)
BOOL
__stdcall
LogonUserExA (
                 LPCSTR lpszUsername,
             LPCSTR lpszDomain,
             LPCSTR lpszPassword,
                 DWORD dwLogonType,
                 DWORD dwLogonProvider,
     PHANDLE phToken,
     PSID  *ppLogonSid,
     PVOID *ppProfileBuffer,
            LPDWORD pdwProfileLength,
            PQUOTA_LIMITS pQuotaLimits
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserExW (
                 LPCWSTR lpszUsername,
             LPCWSTR lpszDomain,
             LPCWSTR lpszPassword,
                 DWORD dwLogonType,
                 DWORD dwLogonProvider,
     PHANDLE phToken,
     PSID  *ppLogonSid,
     PVOID *ppProfileBuffer,
            LPDWORD pdwProfileLength,
            PQUOTA_LIMITS pQuotaLimits
    );












__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserA (
         HANDLE hToken,
         LPCSTR lpApplicationName,
      LPSTR lpCommandLine,
         LPSECURITY_ATTRIBUTES lpProcessAttributes,
         LPSECURITY_ATTRIBUTES lpThreadAttributes,
             BOOL bInheritHandles,
             DWORD dwCreationFlags,
         LPVOID lpEnvironment,
         LPCSTR lpCurrentDirectory,
             LPSTARTUPINFOA lpStartupInfo,
            LPPROCESS_INFORMATION lpProcessInformation
    );














__declspec(dllimport)
  BOOL
__stdcall
CreateProcessWithLogonW(
             LPCWSTR lpUsername,
         LPCWSTR lpDomain,
             LPCWSTR lpPassword,
             DWORD dwLogonFlags,
         LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
             DWORD dwCreationFlags,
         LPVOID lpEnvironment,
         LPCWSTR lpCurrentDirectory,
             LPSTARTUPINFOW lpStartupInfo,
            LPPROCESS_INFORMATION lpProcessInformation
      );

__declspec(dllimport)
  BOOL
__stdcall
CreateProcessWithTokenW(
             HANDLE hToken,
             DWORD dwLogonFlags,
         LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
             DWORD dwCreationFlags,
         LPVOID lpEnvironment,
         LPCWSTR lpCurrentDirectory,
             LPSTARTUPINFOW lpStartupInfo,
            LPPROCESS_INFORMATION lpProcessInformation
      );



__declspec(dllimport)
BOOL
__stdcall
IsTokenUntrusted(
      HANDLE TokenHandle
    );







__declspec(dllimport)
BOOL
__stdcall
RegisterWaitForSingleObject(
     PHANDLE phNewWaitObject,
             HANDLE hObject,
             WAITORTIMERCALLBACK Callback,
         PVOID Context,
             ULONG dwMilliseconds,
             ULONG dwFlags
    );

__declspec(dllimport)
 
BOOL
__stdcall
UnregisterWait(
      HANDLE WaitHandle
    );

__declspec(dllimport)
BOOL
__stdcall
BindIoCompletionCallback (
      HANDLE FileHandle,
      LPOVERLAPPED_COMPLETION_ROUTINE Function,
      ULONG Flags
    );

__declspec(dllimport)
HANDLE
__stdcall
SetTimerQueueTimer(
      HANDLE TimerQueue,
          WAITORTIMERCALLBACK Callback,
      PVOID Parameter,
          DWORD DueTime,
          DWORD Period,
          BOOL PreferIo
    );

__declspec(dllimport)
 
BOOL
__stdcall
CancelTimerQueueTimer(
      HANDLE TimerQueue,
          HANDLE Timer
    );

__declspec(dllimport)
 
BOOL
__stdcall
DeleteTimerQueue(
      HANDLE TimerQueue
    );





__forceinline
void
InitializeThreadpoolEnvironment(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpInitializeCallbackEnviron(pcbe);
}

__forceinline
void
SetThreadpoolCallbackPool(
      PTP_CALLBACK_ENVIRON pcbe,
         PTP_POOL             ptpp
    )
{
    TpSetCallbackThreadpool(pcbe, ptpp);
}

__forceinline
void
SetThreadpoolCallbackCleanupGroup(
       PTP_CALLBACK_ENVIRON              pcbe,
          PTP_CLEANUP_GROUP                 ptpcg,
      PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng
    )
{
    TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
}

__forceinline
void
SetThreadpoolCallbackRunsLong(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackLongFunction(pcbe);
}

__forceinline
void
SetThreadpoolCallbackLibrary(
      PTP_CALLBACK_ENVIRON pcbe,
         PVOID                mod
    )
{
    TpSetCallbackRaceWithDll(pcbe, mod);
}



__forceinline
void
SetThreadpoolCallbackPriority(
      PTP_CALLBACK_ENVIRON pcbe,
         TP_CALLBACK_PRIORITY Priority
    )
{
    TpSetCallbackPriority(pcbe, Priority);
}



__forceinline
void
SetThreadpoolCallbackPersistent(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackPersistent(pcbe);
}

__forceinline
void
DestroyThreadpoolEnvironment(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpDestroyCallbackEnviron(pcbe);
}







__declspec(dllimport)
 
HANDLE
__stdcall
CreatePrivateNamespaceA(
      LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
          LPVOID lpBoundaryDescriptor,
          LPCSTR lpAliasPrefix
    );







__declspec(dllimport)
 
HANDLE
__stdcall
OpenPrivateNamespaceA(
          LPVOID lpBoundaryDescriptor,
          LPCSTR lpAliasPrefix
    );












__declspec(dllimport)
 
HANDLE
__stdcall
CreateBoundaryDescriptorA(
      LPCSTR Name,
      ULONG Flags
    );








__declspec(dllimport)
BOOL
__stdcall
AddIntegrityLabelToBoundaryDescriptor(
      HANDLE * BoundaryDescriptor,
      PSID IntegrityLabel
    );





















typedef struct tagHW_PROFILE_INFOA {
    DWORD  dwDockInfo;
    CHAR   szHwProfileGuid[39];
    CHAR   szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD  dwDockInfo;
    WCHAR  szHwProfileGuid[39];
    WCHAR  szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;




typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;



__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileA (
      LPHW_PROFILE_INFOA  lpHwProfileInfo
    );
__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileW (
      LPHW_PROFILE_INFOW  lpHwProfileInfo
    );







__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoA(
      LPOSVERSIONINFOEXA lpVersionInformation,
         DWORD dwTypeMask,
         DWORDLONG dwlConditionMask
    );
__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoW(
      LPOSVERSIONINFOEXW lpVersionInformation,
         DWORD dwTypeMask,
         DWORDLONG dwlConditionMask
    );








#pragma endregion


















#pragma once











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































__forceinline HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (7 << 16) | 0x80000000);}






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
 
 
 
 




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 










#pragma once





















extern "C" {




#pragma region Application Family







typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[ 128 ];
    BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;

__declspec(dllimport)
 
BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
      const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
      const SYSTEMTIME * lpUniversalTime,
      LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
TzSpecificLocalTimeToSystemTime(
      const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
      const SYSTEMTIME * lpLocalTime,
      LPSYSTEMTIME lpUniversalTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
FileTimeToSystemTime(
      const FILETIME * lpFileTime,
      LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
SystemTimeToFileTime(
      const SYSTEMTIME * lpSystemTime,
      LPFILETIME lpFileTime
    );


__declspec(dllimport)
 
DWORD
__stdcall
GetTimeZoneInformation(
      LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );



#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetTimeZoneInformation(
      const TIME_ZONE_INFORMATION * lpTimeZoneInformation
    );





__declspec(dllimport)
BOOL
__stdcall
SetDynamicTimeZoneInformation(
      const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation
    );





#pragma endregion

#pragma region Application Family






__declspec(dllimport)
 
DWORD
__stdcall
GetDynamicTimeZoneInformation(
      PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
    );







 
BOOL
__stdcall
GetTimeZoneInformationForYear(
      USHORT wYear,
      PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
      LPTIME_ZONE_INFORMATION ptzi
    );









__declspec(dllimport)
 
DWORD
__stdcall
EnumDynamicTimeZoneInformation(
      const DWORD dwIndex,
      PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation
    );


__declspec(dllimport)
 
DWORD
__stdcall
GetDynamicTimeZoneInformationEffectiveYears(
      const PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation,
      LPDWORD FirstYear,
      LPDWORD LastYear
    );


__declspec(dllimport)
 
BOOL
__stdcall
SystemTimeToTzSpecificLocalTimeEx(
      const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,
      const SYSTEMTIME * lpUniversalTime,
      LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
TzSpecificLocalTimeToSystemTimeEx(
      const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,
      const SYSTEMTIME * lpLocalTime,
      LPSYSTEMTIME lpUniversalTime
    );





#pragma endregion




}






#pragma region Desktop Family






























typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
}   SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

__declspec(dllimport)
BOOL
__stdcall
GetSystemPowerStatus(
      LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemPowerState(
      BOOL fSuspend,
      BOOL fForce
    );








__declspec(dllimport)
BOOL
__stdcall
MapUserPhysicalPagesScatter(
      PVOID *VirtualAddresses,
      ULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateJobObjectA(
      LPSECURITY_ATTRIBUTES lpJobAttributes,
      LPCSTR lpName
    );
__declspec(dllimport)
 
HANDLE
__stdcall
CreateJobObjectW(
      LPSECURITY_ATTRIBUTES lpJobAttributes,
      LPCWSTR lpName
    );






__declspec(dllimport)
 
HANDLE
__stdcall
OpenJobObjectA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );
__declspec(dllimport)
 
HANDLE
__stdcall
OpenJobObjectW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );






__declspec(dllimport)
BOOL
__stdcall
AssignProcessToJobObject(
      HANDLE hJob,
      HANDLE hProcess
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateJobObject(
      HANDLE hJob,
      UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
QueryInformationJobObject(
       HANDLE hJob,
           JOBOBJECTINFOCLASS JobObjectInformationClass,
      LPVOID lpJobObjectInformation,
           DWORD cbJobObjectInformationLength,
      LPDWORD lpReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetInformationJobObject(
      HANDLE hJob,
      JOBOBJECTINFOCLASS JobObjectInformationClass,
      LPVOID lpJobObjectInformation,
      DWORD cbJobObjectInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
CreateJobSet (
      ULONG NumJob,
      PJOB_SET_ARRAY UserJobSet,
      ULONG Flags);

__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeA(
      LPSTR lpszVolumeName,
      DWORD cchBufferLength
    );




__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeA(
      HANDLE hFindVolume,
      LPSTR lpszVolumeName,
         DWORD cchBufferLength
    );




__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointA(
      LPCSTR lpszRootPathName,
      LPSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointW(
      LPCWSTR lpszRootPathName,
      LPWSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointA(
      HANDLE hFindVolumeMountPoint,
      LPSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointW(
      HANDLE hFindVolumeMountPoint,
      LPWSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindVolumeMountPointClose(
      HANDLE hFindVolumeMountPoint
    );

__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointA(
      LPCSTR lpszVolumeMountPoint,
      LPCSTR lpszVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointW(
      LPCWSTR lpszVolumeMountPoint,
      LPCWSTR lpszVolumeName
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointA(
      LPCSTR lpszVolumeMountPoint
    );




__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointA(
      LPCSTR lpszVolumeMountPoint,
      LPSTR lpszVolumeName,
      DWORD cchBufferLength
    );




__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameA(
      LPCSTR lpszFileName,
      LPSTR lpszVolumePathName,
      DWORD cchBufferLength
    );








__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameA(
       LPCSTR lpszVolumeName,
         LPCH lpszVolumePathNames,
       DWORD cchBufferLength,
      PDWORD lpcchReturnLength
    );


















typedef struct tagACTCTXA {
    ULONG       cbSize;
    DWORD       dwFlags;
    LPCSTR      lpSource;
    USHORT      wProcessorArchitecture;
    LANGID      wLangId;
    LPCSTR      lpAssemblyDirectory;
    LPCSTR      lpResourceName;
    LPCSTR      lpApplicationName;
    HMODULE     hModule;
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW {
    ULONG       cbSize;
    DWORD       dwFlags;
    LPCWSTR     lpSource;
    USHORT      wProcessorArchitecture;
    LANGID      wLangId;
    LPCWSTR     lpAssemblyDirectory;
    LPCWSTR     lpResourceName;
    LPCWSTR     lpApplicationName;
    HMODULE     hModule;
} ACTCTXW, *PACTCTXW;




typedef ACTCTXA ACTCTX;
typedef PACTCTXA PACTCTX;


typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;



typedef PCACTCTXA PCACTCTX;




__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxA(
      PCACTCTXA pActCtx
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxW(
      PCACTCTXW pActCtx
    );






__declspec(dllimport)
void
__stdcall
AddRefActCtx(
      HANDLE hActCtx
    );


__declspec(dllimport)
void
__stdcall
ReleaseActCtx(
      HANDLE hActCtx
    );

__declspec(dllimport)
BOOL
__stdcall
ZombifyActCtx(
      HANDLE hActCtx
    );


 
__declspec(dllimport)
BOOL
__stdcall
ActivateActCtx(
      HANDLE hActCtx,
        ULONG_PTR *lpCookie
    );




 
__declspec(dllimport)
BOOL
__stdcall
DeactivateActCtx(
      DWORD dwFlags,
      ULONG_PTR ulCookie
    );

__declspec(dllimport)
BOOL
__stdcall
GetCurrentActCtx(
     HANDLE *lphActCtx);


typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 * PCACTCTX_SECTION_KEYED_DATA_2600;

typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;

    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA * PCACTCTX_SECTION_KEYED_DATA;







 
__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringA(
            DWORD dwFlags,
      const GUID *lpExtensionGuid,
            ULONG ulSectionId,
            LPCSTR lpStringToFind,
           PACTCTX_SECTION_KEYED_DATA ReturnedData
    );
 
__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringW(
            DWORD dwFlags,
      const GUID *lpExtensionGuid,
            ULONG ulSectionId,
            LPCWSTR lpStringToFind,
           PACTCTX_SECTION_KEYED_DATA ReturnedData
    );






__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionGuid(
            DWORD dwFlags,
      const GUID *lpExtensionGuid,
            ULONG ulSectionId,
        const GUID *lpGuidToFind,
           PACTCTX_SECTION_KEYED_DATA ReturnedData
    );





typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE  hActCtx;
    DWORD   dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;









































 
__declspec(dllimport)
BOOL
__stdcall
QueryActCtxW(
           DWORD dwFlags,
           HANDLE hActCtx,
       PVOID pvSubInstance,
           ULONG ulInfoClass,
      PVOID pvBuffer,
           SIZE_T cbBuffer,
      SIZE_T *pcbWrittenOrRequired
    );

typedef   BOOL (__stdcall * PQUERYACTCTXW_FUNC)(
           DWORD dwFlags,
           HANDLE hActCtx,
       PVOID pvSubInstance,
           ULONG ulInfoClass,
      PVOID pvBuffer,
           SIZE_T cbBuffer,
      SIZE_T *pcbWrittenOrRequired
    );






__declspec(dllimport)
DWORD
__stdcall
WTSGetActiveConsoleSessionId(
    void
    );





__declspec(dllimport)
WORD
__stdcall
GetActiveProcessorGroupCount(
    void
    );

__declspec(dllimport)
WORD
__stdcall
GetMaximumProcessorGroupCount(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetActiveProcessorCount(
      WORD GroupNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetMaximumProcessorCount(
      WORD GroupNumber
    );







__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNode(
       UCHAR Processor,
      PUCHAR NodeNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeNumberFromHandle(
       HANDLE hFile,
      PUSHORT NodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNodeEx(
       PPROCESSOR_NUMBER Processor,
      PUSHORT NodeNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMask(
       UCHAR Node,
      PULONGLONG ProcessorMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNode(
       UCHAR Node,
      PULONGLONG AvailableBytes
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNodeEx(
       USHORT Node,
      PULONGLONG AvailableBytes
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNode(
       ULONG ProximityId,
      PUCHAR NodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNodeEx(
       ULONG ProximityId,
      PUSHORT NodeNumber
    );






typedef DWORD (__stdcall *APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);































__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRecoveryCallback(
       APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
       PVOID pvParameter,
      DWORD dwPingInterval,
      DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRecoveryCallback(void);

__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRestart(
      PCWSTR pwzCommandline,
      DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRestart(void);

__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRecoveryCallback(
       HANDLE hProcess,
      APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,
     PVOID* ppvParameter,
      PDWORD pdwPingInterval,
      PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRestartSettings(
      HANDLE hProcess,
      PWSTR pwzCommandline,
      PDWORD pcchSize,
      PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
ApplicationRecoveryInProgress(
      PBOOL pbCancelled
    );

__declspec(dllimport)
void
__stdcall
ApplicationRecoveryFinished(
      BOOL bSuccess
    );




#pragma endregion



#pragma region Application Family


typedef struct _FILE_BASIC_INFO {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD FileAttributes;
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;

typedef struct _FILE_STANDARD_INFO {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;

typedef struct _FILE_NAME_INFO {
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFO, *PFILE_NAME_INFO;

typedef struct _FILE_RENAME_INFO {
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;

typedef struct _FILE_ALLOCATION_INFO {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;

typedef struct _FILE_END_OF_FILE_INFO {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;

typedef struct _FILE_STREAM_INFO {
    DWORD NextEntryOffset;
    DWORD StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFO, *PFILE_STREAM_INFO;

typedef struct _FILE_COMPRESSION_INFO {
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;

typedef struct _FILE_ATTRIBUTE_TAG_INFO {
    DWORD FileAttributes;
    DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;

typedef struct _FILE_DISPOSITION_INFO {
    BOOLEAN DeleteFileA;
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;

typedef struct _FILE_ID_BOTH_DIR_INFO {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD FileAttributes;
    DWORD FileNameLength;
    DWORD EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;

typedef struct _FILE_FULL_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
} FILE_FULL_DIR_INFO, *PFILE_FULL_DIR_INFO;

typedef enum _PRIORITY_HINT {
      IoPriorityHintVeryLow = 0,
      IoPriorityHintLow,
      IoPriorityHintNormal,
      MaximumIoPriorityHintType
} PRIORITY_HINT;

typedef struct _FILE_IO_PRIORITY_HINT_INFO {
    PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO;





typedef struct _FILE_ALIGNMENT_INFO {
    ULONG AlignmentRequirement;
} FILE_ALIGNMENT_INFO, *PFILE_ALIGNMENT_INFO;




















typedef struct _FILE_STORAGE_INFO {
    ULONG LogicalBytesPerSector;
    ULONG PhysicalBytesPerSectorForAtomicity;
    ULONG PhysicalBytesPerSectorForPerformance;
    ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
    ULONG Flags;
    ULONG ByteOffsetForSectorAlignment;
    ULONG ByteOffsetForPartitionAlignment;
} FILE_STORAGE_INFO, *PFILE_STORAGE_INFO;




typedef struct _FILE_ID_INFO {
    ULONGLONG VolumeSerialNumber;
    FILE_ID_128 FileId;
} FILE_ID_INFO, *PFILE_ID_INFO;




typedef struct _FILE_ID_EXTD_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    FILE_ID_128 FileId;
    WCHAR FileName[1];
} FILE_ID_EXTD_DIR_INFO, *PFILE_ID_EXTD_DIR_INFO;





































typedef struct _FILE_REMOTE_PROTOCOL_INFO
{
    
    USHORT StructureVersion;     
    USHORT StructureSize;        

    ULONG  Protocol;             

    
    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;

    USHORT Reserved;

    
    ULONG  Flags;

    struct {
        ULONG Reserved[8];
    } GenericReserved;

    






    union {

        struct {

            struct {
                ULONG Capabilities;
            } Server;

            struct {
                ULONG Capabilities;
                ULONG CachingFlags;
            } Share;

        } Smb2;

        ULONG Reserved[16];

    } ProtocolSpecific;



} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandleEx(
       HANDLE hFile,
       FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
      LPVOID lpFileInformation,
       DWORD dwBufferSize
);


#pragma endregion

#pragma region Desktop Family


typedef enum _FILE_ID_TYPE {
      FileIdType,
      ObjectIdType,
      ExtendedFileIdType,
      MaximumFileIdType
} FILE_ID_TYPE, *PFILE_ID_TYPE;

typedef struct FILE_ID_DESCRIPTOR {
    DWORD dwSize;  
    FILE_ID_TYPE Type; 
    union {
        LARGE_INTEGER FileId;
        GUID ObjectId;

        FILE_ID_128 ExtendedFileId;

    } ;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;

__declspec(dllimport)
HANDLE
__stdcall
OpenFileById (
          HANDLE hVolumeHint,
          LPFILE_ID_DESCRIPTOR lpFileId,
          DWORD dwDesiredAccess,
          DWORD dwShareMode,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          DWORD dwFlagsAndAttributes
    );


#pragma endregion



#pragma region Desktop Family












__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkA (
      LPCSTR lpSymlinkFileName,
      LPCSTR lpTargetFileName,
      DWORD dwFlags
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkW (
      LPCWSTR lpSymlinkFileName,
      LPCWSTR lpTargetFileName,
      DWORD dwFlags
    );






__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedA (
          LPCSTR lpSymlinkFileName,
          LPCSTR lpTargetFileName,
          DWORD dwFlags,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedW (
          LPCWSTR lpSymlinkFileName,
          LPCWSTR lpTargetFileName,
          DWORD dwFlags,
          HANDLE hTransaction
    );











__declspec(dllimport)
BOOL
__stdcall
QueryActCtxSettingsW(
           DWORD dwFlags,
           HANDLE hActCtx,
           PCWSTR settingsNameSpace,
               PCWSTR settingName,
      PWSTR pvBuffer,
           SIZE_T dwBuffer,
      SIZE_T *pdwWrittenOrRequired
    );





__declspec(dllimport)
BOOL
__stdcall
ReplacePartitionUnit (
      PWSTR TargetPartition,
      PWSTR SparePartition,
      ULONG Flags
    );






__declspec(dllimport)
BOOL
__stdcall
AddSecureMemoryCacheCallback(
       PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveSecureMemoryCacheCallback(
       PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );




#pragma endregion



#pragma region Desktop Family


 
__declspec(dllimport)
BOOL
__stdcall
CopyContext(
      PCONTEXT Destination,
      DWORD ContextFlags,
      PCONTEXT Source
    );


#pragma endregion

#pragma region Application Family


 
__declspec(dllimport)
BOOL
__stdcall
InitializeContext(
      PVOID Buffer,
      DWORD ContextFlags,
      PCONTEXT* Context,
      PDWORD ContextLength
    );

#pragma endregion



#pragma region Application Family


__declspec(dllimport)
DWORD64
__stdcall
GetEnabledXStateFeatures(
    void
    );

 
__declspec(dllimport)
BOOL
__stdcall
GetXStateFeaturesMask(
      PCONTEXT Context,
      PDWORD64 FeatureMask
    );

 
__declspec(dllimport)
PVOID
__stdcall
LocateXStateFeature(
      PCONTEXT Context,
      DWORD FeatureId,
      PDWORD Length
    );


#pragma endregion

#pragma region Desktop Family


 
__declspec(dllimport)
BOOL
__stdcall
SetXStateFeaturesMask(
      PCONTEXT Context,
      DWORD64 FeatureMask
    );


#pragma endregion







#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
EnableThreadProfiling(
      HANDLE ThreadHandle,
      DWORD Flags,
      DWORD64 HardwareCounters,
      HANDLE *PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
DisableThreadProfiling(
      HANDLE PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
QueryThreadProfiling(
      HANDLE ThreadHandle,
      PBOOLEAN Enabled
    );

__declspec(dllimport)
DWORD
__stdcall
ReadThreadProfilingData(
      HANDLE PerformanceDataHandle,
      DWORD Flags,
      PPERFORMANCE_DATA PerformanceData
    );


#pragma endregion












}




#pragma warning(pop)






































#pragma once

















extern "C++" {

__forceinline
unsigned
_InterlockedIncrement(
       unsigned volatile *Addend
    )
{
    return (unsigned) _InterlockedIncrement((volatile long*) Addend);
}

__forceinline
unsigned long
_InterlockedIncrement(
       unsigned long volatile *Addend
    )
{
    return (unsigned long) _InterlockedIncrement((volatile long*) Addend);
}



__forceinline
unsigned __int64
_InterlockedIncrement(
       unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) _InterlockedIncrement64((volatile long long*) Addend);
}



__forceinline
unsigned
_InterlockedDecrement(
       unsigned volatile *Addend
    )
{
    return (unsigned long) _InterlockedDecrement((volatile long*) Addend);
}

__forceinline
unsigned long
_InterlockedDecrement(
       unsigned long volatile *Addend
    )
{
    return (unsigned long) _InterlockedDecrement((volatile long*) Addend);
}



__forceinline
unsigned __int64
_InterlockedDecrement(
       unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) _InterlockedDecrement64((volatile long long*) Addend);
}





__forceinline
unsigned
_InterlockedExchange(
       unsigned volatile *Target,
      unsigned Value
    )
{
    return (unsigned) _InterlockedExchange((volatile long*) Target, (long) Value);
}

__forceinline
unsigned long
_InterlockedExchange(
       unsigned long volatile *Target,
      unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchange((volatile long*) Target, (long) Value);
}



__forceinline
unsigned __int64
_InterlockedExchange(
       unsigned __int64 volatile *Target,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedExchange64((volatile long long*) Target, (long long) Value);
}



__forceinline
unsigned
_InterlockedExchangeAdd(
       unsigned volatile *Addend,
      unsigned Value
    )
{
    return (unsigned) _InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned
InterlockedExchangeSubtract(
       unsigned volatile *Addend,
      unsigned Value
    )
{
    return (unsigned) _InterlockedExchangeAdd((volatile long*) Addend,  - (long) Value);
}

__forceinline
unsigned long
_InterlockedExchangeAdd(
       unsigned long volatile *Addend,
      unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned long
InterlockedExchangeSubtract(
       unsigned long volatile *Addend,
      unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchangeAdd((volatile long*) Addend,  - (long) Value);
}



__forceinline
unsigned __int64
_InterlockedExchangeAdd(
       unsigned __int64 volatile *Addend,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedExchangeAdd64((volatile long long*) Addend,  (long long) Value);
}

__forceinline
unsigned __int64
InterlockedExchangeSubtract(
       unsigned __int64 volatile *Addend,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedExchangeAdd64((volatile long long*) Addend,  - (long long) Value);
}



__forceinline
unsigned
_InterlockedCompareExchange(
       unsigned volatile *Destination,
      unsigned Exchange,
      unsigned Comperand
    )
{
    return (unsigned) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}

__forceinline
unsigned long
_InterlockedCompareExchange(
       unsigned long volatile *Destination,
      unsigned long Exchange,
      unsigned long Comperand
    )
{
    return (unsigned long) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}



__forceinline
unsigned __int64
_InterlockedCompareExchange(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Exchange,
      unsigned __int64 Comperand
    )
{
    return (unsigned __int64) _InterlockedCompareExchange64((volatile long long*) Destination, (long long) Exchange, (long long) Comperand);
}

__forceinline
unsigned __int64
_InterlockedAnd(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedAnd64((volatile long long*) Destination, (long long) Value);
}

__forceinline
unsigned __int64
_InterlockedOr(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedOr64((volatile long long*) Destination, (long long) Value);
}

__forceinline
unsigned __int64
_InterlockedXor(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedXor64((volatile long long*) Destination, (long long) Value);
}





} 






























#pragma once


#pragma warning(push)
#pragma warning(disable: 4201)      




























extern "C" {












































































































































































































































#pragma region Desktop Family



typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;



#pragma endregion



















































































































#pragma region Desktop Family






typedef struct _PSINJECTDATA {

    DWORD   DataBytes;      
    WORD    InjectionPoint; 
    WORD    PageNumber;     

    

} PSINJECTDATA, *PPSINJECTDATA;


#pragma endregion





































































#pragma region Desktop Family






typedef struct _PSFEATURE_OUTPUT {

    BOOL bPageIndependent;
    BOOL bSetPageDevice;

} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;





typedef struct _PSFEATURE_CUSTPAPER {

    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;

} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;


#pragma endregion



















































#pragma region Application Family


typedef struct  tagXFORM
  {
    FLOAT   eM11;
    FLOAT   eM12;
    FLOAT   eM21;
    FLOAT   eM22;
    FLOAT   eDx;
    FLOAT   eDy;
  } XFORM, *PXFORM,  *LPXFORM;


typedef struct tagBITMAP
  {
    LONG        bmType;
    LONG        bmWidth;
    LONG        bmHeight;
    LONG        bmWidthBytes;
    WORD        bmPlanes;
    WORD        bmBitsPixel;
    LPVOID      bmBits;
  } BITMAP, *PBITMAP,  *NPBITMAP,  *LPBITMAP;


#pragma endregion

























#pragma warning(disable:4103)

#pragma pack(push,1)









#pragma region Application Family


typedef struct tagRGBTRIPLE {
        BYTE    rgbtBlue;
        BYTE    rgbtGreen;
        BYTE    rgbtRed;
} RGBTRIPLE, *PRGBTRIPLE,  *NPRGBTRIPLE,  *LPRGBTRIPLE;


#pragma endregion




























#pragma warning(disable:4103)

#pragma pack(pop)









#pragma region Application Family


typedef struct tagRGBQUAD {
        BYTE    rgbBlue;
        BYTE    rgbGreen;
        BYTE    rgbRed;
        BYTE    rgbReserved;
} RGBQUAD;


#pragma endregion

#pragma region Desktop Family


typedef RGBQUAD * LPRGBQUAD;


#pragma endregion


















#pragma region Application Family


typedef LONG   LCSCSTYPE;



typedef LONG    LCSGAMUTMATCH;



























typedef long            FXPT16DOT16,  *LPFXPT16DOT16;
typedef long            FXPT2DOT30,  *LPFXPT2DOT30;




typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;


#pragma endregion

#pragma region Desktop Family


typedef CIEXYZ   *LPCIEXYZ;


#pragma endregion

#pragma region Application Family


typedef struct tagICEXYZTRIPLE
{
        CIEXYZ  ciexyzRed;
        CIEXYZ  ciexyzGreen;
        CIEXYZ  ciexyzBlue;
} CIEXYZTRIPLE;


#pragma endregion

#pragma region Desktop Family


typedef CIEXYZTRIPLE     *LPCIEXYZTRIPLE;


#pragma endregion

#pragma region Application Family







typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR   lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR  lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;




typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;



#pragma endregion



#pragma region Desktop Family



typedef struct tagBITMAPCOREHEADER {
        DWORD   bcSize;                 
        WORD    bcWidth;
        WORD    bcHeight;
        WORD    bcPlanes;
        WORD    bcBitCount;
} BITMAPCOREHEADER,  *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;


#pragma endregion

#pragma region Application Family


typedef struct tagBITMAPINFOHEADER{
        DWORD      biSize;
        LONG       biWidth;
        LONG       biHeight;
        WORD       biPlanes;
        WORD       biBitCount;
        DWORD      biCompression;
        DWORD      biSizeImage;
        LONG       biXPelsPerMeter;
        LONG       biYPelsPerMeter;
        DWORD      biClrUsed;
        DWORD      biClrImportant;
} BITMAPINFOHEADER,  *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;


#pragma endregion



#pragma region Desktop Family


typedef struct {
        DWORD        bV4Size;
        LONG         bV4Width;
        LONG         bV4Height;
        WORD         bV4Planes;
        WORD         bV4BitCount;
        DWORD        bV4V4Compression;
        DWORD        bV4SizeImage;
        LONG         bV4XPelsPerMeter;
        LONG         bV4YPelsPerMeter;
        DWORD        bV4ClrUsed;
        DWORD        bV4ClrImportant;
        DWORD        bV4RedMask;
        DWORD        bV4GreenMask;
        DWORD        bV4BlueMask;
        DWORD        bV4AlphaMask;
        DWORD        bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD        bV4GammaRed;
        DWORD        bV4GammaGreen;
        DWORD        bV4GammaBlue;
} BITMAPV4HEADER,  *LPBITMAPV4HEADER, *PBITMAPV4HEADER;


#pragma endregion




#pragma region Desktop Family

typedef struct {
        DWORD        bV5Size;
        LONG         bV5Width;
        LONG         bV5Height;
        WORD         bV5Planes;
        WORD         bV5BitCount;
        DWORD        bV5Compression;
        DWORD        bV5SizeImage;
        LONG         bV5XPelsPerMeter;
        LONG         bV5YPelsPerMeter;
        DWORD        bV5ClrUsed;
        DWORD        bV5ClrImportant;
        DWORD        bV5RedMask;
        DWORD        bV5GreenMask;
        DWORD        bV5BlueMask;
        DWORD        bV5AlphaMask;
        DWORD        bV5CSType;
        CIEXYZTRIPLE bV5Endpoints;
        DWORD        bV5GammaRed;
        DWORD        bV5GammaGreen;
        DWORD        bV5GammaBlue;
        DWORD        bV5Intent;
        DWORD        bV5ProfileData;
        DWORD        bV5ProfileSize;
        DWORD        bV5Reserved;
} BITMAPV5HEADER,  *LPBITMAPV5HEADER, *PBITMAPV5HEADER;


#pragma endregion
















#pragma region Application Family


typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER    bmiHeader;
    RGBQUAD             bmiColors[1];
} BITMAPINFO,  *LPBITMAPINFO, *PBITMAPINFO;


#pragma endregion

#pragma region Desktop Family


typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER    bmciHeader;
    RGBTRIPLE           bmciColors[1];
} BITMAPCOREINFO,  *LPBITMAPCOREINFO, *PBITMAPCOREINFO;


#pragma endregion

























#pragma warning(disable:4103)

#pragma pack(push,2)









#pragma region Desktop Family


typedef struct tagBITMAPFILEHEADER {
        WORD    bfType;
        DWORD   bfSize;
        WORD    bfReserved1;
        WORD    bfReserved2;
        DWORD   bfOffBits;
} BITMAPFILEHEADER,  *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;


#pragma endregion




























#pragma warning(disable:4103)

#pragma pack(pop)














#pragma region Desktop Family


typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO,  *NPCHARSETINFO,  *LPCHARSETINFO;


#pragma endregion








#pragma region Application Family


typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;


#pragma endregion






#pragma region Application Family




typedef struct tagHANDLETABLE
  {
    HGDIOBJ     objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE,  *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD       rdSize;
    WORD        rdFunction;
    WORD        rdParm[1];
  } METARECORD;


#pragma endregion

#pragma region Desktop Family


typedef struct tagMETARECORD __unaligned *PMETARECORD;


#pragma endregion

#pragma region Application Family


typedef struct tagMETARECORD __unaligned  *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG        mm;
    LONG        xExt;
    LONG        yExt;
    HMETAFILE   hMF;
  } METAFILEPICT,  *LPMETAFILEPICT;


#pragma endregion

























#pragma warning(disable:4103)

#pragma pack(push,2)









#pragma region Desktop Family


typedef struct tagMETAHEADER
{
    WORD        mtType;
    WORD        mtHeaderSize;
    WORD        mtVersion;
    DWORD       mtSize;
    WORD        mtNoObjects;
    DWORD       mtMaxRecord;
    WORD        mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER __unaligned *PMETAHEADER;
typedef struct tagMETAHEADER __unaligned  *LPMETAHEADER;


#pragma endregion




























#pragma warning(disable:4103)

#pragma pack(pop)









#pragma region Application Family



typedef struct tagENHMETARECORD
{
    DWORD   iType;              
    DWORD   nSize;              
    DWORD   dParm[1];           
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD   iType;              
    DWORD   nSize;              
                                
    RECTL   rclBounds;          
    RECTL   rclFrame;           
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   nBytes;             
    DWORD   nRecords;           
    WORD    nHandles;           
                                
    WORD    sReserved;          
    DWORD   nDescription;       
                                
    DWORD   offDescription;     
                                
    DWORD   nPalEntries;        
    SIZEL   szlDevice;          
    SIZEL   szlMillimeters;     

    DWORD   cbPixelFormat;      
                                
    DWORD   offPixelFormat;     
                                
    DWORD   bOpenGL;            
                                


    SIZEL   szlMicrometers;     


} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;


#pragma endregion











#pragma region Desktop Family








    typedef BYTE BCHAR;



#pragma endregion



























#pragma warning(disable:4103)

#pragma pack(push,4)









#pragma region Application Family


typedef struct tagTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA,  *NPTEXTMETRICA,  *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW,  *NPTEXTMETRICW,  *LPTEXTMETRICW;






typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;



#pragma endregion




























#pragma warning(disable:4103)

#pragma pack(pop)
















































#pragma warning(disable:4103)

#pragma pack(push,4)









#pragma region Desktop Family


typedef struct tagNEWTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA,  *NPNEWTEXTMETRICA,  *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW,  *NPNEWTEXTMETRICW,  *LPNEWTEXTMETRICW;






typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;



#pragma endregion




























#pragma warning(disable:4103)

#pragma pack(pop)











#pragma region Desktop Family


typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXW;



typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;



#pragma endregion






#pragma region Desktop Family


typedef struct tagPELARRAY
  {
    LONG        paXCount;
    LONG        paYCount;
    LONG        paXExt;
    LONG        paYExt;
    BYTE        paRGBs;
  } PELARRAY, *PPELARRAY,  *NPPELARRAY,  *LPPELARRAY;


#pragma endregion

#pragma region Application Family



typedef struct tagLOGBRUSH
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    ULONG_PTR   lbHatch;
  } LOGBRUSH, *PLOGBRUSH,  *NPLOGBRUSH,  *LPLOGBRUSH;

typedef struct tagLOGBRUSH32
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    ULONG       lbHatch;
  } LOGBRUSH32, *PLOGBRUSH32,  *NPLOGBRUSH32,  *LPLOGBRUSH32;


#pragma endregion

#pragma region Desktop Family


typedef LOGBRUSH            PATTERN;
typedef PATTERN             *PPATTERN;
typedef PATTERN         *NPPATTERN;
typedef PATTERN          *LPPATTERN;


#pragma endregion

#pragma region Application Family



typedef struct tagLOGPEN
  {
    UINT        lopnStyle;
    POINT       lopnWidth;
    COLORREF    lopnColor;
  } LOGPEN, *PLOGPEN,  *NPLOGPEN,  *LPLOGPEN;


#pragma endregion

#pragma region Desktop Family


typedef struct tagEXTLOGPEN {
    DWORD       elpPenStyle;
    DWORD       elpWidth;
    UINT        elpBrushStyle;
    COLORREF    elpColor;
    ULONG_PTR   elpHatch;
    DWORD       elpNumEntries;
    DWORD       elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN,  *NPEXTLOGPEN,  *LPEXTLOGPEN;


#pragma endregion

#pragma region Application Family


typedef struct tagEXTLOGPEN32 {
    DWORD       elpPenStyle;
    DWORD       elpWidth;
    UINT        elpBrushStyle;
    COLORREF    elpColor;
    ULONG       elpHatch;
    DWORD       elpNumEntries;
    DWORD       elpStyleEntry[1];
} EXTLOGPEN32, *PEXTLOGPEN32,  *NPEXTLOGPEN32,  *LPEXTLOGPEN32;



typedef struct tagPALETTEENTRY {
    BYTE        peRed;
    BYTE        peGreen;
    BYTE        peBlue;
    BYTE        peFlags;
} PALETTEENTRY, *PPALETTEENTRY,  *LPPALETTEENTRY;





typedef struct tagLOGPALETTE {
    WORD        palVersion;
    WORD        palNumEntries;
      PALETTEENTRY        palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE,  *NPLOGPALETTE,  *LPLOGPALETTE;






typedef struct tagLOGFONTA
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    CHAR      lfFaceName[32];
} LOGFONTA, *PLOGFONTA,  *NPLOGFONTA,  *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    WCHAR     lfFaceName[32];
} LOGFONTW, *PLOGFONTW,  *NPLOGFONTW,  *LPLOGFONTW;






typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;



#pragma endregion



#pragma region Desktop Family



typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE     elfFullName[64];
    BYTE     elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR    elfFullName[64];
    WCHAR    elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;




typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;



typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    BYTE        elfScript[32];
} ENUMLOGFONTEXA,  *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    WCHAR       elfScript[32];
} ENUMLOGFONTEXW,  *LPENUMLOGFONTEXW;




typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;




#pragma endregion
























































































                                    

                                    

                                    



































#pragma region Application Family


typedef struct tagPANOSE
{
    BYTE    bFamilyType;
    BYTE    bSerifStyle;
    BYTE    bWeight;
    BYTE    bProportion;
    BYTE    bContrast;
    BYTE    bStrokeVariation;
    BYTE    bArmStyle;
    BYTE    bLetterform;
    BYTE    bMidline;
    BYTE    bXHeight;
} PANOSE, * LPPANOSE;

















































































































typedef struct tagEXTLOGFONTA {
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA,  *NPEXTLOGFONTA,  *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW,  *NPEXTLOGFONTW,  *LPEXTLOGFONTW;






typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;



#pragma endregion
































































































































































































                             

                             

                             



















































































































































#pragma region Application Family



typedef struct _devicemodeA {
    BYTE   dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };
      
      struct {
        POINTL dmPosition;
        DWORD  dmDisplayOrientation;
        DWORD  dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE   dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    };
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;


} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR  dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };
      
      struct {
        POINTL dmPosition;
        DWORD  dmDisplayOrientation;
        DWORD  dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR  dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    };
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;


} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;






typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;
















































































































#pragma endregion













































































































































































































































































































#pragma region Application Family


typedef struct _DISPLAY_DEVICEA {
    DWORD  cb;
    CHAR   DeviceName[32];
    CHAR   DeviceString[128];
    DWORD  StateFlags;
    CHAR   DeviceID[128];
    CHAR   DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD  cb;
    WCHAR  DeviceName[32];
    WCHAR  DeviceString[128];
    DWORD  StateFlags;
    WCHAR  DeviceID[128];
    WCHAR  DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;





typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;



#pragma endregion































                                          
                                          

#pragma region Application Family


typedef struct DISPLAYCONFIG_RATIONAL
{
    UINT32    Numerator;
    UINT32    Denominator;
} DISPLAYCONFIG_RATIONAL;

typedef enum
{
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER                   = -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15                    =  0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO                  =  1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO         =  2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO         =  3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI                     =  4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI                    =  5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS                    =  6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN                   =  8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI                     =  9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL    = 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED    = 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL            = 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED            = 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE              = 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST                = 15,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL                = 0x80000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32            = 0xFFFFFFFF
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;

typedef enum
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED                 = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE                 = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED                  = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST  = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST  = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32                = 0xFFFFFFFF
} DISPLAYCONFIG_SCANLINE_ORDERING;

typedef struct DISPLAYCONFIG_2DREGION
{
    UINT32 cx;
    UINT32 cy;
} DISPLAYCONFIG_2DREGION;

typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
    UINT64                          pixelRate;
    DISPLAYCONFIG_RATIONAL          hSyncFreq;
    DISPLAYCONFIG_RATIONAL          vSyncFreq;
    DISPLAYCONFIG_2DREGION          activeSize;
    DISPLAYCONFIG_2DREGION          totalSize;

    union
    {
        struct
        {
            UINT32 videoStandard : 16;

            
            UINT32 vSyncFreqDivider : 6;

            UINT32 reserved : 10;
        } AdditionalSignalInfo;

        UINT32 videoStandard;
    };

    
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;

typedef enum
{
    DISPLAYCONFIG_SCALING_IDENTITY                  = 1,
    DISPLAYCONFIG_SCALING_CENTERED                  = 2,
    DISPLAYCONFIG_SCALING_STRETCHED                 = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX    = 4,
    DISPLAYCONFIG_SCALING_CUSTOM                    = 5,
    DISPLAYCONFIG_SCALING_PREFERRED                 = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32              = 0xFFFFFFFF
} DISPLAYCONFIG_SCALING;

typedef enum
{
    DISPLAYCONFIG_ROTATION_IDENTITY     = 1,
    DISPLAYCONFIG_ROTATION_ROTATE90     = 2,
    DISPLAYCONFIG_ROTATION_ROTATE180    = 3,
    DISPLAYCONFIG_ROTATION_ROTATE270    = 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_ROTATION;

typedef enum
{
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_MODE_INFO_TYPE;

typedef enum
{
    DISPLAYCONFIG_PIXELFORMAT_8BPP          = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP         = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP         = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP         = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI        = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32  = 0xffffffff
} DISPLAYCONFIG_PIXELFORMAT;

typedef struct DISPLAYCONFIG_SOURCE_MODE
{
    UINT32                      width;
    UINT32                      height;
    DISPLAYCONFIG_PIXELFORMAT   pixelFormat;
    POINTL                      position;
} DISPLAYCONFIG_SOURCE_MODE;

typedef struct DISPLAYCONFIG_TARGET_MODE
{
    DISPLAYCONFIG_VIDEO_SIGNAL_INFO   targetVideoSignalInfo;
} DISPLAYCONFIG_TARGET_MODE;

typedef struct DISPLAYCONFIG_MODE_INFO
{
    DISPLAYCONFIG_MODE_INFO_TYPE    infoType;
    UINT32                          id;
    LUID                            adapterId;
    union
    {
        DISPLAYCONFIG_TARGET_MODE   targetMode;
        DISPLAYCONFIG_SOURCE_MODE   sourceMode;
    };
} DISPLAYCONFIG_MODE_INFO;



typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
    LUID    adapterId;
    UINT32  id;
    UINT32  modeInfoIdx;
    UINT32  statusFlags;
} DISPLAYCONFIG_PATH_SOURCE_INFO;







typedef struct DISPLAYCONFIG_PATH_TARGET_INFO
{
    LUID                                    adapterId;
    UINT32                                  id;
    UINT32                                  modeInfoIdx;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY   outputTechnology;
    DISPLAYCONFIG_ROTATION                  rotation;
    DISPLAYCONFIG_SCALING                   scaling;
    DISPLAYCONFIG_RATIONAL                  refreshRate;
    DISPLAYCONFIG_SCANLINE_ORDERING         scanLineOrdering;
    BOOL                                    targetAvailable;
    UINT32                                  statusFlags;
} DISPLAYCONFIG_PATH_TARGET_INFO;










typedef struct DISPLAYCONFIG_PATH_INFO
{
    DISPLAYCONFIG_PATH_SOURCE_INFO  sourceInfo;
    DISPLAYCONFIG_PATH_TARGET_INFO  targetInfo;
    UINT32                          flags;
} DISPLAYCONFIG_PATH_INFO;







typedef enum
{
      DISPLAYCONFIG_TOPOLOGY_INTERNAL       = 0x00000001,
      DISPLAYCONFIG_TOPOLOGY_CLONE          = 0x00000002,
      DISPLAYCONFIG_TOPOLOGY_EXTEND         = 0x00000004,
      DISPLAYCONFIG_TOPOLOGY_EXTERNAL       = 0x00000008,
      DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32   = 0xFFFFFFFF
} DISPLAYCONFIG_TOPOLOGY_ID;


typedef enum
{
      DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME             = 1,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME             = 2,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE   = 3,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME            = 4,
      DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE      = 5,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE        = 6,
      DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32                = 0xFFFFFFFF
} DISPLAYCONFIG_DEVICE_INFO_TYPE;


#pragma endregion


#pragma region Application Family


typedef struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
    DISPLAYCONFIG_DEVICE_INFO_TYPE  type;
    UINT32                          size;
    LUID                            adapterId;
    UINT32                          id;
} DISPLAYCONFIG_DEVICE_INFO_HEADER;


#pragma endregion

#pragma region Desktop Family


typedef struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER            header;
    WCHAR                                       viewGdiDeviceName[32];
} DISPLAYCONFIG_SOURCE_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
    union
    {
        struct
        {
            UINT32  friendlyNameFromEdid : 1;
            UINT32  friendlyNameForced : 1;
            UINT32  edidIdsValid : 1;
            UINT32  reserved : 29;
        };
        UINT32  value;
    };
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER            header;
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS      flags;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY       outputTechnology;
    UINT16                                      edidManufactureId;
    UINT16                                      edidProductCodeId;
    UINT32                                      connectorInstance;
    WCHAR                                       monitorFriendlyDeviceName[64];
    WCHAR                                       monitorDevicePath[128];
} DISPLAYCONFIG_TARGET_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
    UINT32                              width;
    UINT32                              height;
    DISPLAYCONFIG_TARGET_MODE           targetMode;
} DISPLAYCONFIG_TARGET_PREFERRED_MODE;

typedef struct DISPLAYCONFIG_ADAPTER_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
    WCHAR                               adapterDevicePath[128];
} DISPLAYCONFIG_ADAPTER_NAME;

typedef struct DISPLAYCONFIG_TARGET_BASE_TYPE {
    DISPLAYCONFIG_DEVICE_INFO_HEADER      header;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology;
} DISPLAYCONFIG_TARGET_BASE_TYPE;

typedef struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
    union
    {
        struct
        {
            UINT32 bootPersistenceOn    : 1;
            UINT32 reserved             : 31;
        };
        UINT32 value;
    };
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE;


#pragma endregion






































#pragma region Application Family


typedef struct _RGNDATAHEADER {
    DWORD   dwSize;
    DWORD   iType;
    DWORD   nCount;
    DWORD   nRgnSize;
    RECT    rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER   rdh;
    char            Buffer[1];
} RGNDATA, *PRGNDATA,  *NPRGNDATA,  *LPRGNDATA;


#pragma endregion






#pragma region Desktop Family


typedef struct _ABC {
    int     abcA;
    UINT    abcB;
    int     abcC;
} ABC, *PABC,  *NPABC,  *LPABC;

typedef struct _ABCFLOAT {
    FLOAT   abcfA;
    FLOAT   abcfB;
    FLOAT   abcfC;
} ABCFLOAT, *PABCFLOAT,  *NPABCFLOAT,  *LPABCFLOAT;


#pragma endregion







#pragma region Desktop Family


typedef struct _OUTLINETEXTMETRICA {
    UINT    otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA,  *NPOUTLINETEXTMETRICA,  *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT    otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW,  *NPOUTLINETEXTMETRICW,  *LPOUTLINETEXTMETRICW;






typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;



#pragma endregion







#pragma region Application Family


typedef struct tagPOLYTEXTA
{
    int       x;
    int       y;
    UINT      n;
    LPCSTR    lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTA, *PPOLYTEXTA,  *NPPOLYTEXTA,  *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int       x;
    int       y;
    UINT      n;
    LPCWSTR   lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTW, *PPOLYTEXTW,  *NPPOLYTEXTW,  *LPPOLYTEXTW;






typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;



#pragma endregion

#pragma region Desktop Family


typedef struct _FIXED {

    WORD    fract;
    short   value;




} FIXED;


typedef struct _MAT2 {
     FIXED  eM11;
     FIXED  eM12;
     FIXED  eM21;
     FIXED  eM22;
} MAT2,  *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT    gmBlackBoxX;
    UINT    gmBlackBoxY;
    POINT   gmptGlyphOrigin;
    short   gmCellIncX;
    short   gmCellIncY;
} GLYPHMETRICS,  *LPGLYPHMETRICS;


#pragma endregion

























#pragma region Desktop Family


typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD    wType;
    WORD    cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD   cb;
    DWORD   dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;


#pragma endregion













































#pragma region Desktop Family


typedef struct tagGCP_RESULTSA
    {
    DWORD   lStructSize;
    LPSTR     lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD   lStructSize;
    LPWSTR    lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;




typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;



#pragma endregion


#pragma region Desktop Family


typedef struct _RASTERIZER_STATUS {
    short   nSize;
    short   wFlags;
    short   nLanguageID;
} RASTERIZER_STATUS,  *LPRASTERIZER_STATUS;


#pragma endregion





#pragma region Application Family



typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerType;
    BYTE  bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR,  *LPPIXELFORMATDESCRIPTOR;


#pragma endregion


































#pragma region Desktop Family





typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);















typedef OLDFONTENUMPROCA    FONTENUMPROCA;
typedef OLDFONTENUMPROCW    FONTENUMPROCW;



typedef FONTENUMPROCA FONTENUMPROC;


typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);














#pragma endregion



#pragma region Desktop Family


__declspec(dllimport) int __stdcall AddFontResourceA(  LPCSTR);
__declspec(dllimport) int __stdcall AddFontResourceW(  LPCWSTR);






 __declspec(dllimport) BOOL  __stdcall AnimatePalette(   HPALETTE hPal,   UINT iStartIndex,    UINT cEntries,   const PALETTEENTRY * ppe);
 __declspec(dllimport) BOOL  __stdcall Arc(   HDC hdc,   int x1,   int y1,   int x2,   int y2,   int x3,   int y3,   int x4,   int y4);
 __declspec(dllimport) BOOL  __stdcall BitBlt(   HDC hdc,   int x,   int y,   int cx,   int cy,   HDC hdcSrc,   int x1,   int y1,   DWORD rop);
__declspec(dllimport) BOOL  __stdcall CancelDC(   HDC hdc);
 __declspec(dllimport) BOOL  __stdcall Chord(   HDC hdc,   int x1,   int y1,   int x2,   int y2,   int x3,   int y3,   int x4,   int y4);
__declspec(dllimport) int   __stdcall ChoosePixelFormat(   HDC hdc,   const PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) HMETAFILE  __stdcall CloseMetaFile(   HDC hdc);
__declspec(dllimport) int     __stdcall CombineRgn(   HRGN hrgnDst,   HRGN hrgnSrc1,   HRGN hrgnSrc2,   int iMode);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA(   HMETAFILE,   LPCSTR);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW(   HMETAFILE,   LPCWSTR);





 __declspec(dllimport) HBITMAP __stdcall CreateBitmap(   int nWidth,   int nHeight,   UINT nPlanes,   UINT nBitCount,   const void *lpBits);
 __declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect(   const BITMAP *pbm);
 __declspec(dllimport) HBRUSH  __stdcall CreateBrushIndirect(   const LOGBRUSH *plbrush);
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap(   HDC hdc,   int cx,   int cy);
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap(   HDC hdc,   int cx,   int cy);
__declspec(dllimport) HDC     __stdcall CreateCompatibleDC(   HDC hdc);
__declspec(dllimport) HDC     __stdcall CreateDCA(   LPCSTR pwszDriver,   LPCSTR pwszDevice,   LPCSTR pszPort,   const DEVMODEA * pdm);
__declspec(dllimport) HDC     __stdcall CreateDCW(   LPCWSTR pwszDriver,   LPCWSTR pwszDevice,   LPCWSTR pszPort,   const DEVMODEW * pdm);





__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap(   HDC hdc,   const BITMAPINFOHEADER *pbmih,   DWORD flInit,   const void *pjBits,   const BITMAPINFO *pbmi,   UINT iUsage);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrush(   HGLOBAL h,   UINT iUsage);
 __declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrushPt(   const void *lpPackedDIB,   UINT iUsage);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgn(   int x1,   int y1,   int x2,   int y2);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgnIndirect(   const RECT *lprect);
 __declspec(dllimport) HFONT   __stdcall CreateFontIndirectA(   const LOGFONTA *lplf);
 __declspec(dllimport) HFONT   __stdcall CreateFontIndirectW(   const LOGFONTW *lplf);





__declspec(dllimport) HFONT   __stdcall CreateFontA(   int cHeight,   int cWidth,   int cEscapement,   int cOrientation,   int cWeight,   DWORD bItalic,
                               DWORD bUnderline,   DWORD bStrikeOut,   DWORD iCharSet,   DWORD iOutPrecision,   DWORD iClipPrecision,
                               DWORD iQuality,   DWORD iPitchAndFamily,   LPCSTR pszFaceName);
__declspec(dllimport) HFONT   __stdcall CreateFontW(   int cHeight,   int cWidth,   int cEscapement,   int cOrientation,   int cWeight,   DWORD bItalic,
                               DWORD bUnderline,   DWORD bStrikeOut,   DWORD iCharSet,   DWORD iOutPrecision,   DWORD iClipPrecision,
                               DWORD iQuality,   DWORD iPitchAndFamily,   LPCWSTR pszFaceName);






__declspec(dllimport) HBRUSH  __stdcall CreateHatchBrush(   int iHatch,   COLORREF color);
__declspec(dllimport) HDC     __stdcall CreateICA(   LPCSTR pszDriver,   LPCSTR pszDevice,   LPCSTR pszPort,   const DEVMODEA * pdm);
__declspec(dllimport) HDC     __stdcall CreateICW(   LPCWSTR pszDriver,   LPCWSTR pszDevice,   LPCWSTR pszPort,   const DEVMODEW * pdm);





__declspec(dllimport) HDC     __stdcall CreateMetaFileA(   LPCSTR pszFile);
__declspec(dllimport) HDC     __stdcall CreateMetaFileW(   LPCWSTR pszFile);





 __declspec(dllimport) HPALETTE __stdcall CreatePalette(   const LOGPALETTE * plpal);
__declspec(dllimport) HPEN    __stdcall CreatePen(   int iStyle,   int cWidth,   COLORREF color);
 __declspec(dllimport) HPEN    __stdcall CreatePenIndirect(   const LOGPEN *plpen);
__declspec(dllimport) HRGN    __stdcall CreatePolyPolygonRgn(    const POINT *pptl,
                                                  const INT  *pc,
                                                  int cPoly,
                                                  int iMode);
 __declspec(dllimport) HBRUSH  __stdcall CreatePatternBrush(   HBITMAP hbm);
__declspec(dllimport) HRGN    __stdcall CreateRectRgn(   int x1,   int y1,   int x2,   int y2);
__declspec(dllimport) HRGN    __stdcall CreateRectRgnIndirect(   const RECT *lprect);
__declspec(dllimport) HRGN    __stdcall CreateRoundRectRgn(   int x1,   int y1,   int x2,   int y2,   int w,   int h);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceA(   DWORD fdwHidden,   LPCSTR lpszFont,   LPCSTR lpszFile,   LPCSTR lpszPath);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceW(   DWORD fdwHidden,   LPCWSTR lpszFont,   LPCWSTR lpszFile,   LPCWSTR lpszPath);





__declspec(dllimport) HBRUSH  __stdcall CreateSolidBrush(   COLORREF color);

__declspec(dllimport) BOOL __stdcall DeleteDC(   HDC hdc);
__declspec(dllimport) BOOL __stdcall DeleteMetaFile(   HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall DeleteObject(   HGDIOBJ ho);
__declspec(dllimport) int  __stdcall DescribePixelFormat(    HDC hdc,
                                              int iPixelFormat,
                                              UINT nBytes,
                                              LPPIXELFORMATDESCRIPTOR ppfd);





typedef UINT   (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD  (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);


#pragma endregion














































































#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesA(
                     LPCSTR         pDevice,
                 LPCSTR         pPort,
                     WORD             fwCapability,
      LPSTR          pOutput,
                 const DEVMODEA   *pDevMode
    );
__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesW(
                     LPCWSTR         pDevice,
                 LPCWSTR         pPort,
                     WORD             fwCapability,
      LPWSTR          pOutput,
                 const DEVMODEW   *pDevMode
    );






__declspec(dllimport) int  __stdcall DrawEscape(     HDC    hdc,
                                      int    iEscape,
                                      int    cjIn,
                                      LPCSTR lpIn);

 __declspec(dllimport) BOOL __stdcall Ellipse(   HDC hdc,   int left,   int top,    int right,   int bottom);


__declspec(dllimport) int  __stdcall EnumFontFamiliesExA(   HDC hdc,   LPLOGFONTA lpLogfont,   FONTENUMPROCA lpProc,   LPARAM lParam,   DWORD dwFlags);
__declspec(dllimport) int  __stdcall EnumFontFamiliesExW(   HDC hdc,   LPLOGFONTW lpLogfont,   FONTENUMPROCW lpProc,   LPARAM lParam,   DWORD dwFlags);







__declspec(dllimport) int  __stdcall EnumFontFamiliesA(   HDC hdc,   LPCSTR lpLogfont,   FONTENUMPROCA lpProc,   LPARAM lParam);
__declspec(dllimport) int  __stdcall EnumFontFamiliesW(   HDC hdc,   LPCWSTR lpLogfont,   FONTENUMPROCW lpProc,   LPARAM lParam);





__declspec(dllimport) int  __stdcall EnumFontsA(   HDC hdc,   LPCSTR lpLogfont,    FONTENUMPROCA lpProc,   LPARAM lParam);
__declspec(dllimport) int  __stdcall EnumFontsW(   HDC hdc,   LPCWSTR lpLogfont,    FONTENUMPROCW lpProc,   LPARAM lParam);







__declspec(dllimport) int  __stdcall EnumObjects(   HDC hdc,   int nType,   GOBJENUMPROC lpFunc,   LPARAM lParam);





__declspec(dllimport) BOOL __stdcall EqualRgn(   HRGN hrgn1,   HRGN hrgn2);
 __declspec(dllimport) int  __stdcall Escape(     HDC hdc,
                                  int iEscape,
                                  int cjIn,
                                  LPCSTR pvIn,
                                  LPVOID pvOut);
__declspec(dllimport) int  __stdcall ExtEscape(      HDC hdc,
                                      int iEscape,
                                      int cjInput,
                                      LPCSTR lpInData,
                                      int cjOutput,
                                      LPSTR lpOutData);
 __declspec(dllimport) int  __stdcall ExcludeClipRect(   HDC hdc,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) HRGN __stdcall ExtCreateRegion(   const XFORM * lpx,   DWORD nCount,   const RGNDATA * lpData);
 __declspec(dllimport) BOOL __stdcall ExtFloodFill(   HDC hdc,   int x,   int y,   COLORREF color,   UINT type);
 __declspec(dllimport) BOOL __stdcall FillRgn(   HDC hdc,   HRGN hrgn,   HBRUSH hbr);
 __declspec(dllimport) BOOL __stdcall FloodFill(   HDC hdc,   int x,   int y,   COLORREF color);
 __declspec(dllimport) BOOL __stdcall FrameRgn(   HDC hdc,   HRGN hrgn,   HBRUSH hbr,   int w,   int h);
__declspec(dllimport) int  __stdcall GetROP2(   HDC hdc);
__declspec(dllimport) BOOL __stdcall GetAspectRatioFilterEx(   HDC hdc,   LPSIZE lpsize);
__declspec(dllimport) COLORREF __stdcall GetBkColor(   HDC hdc);


__declspec(dllimport) COLORREF __stdcall GetDCBrushColor(   HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetDCPenColor(   HDC hdc);


__declspec(dllimport)
int
__stdcall
GetBkMode(
      HDC hdc
    );

__declspec(dllimport)
LONG
__stdcall
GetBitmapBits(
      HBITMAP hbit,
      LONG cb,
      LPVOID lpvBits
    );

__declspec(dllimport) BOOL  __stdcall GetBitmapDimensionEx(   HBITMAP hbit,   LPSIZE lpsize);
__declspec(dllimport) UINT  __stdcall GetBoundsRect(   HDC hdc,   LPRECT lprect,   UINT flags);

__declspec(dllimport) BOOL  __stdcall GetBrushOrgEx(   HDC hdc,   LPPOINT lppt);

__declspec(dllimport) BOOL  __stdcall GetCharWidthA(   HDC hdc,   UINT iFirst,   UINT iLast,   LPINT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidthW(   HDC hdc,   UINT iFirst,   UINT iLast,   LPINT lpBuffer);





__declspec(dllimport) BOOL  __stdcall GetCharWidth32A(   HDC hdc,   UINT iFirst,   UINT iLast,    LPINT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidth32W(   HDC hdc,   UINT iFirst,   UINT iLast,    LPINT lpBuffer);





__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatA(   HDC hdc,   UINT iFirst,   UINT iLast,   PFLOAT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatW(   HDC hdc,   UINT iFirst,   UINT iLast,   PFLOAT lpBuffer);






__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsA(   HDC hdc,
                                              UINT wFirst,
                                              UINT wLast,
                                              LPABC lpABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsW(   HDC hdc,
                                              UINT wFirst,
                                              UINT wLast,
                                              LPABC lpABC);






__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatA(   HDC hdc,   UINT iFirst,   UINT iLast,   LPABCFLOAT lpABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatW(   HDC hdc,   UINT iFirst,   UINT iLast,   LPABCFLOAT lpABC);





__declspec(dllimport) int   __stdcall GetClipBox(   HDC hdc,    LPRECT lprect);
__declspec(dllimport) int   __stdcall GetClipRgn(   HDC hdc,   HRGN hrgn);
__declspec(dllimport) int   __stdcall GetMetaRgn(   HDC hdc,   HRGN hrgn);
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject(   HDC hdc,   UINT type);
__declspec(dllimport) BOOL  __stdcall GetCurrentPositionEx(   HDC hdc,    LPPOINT lppt);
__declspec(dllimport) int   __stdcall GetDeviceCaps(   HDC hdc,   int index);
__declspec(dllimport) int   __stdcall GetDIBits(   HDC hdc,   HBITMAP hbm,   UINT start,   UINT cLines,
      LPVOID lpvBits,  LPBITMAPINFO lpbmi,   UINT usage);  

 
__declspec(dllimport) DWORD __stdcall GetFontData (      HDC     hdc,
                                          DWORD   dwTable,
                                          DWORD   dwOffset,
                                          PVOID pvBuffer,
                                          DWORD   cjBuffer
                                        );

__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA(      HDC hdc,
                                              UINT uChar,
                                              UINT fuFormat,
                                              LPGLYPHMETRICS lpgm,
                                              DWORD cjBuffer,
                                              LPVOID pvBuffer,
                                              const MAT2 *lpmat2
                                        );
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW(      HDC hdc,
                                              UINT uChar,
                                              UINT fuFormat,
                                              LPGLYPHMETRICS lpgm,
                                              DWORD cjBuffer,
                                              LPVOID pvBuffer,
                                              const MAT2 *lpmat2
                                        );






__declspec(dllimport) int   __stdcall GetGraphicsMode(   HDC hdc);
__declspec(dllimport) int   __stdcall GetMapMode(   HDC hdc);
__declspec(dllimport) UINT  __stdcall GetMetaFileBitsEx(  HMETAFILE hMF,   UINT cbBuffer,   LPVOID lpData);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileA(   LPCSTR lpName);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileW(   LPCWSTR lpName);





__declspec(dllimport) COLORREF __stdcall GetNearestColor(   HDC hdc,   COLORREF color);
__declspec(dllimport) UINT  __stdcall GetNearestPaletteIndex(   HPALETTE h,   COLORREF color);
__declspec(dllimport) DWORD __stdcall GetObjectType(   HGDIOBJ h);



__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA(   HDC hdc,
                                                  UINT cjCopy,
                                                  LPOUTLINETEXTMETRICA potm);
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW(   HDC hdc,
                                                  UINT cjCopy,
                                                  LPOUTLINETEXTMETRICW potm);








 
__declspec(dllimport) UINT  __stdcall GetPaletteEntries(     HPALETTE hpal,
                                              UINT iStart,
                                              UINT cEntries,
                                              LPPALETTEENTRY pPalEntries);
__declspec(dllimport) COLORREF __stdcall GetPixel(   HDC hdc,   int x,   int y);
__declspec(dllimport) int   __stdcall GetPixelFormat(   HDC hdc);
__declspec(dllimport) int   __stdcall GetPolyFillMode(   HDC hdc);
__declspec(dllimport) BOOL  __stdcall GetRasterizerCaps(     LPRASTERIZER_STATUS lpraststat,
                                              UINT cjBytes);

__declspec(dllimport) int   __stdcall GetRandomRgn (  HDC hdc,   HRGN hrgn,   INT i);
__declspec(dllimport) DWORD __stdcall GetRegionData(     HRGN hrgn,
                                          DWORD nCount,
                                          LPRGNDATA lpRgnData);
__declspec(dllimport) int   __stdcall GetRgnBox(   HRGN hrgn,    LPRECT lprc);
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject(   int i);
__declspec(dllimport) int   __stdcall GetStretchBltMode(  HDC hdc);
__declspec(dllimport)
UINT
__stdcall
GetSystemPaletteEntries(
      HDC  hdc,
      UINT iStart,
      UINT cEntries,
      LPPALETTEENTRY pPalEntries
    );

__declspec(dllimport) UINT  __stdcall GetSystemPaletteUse(  HDC hdc);
__declspec(dllimport) int   __stdcall GetTextCharacterExtra(  HDC hdc);
__declspec(dllimport) UINT  __stdcall GetTextAlign(  HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetTextColor(  HDC hdc);

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointA(
      HDC hdc,
      LPCSTR lpString,
      int c,
      LPSIZE lpsz
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointW(
      HDC hdc,
      LPCWSTR lpString,
      int c,
      LPSIZE lpsz
    );






__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32A(
      HDC hdc,
      LPCSTR lpString,
      int c,
      LPSIZE psizl
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32W(
      HDC hdc,
      LPCWSTR lpString,
      int c,
      LPSIZE psizl
    );






__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointA(
      HDC hdc,
      LPCSTR lpszString,
      int cchString,
      int nMaxExtent,
      LPINT lpnFit,
      LPINT lpnDx,
      LPSIZE lpSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointW(
      HDC hdc,
      LPCWSTR lpszString,
      int cchString,
      int nMaxExtent,
      LPINT lpnFit,
      LPINT lpnDx,
      LPSIZE lpSize
    );







__declspec(dllimport) int __stdcall GetTextCharset(   HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharsetInfo(   HDC hdc,   LPFONTSIGNATURE lpSig,   DWORD dwFlags);
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo(   DWORD  *lpSrc,    LPCHARSETINFO lpCs,   DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo(   HDC hdc);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA(    HDC hdc,   LPCSTR lpString,   int nCount,   int nMexExtent,   LPGCP_RESULTSA lpResults,   DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW(    HDC hdc,   LPCWSTR lpString,   int nCount,   int nMexExtent,   LPGCP_RESULTSW lpResults,   DWORD dwFlags);








#pragma endregion



#pragma region Desktop Family


typedef struct tagWCRANGE
{
    WCHAR  wcLow;
    USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;


typedef struct tagGLYPHSET
{
    DWORD    cbThis;
    DWORD    flAccel;
    DWORD    cGlyphsSupported;
    DWORD    cRanges;
    WCRANGE  ranges[1];
} GLYPHSET, *PGLYPHSET,  *LPGLYPHSET;









__declspec(dllimport) DWORD __stdcall GetFontUnicodeRanges(   HDC hdc,   LPGLYPHSET lpgs);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesA(   HDC hdc,   LPCSTR lpstr,   int c,   LPWORD pgi,   DWORD fl);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesW(   HDC hdc,   LPCWSTR lpstr,   int c,   LPWORD pgi,   DWORD fl);





__declspec(dllimport) BOOL  __stdcall GetTextExtentPointI(  HDC hdc,   LPWORD pgiIn,   int cgi,   LPSIZE psize);
__declspec(dllimport) BOOL  __stdcall GetTextExtentExPointI (    HDC hdc,
                                                  LPWORD lpwszString,
                                                  int cwchString,
                                                  int nMaxExtent,
                                                  LPINT lpnFit,
                                                  LPINT lpnDx,
                                                  LPSIZE lpSize
                                                );

__declspec(dllimport) BOOL  __stdcall GetCharWidthI(     HDC hdc,
                                          UINT giFirst,
                                          UINT cgi,
                                          LPWORD pgi,
                                          LPINT piWidths
                                        );

__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsI(     HDC    hdc,
                                              UINT   giFirst,
                                              UINT   cgi,
                                              LPWORD pgi,
                                              LPABC  pabc
                                        );








typedef struct tagDESIGNVECTOR
{
    DWORD  dvReserved;
    DWORD  dvNumAxes;
    LONG   dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR,  *LPDESIGNVECTOR;

__declspec(dllimport) int  __stdcall AddFontResourceExA(   LPCSTR name,   DWORD fl,   PVOID res);
__declspec(dllimport) int  __stdcall AddFontResourceExW(   LPCWSTR name,   DWORD fl,   PVOID res);





__declspec(dllimport) BOOL __stdcall RemoveFontResourceExA(   LPCSTR name,   DWORD fl,   PVOID pdv);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceExW(   LPCWSTR name,   DWORD fl,   PVOID pdv);





__declspec(dllimport) HANDLE __stdcall AddFontMemResourceEx(     PVOID pFileView,
                                                  DWORD cjSize,
                                                  PVOID pvResrved,
                                                  DWORD* pNumFonts);

__declspec(dllimport) BOOL __stdcall RemoveFontMemResourceEx(   HANDLE h);









typedef struct tagAXISINFOA
{
    LONG   axMinValue;
    LONG   axMaxValue;
    BYTE   axAxisName[16];
} AXISINFOA, *PAXISINFOA,  *LPAXISINFOA;
typedef struct tagAXISINFOW
{
    LONG   axMinValue;
    LONG   axMaxValue;
    WCHAR  axAxisName[16];
} AXISINFOW, *PAXISINFOW,  *LPAXISINFOW;





typedef AXISINFOA AXISINFO;
typedef PAXISINFOA PAXISINFO;
typedef LPAXISINFOA LPAXISINFO;


typedef struct tagAXESLISTA
{
    DWORD     axlReserved;
    DWORD     axlNumAxes;
    AXISINFOA axlAxisInfo[16];
} AXESLISTA, *PAXESLISTA,  *LPAXESLISTA;
typedef struct tagAXESLISTW
{
    DWORD     axlReserved;
    DWORD     axlNumAxes;
    AXISINFOW axlAxisInfo[16];
} AXESLISTW, *PAXESLISTW,  *LPAXESLISTW;





typedef AXESLISTA AXESLIST;
typedef PAXESLISTA PAXESLIST;
typedef LPAXESLISTA LPAXESLIST;






typedef struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR   elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA,  *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR   elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW,  *LPENUMLOGFONTEXDVW;





typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;


__declspec(dllimport) HFONT  __stdcall CreateFontIndirectExA(   const ENUMLOGFONTEXDVA *);
__declspec(dllimport) HFONT  __stdcall CreateFontIndirectExW(   const ENUMLOGFONTEXDVW *);







typedef struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA        etmAxesList;
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA,  *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW        etmAxesList;
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW,  *LPENUMTEXTMETRICW;





typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;




#pragma endregion



#pragma region Desktop Family


__declspec(dllimport) BOOL  __stdcall GetViewportExtEx(   HDC hdc,   LPSIZE lpsize);
__declspec(dllimport) BOOL  __stdcall GetViewportOrgEx(   HDC hdc,   LPPOINT lppoint);
__declspec(dllimport) BOOL  __stdcall GetWindowExtEx(   HDC hdc,   LPSIZE lpsize);
__declspec(dllimport) BOOL  __stdcall GetWindowOrgEx(   HDC hdc,   LPPOINT lppoint);

 __declspec(dllimport) int  __stdcall IntersectClipRect(   HDC hdc,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) BOOL __stdcall InvertRgn(   HDC hdc,   HRGN hrgn);
__declspec(dllimport) BOOL __stdcall LineDDA(   int xStart,   int yStart,   int xEnd,   int yEnd,   LINEDDAPROC lpProc,   LPARAM data);
 __declspec(dllimport) BOOL __stdcall LineTo(   HDC hdc,   int x,   int y);
__declspec(dllimport) BOOL __stdcall MaskBlt(   HDC hdcDest,   int xDest,   int yDest,   int width,   int height,
                HDC hdcSrc,   int xSrc,   int ySrc,   HBITMAP hbmMask,   int xMask,   int yMask,   DWORD rop);
__declspec(dllimport) BOOL __stdcall PlgBlt(   HDC hdcDest,   const POINT * lpPoint,   HDC hdcSrc,   int xSrc,   int ySrc,   int width,
                       int height,   HBITMAP hbmMask,   int xMask,   int yMask);

 __declspec(dllimport) int  __stdcall OffsetClipRgn(  HDC hdc,   int x,   int y);
__declspec(dllimport) int  __stdcall OffsetRgn(  HRGN hrgn,   int x,   int y);
 __declspec(dllimport) BOOL __stdcall PatBlt(  HDC hdc,   int x,   int y,   int w,   int h,   DWORD rop);
 __declspec(dllimport) BOOL __stdcall Pie(  HDC hdc,   int left,   int top,   int right,   int bottom,   int xr1,   int yr1,   int xr2,   int yr2);
__declspec(dllimport) BOOL __stdcall PlayMetaFile(  HDC hdc,   HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall PaintRgn(  HDC hdc,   HRGN hrgn);
 __declspec(dllimport) BOOL __stdcall PolyPolygon(  HDC hdc,    const POINT *apt,    const INT *asz,    int csz);
__declspec(dllimport) BOOL __stdcall PtInRegion(  HRGN hrgn,   int x,   int y);
__declspec(dllimport) BOOL __stdcall PtVisible(  HDC hdc,   int x,   int y);
__declspec(dllimport) BOOL __stdcall RectInRegion(  HRGN hrgn,   const RECT * lprect);
__declspec(dllimport) BOOL __stdcall RectVisible(  HDC hdc,   const RECT * lprect);
 __declspec(dllimport) BOOL __stdcall Rectangle(  HDC hdc,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) BOOL __stdcall RestoreDC(  HDC hdc,   int nSavedDC);
 __declspec(dllimport) HDC  __stdcall ResetDCA(  HDC hdc,   const DEVMODEA * lpdm);
 __declspec(dllimport) HDC  __stdcall ResetDCW(  HDC hdc,   const DEVMODEW * lpdm);





 __declspec(dllimport) UINT __stdcall RealizePalette(  HDC hdc);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA(  LPCSTR lpFileName);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW(  LPCWSTR lpFileName);





 __declspec(dllimport) BOOL  __stdcall RoundRect(  HDC hdc,   int left,   int top,   int right,   int bottom,   int width,   int height);
 __declspec(dllimport) BOOL __stdcall ResizePalette(  HPALETTE hpal,   UINT n);

 __declspec(dllimport) int  __stdcall SaveDC(  HDC hdc);
 __declspec(dllimport) int  __stdcall SelectClipRgn(  HDC hdc,   HRGN hrgn);
__declspec(dllimport) int  __stdcall ExtSelectClipRgn(  HDC hdc,   HRGN hrgn,   int mode);
__declspec(dllimport) int  __stdcall SetMetaRgn(  HDC hdc);
 __declspec(dllimport) HGDIOBJ __stdcall SelectObject(  HDC hdc,   HGDIOBJ h);
 __declspec(dllimport) HPALETTE __stdcall SelectPalette(  HDC hdc,   HPALETTE hPal,   BOOL bForceBkgd);
 __declspec(dllimport) COLORREF __stdcall SetBkColor(  HDC hdc,   COLORREF color);


__declspec(dllimport) COLORREF __stdcall SetDCBrushColor(  HDC hdc,   COLORREF color);
__declspec(dllimport) COLORREF __stdcall SetDCPenColor(  HDC hdc,   COLORREF color);


 __declspec(dllimport) int   __stdcall SetBkMode(  HDC hdc,   int mode);

__declspec(dllimport)
LONG __stdcall
SetBitmapBits(
      HBITMAP hbm,
      DWORD cb,
      const void *pvBits);

__declspec(dllimport) UINT  __stdcall SetBoundsRect(  HDC hdc,   const RECT * lprect,   UINT flags);
__declspec(dllimport) int   __stdcall SetDIBits(  HDC hdc,   HBITMAP hbm,   UINT start,   UINT cLines,   const void *lpBits,   const BITMAPINFO * lpbmi,   UINT ColorUse);
 __declspec(dllimport) int   __stdcall SetDIBitsToDevice(  HDC hdc,   int xDest,   int yDest,   DWORD w,   DWORD h,   int xSrc,
          int ySrc,   UINT StartScan,   UINT cLines,   const void * lpvBits,   const BITMAPINFO * lpbmi,   UINT ColorUse);
 __declspec(dllimport) DWORD __stdcall SetMapperFlags(  HDC hdc,   DWORD flags);
__declspec(dllimport) int   __stdcall SetGraphicsMode(  HDC hdc,   int iMode);
 __declspec(dllimport) int   __stdcall SetMapMode(  HDC hdc,   int iMode);


 __declspec(dllimport) DWORD __stdcall SetLayout(  HDC hdc,   DWORD l);
__declspec(dllimport) DWORD __stdcall GetLayout(  HDC hdc);


__declspec(dllimport) HMETAFILE   __stdcall SetMetaFileBitsEx(  UINT cbBuffer,   const BYTE *lpData);
 __declspec(dllimport) UINT  __stdcall SetPaletteEntries(     HPALETTE hpal,
                                              UINT iStart,
                                              UINT cEntries,
                                              const PALETTEENTRY *pPalEntries);
 __declspec(dllimport) COLORREF __stdcall SetPixel(  HDC hdc,   int x,   int y,   COLORREF color);
__declspec(dllimport) BOOL   __stdcall SetPixelV(  HDC hdc,   int x,   int y,   COLORREF color);
__declspec(dllimport) BOOL  __stdcall SetPixelFormat(  HDC hdc,   int format,   const PIXELFORMATDESCRIPTOR * ppfd);
 __declspec(dllimport) int   __stdcall SetPolyFillMode(  HDC hdc,   int mode);
 __declspec(dllimport) BOOL  __stdcall StretchBlt(  HDC hdcDest,   int xDest,   int yDest,   int wDest,   int hDest,   HDC hdcSrc,   int xSrc,   int ySrc,   int wSrc,   int hSrc,   DWORD rop);
__declspec(dllimport) BOOL   __stdcall SetRectRgn(  HRGN hrgn,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) int   __stdcall StretchDIBits(  HDC hdc,   int xDest,   int yDest,   int DestWidth,   int DestHeight,   int xSrc,   int ySrc,   int SrcWidth,   int SrcHeight,
          const void * lpBits,   const BITMAPINFO * lpbmi,   UINT iUsage,   DWORD rop);
 __declspec(dllimport) int   __stdcall SetROP2(  HDC hdc,   int rop2);
 __declspec(dllimport) int   __stdcall SetStretchBltMode(  HDC hdc,   int mode);
__declspec(dllimport) UINT  __stdcall SetSystemPaletteUse(  HDC hdc,   UINT use);
 __declspec(dllimport) int   __stdcall SetTextCharacterExtra(  HDC hdc,   int extra);
 __declspec(dllimport) COLORREF __stdcall SetTextColor(  HDC hdc,   COLORREF color);
 __declspec(dllimport) UINT  __stdcall SetTextAlign(  HDC hdc,   UINT align);
 __declspec(dllimport) BOOL  __stdcall SetTextJustification(  HDC hdc,   int extra,   int count);
__declspec(dllimport) BOOL  __stdcall UpdateColors(  HDC hdc);


#pragma endregion












































#pragma region Application Family


typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG    x;
    LONG    y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;


#pragma endregion

#pragma region Desktop Family


typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;


#pragma endregion

#pragma region Application Family


typedef struct _BLENDFUNCTION
{
    BYTE   BlendOp;
    BYTE   BlendFlags;
    BYTE   SourceConstantAlpha;
    BYTE   AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;


#pragma endregion

#pragma region Desktop Family















__declspec(dllimport) BOOL __stdcall AlphaBlend(
      HDC hdcDest,
      int xoriginDest,
      int yoriginDest,
      int wDest,
      int hDest,
      HDC hdcSrc,
      int xoriginSrc,
      int yoriginSrc,
      int wSrc,
      int hSrc,
      BLENDFUNCTION ftn);

__declspec(dllimport) BOOL __stdcall TransparentBlt(
      HDC hdcDest,
      int xoriginDest,
      int yoriginDest,
      int wDest,
      int hDest,
      HDC hdcSrc,
      int xoriginSrc,
      int yoriginSrc,
      int wSrc,
      int hSrc,
      UINT crTransparent);











__declspec(dllimport)
BOOL
__stdcall
GradientFill(
      HDC hdc,
      PTRIVERTEX pVertex,
      ULONG nVertex,
      PVOID pMesh,
      ULONG nMesh,
      ULONG ulMode
    );


#pragma endregion



#pragma region Desktop Family





__declspec(dllimport) BOOL  __stdcall GdiAlphaBlend(  HDC hdcDest,   int xoriginDest,   int yoriginDest,   int wDest,   int hDest,   HDC hdcSrc,   int xoriginSrc,   int yoriginSrc,   int wSrc,   int hSrc,   BLENDFUNCTION ftn);

__declspec(dllimport) BOOL  __stdcall GdiTransparentBlt(  HDC hdcDest,  int xoriginDest,   int yoriginDest,   int wDest,   int hDest,   HDC hdcSrc,
                                             int xoriginSrc,   int yoriginSrc,   int wSrc,   int hSrc,   UINT crTransparent);

__declspec(dllimport) BOOL  __stdcall GdiGradientFill(   HDC hdc,
                                          PTRIVERTEX pVertex,
                                          ULONG nVertex,
                                          PVOID pMesh,
                                          ULONG nCount,
                                          ULONG ulMode);







__declspec(dllimport) BOOL  __stdcall PlayMetaFileRecord(    HDC hdc,
                                              LPHANDLETABLE lpHandleTable,
                                              LPMETARECORD lpMR,
                                              UINT noObjs);

typedef int (__stdcall* MFENUMPROC)(   HDC hdc,   HANDLETABLE * lpht,   METARECORD * lpMR,   int nObj,   LPARAM param);
__declspec(dllimport) BOOL  __stdcall EnumMetaFile(   HDC hdc,   HMETAFILE hmf,   MFENUMPROC proc,   LPARAM param);

typedef int (__stdcall* ENHMFENUMPROC)(  HDC hdc,   HANDLETABLE * lpht,   const ENHMETARECORD * lpmr,   int nHandles,   LPARAM data);



__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile(   HDC hdc);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA(   HENHMETAFILE hEnh,   LPCSTR lpFileName);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW(   HENHMETAFILE hEnh,   LPCWSTR lpFileName);





__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileA(   HDC hdc,   LPCSTR lpFilename,   const RECT *lprc,   LPCSTR lpDesc);
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileW(   HDC hdc,   LPCWSTR lpFilename,   const RECT *lprc,   LPCWSTR lpDesc);





__declspec(dllimport) BOOL  __stdcall DeleteEnhMetaFile(   HENHMETAFILE hmf);
__declspec(dllimport) BOOL  __stdcall EnumEnhMetaFile(   HDC hdc,   HENHMETAFILE hmf,   ENHMFENUMPROC proc,
                                          LPVOID param,   const RECT * lpRect);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileA(   LPCSTR lpName);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileW(   LPCWSTR lpName);





__declspec(dllimport) UINT  __stdcall GetEnhMetaFileBits(    HENHMETAFILE hEMF,
                                              UINT nSize,
                                              LPBYTE lpData);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionA(    HENHMETAFILE hemf,
                                                      UINT cchBuffer,
                                                      LPSTR lpDescription);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionW(    HENHMETAFILE hemf,
                                                      UINT cchBuffer,
                                                      LPWSTR lpDescription);





__declspec(dllimport) UINT  __stdcall GetEnhMetaFileHeader(      HENHMETAFILE hemf,
                                                  UINT nSize,
                                                  LPENHMETAHEADER lpEnhMetaHeader);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePaletteEntries(  HENHMETAFILE hemf,
                                                      UINT nNumEntries,
                                                      LPPALETTEENTRY lpPaletteEntries);

__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePixelFormat(     HENHMETAFILE hemf,
                                                      UINT cbBuffer,
                                                      PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) UINT  __stdcall GetWinMetaFileBits(    HENHMETAFILE hemf,
                                              UINT cbData16,
                                              LPBYTE pData16,
                                              INT iMapMode,
                                              HDC hdcRef);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFile(   HDC hdc,   HENHMETAFILE hmf,   const RECT * lprect);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFileRecord(     HDC hdc,
                                                  LPHANDLETABLE pht,
                                                  const ENHMETARECORD *pmr,
                                                  UINT cht);

__declspec(dllimport) HENHMETAFILE  __stdcall SetEnhMetaFileBits(    UINT nSize,
                                                      const BYTE * pb);

__declspec(dllimport) HENHMETAFILE  __stdcall SetWinMetaFileBits(    UINT nSize,
                                                      const BYTE *lpMeta16Data,
                                                      HDC hdcRef,
                                                      const METAFILEPICT *lpMFP);
__declspec(dllimport) BOOL  __stdcall GdiComment(  HDC hdc,   UINT nSize,   const BYTE *lpData);





__declspec(dllimport) BOOL __stdcall GetTextMetricsA(   HDC hdc,   LPTEXTMETRICA lptm);
__declspec(dllimport) BOOL __stdcall GetTextMetricsW(   HDC hdc,   LPTEXTMETRICW lptm);






























typedef struct tagDIBSECTION {
    BITMAP       dsBm;
    BITMAPINFOHEADER    dsBmih;
    DWORD               dsBitfields[3];
    HANDLE              dshSection;
    DWORD               dsOffset;
} DIBSECTION,  *LPDIBSECTION, *PDIBSECTION;


__declspec(dllimport) BOOL __stdcall AngleArc(   HDC hdc,   int x,   int y,   DWORD r,   FLOAT StartAngle,   FLOAT SweepAngle);
__declspec(dllimport) BOOL __stdcall PolyPolyline(  HDC hdc,   const POINT *apt,   const DWORD *asz,   DWORD csz);
__declspec(dllimport) BOOL __stdcall GetWorldTransform(   HDC hdc,   LPXFORM lpxf);
__declspec(dllimport) BOOL __stdcall SetWorldTransform(   HDC hdc,   const XFORM * lpxf);
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform(   HDC hdc,   const XFORM * lpxf,   DWORD mode);
__declspec(dllimport) BOOL __stdcall CombineTransform(   LPXFORM lpxfOut,   const XFORM *lpxf1,   const XFORM *lpxf2);






__declspec(dllimport)   HBITMAP __stdcall CreateDIBSection(
             HDC               hdc,
                 const BITMAPINFO *pbmi,
                 UINT              usage,
    
    
                    void            **ppvBits,
             HANDLE            hSection,
                 DWORD             offset);


 
__declspec(dllimport) UINT __stdcall GetDIBColorTable(   HDC  hdc,
                                          UINT iStart,
                                          UINT cEntries,
                                          RGBQUAD *prgbq);
__declspec(dllimport) UINT __stdcall SetDIBColorTable(   HDC  hdc,
                                          UINT iStart,
                                          UINT cEntries,
                                          const RGBQUAD *prgbq);




































typedef struct  tagCOLORADJUSTMENT {
    WORD   caSize;
    WORD   caFlags;
    WORD   caIlluminantIndex;
    WORD   caRedGamma;
    WORD   caGreenGamma;
    WORD   caBlueGamma;
    WORD   caReferenceBlack;
    WORD   caReferenceWhite;
    SHORT  caContrast;
    SHORT  caBrightness;
    SHORT  caColorfulness;
    SHORT  caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT,  *LPCOLORADJUSTMENT;

__declspec(dllimport) BOOL __stdcall SetColorAdjustment(   HDC hdc,   const COLORADJUSTMENT *lpca);
__declspec(dllimport) BOOL __stdcall GetColorAdjustment(   HDC hdc,   LPCOLORADJUSTMENT lpca);
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette(   HDC hdc);


typedef BOOL (__stdcall* ABORTPROC)(   HDC,   int);




typedef struct _DOCINFOA {
    int     cbSize;
    LPCSTR   lpszDocName;
    LPCSTR   lpszOutput;

    LPCSTR   lpszDatatype;
    DWORD    fwType;

} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int     cbSize;
    LPCWSTR  lpszDocName;
    LPCWSTR  lpszOutput;

    LPCWSTR  lpszDatatype;
    DWORD    fwType;

} DOCINFOW, *LPDOCINFOW;




typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;







 __declspec(dllimport) int __stdcall StartDocA(  HDC hdc,   const DOCINFOA *lpdi);
 __declspec(dllimport) int __stdcall StartDocW(  HDC hdc,   const DOCINFOW *lpdi);





 __declspec(dllimport) int __stdcall EndDoc(  HDC hdc);
 __declspec(dllimport) int __stdcall StartPage(  HDC hdc);
 __declspec(dllimport) int __stdcall EndPage(  HDC hdc);
 __declspec(dllimport) int __stdcall AbortDoc(  HDC hdc);
__declspec(dllimport) int __stdcall SetAbortProc(  HDC hdc,   ABORTPROC proc);

__declspec(dllimport) BOOL __stdcall AbortPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall ArcTo(  HDC hdc,   int left,   int top,   int right,   int bottom,   int xr1,   int yr1,   int xr2,   int yr2);
__declspec(dllimport) BOOL __stdcall BeginPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall CloseFigure(  HDC hdc);
__declspec(dllimport) BOOL __stdcall EndPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall FillPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall FlattenPath(  HDC hdc);
__declspec(dllimport) int  __stdcall GetPath(  HDC hdc,   LPPOINT apt,   LPBYTE aj, int cpt);
__declspec(dllimport) HRGN __stdcall PathToRegion(  HDC hdc);
__declspec(dllimport) BOOL __stdcall PolyDraw(  HDC hdc,   const POINT * apt,   const BYTE * aj,   int cpt);
__declspec(dllimport) BOOL __stdcall SelectClipPath(  HDC hdc,   int mode);
__declspec(dllimport) int  __stdcall SetArcDirection(  HDC hdc,   int dir);
__declspec(dllimport) BOOL __stdcall SetMiterLimit(  HDC hdc,   FLOAT limit,   PFLOAT old);
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall StrokePath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall WidenPath(  HDC hdc);
__declspec(dllimport) HPEN __stdcall ExtCreatePen(   DWORD iPenStyle,
                                      DWORD cWidth,
                                      const LOGBRUSH *plbrush,
                                      DWORD cStyle,
                                      const DWORD *pstyle);
__declspec(dllimport) BOOL __stdcall GetMiterLimit(  HDC hdc,   PFLOAT plimit);
__declspec(dllimport) int  __stdcall GetArcDirection(  HDC hdc);

__declspec(dllimport) int   __stdcall GetObjectA(  HANDLE h,   int c,   LPVOID pv);
__declspec(dllimport) int   __stdcall GetObjectW(  HANDLE h,   int c,   LPVOID pv);




























 __declspec(dllimport) BOOL  __stdcall MoveToEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall TextOutA(   HDC hdc,   int x,   int y,   LPCSTR lpString,   int c);
 __declspec(dllimport) BOOL  __stdcall TextOutW(   HDC hdc,   int x,   int y,   LPCWSTR lpString,   int c);





 __declspec(dllimport) BOOL  __stdcall ExtTextOutA(   HDC hdc,   int x,   int y,   UINT options,   const RECT * lprect,   LPCSTR lpString,   UINT c,   const INT * lpDx);
 __declspec(dllimport) BOOL  __stdcall ExtTextOutW(   HDC hdc,   int x,   int y,   UINT options,   const RECT * lprect,   LPCWSTR lpString,   UINT c,   const INT * lpDx);





__declspec(dllimport) BOOL  __stdcall PolyTextOutA(  HDC hdc,   const POLYTEXTA * ppt,   int nstrings);
__declspec(dllimport) BOOL  __stdcall PolyTextOutW(  HDC hdc,   const POLYTEXTW * ppt,   int nstrings);






__declspec(dllimport) HRGN  __stdcall CreatePolygonRgn(      const POINT *pptl,
                                              int cPoint,
                                              int iMode);
__declspec(dllimport) BOOL  __stdcall DPtoLP(   HDC hdc,   LPPOINT lppt,   int c);
__declspec(dllimport) BOOL  __stdcall LPtoDP(   HDC hdc,   LPPOINT lppt,   int c);
 __declspec(dllimport) BOOL  __stdcall Polygon(  HDC hdc,   const POINT *apt,   int cpt);
 __declspec(dllimport) BOOL  __stdcall Polyline(  HDC hdc,   const POINT *apt,   int cpt);

__declspec(dllimport) BOOL  __stdcall PolyBezier(  HDC hdc,   const POINT * apt,   DWORD cpt);
__declspec(dllimport) BOOL  __stdcall PolyBezierTo(  HDC hdc,   const POINT * apt,   DWORD cpt);
__declspec(dllimport) BOOL  __stdcall PolylineTo(  HDC hdc,   const POINT * apt,   DWORD cpt);

 __declspec(dllimport) BOOL  __stdcall SetViewportExtEx(   HDC hdc,   int x,   int y,   LPSIZE lpsz);
 __declspec(dllimport) BOOL  __stdcall SetViewportOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall SetWindowExtEx(   HDC hdc,   int x,   int y,   LPSIZE lpsz);
 __declspec(dllimport) BOOL  __stdcall SetWindowOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);

 __declspec(dllimport) BOOL  __stdcall OffsetViewportOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall OffsetWindowOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall ScaleViewportExtEx(   HDC hdc,   int xn,   int dx,   int yn,   int yd,   LPSIZE lpsz);
 __declspec(dllimport) BOOL  __stdcall ScaleWindowExtEx(   HDC hdc,   int xn,   int xd,   int yn,   int yd,   LPSIZE lpsz);
__declspec(dllimport) BOOL  __stdcall SetBitmapDimensionEx(   HBITMAP hbm,   int w,   int h,   LPSIZE lpsz);
__declspec(dllimport) BOOL  __stdcall SetBrushOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);

__declspec(dllimport) int   __stdcall GetTextFaceA(   HDC hdc,   int c,    LPSTR lpName);
__declspec(dllimport) int   __stdcall GetTextFaceW(   HDC hdc,   int c,    LPWSTR lpName);








typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int  iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

__declspec(dllimport) DWORD __stdcall GetKerningPairsA(      HDC hdc,
                                              DWORD nPairs,
                                              LPKERNINGPAIR   lpKernPair);
__declspec(dllimport) DWORD __stdcall GetKerningPairsW(      HDC hdc,
                                              DWORD nPairs,
                                              LPKERNINGPAIR   lpKernPair);







__declspec(dllimport) BOOL  __stdcall GetDCOrgEx(   HDC hdc,   LPPOINT lppt);
__declspec(dllimport) BOOL  __stdcall FixBrushOrgEx(   HDC hdc,   int x,   int y,    LPPOINT ptl);
__declspec(dllimport) BOOL  __stdcall UnrealizeObject(   HGDIOBJ h);

__declspec(dllimport) BOOL  __stdcall GdiFlush(void);
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit(   DWORD dw);
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit(void);








typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);






__declspec(dllimport) int         __stdcall SetICMMode(   HDC hdc,   int mode);
__declspec(dllimport) BOOL        __stdcall CheckColorsInGamut(      HDC hdc,
                                                      LPRGBTRIPLE lpRGBTriple,
                                                      LPVOID dlpBuffer,
                                                      DWORD nCount);

__declspec(dllimport) HCOLORSPACE __stdcall GetColorSpace(   HDC hdc);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceA(   HCOLORSPACE hColorSpace,
                                                  LPLOGCOLORSPACEA lpBuffer,
                                                  DWORD nSize);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceW(   HCOLORSPACE hColorSpace,
                                                  LPLOGCOLORSPACEW lpBuffer,
                                                  DWORD nSize);






__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceA(   LPLOGCOLORSPACEA lplcs);
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceW(   LPLOGCOLORSPACEW lplcs);





__declspec(dllimport) HCOLORSPACE __stdcall SetColorSpace(   HDC hdc,   HCOLORSPACE hcs);
__declspec(dllimport) BOOL        __stdcall DeleteColorSpace(   HCOLORSPACE hcs);
__declspec(dllimport) BOOL        __stdcall GetICMProfileA(      HDC hdc,
                                                  LPDWORD pBufSize,
                                                  LPSTR pszFilename);
__declspec(dllimport) BOOL        __stdcall GetICMProfileW(      HDC hdc,
                                                  LPDWORD pBufSize,
                                                  LPWSTR pszFilename);






__declspec(dllimport) BOOL        __stdcall SetICMProfileA(   HDC hdc,   LPSTR lpFileName);
__declspec(dllimport) BOOL        __stdcall SetICMProfileW(   HDC hdc,   LPWSTR lpFileName);





__declspec(dllimport) BOOL        __stdcall GetDeviceGammaRamp(   HDC hdc,   LPVOID lpRamp);
__declspec(dllimport) BOOL        __stdcall SetDeviceGammaRamp(   HDC hdc,    LPVOID lpRamp);
__declspec(dllimport) BOOL        __stdcall ColorMatchToTarget(   HDC hdc,   HDC hdcTarget,   DWORD action);
__declspec(dllimport) int         __stdcall EnumICMProfilesA(   HDC hdc,   ICMENUMPROCA proc,   LPARAM param);
__declspec(dllimport) int         __stdcall EnumICMProfilesW(   HDC hdc,   ICMENUMPROCW proc,   LPARAM param);






__declspec(dllimport) BOOL        __stdcall UpdateICMRegKeyA(   DWORD reserved,   LPSTR lpszCMID,   LPSTR lpszFileName,   UINT command);

__declspec(dllimport) BOOL        __stdcall UpdateICMRegKeyW(   DWORD reserved,   LPWSTR lpszCMID,   LPWSTR lpszFileName,   UINT command);





#pragma deprecated (UpdateICMRegKeyW)
#pragma deprecated (UpdateICMRegKeyA)




__declspec(dllimport) BOOL        __stdcall ColorCorrectPalette(   HDC hdc,   HPALETTE hPal,   DWORD deFirst,   DWORD num);




































































































































































typedef struct tagEMR
{
    DWORD   iType;              
    DWORD   nSize;              
                                
} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL  ptlReference;
    DWORD   nChars;
    DWORD   offString;          
    DWORD   fOptions;
    RECTL   rcl;
    DWORD   offDx;              
                                
} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR     emr;
} EMRABORTPATH,      *PEMRABORTPATH,
  EMRBEGINPATH,      *PEMRBEGINPATH,
  EMRENDPATH,        *PEMRENDPATH,
  EMRCLOSEFIGURE,    *PEMRCLOSEFIGURE,
  EMRFLATTENPATH,    *PEMRFLATTENPATH,
  EMRWIDENPATH,      *PEMRWIDENPATH,
  EMRSETMETARGN,     *PEMRSETMETARGN,
  EMRSAVEDC,         *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR     emr;
    DWORD   iMode;
} EMRSELECTCLIPPATH,    *PEMRSELECTCLIPPATH,
  EMRSETBKMODE,         *PEMRSETBKMODE,
  EMRSETMAPMODE,        *PEMRSETMAPMODE,

  EMRSETLAYOUT,         *PEMRSETLAYOUT,

  EMRSETPOLYFILLMODE,   *PEMRSETPOLYFILLMODE,
  EMRSETROP2,           *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE,        *PEMRSETICMMODE,
  EMRSETTEXTALIGN,      *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR     emr;
    FLOAT   eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR     emr;
    LONG    iRelative;          
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR     emr;
    DWORD   iArcDirection;      
                                
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR     emr;
    DWORD   dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR     emr;
    COLORREF crColor;
} EMRSETBKCOLOR,   *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR     emr;
    DWORD   ihObject;           
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;

typedef struct tagEMRSELECTPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   iStart;
    DWORD   cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR     emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR     emr;
    DWORD   nPalEntries;        
    DWORD   offPalEntries;      
    DWORD   nSizeLast;          
                                
                                
} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR     emr;
    POINTL  ptl;
} EMRLINETO,   *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR     emr;
    POINTL  ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR     emr;
    RECTL   rclBounds;          
} EMRFILLPATH,          *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH,        *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR     emr;
    RECTL   rclClip;
} EMREXCLUDECLIPRECT,   *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR     emr;
    POINTL  ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX,   *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX,    *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR     emr;
    SIZEL   szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX,   *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR     emr;
    LONG    xNum;
    LONG    xDenom;
    LONG    yNum;
    LONG    yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX,   *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
    DWORD   iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR     emr;
    POINTL  ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR     emr;
    POINTL  ptlStart;
    COLORREF crColor;
    DWORD   iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR     emr;
    RECTL   rclBox;             
} EMRELLIPSE,  *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;


typedef struct tagEMRROUNDRECT
{
    EMR     emr;
    RECTL   rclBox;             
    SIZEL   szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR     emr;
    RECTL   rclBox;             
    POINTL  ptlStart;
    POINTL  ptlEnd;
} EMRARC,   *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE,   *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR     emr;
    POINTL  ptlCenter;
    DWORD   nRadius;
    FLOAT   eStartAngle;
    FLOAT   eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;
    POINTL  aptl[1];
} EMRPOLYLINE,     *PEMRPOLYLINE,
  EMRPOLYBEZIER,   *PEMRPOLYBEZIER,
  EMRPOLYGON,      *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO,   *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;
    POINTS  apts[1];
} EMRPOLYLINE16,     *PEMRPOLYLINE16,
  EMRPOLYBEZIER16,   *PEMRPOLYBEZIER16,
  EMRPOLYGON16,      *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16,   *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;               
    POINTL  aptl[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;               
    POINTS  apts[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cptl;               
    DWORD   aPolyCounts[1];     
    POINTL  aptl[1];            
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON,  *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cpts;               
    DWORD   aPolyCounts[1];     
    POINTS  apts[1];            
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16,  *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    BYTE    RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN,  *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    BYTE    RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    SIZEL   szlStroke;
    BYTE    RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR     emr;
    DWORD   cbRgnData;          
    DWORD   iMode;
    BYTE    RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    EMRTEXT emrtext;            
                                
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    LONG    cStrings;
    EMRTEXT aemrtext[1];        
                                
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    POINTL  aptlDest[3];
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   iStartScan;
    DWORD   cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   dwRop;
    LONG    cxDest;
    LONG    cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR     emr;
    DWORD   ihFont;             
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    LOGPALETTE lgpl;            
                                
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct tagEMRCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    LOGPEN  lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
    EXTLOGPEN32 elp;            
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR        emr;
    DWORD      ihBrush;          
    LOGBRUSH32 lb;               
                                 
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   cbData;             
    DWORD   offData;            
                                
} EMRFORMAT, *PEMRFORMAT;



typedef struct tagEMRGLSRECORD
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR     emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;

typedef struct tagEMRCREATECOLORSPACE
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEA  lcs;        
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct tagEMRSETCOLORSPACE
{
    EMR     emr;
    DWORD   ihCS;               
} EMRSETCOLORSPACE,    *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;





typedef struct tagEMREXTESCAPE
{
    EMR     emr;
    INT     iEscape;            
    INT     cbEscData;          
    BYTE    EscData[1];         
} EMREXTESCAPE,  *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;

typedef struct tagEMRNAMEDESCAPE
{
    EMR     emr;
    INT     iEscape;            
    INT     cbDriver;           
    INT     cbEscData;          
    BYTE    EscData[1];         
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;



typedef struct tagEMRSETICMPROFILE
{
    EMR     emr;
    DWORD   dwFlags;            
    DWORD   cbName;             
    DWORD   cbData;             
    BYTE    Data[1];            
} EMRSETICMPROFILE,  *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;



typedef struct tagEMRCREATECOLORSPACEW
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEW  lcs;        
    DWORD           dwFlags;    
    DWORD           cbData;     
    BYTE            Data[1];    
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;



typedef struct tagCOLORMATCHTOTARGET
{
    EMR     emr;
    DWORD   dwAction;           
    DWORD   dwFlags;            
    DWORD   cbName;             
    DWORD   cbData;             
    BYTE    Data[1];            
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;

typedef struct tagCOLORCORRECTPALETTE
{
    EMR     emr;
    DWORD   ihPalette;          
    DWORD   nFirstEntry;        
    DWORD   nPalEntries;        
    DWORD   nReserved;          
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;

typedef struct tagEMRALPHABLEND
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

typedef struct tagEMRGRADIENTFILL
{
    EMR       emr;
    RECTL     rclBounds;          
    DWORD     nVer;
    DWORD     nTri;
    ULONG     ulMode;
    TRIVERTEX Ver[1];
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;

typedef struct tagEMRTRANSPARENTBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;


















__declspec(dllimport) BOOL  __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC);
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int);
__declspec(dllimport) BOOL  __stdcall wglDeleteContext(HGLRC);
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(void);
__declspec(dllimport) HDC   __stdcall wglGetCurrentDC(void);
__declspec(dllimport) PROC  __stdcall wglGetProcAddress(LPCSTR);
__declspec(dllimport) BOOL  __stdcall wglMakeCurrent(HDC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglShareLists(HGLRC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);





__declspec(dllimport) BOOL  __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT   x;
    FLOAT   y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT       gmfBlackBoxX;
    FLOAT       gmfBlackBoxY;
    POINTFLOAT  gmfptGlyphOrigin;
    FLOAT       gmfCellIncX;
    FLOAT       gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT,  *LPGLYPHMETRICSFLOAT;



__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);







typedef struct tagLAYERPLANEDESCRIPTOR { 
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerPlane;
    BYTE  bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR,  *LPLAYERPLANEDESCRIPTOR;

















































__declspec(dllimport) BOOL  __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
__declspec(dllimport) int   __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 const COLORREF *);
__declspec(dllimport) int   __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
__declspec(dllimport) BOOL  __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
__declspec(dllimport) BOOL  __stdcall wglSwapLayerBuffers(HDC, UINT);



typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP,  *LPWGLSWAP;



__declspec(dllimport) DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *);




#pragma endregion



#pragma region Desktop Family




#pragma endregion


}



#pragma warning(pop)
























#pragma once

























extern "C" {














#pragma region Desktop Family


typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;



typedef MENUTEMPLATEA MENUTEMPLATE;

typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;



typedef LPMENUTEMPLATEA LPMENUTEMPLATE;


typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);


#pragma endregion



#pragma region Application Family


typedef INT_PTR (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);


#pragma endregion

#pragma region Desktop Family


typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);




#pragma endregion







































#pragma region Desktop Family







typedef PROPENUMPROCA        PROPENUMPROC;
typedef PROPENUMPROCEXA      PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA   EDITWORDBREAKPROC;




typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA   WINSTAENUMPROCA;
typedef NAMEENUMPROCA   DESKTOPENUMPROCA;
typedef NAMEENUMPROCW   WINSTAENUMPROCW;
typedef NAMEENUMPROCW   DESKTOPENUMPROCW;




















typedef WINSTAENUMPROCA     WINSTAENUMPROC;
typedef DESKTOPENUMPROCA    DESKTOPENUMPROC;




#pragma endregion



























































#pragma warning(push)
#pragma warning(disable:4995)


#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
wvsprintfA(
      LPSTR,
        LPCSTR,
      va_list arglist);
__declspec(dllimport)
int
__stdcall
wvsprintfW(
      LPWSTR,
        LPCWSTR,
      va_list arglist);






__declspec(dllimport)
int
__cdecl
wsprintfA(
      LPSTR,
        LPCSTR,
    ...);
__declspec(dllimport)
int
__cdecl
wsprintfW(
      LPWSTR,
        LPCWSTR,
    ...);







#pragma warning(pop)



#pragma endregion
































































































































































































































































































































































































































































#pragma region Desktop Family





typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;



typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;




typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;





typedef struct tagCBTACTIVATESTRUCT
{
    BOOL    fMouse;
    HWND    hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;


#pragma endregion



#pragma region Desktop Family





typedef struct tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;

} WTSSESSION_NOTIFICATION, *PWTSSESSION_NOTIFICATION;


#pragma endregion











































































































































#pragma region Desktop Family


typedef struct
{
    HWND    hwnd;
    RECT    rc;
} SHELLHOOKINFO, *LPSHELLHOOKINFO;




typedef struct tagEVENTMSG {
    UINT    message;
    UINT    paramL;
    UINT    paramH;
    DWORD    time;
    HWND     hwnd;
} EVENTMSG, *PEVENTMSGMSG,  *NPEVENTMSGMSG,  *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG,  *NPEVENTMSG,  *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPSTRUCT, *PCWPSTRUCT,  *NPCWPSTRUCT,  *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT,  *NPCWPRETSTRUCT,  *LPCWPRETSTRUCT;




#pragma endregion
















#pragma region Desktop Family





typedef struct tagKBDLLHOOKSTRUCT {
    DWORD   vkCode;
    DWORD   scanCode;
    DWORD   flags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT,  *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;




typedef struct tagMSLLHOOKSTRUCT {
    POINT   pt;
    DWORD   mouseData;
    DWORD   flags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT,  *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;


#pragma endregion



#pragma region Desktop Family





typedef struct tagDEBUGHOOKINFO
{
    DWORD   idThread;
    DWORD   idThreadInstaller;
    LPARAM  lParam;
    WPARAM  wParam;
    int     code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO,  *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT   pt;
    HWND    hwnd;
    UINT    wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT,  *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;



typedef struct tagMOUSEHOOKSTRUCTEX : public tagMOUSEHOOKSTRUCT
{
    DWORD   mouseData;
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;













typedef struct tagHARDWAREHOOKSTRUCT {
    HWND    hwnd;
    UINT    message;
    WPARAM  wParam;
    LPARAM  lParam;
} HARDWAREHOOKSTRUCT,  *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;



#pragma endregion






































#pragma region Desktop Family


__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutA(
      LPCSTR pwszKLID,
      UINT Flags);
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutW(
      LPCWSTR pwszKLID,
      UINT Flags);








__declspec(dllimport)
HKL
__stdcall
ActivateKeyboardLayout(
      HKL hkl,
      UINT Flags);










__declspec(dllimport)
int
__stdcall
ToUnicodeEx(
      UINT wVirtKey,
      UINT wScanCode,
      const BYTE *lpKeyState,
      LPWSTR pwszBuff,
      int cchBuff,
      UINT wFlags,
      HKL dwhkl);


__declspec(dllimport)
BOOL
__stdcall
UnloadKeyboardLayout(
      HKL hkl);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameA(
      LPSTR pwszKLID);
__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameW(
      LPWSTR pwszKLID);







__declspec(dllimport)
int
__stdcall
GetKeyboardLayoutList(
      int nBuff,
      HKL  *lpList);

__declspec(dllimport)
HKL
__stdcall
GetKeyboardLayout(
      DWORD idThread);





#pragma endregion



#pragma region Desktop Family


typedef struct tagMOUSEMOVEPOINT {
    int   x;
    int   y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;


#pragma endregion







#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
GetMouseMovePointsEx(
      UINT cbSize,
      LPMOUSEMOVEPOINT lppt,
      LPMOUSEMOVEPOINT lpptBuf,
      int nBufPoints,
      DWORD resolution);


#pragma endregion

























#pragma region Desktop Family


__declspec(dllimport)
HDESK
__stdcall
CreateDesktopA(
      LPCSTR lpszDesktop,
      LPCSTR lpszDevice,
      DEVMODEA* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopW(
      LPCWSTR lpszDesktop,
      LPCWSTR lpszDevice,
      DEVMODEW* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);






__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExA(
      LPCSTR lpszDesktop,
      LPCSTR lpszDevice,
      DEVMODEA* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa,
      ULONG ulHeapSize,
      PVOID pvoid);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExW(
      LPCWSTR lpszDesktop,
      LPCWSTR lpszDevice,
      DEVMODEW* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa,
      ULONG ulHeapSize,
      PVOID pvoid);







#pragma endregion




#pragma region Desktop Family


__declspec(dllimport)
HDESK
__stdcall
OpenDesktopA(
      LPCSTR lpszDesktop,
      DWORD dwFlags,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopW(
      LPCWSTR lpszDesktop,
      DWORD dwFlags,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);






__declspec(dllimport)
HDESK
__stdcall
OpenInputDesktop(
      DWORD dwFlags,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);


__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsA(
      HWINSTA hwinsta,
      DESKTOPENUMPROCA lpEnumFunc,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsW(
      HWINSTA hwinsta,
      DESKTOPENUMPROCW lpEnumFunc,
      LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumDesktopWindows(
      HDESK hDesktop,
      WNDENUMPROC lpfn,
      LPARAM lParam);


__declspec(dllimport)
BOOL
__stdcall
SwitchDesktop(
      HDESK hDesktop);


__declspec(dllimport)
BOOL
__stdcall
SetThreadDesktop(
       HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
CloseDesktop(
      HDESK hDesktop);

__declspec(dllimport)
HDESK
__stdcall
GetThreadDesktop(
      DWORD dwThreadId);


#pragma endregion































#pragma region Desktop Family


__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationA(
      LPCSTR lpwinsta,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationW(
      LPCWSTR lpwinsta,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);






__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationA(
      LPCSTR lpszWinSta,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationW(
      LPCWSTR lpszWinSta,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);






__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsA(
      WINSTAENUMPROCA lpEnumFunc,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsW(
      WINSTAENUMPROCW lpEnumFunc,
      LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
CloseWindowStation(
      HWINSTA hWinSta);

__declspec(dllimport)
BOOL
__stdcall
SetProcessWindowStation(
      HWINSTA hWinSta);

__declspec(dllimport)
HWINSTA
__stdcall
GetProcessWindowStation(
    void);


#pragma endregion





#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetUserObjectSecurity(
      HANDLE hObj,
      PSECURITY_INFORMATION pSIRequested,
      PSECURITY_DESCRIPTOR pSID);

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectSecurity(
      HANDLE hObj,
      PSECURITY_INFORMATION pSIRequested,
      PSECURITY_DESCRIPTOR pSID,
      DWORD nLength,
      LPDWORD lpnLengthNeeded);


#pragma endregion










#pragma region Desktop Family


typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationA(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength,
      LPDWORD lpnLengthNeeded);
__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationW(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength,
      LPDWORD lpnLengthNeeded);






__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationA(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength);
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationW(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength);







#pragma endregion



#pragma region Desktop Family



typedef struct tagWNDCLASSEXA {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA,  *NPWNDCLASSEXA,  *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW,  *NPWNDCLASSEXW,  *LPWNDCLASSEXW;






typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;



typedef struct tagWNDCLASSA {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
} WNDCLASSA, *PWNDCLASSA,  *NPWNDCLASSA,  *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
} WNDCLASSW, *PWNDCLASSW,  *NPWNDCLASSW,  *LPWNDCLASSW;






typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;


__declspec(dllimport)
BOOL
__stdcall
IsHungAppWindow(
      HWND hwnd);



__declspec(dllimport)
void
__stdcall
DisableProcessWindowsGhosting(
    void);



#pragma endregion




#pragma region Application Family





typedef struct tagMSG {
    HWND        hwnd;
    UINT        message;
    WPARAM      wParam;
    LPARAM      lParam;
    DWORD       time;
    POINT       pt;



} MSG, *PMSG,  *NPMSG,  *LPMSG;


#pragma endregion










































































































































#pragma region Desktop Family





typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;


#pragma endregion








































#pragma region Desktop Family





typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
      PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;


typedef struct tagMDINEXTMENU
{
    HMENU   hmenuIn;
    HMENU   hmenuNext;
    HWND    hwndNext;
} MDINEXTMENU, * PMDINEXTMENU,  * LPMDINEXTMENU;



#pragma endregion


















































































































































































































































#pragma region Desktop Family


typedef struct {
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR Data[1];
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING;



#pragma endregion





































































































































































































































































#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageA(
      LPCSTR lpString);
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageW(
      LPCWSTR lpString);







#pragma endregion





















#pragma region Desktop Family





typedef struct tagWINDOWPOS {
    HWND    hwnd;
    HWND    hwndInsertAfter;
    int     x;
    int     y;
    int     cx;
    int     cy;
    UINT    flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT       rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;


#pragma endregion


















































#pragma region Desktop Family


typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND  hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

__declspec(dllimport)
BOOL
__stdcall
TrackMouseEvent(
      LPTRACKMOUSEEVENT lpEventTrack);


#pragma endregion








































































































































































































#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawEdge(
      HDC hdc,
      LPRECT qrc,
      UINT edge,
      UINT grfFlags);


#pragma endregion

















































#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawFrameControl(
      HDC,
      LPRECT,
      UINT,
      UINT);



#pragma endregion















#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawCaption(
      HWND hwnd,
      HDC hdc,
      const RECT * lprect,
      UINT flags);



#pragma endregion




#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawAnimatedRects(
      HWND hwnd,
      int idAni,
      const RECT *lprcFrom,
      const RECT *lprcTo);


#pragma endregion





































































#pragma region Desktop Family


typedef struct tagACCEL {

    BYTE   fVirt;               
    WORD   key;
    WORD   cmd;





} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC         hdc;
    BOOL        fErase;
    RECT        rcPaint;
    BOOL        fRestore;
    BOOL        fIncUpdate;
    BYTE        rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCSTR      lpszName;
    LPCSTR      lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCWSTR     lpszName;
    LPCWSTR     lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;




typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;


typedef struct tagWINDOWPLACEMENT {
    UINT  length;
    UINT  flags;
    UINT  showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT  rcNormalPosition;



} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;








#pragma endregion



#pragma region Application Family


typedef struct tagNMHDR
{
    HWND      hwndFrom;
    UINT_PTR  idFrom;
    UINT      code;         
}   NMHDR;


#pragma endregion

#pragma region Desktop Family


typedef NMHDR  * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD   styleOld;
    DWORD   styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;


#pragma endregion










































#pragma region Desktop Family





typedef struct tagMEASUREITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    UINT       itemWidth;
    UINT       itemHeight;
    ULONG_PTR  itemData;
} MEASUREITEMSTRUCT,  *PMEASUREITEMSTRUCT,  *LPMEASUREITEMSTRUCT;




typedef struct tagDRAWITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    UINT        itemID;
    UINT        itemAction;
    UINT        itemState;
    HWND        hwndItem;
    HDC         hDC;
    RECT        rcItem;
    ULONG_PTR   itemData;
} DRAWITEMSTRUCT,  *PDRAWITEMSTRUCT,  *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    HWND       hwndItem;
    ULONG_PTR  itemData;
} DELETEITEMSTRUCT,  *PDELETEITEMSTRUCT,  *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    HWND        hwndItem;
    UINT        itemID1;
    ULONG_PTR   itemData1;
    UINT        itemID2;
    ULONG_PTR   itemData2;
    DWORD       dwLocaleId;
} COMPAREITEMSTRUCT,  *PCOMPAREITEMSTRUCT,  *LPCOMPAREITEMSTRUCT;


#pragma endregion



#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
GetMessageA(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax);
__declspec(dllimport)
BOOL
__stdcall
GetMessageW(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax);































__declspec(dllimport)
BOOL
__stdcall
TranslateMessage(
      const MSG *lpMsg);

__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageA(
      const MSG *lpMsg);
__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageW(
      const MSG *lpMsg);
























__declspec(dllimport)
BOOL
__stdcall
SetMessageQueue(
      int cMessagesMax);

__declspec(dllimport)
BOOL
__stdcall
PeekMessageA(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax,
      UINT wRemoveMsg);
__declspec(dllimport)
BOOL
__stdcall
PeekMessageW(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax,
      UINT wRemoveMsg);







#pragma endregion

















#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
RegisterHotKey(
      HWND hWnd,
      int id,
      UINT fsModifiers,
      UINT vk);

__declspec(dllimport)
BOOL
__stdcall
UnregisterHotKey(
      HWND hWnd,
      int id);


#pragma endregion



















































#pragma region Desktop Family





__declspec(dllimport)
BOOL
__stdcall
ExitWindowsEx(
      UINT uFlags,
      DWORD dwReason);

__declspec(dllimport)
BOOL
__stdcall
SwapMouseButton(
      BOOL fSwap);

__declspec(dllimport)
DWORD
__stdcall
GetMessagePos(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageTime(
    void);

__declspec(dllimport)
LPARAM
__stdcall
GetMessageExtraInfo(
    void);


__declspec(dllimport)
DWORD
__stdcall
GetUnpredictedMessagePos(
    void);



__declspec(dllimport)
BOOL
__stdcall
IsWow64Message(
    void);



__declspec(dllimport)
LPARAM
__stdcall
SetMessageExtraInfo(
      LPARAM lParam);


__declspec(dllimport)
LRESULT
__stdcall
SendMessageA(
      HWND hWnd,
      UINT Msg,
        WPARAM wParam,
        LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageW(
      HWND hWnd,
      UINT Msg,
        WPARAM wParam,
        LPARAM lParam);
































__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      UINT fuFlags,
      UINT uTimeout,
      PDWORD_PTR lpdwResult);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      UINT fuFlags,
      UINT uTimeout,
      PDWORD_PTR lpdwResult);






__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      SENDASYNCPROC lpResultCallBack,
      ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      SENDASYNCPROC lpResultCallBack,
      ULONG_PTR dwData);







typedef struct {
    UINT  cbSize;
    HDESK hdesk;
    HWND  hwnd;
    LUID  luid;
} BSMINFO, *PBSMINFO;

__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExA(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      PBSMINFO pbsmInfo);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExW(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      PBSMINFO pbsmInfo);








#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageA(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageW(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




















#pragma endregion































#pragma region Desktop Family



typedef  PVOID           HDEVNOTIFY;
typedef  HDEVNOTIFY     *PHDEVNOTIFY;







__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationA(
      HANDLE hRecipient,
      LPVOID NotificationFilter,
      DWORD Flags);
__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationW(
      HANDLE hRecipient,
      LPVOID NotificationFilter,
      DWORD Flags);






__declspec(dllimport)
BOOL
__stdcall
UnregisterDeviceNotification(
      HDEVNOTIFY Handle
    );







typedef  PVOID           HPOWERNOTIFY;
typedef  HPOWERNOTIFY   *PHPOWERNOTIFY;



__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterPowerSettingNotification(
     HANDLE hRecipient,
     LPCGUID PowerSettingGuid,
     DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterPowerSettingNotification(
     HPOWERNOTIFY Handle
    );

__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterSuspendResumeNotification (
     HANDLE hRecipient,
     DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterSuspendResumeNotification (
     HPOWERNOTIFY Handle
    );






#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
PostMessageA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostMessageW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageA(
      DWORD idThread,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageW(
      DWORD idThread,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);







#pragma endregion




















#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
AttachThreadInput(
      DWORD idAttach,
      DWORD idAttachTo,
      BOOL fAttach);


__declspec(dllimport)
BOOL
__stdcall
ReplyMessage(
      LRESULT lResult);

__declspec(dllimport)
BOOL
__stdcall
WaitMessage(
    void);





__declspec(dllimport)
DWORD
__stdcall
WaitForInputIdle(
      HANDLE hProcess,
      DWORD dwMilliseconds);

__declspec(dllimport)

LRESULT
__stdcall




DefWindowProcA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefWindowProcW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);






__declspec(dllimport)
void
__stdcall
PostQuitMessage(
      int nExitCode);



__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcA(
      WNDPROC lpPrevWndFunc,
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcW(
      WNDPROC lpPrevWndFunc,
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);


































__declspec(dllimport)
BOOL
__stdcall
InSendMessage(
    void);


#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
InSendMessageEx(
      LPVOID lpReserved);


#pragma endregion












#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
GetDoubleClickTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetDoubleClickTime(
      UINT);

__declspec(dllimport)
ATOM
__stdcall
RegisterClassA(
      const WNDCLASSA *lpWndClass);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassW(
      const WNDCLASSW *lpWndClass);






__declspec(dllimport)
BOOL
__stdcall
UnregisterClassA(
      LPCSTR lpClassName,
      HINSTANCE hInstance);
__declspec(dllimport)
BOOL
__stdcall
UnregisterClassW(
      LPCWSTR lpClassName,
      HINSTANCE hInstance);






 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoA(
      HINSTANCE hInstance,
      LPCSTR lpClassName,
      LPWNDCLASSA lpWndClass);
 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoW(
      HINSTANCE hInstance,
      LPCWSTR lpClassName,
      LPWNDCLASSW lpWndClass);







__declspec(dllimport)
ATOM
__stdcall
RegisterClassExA(
      const WNDCLASSEXA *);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassExW(
      const WNDCLASSEXW *);






 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExA(
      HINSTANCE hInstance,
      LPCSTR lpszClass,
      LPWNDCLASSEXA lpwcx);
 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExW(
      HINSTANCE hInstance,
      LPCWSTR lpszClass,
      LPWNDCLASSEXW lpwcx);









#pragma endregion








#pragma region Desktop Family



typedef BOOLEAN (__stdcall * PREGISTERCLASSNAMEW)(LPCWSTR);


__declspec(dllimport)
HWND
__stdcall
CreateWindowExA(
      DWORD dwExStyle,
      LPCSTR lpClassName,
      LPCSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HMENU hMenu,
      HINSTANCE hInstance,
      LPVOID lpParam);
__declspec(dllimport)
HWND
__stdcall
CreateWindowExW(
      DWORD dwExStyle,
      LPCWSTR lpClassName,
      LPCWSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HMENU hMenu,
      HINSTANCE hInstance,
      LPVOID lpParam);







#pragma endregion















#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
IsWindow(
      HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
IsMenu(
      HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
IsChild(
      HWND hWndParent,
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
DestroyWindow(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowWindow(
      HWND hWnd,
      int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
AnimateWindow(
      HWND hWnd,
      DWORD dwTime,
      DWORD dwFlags);



#pragma endregion




#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindow(
      HWND hWnd,
      HDC hdcDst,
      POINT* pptDst,
      SIZE* psize,
      HDC hdcSrc,
      POINT* pptSrc,
      COLORREF crKey,
      BLENDFUNCTION* pblend,
      DWORD dwFlags);




typedef struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    const POINT* pptDst;
    const SIZE* psize;
    HDC hdcSrc;
    const POINT* pptSrc;
    COLORREF crKey;
    const BLENDFUNCTION* pblend;
    DWORD dwFlags;
    const RECT* prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;





__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindowIndirect(
      HWND hWnd,
      const UPDATELAYEREDWINDOWINFO* pULWInfo);


#pragma endregion





#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetLayeredWindowAttributes(
      HWND hwnd,
      COLORREF* pcrKey,
      BYTE* pbAlpha,
      DWORD* pdwFlags);








__declspec(dllimport)
BOOL
__stdcall
PrintWindow(
      HWND hwnd,
      HDC hdcBlt,
      UINT nFlags);


#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetLayeredWindowAttributes(
      HWND hwnd,
      COLORREF crKey,
      BYTE bAlpha,
      DWORD dwFlags);


#pragma endregion














#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
ShowWindowAsync(
       HWND hWnd,
       int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
FlashWindow(
       HWND hWnd,
       BOOL bInvert);


typedef struct {
    UINT  cbSize;
    HWND  hwnd;
    DWORD dwFlags;
    UINT  uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;

__declspec(dllimport)
BOOL
__stdcall
FlashWindowEx(
      PFLASHWINFO pfwi);










__declspec(dllimport)
BOOL
__stdcall
ShowOwnedPopups(
       HWND hWnd,
       BOOL fShow);

__declspec(dllimport)
BOOL
__stdcall
OpenIcon(
       HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
CloseWindow(
       HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
MoveWindow(
      HWND hWnd,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      BOOL bRepaint);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPos(
      HWND hWnd,
      HWND hWndInsertAfter,
      int X,
      int Y,
      int cx,
      int cy,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
GetWindowPlacement(
      HWND hWnd,
      WINDOWPLACEMENT *lpwndpl);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPlacement(
      HWND hWnd,
      const WINDOWPLACEMENT *lpwndpl);






__declspec(dllimport)
BOOL
__stdcall
GetWindowDisplayAffinity(
      HWND hWnd,
      DWORD* pdwAffinity);

__declspec(dllimport)
BOOL
__stdcall
SetWindowDisplayAffinity(
      HWND hWnd,
      DWORD dwAffinity);




#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
HDWP
__stdcall
BeginDeferWindowPos(
      int nNumWindows);

__declspec(dllimport)
HDWP
__stdcall
DeferWindowPos(
      HDWP hWinPosInfo,
      HWND hWnd,
      HWND hWndInsertAfter,
      int x,
      int y,
      int cx,
      int cy,
      UINT uFlags);


__declspec(dllimport)
BOOL
__stdcall
EndDeferWindowPos(
      HDWP hWinPosInfo);


#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
IsWindowVisible(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsIconic(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
AnyPopup(
    void);

__declspec(dllimport)
BOOL
__stdcall
BringWindowToTop(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsZoomed(
      HWND hWnd);


#pragma endregion





























































#pragma warning(disable:4103)

#pragma pack(push,2)









#pragma region Application Family





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;


#pragma endregion

#pragma region Desktop Family


typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;



typedef LPDLGTEMPLATEA LPDLGTEMPLATE;



#pragma endregion

#pragma region Application Family


typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;



typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;



#pragma endregion


#pragma region Desktop Family





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;



typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;

typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;



typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;



#pragma endregion





























#pragma warning(disable:4103)

#pragma pack(pop)









#pragma region Desktop Family


__declspec(dllimport)
HWND
__stdcall
CreateDialogParamA(
      HINSTANCE hInstance,
      LPCSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogParamW(
      HINSTANCE hInstance,
      LPCWSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);






__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamA(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEA lpTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamW(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEW lpTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);


























__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamA(
      HINSTANCE hInstance,
      LPCSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamW(
      HINSTANCE hInstance,
      LPCWSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);






__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamA(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEA hDialogTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamW(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEW hDialogTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);


























__declspec(dllimport)
BOOL
__stdcall
EndDialog(
      HWND hDlg,
      INT_PTR nResult);

__declspec(dllimport)
HWND
__stdcall
GetDlgItem(
      HWND hDlg,
      int nIDDlgItem);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemInt(
      HWND hDlg,
      int nIDDlgItem,
      UINT uValue,
      BOOL bSigned);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemInt(
      HWND hDlg,
      int nIDDlgItem,
      BOOL *lpTranslated,
      BOOL bSigned);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextA(
      HWND hDlg,
      int nIDDlgItem,
      LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextW(
      HWND hDlg,
      int nIDDlgItem,
      LPCWSTR lpString);






 
__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextA(
      HWND hDlg,
      int nIDDlgItem,
      LPSTR lpString,
      int cchMax);
 
__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextW(
      HWND hDlg,
      int nIDDlgItem,
      LPWSTR lpString,
      int cchMax);






__declspec(dllimport)
BOOL
__stdcall
CheckDlgButton(
      HWND hDlg,
      int nIDButton,
      UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
CheckRadioButton(
      HWND hDlg,
      int nIDFirstButton,
      int nIDLastButton,
      int nIDCheckButton);

__declspec(dllimport)
UINT
__stdcall
IsDlgButtonChecked(
      HWND hDlg,
      int nIDButton);

__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageA(
      HWND hDlg,
      int nIDDlgItem,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageW(
      HWND hDlg,
      int nIDDlgItem,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);






__declspec(dllimport)
HWND
__stdcall
GetNextDlgGroupItem(
      HWND hDlg,
      HWND hCtl,
      BOOL bPrevious);

__declspec(dllimport)
HWND
__stdcall
GetNextDlgTabItem(
      HWND hDlg,
      HWND hCtl,
      BOOL bPrevious);

__declspec(dllimport)
int
__stdcall
GetDlgCtrlID(
      HWND hWnd);

__declspec(dllimport)
long
__stdcall
GetDialogBaseUnits(void);

__declspec(dllimport)

LRESULT
__stdcall




DefDlgProcA(
      HWND hDlg,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefDlgProcW(
      HWND hDlg,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);







#pragma endregion












#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterA(
      LPMSG lpMsg,
      int nCode);
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterW(
      LPMSG lpMsg,
      int nCode);














__declspec(dllimport)
BOOL
__stdcall
OpenClipboard(
      HWND hWndNewOwner);

__declspec(dllimport)
BOOL
__stdcall
CloseClipboard(
    void);




__declspec(dllimport)
DWORD
__stdcall
GetClipboardSequenceNumber(
    void);



__declspec(dllimport)
HWND
__stdcall
GetClipboardOwner(
    void);

__declspec(dllimport)
HWND
__stdcall
SetClipboardViewer(
      HWND hWndNewViewer);

__declspec(dllimport)
HWND
__stdcall
GetClipboardViewer(
    void);

__declspec(dllimport)
BOOL
__stdcall
ChangeClipboardChain(
      HWND hWndRemove,
      HWND hWndNewNext);

__declspec(dllimport)
HANDLE
__stdcall
SetClipboardData(
      UINT uFormat,
      HANDLE hMem);

__declspec(dllimport)
HANDLE
__stdcall
GetClipboardData(
      UINT uFormat);

__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatA(
      LPCSTR lpszFormat);
__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatW(
      LPCWSTR lpszFormat);






__declspec(dllimport)
int
__stdcall
CountClipboardFormats(
    void);

__declspec(dllimport)
UINT
__stdcall
EnumClipboardFormats(
      UINT format);

__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameA(
      UINT format,
      LPSTR lpszFormatName,
      int cchMaxCount);
__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameW(
      UINT format,
      LPWSTR lpszFormatName,
      int cchMaxCount);






__declspec(dllimport)
BOOL
__stdcall
EmptyClipboard(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsClipboardFormatAvailable(
      UINT format);

__declspec(dllimport)
int
__stdcall
GetPriorityClipboardFormat(
      UINT *paFormatPriorityList,
      int cFormats);

__declspec(dllimport)
HWND
__stdcall
GetOpenClipboardWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
AddClipboardFormatListener(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
RemoveClipboardFormatListener(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
GetUpdatedClipboardFormats(
      PUINT lpuiFormats,
      UINT cFormats,
      PUINT pcFormatsOut);








__declspec(dllimport)
BOOL
__stdcall
CharToOemA(
      LPCSTR pSrc,
      LPSTR pDst);
__declspec(dllimport)
BOOL
__stdcall
CharToOemW(
      LPCWSTR pSrc,
      LPSTR pDst);






 
__declspec(dllimport)
BOOL
__stdcall
OemToCharA(
      LPCSTR pSrc,
      LPSTR pDst);
 
__declspec(dllimport)
BOOL
__stdcall
OemToCharW(
      LPCSTR pSrc,
      LPWSTR pDst);






__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffA(
      LPCSTR lpszSrc,
      LPSTR lpszDst,
      DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffW(
      LPCWSTR lpszSrc,
      LPSTR lpszDst,
      DWORD cchDstLength);






__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffA(
      LPCSTR lpszSrc,
      LPSTR lpszDst,
      DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffW(
      LPCSTR lpszSrc,
      LPWSTR lpszDst,
      DWORD cchDstLength);






__declspec(dllimport)
LPSTR
__stdcall
CharUpperA(
      LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharUpperW(
      LPWSTR lpsz);






__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffA(
      LPSTR lpsz,
      DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffW(
      LPWSTR lpsz,
      DWORD cchLength);






__declspec(dllimport)
LPSTR
__stdcall
CharLowerA(
      LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharLowerW(
      LPWSTR lpsz);






__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffA(
      LPSTR lpsz,
      DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffW(
      LPWSTR lpsz,
      DWORD cchLength);






__declspec(dllimport)
LPSTR
__stdcall
CharNextA(
      LPCSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharNextW(
      LPCWSTR lpsz);






__declspec(dllimport)
LPSTR
__stdcall
CharPrevA(
      LPCSTR lpszStart,
      LPCSTR lpszCurrent);
__declspec(dllimport)
LPWSTR
__stdcall
CharPrevW(
      LPCWSTR lpszStart,
      LPCWSTR lpszCurrent);







__declspec(dllimport)
LPSTR
__stdcall
CharNextExA(
       WORD CodePage,
       LPCSTR lpCurrentChar,
       DWORD dwFlags);

__declspec(dllimport)
LPSTR
__stdcall
CharPrevExA(
       WORD CodePage,
       LPCSTR lpStart,
       LPCSTR lpCurrentChar,
       DWORD dwFlags);



#pragma endregion















#pragma region Desktop Family







__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaW(
      WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericW(
      WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharUpperA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharUpperW(
      WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharLowerA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharLowerW(
      WCHAR ch);








__declspec(dllimport)
HWND
__stdcall
SetFocus(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetActiveWindow(
    void);

__declspec(dllimport)
HWND
__stdcall
GetFocus(
    void);

__declspec(dllimport)
UINT
__stdcall
GetKBCodePage(
    void);

__declspec(dllimport)
SHORT
__stdcall
GetKeyState(
      int nVirtKey);

__declspec(dllimport)
SHORT
__stdcall
GetAsyncKeyState(
      int vKey);

__declspec(dllimport)
 
BOOL
__stdcall
GetKeyboardState(
      PBYTE lpKeyState);

__declspec(dllimport)
BOOL
__stdcall
SetKeyboardState(
      LPBYTE lpKeyState);

__declspec(dllimport)
int
__stdcall
GetKeyNameTextA(
      LONG lParam,
      LPSTR lpString,
      int cchSize);
__declspec(dllimport)
int
__stdcall
GetKeyNameTextW(
      LONG lParam,
      LPWSTR lpString,
      int cchSize);






__declspec(dllimport)
int
__stdcall
GetKeyboardType(
      int nTypeFlag);

__declspec(dllimport)
int
__stdcall
ToAscii(
      UINT uVirtKey,
      UINT uScanCode,
      const BYTE *lpKeyState,
      LPWORD lpChar,
      UINT uFlags);


__declspec(dllimport)
int
__stdcall
ToAsciiEx(
      UINT uVirtKey,
      UINT uScanCode,
      const BYTE *lpKeyState,
      LPWORD lpChar,
      UINT uFlags,
      HKL dwhkl);


__declspec(dllimport)
int
__stdcall
ToUnicode(
      UINT wVirtKey,
      UINT wScanCode,
      const BYTE *lpKeyState,
      LPWSTR pwszBuff,
      int cchBuff,
      UINT wFlags);

__declspec(dllimport)
DWORD
__stdcall
OemKeyScan(
      WORD wOemChar);

__declspec(dllimport)
SHORT
__stdcall
VkKeyScanA(
      CHAR ch);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanW(
      WCHAR ch);







__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExA(
      CHAR ch,
      HKL dwhkl);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExW(
      WCHAR ch,
      HKL dwhkl);













__declspec(dllimport)
void
__stdcall
keybd_event(
      BYTE bVk,
      BYTE bScan,
      DWORD dwFlags,
      ULONG_PTR dwExtraInfo);


#pragma endregion




















#pragma region Desktop Family


__declspec(dllimport)
void
__stdcall
mouse_event(
      DWORD dwFlags,
      DWORD dx,
      DWORD dy,
      DWORD dwData,
      ULONG_PTR dwExtraInfo);


#pragma endregion



#pragma region Desktop Family


typedef struct tagMOUSEINPUT {
    LONG    dx;
    LONG    dy;
    DWORD   mouseData;
    DWORD   dwFlags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, * LPMOUSEINPUT;

typedef struct tagKEYBDINPUT {
    WORD    wVk;
    WORD    wScan;
    DWORD   dwFlags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, * LPKEYBDINPUT;

typedef struct tagHARDWAREINPUT {
    DWORD   uMsg;
    WORD    wParamL;
    WORD    wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT, * LPHARDWAREINPUT;





typedef struct tagINPUT {
    DWORD   type;

    union
    {
        MOUSEINPUT      mi;
        KEYBDINPUT      ki;
        HARDWAREINPUT   hi;
    };
} INPUT, *PINPUT, * LPINPUT;

__declspec(dllimport)
UINT
__stdcall
SendInput(
      UINT cInputs,                     
      LPINPUT pInputs,  
      int cbSize);                      


#pragma endregion





#pragma region Desktop Family









struct HTOUCHINPUT__{int unused;}; typedef struct HTOUCHINPUT__ *HTOUCHINPUT;

typedef struct tagTOUCHINPUT {
    LONG x;
    LONG y;
    HANDLE hSource;
    DWORD dwID;
    DWORD dwFlags;
    DWORD dwMask;
    DWORD dwTime;
    ULONG_PTR dwExtraInfo;
    DWORD cxContact;
    DWORD cyContact;
} TOUCHINPUT, *PTOUCHINPUT;
typedef TOUCHINPUT const * PCTOUCHINPUT;



#pragma endregion

























#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetTouchInputInfo(
      HTOUCHINPUT hTouchInput,               
      UINT cInputs,                          
      PTOUCHINPUT pInputs,  
      int cbSize);                           

__declspec(dllimport)
BOOL
__stdcall
CloseTouchInputHandle(
      HTOUCHINPUT hTouchInput);                   



#pragma endregion


#pragma region Desktop Family




#pragma endregion







#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
RegisterTouchWindow(
      HWND hwnd,
      ULONG ulFlags);

__declspec(dllimport)
BOOL
__stdcall
UnregisterTouchWindow(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
IsTouchWindow(
      HWND hwnd,
      PULONG pulFlags);


#pragma endregion





#pragma region Desktop Family


enum tagPOINTER_INPUT_TYPE {
    PT_POINTER  = 0x00000001,   
    PT_TOUCH    = 0x00000002,   
    PT_PEN      = 0x00000003,   
    PT_MOUSE    = 0x00000004,   

    PT_TOUCHPAD = 0x00000005,   

};
typedef DWORD POINTER_INPUT_TYPE;

typedef UINT32 POINTER_FLAGS;


#pragma endregion




























#pragma region Desktop Family


typedef enum tagPOINTER_BUTTON_CHANGE_TYPE {
    POINTER_CHANGE_NONE,
    POINTER_CHANGE_FIRSTBUTTON_DOWN,
    POINTER_CHANGE_FIRSTBUTTON_UP,
    POINTER_CHANGE_SECONDBUTTON_DOWN,
    POINTER_CHANGE_SECONDBUTTON_UP,
    POINTER_CHANGE_THIRDBUTTON_DOWN,
    POINTER_CHANGE_THIRDBUTTON_UP,
    POINTER_CHANGE_FOURTHBUTTON_DOWN,
    POINTER_CHANGE_FOURTHBUTTON_UP,
    POINTER_CHANGE_FIFTHBUTTON_DOWN,
    POINTER_CHANGE_FIFTHBUTTON_UP,
} POINTER_BUTTON_CHANGE_TYPE;

typedef struct tagPOINTER_INFO {
    POINTER_INPUT_TYPE    pointerType;
    UINT32          pointerId;
    UINT32          frameId;
    POINTER_FLAGS   pointerFlags;
    HANDLE          sourceDevice;
    HWND            hwndTarget;
    POINT           ptPixelLocation;
    POINT           ptHimetricLocation;
    POINT           ptPixelLocationRaw;
    POINT           ptHimetricLocationRaw;
    DWORD           dwTime;
    UINT32          historyCount;
    INT32           InputData;
    DWORD           dwKeyStates;
    UINT64          PerformanceCount;
    POINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
} POINTER_INFO;


typedef UINT32 TOUCH_FLAGS;


typedef UINT32 TOUCH_MASK;





typedef struct tagPOINTER_TOUCH_INFO {
    POINTER_INFO    pointerInfo;
    TOUCH_FLAGS     touchFlags;
    TOUCH_MASK      touchMask;
    RECT            rcContact;
    RECT            rcContactRaw;
    UINT32          orientation;
    UINT32          pressure;
} POINTER_TOUCH_INFO;

typedef UINT32 PEN_FLAGS;





typedef UINT32 PEN_MASK;






typedef struct tagPOINTER_PEN_INFO {
    POINTER_INFO    pointerInfo;
    PEN_FLAGS       penFlags;
    PEN_MASK        penMask;
    UINT32          pressure;
    UINT32          rotation;
    INT32           tiltX;
    INT32           tiltY;
} POINTER_PEN_INFO;


#pragma endregion














































#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
InitializeTouchInjection(
      UINT32 maxCount,
      DWORD dwMode);

__declspec(dllimport)
BOOL
__stdcall
InjectTouchInput(
      UINT32 count,
      const POINTER_TOUCH_INFO *contacts);

__declspec(dllimport)
BOOL
__stdcall
GetPointerType(
      UINT32 pointerId,
      POINTER_INPUT_TYPE *pointerType);

__declspec(dllimport)
BOOL
__stdcall
GetPointerCursorId(
      UINT32 pointerId,
      UINT32 *cursorId);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfo(
      UINT32 pointerId,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfo(
      UINT32 pointerId,
      UINT32 *pointerCount,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      UINT32 *pointerCount,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfo(
      UINT32 pointerId,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfo(
      UINT32 pointerId,
      UINT32 *pointerCount,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      UINT32 *pointerCount,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfo(
      UINT32 pointerId,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfo(
      UINT32 pointerId,
      UINT32 *pointerCount,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      UINT32 *pointerCount,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
SkipPointerFrameMessages(
      UINT32 pointerId);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerInputTarget(
      HWND hwnd,
      POINTER_INPUT_TYPE pointerType);

__declspec(dllimport)
BOOL
__stdcall
UnregisterPointerInputTarget(
      HWND hwnd,
      POINTER_INPUT_TYPE pointerType);


__declspec(dllimport)
BOOL
__stdcall
EnableMouseInPointer(
      BOOL fEnable);

__declspec(dllimport)
BOOL
__stdcall
IsMouseInPointerEnabled(
    void);






__declspec(dllimport)
BOOL
__stdcall
RegisterTouchHitTestingWindow(
      HWND hwnd,
      ULONG value);

typedef struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
{
    UINT16 score;
    POINT adjustedPoint;
} TOUCH_HIT_TESTING_PROXIMITY_EVALUATION, *PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;





typedef struct tagTOUCH_HIT_TESTING_INPUT
{
    UINT32 pointerId;
    POINT point;
    RECT boundingBox;
    RECT nonOccludedBoundingBox;
    UINT32 orientation;
} TOUCH_HIT_TESTING_INPUT, *PTOUCH_HIT_TESTING_INPUT;





__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToRect(
      const RECT *controlBoundingBox,
      const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
      TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToPolygon(
    UINT32 numVertices,
      const POINT *controlPolygon,
      const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
      TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
LRESULT
__stdcall
PackTouchHitTestingProximityEvaluation(
      const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
      const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

typedef enum tagFEEDBACK_TYPE {
    FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1,
    FEEDBACK_PEN_BARRELVISUALIZATION    = 2,
    FEEDBACK_PEN_TAP                    = 3,
    FEEDBACK_PEN_DOUBLETAP              = 4,
    FEEDBACK_PEN_PRESSANDHOLD           = 5,
    FEEDBACK_PEN_RIGHTTAP               = 6,
    FEEDBACK_TOUCH_TAP                  = 7,
    FEEDBACK_TOUCH_DOUBLETAP            = 8,
    FEEDBACK_TOUCH_PRESSANDHOLD         = 9,
    FEEDBACK_TOUCH_RIGHTTAP             = 10,
    FEEDBACK_GESTURE_PRESSANDTAP        = 11,
    FEEDBACK_MAX                        = 0xFFFFFFFF
} FEEDBACK_TYPE;





__declspec(dllimport)
BOOL
__stdcall
GetWindowFeedbackSetting(
      HWND hwnd,
      FEEDBACK_TYPE feedback,
      DWORD dwFlags,
      UINT32* pSize,
      void* config);

__declspec(dllimport)
BOOL
__stdcall
SetWindowFeedbackSetting(
      HWND hwnd,
      FEEDBACK_TYPE feedback,
      DWORD dwFlags,
      UINT32 size,
      const void* configuration);



#pragma endregion





#pragma region Desktop Family


typedef struct tagINPUT_TRANSFORM {
    union {
        struct {
            float        _11, _12, _13, _14;
            float        _21, _22, _23, _24;
            float        _31, _32, _33, _34;
            float        _41, _42, _43, _44;
        };
        float m[4][4];
    };
} INPUT_TRANSFORM;


__declspec(dllimport)
BOOL
__stdcall
GetPointerInputTransform(
      UINT32 pointerId,
      UINT32 historyCount,
      INPUT_TRANSFORM *inputTransform);


#pragma endregion



#pragma region Desktop Family



#pragma endregion

#pragma region Desktop Family



typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
} LASTINPUTINFO, * PLASTINPUTINFO;

__declspec(dllimport)
BOOL
__stdcall
GetLastInputInfo(
      PLASTINPUTINFO plii);


__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyA(
      UINT uCode,
      UINT uMapType);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyW(
      UINT uCode,
      UINT uMapType);







__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExA(
      UINT uCode,
      UINT uMapType,
      HKL dwhkl);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExW(
      UINT uCode,
      UINT uMapType,
      HKL dwhkl);















__declspec(dllimport)
BOOL
__stdcall
GetInputState(
    void);

__declspec(dllimport)
DWORD
__stdcall
GetQueueStatus(
      UINT flags);


__declspec(dllimport)
HWND
__stdcall
GetCapture(
    void);

__declspec(dllimport)
HWND
__stdcall
SetCapture(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ReleaseCapture(
    void);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjects(
      DWORD nCount,
      const HANDLE *pHandles,
      BOOL fWaitAll,
      DWORD dwMilliseconds,
      DWORD dwWakeMask);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
      DWORD nCount,
      const HANDLE *pHandles,
      DWORD dwMilliseconds,
      DWORD dwWakeMask,
      DWORD dwFlags);



#pragma endregion



































































#pragma region Desktop Family






__declspec(dllimport)
UINT_PTR
__stdcall
SetTimer(
      HWND hWnd,
      UINT_PTR nIDEvent,
      UINT uElapse,
      TIMERPROC lpTimerFunc);









__declspec(dllimport)
UINT_PTR
__stdcall
SetCoalescableTimer(
      HWND hWnd,
      UINT_PTR nIDEvent,
      UINT uElapse,
      TIMERPROC lpTimerFunc,
      ULONG uToleranceDelay);



__declspec(dllimport)
BOOL
__stdcall
KillTimer(
      HWND hWnd,
      UINT_PTR uIDEvent);

__declspec(dllimport)
BOOL
__stdcall
IsWindowUnicode(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
EnableWindow(
      HWND hWnd,
      BOOL bEnable);

__declspec(dllimport)
BOOL
__stdcall
IsWindowEnabled(
      HWND hWnd);

__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsA(
      HINSTANCE hInstance,
      LPCSTR lpTableName);
__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsW(
      HINSTANCE hInstance,
      LPCWSTR lpTableName);






__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableA(
      LPACCEL paccel,
      int cAccel);
__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableW(
      LPACCEL paccel,
      int cAccel);






__declspec(dllimport)
BOOL
__stdcall
DestroyAcceleratorTable(
      HACCEL hAccel);

__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableA(
      HACCEL hAccelSrc,
      LPACCEL lpAccelDst,
      int cAccelEntries);
__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableW(
      HACCEL hAccelSrc,
      LPACCEL lpAccelDst,
      int cAccelEntries);








__declspec(dllimport)
int
__stdcall
TranslateAcceleratorA(
      HWND hWnd,
      HACCEL hAccTable,
      LPMSG lpMsg);
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorW(
      HWND hWnd,
      HACCEL hAccTable,
      LPMSG lpMsg);









#pragma endregion



































































































































































#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
GetSystemMetrics(
      int nIndex);



#pragma endregion



#pragma region Desktop Family




__declspec(dllimport)
HMENU
__stdcall
LoadMenuA(
      HINSTANCE hInstance,
      LPCSTR lpMenuName);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuW(
      HINSTANCE hInstance,
      LPCWSTR lpMenuName);






__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectA(
      const MENUTEMPLATEA *lpMenuTemplate);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectW(
      const MENUTEMPLATEW *lpMenuTemplate);






__declspec(dllimport)
HMENU
__stdcall
GetMenu(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetMenu(
      HWND hWnd,
      HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
ChangeMenuA(
      HMENU hMenu,
      UINT cmd,
      LPCSTR lpszNewItem,
      UINT cmdInsert,
      UINT flags);
__declspec(dllimport)
BOOL
__stdcall
ChangeMenuW(
      HMENU hMenu,
      UINT cmd,
      LPCWSTR lpszNewItem,
      UINT cmdInsert,
      UINT flags);






__declspec(dllimport)
BOOL
__stdcall
HiliteMenuItem(
      HWND hWnd,
      HMENU hMenu,
      UINT uIDHiliteItem,
      UINT uHilite);

__declspec(dllimport)
int
__stdcall
GetMenuStringA(
      HMENU hMenu,
      UINT uIDItem,
      LPSTR lpString,
      int cchMax,
      UINT flags);
__declspec(dllimport)
int
__stdcall
GetMenuStringW(
      HMENU hMenu,
      UINT uIDItem,
      LPWSTR lpString,
      int cchMax,
      UINT flags);






__declspec(dllimport)
UINT
__stdcall
GetMenuState(
      HMENU hMenu,
      UINT uId,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DrawMenuBar(
      HWND hWnd);







__declspec(dllimport)
HMENU
__stdcall
GetSystemMenu(
      HWND hWnd,
      BOOL bRevert);


__declspec(dllimport)
HMENU
__stdcall
CreateMenu(
    void);

__declspec(dllimport)
HMENU
__stdcall
CreatePopupMenu(
    void);

__declspec(dllimport)
BOOL
__stdcall
DestroyMenu(
      HMENU hMenu);

__declspec(dllimport)
DWORD
__stdcall
CheckMenuItem(
      HMENU hMenu,
      UINT uIDCheckItem,
      UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
EnableMenuItem(
      HMENU hMenu,
      UINT uIDEnableItem,
      UINT uEnable);

__declspec(dllimport)
HMENU
__stdcall
GetSubMenu(
      HMENU hMenu,
      int nPos);

__declspec(dllimport)
UINT
__stdcall
GetMenuItemID(
      HMENU hMenu,
      int nPos);

__declspec(dllimport)
int
__stdcall
GetMenuItemCount(
      HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
InsertMenuA(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuW(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall
AppendMenuA(
      HMENU hMenu,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
AppendMenuW(
      HMENU hMenu,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall
ModifyMenuA(
      HMENU hMnu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
ModifyMenuW(
      HMENU hMnu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall RemoveMenu(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DeleteMenu(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemBitmaps(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags,
      HBITMAP hBitmapUnchecked,
      HBITMAP hBitmapChecked);

__declspec(dllimport)
LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenu(
      HMENU hMenu,
      UINT uFlags,
      int x,
      int y,
      int nReserved,
      HWND hWnd,
      const RECT *prcRect);








typedef struct tagTPMPARAMS
{
    UINT    cbSize;     
    RECT    rcExclude;  
}   TPMPARAMS;
typedef TPMPARAMS  *LPTPMPARAMS;

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenuEx(
      HMENU hMenu,
      UINT uFlags,
      int x,
      int y,
      HWND hwnd,
      LPTPMPARAMS lptpm);



__declspec(dllimport)
BOOL
__stdcall
CalculatePopupWindowPosition(
      const POINT *anchorPoint,
      const SIZE *windowSize,
      UINT  flags,
      RECT *excludeRect,
      RECT *popupWindowPosition);



















typedef struct tagMENUINFO
{
    DWORD   cbSize;
    DWORD   fMask;
    DWORD   dwStyle;
    UINT    cyMax;
    HBRUSH  hbrBack;
    DWORD   dwContextHelpID;
    ULONG_PTR dwMenuData;
}   MENUINFO,  *LPMENUINFO;
typedef MENUINFO const  *LPCMENUINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuInfo(
      HMENU,
      LPMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
SetMenuInfo(
      HMENU,
      LPCMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
EndMenu(
        void);







typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;










































typedef struct tagMENUITEMINFOA
{
    UINT     cbSize;
    UINT     fMask;
    UINT     fType;         
    UINT     fState;        
    UINT     wID;           
    HMENU    hSubMenu;      
    HBITMAP  hbmpChecked;   
    HBITMAP  hbmpUnchecked; 
    ULONG_PTR dwItemData;   
    LPSTR    dwTypeData;    
    UINT     cch;           

    HBITMAP  hbmpItem;      

}   MENUITEMINFOA,  *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT     cbSize;
    UINT     fMask;
    UINT     fType;         
    UINT     fState;        
    UINT     wID;           
    HMENU    hSubMenu;      
    HBITMAP  hbmpChecked;   
    HBITMAP  hbmpUnchecked; 
    ULONG_PTR dwItemData;   
    LPWSTR   dwTypeData;    
    UINT     cch;           

    HBITMAP  hbmpItem;      

}   MENUITEMINFOW,  *LPMENUITEMINFOW;




typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;

typedef MENUITEMINFOA const  *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const  *LPCMENUITEMINFOW;



typedef LPCMENUITEMINFOA LPCMENUITEMINFO;



__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemA(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPCMENUITEMINFOA lpmi);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemW(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPCMENUITEMINFOW lpmi);






__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoA(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoW(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPMENUITEMINFOW lpmii);






__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoA(
      HMENU hmenu,
      UINT item,
      BOOL fByPositon,
      LPCMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoW(
      HMENU hmenu,
      UINT item,
      BOOL fByPositon,
      LPCMENUITEMINFOW lpmii);










__declspec(dllimport)
UINT
__stdcall
GetMenuDefaultItem(
      HMENU hMenu,
      UINT fByPos,
      UINT gmdiFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuDefaultItem(
      HMENU hMenu,
      UINT uItem,
      UINT fByPos);

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemRect(
      HWND hWnd,
      HMENU hMenu,
      UINT uItem,
      LPRECT lprcItem);

__declspec(dllimport)
int
__stdcall
MenuItemFromPoint(
      HWND hWnd,
      HMENU hMenu,
      POINT ptScreen);









































#pragma endregion




#pragma region Desktop Family






typedef struct tagDROPSTRUCT
{
    HWND    hwndSource;
    HWND    hwndSink;
    DWORD   wFmt;
    ULONG_PTR dwData;
    POINT   ptDrop;
    DWORD   dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;


#pragma endregion











#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
DragObject(
      HWND hwndParent,
      HWND hwndFrom,
      UINT fmt,
      ULONG_PTR data,
      HCURSOR hcur);

__declspec(dllimport)
BOOL
__stdcall
DragDetect(
      HWND hwnd,
      POINT pt);


#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawIcon(
      HDC hDC,
      int X,
      int Y,
      HICON hIcon);


#pragma endregion





































#pragma region Desktop Family


typedef struct tagDRAWTEXTPARAMS
{
    UINT    cbSize;
    int     iTabLength;
    int     iLeftMargin;
    int     iRightMargin;
    UINT    uiLengthDrawn;
} DRAWTEXTPARAMS,  *LPDRAWTEXTPARAMS;


#pragma endregion




#pragma region Desktop Family










__declspec(dllimport)
 
int
__stdcall
DrawTextA(
      HDC hdc,
    
    
    LPCSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format);
__declspec(dllimport)
 
int
__stdcall
DrawTextW(
      HDC hdc,
    
    
    LPCWSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format);


































__declspec(dllimport)
 
int
__stdcall
DrawTextExA(
      HDC hdc,
    
    
    
    LPSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format,
      LPDRAWTEXTPARAMS lpdtp);
__declspec(dllimport)
 
int
__stdcall
DrawTextExW(
      HDC hdc,
    
    
    
    LPWSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format,
      LPDRAWTEXTPARAMS lpdtp);








#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GrayStringA(
      HDC hDC,
      HBRUSH hBrush,
      GRAYSTRINGPROC lpOutputFunc,
      LPARAM lpData,
      int nCount,
      int X,
      int Y,
      int nWidth,
      int nHeight);
__declspec(dllimport)
BOOL
__stdcall
GrayStringW(
      HDC hDC,
      HBRUSH hBrush,
      GRAYSTRINGPROC lpOutputFunc,
      LPARAM lpData,
      int nCount,
      int X,
      int Y,
      int nWidth,
      int nHeight);







#pragma endregion





















#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawStateA(
      HDC hdc,
      HBRUSH hbrFore,
      DRAWSTATEPROC qfnCallBack,
      LPARAM lData,
      WPARAM wData,
      int x,
      int y,
      int cx,
      int cy,
      UINT uFlags);
__declspec(dllimport)
BOOL
__stdcall
DrawStateW(
      HDC hdc,
      HBRUSH hbrFore,
      DRAWSTATEPROC qfnCallBack,
      LPARAM lData,
      WPARAM wData,
      int x,
      int y,
      int cx,
      int cy,
      UINT uFlags);







#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
LONG
__stdcall
TabbedTextOutA(
      HDC hdc,
      int x,
      int y,
      LPCSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions,
      int nTabOrigin);
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutW(
      HDC hdc,
      int x,
      int y,
      LPCWSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions,
      int nTabOrigin);






__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentA(
      HDC hdc,
      LPCSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions);
__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentW(
      HDC hdc,
      LPCWSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions);






__declspec(dllimport)
BOOL
__stdcall
UpdateWindow(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetActiveWindow(
      HWND hWnd);


__declspec(dllimport)
HWND
__stdcall
GetForegroundWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
PaintDesktop(
      HDC hdc);

__declspec(dllimport)
void
__stdcall
SwitchToThisWindow(
      HWND hwnd,
      BOOL fUnknown);



__declspec(dllimport)
BOOL
__stdcall
SetForegroundWindow(
      HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
AllowSetForegroundWindow(
      DWORD dwProcessId);



__declspec(dllimport)
BOOL
__stdcall
LockSetForegroundWindow(
      UINT uLockCode);






__declspec(dllimport)
HWND
__stdcall
WindowFromDC(
      HDC hDC);

__declspec(dllimport)
HDC
__stdcall
GetDC(
      HWND hWnd);

__declspec(dllimport)
HDC
__stdcall
GetDCEx(
      HWND hWnd,
      HRGN hrgnClip,
      DWORD flags);


#pragma endregion


















#pragma region Desktop Family


__declspec(dllimport)
HDC
__stdcall
GetWindowDC(
      HWND hWnd);

__declspec(dllimport)
int
__stdcall
ReleaseDC(
      HWND hWnd,
      HDC hDC);

__declspec(dllimport)
HDC
__stdcall
BeginPaint(
      HWND hWnd,
      LPPAINTSTRUCT lpPaint);

__declspec(dllimport)
BOOL
__stdcall
EndPaint(
      HWND hWnd,
      const PAINTSTRUCT *lpPaint);

__declspec(dllimport)
BOOL
__stdcall
GetUpdateRect(
      HWND hWnd,
      LPRECT lpRect,
      BOOL bErase);

__declspec(dllimport)
int
__stdcall
GetUpdateRgn(
      HWND hWnd,
      HRGN hRgn,
      BOOL bErase);

__declspec(dllimport)
int
__stdcall
SetWindowRgn(
      HWND hWnd,
      HRGN hRgn,
      BOOL bRedraw);


#pragma endregion


#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
GetWindowRgn(
      HWND hWnd,
      HRGN hRgn);



__declspec(dllimport)
int
__stdcall
GetWindowRgnBox(
      HWND hWnd,
      LPRECT lprc);



__declspec(dllimport)
int
__stdcall
ExcludeUpdateRgn(
      HDC hDC,
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRect(
      HWND hWnd,
      const RECT *lpRect,
      BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRect(
      HWND hWnd,
      const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRgn(
      HWND hWnd,
      HRGN hRgn,
      BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRgn(
      HWND hWnd,
      HRGN hRgn);


__declspec(dllimport)
BOOL
__stdcall
RedrawWindow(
      HWND hWnd,
      const RECT *lprcUpdate,
      HRGN hrgnUpdate,
      UINT flags);


#pragma endregion






















#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
LockWindowUpdate(
      HWND hWndLock);

__declspec(dllimport)
BOOL
__stdcall
ScrollWindow(
      HWND hWnd,
      int XAmount,
      int YAmount,
      const RECT *lpRect,
      const RECT *lpClipRect);

__declspec(dllimport)
BOOL
__stdcall
ScrollDC(
      HDC hDC,
      int dx,
      int dy,
      const RECT *lprcScroll,
      const RECT *lprcClip,
      HRGN hrgnUpdate,
      LPRECT lprcUpdate);

__declspec(dllimport)
int
__stdcall
ScrollWindowEx(
      HWND hWnd,
      int dx,
      int dy,
      const RECT *prcScroll,
      const RECT *prcClip,
      HRGN hrgnUpdate,
      LPRECT prcUpdate,
      UINT flags);


#pragma endregion








#pragma region Desktop Family




__declspec(dllimport)
int
__stdcall
SetScrollPos(
      HWND hWnd,
      int nBar,
      int nPos,
      BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetScrollPos(
      HWND hWnd,
      int nBar);

__declspec(dllimport)
BOOL
__stdcall
SetScrollRange(
      HWND hWnd,
      int nBar,
      int nMinPos,
      int nMaxPos,
      BOOL bRedraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollRange(
      HWND hWnd,
      int nBar,
      LPINT lpMinPos,
      LPINT lpMaxPos);

__declspec(dllimport)
BOOL
__stdcall
ShowScrollBar(
      HWND hWnd,
      int wBar,
      BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
EnableScrollBar(
      HWND hWnd,
      UINT wSBflags,
      UINT wArrows);




















__declspec(dllimport)
BOOL
__stdcall
SetPropA(
      HWND hWnd,
      LPCSTR lpString,
      HANDLE hData);
__declspec(dllimport)
BOOL
__stdcall
SetPropW(
      HWND hWnd,
      LPCWSTR lpString,
      HANDLE hData);






__declspec(dllimport)
HANDLE
__stdcall
GetPropA(
      HWND hWnd,
      LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
GetPropW(
      HWND hWnd,
      LPCWSTR lpString);






__declspec(dllimport)
HANDLE
__stdcall
RemovePropA(
      HWND hWnd,
      LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
RemovePropW(
      HWND hWnd,
      LPCWSTR lpString);






__declspec(dllimport)
int
__stdcall
EnumPropsExA(
      HWND hWnd,
      PROPENUMPROCEXA lpEnumFunc,
      LPARAM lParam);
__declspec(dllimport)
int
__stdcall
EnumPropsExW(
      HWND hWnd,
      PROPENUMPROCEXW lpEnumFunc,
      LPARAM lParam);






__declspec(dllimport)
int
__stdcall
EnumPropsA(
      HWND hWnd,
      PROPENUMPROCA lpEnumFunc);
__declspec(dllimport)
int
__stdcall
EnumPropsW(
      HWND hWnd,
      PROPENUMPROCW lpEnumFunc);






__declspec(dllimport)
BOOL
__stdcall
SetWindowTextA(
      HWND hWnd,
      LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetWindowTextW(
      HWND hWnd,
      LPCWSTR lpString);






 
__declspec(dllimport)
int
__stdcall
GetWindowTextA(
      HWND hWnd,
      LPSTR lpString,
      int nMaxCount);
 
__declspec(dllimport)
int
__stdcall
GetWindowTextW(
      HWND hWnd,
      LPWSTR lpString,
      int nMaxCount);






__declspec(dllimport)
int
__stdcall
GetWindowTextLengthA(
      HWND hWnd);
__declspec(dllimport)
int
__stdcall
GetWindowTextLengthW(
      HWND hWnd);






__declspec(dllimport)
BOOL
__stdcall
GetClientRect(
      HWND hWnd,
      LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetWindowRect(
      HWND hWnd,
      LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRect(
      LPRECT lpRect,
      DWORD dwStyle,
      BOOL bMenu);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectEx(
      LPRECT lpRect,
      DWORD dwStyle,
      BOOL bMenu,
      DWORD dwExStyle);



#pragma endregion





#pragma region Desktop Family


typedef struct tagHELPINFO      
{
    UINT    cbSize;             
    int     iContextType;       
    int     iCtrlId;            
    HANDLE  hItemHandle;        
    DWORD_PTR dwContextId;      
    POINT   MousePos;           
}  HELPINFO,  *LPHELPINFO;

__declspec(dllimport)
BOOL
__stdcall
SetWindowContextHelpId(
      HWND,
      DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetWindowContextHelpId(
      HWND);

__declspec(dllimport)
BOOL
__stdcall
SetMenuContextHelpId(
      HMENU,
      DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetMenuContextHelpId(
      HMENU);


#pragma endregion










































































#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
MessageBoxA(
      HWND hWnd,
      LPCSTR lpText,
      LPCSTR lpCaption,
      UINT uType);
__declspec(dllimport)
int
__stdcall
MessageBoxW(
      HWND hWnd,
      LPCWSTR lpText,
      LPCWSTR lpCaption,
      UINT uType);






























__declspec(dllimport)
int
__stdcall
MessageBoxExA(
      HWND hWnd,
      LPCSTR lpText,
      LPCSTR lpCaption,
      UINT uType,
      WORD wLanguageId);
__declspec(dllimport)
int
__stdcall
MessageBoxExW(
      HWND hWnd,
      LPCWSTR lpText,
      LPCWSTR lpCaption,
      UINT uType,
      WORD wLanguageId);








typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCSTR      lpszText;
    LPCSTR      lpszCaption;
    DWORD       dwStyle;
    LPCSTR      lpszIcon;
    DWORD_PTR   dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD       dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCWSTR     lpszText;
    LPCWSTR     lpszCaption;
    DWORD       dwStyle;
    LPCWSTR     lpszIcon;
    DWORD_PTR   dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD       dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;





typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;


__declspec(dllimport)
int
__stdcall
MessageBoxIndirectA(
      const MSGBOXPARAMSA * lpmbp);
__declspec(dllimport)
int
__stdcall
MessageBoxIndirectW(
      const MSGBOXPARAMSW * lpmbp);









#pragma endregion


#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
MessageBeep(
      UINT uType);


#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
int
__stdcall
ShowCursor(
      BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
SetCursorPos(
      int X,
      int Y);


__declspec(dllimport)
BOOL
__stdcall
SetPhysicalCursorPos(
      int X,
      int Y);


__declspec(dllimport)
HCURSOR
__stdcall
SetCursor(
      HCURSOR hCursor);

__declspec(dllimport)
BOOL
__stdcall
GetCursorPos(
      LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
GetPhysicalCursorPos(
      LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
ClipCursor(
      const RECT *lpRect);


__declspec(dllimport)
BOOL
__stdcall
GetClipCursor(
      LPRECT lpRect);

__declspec(dllimport)
HCURSOR
__stdcall
GetCursor(
    void);

__declspec(dllimport)
BOOL
__stdcall
CreateCaret(
      HWND hWnd,
      HBITMAP hBitmap,
      int nWidth,
      int nHeight);

__declspec(dllimport)
UINT
__stdcall
GetCaretBlinkTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetCaretBlinkTime(
      UINT uMSeconds);

__declspec(dllimport)
BOOL
__stdcall
DestroyCaret(
    void);

__declspec(dllimport)
BOOL
__stdcall
HideCaret(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowCaret(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetCaretPos(
      int X,
      int Y);

__declspec(dllimport)
BOOL
__stdcall
GetCaretPos(
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClientToScreen(
      HWND hWnd,
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ScreenToClient(
      HWND hWnd,
      LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPoint(
      HWND hWnd,
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPoint(
      HWND hWnd,
      LPPOINT lpPoint);




__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPointForPerMonitorDPI(
      HWND hWnd,
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPointForPerMonitorDPI(
      HWND hWnd,
      LPPOINT lpPoint);



__declspec(dllimport)
int
__stdcall
MapWindowPoints(
      HWND hWndFrom,
      HWND hWndTo,
      LPPOINT lpPoints,
      UINT cPoints);

__declspec(dllimport)
HWND
__stdcall
WindowFromPoint(
      POINT Point);


__declspec(dllimport)
HWND
__stdcall
WindowFromPhysicalPoint(
      POINT Point);


__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPoint(
      HWND hWndParent,
      POINT Point);


#pragma endregion







#pragma region Desktop Family


__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPointEx(
      HWND hwnd,
      POINT pt,
      UINT flags);


#pragma endregion


































































#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
GetSysColor(
      int nIndex);


__declspec(dllimport)
HBRUSH
__stdcall
GetSysColorBrush(
      int nIndex);




__declspec(dllimport)
BOOL
__stdcall
SetSysColors(
      int cElements,
      const INT * lpaElements,
      const COLORREF * lpaRgbValues);


#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawFocusRect(
      HDC hDC,
      const RECT * lprc);

__declspec(dllimport)
int
__stdcall
FillRect(
      HDC hDC,
      const RECT *lprc,
      HBRUSH hbr);

__declspec(dllimport)
int
__stdcall
FrameRect(
      HDC hDC,
      const RECT *lprc,
      HBRUSH hbr);

__declspec(dllimport)
BOOL
__stdcall
InvertRect(
      HDC hDC,
      const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
SetRect(
      LPRECT lprc,
      int xLeft,
      int yTop,
      int xRight,
      int yBottom);

__declspec(dllimport)
BOOL
__stdcall
SetRectEmpty(
      LPRECT lprc);

__declspec(dllimport)
BOOL
__stdcall
CopyRect(
      LPRECT lprcDst,
      const RECT *lprcSrc);

__declspec(dllimport)
BOOL
__stdcall
InflateRect(
      LPRECT lprc,
      int dx,
      int dy);

__declspec(dllimport)
BOOL
__stdcall
IntersectRect(
      LPRECT lprcDst,
      const RECT *lprcSrc1,
      const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
UnionRect(
      LPRECT lprcDst,
      const RECT *lprcSrc1,
      const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
SubtractRect(
      LPRECT lprcDst,
      const RECT *lprcSrc1,
      const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
OffsetRect(
      LPRECT lprc,
      int dx,
      int dy);

__declspec(dllimport)
BOOL
__stdcall
IsRectEmpty(
      const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
EqualRect(
      const RECT *lprc1,
      const RECT *lprc2);

__declspec(dllimport)
BOOL
__stdcall
PtInRect(
      const RECT *lprc,
      POINT pt);



__declspec(dllimport)
WORD
__stdcall
GetWindowWord(
      HWND hWnd,
      int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetWindowWord(
      HWND hWnd,
      int nIndex,
      WORD wNewWord);

__declspec(dllimport)
LONG
__stdcall
GetWindowLongA(
      HWND hWnd,
      int nIndex);
__declspec(dllimport)
LONG
__stdcall
GetWindowLongW(
      HWND hWnd,
      int nIndex);






__declspec(dllimport)
LONG
__stdcall
SetWindowLongA(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);
__declspec(dllimport)
LONG
__stdcall
SetWindowLongW(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);








__declspec(dllimport)
LONG_PTR
__stdcall
GetWindowLongPtrA(
      HWND hWnd,
      int nIndex);
__declspec(dllimport)
LONG_PTR
__stdcall
GetWindowLongPtrW(
      HWND hWnd,
      int nIndex);






__declspec(dllimport)
LONG_PTR
__stdcall
SetWindowLongPtrA(
      HWND hWnd,
      int nIndex,
      LONG_PTR dwNewLong);
__declspec(dllimport)
LONG_PTR
__stdcall
SetWindowLongPtrW(
      HWND hWnd,
      int nIndex,
      LONG_PTR dwNewLong);


























__declspec(dllimport)
WORD
__stdcall
GetClassWord(
      HWND hWnd,
      int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetClassWord(
      HWND hWnd,
      int nIndex,
      WORD wNewWord);

__declspec(dllimport)
DWORD
__stdcall
GetClassLongA(
      HWND hWnd,
      int nIndex);
__declspec(dllimport)
DWORD
__stdcall
GetClassLongW(
      HWND hWnd,
      int nIndex);






__declspec(dllimport)
DWORD
__stdcall
SetClassLongA(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);
__declspec(dllimport)
DWORD
__stdcall
SetClassLongW(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);








__declspec(dllimport)
ULONG_PTR
__stdcall
GetClassLongPtrA(
      HWND hWnd,
      int nIndex);
__declspec(dllimport)
ULONG_PTR
__stdcall
GetClassLongPtrW(
      HWND hWnd,
      int nIndex);






__declspec(dllimport)
ULONG_PTR
__stdcall
SetClassLongPtrA(
      HWND hWnd,
      int nIndex,
      LONG_PTR dwNewLong);
__declspec(dllimport)
ULONG_PTR
__stdcall
SetClassLongPtrW(
      HWND hWnd,
      int nIndex,
      LONG_PTR dwNewLong);





























__declspec(dllimport)
BOOL
__stdcall
GetProcessDefaultLayout(
      DWORD *pdwDefaultLayout);

__declspec(dllimport)
BOOL
__stdcall
SetProcessDefaultLayout(
      DWORD dwDefaultLayout);


__declspec(dllimport)
HWND
__stdcall
GetDesktopWindow(
    void);


__declspec(dllimport)
HWND
__stdcall
GetParent(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetParent(
      HWND hWndChild,
      HWND hWndNewParent);

__declspec(dllimport)
BOOL
__stdcall
EnumChildWindows(
      HWND hWndParent,
      WNDENUMPROC lpEnumFunc,
      LPARAM lParam);


__declspec(dllimport)
HWND
__stdcall
FindWindowA(
      LPCSTR lpClassName,
      LPCSTR lpWindowName);
__declspec(dllimport)
HWND
__stdcall
FindWindowW(
      LPCWSTR lpClassName,
      LPCWSTR lpWindowName);







__declspec(dllimport)
HWND
__stdcall
FindWindowExA(
      HWND hWndParent,
      HWND hWndChildAfter,
      LPCSTR lpszClass,
      LPCSTR lpszWindow);
__declspec(dllimport)
HWND
__stdcall
FindWindowExW(
      HWND hWndParent,
      HWND hWndChildAfter,
      LPCWSTR lpszClass,
      LPCWSTR lpszWindow);






__declspec(dllimport)
HWND
__stdcall
GetShellWindow(
    void);




__declspec(dllimport)
BOOL
__stdcall
RegisterShellHookWindow(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
DeregisterShellHookWindow(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
EnumWindows(
      WNDENUMPROC lpEnumFunc,
      LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumThreadWindows(
      DWORD dwThreadId,
      WNDENUMPROC lpfn,
      LPARAM lParam);




__declspec(dllimport)
int
__stdcall
GetClassNameA(
      HWND hWnd,
      LPSTR lpClassName,
      int nMaxCount
    );
__declspec(dllimport)
int
__stdcall
GetClassNameW(
      HWND hWnd,
      LPWSTR lpClassName,
      int nMaxCount
    );






























__declspec(dllimport)
HWND
__stdcall
GetTopWindow(
      HWND hWnd);





__declspec(dllimport)
DWORD
__stdcall
GetWindowThreadProcessId(
      HWND hWnd,
      LPDWORD lpdwProcessId);


__declspec(dllimport)
BOOL
__stdcall
IsGUIThread(
      BOOL bConvert);







__declspec(dllimport)
HWND
__stdcall
GetLastActivePopup(
      HWND hWnd);

















__declspec(dllimport)
HWND
__stdcall
GetWindow(
      HWND hWnd,
      UINT uCmd);






__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookA(
      int nFilterType,
      HOOKPROC pfnFilterProc);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookW(
      int nFilterType,
      HOOKPROC pfnFilterProc);




























__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHook(
      int nCode,
      HOOKPROC pfnFilterProc);

__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExA(
      int idHook,
      HOOKPROC lpfn,
      HINSTANCE hmod,
      DWORD dwThreadId);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExW(
      int idHook,
      HOOKPROC lpfn,
      HINSTANCE hmod,
      DWORD dwThreadId);






__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHookEx(
      HHOOK hhk);

__declspec(dllimport)
LRESULT
__stdcall
CallNextHookEx(
      HHOOK hhk,
      int nCode,
      WPARAM wParam,
      LPARAM lParam);














#pragma endregion












































































#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CheckMenuRadioItem(
      HMENU hmenu,
      UINT first,
      UINT last,
      UINT check,
      UINT flags);





typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {        
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;



#pragma endregion

















































#pragma region Desktop Family


__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapA(
      HINSTANCE hInstance,
      LPCSTR lpBitmapName);
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapW(
      HINSTANCE hInstance,
      LPCWSTR lpBitmapName);






__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorA(
      HINSTANCE hInstance,
      LPCSTR lpCursorName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorW(
      HINSTANCE hInstance,
      LPCWSTR lpCursorName);






__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileA(
      LPCSTR lpFileName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileW(
      LPCWSTR lpFileName);






__declspec(dllimport)
HCURSOR
__stdcall
CreateCursor(
      HINSTANCE hInst,
      int xHotSpot,
      int yHotSpot,
      int nWidth,
      int nHeight,
      const void *pvANDPlane,
      const void *pvXORPlane);

__declspec(dllimport)
BOOL
__stdcall
DestroyCursor(
      HCURSOR hCursor);












#pragma endregion

























#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetSystemCursor(
      HCURSOR hcur,
      DWORD id);

typedef struct _ICONINFO {
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;

__declspec(dllimport)
HICON
__stdcall
LoadIconA(
      HINSTANCE hInstance,
      LPCSTR lpIconName);
__declspec(dllimport)
HICON
__stdcall
LoadIconW(
      HINSTANCE hInstance,
      LPCWSTR lpIconName);







__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsA(
      LPCSTR szFileName,
      int nIconIndex,
      int cxIcon,
      int cyIcon,
      HICON *phicon,
      UINT *piconid,
      UINT nIcons,
      UINT flags);
__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsW(
      LPCWSTR szFileName,
      int nIconIndex,
      int cxIcon,
      int cyIcon,
      HICON *phicon,
      UINT *piconid,
      UINT nIcons,
      UINT flags);






__declspec(dllimport)
HICON
__stdcall
CreateIcon(
      HINSTANCE hInstance,
      int nWidth,
      int nHeight,
      BYTE cPlanes,
      BYTE cBitsPixel,
      const BYTE *lpbANDbits,
      const BYTE *lpbXORbits);

__declspec(dllimport)
BOOL
__stdcall
DestroyIcon(
      HICON hIcon);

__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectory(
      PBYTE presbits,
      BOOL fIcon);


__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectoryEx(
      PBYTE presbits,
      BOOL fIcon,
      int cxDesired,
      int cyDesired,
      UINT Flags);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResource(
      PBYTE presbits,
      DWORD dwResSize,
      BOOL fIcon,
      DWORD dwVer);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResourceEx(
      PBYTE presbits,
      DWORD dwResSize,
      BOOL fIcon,
      DWORD dwVer,
      int cxDesired,
      int cyDesired,
      UINT Flags);


typedef struct tagCURSORSHAPE
{
    int     xHotSpot;
    int     yHotSpot;
    int     cx;
    int     cy;
    int     cbWidth;
    BYTE    Planes;
    BYTE    BitsPixel;
} CURSORSHAPE,  *LPCURSORSHAPE;



#pragma endregion





















#pragma region Desktop Family


__declspec(dllimport)
HANDLE
__stdcall
LoadImageA(
      HINSTANCE hInst,
      LPCSTR name,
      UINT type,
      int cx,
      int cy,
      UINT fuLoad);
__declspec(dllimport)
HANDLE
__stdcall
LoadImageW(
      HINSTANCE hInst,
      LPCWSTR name,
      UINT type,
      int cx,
      int cy,
      UINT fuLoad);






__declspec(dllimport)
HANDLE
__stdcall
CopyImage(
      HANDLE h,
      UINT type,
      int cx,
      int cy,
      UINT flags);










__declspec(dllimport) BOOL __stdcall DrawIconEx(
      HDC hdc,
      int xLeft,
      int yTop,
      HICON hIcon,
      int cxWidth,
      int cyWidth,
      UINT istepIfAniCur,
      HBRUSH hbrFlickerFreeDraw,
      UINT diFlags);


#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
HICON
__stdcall
CreateIconIndirect(
      PICONINFO piconinfo);

__declspec(dllimport)
HICON
__stdcall
CopyIcon(
      HICON hIcon);

__declspec(dllimport)
BOOL
__stdcall
GetIconInfo(
      HICON hIcon,
      PICONINFO piconinfo);


typedef struct _ICONINFOEXA {
    DWORD   cbSize;
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD    wResID;
    CHAR    szModName[260];
    CHAR    szResName[260];
} ICONINFOEXA, *PICONINFOEXA;
typedef struct _ICONINFOEXW {
    DWORD   cbSize;
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD    wResID;
    WCHAR   szModName[260];
    WCHAR   szResName[260];
} ICONINFOEXW, *PICONINFOEXW;




typedef ICONINFOEXA ICONINFOEX;
typedef PICONINFOEXA PICONINFOEX;


__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExA(
      HICON hicon,
      PICONINFOEXA piconinfo);
__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExW(
      HICON hicon,
      PICONINFOEXW piconinfo);













#pragma endregion































































































































































































































































































































































































































































































#pragma region Desktop Family








__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageA(
      HWND hDlg,
      LPMSG lpMsg);
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageW(
      HWND hDlg,
      LPMSG lpMsg);








__declspec(dllimport)
BOOL
__stdcall
MapDialogRect(
      HWND hDlg,
      LPRECT lpRect);

__declspec(dllimport)
int
__stdcall
DlgDirListA(
      HWND hDlg,
      LPSTR lpPathSpec,
      int nIDListBox,
      int nIDStaticPath,
      UINT uFileType);
__declspec(dllimport)
int
__stdcall
DlgDirListW(
      HWND hDlg,
      LPWSTR lpPathSpec,
      int nIDListBox,
      int nIDStaticPath,
      UINT uFileType);







#pragma endregion















#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExA(
      HWND hwndDlg,
      LPSTR lpString,
      int chCount,
      int idListBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExW(
      HWND hwndDlg,
      LPWSTR lpString,
      int chCount,
      int idListBox);






__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxA(
      HWND hDlg,
      LPSTR lpPathSpec,
      int nIDComboBox,
      int nIDStaticPath,
      UINT uFiletype);
__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxW(
      HWND hDlg,
      LPWSTR lpPathSpec,
      int nIDComboBox,
      int nIDStaticPath,
      UINT uFiletype);






__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExA(
      HWND hwndDlg,
      LPSTR lpString,
      int cchOut,
      int idComboBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExW(
      HWND hwndDlg,
      LPWSTR lpString,
      int cchOut,
      int idComboBox);







#pragma endregion








































































                                  














































































































































































































































































#pragma region Desktop Family


typedef struct tagSCROLLINFO
{
    UINT    cbSize;
    UINT    fMask;
    int     nMin;
    int     nMax;
    UINT    nPage;
    int     nPos;
    int     nTrackPos;
}   SCROLLINFO,  *LPSCROLLINFO;
typedef SCROLLINFO const  *LPCSCROLLINFO;

__declspec(dllimport)
int
__stdcall
SetScrollInfo(
      HWND hwnd,
      int nBar,
      LPCSCROLLINFO lpsi,
      BOOL redraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollInfo(
      HWND hwnd,
      int nBar,
      LPSCROLLINFO lpsi);



#pragma endregion






















#pragma region Desktop Family


typedef struct tagMDICREATESTRUCTA {
    LPCSTR   szClass;
    LPCSTR   szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR  szClass;
    LPCWSTR  szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;




typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;


typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcA(
      HWND hWnd,
      HWND hWndMDIClient,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcW(
      HWND hWnd,
      HWND hWndMDIClient,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);






__declspec(dllimport)

LRESULT
__stdcall




DefMDIChildProcA(
      HWND hWnd,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefMDIChildProcW(
      HWND hWnd,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);








__declspec(dllimport)
BOOL
__stdcall
TranslateMDISysAccel(
      HWND hWndClient,
      LPMSG lpMsg);



__declspec(dllimport)
UINT
__stdcall
ArrangeIconicWindows(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowA(
      LPCSTR lpClassName,
      LPCSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HINSTANCE hInstance,
      LPARAM lParam);
__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowW(
      LPCWSTR lpClassName,
      LPCWSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HINSTANCE hInstance,
      LPARAM lParam);







__declspec(dllimport)
WORD
__stdcall
TileWindows(
      HWND hwndParent,
      UINT wHow,
      const RECT * lpRect,
      UINT cKids,
      const HWND  * lpKids);

__declspec(dllimport)
WORD
__stdcall CascadeWindows(
      HWND hwndParent,
      UINT wHow,
      const RECT * lpRect,
      UINT cKids,
      const HWND  * lpKids);




#pragma endregion







#pragma region Desktop Family




typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {

    DWORD  mkSize;



    CHAR   mkKeylist;
    CHAR   szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {

    DWORD  mkSize;



    WCHAR  mkKeylist;
    WCHAR  szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;





typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;


typedef struct tagHELPWININFOA {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    CHAR   rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    WCHAR  rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;





typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;










































__declspec(dllimport)
BOOL
__stdcall
WinHelpA(
      HWND hWndMain,
      LPCSTR lpszHelp,
      UINT uCommand,
      ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
WinHelpW(
      HWND hWndMain,
      LPCWSTR lpszHelp,
      UINT uCommand,
      ULONG_PTR dwData);









#pragma endregion















#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetGuiResources(
      HANDLE hProcess,
      DWORD uiFlags);




#pragma endregion


#pragma region Desktop Family




#pragma endregion
















































































































































































#pragma region Desktop Family


typedef struct tagTouchPredictionParameters
{
    UINT cbSize;
    UINT dwLatency;       
    UINT dwSampleTime;    
    UINT bUseHWTimeStamp; 
} TOUCHPREDICTIONPARAMETERS, *PTOUCHPREDICTIONPARAMETERS;











#pragma endregion
























































































































































    
    

















#pragma region Desktop Family


typedef struct tagNONCLIENTMETRICSA
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;

    int     iPaddedBorderWidth;

}   NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;

    int     iPaddedBorderWidth;

}   NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;





typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;



#pragma endregion


















#pragma region Desktop Family


typedef struct tagMINIMIZEDMETRICS
{
    UINT    cbSize;
    int     iWidth;
    int     iHorzGap;
    int     iVertGap;
    int     iArrange;
}   MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



typedef struct tagICONMETRICSA
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTA lfFont;
}   ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTW lfFont;
}   ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;





typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;




typedef struct tagANIMATIONINFO
{
    UINT    cbSize;
    int     iMinAnimate;
}   ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR     lpszActivePort;
    LPSTR     lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR    lpszActivePort;
    LPWSTR    lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSW, *LPSERIALKEYSW;




typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;








typedef struct tagHIGHCONTRASTA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR   lpszDefaultScheme;
}   HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR  lpszDefaultScheme;
}   HIGHCONTRASTW, *LPHIGHCONTRASTW;




typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;



#pragma endregion







































#pragma once






#pragma region Desktop Family


typedef struct _VIDEOPARAMETERS {
    GUID  Guid;                         
    ULONG dwOffset;                     
    ULONG dwCommand;                    
    ULONG dwFlags;                      
    ULONG dwMode;                       
    ULONG dwTVStandard;                 
    ULONG dwAvailableModes;             
    ULONG dwAvailableTVStandard;        
    ULONG dwFlickerFilter;              
    ULONG dwOverScanX;                  
    ULONG dwOverScanY;                  
    ULONG dwMaxUnscaledX;               
    ULONG dwMaxUnscaledY;               
    ULONG dwPositionX;                  
    ULONG dwPositionY;                  
    ULONG dwBrightness;                 
    ULONG dwContrast;                   
    ULONG dwCPType;                     
    ULONG dwCPCommand;                  
    ULONG dwCPStandard;                 
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;           
    UCHAR bOEMCopyProtection[256];      
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;


                                        













































#pragma endregion
















#pragma region Desktop Family





__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsA(
      DEVMODEA* lpDevMode,
      DWORD dwFlags);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsW(
      DEVMODEW* lpDevMode,
      DWORD dwFlags);






__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExA(
      LPCSTR lpszDeviceName,
      DEVMODEA* lpDevMode,
      HWND hwnd,
      DWORD dwflags,
      LPVOID lParam);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExW(
      LPCWSTR lpszDeviceName,
      DEVMODEW* lpDevMode,
      HWND hwnd,
      DWORD dwflags,
      LPVOID lParam);










__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsA(
      LPCSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEA* lpDevMode);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsW(
      LPCWSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEW* lpDevMode);








__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExA(
      LPCSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEA* lpDevMode,
      DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExW(
      LPCWSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEW* lpDevMode,
      DWORD dwFlags);










__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesA(
      LPCSTR lpDevice,
      DWORD iDevNum,
      PDISPLAY_DEVICEA lpDisplayDevice,
      DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesW(
      LPCWSTR lpDevice,
      DWORD iDevNum,
      PDISPLAY_DEVICEW lpDisplayDevice,
      DWORD dwFlags);













__declspec(dllimport)
LONG
__stdcall
GetDisplayConfigBufferSizes(
      UINT32 flags,
      UINT32* numPathArrayElements,
      UINT32* numModeInfoArrayElements);

__declspec(dllimport)
LONG
__stdcall
SetDisplayConfig(
      UINT32 numPathArrayElements,
      DISPLAYCONFIG_PATH_INFO* pathArray,
      UINT32 numModeInfoArrayElements,
      DISPLAYCONFIG_MODE_INFO* modeInfoArray,
      UINT32 flags);

__declspec(dllimport)
  LONG
__stdcall
QueryDisplayConfig(
      UINT32 flags,
      UINT32* numPathArrayElements,
      DISPLAYCONFIG_PATH_INFO* pathArray,
      UINT32* numModeInfoArrayElements,
      DISPLAYCONFIG_MODE_INFO* modeInfoArray,
    
    
        DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigGetDeviceInfo(
      DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigSetDeviceInfo(
      DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);







__declspec(dllimport)
 
BOOL
__stdcall
SystemParametersInfoA(
      UINT uiAction,
      UINT uiParam,
        PVOID pvParam,
      UINT fWinIni);
__declspec(dllimport)
 
BOOL
__stdcall
SystemParametersInfoW(
      UINT uiAction,
      UINT uiParam,
        PVOID pvParam,
      UINT fWinIni);








#pragma endregion



#pragma region Desktop Family





typedef struct tagFILTERKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;            
    DWORD iDelayMSec;           
    DWORD iRepeatMSec;          
    DWORD iBounceMSec;          
} FILTERKEYS, *LPFILTERKEYS;


#pragma endregion












#pragma region Desktop Family


typedef struct tagSTICKYKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;


#pragma endregion
































#pragma region Desktop Family


typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;


#pragma endregion




















#pragma region Desktop Family


typedef struct tagACCESSTIMEOUT
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;


#pragma endregion
























#pragma region Desktop Family


typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR   lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR  lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;




typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;



#pragma endregion








#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SoundSentry(void);


typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;


#pragma endregion











#pragma region Desktop Family



typedef struct tagAUDIODESCRIPTION {
    UINT cbSize;   
    BOOL Enabled;  
    LCID Locale;   
} AUDIODESCRIPTION, *LPAUDIODESCRIPTION;







__declspec(dllimport)
void
__stdcall
SetDebugErrorLevel(
      DWORD dwLevel);


#pragma endregion









#pragma region Desktop Family


__declspec(dllimport)
void
__stdcall
SetLastErrorEx(
      DWORD dwErrCode,
      DWORD dwType);

__declspec(dllimport)
int
__stdcall
InternalGetWindowText(
      HWND hWnd,
      LPWSTR pString,
      int cchMaxCount);












__declspec(dllimport)
BOOL
__stdcall
CancelShutdown(
    void);


#pragma endregion












#pragma region Desktop Family


__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromPoint(
      POINT pt,
      DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromRect(
      LPCRECT lprc,
      DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromWindow(
      HWND hwnd,
      DWORD dwFlags);


#pragma endregion







#pragma region Desktop Family


typedef struct tagMONITORINFO
{
    DWORD   cbSize;
    RECT    rcMonitor;
    RECT    rcWork;
    DWORD   dwFlags;
} MONITORINFO, *LPMONITORINFO;


typedef struct tagMONITORINFOEXA : public tagMONITORINFO
{
    CHAR        szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW : public tagMONITORINFO
{
    WCHAR       szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;




typedef MONITORINFOEXA MONITORINFOEX;
typedef LPMONITORINFOEXA LPMONITORINFOEX;





















__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoA(
      HMONITOR hMonitor,
      LPMONITORINFO lpmi);
__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoW(
      HMONITOR hMonitor,
      LPMONITORINFO lpmi);






typedef BOOL (__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDisplayMonitors(
      HDC hdc,
      LPCRECT lprcClip,
      MONITORENUMPROC lpfnEnum,
      LPARAM dwData);


#pragma endregion



#pragma region Desktop Family






__declspec(dllimport)
void
__stdcall
NotifyWinEvent(
      DWORD event,
      HWND  hwnd,
      LONG  idObject,
      LONG  idChild);

typedef void (__stdcall* WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD         event,
    HWND          hwnd,
    LONG          idObject,
    LONG          idChild,
    DWORD         idEventThread,
    DWORD         dwmsEventTime);

__declspec(dllimport)
HWINEVENTHOOK
__stdcall
SetWinEventHook(
      DWORD eventMin,
      DWORD eventMax,
      HMODULE hmodWinEventProc,
      WINEVENTPROC pfnWinEventProc,
      DWORD idProcess,
      DWORD idThread,
      DWORD dwFlags);


__declspec(dllimport)
BOOL
__stdcall
IsWinEventHookInstalled(
      DWORD event);



#pragma endregion









#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
UnhookWinEvent(
      HWINEVENTHOOK hWinEventHook);


#pragma endregion































































































































































































































































































































































































































































































































































































































#pragma region Desktop Family


typedef struct tagGUITHREADINFO
{
    DWORD   cbSize;
    DWORD   flags;
    HWND    hwndActive;
    HWND    hwndFocus;
    HWND    hwndCapture;
    HWND    hwndMenuOwner;
    HWND    hwndMoveSize;
    HWND    hwndCaret;
    RECT    rcCaret;
} GUITHREADINFO, *PGUITHREADINFO,  * LPGUITHREADINFO;


#pragma endregion














#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetGUIThreadInfo(
      DWORD idThread,
      PGUITHREADINFO pgui);

__declspec(dllimport)
BOOL
__stdcall
BlockInput(
    BOOL fBlockIt);





__declspec(dllimport)
BOOL
__stdcall
SetProcessDPIAware(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsProcessDPIAware(
    void);



__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameA(
      HWND hwnd,
      LPSTR pszFileName,
      UINT cchFileNameMax);
__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameW(
      HWND hwnd,
      LPWSTR pszFileName,
      UINT cchFileNameMax);







#pragma endregion







































#pragma region Desktop Family





typedef struct tagCURSORINFO
{
    DWORD   cbSize;
    DWORD   flags;
    HCURSOR hCursor;
    POINT   ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;






__declspec(dllimport)
BOOL
__stdcall
GetCursorInfo(
      PCURSORINFO pci);




typedef struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;



__declspec(dllimport)
BOOL
__stdcall
GetWindowInfo(
      HWND hwnd,
      PWINDOWINFO pwi);




typedef struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetTitleBarInfo(
      HWND hwnd,
      PTITLEBARINFO pti);


typedef struct tagTITLEBARINFOEX
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
    RECT rgrect[5 + 1];
} TITLEBARINFOEX, *PTITLEBARINFOEX, *LPTITLEBARINFOEX;





typedef struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar;          
    HMENU hMenu;         
    HWND hwndMenu;       
    BOOL fBarFocused:1;  
    BOOL fFocused:1;     
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuBarInfo(
      HWND hwnd,
      LONG idObject,
      LONG idItem,
      PMENUBARINFO pmbi);




typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetScrollBarInfo(
      HWND hwnd,
      LONG idObject,
      PSCROLLBARINFO psbi);




typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

__declspec(dllimport)
BOOL
__stdcall
GetComboBoxInfo(
      HWND hwndCombo,
      PCOMBOBOXINFO pcbi);


#pragma endregion








#pragma region Desktop Family


__declspec(dllimport)
HWND
__stdcall
GetAncestor(
      HWND hwnd,
      UINT gaFlags);








__declspec(dllimport)
HWND
__stdcall
RealChildWindowFromPoint(
      HWND hwndParent,
      POINT ptParentClientCoords);






__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassA(
      HWND hwnd,
      LPSTR ptszClassName,
      UINT cchClassNameMax);




__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassW(
      HWND hwnd,
      LPWSTR ptszClassName,
      UINT cchClassNameMax);









typedef struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoA(
      HWND hwnd,
      int iItem,
      PALTTABINFO pati,
      LPSTR pszItemText,
      UINT cchItemText);
__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoW(
      HWND hwnd,
      int iItem,
      PALTTABINFO pati,
      LPWSTR pszItemText,
      UINT cchItemText);










__declspec(dllimport)
DWORD
__stdcall
GetListBoxInfo(
      HWND hwnd);


#pragma endregion




#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
LockWorkStation(
    void);




__declspec(dllimport)
BOOL
__stdcall
UserHandleGrantAccess(
      HANDLE hUserHandle,
      HANDLE hJob,
      BOOL   bGrant);




#pragma endregion







#pragma region Desktop Family


struct HRAWINPUT__{int unused;}; typedef struct HRAWINPUT__ *HRAWINPUT;


#pragma endregion























#pragma region Desktop Family





typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER;


#pragma endregion








#pragma region Desktop Family





typedef struct tagRAWMOUSE {
    


    USHORT usFlags;

    


    union {
        ULONG ulButtons;
        struct  {
            USHORT  usButtonFlags;
            USHORT  usButtonData;
        };
    };


    


    ULONG ulRawButtons;

    


    LONG lLastX;

    


    LONG lLastY;

    


    ULONG ulExtraInformation;

} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;


#pragma endregion









































#pragma region Desktop Family





typedef struct tagRAWKEYBOARD {
    


    USHORT MakeCode;

    



    USHORT Flags;

    USHORT Reserved;

    


    USHORT VKey;
    UINT   Message;

    


    ULONG ExtraInformation;


} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;


#pragma endregion

















#pragma region Desktop Family





typedef struct tagRAWHID {
    DWORD dwSizeHid;    
    DWORD dwCount;      
    BYTE bRawData[1];
} RAWHID, *PRAWHID, *LPRAWHID;


#pragma endregion





#pragma region Desktop Family


typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
        RAWMOUSE    mouse;
        RAWKEYBOARD keyboard;
        RAWHID      hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;


#pragma endregion
















#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
GetRawInputData(
      HRAWINPUT hRawInput,
      UINT uiCommand,
      LPVOID pData,
      PUINT pcbSize,
      UINT cbSizeHeader);


#pragma endregion








#pragma region Desktop Family


typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL  fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;

typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;

typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;

    


    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;

typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    union {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    };
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoA(
      HANDLE hDevice,
      UINT uiCommand,
      LPVOID pData,
      PUINT pcbSize);
__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoW(
      HANDLE hDevice,
      UINT uiCommand,
      LPVOID pData,
      PUINT pcbSize);










__declspec(dllimport)
UINT
__stdcall
GetRawInputBuffer(
      PRAWINPUT pData,
      PUINT pcbSize,
      UINT cbSizeHeader);




typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage; 
    USHORT usUsage;     
    DWORD dwFlags;
    HWND hwndTarget;    
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;

typedef const RAWINPUTDEVICE* PCRAWINPUTDEVICE;


#pragma endregion































#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
RegisterRawInputDevices(
      PCRAWINPUTDEVICE pRawInputDevices,
      UINT uiNumDevices,
      UINT cbSize);

__declspec(dllimport)
UINT
__stdcall
GetRegisteredRawInputDevices(
      PRAWINPUTDEVICE pRawInputDevices,
      PUINT puiNumDevices,
      UINT cbSize);


typedef struct tagRAWINPUTDEVICELIST {
    HANDLE hDevice;
    DWORD dwType;
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceList(
      PRAWINPUTDEVICELIST pRawInputDeviceList,
      PUINT puiNumDevices,
      UINT cbSize);

__declspec(dllimport)
LRESULT
__stdcall
DefRawInputProc(
      PRAWINPUT* paRawInput,
      INT nInput,
      UINT cbSizeHeader);


#pragma endregion























#pragma region Desktop Family


typedef enum tagPOINTER_DEVICE_TYPE {
    POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x00000001,
    POINTER_DEVICE_TYPE_EXTERNAL_PEN   = 0x00000002,
    POINTER_DEVICE_TYPE_TOUCH          = 0x00000003,

    POINTER_DEVICE_TYPE_TOUCH_PAD      = 0x00000004,

    POINTER_DEVICE_TYPE_MAX            = 0xFFFFFFFF
} POINTER_DEVICE_TYPE;

typedef struct tagPOINTER_DEVICE_INFO {
    DWORD displayOrientation;
    HANDLE device;
    POINTER_DEVICE_TYPE pointerDeviceType;
    HMONITOR monitor;
    ULONG startingCursorId;
    USHORT maxActiveContacts;
    WCHAR productString[520];
} POINTER_DEVICE_INFO;

typedef struct tagPOINTER_DEVICE_PROPERTY {
    INT32 logicalMin;
    INT32 logicalMax;
    INT32 physicalMin;
    INT32 physicalMax;
    UINT32 unit;
    UINT32 unitExponent;
    USHORT usagePageId;
    USHORT usageId;
} POINTER_DEVICE_PROPERTY;

typedef enum tagPOINTER_DEVICE_CURSOR_TYPE {
    POINTER_DEVICE_CURSOR_TYPE_UNKNOWN   = 0x00000000,
    POINTER_DEVICE_CURSOR_TYPE_TIP       = 0x00000001,
    POINTER_DEVICE_CURSOR_TYPE_ERASER    = 0x00000002,
    POINTER_DEVICE_CURSOR_TYPE_MAX       = 0xFFFFFFFF
} POINTER_DEVICE_CURSOR_TYPE;

typedef struct tagPOINTER_DEVICE_CURSOR_INFO {
    UINT32 cursorId;
    POINTER_DEVICE_CURSOR_TYPE cursor;
} POINTER_DEVICE_CURSOR_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevices(
      UINT32* deviceCount,
      POINTER_DEVICE_INFO *pointerDevices);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevice(
      HANDLE device,
      POINTER_DEVICE_INFO *pointerDevice);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceProperties(
      HANDLE device,
      UINT32* propertyCount,
      POINTER_DEVICE_PROPERTY *pointerProperties);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerDeviceNotifications(
      HWND window,
      BOOL notifyRange);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceRects(
      HANDLE device,
      RECT* pointerDeviceRect,
      RECT* displayRect);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceCursors(
      HANDLE device,
      UINT32* cursorCount,
      POINTER_DEVICE_CURSOR_INFO *deviceCursors);

__declspec(dllimport)
BOOL
__stdcall
GetRawPointerDeviceData(
      UINT32 pointerId,
      UINT32 historyCount,
      UINT32 propertiesCount,
      POINTER_DEVICE_PROPERTY* pProperties,
      LONG* pValues);



#pragma endregion













#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilter(
      UINT message,
      DWORD dwFlag);


#pragma endregion













#pragma region Desktop Family


typedef struct tagCHANGEFILTERSTRUCT {
    DWORD cbSize;
    DWORD ExtStatus;
} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT;


#pragma endregion








#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilterEx(
      HWND hwnd,                                         
      UINT message,                                      
      DWORD action,                                      
      PCHANGEFILTERSTRUCT pChangeFilterStruct);   


#pragma endregion












#pragma region Desktop Family





struct HGESTUREINFO__{int unused;}; typedef struct HGESTUREINFO__ *HGESTUREINFO;


#pragma endregion




















#pragma region Desktop Family










typedef struct tagGESTUREINFO {
    UINT cbSize;                    
    DWORD dwFlags;                  
    DWORD dwID;                     
    HWND hwndTarget;                
    POINTS ptsLocation;             
    DWORD dwInstanceID;             
    DWORD dwSequenceID;             
    ULONGLONG ullArguments;         
    UINT cbExtraArgs;               
} GESTUREINFO, *PGESTUREINFO;
typedef GESTUREINFO const * PCGESTUREINFO;









typedef struct tagGESTURENOTIFYSTRUCT {
    UINT cbSize;                    
    DWORD dwFlags;                  
    HWND hwndTarget;                
    POINTS ptsLocation;             
    DWORD dwInstanceID;             
} GESTURENOTIFYSTRUCT, *PGESTURENOTIFYSTRUCT;













__declspec(dllimport)
BOOL
__stdcall
GetGestureInfo(
      HGESTUREINFO hGestureInfo,
      PGESTUREINFO pGestureInfo);







__declspec(dllimport)
BOOL
__stdcall
GetGestureExtraArgs(
      HGESTUREINFO hGestureInfo,
      UINT cbExtraArgs,
      PBYTE pExtraArgs);











__declspec(dllimport)
BOOL
__stdcall
CloseGestureInfoHandle(
      HGESTUREINFO hGestureInfo);









typedef struct tagGESTURECONFIG {
    DWORD dwID;                     
    DWORD dwWant;                   
    DWORD dwBlock;                  
} GESTURECONFIG, *PGESTURECONFIG;


#pragma endregion









































                                                        

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetGestureConfig(
      HWND hwnd,                                     
      DWORD dwReserved,                              
      UINT cIDs,                                     
      PGESTURECONFIG pGestureConfig,    
                                                        
      UINT cbSize);                                  



                                                        

__declspec(dllimport)
BOOL
__stdcall
GetGestureConfig(
      HWND hwnd,                                     
      DWORD dwReserved,                              
      DWORD dwFlags,                                 
      PUINT pcIDs,                                   
                                                        
      PGESTURECONFIG pGestureConfig,
                                                        
      UINT cbSize);                                  


#pragma endregion






















#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonCreate(
      HWND hWnd,
      LPCWSTR pwszReason);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonQuery(
      HWND hWnd,
      LPWSTR pwszBuff,
      DWORD *pcchBuff);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonDestroy(
      HWND hWnd);


#pragma endregion




#pragma region Desktop Family





typedef enum tagINPUT_MESSAGE_DEVICE_TYPE  {
     IMDT_UNAVAILABLE = 0x00000000,      
     IMDT_KEYBOARD    = 0x00000001,      
     IMDT_MOUSE       = 0x00000002,      
     IMDT_TOUCH       = 0x00000004,      
     IMDT_PEN         = 0x00000008,      

     IMDT_TOUCHPAD    = 0x00000010,      

 } INPUT_MESSAGE_DEVICE_TYPE;

typedef enum tagINPUT_MESSAGE_ORIGIN_ID {
     IMO_UNAVAILABLE = 0x00000000,  
     IMO_HARDWARE    = 0x00000001,  
     IMO_INJECTED    = 0x00000002,  
     IMO_SYSTEM      = 0x00000004,  
} INPUT_MESSAGE_ORIGIN_ID;




 typedef struct tagINPUT_MESSAGE_SOURCE {
     INPUT_MESSAGE_DEVICE_TYPE deviceType;
     INPUT_MESSAGE_ORIGIN_ID   originId;
 } INPUT_MESSAGE_SOURCE;





__declspec(dllimport)
BOOL
__stdcall
GetCurrentInputMessageSource(
      INPUT_MESSAGE_SOURCE *inputMessageSource);

__declspec(dllimport)
BOOL
__stdcall
GetCIMSSM(
      INPUT_MESSAGE_SOURCE *inputMessageSource);


#pragma endregion





#pragma region Application Family





typedef enum tagAR_STATE {
    AR_ENABLED        = 0x0,
    AR_DISABLED       = 0x1,
    AR_SUPPRESSED     = 0x2,
    AR_REMOTESESSION  = 0x4,
    AR_MULTIMON       = 0x8,
    AR_NOSENSOR       = 0x10,
    AR_NOT_SUPPORTED  = 0x20,
    AR_DOCKED         = 0x40,
    AR_LAPTOP         = 0x80
} AR_STATE, *PAR_STATE;


#pragma endregion





extern "C++" { inline AR_STATE operator | (AR_STATE a, AR_STATE b) { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator |= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE operator & (AR_STATE a, AR_STATE b) { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator &= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE operator ~ (AR_STATE a) { return AR_STATE(~((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a)); } inline AR_STATE operator ^ (AR_STATE a, AR_STATE b) { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator ^= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } };


#pragma region Desktop Family






typedef enum ORIENTATION_PREFERENCE {
    ORIENTATION_PREFERENCE_NONE              = 0x0,
    ORIENTATION_PREFERENCE_LANDSCAPE         = 0x1,
    ORIENTATION_PREFERENCE_PORTRAIT          = 0x2,
    ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x4,
    ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED  = 0x8
} ORIENTATION_PREFERENCE;





extern "C++" { inline ORIENTATION_PREFERENCE operator | (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator |= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE operator & (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator &= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE operator ~ (ORIENTATION_PREFERENCE a) { return ORIENTATION_PREFERENCE(~((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a)); } inline ORIENTATION_PREFERENCE operator ^ (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator ^= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } };


__declspec(dllimport)
BOOL
__stdcall
GetAutoRotationState(
      PAR_STATE pState);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferences(
      ORIENTATION_PREFERENCE *pOrientation);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferencesByProcessId(
      DWORD dwProcessId,
      ORIENTATION_PREFERENCE *pOrientation,
      BOOL *fRotateScreen);

__declspec(dllimport)
BOOL
__stdcall
SetDisplayAutoRotationPreferences(
      ORIENTATION_PREFERENCE orientation);


#pragma endregion





#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
IsImmersiveProcess(
      HANDLE hProcess);

__declspec(dllimport)
BOOL
__stdcall
SetProcessRestrictionExemption(
      BOOL fEnableExemption);


#pragma endregion













}

































extern "C" {






 











#pragma once























extern "C" {







#pragma region Desktop Family




__declspec(dllimport)
int
__stdcall
GetDateFormatA(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME * lpDate,
      LPCSTR lpFormat,
      LPSTR lpDateStr,
      int cchDate
    );


__declspec(dllimport)
int
__stdcall
GetDateFormatW(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME * lpDate,
      LPCWSTR lpFormat,
      LPWSTR lpDateStr,
      int cchDate
    );









__declspec(dllimport)
int
__stdcall
GetTimeFormatA(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME * lpTime,
      LPCSTR lpFormat,
      LPSTR lpTimeStr,
      int cchTime
    );


__declspec(dllimport)
int
__stdcall
GetTimeFormatW(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME * lpTime,
      LPCWSTR lpFormat,
      LPWSTR lpTimeStr,
      int cchTime
    );








#pragma endregion








#pragma region Application Family



__declspec(dllimport)
int
__stdcall
GetTimeFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      const SYSTEMTIME * lpTime,
      LPCWSTR lpFormat,
      LPWSTR lpTimeStr,
      int cchTime
    );


__declspec(dllimport)
int
__stdcall
GetDateFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      const SYSTEMTIME * lpDate,
      LPCWSTR lpFormat,
      LPWSTR lpDateStr,
      int cchDate,
      LPCWSTR lpCalendar
    );



#pragma endregion









}















#pragma region Application Family
































































































































































































































































































































































































































































































































































































































































                                                   
                                                   
                                                   
                                                   




























































































































































































































































typedef DWORD LGRPID;




typedef DWORD LCTYPE;




typedef DWORD CALTYPE;





typedef DWORD CALID;






typedef struct _cpinfo {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
} CPINFO, *LPCPINFO;

typedef struct _cpinfoexA {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    CHAR    CodePageName[260];         
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    WCHAR   CodePageName[260];         
} CPINFOEXW, *LPCPINFOEXW;




typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;







typedef struct _numberfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTW, *LPNUMBERFMTW;




typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;







typedef struct _currencyfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPSTR   lpCurrencySymbol;          
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPWSTR  lpCurrencySymbol;          
} CURRENCYFMTW, *LPCURRENCYFMTW;




typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;






enum SYSNLS_FUNCTION{
    COMPARE_STRING    =  0x0001,
};
typedef DWORD NLS_FUNCTION;














typedef struct _nlsversioninfo{
    DWORD dwNLSVersionInfoSize;     
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;         
    DWORD dwEffectiveId;            
    GUID  guidCustomVersion;        
} NLSVERSIONINFO, *LPNLSVERSIONINFO;


















typedef struct _nlsversioninfoex{
    DWORD dwNLSVersionInfoSize;     
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;         
    DWORD dwEffectiveId;            
    GUID  guidCustomVersion;        
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX;





typedef LONG    GEOID;
typedef DWORD   GEOTYPE;
typedef DWORD   GEOCLASS;







enum SYSGEOTYPE {
    GEO_NATION      =       0x0001,
    GEO_LATITUDE    =       0x0002,
    GEO_LONGITUDE   =       0x0003,
    GEO_ISO2        =       0x0004,
    GEO_ISO3        =       0x0005,
    GEO_RFC1766     =       0x0006,
    GEO_LCID        =       0x0007,
    GEO_FRIENDLYNAME=       0x0008,
    GEO_OFFICIALNAME=       0x0009,
    GEO_TIMEZONES   =       0x000A,
    GEO_OFFICIALLANGUAGES = 0x000B,
    GEO_ISO_UN_NUMBER =     0x000C,
    GEO_PARENT      =       0x000D
};





enum SYSGEOCLASS {
    GEOCLASS_NATION  = 16,
    GEOCLASS_REGION  = 14,
    GEOCLASS_ALL = 0
};






typedef enum _NORM_FORM {
    NormalizationOther  = 0,       
    NormalizationC      = 0x1,     
    NormalizationD      = 0x2,     
    NormalizationKC     = 0x5,     
                                   
    NormalizationKD     = 0x6      
                                   
} NORM_FORM;





















typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);

typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* GEO_ENUMPROC)(GEOID);





























































typedef struct _FILEMUIINFO {
    DWORD       dwSize;                 
    DWORD       dwVersion;              
    DWORD       dwFileType;             
    BYTE        pChecksum[16];          
    BYTE        pServiceChecksum[16];   
    DWORD       dwLanguageNameOffset;   
    DWORD       dwTypeIDMainSize;       
    DWORD       dwTypeIDMainOffset;     
    DWORD       dwTypeNameMainOffset;   
    DWORD       dwTypeIDMUISize;        
    DWORD       dwTypeIDMUIOffset;      
    DWORD       dwTypeNameMUIOffset;    
    BYTE        abBuffer[8];             
} FILEMUIINFO, *PFILEMUIINFO;



 









#pragma once






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































extern "C" {





#pragma region Application Family



__declspec(dllimport)
int
__stdcall
CompareStringEx(
      LPCWSTR lpLocaleName,
      DWORD dwCmpFlags,
      LPCWCH lpString1,
      int cchCount1,
      LPCWCH lpString2,
      int cchCount2,
      LPNLSVERSIONINFO lpVersionInformation,
      LPVOID lpReserved,
      LPARAM lParam
    );


__declspec(dllimport)
int
__stdcall
CompareStringOrdinal(
      LPCWCH lpString1,
      int cchCount1,
      LPCWCH lpString2,
      int cchCount2,
      BOOL bIgnoreCase
    );



#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
int
__stdcall
CompareStringW(
      LCID Locale,
      DWORD dwCmpFlags,
      PCNZWCH lpString1,
      int cchCount1,
      PCNZWCH lpString2,
      int cchCount2
    );





__declspec(dllimport)
int
__stdcall
FoldStringW(
      DWORD dwMapFlags,
      LPCWCH lpSrcStr,
      int cchSrc,
      LPWSTR lpDestStr,
      int cchDest
    );






#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExW(
      LCID Locale,
      DWORD dwInfoType,
      LPCWCH lpSrcStr,
      int cchSrc,
      LPWORD lpCharType
    );





__declspec(dllimport)
BOOL
__stdcall
GetStringTypeW(
      DWORD dwInfoType,
      LPCWCH lpSrcStr,
      int cchSrc,
      LPWORD lpCharType
    );







__declspec(dllimport)
 
         
int
__stdcall
MultiByteToWideChar(
      UINT CodePage,
      DWORD dwFlags,
      LPCCH lpMultiByteStr,
      int cbMultiByte,
      LPWSTR lpWideCharStr,
      int cchWideChar
    );


__declspec(dllimport)
 
         
int
__stdcall
WideCharToMultiByte(
      UINT CodePage,
      DWORD dwFlags,
      LPCWCH lpWideCharStr,
      int cchWideChar,
      LPSTR lpMultiByteStr,
      int cbMultiByte,
      LPCCH lpDefaultChar,
      LPBOOL lpUsedDefaultChar
    );



#pragma endregion


}






































































__declspec(dllimport)
BOOL
__stdcall
IsValidCodePage(
      UINT  CodePage);


#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
GetACP(void);

__declspec(dllimport)
UINT
__stdcall
GetOEMCP(void);


#pragma endregion

#pragma region Application Family


__declspec(dllimport)
BOOL
__stdcall
GetCPInfo(
      UINT       CodePage,
      LPCPINFO  lpCPInfo);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExA(
      UINT          CodePage,
      DWORD         dwFlags,
      LPCPINFOEXA  lpCPInfoEx);
__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExW(
      UINT          CodePage,
      DWORD         dwFlags,
      LPCPINFOEXW  lpCPInfoEx);







#pragma endregion

#pragma region Desktop Family







__declspec(dllimport)
int
__stdcall
CompareStringA(
      LCID     Locale,
      DWORD    dwCmpFlags,
      PCNZCH lpString1,
      int      cchCount1,
      PCNZCH  lpString2,
      int      cchCount2);




































__declspec(dllimport)
int
__stdcall
FindNLSString(
                         LCID Locale,
                         DWORD dwFindNLSStringFlags,
       LPCWSTR lpStringSource,
                         int cchSource,
        LPCWSTR lpStringValue,
                         int cchValue,
                    LPINT pcchFound);




__declspec(dllimport)
int
__stdcall
LCMapStringW(
      LCID     Locale,
      DWORD    dwMapFlags,
      LPCWSTR  lpSrcStr,
      int      cchSrc,
      LPWSTR  lpDestStr,
      int      cchDest);




__declspec(dllimport)
int
__stdcall
LCMapStringA(
      LCID     Locale,
      DWORD    dwMapFlags,
      LPCSTR  lpSrcStr,
      int      cchSrc,
      LPSTR  lpDestStr,
      int      cchDest);






__declspec(dllimport)
int
__stdcall
GetLocaleInfoW(
      LCID     Locale,
      LCTYPE   LCType,
      LPWSTR lpLCData,
      int      cchData);
    




__declspec(dllimport)
int 
__stdcall 
GetLocaleInfoA(
      LCID Locale,
      LCTYPE LCType,
      LPSTR lpLCData,
      int cchData
    );





__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoA(
      LCID     Locale,
      LCTYPE   LCType,
      LPCSTR  lpLCData);
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoW(
      LCID     Locale,
      LCTYPE   LCType,
      LPCWSTR  lpLCData);









__declspec(dllimport)
int
__stdcall
GetCalendarInfoA(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPSTR   lpCalData,
      int      cchData,
      LPDWORD  lpValue);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoW(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPWSTR   lpCalData,
      int      cchData,
      LPDWORD  lpValue);






__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoA(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPCSTR  lpCalData);
__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoW(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPCWSTR  lpCalData);
















        
__declspec(dllimport)                                
BOOL                                      
__stdcall                                    
LoadStringByReference(                    
            DWORD   Flags,             
            PCWSTR  Language,      
            PCWSTR  SourceString,      
        PWSTR   Buffer,     
            ULONG  cchBuffer,                      
        PCWSTR  Directory,                     
       PULONG  pcchBufferOut                  
    );                                                



__declspec(dllimport)         
BOOL               
__stdcall             
IsDBCSLeadByte(    
      BYTE  TestChar 
    );

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByteEx(
      UINT  CodePage,
      BYTE  TestChar
    );


#pragma endregion

#pragma region Application Family



__declspec(dllimport)
int
__stdcall
LCIDToLocaleName(
      LCID     Locale,
      LPWSTR  lpName,
      int      cchName,
      DWORD    dwFlags);

__declspec(dllimport)
LCID
__stdcall
LocaleNameToLCID(
      LPCWSTR lpName,
      DWORD dwFlags);




#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
int
__stdcall
GetDurationFormat(
      LCID             Locale,
      DWORD            dwFlags,
      const SYSTEMTIME *lpDuration,
      ULONGLONG ullDuration,
      LPCWSTR          lpFormat,
      LPWSTR          lpDurationStr,
      int              cchDuration);



__declspec(dllimport)
int
__stdcall
GetNumberFormatA(
      LCID             Locale,
      DWORD            dwFlags,
      LPCSTR          lpValue,
      const NUMBERFMTA *lpFormat,
      LPSTR          lpNumberStr,
      int              cchNumber);

__declspec(dllimport)
int
__stdcall
GetNumberFormatW(
      LCID             Locale,
      DWORD            dwFlags,
      LPCWSTR          lpValue,
      const NUMBERFMTW *lpFormat,
      LPWSTR          lpNumberStr,
      int              cchNumber);







__declspec(dllimport)
int
__stdcall
GetCurrencyFormatA(
      LCID               Locale,
      DWORD              dwFlags,
      LPCSTR            lpValue,
      const CURRENCYFMTA *lpFormat,
      LPSTR            lpCurrencyStr,
      int                cchCurrency);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatW(
      LCID               Locale,
      DWORD              dwFlags,
      LPCWSTR            lpValue,
      const CURRENCYFMTW *lpFormat,
      LPWSTR            lpCurrencyStr,
      int                cchCurrency);







__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoA(
      CALINFO_ENUMPROCA lpCalInfoEnumProc,
      LCID              Locale,
      CALID             Calendar,
      CALTYPE           CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoW(
      CALINFO_ENUMPROCW lpCalInfoEnumProc,
      LCID              Locale,
      CALID             Calendar,
      CALTYPE           CalType);








__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExA(
      CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
      LCID                Locale,
      CALID               Calendar,
      CALTYPE             CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExW(
      CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
      LCID                Locale,
      CALID               Calendar,
      CALTYPE             CalType);








__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsA(
      TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsW(
      TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);







__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsA(
      DATEFMT_ENUMPROCA lpDateFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsW(
      DATEFMT_ENUMPROCW lpDateFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);








__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExA(
      DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
      LCID                Locale,
      DWORD               dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExW(
      DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
      LCID                Locale,
      DWORD               dwFlags);








__declspec(dllimport)
BOOL
__stdcall
IsValidLanguageGroup(
      LGRPID  LanguageGroup,
      DWORD   dwFlags);



__declspec(dllimport)
BOOL
__stdcall
GetNLSVersion(
         NLS_FUNCTION     Function,
         LCID             Locale,
      LPNLSVERSIONINFO lpVersionInformation);

__declspec(dllimport)
BOOL
__stdcall
IsNLSDefinedString(
      NLS_FUNCTION     Function,
      DWORD            dwFlags,
      LPNLSVERSIONINFO lpVersionInformation,
      LPCWSTR          lpString,
      INT              cchStr);


__declspec(dllimport)
BOOL
__stdcall
IsValidLocale(
      LCID   Locale,
      DWORD  dwFlags);


#pragma endregion

#pragma region Application Family


__declspec(dllimport)
int
__stdcall
GetGeoInfoA(
      GEOID       Location,
      GEOTYPE     GeoType,
      LPSTR     lpGeoData,
      int         cchData,
      LANGID      LangId);
__declspec(dllimport)
int
__stdcall
GetGeoInfoW(
      GEOID       Location,
      GEOTYPE     GeoType,
      LPWSTR     lpGeoData,
      int         cchData,
      LANGID      LangId);






__declspec(dllimport)
BOOL
__stdcall
EnumSystemGeoID(
      GEOCLASS        GeoClass,
      GEOID           ParentGeoId,
      GEO_ENUMPROC    lpGeoEnumProc);

__declspec(dllimport)
GEOID
__stdcall
GetUserGeoID(
      GEOCLASS    GeoClass);


#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetUserGeoID(
      GEOID       GeoId);

__declspec(dllimport)
LCID
__stdcall
ConvertDefaultLocale(
      LCID   Locale);

__declspec(dllimport)
LCID
__stdcall
GetThreadLocale(void);

__declspec(dllimport)
BOOL
__stdcall
SetThreadLocale(
      LCID  Locale
    );


__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultUILanguage(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultUILanguage(void);


__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultLangID(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultLangID(void);

__declspec(dllimport)
LCID
__stdcall
GetSystemDefaultLCID(void);

__declspec(dllimport)
LCID
__stdcall
GetUserDefaultLCID(void);


__declspec(dllimport)
LANGID
__stdcall
SetThreadUILanguage(  LANGID LangId);




__declspec(dllimport)
LANGID
__stdcall
GetThreadUILanguage(void);

__declspec(dllimport)
BOOL
__stdcall
GetProcessPreferredUILanguages(
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetProcessPreferredUILanguages(
             DWORD dwFlags,
         PCZZWSTR pwszLanguagesBuffer,
        PULONG pulNumLanguages
);

__declspec(dllimport)
BOOL
__stdcall
GetUserPreferredUILanguages (
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetSystemPreferredUILanguages (
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetThreadPreferredUILanguages(
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetThreadPreferredUILanguages(
             DWORD dwFlags,
         PCZZWSTR pwszLanguagesBuffer,
        PULONG pulNumLanguages
);

__declspec(dllimport)
 
BOOL
__stdcall
GetFileMUIInfo(
                        DWORD           dwFlags,
                     PCWSTR          pcwszFilePath,
      PFILEMUIINFO    pFileMUIInfo,
                  DWORD*          pcbFileMUIInfo);

__declspec(dllimport)
BOOL
__stdcall
GetFileMUIPath(
      DWORD      dwFlags,
      PCWSTR     pcwszFilePath ,
        PWSTR pwszLanguage,
      PULONG  pcchLanguage,
      PWSTR pwszFileMUIPath,
              PULONG pcchFileMUIPath,
              PULONGLONG pululEnumerator
);


__declspec(dllimport)
BOOL
__stdcall
GetUILanguageInfo(
      DWORD dwFlags,
      PCZZWSTR pwmszLanguage,
      PZZWSTR pwszFallbackLanguages,
      PDWORD pcchFallbackLanguages,
      PDWORD pAttributes
);


__declspec(dllimport)
BOOL
__stdcall
NotifyUILanguageChange(
             DWORD dwFlags,
             PCWSTR pcwstrNewLanguage,
         PCWSTR pcwstrPreviousLanguage,
             DWORD dwReserved,
        PDWORD pdwStatusRtrn
);







__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExA(
                      LCID       Locale,
                      DWORD      dwInfoType,
       LPCSTR   lpSrcStr,
                      int        cchSrc,
      LPWORD     lpCharType);















__declspec(dllimport)
BOOL
__stdcall
GetStringTypeA(
      LCID     Locale,
      DWORD    dwInfoType,
      LPCSTR   lpSrcStr,
      int      cchSrc,
      LPWORD  lpCharType);

__declspec(dllimport)
int
__stdcall
FoldStringA(
      DWORD    dwMapFlags,
      LPCSTR  lpSrcStr,
      int      cchSrc,
      LPSTR  lpDestStr,
      int      cchDest);






__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesA(
      LOCALE_ENUMPROCA lpLocaleEnumProc,
      DWORD            dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesW(
      LOCALE_ENUMPROCW lpLocaleEnumProc,
      DWORD            dwFlags);







__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsA(
      LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
      DWORD                   dwFlags,
      LONG_PTR                lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsW(
      LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
      DWORD                   dwFlags,
      LONG_PTR                lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesA(
      LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
      LGRPID                    LanguageGroup,
      DWORD                     dwFlags,
      LONG_PTR                  lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesW(
      LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
      LGRPID                    LanguageGroup,
      DWORD                     dwFlags,
      LONG_PTR                  lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesA(
      UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
      DWORD                dwFlags,
      LONG_PTR             lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesW(
      UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
      DWORD                dwFlags,
      LONG_PTR             lParam);








#pragma endregion

#pragma region Application Family


__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesA(
      CODEPAGE_ENUMPROCA lpCodePageEnumProc,
      DWORD              dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesW(
      CODEPAGE_ENUMPROCW lpCodePageEnumProc,
      DWORD              dwFlags);











__declspec(dllimport)
int
__stdcall NormalizeString(                            NORM_FORM NormForm,
                               LPCWSTR   lpSrcString,
                                                   int       cwSrcLength,
                          LPWSTR    lpDstString,
                                                   int       cwDstLength );

__declspec(dllimport)
BOOL
__stdcall IsNormalizedString(                     NORM_FORM NormForm,
                              LPCWSTR   lpString,
                                               int       cwLength );




__declspec(dllimport)
int
__stdcall IdnToAscii(                            DWORD    dwFlags,
                    	 LPCWSTR  lpUnicodeCharStr,
                                           	 int      cchUnicodeChar,
                    LPWSTR   lpASCIICharStr,
                                           	 int      cchASCIIChar);

__declspec(dllimport)
int
__stdcall IdnToNameprepUnicode(                             	DWORD   dwFlags,
                                  	LPCWSTR lpUnicodeCharStr,
                                                         	int     cchUnicodeChar,
                                LPWSTR  lpNameprepCharStr,
                                                         	int     cchNameprepChar);

__declspec(dllimport)
int
__stdcall IdnToUnicode(                          	 DWORD   dwFlags,
                         	 LPCWSTR lpASCIICharStr,
                                              	 int     cchASCIIChar,
                      LPWSTR  lpUnicodeCharStr,
                                              	 int     cchUnicodeChar);

__declspec(dllimport)
BOOL
__stdcall VerifyScripts(
         DWORD   dwFlags,            
         LPCWSTR lpLocaleScripts,    
         int     cchLocaleScripts,   
         LPCWSTR lpTestScripts,      
         int     cchTestScripts);    

__declspec(dllimport)
int
__stdcall GetStringScripts(
                                  DWORD   dwFlags,        
                                  LPCWSTR lpString,       
                                  int     cchString,      
          LPWSTR  lpScripts,      
                                  int     cchScripts);    




#pragma endregion



#pragma region Application Family










__declspec(dllimport)
int
__stdcall
GetLocaleInfoEx(
      LPCWSTR lpLocaleName,
      LCTYPE LCType,
      LPWSTR lpLCData,
      int cchData
);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoEx(
      LPCWSTR lpLocaleName,
      CALID Calendar,
      LPCWSTR lpReserved,
      CALTYPE CalType,
      LPWSTR lpCalData,
      int cchData,
      LPDWORD lpValue
);

__declspec(dllimport)
int
__stdcall
GetDurationFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      const SYSTEMTIME *lpDuration,
      ULONGLONG ullDuration,
      LPCWSTR lpFormat,
      LPWSTR lpDurationStr,
      int cchDuration
);

__declspec(dllimport)
int
__stdcall
GetNumberFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPCWSTR lpValue,
      const NUMBERFMTW *lpFormat,
      LPWSTR lpNumberStr,
      int cchNumber
);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPCWSTR lpValue,
      const CURRENCYFMTW *lpFormat,
      LPWSTR lpCurrencyStr,
      int cchCurrency
);

__declspec(dllimport)
int
__stdcall
GetUserDefaultLocaleName(
      LPWSTR lpLocaleName,
      int cchLocaleName
);

__declspec(dllimport)
int
__stdcall
GetSystemDefaultLocaleName(
      LPWSTR lpLocaleName,
      int cchLocaleName
);

__declspec(dllimport)
BOOL
__stdcall
GetNLSVersionEx(
     	    NLS_FUNCTION function,
         LPCWSTR lpLocaleName,
     	    LPNLSVERSIONINFOEX lpVersionInformation
);


__declspec(dllimport)
DWORD
__stdcall
IsValidNLSVersion(
             NLS_FUNCTION function,
         LPCWSTR lpLocaleName,
             LPNLSVERSIONINFOEX lpVersionInformation
);


__declspec(dllimport)
int
__stdcall
FindNLSStringEx(
      LPCWSTR lpLocaleName,
      DWORD dwFindNLSStringFlags,
      LPCWSTR lpStringSource,
      int cchSource,
      LPCWSTR lpStringValue,
      int cchValue,
      LPINT pcchFound,
      LPNLSVERSIONINFO lpVersionInformation,
      LPVOID lpReserved,
      LPARAM sortHandle
);








__declspec(dllimport)
int
__stdcall
LCMapStringEx(
      LPCWSTR lpLocaleName,
      DWORD dwMapFlags,
      LPCWSTR lpSrcStr,
      int cchSrc,
      LPWSTR lpDestStr,
      int cchDest,
      LPNLSVERSIONINFO lpVersionInformation,
      LPVOID lpReserved,
      LPARAM sortHandle
);

__declspec(dllimport)
BOOL
__stdcall
IsValidLocaleName(
      LPCWSTR lpLocaleName
);

typedef BOOL (__stdcall* CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExEx(
      CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,
      LPCWSTR lpLocaleName,
      CALID Calendar,
      LPCWSTR lpReserved,
      CALTYPE CalType,
      LPARAM lParam
);

typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExEx(
      DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPARAM lParam
);

typedef BOOL (__stdcall* TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsEx(
      TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPARAM lParam
);

typedef BOOL (__stdcall* LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesEx(
      LOCALE_ENUMPROCEX lpLocaleEnumProcEx,
      DWORD dwFlags,
      LPARAM lParam,
      LPVOID lpReserved
);


#pragma endregion





#pragma region Application Family


__declspec(dllimport)
int
__stdcall
ResolveLocaleName(
                             LPCWSTR lpNameToResolve,
      LPWSTR  lpLocaleName,
                                 int     cchLocaleName
);


#pragma endregion



#pragma region Desktop Family


    

#pragma endregion





}


































#pragma once


extern "C" {






#pragma region Application Family


typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;


#pragma endregion

#pragma region Desktop Family


typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;


#pragma endregion

#pragma region Application Family


typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;






















typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;






















typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;


#pragma endregion











#pragma region Desktop Family


typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;


#pragma endregion























#pragma region Desktop Family


typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD  wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

typedef struct _CONSOLE_CURSOR_INFO {
    DWORD  dwSize;
    BOOL   bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

typedef struct _CONSOLE_FONT_INFO {
    DWORD  nFont;
    COORD  dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;


typedef struct _CONSOLE_FONT_INFOEX {
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;




typedef struct _CONSOLE_HISTORY_INFO {
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;


#pragma endregion



#pragma region Desktop Family


typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;


#pragma endregion












#pragma region Application Family






typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
      DWORD CtrlType
    );


#pragma endregion






























#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputW(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsRead
    );




__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputA(
      HANDLE hConsoleInput,
      const INPUT_RECORD *lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputW(
      HANDLE hConsoleInput,
      const INPUT_RECORD *lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputA(
      HANDLE hConsoleOutput,
      PCHAR_INFO lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpReadRegion
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputW(
      HANDLE hConsoleOutput,
      PCHAR_INFO lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpReadRegion
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputA(
      HANDLE hConsoleOutput,
      const CHAR_INFO *lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpWriteRegion
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputW(
      HANDLE hConsoleOutput,
      const CHAR_INFO *lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpWriteRegion
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterA(
      HANDLE hConsoleOutput,
      LPSTR lpCharacter,
      DWORD nLength,
      COORD dwReadCoord,
      LPDWORD lpNumberOfCharsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterW(
      HANDLE hConsoleOutput,
      LPWSTR lpCharacter,
      DWORD nLength,
      COORD dwReadCoord,
      LPDWORD lpNumberOfCharsRead
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputAttribute(
      HANDLE hConsoleOutput,
      LPWORD lpAttribute,
      DWORD nLength,
      COORD dwReadCoord,
      LPDWORD lpNumberOfAttrsRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterA(
      HANDLE hConsoleOutput,
      LPCSTR lpCharacter,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterW(
      HANDLE hConsoleOutput,
      LPCWSTR lpCharacter,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputAttribute(
      HANDLE hConsoleOutput,
      const WORD *lpAttribute,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterA(
      HANDLE hConsoleOutput,
      CHAR  cCharacter,
      DWORD  nLength,
      COORD  dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterW(
      HANDLE hConsoleOutput,
      WCHAR  cCharacter,
      DWORD  nLength,
      COORD  dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputAttribute(
      HANDLE hConsoleOutput,
      WORD   wAttribute,
      DWORD  nLength,
      COORD  dwWriteCoord,
      LPDWORD lpNumberOfAttrsWritten
    );




__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfo(
      HANDLE hConsoleOutput,
      PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfoEx(
      HANDLE hConsoleOutput,
      PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferInfoEx(
      HANDLE hConsoleOutput,
      PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
COORD
__stdcall
GetLargestConsoleWindowSize(
      HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleCursorInfo(
      HANDLE hConsoleOutput,
      PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );



__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFont(
      HANDLE hConsoleOutput,
      BOOL bMaximumWindow,
      PCONSOLE_FONT_INFO lpConsoleCurrentFont
    );


__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFontEx(
      HANDLE hConsoleOutput,
      BOOL bMaximumWindow,
      PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);

__declspec(dllimport)
BOOL
__stdcall
SetCurrentConsoleFontEx(
      HANDLE hConsoleOutput,
      BOOL bMaximumWindow,
      PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);


__declspec(dllimport)
BOOL
__stdcall
GetConsoleHistoryInfo(
      PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleHistoryInfo(
      PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
COORD
__stdcall
GetConsoleFontSize(
      HANDLE hConsoleOutput,
      DWORD nFont
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleSelectionInfo(
      PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
      LPDWORD lpNumberOfMouseButtons
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleActiveScreenBuffer(
      HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
FlushConsoleInputBuffer(
      HANDLE hConsoleInput
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferSize(
      HANDLE hConsoleOutput,
      COORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorPosition(
      HANDLE hConsoleOutput,
      COORD dwCursorPosition
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorInfo(
      HANDLE hConsoleOutput,
      const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferA(
      HANDLE hConsoleOutput,
      const SMALL_RECT *lpScrollRectangle,
      const SMALL_RECT *lpClipRectangle,
      COORD dwDestinationOrigin,
      const CHAR_INFO *lpFill
    );
__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferW(
      HANDLE hConsoleOutput,
      const SMALL_RECT *lpScrollRectangle,
      const SMALL_RECT *lpClipRectangle,
      COORD dwDestinationOrigin,
      const CHAR_INFO *lpFill
    );






__declspec(dllimport)
BOOL
__stdcall
SetConsoleWindowInfo(
      HANDLE hConsoleOutput,
      BOOL bAbsolute,
      const SMALL_RECT *lpConsoleWindow
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTextAttribute(
      HANDLE hConsoleOutput,
      WORD wAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
GenerateConsoleCtrlEvent(
      DWORD dwCtrlEvent,
      DWORD dwProcessGroupId);

__declspec(dllimport)
BOOL
__stdcall
FreeConsole(
    void);


__declspec(dllimport)
BOOL
__stdcall
AttachConsole(
      DWORD dwProcessId);





__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleA(
      LPSTR lpConsoleTitle,
      DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleW(
      LPWSTR lpConsoleTitle,
      DWORD nSize
    );







__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleA(
      LPSTR lpConsoleTitle,
      DWORD nSize);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleW(
      LPWSTR lpConsoleTitle,
      DWORD nSize);







__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleA(
      LPCSTR lpConsoleTitle
    );
__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleW(
      LPCWSTR lpConsoleTitle
    );







#pragma endregion

#pragma region Application Family


typedef struct _CONSOLE_READCONSOLE_CONTROL {
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;


#pragma endregion





 









#pragma once






















extern "C" {


#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
AllocConsole(
    void
    );


__declspec(dllimport)
UINT
__stdcall
GetConsoleCP(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetConsoleMode(
      HANDLE hConsoleHandle,
      LPDWORD lpMode
    );


__declspec(dllimport)
UINT
__stdcall
GetConsoleOutputCP(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleInputEvents(
      HANDLE hConsoleInput,
      LPDWORD lpNumberOfEvents
    );


__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputA(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsRead
    );






__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleA(
      HANDLE hConsoleInput,
      LPVOID lpBuffer,
      DWORD nNumberOfCharsToRead,
        LPDWORD lpNumberOfCharsRead,
      PCONSOLE_READCONSOLE_CONTROL pInputControl
    );

__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleW(
      HANDLE hConsoleInput,
      LPVOID lpBuffer,
      DWORD nNumberOfCharsToRead,
        LPDWORD lpNumberOfCharsRead,
      PCONSOLE_READCONSOLE_CONTROL pInputControl
    );







__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleInputA(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
        LPDWORD lpNumberOfEventsRead
    );

__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleInputW(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
        LPDWORD lpNumberOfEventsRead
    );







__declspec(dllimport)
BOOL
__stdcall
SetConsoleCtrlHandler(
      PHANDLER_ROUTINE HandlerRoutine,
      BOOL Add
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleMode(
      HANDLE hConsoleHandle,
      DWORD dwMode
    );


__declspec(dllimport)
BOOL
__stdcall
WriteConsoleA(
      HANDLE hConsoleOutput,
      const void * lpBuffer,
      DWORD nNumberOfCharsToWrite,
      LPDWORD lpNumberOfCharsWritten,
      LPVOID lpReserved
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleW(
      HANDLE hConsoleOutput,
      const void * lpBuffer,
      DWORD nNumberOfCharsToWrite,
      LPDWORD lpNumberOfCharsWritten,
      LPVOID lpReserved
    );








#pragma endregion


}






#pragma region Desktop Family


__declspec(dllimport)
HANDLE
__stdcall
CreateConsoleScreenBuffer(
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      const SECURITY_ATTRIBUTES *lpSecurityAttributes,
      DWORD dwFlags,
      LPVOID lpScreenBufferData
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCP(
      UINT wCodePageID
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleOutputCP(
      UINT wCodePageID
    );






__declspec(dllimport)
BOOL
__stdcall
GetConsoleDisplayMode(
      LPDWORD lpModeFlags);




BOOL
__stdcall
SetConsoleDisplayMode(
      HANDLE hConsoleOutput,
      DWORD dwFlags,
      PCOORD lpNewScreenBufferDimensions);

__declspec(dllimport)
HWND
__stdcall
GetConsoleWindow(
    void
    );





__declspec(dllimport)
DWORD
__stdcall
GetConsoleProcessList(
      LPDWORD lpdwProcessList,
      DWORD dwProcessCount);





__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasA(
      LPSTR Source,
      LPSTR Target,
      LPSTR ExeName);
__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasW(
      LPWSTR Source,
      LPWSTR Target,
      LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasA(
      LPSTR Source,
      LPSTR TargetBuffer,
      DWORD TargetBufferLength,
      LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasW(
      LPWSTR Source,
      LPWSTR TargetBuffer,
      DWORD TargetBufferLength,
      LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthA(
      LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthW(
      LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthA(
    void);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthW(
    void);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesA(
      LPSTR AliasBuffer,
      DWORD AliasBufferLength,
      LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesW(
      LPWSTR AliasBuffer,
      DWORD AliasBufferLength,
      LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesA(
      LPSTR ExeNameBuffer,
      DWORD ExeNameBufferLength);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesW(
      LPWSTR ExeNameBuffer,
      DWORD ExeNameBufferLength);









#pragma endregion



}





































#pragma region Application Family










































































#pragma endregion

#pragma region Desktop Family










































extern "C" {

    











typedef struct tagVS_FIXEDFILEINFO
{
    DWORD   dwSignature;            
    DWORD   dwStrucVersion;         
    DWORD   dwFileVersionMS;        
    DWORD   dwFileVersionLS;        
    DWORD   dwProductVersionMS;     
    DWORD   dwProductVersionLS;     
    DWORD   dwFileFlagsMask;        
    DWORD   dwFileFlags;            
    DWORD   dwFileOS;               
    DWORD   dwFileType;             
    DWORD   dwFileSubtype;          
    DWORD   dwFileDateMS;           
    DWORD   dwFileDateLS;           
} VS_FIXEDFILEINFO;


}





#pragma endregion





extern "C" {


#pragma region Desktop Family







DWORD
__stdcall
VerFindFileA(
                                  DWORD uFlags,
                                  LPCSTR szFileName,
                              LPCSTR szWinDir,
                                  LPCSTR szAppDir,
            LPSTR szCurDir,
                               PUINT puCurDirLen,
           LPSTR szDestDir,
                               PUINT puDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
                                  DWORD uFlags,
                                  LPCWSTR szFileName,
                              LPCWSTR szWinDir,
                                  LPCWSTR szAppDir,
            LPWSTR szCurDir,
                               PUINT puCurDirLen,
           LPWSTR szDestDir,
                               PUINT puDestDirLen
        );






DWORD
__stdcall
VerInstallFileA(
                                  DWORD uFlags,
                                  LPCSTR szSrcFileName,
                                  LPCSTR szDestFileName,
                                  LPCSTR szSrcDir,
                                  LPCSTR szDestDir,
                                  LPCSTR szCurDir,
           LPSTR szTmpFile,
                               PUINT puTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
                                  DWORD uFlags,
                                  LPCWSTR szSrcFileName,
                                  LPCWSTR szDestFileName,
                                  LPCWSTR szSrcDir,
                                  LPCWSTR szDestDir,
                                  LPCWSTR szCurDir,
           LPWSTR szTmpFile,
                               PUINT puTmpFileLen
        );







DWORD
__stdcall
GetFileVersionInfoSizeA(
                 LPCSTR lptstrFilename, 
          LPDWORD lpdwHandle       
        );

DWORD
__stdcall
GetFileVersionInfoSizeW(
                 LPCWSTR lptstrFilename, 
          LPDWORD lpdwHandle       
        );







BOOL
__stdcall
GetFileVersionInfoA(
                         LPCSTR lptstrFilename, 
                   DWORD dwHandle,          
                         DWORD dwLen,             
          LPVOID lpData            
        );

BOOL
__stdcall
GetFileVersionInfoW(
                         LPCWSTR lptstrFilename, 
                   DWORD dwHandle,          
                         DWORD dwLen,             
          LPVOID lpData            
        );






DWORD __stdcall GetFileVersionInfoSizeExA(  DWORD dwFlags,   LPCSTR lpwstrFilename,   LPDWORD lpdwHandle);
DWORD __stdcall GetFileVersionInfoSizeExW(  DWORD dwFlags,   LPCWSTR lpwstrFilename,   LPDWORD lpdwHandle);






BOOL __stdcall GetFileVersionInfoExA(  DWORD dwFlags,
                                      LPCSTR lpwstrFilename,
                                      DWORD dwHandle,
                                      DWORD dwLen,
                                      LPVOID lpData);
BOOL __stdcall GetFileVersionInfoExW(  DWORD dwFlags,
                                      LPCWSTR lpwstrFilename,
                                      DWORD dwHandle,
                                      DWORD dwLen,
                                      LPVOID lpData);







DWORD
__stdcall
VerLanguageNameA(
                           DWORD wLang,
          LPSTR szLang,
                           DWORD cchLang
        );
DWORD
__stdcall
VerLanguageNameW(
                           DWORD wLang,
          LPWSTR szLang,
                           DWORD cchLang
        );






BOOL
__stdcall
VerQueryValueA(
          LPCVOID pBlock,
          LPCSTR lpSubBlock,
         LPVOID * lplpBuffer,
          PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
          LPCVOID pBlock,
          LPCWSTR lpSubBlock,
         LPVOID * lplpBuffer,
          PUINT puLen
        );










#pragma endregion


}









 










































extern "C" {


#pragma region Desktop Family









































typedef ACCESS_MASK REGSAM;





























struct val_context {
    int valuelen;       
    LPVOID value_context;   
    LPVOID val_buff_ptr;    
};

typedef struct val_context  *PVALCONTEXT;

typedef struct pvalueA {           
    LPSTR   pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA,  *PPVALUEA;
typedef struct pvalueW {           
    LPWSTR  pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW,  *PPVALUEW;




typedef PVALUEA PVALUE;
typedef PPVALUEA PPVALUE;


typedef
DWORD __cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD  *total_outlen, DWORD input_blen);

typedef QUERYHANDLER  *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;    
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info  *PPROVIDER;

typedef struct value_entA {
    LPSTR   ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTA,  *PVALENTA;
typedef struct value_entW {
    LPWSTR  ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTW,  *PVALENTW;




typedef VALENTA VALENT;
typedef PVALENTA PVALENT;


















typedef   LONG LSTATUS;

__declspec(dllimport)
LSTATUS
__stdcall
RegCloseKey(
      HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOverridePredefKey (
      HKEY hKey,
      HKEY hNewHKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenUserClassesRoot(
      HANDLE hToken,
      DWORD dwOptions,
      REGSAM samDesired,
      PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenCurrentUser(
      REGSAM samDesired,
      PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCache(
    void
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCacheEx(
    void
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryA (
      LPCSTR lpMachineName,
      HKEY hKey,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryW (
      LPCWSTR lpMachineName,
      HKEY hKey,
      PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExA (
      LPCSTR lpMachineName,
      HKEY hKey,
      ULONG Flags,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExW (
      LPCWSTR lpMachineName,
      HKEY hKey,
      ULONG Flags,
      PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyA (
      HKEY hKey,
      LPCSTR lpSubKey,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExA(
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD Reserved,
      LPSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD Reserved,
      LPWSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedA (
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD Reserved,
      LPSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD Reserved,
      LPWSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyA (
      HKEY hKey,
      LPCSTR lpSubKey
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExA(
      HKEY hKey,
      LPCSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedA (
      HKEY hKey,
      LPCSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved,
             HANDLE hTransaction,
      PVOID  pExtendedParameter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved,
             HANDLE hTransaction,
      PVOID  pExtendedParameter
    );






__declspec(dllimport)
LONG
__stdcall
RegDisableReflectionKey (
      HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegEnableReflectionKey (
      HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegQueryReflectionKey (
      HKEY hBase,
      BOOL *bIsReflectionDisabled
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueA(
      HKEY hKey,
      LPCSTR lpValueName
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueW(
      HKEY hKey,
      LPCWSTR lpValueName
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyA (
      HKEY hKey,
      DWORD dwIndex,
      LPSTR lpName,
      DWORD cchName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyW (
      HKEY hKey,
      DWORD dwIndex,
      LPWSTR lpName,
      DWORD cchName
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExA(
      HKEY hKey,
      DWORD dwIndex,
      LPSTR lpName,
      LPDWORD lpcchName,
      LPDWORD lpReserved,
      LPSTR lpClass,
      LPDWORD lpcchClass,
      PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExW(
      HKEY hKey,
      DWORD dwIndex,
      LPWSTR lpName,
      LPDWORD lpcchName,
      LPDWORD lpReserved,
      LPWSTR lpClass,
      LPDWORD lpcchClass,
      PFILETIME lpftLastWriteTime
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueA(
      HKEY hKey,
      DWORD dwIndex,
      LPSTR lpValueName,
      LPDWORD lpcchValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
      LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueW(
      HKEY hKey,
      DWORD dwIndex,
      LPWSTR lpValueName,
      LPDWORD lpcchValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
      LPDWORD lpcbData
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegFlushKey(
      HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegGetKeySecurity(
      HKEY hKey,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      LPDWORD lpcbSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyA(
      HKEY hKey,
      LPCSTR lpSubKey,
      LPCSTR lpFile
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      LPCWSTR lpFile
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegNotifyChangeKeyValue(
      HKEY hKey,
      BOOL bWatchSubtree,
      DWORD dwNotifyFilter,
      HANDLE hEvent,
      BOOL fAsynchronous
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyA (
      HKEY hKey,
      LPCSTR lpSubKey,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExA(
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedA (
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyA(
      HKEY hKey,
      LPSTR lpClass,
      LPDWORD lpcchClass,
      LPDWORD lpReserved,
      LPDWORD lpcSubKeys,
      LPDWORD lpcbMaxSubKeyLen,
      LPDWORD lpcbMaxClassLen,
      LPDWORD lpcValues,
      LPDWORD lpcbMaxValueNameLen,
      LPDWORD lpcbMaxValueLen,
      LPDWORD lpcbSecurityDescriptor,
      PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyW(
      HKEY hKey,
      LPWSTR lpClass,
      LPDWORD lpcchClass,
      LPDWORD lpReserved,
      LPDWORD lpcSubKeys,
      LPDWORD lpcbMaxSubKeyLen,
      LPDWORD lpcbMaxClassLen,
      LPDWORD lpcValues,
      LPDWORD lpcbMaxValueNameLen,
      LPDWORD lpcbMaxValueLen,
      LPDWORD lpcbSecurityDescriptor,
      PFILETIME lpftLastWriteTime
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueA (
      HKEY hKey,
      LPCSTR lpSubKey,
       LPSTR lpData,
      PLONG lpcbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueW (
      HKEY hKey,
      LPCWSTR lpSubKey,
       LPWSTR lpData,
      PLONG lpcbData
    );









__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesA (
      HKEY hKey,
      PVALENTA val_list,
      DWORD num_vals,
       LPSTR lpValueBuf,
      LPDWORD ldwTotsize
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesW (
      HKEY hKey,
      PVALENTW val_list,
      DWORD num_vals,
       LPWSTR lpValueBuf,
      LPDWORD ldwTotsize
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExA(
      HKEY hKey,
      LPCSTR lpValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
    
              LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExW(
      HKEY hKey,
      LPCWSTR lpValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
    
              LPDWORD lpcbData
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyA (
      HKEY hKey,
      LPCSTR lpSubKey,
      LPCSTR lpNewFile,
      LPCSTR lpOldFile
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      LPCWSTR lpNewFile,
      LPCWSTR lpOldFile
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyA(
      HKEY hKey,
      LPCSTR lpFile,
      DWORD dwFlags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyW(
      HKEY hKey,
      LPCWSTR lpFile,
      DWORD dwFlags
    );










__declspec(dllimport)
LSTATUS
__stdcall
RegRenameKey(
      HKEY hKey,
      LPCWSTR lpSubKeyName,
      LPCWSTR lpNewKeyName
    );



__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyA (
      HKEY hKey,
      LPCSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyW (
      HKEY hKey,
      LPCWSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeySecurity(
      HKEY hKey,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueA (
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD dwType,
      LPCSTR lpData,
      DWORD cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD dwType,
      LPCWSTR lpData,
      DWORD cbData
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExA(
      HKEY hKey,
      LPCSTR lpValueName,
      DWORD Reserved,
      DWORD dwType,
      const BYTE * lpData,
      DWORD cbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExW(
      HKEY hKey,
      LPCWSTR lpValueName,
      DWORD Reserved,
      DWORD dwType,
      const BYTE * lpData,
      DWORD cbData
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyA(
      HKEY hKey,
      LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyW(
      HKEY hKey,
      LPCWSTR lpSubKey
    );













__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueA (
           HKEY     hKey,
       LPCSTR lpSubKey,
       LPCSTR lpValueName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueW (
           HKEY     hKey,
       LPCWSTR lpSubKey,
       LPCWSTR lpValueName
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueA (
             HKEY     hKey,
         LPCSTR  lpSubKey,
         LPCSTR  lpValueName,
             DWORD    dwType,
      LPCVOID  lpData,
             DWORD    cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueW (
             HKEY     hKey,
         LPCWSTR  lpSubKey,
         LPCWSTR  lpValueName,
             DWORD    dwType,
      LPCVOID  lpData,
             DWORD    cbData
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeA(
      HKEY hKey,
      LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeW(
      HKEY hKey,
      LPCWSTR lpSubKey
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeA (
             HKEY     hKeySrc,
         LPCSTR  lpSubKey,
             HKEY     hKeyDest
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueA(
      HKEY hkey,
      LPCSTR lpSubKey,
      LPCSTR lpValue,
      DWORD dwFlags,
      LPDWORD pdwType,
    
	
      PVOID pvData,
      LPDWORD pcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueW(
      HKEY hkey,
      LPCWSTR lpSubKey,
      LPCWSTR lpValue,
      DWORD dwFlags,
      LPDWORD pdwType,
    
	
      PVOID pvData,
      LPDWORD pcbData
    );












__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeW(
      HKEY hKeySrc,
      LPCWSTR lpSubKey,
      HKEY hKeyDest
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringA(
      HKEY hKey,
      LPCSTR pszValue,
      LPSTR pszOutBuf,
      DWORD cbOutBuf,
      LPDWORD pcbData,
      DWORD Flags,
      LPCSTR pszDirectory
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringW(
      HKEY hKey,
      LPCWSTR pszValue,
      LPWSTR pszOutBuf,
      DWORD cbOutBuf,
      LPDWORD pcbData,
      DWORD Flags,
      LPCWSTR pszDirectory
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyA(
      LPCSTR lpFile,
      PHKEY phkResult,
      REGSAM samDesired,
      DWORD dwOptions,
      DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyW(
      LPCWSTR lpFile,
      PHKEY phkResult,
      REGSAM samDesired,
      DWORD dwOptions,
      DWORD Reserved
    );













 
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownA(
      LPSTR lpMachineName,
      LPSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown
    );
 
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownW(
      LPWSTR lpMachineName,
      LPWSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown
    );







__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownA(
      LPSTR lpMachineName
    );
__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownW(
      LPWSTR lpMachineName
    );



























#pragma once

#pragma region Desktop Family







































































































#pragma endregion





















 

__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExA(
      LPSTR lpMachineName,
      LPSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown,
      DWORD dwReason
    );
 

__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExW(
      LPWSTR lpMachineName,
      LPWSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown,
      DWORD dwReason
    );






















__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownA(
      LPSTR lpMachineName,
      LPSTR lpMessage,
          DWORD dwGracePeriod,
          DWORD dwShutdownFlags,
          DWORD dwReason
    );
__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownW(
      LPWSTR lpMachineName,
      LPWSTR lpMessage,
          DWORD dwGracePeriod,
          DWORD dwShutdownFlags,
          DWORD dwReason
    );






__declspec(dllimport)
DWORD
__stdcall
CheckForHiberboot(
      PBOOLEAN pHiberboot,
      BOOLEAN bClearFlag
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExA(
      HKEY hKey,
      LPCSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD Flags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExW(
      HKEY hKey,
      LPCWSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD Flags
    );









#pragma endregion


}






































#pragma once


extern "C" {


#pragma region Desktop Family



































#pragma region Desktop Family





















































































#pragma endregion






















































typedef struct  _NETRESOURCEA {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPSTR    lpLocalName;
    LPSTR    lpRemoteName;
    LPSTR    lpComment ;
    LPSTR    lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct  _NETRESOURCEW {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPWSTR   lpLocalName;
    LPWSTR   lpRemoteName;
    LPWSTR   lpComment ;
    LPWSTR   lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;




typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;































 
DWORD __stdcall
WNetAddConnectionA(
          LPCSTR   lpRemoteName,
      LPCSTR   lpPassword,
      LPCSTR   lpLocalName
    );
 
DWORD __stdcall
WNetAddConnectionW(
          LPCWSTR   lpRemoteName,
      LPCWSTR   lpPassword,
      LPCWSTR   lpLocalName
    );






 
DWORD __stdcall
WNetAddConnection2A(
          LPNETRESOURCEA lpNetResource,
      LPCSTR       lpPassword,
      LPCSTR       lpUserName,
          DWORD          dwFlags
    );
 
DWORD __stdcall
WNetAddConnection2W(
          LPNETRESOURCEW lpNetResource,
      LPCWSTR       lpPassword,
      LPCWSTR       lpUserName,
          DWORD          dwFlags
    );






 
DWORD __stdcall
WNetAddConnection3A(
      HWND           hwndOwner,
          LPNETRESOURCEA lpNetResource,
      LPCSTR       lpPassword,
      LPCSTR       lpUserName,
          DWORD          dwFlags
    );
 
DWORD __stdcall
WNetAddConnection3W(
      HWND           hwndOwner,
          LPNETRESOURCEW lpNetResource,
      LPCWSTR       lpPassword,
      LPCWSTR       lpUserName,
          DWORD          dwFlags
    );






 
DWORD __stdcall
WNetCancelConnectionA(
      LPCSTR lpName,
      BOOL     fForce
    );
 
DWORD __stdcall
WNetCancelConnectionW(
      LPCWSTR lpName,
      BOOL     fForce
    );






 
DWORD __stdcall
WNetCancelConnection2A(
      LPCSTR lpName,
      DWORD    dwFlags,
      BOOL     fForce
    );
 
DWORD __stdcall
WNetCancelConnection2W(
      LPCWSTR lpName,
      DWORD    dwFlags,
      BOOL     fForce
    );






 
DWORD __stdcall
WNetGetConnectionA(
      LPCSTR lpLocalName,
      LPSTR  lpRemoteName,
      LPDWORD lpnLength
    );
 
DWORD __stdcall
WNetGetConnectionW(
      LPCWSTR lpLocalName,
      LPWSTR  lpRemoteName,
      LPDWORD lpnLength
    );








 
DWORD __stdcall
WNetRestoreSingleConnectionW(
      HWND    hwndParent,
          LPCWSTR lpDevice,
          BOOL    fUseUI
    );













 
DWORD __stdcall
WNetUseConnectionA(
      HWND            hwndOwner,
          LPNETRESOURCEA  lpNetResource,
      LPCSTR        lpPassword,
      LPCSTR        lpUserId,
          DWORD           dwFlags,
      LPSTR lpAccessName,
      LPDWORD lpBufferSize,
      LPDWORD   lpResult
    );
 
DWORD __stdcall
WNetUseConnectionW(
      HWND            hwndOwner,
          LPNETRESOURCEW  lpNetResource,
      LPCWSTR        lpPassword,
      LPCWSTR        lpUserId,
          DWORD           dwFlags,
      LPWSTR lpAccessName,
      LPDWORD lpBufferSize,
      LPDWORD   lpResult
    );











 
DWORD __stdcall
WNetConnectionDialog(
      HWND  hwnd,
      DWORD dwType
    );

 
DWORD __stdcall
WNetDisconnectDialog(
      HWND hwnd,
      DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTA,  *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTW,  *LPCONNECTDLGSTRUCTW;




typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;















 
DWORD __stdcall
WNetConnectionDialog1A(
      LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );
 
DWORD __stdcall
WNetConnectionDialog1W(
      LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );






typedef struct _DISCDLGSTRUCTA{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPSTR           lpLocalName;      
    LPSTR           lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTA,  *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPWSTR          lpLocalName;      
    LPWSTR          lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTW,  *LPDISCDLGSTRUCTW;




typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;





 
DWORD __stdcall
WNetDisconnectDialog1A(
      LPDISCDLGSTRUCTA lpConnDlgStruct
    );
 
DWORD __stdcall
WNetDisconnectDialog1W(
      LPDISCDLGSTRUCTW lpConnDlgStruct
    );











 
DWORD __stdcall
WNetOpenEnumA(
       DWORD          dwScope,
       DWORD          dwType,
       DWORD          dwUsage,
      LPNETRESOURCEA lpNetResource,
      LPHANDLE       lphEnum
    );
 
DWORD __stdcall
WNetOpenEnumW(
       DWORD          dwScope,
       DWORD          dwType,
       DWORD          dwUsage,
      LPNETRESOURCEW lpNetResource,
      LPHANDLE       lphEnum
    );






 
DWORD __stdcall
WNetEnumResourceA(
         HANDLE  hEnum,
      LPDWORD lpcCount,
      LPVOID  lpBuffer,
      LPDWORD lpBufferSize
    );
 
DWORD __stdcall
WNetEnumResourceW(
         HANDLE  hEnum,
      LPDWORD lpcCount,
      LPVOID  lpBuffer,
      LPDWORD lpBufferSize
    );






 
DWORD __stdcall
WNetCloseEnum(
      HANDLE   hEnum
    );


 
DWORD __stdcall
WNetGetResourceParentA(
      LPNETRESOURCEA lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer
    );
 
DWORD __stdcall
WNetGetResourceParentW(
      LPNETRESOURCEW lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer
    );






 
DWORD __stdcall
WNetGetResourceInformationA(
      LPNETRESOURCEA  lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer,
     LPSTR *lplpSystem
    );
 
DWORD __stdcall
WNetGetResourceInformationW(
      LPNETRESOURCEW  lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer,
     LPWSTR *lplpSystem
    );














typedef struct  _UNIVERSAL_NAME_INFOA {
    LPSTR    lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct  _UNIVERSAL_NAME_INFOW {
    LPWSTR   lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;




typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;


typedef struct  _REMOTE_NAME_INFOA {
    LPSTR    lpUniversalName;
    LPSTR    lpConnectionName;
    LPSTR    lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct  _REMOTE_NAME_INFOW {
    LPWSTR   lpUniversalName;
    LPWSTR   lpConnectionName;
    LPWSTR   lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;




typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;


 
DWORD __stdcall
WNetGetUniversalNameA(
      LPCSTR lpLocalPath,
      DWORD    dwInfoLevel,
      LPVOID lpBuffer,
      LPDWORD lpBufferSize
    );
 
DWORD __stdcall
WNetGetUniversalNameW(
      LPCWSTR lpLocalPath,
      DWORD    dwInfoLevel,
      LPVOID lpBuffer,
      LPDWORD lpBufferSize
    );









 
DWORD __stdcall
WNetGetUserA(
      LPCSTR  lpName,
      LPSTR lpUserName,
       LPDWORD lpnLength
    );



 
DWORD __stdcall
WNetGetUserW(
      LPCWSTR  lpName,
      LPWSTR lpUserName,
       LPDWORD lpnLength
    );





















 
DWORD __stdcall
WNetGetProviderNameA(
         DWORD   dwNetType,
      LPSTR lpProviderName,
      LPDWORD lpBufferSize
    );
 
DWORD __stdcall
WNetGetProviderNameW(
         DWORD   dwNetType,
      LPWSTR lpProviderName,
      LPDWORD lpBufferSize
    );






typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD  wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT,  *LPNETINFOSTRUCT;





 
DWORD __stdcall
WNetGetNetworkInformationA(
       LPCSTR        lpProvider,
      LPNETINFOSTRUCT lpNetInfoStruct
    );
 
DWORD __stdcall
WNetGetNetworkInformationW(
       LPCWSTR        lpProvider,
      LPNETINFOSTRUCT lpNetInfoStruct
    );












 
DWORD __stdcall
WNetGetLastErrorA(
      LPDWORD    lpError,
      LPSTR lpErrorBuf,
      DWORD      nErrorBufSize,
      LPSTR  lpNameBuf,
      DWORD      nNameBufSize
    );
 
DWORD __stdcall
WNetGetLastErrorW(
      LPDWORD    lpError,
      LPWSTR lpErrorBuf,
      DWORD      nErrorBufSize,
      LPWSTR  lpNameBuf,
      DWORD      nNameBufSize
    );











































































typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT,  *LPNETCONNECTINFOSTRUCT;






 
DWORD __stdcall
MultinetGetConnectionPerformanceA(
       LPNETRESOURCEA lpNetResource,
      LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );
 
DWORD __stdcall
MultinetGetConnectionPerformanceW(
       LPNETRESOURCEW lpNetResource,
      LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );









#pragma endregion


}












































































































extern "C" {


#pragma region Desktop Family












#pragma warning(push)
#pragma warning(disable:4127)




































































LPUWSTR
__stdcall
uaw_CharUpperW(
      LPUWSTR String
    );

int
__stdcall
uaw_lstrcmpW(
      PCUWSTR String1,
      PCUWSTR String2
    );

int
__stdcall
uaw_lstrcmpiW(
      PCUWSTR String1,
      PCUWSTR String2
    );

int
__stdcall
uaw_lstrlenW(
      LPCUWSTR String
    );

PUWSTR
__cdecl
uaw_wcschr(
      PCUWSTR String,
      WCHAR   Character
    );

PUWSTR
__cdecl
uaw_wcscpy(
      PUWSTR  Destination,
       PCUWSTR Source
    );

int
__cdecl
uaw_wcsicmp(
      PCUWSTR String1,
      PCUWSTR String2
    );

size_t
__cdecl
uaw_wcslen(
      PCUWSTR String
    );

PUWSTR
__cdecl
uaw_wcsrchr(
      PCUWSTR String,
      WCHAR   Character
    );









__inline
LPUWSTR
static
ua_CharUpperW(
      LPUWSTR String
    )
{
    if (1) {
        return CharUpperW( (PWSTR)String );
    } else {
        return uaw_CharUpperW( String );
    }
}



__inline
int
static
ua_lstrcmpW(
      LPCUWSTR String1,
      LPCUWSTR String2
    )
{
    if (1 && 1) {
        return lstrcmpW( (LPCWSTR)String1, (LPCWSTR)String2);
    } else {
        return uaw_lstrcmpW( String1, String2 );
    }
}



__inline
int
static
ua_lstrcmpiW(
      LPCUWSTR String1,
      LPCUWSTR String2
    )
{
    if (1 && 1) {
        return lstrcmpiW( (LPCWSTR)String1, (LPCWSTR)String2 );
    } else {
        return uaw_lstrcmpiW( String1, String2 );
    }
}



__inline
int
static
ua_lstrlenW(
      LPCUWSTR String
    )
{
    if (1) {
#pragma warning(suppress: 28750) 
        return lstrlenW( (PCWSTR)String );
    } else {
        return uaw_lstrlenW( String );
    }
}





























































































































































































__inline
int
static
ua_wcsicmp(
      PCUWSTR String1,
      PCUWSTR String2
    )
{
    if (1 && 1) {
        return _wcsicmp( (LPCWSTR)String1, (LPCWSTR)String2 );
    } else {
        return uaw_wcsicmp( String1, String2 );
    }
}




























































































































































































#pragma warning(pop)



#pragma endregion


}




























































extern "C" {


#pragma region Desktop Family



















































































































































































































































































































extern "C" const GUID  NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID;

extern "C" const GUID  NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID;




extern "C" const GUID  DOMAIN_JOIN_GUID;

extern "C" const GUID  DOMAIN_LEAVE_GUID;





extern "C" const GUID  FIREWALL_PORT_OPEN_GUID;

extern "C" const GUID  FIREWALL_PORT_CLOSE_GUID;





extern "C" const GUID  MACHINE_POLICY_PRESENT_GUID;

extern "C" const GUID  USER_POLICY_PRESENT_GUID;





extern "C" const GUID  RPC_INTERFACE_EVENT_GUID;

extern "C" const GUID  NAMED_PIPE_EVENT_GUID;




extern "C" const GUID  CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID;
  



typedef struct
{
    DWORD Data[2];
} SERVICE_TRIGGER_CUSTOM_STATE_ID;

typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
    union {
        SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
        struct {
            DWORD DataOffset;
            BYTE Data[1];
        } s;
    } u;
} SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM, *LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
















typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR       lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;



typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR      lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;




typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;





typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE          = 0,
        SC_ACTION_RESTART       = 1,
        SC_ACTION_REBOOT        = 2,
        SC_ACTION_RUN_COMMAND   = 3
} SC_ACTION_TYPE;

typedef struct _SC_ACTION {
    SC_ACTION_TYPE  Type;
    DWORD           Delay;
} SC_ACTION, *LPSC_ACTION;

typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD       dwResetPeriod;
    LPSTR       lpRebootMsg;
    LPSTR       lpCommand;



    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD       dwResetPeriod;
    LPWSTR      lpRebootMsg;
    LPWSTR      lpCommand;



    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;




typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;





typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
    BOOL       fDelayedAutostart;      
} SERVICE_DELAYED_AUTO_START_INFO, *LPSERVICE_DELAYED_AUTO_START_INFO;




typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
    BOOL       fFailureActionsOnNonCrashFailures;       
} SERVICE_FAILURE_ACTIONS_FLAG, *LPSERVICE_FAILURE_ACTIONS_FLAG;




typedef struct _SERVICE_SID_INFO {
    DWORD       dwServiceSidType;     
} SERVICE_SID_INFO, *LPSERVICE_SID_INFO;




typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
    LPSTR       pmszRequiredPrivileges;             
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;



typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
    LPWSTR      pmszRequiredPrivileges;             
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;




typedef SERVICE_REQUIRED_PRIVILEGES_INFOA SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOA LPSERVICE_REQUIRED_PRIVILEGES_INFO;





typedef struct _SERVICE_PRESHUTDOWN_INFO {
    DWORD       dwPreshutdownTimeout;   
} SERVICE_PRESHUTDOWN_INFO, *LPSERVICE_PRESHUTDOWN_INFO;




typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
    DWORD   dwDataType; 



    DWORD   cbData;     



    PBYTE   pData;      
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;




typedef struct _SERVICE_TRIGGER
{
    DWORD                       dwTriggerType;              
    DWORD                       dwAction;                   
    GUID    *                   pTriggerSubtype;            
                                                            
                                                            



    DWORD                       cDataItems;                 



    PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM  pDataItems;       
} SERVICE_TRIGGER, *PSERVICE_TRIGGER;




typedef struct _SERVICE_TRIGGER_INFO {



    DWORD                   cTriggers;  



    PSERVICE_TRIGGER        pTriggers;  
    PBYTE                   pReserved;  
} SERVICE_TRIGGER_INFO, *PSERVICE_TRIGGER_INFO;




typedef struct _SERVICE_PREFERRED_NODE_INFO {
    USHORT                  usPreferredNode;    
    BOOLEAN                 fDelete;            
} SERVICE_PREFERRED_NODE_INFO, *LPSERVICE_PREFERRED_NODE_INFO;




typedef struct _SERVICE_TIMECHANGE_INFO {
    LARGE_INTEGER   liNewTime;      
    LARGE_INTEGER   liOldTime;      
} SERVICE_TIMECHANGE_INFO, *PSERVICE_TIMECHANGE_INFO;




typedef struct _SERVICE_LAUNCH_PROTECTED_INFO {
    DWORD       dwLaunchProtected;     
} SERVICE_LAUNCH_PROTECTED_INFO, *PSERVICE_LAUNCH_PROTECTED_INFO;





struct SC_HANDLE__{int unused;}; typedef struct SC_HANDLE__ *SC_HANDLE;
typedef SC_HANDLE   *LPSC_HANDLE;

struct SERVICE_STATUS_HANDLE__{int unused;}; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;





typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO      = 0
} SC_STATUS_TYPE;




typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO        = 0
} SC_ENUM_TYPE;






typedef struct _SERVICE_STATUS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;

typedef struct _SERVICE_STATUS_PROCESS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
    DWORD   dwProcessId;
    DWORD   dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;






typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR             lpServiceName;
    LPSTR             lpDisplayName;
    SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR            lpServiceName;
    LPWSTR            lpDisplayName;
    SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;




typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;


typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR                     lpServiceName;
    LPSTR                     lpDisplayName;
    SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR                    lpServiceName;
    LPWSTR                    lpDisplayName;
    SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;




typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;






typedef LPVOID  SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD   fIsLocked;
    LPSTR   lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD   fIsLocked;
    LPWSTR  lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;




typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;








typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPSTR   lpBinaryPathName;
    LPSTR   lpLoadOrderGroup;
    DWORD   dwTagId;
    LPSTR   lpDependencies;
    LPSTR   lpServiceStartName;
    LPSTR   lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPWSTR  lpBinaryPathName;
    LPWSTR  lpLoadOrderGroup;
    DWORD   dwTagId;
    LPWSTR  lpDependencies;
    LPWSTR  lpServiceStartName;
    LPWSTR  lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;




typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;








typedef void __stdcall SERVICE_MAIN_FUNCTIONW (
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors
    );

typedef void __stdcall SERVICE_MAIN_FUNCTIONA (
    DWORD dwNumServicesArgs,
    LPTSTR *lpServiceArgVectors
    );







typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD   dwNumServicesArgs,
    LPWSTR  *lpServiceArgVectors
    );

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD   dwNumServicesArgs,
    LPSTR   *lpServiceArgVectors
    );












typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR                       lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA    lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR                      lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW    lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;




typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;






typedef void __stdcall HANDLER_FUNCTION (
    DWORD    dwControl
    );

typedef DWORD __stdcall HANDLER_FUNCTION_EX (
    DWORD    dwControl,
    DWORD    dwEventType,
    LPVOID   lpEventData,
    LPVOID   lpContext
    );

typedef void (__stdcall *LPHANDLER_FUNCTION)(
    DWORD    dwControl
    );

typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)(
    DWORD    dwControl,
    DWORD    dwEventType,
    LPVOID   lpEventData,
    LPVOID   lpContext
    );




typedef
void
( __stdcall * PFN_SC_NOTIFY_CALLBACK ) (
      PVOID pParameter
    );




typedef struct _SERVICE_NOTIFY_1 {
    DWORD                   dwVersion;
    PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
    PVOID                   pContext;
    DWORD                   dwNotificationStatus;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1;

typedef struct _SERVICE_NOTIFY_2A {
    DWORD                   dwVersion;
    PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
    PVOID                   pContext;
    DWORD                   dwNotificationStatus;
    SERVICE_STATUS_PROCESS  ServiceStatus;
    DWORD                   dwNotificationTriggered;
    LPSTR                   pszServiceNames;
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A;
typedef struct _SERVICE_NOTIFY_2W {
    DWORD                   dwVersion;
    PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
    PVOID                   pContext;
    DWORD                   dwNotificationStatus;
    SERVICE_STATUS_PROCESS  ServiceStatus;
    DWORD                   dwNotificationTriggered;
    LPWSTR                  pszServiceNames;
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W;




typedef SERVICE_NOTIFY_2A SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2A PSERVICE_NOTIFY_2;


typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, *PSERVICE_NOTIFYA;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, *PSERVICE_NOTIFYW;




typedef SERVICE_NOTIFYA SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYA PSERVICE_NOTIFY;





typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
    DWORD                   dwReason;
    LPSTR                   pszComment;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;



typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
    DWORD                   dwReason;
    LPWSTR                  pszComment;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;




typedef SERVICE_CONTROL_STATUS_REASON_PARAMSA SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSA PSERVICE_CONTROL_STATUS_REASON_PARAMS;





typedef struct _SERVICE_START_REASON {
    DWORD                   dwReason;
} SERVICE_START_REASON, *PSERVICE_START_REASON;





__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigA(
             SC_HANDLE    hService,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCSTR     lpBinaryPathName,
         LPCSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCSTR     lpDependencies,
         LPCSTR     lpServiceStartName,
         LPCSTR     lpPassword,
         LPCSTR     lpDisplayName
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigW(
             SC_HANDLE    hService,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCWSTR     lpBinaryPathName,
         LPCWSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCWSTR     lpDependencies,
         LPCWSTR     lpServiceStartName,
         LPCWSTR     lpPassword,
         LPCWSTR     lpDisplayName
    );






__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2A(
             SC_HANDLE    hService,
             DWORD        dwInfoLevel,
         LPVOID       lpInfo
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2W(
             SC_HANDLE    hService,
             DWORD        dwInfoLevel,
         LPVOID       lpInfo
    );






__declspec(dllimport)
BOOL
__stdcall
CloseServiceHandle(
             SC_HANDLE   hSCObject
    );

__declspec(dllimport)
BOOL
__stdcall
ControlService(
             SC_HANDLE           hService,
             DWORD               dwControl,
            LPSERVICE_STATUS    lpServiceStatus
    );

 
__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceA(
             SC_HANDLE    hSCManager,
             LPCSTR     lpServiceName,
         LPCSTR     lpDisplayName,
             DWORD        dwDesiredAccess,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCSTR     lpBinaryPathName,
         LPCSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCSTR     lpDependencies,
         LPCSTR     lpServiceStartName,
         LPCSTR     lpPassword
    );
 
__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceW(
             SC_HANDLE    hSCManager,
             LPCWSTR     lpServiceName,
         LPCWSTR     lpDisplayName,
             DWORD        dwDesiredAccess,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCWSTR     lpBinaryPathName,
         LPCWSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCWSTR     lpDependencies,
         LPCWSTR     lpServiceStartName,
         LPCWSTR     lpPassword
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteService(
             SC_HANDLE   hService
    );

 
__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesA(
                 SC_HANDLE               hService,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSA  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned
    );
 
__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesW(
                 SC_HANDLE               hService,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSW  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned
    );






 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusA(
                 SC_HANDLE               hSCManager,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSA  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle
    );
 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusW(
                 SC_HANDLE               hSCManager,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSW  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle
    );






 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExA(
                 SC_HANDLE               hSCManager,
                 SC_ENUM_TYPE            InfoLevel,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPBYTE                  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle,
             LPCSTR                pszGroupName
    );
 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExW(
                 SC_HANDLE               hSCManager,
                 SC_ENUM_TYPE            InfoLevel,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPBYTE                  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle,
             LPCWSTR                pszGroupName
    );






 
__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameA(
                 SC_HANDLE               hSCManager,
                 LPCSTR                lpDisplayName,
     
                    LPSTR                 lpServiceName,
              LPDWORD                 lpcchBuffer
    );
 
__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameW(
                 SC_HANDLE               hSCManager,
                 LPCWSTR                lpDisplayName,
     
                    LPWSTR                 lpServiceName,
              LPDWORD                 lpcchBuffer
    );






 
__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameA(
                 SC_HANDLE               hSCManager,
                 LPCSTR                lpServiceName,
     
                    LPSTR                 lpDisplayName,
              LPDWORD                 lpcchBuffer
    );
 
__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameW(
                 SC_HANDLE               hSCManager,
                 LPCWSTR                lpServiceName,
     
                    LPWSTR                 lpDisplayName,
              LPDWORD                 lpcchBuffer
    );






__declspec(dllimport)
SC_LOCK
__stdcall
LockServiceDatabase(
                 SC_HANDLE               hSCManager
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyBootConfigStatus(
                 BOOL                    BootAcceptable
    );

 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerA(
             LPCSTR                lpMachineName,
             LPCSTR                lpDatabaseName,
                 DWORD                   dwDesiredAccess
    );
 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerW(
             LPCWSTR                lpMachineName,
             LPCWSTR                lpDatabaseName,
                 DWORD                   dwDesiredAccess
    );






 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceA(
                 SC_HANDLE               hSCManager,
                 LPCSTR                lpServiceName,
                 DWORD                   dwDesiredAccess
    );
 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceW(
                 SC_HANDLE               hSCManager,
                 LPCWSTR                lpServiceName,
                 DWORD                   dwDesiredAccess
    );






 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigA(
                 SC_HANDLE               hService,
     
                    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigW(
                 SC_HANDLE               hService,
     
                    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );









 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2A(
                 SC_HANDLE               hService,
                 DWORD                   dwInfoLevel,
     
                    LPBYTE                  lpBuffer,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );



 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2W(
                 SC_HANDLE               hService,
                 DWORD                   dwInfoLevel,
     
                    LPBYTE                  lpBuffer,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );






 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusA(
                 SC_HANDLE                       hSCManager,
     
                    LPQUERY_SERVICE_LOCK_STATUSA    lpLockStatus,
                 DWORD                           cbBufSize,
                LPDWORD                         pcbBytesNeeded
    );
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusW(
                 SC_HANDLE                       hSCManager,
     
                    LPQUERY_SERVICE_LOCK_STATUSW    lpLockStatus,
                 DWORD                           cbBufSize,
                LPDWORD                         pcbBytesNeeded
    );






 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceObjectSecurity(
                 SC_HANDLE               hService,
                 SECURITY_INFORMATION    dwSecurityInformation,
     
                    PSECURITY_DESCRIPTOR    lpSecurityDescriptor,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatus(
                 SC_HANDLE           hService,
                LPSERVICE_STATUS    lpServiceStatus
    );

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatusEx(
                 SC_HANDLE           hService,
                 SC_STATUS_TYPE      InfoLevel,
     
                    LPBYTE              lpBuffer,
                 DWORD               cbBufSize,
                LPDWORD             pcbBytesNeeded
    );

 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
         LPCSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION          lpHandlerProc
    );
 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
         LPCWSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION          lpHandlerProc
    );






 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExA(
         LPCSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION_EX       lpHandlerProc,
      LPVOID                     lpContext
    );
 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExW(
         LPCWSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION_EX       lpHandlerProc,
      LPVOID                     lpContext
    );






__declspec(dllimport)
BOOL
__stdcall
SetServiceObjectSecurity(
             SC_HANDLE               hService,
             SECURITY_INFORMATION    dwSecurityInformation,
             PSECURITY_DESCRIPTOR    lpSecurityDescriptor
    );

__declspec(dllimport)
BOOL
__stdcall
SetServiceStatus(
             SERVICE_STATUS_HANDLE   hServiceStatus,
             LPSERVICE_STATUS        lpServiceStatus
    );

__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherA(
      const  SERVICE_TABLE_ENTRYA    *lpServiceStartTable
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherW(
      const  SERVICE_TABLE_ENTRYW    *lpServiceStartTable
    );







__declspec(dllimport)
BOOL
__stdcall
StartServiceA(
                 SC_HANDLE            hService,
                 DWORD                dwNumServiceArgs,
     
                    LPCSTR             *lpServiceArgVectors
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceW(
                 SC_HANDLE            hService,
                 DWORD                dwNumServiceArgs,
     
                    LPCWSTR             *lpServiceArgVectors
    );






__declspec(dllimport)
BOOL
__stdcall
UnlockServiceDatabase(
                 SC_LOCK             ScLock
    );



__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeA (
             SC_HANDLE               hService,
             DWORD                   dwNotifyMask,
             PSERVICE_NOTIFYA        pNotifyBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeW (
             SC_HANDLE               hService,
             DWORD                   dwNotifyMask,
             PSERVICE_NOTIFYW        pNotifyBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
ControlServiceExA(
             SC_HANDLE               hService,
             DWORD                   dwControl,
             DWORD                   dwInfoLevel,
          PVOID                   pControlParams
    );
__declspec(dllimport)
BOOL
__stdcall
ControlServiceExW(
             SC_HANDLE               hService,
             DWORD                   dwControl,
             DWORD                   dwInfoLevel,
          PVOID                   pControlParams
    );






__declspec(dllimport)
BOOL
__stdcall
QueryServiceDynamicInformation (
             SERVICE_STATUS_HANDLE   hServiceStatus,
             DWORD                   dwInfoLevel,
        PVOID           *       ppDynamicInfo
    );




#pragma endregion


}























#pragma once


typedef struct _MODEMDEVCAPS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwModemProviderVersion;
    DWORD   dwModemManufacturerOffset;
    DWORD   dwModemManufacturerSize;
    DWORD   dwModemModelOffset;
    DWORD   dwModemModelSize;
    DWORD   dwModemVersionOffset;
    DWORD   dwModemVersionSize;

    
    DWORD   dwDialOptions;          
    DWORD   dwCallSetupFailTimer;   
    DWORD   dwInactivityTimeout;    
    DWORD   dwSpeakerVolume;        
    DWORD   dwSpeakerMode;          
    DWORD   dwModemOptions;         
    DWORD   dwMaxDTERate;           
    DWORD   dwMaxDCERate;           

    
    BYTE    abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwCallSetupFailTimer;       
    DWORD   dwInactivityTimeout;        
    DWORD   dwSpeakerVolume;            
    DWORD   dwSpeakerMode;              
    DWORD   dwPreferredModemOptions;    

    
    DWORD   dwNegotiatedModemOptions;   
    DWORD   dwNegotiatedDCERate;        

    
    BYTE    abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;




































































































































































































































































































































































































































































































































































































































































































extern "C" {







#pragma region Application Family



struct HIMC__{int unused;}; typedef struct HIMC__ *HIMC;
struct HIMCC__{int unused;}; typedef struct HIMCC__ *HIMCC;






#pragma endregion

#pragma region Desktop Family


typedef HKL   *LPHKL;
typedef UINT  *LPUINT;


#pragma endregion

#pragma region Application Family


typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM,  *NPCOMPOSITIONFORM,  *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM,  *NPCANDIDATEFORM,  *LPCANDIDATEFORM;


#pragma endregion



#pragma region Desktop Family


typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST,  *NPCANDIDATELIST,  *LPCANDIDATELIST;


#pragma endregion


#pragma region Application Family


typedef struct tagREGISTERWORDA {
    LPSTR   lpReading;
    LPSTR   lpWord;
} REGISTERWORDA, *PREGISTERWORDA,  *NPREGISTERWORDA,  *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR  lpReading;
    LPWSTR  lpWord;
} REGISTERWORDW, *PREGISTERWORDW,  *NPREGISTERWORDW,  *LPREGISTERWORDW;






typedef REGISTERWORDA REGISTERWORD;
typedef PREGISTERWORDA PREGISTERWORD;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef LPREGISTERWORDA LPREGISTERWORD;



#pragma endregion



#pragma region Desktop Family


typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
} RECONVERTSTRING, *PRECONVERTSTRING,  *NPRECONVERTSTRING,  *LPRECONVERTSTRING;


#pragma endregion





#pragma region Application Family


typedef struct tagSTYLEBUFA {
    DWORD       dwStyle;
    CHAR        szDescription[32];
} STYLEBUFA, *PSTYLEBUFA,  *NPSTYLEBUFA,  *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD       dwStyle;
    WCHAR       szDescription[32];
} STYLEBUFW, *PSTYLEBUFW,  *NPSTYLEBUFW,  *LPSTYLEBUFW;






typedef STYLEBUFA STYLEBUF;
typedef PSTYLEBUFA PSTYLEBUF;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;



#pragma endregion

#pragma region Desktop Family




#pragma endregion





#pragma region Desktop Family


typedef struct tagIMEMENUITEMINFOA {
    UINT        cbSize;
    UINT        fType;
    UINT        fState;
    UINT        wID;
    HBITMAP     hbmpChecked;
    HBITMAP     hbmpUnchecked;
    DWORD       dwItemData;
    CHAR        szString[80];
    HBITMAP     hbmpItem;
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA,  *NPIMEMENUITEMINFOA,  *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
    UINT        cbSize;
    UINT        fType;
    UINT        fState;
    UINT        wID;
    HBITMAP     hbmpChecked;
    HBITMAP     hbmpUnchecked;
    DWORD       dwItemData;
    WCHAR       szString[80];
    HBITMAP     hbmpItem;
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW,  *NPIMEMENUITEMINFOW,  *LPIMEMENUITEMINFOW;






typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;


typedef struct tagIMECHARPOSITION {
    DWORD       dwSize;
    DWORD       dwCharPos;
    POINT       pt;
    UINT        cLineHeight;
    RECT        rcDocument;
} IMECHARPOSITION, *PIMECHARPOSITION,  *NPIMECHARPOSITION,  *LPIMECHARPOSITION;

typedef BOOL    (__stdcall* IMCENUMPROC)(HIMC, LPARAM);


#pragma endregion







#pragma region Desktop Family


HKL  __stdcall ImmInstallIMEA(  LPCSTR lpszIMEFileName,   LPCSTR lpszLayoutText);
HKL  __stdcall ImmInstallIMEW(  LPCWSTR lpszIMEFileName,   LPCWSTR lpszLayoutText);






HWND __stdcall ImmGetDefaultIMEWnd( HWND);

UINT __stdcall ImmGetDescriptionA( HKL,   LPSTR lpszDescription,  UINT uBufLen);
UINT __stdcall ImmGetDescriptionW( HKL,   LPWSTR lpszDescription,  UINT uBufLen);






UINT __stdcall ImmGetIMEFileNameA( HKL,   LPSTR lpszFileName,  UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW( HKL,   LPWSTR lpszFileName,  UINT uBufLen);






DWORD __stdcall ImmGetProperty( HKL,  DWORD);

BOOL __stdcall ImmIsIME( HKL);

BOOL __stdcall ImmSimulateHotKey( HWND,  DWORD);

HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext( HIMC);
HIMC __stdcall ImmGetContext( HWND);
BOOL __stdcall ImmReleaseContext( HWND,  HIMC);
HIMC __stdcall ImmAssociateContext( HWND,  HIMC);

BOOL __stdcall ImmAssociateContextEx( HWND,  HIMC,  DWORD);


LONG  __stdcall ImmGetCompositionStringA( HIMC,  DWORD,   LPVOID lpBuf,  DWORD dwBufLen);
LONG  __stdcall ImmGetCompositionStringW( HIMC,  DWORD,   LPVOID lpBuf,  DWORD dwBufLen);






BOOL  __stdcall ImmSetCompositionStringA( HIMC,  DWORD dwIndex,   LPVOID lpComp,  DWORD dwCompLen,   LPVOID lpRead,  DWORD dwReadLen);
BOOL  __stdcall ImmSetCompositionStringW( HIMC,  DWORD dwIndex,   LPVOID lpComp,  DWORD dwCompLen,   LPVOID lpRead,  DWORD dwReadLen);






DWORD __stdcall ImmGetCandidateListCountA( HIMC,   LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW( HIMC,   LPDWORD lpdwListCount);






DWORD __stdcall ImmGetCandidateListA( HIMC,  DWORD deIndex,   LPCANDIDATELIST lpCandList,  DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW( HIMC,  DWORD deIndex,   LPCANDIDATELIST lpCandList,  DWORD dwBufLen);






DWORD __stdcall ImmGetGuideLineA(  HIMC,   DWORD dwIndex,   LPSTR lpBuf,   DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW(  HIMC,   DWORD dwIndex,   LPWSTR lpBuf,   DWORD dwBufLen);






BOOL __stdcall ImmGetConversionStatus( HIMC,   LPDWORD lpfdwConversion,   LPDWORD lpfdwSentence);
BOOL __stdcall ImmSetConversionStatus( HIMC,  DWORD,  DWORD);
BOOL __stdcall ImmGetOpenStatus( HIMC);
BOOL __stdcall ImmSetOpenStatus( HIMC,  BOOL);


BOOL __stdcall ImmGetCompositionFontA( HIMC,   LPLOGFONTA lplf);
BOOL __stdcall ImmGetCompositionFontW( HIMC,   LPLOGFONTW lplf);






BOOL __stdcall ImmSetCompositionFontA( HIMC,   LPLOGFONTA lplf);
BOOL __stdcall ImmSetCompositionFontW( HIMC,   LPLOGFONTW lplf);







BOOL    __stdcall ImmConfigureIMEA( HKL,  HWND,  DWORD,  LPVOID);
BOOL    __stdcall ImmConfigureIMEW( HKL,  HWND,  DWORD,  LPVOID);






LRESULT __stdcall ImmEscapeA( HKL,  HIMC,  UINT,  LPVOID);
LRESULT __stdcall ImmEscapeW( HKL,  HIMC,  UINT,  LPVOID);






DWORD   __stdcall ImmGetConversionListA( HKL,  HIMC,   LPCSTR lpSrc,   LPCANDIDATELIST lpDst,  DWORD dwBufLen,  UINT uFlag);
DWORD   __stdcall ImmGetConversionListW( HKL,  HIMC,   LPCWSTR lpSrc,   LPCANDIDATELIST lpDst,  DWORD dwBufLen,  UINT uFlag);






BOOL    __stdcall ImmNotifyIME( HIMC,  DWORD dwAction,  DWORD dwIndex,  DWORD dwValue);

BOOL __stdcall ImmGetStatusWindowPos( HIMC,   LPPOINT lpptPos);
BOOL __stdcall ImmSetStatusWindowPos( HIMC,   LPPOINT lpptPos);
BOOL __stdcall ImmGetCompositionWindow( HIMC,   LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmSetCompositionWindow( HIMC,   LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmGetCandidateWindow( HIMC,  DWORD,   LPCANDIDATEFORM lpCandidate);
BOOL __stdcall ImmSetCandidateWindow( HIMC,   LPCANDIDATEFORM lpCandidate);

BOOL __stdcall ImmIsUIMessageA( HWND,  UINT,  WPARAM,  LPARAM);
BOOL __stdcall ImmIsUIMessageW( HWND,  UINT,  WPARAM,  LPARAM);







UINT __stdcall ImmGetVirtualKey( HWND);

typedef int (__stdcall *REGISTERWORDENUMPROCA)(  LPCSTR lpszReading, DWORD,   LPCSTR lpszString, LPVOID);
typedef int (__stdcall *REGISTERWORDENUMPROCW)(  LPCWSTR lpszReading, DWORD,   LPCWSTR lpszString, LPVOID);






BOOL __stdcall ImmRegisterWordA( HKL,   LPCSTR lpszReading,  DWORD,   LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW( HKL,   LPCWSTR lpszReading,  DWORD,   LPCWSTR lpszRegister);






BOOL __stdcall ImmUnregisterWordA( HKL,   LPCSTR lpszReading,  DWORD,   LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW( HKL,   LPCWSTR lpszReading,  DWORD,   LPCWSTR lpszUnregister);






UINT __stdcall ImmGetRegisterWordStyleA( HKL,  UINT nItem,   LPSTYLEBUFA lpStyleBuf);
UINT __stdcall ImmGetRegisterWordStyleW( HKL,  UINT nItem,   LPSTYLEBUFW lpStyleBuf);






UINT __stdcall ImmEnumRegisterWordA( HKL,  REGISTERWORDENUMPROCA,   LPCSTR lpszReading,  DWORD,   LPCSTR lpszRegister,  LPVOID);
UINT __stdcall ImmEnumRegisterWordW( HKL,  REGISTERWORDENUMPROCW,   LPCWSTR lpszReading,  DWORD,   LPCWSTR lpszRegister,  LPVOID);







BOOL __stdcall ImmDisableIME( DWORD);
BOOL __stdcall ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD __stdcall ImmGetImeMenuItemsA( HIMC,  DWORD,  DWORD,   LPIMEMENUITEMINFOA lpImeParentMenu,   LPIMEMENUITEMINFOA lpImeMenu,  DWORD dwSize);
DWORD __stdcall ImmGetImeMenuItemsW( HIMC,  DWORD,  DWORD,   LPIMEMENUITEMINFOW lpImeParentMenu,   LPIMEMENUITEMINFOW lpImeMenu,  DWORD dwSize);






BOOL __stdcall ImmDisableTextFrameService(DWORD idThread);



BOOL __stdcall ImmDisableLegacyIME();



#pragma endregion













































































































































































































#pragma once





























































































































































}













#pragma warning(pop)












#pragma endregion































































#pragma once









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#pragma once





__pragma(pack(push, 8)) extern "C" {








typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long       tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long       tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;  
        long   tv_nsec; 
    };

















  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_daylight" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int* __cdecl __daylight(void);




  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_dstbias" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) long* __cdecl __dstbias(void);




  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_timezone" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) long* __cdecl __timezone(void);




    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_tzname" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char** __cdecl __tzname(void);



  
__declspec(dllimport) errno_t __cdecl _get_daylight(
      int* _Daylight
    );

 
__declspec(dllimport) errno_t __cdecl _get_dstbias(
      long* _DaylightSavingsBias
    );

  
__declspec(dllimport) errno_t __cdecl _get_timezone(
      long* _TimeZone
    );

 
__declspec(dllimport) errno_t __cdecl _get_tzname(
                             size_t* _ReturnValue,
      char*   _Buffer,
                              size_t  _SizeInBytes,
                              int     _Index
    );








 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "asctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl asctime(
      struct tm const* _Tm
    );


     
    
    __declspec(dllimport) errno_t __cdecl asctime_s(
            char*            _Buffer,
                                            size_t           _SizeInBytes,
                                                         struct tm const* _Tm
        );


extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(  char (&_Buffer)[_Size],   struct tm const* _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }

 
__declspec(dllimport) clock_t __cdecl clock(void);

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ctime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime32_s(
        char*             _Buffer,
                                        size_t            _SizeInBytes,
                                                     __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(  char (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ctime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime64_s(
        char*             _Buffer,
                                          size_t            _SizeInBytes,
                                                       __time64_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(  char (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }

 
__declspec(dllimport) double __cdecl _difftime32(
      __time32_t _Time1,
      __time32_t _Time2
    );

 
__declspec(dllimport) double __cdecl _difftime64(
      __time64_t _Time1,
      __time64_t _Time2
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _gmtime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _gmtime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _localtime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _localtime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
__declspec(dllimport) __time32_t __cdecl _mkgmtime32(
      struct tm* _Tm
    );

 
__declspec(dllimport) __time64_t __cdecl _mkgmtime64(
      struct tm* _Tm
    );


__declspec(dllimport) __time32_t __cdecl _mktime32(
      struct tm* _Tm
    );


__declspec(dllimport) __time64_t __cdecl _mktime64(
      struct tm* _Tm
    );

 

__declspec(dllimport) size_t __cdecl strftime(
       char*            _Buffer,
                               size_t           _SizeInBytes,
        char const*      _Format,
                               struct tm const* _Tm
    );

 

__declspec(dllimport) size_t __cdecl _strftime_l(
           char*            _Buffer,
                               size_t           _MaxSize,
        char const*      _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );


__declspec(dllimport) errno_t __cdecl _strdate_s(
        char*  _Buffer,
                                    size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(  char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  char* __cdecl _strdate( char *_Buffer);


__declspec(dllimport) errno_t __cdecl _strtime_s(
        char*  _Buffer,
                                    size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(  char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strtime( char *_Buffer);

__declspec(dllimport) __time32_t __cdecl _time32(
      __time32_t* _Time
    );

__declspec(dllimport) __time64_t __cdecl _time64(
      __time64_t* _Time
    );

 
 
__declspec(dllimport) int __cdecl _timespec32_get(
      struct _timespec32* _Ts,
       int                 _Base
    );

 
 
__declspec(dllimport) int __cdecl _timespec64_get(
      struct _timespec64* _Ts,
       int                 _Base
    );










    __declspec(dllimport) void __cdecl _tzset(void);

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _getsystime(
          struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _setsystime(
          struct tm* _Tm,
          unsigned   _Milliseconds
        );












    











































































































          __declspec(deprecated("This function or variable may be unsafe. Consider using " "ctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline char* __cdecl ctime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _ctime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline double __cdecl difftime(
              time_t const _Time1,
              time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }

          __declspec(deprecated("This function or variable may be unsafe. Consider using " "gmtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl gmtime(
              time_t const* const _Time)
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _gmtime64(_Time);
            #pragma warning(pop)
        }

        __declspec(deprecated("This function or variable may be unsafe. Consider using " "localtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl localtime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _localtime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline time_t __cdecl _mkgmtime(
              struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }

        
        static __inline time_t __cdecl mktime(
              struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
              time_t* const _Time
            )
        {
            return _time64(_Time);
        }

         
        static __inline int __cdecl timespec_get(
              struct timespec* const _Ts,
               int              const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base); 
        }

        
            
            static __inline errno_t __cdecl ctime_s(
                    char*         const _Buffer,
                                                    size_t        const _SizeInBytes,
                                                                 time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }

            
            static __inline errno_t __cdecl gmtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }

            
            static __inline errno_t __cdecl localtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
        

    












    

    
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tzset" ". See online help for details.")) __declspec(dllimport) void __cdecl tzset(void);
    





} __pragma(pack(pop))





















#pragma once











#pragma once




__pragma(pack(push, 8)) extern "C" {












    
    


struct _finddata32_t
{
    unsigned    attrib;
    __time32_t  time_create;    
    __time32_t  time_access;    
    __time32_t  time_write;
    _fsize_t    size;
    char        name[260];
};

struct _finddata32i64_t
{
    unsigned    attrib;
    __time32_t  time_create;    
    __time32_t  time_access;    
    __time32_t  time_write;
    __int64     size;
    char        name[260];
};

struct _finddata64i32_t
{
    unsigned    attrib;
    __time64_t  time_create;    
    __time64_t  time_access;    
    __time64_t  time_write;
    _fsize_t    size;
    char        name[260];
};

struct __finddata64_t
{
    unsigned    attrib;
    __time64_t  time_create;    
    __time64_t  time_access;    
    __time64_t  time_write;
    __int64     size;
    char        name[260];
};





























    
    
    
    


 
__declspec(dllimport) int __cdecl _access(
      char const* _FileName,
        int         _AccessMode
    );


__declspec(dllimport) errno_t __cdecl _access_s(
      char const* _FileName,
        int         _AccessMode
    );

 
__declspec(dllimport) int __cdecl _chmod(
      char const* _FileName,
        int         _Mode
    );

 
__declspec(dllimport) int __cdecl _chsize(
      int  _FileHandle,
      long _Size
    );


__declspec(dllimport) errno_t __cdecl _chsize_s(
      int     _FileHandle,
      __int64 _Size
    );


__declspec(dllimport) int __cdecl _close(
      int _FileHandle
    );


__declspec(dllimport) int __cdecl _commit(
      int _FileHandle
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _creat(
      char const* _FileName,
        int         _PermissionMode
    );

 
__declspec(dllimport) int __cdecl _dup(
      int _FileHandle
    );

 
__declspec(dllimport) int __cdecl _dup2(
      int _FileHandleSrc,
      int _FileHandleDst
    );

 
__declspec(dllimport) int __cdecl _eof(
      int _FileHandle
    );

 
__declspec(dllimport) long __cdecl _filelength(
      int _FileHandle
    );

 
 
__declspec(dllimport) intptr_t __cdecl _findfirst32(
      char const*           _FileName,
       struct _finddata32_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _findnext32(
       intptr_t              _FindHandle,
      struct _finddata32_t* _FindData
    );


__declspec(dllimport) int __cdecl _findclose(
      intptr_t _FindHandle
    );

__declspec(dllimport) intptr_t __cdecl _get_osfhandle(
          int _FileHandle
        );

 
__declspec(dllimport) int __cdecl _isatty(
      int _FileHandle
    );

__declspec(dllimport) int __cdecl _locking(
          int  _FileHandle,
          int  _LockMode,
          long _NumOfBytes
        );


__declspec(dllimport) long __cdecl _lseek(
      int  _FileHandle,
      long _Offset,
      int  _Origin
    );

 

__declspec(dllimport) errno_t __cdecl _mktemp_s(
      char*  _TemplateName,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mktemp_s(  char (&_TemplateName)[_Size]) throw() { return _mktemp_s(_TemplateName, _Size); } }

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_mktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char * __cdecl _mktemp( char *_TemplateName);

__declspec(dllimport) int __cdecl _open_osfhandle(
      intptr_t _OSFileHandle,
      int      _Flags
    );


     
     
    __declspec(dllimport) int __cdecl _pipe(
             int*         _PtHandles,
                        unsigned int _PipeSize,
                        int          _TextMode
        );


 
 
__declspec(dllimport) int __cdecl _read(
                                   int          _FileHandle,
      void*        _DstBuf,
                                   unsigned int _MaxCharCount
    );

__declspec(dllimport) int __cdecl remove(
      char const* _FileName
    );

 
__declspec(dllimport) int __cdecl rename(
      char const* _OldFilename,
      char const* _NewFilename
    );

__declspec(dllimport) int __cdecl _unlink(
      char const* _FileName
    );

 
__declspec(dllimport) int __cdecl _setmode(
      int _FileHandle,
      int _Mode
    );

 
__declspec(dllimport) long __cdecl _tell(
      int _FileHandle
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_umask_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _umask(
      int _Mode
    );


__declspec(dllimport) errno_t __cdecl _umask_s(
       int  _NewMode,
      int* _OldMode
    );

__declspec(dllimport) int __cdecl _write(
                                 int          _FileHandle,
      void const*  _Buf,
                                 unsigned int _MaxCharCount
    );

 
__declspec(dllimport) __int64 __cdecl _filelengthi64(
      int _FileHandle
    );

 
 
__declspec(dllimport) intptr_t __cdecl _findfirst32i64(
      char const*              _FileName,
       struct _finddata32i64_t* _FindData
    );

 
 
__declspec(dllimport) intptr_t __cdecl _findfirst64i32(
      char const*              _FileName,
       struct _finddata64i32_t* _FindData
    );

 
 
__declspec(dllimport) intptr_t __cdecl _findfirst64(
      char const*            _FileName,
       struct __finddata64_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _findnext32i64(
       intptr_t                 _FindHandle,
      struct _finddata32i64_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _findnext64i32(
       intptr_t                 _FindHandle,
      struct _finddata64i32_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _findnext64(
       intptr_t               _FindHandle,
      struct __finddata64_t* _FindData
    );


__declspec(dllimport) __int64 __cdecl _lseeki64(
      int     _FileHandle,
      __int64 _Offset,
      int     _Origin
    );

 
__declspec(dllimport) __int64 __cdecl _telli64(
      int _FileHandle
    );


__declspec(dllimport) errno_t __cdecl _sopen_s(
       int*        _FileHandle,
      char const* _FileName,
        int         _OpenFlag,
        int         _ShareFlag,
        int         _PermissionMode
    );

 
__declspec(dllimport) errno_t __cdecl _sopen_s_nolock(
       int*        _FileHandle,
      char const* _FileName,
        int         _OpenFlag,
        int         _ShareFlag,
        int         _PermissionMode
    );

__declspec(dllimport) errno_t __cdecl _sopen_dispatch(
      char const* _FileName,
        int         _OFlag,
        int         _ShFlag,
        int         _PMode,
       int*        _PFileHandle,
        int         _BSecure
    );





    
    extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _open(
          char const* const _FileName,
            int         const _OFlag,
            int         const _PMode = 0
        )
    {
        int _FileHandle;
        
        errno_t const _Result = _sopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

    extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _sopen(
          char const* const _FileName,
            int         const _OFlag,
            int         const _ShFlag,
            int         const _PMode = 0
        )
    {
        int _FileHandle;
        
        errno_t const _Result = _sopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }





















    
    #pragma warning(push)
    #pragma warning(disable: 4141)

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_access" ". See online help for details."))
    __declspec(dllimport) int __cdecl access(
          char const* _FileName,
            int         _AccessMode
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_chmod" ". See online help for details."))
    __declspec(dllimport) int __cdecl chmod(
          char const* _FileName,
            int         _AccessMode
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_chsize" ". See online help for details."))
    __declspec(dllimport) int __cdecl chsize(
          int  _FileHandle,
          long _Size
        );
    
     __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_close" ". See online help for details."))
    __declspec(dllimport) int __cdecl close(
          int _FileHandle
    );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_creat" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) int __cdecl creat(
          char const* _FileName,
            int         _PermissionMode
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_dup" ". See online help for details."))
    __declspec(dllimport) int __cdecl dup(
          int _FileHandle
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_dup2" ". See online help for details."))
    __declspec(dllimport) int __cdecl dup2(
          int _FileHandleSrc,
          int _FileHandleDst
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_eof" ". See online help for details."))
    __declspec(dllimport) int __cdecl eof(
          int _FileHandle
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_filelength" ". See online help for details."))
    __declspec(dllimport) long __cdecl filelength(
          int _FileHandle
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_isatty" ". See online help for details."))
    __declspec(dllimport) int __cdecl isatty(
          int _FileHandle
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_locking" ". See online help for details."))
    __declspec(dllimport) int __cdecl locking(
          int  _FileHandle,
          int  _LockMode,
          long _NumOfBytes
        );
    
     __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lseek" ". See online help for details."))
    __declspec(dllimport) long __cdecl lseek(
          int  _FileHandle,
          long _Offset,
          int  _Origin
        );
    
     
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_mktemp" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_mktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char * __cdecl mktemp(
          char* _TemplateName
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_open" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) int __cdecl open(
          char const* _FileName,
            int         _OpenFlag,
        ...);
    
     
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_read" ". See online help for details."))
    __declspec(dllimport) int __cdecl read(
                                       int          _FileHandle,
          void*        _DstBuf,
                                       unsigned int _MaxCharCount
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_setmode" ". See online help for details."))
    __declspec(dllimport) int __cdecl setmode(
          int _FileHandle,
          int _Mode
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_sopen" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) int __cdecl sopen(
          char const* _FileName,
          int         _OpenFlag,
          int         _ShareFlag,
        ...);
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tell" ". See online help for details."))
    __declspec(dllimport) long __cdecl tell(
          int _FileHandle
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_umask" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_umask_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) int __cdecl umask(
          int _Mode
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
    __declspec(dllimport) int __cdecl unlink(
          char const* _FileName
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_write" ". See online help for details."))
    __declspec(dllimport) int __cdecl write(
                                     int          _FileHandle,
          void const*  _Buf,
                                     unsigned int _MaxCharCount
        );
    
    #pragma warning(pop)




} __pragma(pack(pop))



















#pragma once






#pragma warning(disable:4514)       
 


















extern "C" {








#pragma deprecated("_ftcscat")
#pragma deprecated("_ftcschr")
#pragma deprecated("_ftcscpy")
#pragma deprecated("_ftcscspn")
#pragma deprecated("_ftcslen")
#pragma deprecated("_ftcsncat")
#pragma deprecated("_ftcsncpy")
#pragma deprecated("_ftcspbrk")
#pragma deprecated("_ftcsrchr")
#pragma deprecated("_ftcsspn")
#pragma deprecated("_ftcsstr")
#pragma deprecated("_ftcstok")
#pragma deprecated("_ftcsdup")
#pragma deprecated("_ftcsnset")
#pragma deprecated("_ftcsrev")
#pragma deprecated("_ftcsset")
#pragma deprecated("_ftcscmp")
#pragma deprecated("_ftcsicmp")
#pragma deprecated("_ftcsnccmp")
#pragma deprecated("_ftcsncmp")
#pragma deprecated("_ftcsncicmp")
#pragma deprecated("_ftcsnicmp")
#pragma deprecated("_ftcscoll")
#pragma deprecated("_ftcsicoll")
#pragma deprecated("_ftcsnccoll")
#pragma deprecated("_ftcsncoll")
#pragma deprecated("_ftcsncicoll")
#pragma deprecated("_ftcsnicoll")
#pragma deprecated("_ftcsclen")
#pragma deprecated("_ftcsnccat")
#pragma deprecated("_ftcsnccpy")
#pragma deprecated("_ftcsncset")
#pragma deprecated("_ftcsdec")
#pragma deprecated("_ftcsinc")
#pragma deprecated("_ftcsnbcnt")
#pragma deprecated("_ftcsnccnt")
#pragma deprecated("_ftcsnextc")
#pragma deprecated("_ftcsninc")
#pragma deprecated("_ftcsspnp")
#pragma deprecated("_ftcslwr")
#pragma deprecated("_ftcsupr")
#pragma deprecated("_ftclen")
#pragma deprecated("_ftccpy")
#pragma deprecated("_ftccmp")


















































































































































































































































































































































































































































































































































































































































































































































































}   





extern "C" {









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































typedef char            _TCHAR;
typedef signed char     _TSCHAR;
typedef unsigned char   _TUCHAR;
typedef char            _TXCHAR;
typedef int             _TINT;



















































































































  __inline size_t __cdecl _tclen(  const char *_cpc)
{
    
    (void *)_cpc;
    return 1;
}
__inline void __cdecl _tccpy(  char *_pc1,   const char *_cpc2) { *_pc1 = *_cpc2; }
__inline void __cdecl _tccpy_l(  char *_Pc1,   const char *_Cpc2,   _locale_t _Locale)
{
    (void)_Locale;
#pragma warning( push )
#pragma warning( disable : 28719 )
    _tccpy(_Pc1, _Cpc2);
#pragma warning( pop )
}
  __inline int __cdecl _tccmp(  const char *_cpc1,   const char *_cpc2) { return (int) (((unsigned char)*_cpc1)-((unsigned char)*_cpc2)); }






























































  __inline char * __cdecl _strdec(  const char * _Cpc1,   const char * _Cpc2) { return (char *)((_Cpc1)>=(_Cpc2) ? 0 : (_Cpc2-1)); }
  __inline char * __cdecl _strinc(  const char * _Pc) { return (char *)(_Pc+1); }
  __inline unsigned int __cdecl _strnextc(  const char * _Cpc) { return (unsigned int)*(const unsigned char *)_Cpc; }
  __inline char * __cdecl _strninc(  const char * _Pc,   size_t _Sz) { return (char *)(_Pc+_Sz); }
  __inline size_t __cdecl _strncnt(  const char * _String,   size_t _Cnt)
{
        size_t n = _Cnt;
        char *cp = (char *)_String;
        while (n-- && *cp)
                cp++;
        return _Cnt - n - 1;
}
  __inline char * __cdecl _strspnp
(
      const char * _Cpc1,
      const char * _Cpc2
)
{
    return _Cpc1==0 ? 0 : ((*(_Cpc1 += strspn(_Cpc1,_Cpc2))!='\0') ? (char*)_Cpc1 : 0);
}


 __inline errno_t __cdecl _strncpy_s_l(  char *_Destination,   size_t _Destination_size_chars,   const char *_Source,   size_t _Count,   _locale_t _Locale)
{
    (void)_Locale;
    return strncpy_s(_Destination, _Destination_size_chars, _Source, _Count);
}


extern "C++" { template <size_t _Size> inline errno_t __cdecl _strncpy_s_l(  char (&_Dest)[_Size],   const char * _Source,   size_t _Count,   _locale_t _Locale) throw() { return _strncpy_s_l(_Dest, _Size, _Source, _Count, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strncpy_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline char * __cdecl _strncpy_l(  char *_Dst,   const char * _Source,   size_t _Count,   _locale_t _Locale)
{
    (void)_Locale;
#pragma warning( push )
#pragma warning( disable : 4995 4996 28719 )
    return strncpy(_Dst, _Source, _Count);
#pragma warning( pop )
}




 __inline errno_t __cdecl _strncat_s_l(  char *_Destination,   size_t _Destination_size_chars,   const char *_Source,   size_t _Count,   _locale_t _Locale)
{
    (void)_Locale;
    return strncat_s(_Destination, _Destination_size_chars, _Source, _Count);
}


extern "C++" { template <size_t _Size> inline errno_t __cdecl _strncat_s_l(  char (&_Dest)[_Size],   const char * _Source,   size_t _Count,   _locale_t _Locale) throw() { return _strncat_s_l(_Dest, _Size, _Source, _Count, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strncat_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline char * __cdecl _strncat_l(  char *_Dst,   const char * _Source,   size_t _Count,   _locale_t _Locale)
{
    (void)_Locale;
#pragma warning( push )
#pragma warning( disable : 4995 4996 6054 28719 )
    return strncat(_Dst, _Source, _Count);
#pragma warning( pop )
}



  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strtok_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline char *  _strtok_l(  char * _String,   const char * _Delimiters,   _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable:4996 28727)
    return strtok(_String,_Delimiters);
#pragma warning(pop)
}


  __inline char *  _strtok_s_l(  char * _String,   const char * _Delimiters,     char **_Current_position,   _locale_t _Locale)
{
    (void)_Locale;
    return strtok_s(_String, _Delimiters, _Current_position);
}


__inline errno_t __cdecl _strnset_s_l(  char *_Destination,   size_t _Destination_size_chars,   int _Value,   size_t _Count,   _locale_t _Locale)
{
    (void)_Locale;
    return _strnset_s(_Destination, _Destination_size_chars, _Value, _Count);
}

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s_l(  char (&_Dest)[_Size],   int _Value,   size_t _Count,   _locale_t _Locale) throw() { return _strnset_s_l(_Dest, _Size, _Value, _Count, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline char * __cdecl _strnset_l(  char *_Dst,   int _Value,   size_t _MaxCount,   _locale_t _Locale)
{
    (void)_Locale;
#pragma warning( push )
#pragma warning( disable : 4996 6054 )
    return _strnset(_Dst, _Value, _MaxCount);
#pragma warning( pop )
}



__inline errno_t __cdecl _strset_s_l(  char *_Destination,   size_t _Destination_size_chars,   int _Value,   _locale_t _Locale)
{
    (void)_Locale;
    return _strset_s(_Destination, _Destination_size_chars, _Value);
}

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s_l(  char (&_Dest)[_Size],   int _Value,   _locale_t _Locale) throw() { return _strset_s_l(_Dest, _Size, _Value, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline char * __cdecl _strset_l(  char *_Dst,   int _Value,   _locale_t _Locale)
{
    (void)_Locale;
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _strset(_Dst, _Value);
#pragma warning( pop )
}



















}   





































#pragma once



extern "C" {


























































#pragma warning(disable:4103)

#pragma pack(push,8)
















typedef void * I_RPC_HANDLE;




typedef   long RPC_STATUS;

































































































#pragma once



extern "C" {


#pragma region Application Family




























typedef   unsigned char  * RPC_CSTR;





typedef   unsigned short  * RPC_WSTR;
typedef   const unsigned short * RPC_CWSTR;


typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;








typedef GUID UUID;






#pragma endregion

#pragma region Desktop Family


typedef struct _RPC_BINDING_VECTOR
{
    unsigned long Count;
      RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;




typedef struct _UUID_VECTOR
{
  unsigned long Count;
    UUID *Uuid[1];
} UUID_VECTOR;





#pragma endregion

#pragma region Application Family


typedef void  * RPC_IF_HANDLE;


#pragma endregion

#pragma region Desktop Family




typedef struct _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;















































































typedef struct _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char  * Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short  * Protseq[1];
} RPC_PROTSEQ_VECTORW;
















typedef struct _RPC_POLICY {
    unsigned int Length ;
    unsigned long EndpointFlags ;
    unsigned long NICFlags ;
    } RPC_POLICY,   *PRPC_POLICY ;

typedef void __stdcall
RPC_OBJECT_INQ_FN (
      UUID  * ObjectUuid,
      UUID  * TypeUuid,
      RPC_STATUS  * Status
    );

  
typedef RPC_STATUS __stdcall
RPC_IF_CALLBACK_FN (
      RPC_IF_HANDLE  InterfaceUuid,
      void *Context
    ) ;

typedef void __stdcall
RPC_SECURITY_CALLBACK_FN (
      void *Context
    ) ;


#pragma endregion

#pragma region Application Family





#pragma endregion

#pragma region Desktop Family


typedef struct
{
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;






typedef struct
{
  unsigned long Count;
  RPC_IF_ID  * IfId[1];
} RPC_IF_ID_VECTOR;


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingCopy (
      RPC_BINDING_HANDLE SourceBinding,
      RPC_BINDING_HANDLE  * DestinationBinding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFree (
      RPC_BINDING_HANDLE  * Binding
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingSetOption ( 
      RPC_BINDING_HANDLE hBinding,
      unsigned long      option,
      ULONG_PTR          optionValue 
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqOption (
       RPC_BINDING_HANDLE hBinding,
       unsigned long      option,
      ULONG_PTR         *pOptionValue 
    );







__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingFromStringBindingA (    
      RPC_CSTR StringBinding,
      RPC_BINDING_HANDLE  * Binding
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingFromStringBindingW (
      RPC_WSTR StringBinding,        
      RPC_BINDING_HANDLE  * Binding
    );






















__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsGetContextBinding (
      void *ContextHandle,
      RPC_BINDING_HANDLE  * Binding
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqObject (
      RPC_BINDING_HANDLE Binding,
      UUID  * ObjectUuid
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingReset (
      RPC_BINDING_HANDLE Binding
    );





__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingSetObject (
      RPC_BINDING_HANDLE Binding,
      UUID  * ObjectUuid
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtInqDefaultProtectLevel (
       unsigned long AuthnSvc,
      unsigned long  *AuthnLevel
    );





__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingToStringBindingA (
      RPC_BINDING_HANDLE Binding,
     RPC_CSTR  * StringBinding
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingToStringBindingW (
      RPC_BINDING_HANDLE Binding,
     RPC_WSTR  * StringBinding
    );




















__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingVectorFree (
      RPC_BINDING_VECTOR  *  * BindingVector
    );







__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcStringBindingComposeA (
      RPC_CSTR ObjUuid,
      RPC_CSTR ProtSeq,    
      RPC_CSTR NetworkAddr,
      RPC_CSTR Endpoint,
      RPC_CSTR Options,
     RPC_CSTR  * StringBinding
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcStringBindingComposeW (
      RPC_WSTR ObjUuid,
      RPC_WSTR ProtSeq,    
      RPC_WSTR NetworkAddr,
      RPC_WSTR Endpoint,
      RPC_WSTR Options,
     RPC_WSTR  * StringBinding
    );



























__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcStringBindingParseA (
      RPC_CSTR StringBinding,    
     RPC_CSTR  * ObjUuid,
     RPC_CSTR  * Protseq,
     RPC_CSTR  * NetworkAddr,
     RPC_CSTR  * Endpoint,
     RPC_CSTR  * NetworkOptions
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcStringBindingParseW (
      RPC_WSTR StringBinding,    
     RPC_WSTR  * ObjUuid,
     RPC_WSTR  * Protseq,
     RPC_WSTR  * NetworkAddr,
     RPC_WSTR  * Endpoint,
     RPC_WSTR  * NetworkOptions
    );





























__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeA (
      RPC_CSTR  * String    
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeW (
      RPC_WSTR  * String
    );




















__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcIfInqId (
      RPC_IF_HANDLE RpcIfHandle,
      RPC_IF_ID  * RpcIfId
    );





__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidA (
      RPC_CSTR Protseq     
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidW (
      RPC_WSTR Protseq
    );



















__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtInqComTimeout (
      RPC_BINDING_HANDLE Binding,
      unsigned int  * Timeout
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtSetComTimeout (
      RPC_BINDING_HANDLE Binding,
      unsigned int Timeout
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtSetCancelTimeout(
      long Timeout
    );






__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcNetworkInqProtseqsA (
     RPC_PROTSEQ_VECTORA  *  * ProtseqVector    
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcNetworkInqProtseqsW (
     RPC_PROTSEQ_VECTORW  *  * ProtseqVector    
    );



















__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcObjectInqType (
      UUID  * ObjUuid,
       UUID  * TypeUuid
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcObjectSetInqFn (
      RPC_OBJECT_INQ_FN  * InquiryFn
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcObjectSetType (
      UUID  * ObjUuid,
       UUID  * TypeUuid
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeA (
      RPC_PROTSEQ_VECTORA  *  * ProtseqVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeW (
      RPC_PROTSEQ_VECTORW  *  * ProtseqVector
    );



















__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerInqBindings (
     RPC_BINDING_VECTOR  *  * BindingVector
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerInqIf (
      RPC_IF_HANDLE IfSpec,
      UUID  * MgrTypeUuid,
     void  *  * MgrEpv
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerListen (
      unsigned int MinimumCallThreads,
      unsigned int MaxCalls,
      unsigned int DontWait
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerRegisterIf (
      RPC_IF_HANDLE IfSpec,
      UUID  * MgrTypeUuid,
      void  * MgrEpv
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerRegisterIfEx (
      RPC_IF_HANDLE IfSpec,
      UUID  * MgrTypeUuid,
      void  * MgrEpv,
      unsigned int Flags,
      unsigned int MaxCalls,
      RPC_IF_CALLBACK_FN  *IfCallback
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf2 (
      RPC_IF_HANDLE IfSpec,
      UUID * MgrTypeUuid,
      void * MgrEpv,
      unsigned int Flags,
      unsigned int MaxCalls,
      unsigned int MaxRpcSize,
      RPC_IF_CALLBACK_FN *IfCallbackFn
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf3 (
      RPC_IF_HANDLE IfSpec,
      UUID  * MgrTypeUuid,
      void  * MgrEpv,
      unsigned int Flags,
      unsigned int MaxCalls,
      unsigned int MaxRpcSize,
      RPC_IF_CALLBACK_FN  *IfCallback,
      void  * SecurityDescriptor
    );



__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUnregisterIf (
      RPC_IF_HANDLE IfSpec,
      UUID  * MgrTypeUuid,
      unsigned int WaitForCallsToComplete
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnregisterIfEx (
      RPC_IF_HANDLE IfSpec,
      UUID  * MgrTypeUuid,
      int RundownContextHandles
    );



__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseAllProtseqs (
      unsigned int MaxCalls,
      void  * SecurityDescriptor
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsEx (
      unsigned int MaxCalls,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIf (
      unsigned int MaxCalls,
      RPC_IF_HANDLE IfSpec,
      void  * SecurityDescriptor
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIfEx (
      unsigned int MaxCalls,
      RPC_IF_HANDLE IfSpec,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );






__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqA (
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      void  * SecurityDescriptor
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqExA (
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqW (
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      void  * SecurityDescriptor
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqExW (
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );




































__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqEpA (
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      RPC_CSTR Endpoint,
      void  * SecurityDescriptor
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqEpExA (
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      RPC_CSTR Endpoint,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqEpW (
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      RPC_WSTR Endpoint,
      void  * SecurityDescriptor
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqEpExW (
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      RPC_WSTR Endpoint,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );






































__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqIfA (
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      RPC_IF_HANDLE IfSpec,
      void  * SecurityDescriptor
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqIfExA (
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      RPC_IF_HANDLE IfSpec,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqIfW (
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      RPC_IF_HANDLE IfSpec,
      void  * SecurityDescriptor
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqIfExW (
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      RPC_IF_HANDLE IfSpec,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );


































__declspec(dllimport)
void
__stdcall
RpcServerYield (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtStatsVectorFree (
      RPC_STATS_VECTOR ** StatsVector
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtInqStats (
      RPC_BINDING_HANDLE Binding,
     RPC_STATS_VECTOR ** Statistics
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtIsServerListening (
      RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtStopServerListening (
      RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtWaitServerListen (
    void
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtSetServerStackSize (
      unsigned long ThreadStackSize
    );


__declspec(dllimport)
void
__stdcall
RpcSsDontSerializeContext (
    void
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtEnableIdleCleanup (
    void
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtInqIfIds (
      RPC_BINDING_HANDLE Binding,
     RPC_IF_ID_VECTOR  *  * IfIdVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcIfIdVectorFree (
      RPC_IF_ID_VECTOR  *  * IfIdVector
    );



__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameA (
      RPC_BINDING_HANDLE Binding,
      unsigned long AuthnSvc,
     RPC_CSTR  * ServerPrincName
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameW (
      RPC_BINDING_HANDLE Binding,
      unsigned long AuthnSvc,
     RPC_WSTR  * ServerPrincName
    );






















__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameA (
      unsigned long AuthnSvc,
     RPC_CSTR  * PrincName
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameW (
      unsigned long AuthnSvc,
     RPC_WSTR  * PrincName
    );




















__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcEpResolveBinding (
      RPC_BINDING_HANDLE Binding,
      RPC_IF_HANDLE IfSpec
    );





__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameA (
      RPC_BINDING_HANDLE Binding,
      unsigned long EntryNameSyntax,
     RPC_CSTR  * EntryName
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameW (
      RPC_BINDING_HANDLE Binding,
      unsigned long EntryNameSyntax,
     RPC_WSTR  * EntryName
    );





















#pragma endregion

#pragma region Application Family


typedef void  * RPC_AUTH_IDENTITY_HANDLE;
typedef void  * RPC_AUTHZ_HANDLE;








































































typedef struct _RPC_SECURITY_QOS {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;







typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
    unsigned short  *User;
  unsigned long UserLength;
    unsigned short  *Domain;
  unsigned long DomainLength;
    unsigned short  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;





typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
    unsigned char  *User;
  unsigned long UserLength;
    unsigned char  *Domain;
  unsigned long DomainLength;
    unsigned char  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;










































typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned short  *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char  *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;



typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
      unsigned long *AuthnSchemes;
    unsigned short  *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_W *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
      unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char  *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_A *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
    unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;





typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
      unsigned long *AuthnSchemes;
    unsigned short  *ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
      unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
      unsigned long *AuthnSchemes;
    unsigned char  *ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
      unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;



typedef struct _RPC_SECURITY_QOS_V2_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W;

typedef struct _RPC_SECURITY_QOS_V2_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A;




typedef struct _RPC_SECURITY_QOS_V3_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_W, *PRPC_SECURITY_QOS_V3_W;

typedef struct _RPC_SECURITY_QOS_V3_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_A, *PRPC_SECURITY_QOS_V3_A;






typedef struct _RPC_SECURITY_QOS_V4_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_W, *PRPC_SECURITY_QOS_V4_W;

typedef struct _RPC_SECURITY_QOS_V4_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_A, *PRPC_SECURITY_QOS_V4_A;






typedef struct _RPC_SECURITY_QOS_V5_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
  void *ServerSecurityDescriptor;
} RPC_SECURITY_QOS_V5_W, *PRPC_SECURITY_QOS_V5_W;

typedef struct _RPC_SECURITY_QOS_V5_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
  void *ServerSecurityDescriptor;
} RPC_SECURITY_QOS_V5_A, *PRPC_SECURITY_QOS_V5_A;







#pragma endregion



#pragma region Desktop Family


































































































typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned short *NetworkAddress;
    unsigned short *StringEndpoint;
    union
    {
        unsigned short *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_W, *PRPC_BINDING_HANDLE_TEMPLATE_V1_W;

typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned char *NetworkAddress;
    unsigned char *StringEndpoint;
    union
    {
        unsigned char *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_A, *PRPC_BINDING_HANDLE_TEMPLATE_V1_A;

typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_W {
    unsigned long Version;
    unsigned short *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_W *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_W, *PRPC_BINDING_HANDLE_SECURITY_V1_W;



typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_A {
    unsigned long Version;
    unsigned char *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_A *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_A, *PRPC_BINDING_HANDLE_SECURITY_V1_A;



typedef struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ComTimeout;
    unsigned long CallTimeout;
} RPC_BINDING_HANDLE_OPTIONS_V1, *PRPC_BINDING_HANDLE_OPTIONS_V1;

























__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCreateA (
      RPC_BINDING_HANDLE_TEMPLATE_V1_A * Template,
      RPC_BINDING_HANDLE_SECURITY_V1_A * Security,
      RPC_BINDING_HANDLE_OPTIONS_V1 * Options,
      RPC_BINDING_HANDLE * Binding
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCreateW (
      RPC_BINDING_HANDLE_TEMPLATE_V1_W * Template,
      RPC_BINDING_HANDLE_SECURITY_V1_W * Security,
      RPC_BINDING_HANDLE_OPTIONS_V1 * Options,
      RPC_BINDING_HANDLE * Binding
    );







__declspec(dllimport)
RPC_STATUS 
__stdcall 
RpcBindingGetTrainingContextHandle (
      RPC_BINDING_HANDLE Binding,
     void ** ContextHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall 
RpcServerInqBindingHandle (
      RPC_BINDING_HANDLE * Binding
    );



#pragma endregion



#pragma region Application Family


typedef enum _RPC_HTTP_REDIRECTOR_STAGE
{
    RPCHTTP_RS_REDIRECT = 1,
    RPCHTTP_RS_ACCESS_1,
    RPCHTTP_RS_SESSION,
    RPCHTTP_RS_ACCESS_2,
    RPCHTTP_RS_INTERFACE
} RPC_HTTP_REDIRECTOR_STAGE;


#pragma endregion



#pragma region Desktop Family



typedef RPC_STATUS
(__stdcall * RPC_NEW_HTTP_PROXY_CHANNEL) (
      RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,
      RPC_WSTR ServerName,
      RPC_WSTR ServerPort,
      RPC_WSTR RemoteUser,
      RPC_WSTR AuthType,
      void  * ResourceUuid,
      void  * SessionId,
      void  * Interface,
      void  * Reserved,
      unsigned long Flags,
     RPC_WSTR  * NewServerName,
     RPC_WSTR  * NewServerPort
    );
    











typedef void
(__stdcall * RPC_HTTP_PROXY_FREE_STRING) (
      RPC_WSTR String
    );


#pragma endregion



#pragma region Application Family








#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcImpersonateClient (
      RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcImpersonateClient2 (
      RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcRevertToSelfEx (
      RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcRevertToSelf (
    void
    );



__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqAuthClientA (
      RPC_BINDING_HANDLE ClientBinding,
      RPC_AUTHZ_HANDLE  * Privs,
     RPC_CSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      unsigned long  * AuthzSvc
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqAuthClientW (
      RPC_BINDING_HANDLE ClientBinding,
      RPC_AUTHZ_HANDLE  * Privs,
     RPC_WSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      unsigned long  * AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExA (
      RPC_BINDING_HANDLE ClientBinding,
      RPC_AUTHZ_HANDLE  * Privs,
     RPC_CSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      unsigned long  * AuthzSvc,
       unsigned long             Flags
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExW (
      RPC_BINDING_HANDLE ClientBinding,
      RPC_AUTHZ_HANDLE  * Privs,
     RPC_WSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      unsigned long  * AuthzSvc,
       unsigned long             Flags
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoA (
      RPC_BINDING_HANDLE Binding,
     RPC_CSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity,
      unsigned long  * AuthzSvc
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoW (
      RPC_BINDING_HANDLE Binding,
     RPC_WSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity,
      unsigned long  * AuthzSvc
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoA (
      RPC_BINDING_HANDLE Binding,
      RPC_CSTR ServerPrincName,
      unsigned long AuthnLevel,
      unsigned long AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
      unsigned long AuthzSvc
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExA (
      RPC_BINDING_HANDLE Binding,
      RPC_CSTR ServerPrincName,
      unsigned long AuthnLevel,
      unsigned long AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
      unsigned long AuthzSvc,
      RPC_SECURITY_QOS * SecurityQos
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoW (
      RPC_BINDING_HANDLE Binding,
      RPC_WSTR ServerPrincName,
      unsigned long AuthnLevel,
      unsigned long AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
      unsigned long AuthzSvc
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExW (
      RPC_BINDING_HANDLE Binding,
      RPC_WSTR ServerPrincName,
      unsigned long AuthnLevel,
      unsigned long AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
      unsigned long AuthzSvc,
      RPC_SECURITY_QOS * SecurityQOS
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExA (
      RPC_BINDING_HANDLE Binding,
     RPC_CSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity,
      unsigned long  * AuthzSvc,
       unsigned long RpcQosVersion,
      RPC_SECURITY_QOS *SecurityQOS
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExW (
      RPC_BINDING_HANDLE Binding,
     RPC_WSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity,
      unsigned long  * AuthzSvc,
      unsigned long RpcQosVersion,
      RPC_SECURITY_QOS * SecurityQOS
    );

typedef void
(__stdcall * RPC_AUTH_KEY_RETRIEVAL_FN) (
      void  * Arg,
      RPC_WSTR ServerPrincName,
      unsigned long KeyVer,
     void  *  * Key,
      RPC_STATUS  * Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall 
RpcServerCompleteSecurityCallback(
      RPC_BINDING_HANDLE BindingHandle,
      RPC_STATUS Status
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoA (
      RPC_CSTR ServerPrincName,
      unsigned long AuthnSvc,
      RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
      void  * Arg
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoW (
      RPC_WSTR ServerPrincName,
      unsigned long AuthnSvc,
      RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
      void  * Arg
    );





























































































typedef struct {
    unsigned char  * UserName;
    unsigned char  * ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1,  * PRPC_CLIENT_INFORMATION1;



__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingServerFromClient (
      RPC_BINDING_HANDLE ClientBinding,
      RPC_BINDING_HANDLE  * ServerBinding
    );

__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
RpcRaiseException (
      RPC_STATUS exception
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcTestCancel(
    void
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerTestCancel (
      RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcCancelThread(
      void * Thread
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcCancelThreadEx(
      void * Thread,
      long Timeout
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
UuidCreate (
      UUID  * Uuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreateSequential (
      UUID  * Uuid
    );




__declspec(dllimport)
 
RPC_STATUS
__stdcall
UuidToStringA (
      const UUID  * Uuid,
     RPC_CSTR  * StringUuid
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
UuidFromStringA (
      RPC_CSTR StringUuid,
      UUID  * Uuid
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
UuidToStringW (
      const UUID  * Uuid,
     RPC_WSTR  * StringUuid
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
UuidFromStringW (
      RPC_WSTR StringUuid,
      UUID  * Uuid
    );































__declspec(dllimport)
signed int
__stdcall
UuidCompare (
      UUID  * Uuid1,
      UUID  * Uuid2,
      RPC_STATUS  * Status
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
UuidCreateNil (
      UUID  * NilUuid
    );

__declspec(dllimport)
int
__stdcall
UuidEqual (
      UUID  * Uuid1,
      UUID  * Uuid2,
      RPC_STATUS  * Status
    );

__declspec(dllimport)
unsigned short
__stdcall
UuidHash (
      UUID  * Uuid,
      RPC_STATUS  * Status
    );

__declspec(dllimport)
int
__stdcall
UuidIsNil (
      UUID  * Uuid,
      RPC_STATUS  * Status
    );



__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceA (
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR * BindingVector,
      UUID_VECTOR * UuidVector,
      RPC_CSTR Annotation
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceW (
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR * BindingVector,
      UUID_VECTOR * UuidVector,
      RPC_WSTR Annotation
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcEpRegisterA (
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR * BindingVector,
      UUID_VECTOR * UuidVector,
      RPC_CSTR Annotation
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcEpRegisterW (
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR * BindingVector,
      UUID_VECTOR * UuidVector,
      RPC_WSTR Annotation
    );


































__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcEpUnregister(
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR * BindingVector,
      UUID_VECTOR * UuidVector
    );





__declspec(dllimport)
 
RPC_STATUS
__stdcall
DceErrorInqTextA (
      RPC_STATUS RpcStatus,
      RPC_CSTR ErrorText
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
DceErrorInqTextW (
      RPC_STATUS RpcStatus,
      RPC_WSTR ErrorText
    );



















typedef I_RPC_HANDLE * RPC_EP_INQ_HANDLE;












__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtEpEltInqBegin (
       RPC_BINDING_HANDLE EpBinding,
      unsigned long InquiryType,
      RPC_IF_ID  * IfId,
      unsigned long VersOption,
      UUID  * ObjectUuid,
      RPC_EP_INQ_HANDLE  * InquiryContext
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtEpEltInqDone (
      RPC_EP_INQ_HANDLE  * InquiryContext
    );



__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextA (
      RPC_EP_INQ_HANDLE InquiryContext,
      RPC_IF_ID  * IfId,
      RPC_BINDING_HANDLE  * Binding,
      UUID  * ObjectUuid,
     RPC_CSTR  * Annotation
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextW (
      RPC_EP_INQ_HANDLE InquiryContext,
      RPC_IF_ID  * IfId,
      RPC_BINDING_HANDLE  * Binding,
      UUID  * ObjectUuid,
     RPC_WSTR  * Annotation
    );





















__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtEpUnregister (
      RPC_BINDING_HANDLE EpBinding,
      RPC_IF_ID  * IfId,
      RPC_BINDING_HANDLE Binding,
      UUID  * ObjectUuid
    );

typedef int
(__stdcall * RPC_MGMT_AUTHORIZATION_FN) (
      RPC_BINDING_HANDLE ClientBinding,
      unsigned long RequestedMgmtOperation,
      RPC_STATUS  * Status
    );







__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtSetAuthorizationFn (
      RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
    );


__declspec(dllimport)
int
__stdcall
RpcExceptionFilter (
      unsigned long ExceptionCode
    );























typedef void *RPC_INTERFACE_GROUP, **PRPC_INTERFACE_GROUP;


typedef struct 
{
    unsigned long Version;
    RPC_WSTR ProtSeq;
    RPC_WSTR Endpoint;
    void * SecurityDescriptor;
    unsigned long Backlog;
} RPC_ENDPOINT_TEMPLATEW, *PRPC_ENDPOINT_TEMPLATEW;

typedef struct 
{
    unsigned long Version;
    RPC_CSTR ProtSeq;
    RPC_CSTR Endpoint;
    void * SecurityDescriptor;
    unsigned long Backlog;
} RPC_ENDPOINT_TEMPLATEA, *PRPC_ENDPOINT_TEMPLATEA;





















typedef struct 
{
    unsigned long Version;
    RPC_IF_HANDLE IfSpec;
    UUID * MgrTypeUuid;
    void * MgrEpv;
    unsigned int Flags;
    unsigned int MaxCalls;
    unsigned int MaxRpcSize;
    RPC_IF_CALLBACK_FN *IfCallback;
    UUID_VECTOR *UuidVector;
    RPC_CSTR Annotation;
    void * SecurityDescriptor;
} RPC_INTERFACE_TEMPLATEA, *PRPC_INTERFACE_TEMPLATEA;

typedef struct 
{
    unsigned long Version;
    RPC_IF_HANDLE IfSpec;
    UUID * MgrTypeUuid;
    void * MgrEpv;
    unsigned int Flags;
    unsigned int MaxCalls;
    unsigned int MaxRpcSize;
    RPC_IF_CALLBACK_FN *IfCallback;
    UUID_VECTOR *UuidVector;
    RPC_WSTR Annotation;
    void * SecurityDescriptor;
} RPC_INTERFACE_TEMPLATEW, *PRPC_INTERFACE_TEMPLATEW;






























typedef void __stdcall
RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN (
      RPC_INTERFACE_GROUP IfGroup,
      void* IdleCallbackContext,
      unsigned long IsGroupIdle
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupCreateW (
      RPC_INTERFACE_TEMPLATEW *Interfaces,
      unsigned long NumIfs,
      RPC_ENDPOINT_TEMPLATEW *Endpoints,
      unsigned long NumEndpoints,
      unsigned long IdlePeriod,
      RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn,
      void* IdleCallbackContext,
      PRPC_INTERFACE_GROUP IfGroup
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupCreateA (
      RPC_INTERFACE_TEMPLATEA *Interfaces,
      unsigned long NumIfs,
      RPC_ENDPOINT_TEMPLATEA *Endpoints,
      unsigned long NumEndpoints,
      unsigned long IdlePeriod,
      RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn,
      void* IdleCallbackContext,
      PRPC_INTERFACE_GROUP IfGroup
    );


























__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupClose (
      RPC_INTERFACE_GROUP IfGroup
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupActivate (
      RPC_INTERFACE_GROUP IfGroup
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupDeactivate (
      RPC_INTERFACE_GROUP IfGroup,
      unsigned long ForceDeactivation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupInqBindings (
      RPC_INTERFACE_GROUP IfGroup,
     RPC_BINDING_VECTOR  *  * BindingVector
    );





#pragma endregion
























#pragma once



extern "C" {


#pragma region Application Family


typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER,  * PRPC_SYNTAX_IDENTIFIER;

typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void  * Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void  * RpcInterfaceInformation;
    void  * ReservedForRuntime;
    void  * ManagerEpv;
    void  * ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE,  * PRPC_MESSAGE;


#pragma endregion

#pragma region Desktop Family


typedef RPC_STATUS
__stdcall RPC_FORWARD_FUNCTION(
                        UUID              * InterfaceId,
                        RPC_VERSION       * InterfaceVersion,
                        UUID              * ObjectId,
                        unsigned char          * Rpcpro,
                        void  *  * ppDestEndpoint);

enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED,
    PROTOCOL_ADDRESS_CHANGE
};

typedef void
__stdcall RPC_ADDRESS_CHANGE_FN(
                         void * arg
                        );


#pragma endregion

#pragma region Application Family












































































typedef
void
(__stdcall  * RPC_DISPATCH_FUNCTION) (
      PRPC_MESSAGE Message
    );

typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION  * DispatchTable;
    LONG_PTR                          Reserved;
} RPC_DISPATCH_TABLE,  * PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char  * RpcProtocolSequence;
    unsigned char  * Endpoint;
} RPC_PROTSEQ_ENDPOINT,  * PRPC_PROTSEQ_ENDPOINT;








typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void  *DefaultManagerEpv;
    void const  *InterpreterInfo;
    unsigned int Flags ;
} RPC_SERVER_INTERFACE,  * PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER   InterfaceId;
    RPC_SYNTAX_IDENTIFIER   TransferSyntax;
    PRPC_DISPATCH_TABLE     DispatchTable;
    unsigned int            RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT   RpcProtseqEndpoint;
    ULONG_PTR               Reserved;
    void const  *  InterpreterInfo;
    unsigned int Flags ;
} RPC_CLIENT_INTERFACE,  * PRPC_CLIENT_INTERFACE;


#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNegotiateTransferSyntax (
      RPC_MESSAGE  * Message
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcGetBuffer (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetBufferWithObject (
      RPC_MESSAGE  * Message,
     UUID * ObjectUuid
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcSendReceive (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcFreeBuffer (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcSend (
      PRPC_MESSAGE Message
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcReceive (
      PRPC_MESSAGE Message,
     unsigned int Size
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcFreePipeBuffer (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcReallocPipeBuffer (
      PRPC_MESSAGE Message,
     unsigned int NewSize
    );

typedef void * I_RPC_MUTEX;

__declspec(dllimport)
void
__stdcall
I_RpcRequestMutex (
      I_RPC_MUTEX * Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcClearMutex (
     I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcDeleteMutex (
     I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void  *
__stdcall
I_RpcAllocate (
     unsigned int Size
    );

__declspec(dllimport)
void
__stdcall
I_RpcFree (
     void  * Object
    );

__declspec(dllimport)
void
__stdcall
I_RpcClntChkSystemHandleLeak (
     void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcSvrChkSystemHandleLeak (
     void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcClntSetSystemHandle (
     void* Handle,
     unsigned char Type,
     unsigned long AccessMask,
    void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcSvrSetSystemHandle (
     void* Handle,
     unsigned char Type,
     unsigned long AccessMask,
    void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcClntGetSystemHandle (
     unsigned char** pMemory,
     unsigned char Type,
     unsigned long AccessMask,
    void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcSvrGetSystemHandle (
     unsigned char** ppMemory,
     unsigned char Type,
     unsigned long AccessMask,
    void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcPauseExecution (
     unsigned long Milliseconds
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetExtendedError (
    void
    );

typedef
void
(__stdcall  * PRPC_RUNDOWN) (
    void  * AssociationContext
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcMonitorAssociation (
     RPC_BINDING_HANDLE Handle,
     PRPC_RUNDOWN RundownRoutine,
     void * Context
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcStopMonitorAssociation (
     RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
I_RpcGetCurrentCallHandle(
    void
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcGetAssociationContext (
     RPC_BINDING_HANDLE BindingHandle,
     void  *  * AssociationContext
    );

__declspec(dllimport)
void *
__stdcall
I_RpcGetServerContextList (
     RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
void
__stdcall
I_RpcSetServerContextList (
     RPC_BINDING_HANDLE BindingHandle,
     void * ServerContextList
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceExported (
     unsigned long EntryNameSyntax,
     unsigned short *EntryName,
     RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceUnexported (
     unsigned long EntryNameSyntax,
     unsigned short *EntryName,
     RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingToStaticStringBindingW (
     RPC_BINDING_HANDLE Binding,
     unsigned short **StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContext (
     RPC_BINDING_HANDLE Binding,
     void **SecurityContextHandle
    );


typedef struct _RPC_SEC_CONTEXT_KEY_INFO
{
    unsigned long EncryptAlgorithm;
    unsigned long KeySize;
    unsigned long SignatureAlgorithm;
}
RPC_SEC_CONTEXT_KEY_INFO, *PRPC_SEC_CONTEXT_KEY_INFO;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContextKeyInfo (
      RPC_BINDING_HANDLE Binding,
      void *KeyInfo
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqWireIdForSnego (
      RPC_BINDING_HANDLE Binding,
      unsigned char * WireId
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqMarshalledTargetInfo (
      RPC_BINDING_HANDLE Binding,
      unsigned long * MarshalledTargetInfoSize,
     RPC_CSTR * MarshalledTargetInfo
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqLocalClientPID (
     RPC_BINDING_HANDLE Binding,
     unsigned long *Pid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingHandleToAsyncHandle (
     RPC_BINDING_HANDLE Binding,
     void **AsyncHandle
    );




__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameW (
      RPC_BINDING_HANDLE Binding,
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameA (
      RPC_BINDING_HANDLE Binding,
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2A (
      RPC_CSTR NetworkAddress,
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      RPC_CSTR Endpoint,
      void  * SecurityDescriptor,
      void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2W (
      RPC_WSTR NetworkAddress,
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      RPC_WSTR Endpoint,
      void  * SecurityDescriptor,
      void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2W (
      RPC_WSTR NetworkAddress,
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      void  * SecurityDescriptor,
      void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2A (
      RPC_CSTR NetworkAddress,
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      void  * SecurityDescriptor,
      void * Policy
    );















































__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStartService (
      RPC_WSTR Protseq,
      RPC_WSTR Endpoint,
      RPC_IF_HANDLE IfSpec
    );



__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointW (
      RPC_BINDING_HANDLE Binding,
     RPC_WSTR  *DynamicEndpoint
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointA (
      RPC_BINDING_HANDLE Binding,
     RPC_CSTR  *DynamicEndpoint
    );





















__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerCheckClientRestriction (
     RPC_BINDING_HANDLE Context
    );







__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcBindingInqTransportType (
     RPC_BINDING_HANDLE Binding,
     unsigned int  * Type
    );

typedef struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcIfInqTransferSyntaxes (
     RPC_IF_HANDLE RpcIfHandle,
     RPC_TRANSFER_SYNTAX  * TransferSyntaxes,
     unsigned int TransferSyntaxSize,
     unsigned int  * TransferSyntaxCount
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_UuidCreate (
     UUID  * Uuid
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcBindingCopy (
     RPC_BINDING_HANDLE SourceBinding,
     RPC_BINDING_HANDLE  * DestinationBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsClientLocal (
      RPC_BINDING_HANDLE BindingHandle,
     unsigned int  * ClientLocalFlag
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqConnId (
     RPC_BINDING_HANDLE Binding,
     void **ConnId,
     int *pfFirstCall
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingCreateNP (
      RPC_WSTR ServerName,
      RPC_WSTR ServiceName,
      RPC_WSTR NetworkOptions,
      RPC_BINDING_HANDLE *Binding
    );

__declspec(dllimport)
void
__stdcall
I_RpcSsDontSerializeContext (
    void
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcLaunchDatagramReceiveThread(
    void  * pAddress
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcServerRegisterForwardFunction (
     RPC_FORWARD_FUNCTION  * pForwardFunction
    );

RPC_ADDRESS_CHANGE_FN * __stdcall
I_RpcServerInqAddressChangeFn(
    void
    );

RPC_STATUS __stdcall
I_RpcServerSetAddressChangeFn(
     RPC_ADDRESS_CHANGE_FN * pAddressChangeFn
    );








__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqLocalConnAddress (
     RPC_BINDING_HANDLE Binding,
      void *Buffer,
      unsigned long *BufferSize,
     unsigned long *AddressFormat
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqRemoteConnAddress (
     RPC_BINDING_HANDLE Binding,
      void *Buffer,
      unsigned long *BufferSize,
     unsigned long *AddressFormat
    );

__declspec(dllimport)
void
__stdcall
I_RpcSessionStrictContextHandle (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcTurnOnEEInfoPropagation (
    void
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcConnectionInqSockBuffSize(
   unsigned long  * RecvBuffSize,
   unsigned long  * SendBuffSize
  );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcConnectionSetSockBuffSize(
    unsigned long RecvBuffSize,
    unsigned long SendBuffSize
   );

typedef
void
(*RPCLT_PDU_FILTER_FUNC) (
     void *Buffer,
     unsigned int BufferLength,
     int fDatagram
    );

typedef
void
(__cdecl *RPC_SETFILTER_FUNC) (
     RPCLT_PDU_FILTER_FUNC pfnFilter
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcServerStartListening(
    void * hWnd
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcServerStopListening(
    void
    );

typedef RPC_STATUS (*RPC_BLOCKING_FN) (
     void * hWnd,
     void * Context,
      void * hSyncEvent
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcBindingSetAsync(
     RPC_BINDING_HANDLE Binding,
     RPC_BLOCKING_FN BlockingFn,
     unsigned long ServerTid
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcSetThreadParams(
     int fClientFree,
      void *Context,
      void * hWndClient
    );

__declspec(dllimport)
unsigned int
__stdcall
I_RpcWindowProc(
     void * hWnd,
     unsigned int Message,
     unsigned int wParam,
     unsigned long lParam
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointA (
      RPC_CSTR Protseq,
      RPC_CSTR Endpoint
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointW (
      RPC_WSTR Protseq,
      RPC_WSTR Endpoint
    );








__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqTransportType(
     unsigned int  * Type
    );

__declspec(dllimport)
long
__stdcall
I_RpcMapWin32Status (
     RPC_STATUS Status
    );







typedef struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
{
    unsigned long BufferSize;   
      char *Buffer;               
} RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;

typedef struct _RDR_CALLOUT_STATE
{
    
    RPC_STATUS LastError;
    void *LastEEInfo;

    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;

    
    unsigned short *ServerName;   
    unsigned short *ServerPort;   
    unsigned short *RemoteUser;   
    unsigned short *AuthType;     
    unsigned char ResourceTypePresent;
    unsigned char SessionIdPresent;
    unsigned char InterfacePresent;
    UUID ResourceType;
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void *CertContext;            
                                  
                                  
} RDR_CALLOUT_STATE;



typedef RPC_STATUS
(__stdcall *I_RpcProxyIsValidMachineFn)
        (
          RPC_WSTR Machine,
          RPC_WSTR DotMachine,
          unsigned long PortNumber
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientAddressFn)
        (
         void *Context,
         char *Buffer,
         unsigned long *BufferLength
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetConnectionTimeoutFn)
        (
         unsigned long *ConnectionTimeout
        );


typedef RPC_STATUS
(__stdcall *I_RpcPerformCalloutFn)
    (
     void *Context,
     RDR_CALLOUT_STATE *CallOutState,
     RPC_HTTP_REDIRECTOR_STAGE Stage
    );

typedef void
(__stdcall *I_RpcFreeCalloutStateFn)
    (
     RDR_CALLOUT_STATE *CallOutState
    );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientSessionAndResourceUUID)
        (
          void *Context,
          int *SessionIdPresent,
          UUID *SessionId,
          int *ResourceIdPresent,
          UUID *ResourceId
        );




typedef RPC_STATUS
(__stdcall *I_RpcProxyFilterIfFn)
    (
      void *Context,
      UUID *IfUuid,
      unsigned short IfMajorVersion,
      int *fAllow
    );

typedef enum RpcProxyPerfCounters
{
    RpcCurrentUniqueUser = 1,    
    RpcBackEndConnectionAttempts, 
    RpcBackEndConnectionFailed, 
    RpcRequestsPerSecond, 
    RpcIncomingConnections, 
    RpcIncomingBandwidth, 
    RpcOutgoingBandwidth, 
    RpcAttemptedLbsDecisions, 
    RpcFailedLbsDecisions, 
    RpcAttemptedLbsMessages, 
    RpcFailedLbsMessages, 
    RpcLastCounter
} RpcPerfCounters;

typedef void
(__stdcall *I_RpcProxyUpdatePerfCounterFn)
    (
      RpcPerfCounters Counter,
      int ModifyTrend,
      unsigned long Size
    );

 typedef void
(__stdcall *I_RpcProxyUpdatePerfCounterBackendServerFn)
    (
      unsigned short* MachineName,
      int IsConnectEvent
    );







typedef struct tagI_RpcProxyCallbackInterface
{
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
    I_RpcPerformCalloutFn PerformCalloutFn;
    I_RpcFreeCalloutStateFn FreeCalloutStateFn;
    I_RpcProxyGetClientSessionAndResourceUUID GetClientSessionAndResourceUUIDFn;

    I_RpcProxyFilterIfFn ProxyFilterIfFn;
    I_RpcProxyUpdatePerfCounterFn RpcProxyUpdatePerfCounterFn;
    I_RpcProxyUpdatePerfCounterBackendServerFn RpcProxyUpdatePerfCounterBackendServerFn;

} I_RpcProxyCallbackInterface;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcProxyNewConnection (
     unsigned long ConnectionType,
     unsigned short *ServerAddress,
     unsigned short *ServerPort,
     unsigned short *MinConnTimeout,
     void *ConnectionParameter,
      RDR_CALLOUT_STATE *CallOutState,
     I_RpcProxyCallbackInterface *ProxyCallbackInterface
    );

























__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReplyToClientWithStatus (
     void *ConnectionParameter,
     RPC_STATUS RpcStatus
    );

__declspec(dllimport)
void
__stdcall
I_RpcRecordCalloutFailure (
     RPC_STATUS RpcStatus,
     RDR_CALLOUT_STATE *CallOutState,
     unsigned short *DllName
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcMgmtEnableDedicatedThreadPool (
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetDefaultSD(
      void  ** ppSecurityDescriptor
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcOpenClientProcess(
      RPC_BINDING_HANDLE Binding,
      unsigned long DesiredAccess,
     void** ClientProcess
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsServerLocal(
      RPC_BINDING_HANDLE Binding,
      unsigned int * ServerLocalFlag
    );

RPC_STATUS __stdcall
I_RpcBindingSetPrivateOption (
      RPC_BINDING_HANDLE hBinding,
      unsigned long      option,
      ULONG_PTR          optionValue
    );






RPC_STATUS
__stdcall
I_RpcServerSubscribeForDisconnectNotification (
      RPC_BINDING_HANDLE Binding,
      void * hEvent
    );

RPC_STATUS
__stdcall
I_RpcServerGetAssociationID (
      RPC_BINDING_HANDLE Binding,
      unsigned long * AssociationID
    );

__declspec(dllimport)
long
__stdcall
I_RpcServerDisableExceptionFilter (
    );




#pragma endregion


}







}




























#pragma once


#pragma region Desktop Family


typedef void  * RPC_NS_HANDLE;















__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR  *BindingVec,
      UUID_VECTOR  *ObjectUuidVec
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID_VECTOR  *ObjectUuidVec
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR  *BindingVec,
      UUID_VECTOR  *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID_VECTOR  *ObjectUuidVec
    );





RPC_STATUS __stdcall
RpcNsBindingExportPnPA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID_VECTOR *ObjectVector
    );



RPC_STATUS __stdcall
RpcNsBindingExportPnPW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID_VECTOR *ObjectVector
    );





__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID  *ObjUuid,
      unsigned long BindingMaxCount,
      RPC_NS_HANDLE  *LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID  *ObjUuid,
      unsigned long BindingMaxCount,
      RPC_NS_HANDLE  *LookupContext
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupNext(
      RPC_NS_HANDLE LookupContext,
     RPC_BINDING_VECTOR  *  * BindingVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupDone(
      RPC_NS_HANDLE  * LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteA(
      unsigned long GroupNameSyntax,
      RPC_CSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddA(
      unsigned long GroupNameSyntax,
      RPC_CSTR GroupName,
      unsigned long MemberNameSyntax,
      RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveA(
      unsigned long GroupNameSyntax,
      RPC_CSTR GroupName,
      unsigned long MemberNameSyntax,
      RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginA(
      unsigned long GroupNameSyntax,
      RPC_CSTR GroupName,
      unsigned long MemberNameSyntax,
      RPC_NS_HANDLE  *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextA(
      RPC_NS_HANDLE InquiryContext,
     RPC_CSTR  *MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteW(
      unsigned long GroupNameSyntax,
      RPC_WSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddW(
      unsigned long GroupNameSyntax,
      RPC_WSTR GroupName,
      unsigned long MemberNameSyntax,
      RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveW(
      unsigned long GroupNameSyntax,
      RPC_WSTR GroupName,
      unsigned long MemberNameSyntax,
      RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginW(
      unsigned long GroupNameSyntax,
      RPC_WSTR GroupName,
      unsigned long MemberNameSyntax,
      RPC_NS_HANDLE  *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextW(
      RPC_NS_HANDLE InquiryContext,
     RPC_WSTR  *MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteA(
      unsigned long ProfileNameSyntax,
      RPC_CSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddA(
      unsigned long ProfileNameSyntax,
      RPC_CSTR ProfileName,
      RPC_IF_ID  *IfId,
      unsigned long MemberNameSyntax,
      RPC_CSTR MemberName,
      unsigned long Priority,
      RPC_CSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveA(
      unsigned long ProfileNameSyntax,
      RPC_CSTR ProfileName,
      RPC_IF_ID  *IfId,
      unsigned long MemberNameSyntax,
      RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginA(
      unsigned long ProfileNameSyntax,
      RPC_CSTR ProfileName,
      unsigned long InquiryType,
      RPC_IF_ID  *IfId,
      unsigned long VersOption,
      unsigned long MemberNameSyntax,
      RPC_CSTR MemberName,
      RPC_NS_HANDLE  *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextA(
      RPC_NS_HANDLE InquiryContext,
      RPC_IF_ID  *IfId,
      RPC_CSTR  *MemberName,
      unsigned long  *Priority,
      RPC_CSTR  *Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteW(
      unsigned long ProfileNameSyntax,
      RPC_WSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddW(
      unsigned long ProfileNameSyntax,
      RPC_WSTR ProfileName,
      RPC_IF_ID  *IfId,
      unsigned long MemberNameSyntax,
      RPC_WSTR MemberName,
      unsigned long Priority,
      RPC_WSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveW(
      unsigned long ProfileNameSyntax,
      RPC_WSTR ProfileName,
      RPC_IF_ID  *IfId,
      unsigned long MemberNameSyntax,
      RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginW(
      unsigned long ProfileNameSyntax,
      RPC_WSTR ProfileName,
      unsigned long InquiryType,
      RPC_IF_ID  *IfId,
      unsigned long VersOption,
      unsigned long MemberNameSyntax,
      RPC_WSTR MemberName,
      RPC_NS_HANDLE  *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextW(
      RPC_NS_HANDLE InquiryContext,
      RPC_IF_ID  *IfId,
      RPC_WSTR  *MemberName,
      unsigned long  *Priority,
      RPC_WSTR  *Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_NS_HANDLE  *InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_NS_HANDLE  *InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqNext(
      RPC_NS_HANDLE InquiryContext,
     UUID  * ObjUuid
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_CSTR  *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_ID  *IfId,
      unsigned long VersOption,
      UUID_VECTOR  *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_ID_VECTOR  *  *IfIdVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtHandleSetExpAge(
     RPC_NS_HANDLE NsHandle,
     unsigned long ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtInqExpAge(
     unsigned long  * ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtSetExpAge(
     unsigned long ExpirationAge
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_WSTR  *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_ID  *IfId,
      unsigned long VersOption,
      UUID_VECTOR  *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_ID_VECTOR  *  *IfIdVec
    );





__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID  *ObjUuid,
      RPC_NS_HANDLE  *ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID  *ObjUuid,
      RPC_NS_HANDLE  *ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportNext(
     RPC_NS_HANDLE ImportContext,
     RPC_BINDING_HANDLE   * Binding
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportDone(
      RPC_NS_HANDLE  * ImportContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingSelect(
      RPC_BINDING_VECTOR  * BindingVec,
     RPC_BINDING_HANDLE   * Binding
    );





















































#pragma endregion






















#pragma once





#pragma region Desktop Family












































































































































































































































































































































































































































































































































#pragma endregion












































































#pragma once



























#pragma warning(disable:4103)

#pragma pack(push,8)











extern "C" {


#pragma region Desktop Family



















typedef
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,

    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,

    RpcNotificationTypeCallback
} RPC_NOTIFICATION_TYPES;


typedef
enum _RPC_ASYNC_EVENT {
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete,
    RpcClientDisconnect,
    RpcClientCancel
    } RPC_ASYNC_EVENT;
    











struct _RPC_ASYNC_STATE;

typedef void __stdcall
RPCNOTIFICATION_ROUTINE (
                  struct _RPC_ASYNC_STATE *pAsync,
                  void *Context,
                  RPC_ASYNC_EVENT Event);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

typedef union _RPC_ASYNC_NOTIFICATION_INFO {

    
    
    
    struct {
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        HANDLE hThread;
        } APC;




    
    
    
    struct {
        HANDLE hIOPort;
        DWORD dwNumberOfBytesTransferred;
        DWORD_PTR dwCompletionKey;
        LPOVERLAPPED lpOverlapped;
        } IOC;



    
    
    
    struct {
        HWND hWnd;
        UINT Msg;
        } HWND;





    
    
    
    
    HANDLE hEvent;
    






    
    
    
    
    
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;

typedef struct _RPC_ASYNC_STATE {
    unsigned int    Size; 
    unsigned long   Signature;
    long   Lock;
    unsigned long   Flags;
    void           *StubInfo;
    void           *UserInfo;
    void           *RuntimeInfo;
    RPC_ASYNC_EVENT Event;

    RPC_NOTIFICATION_TYPES NotificationType;
    RPC_ASYNC_NOTIFICATION_INFO u;

    LONG_PTR Reserved[4];
    } RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;







__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcAsyncInitializeHandle (
      PRPC_ASYNC_STATE pAsync,
      unsigned int     Size
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcAsyncRegisterInfo (
      PRPC_ASYNC_STATE pAsync
    ) ;


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcAsyncGetCallStatus (
      PRPC_ASYNC_STATE pAsync
    ) ;

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcAsyncCompleteCall (
      PRPC_ASYNC_STATE pAsync,
      void *Reply
    ) ;

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcAsyncAbortCall (
      PRPC_ASYNC_STATE pAsync,
      unsigned long ExceptionCode
    ) ;

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcAsyncCancelCall (
      PRPC_ASYNC_STATE pAsync,
      BOOL fAbort
    ) ;






typedef enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary
} ExtendedErrorParamTypes;




typedef struct tagBinaryParam
{
    void *Buffer;
    short Size;
} BinaryParam;

typedef struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    union
        {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        long LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
        } u;
} RPC_EE_INFO_PARAM;










typedef struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union
        {

        SYSTEMTIME SystemTime;
        FILETIME FileTime;



        } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
} RPC_EXTENDED_ERROR_INFO;

typedef struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void *CurrentPos;
    void *Head;
} RPC_ERROR_ENUM_HANDLE;

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorStartEnumeration (
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorGetNextRecord (
      RPC_ERROR_ENUM_HANDLE *EnumHandle, 
      BOOL CopyStrings, 
      RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorEndEnumeration (
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorResetEnumeration (
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorGetNumberOfRecords (
      RPC_ERROR_ENUM_HANDLE *EnumHandle, 
      int *Records
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorSaveErrorInfo (
      RPC_ERROR_ENUM_HANDLE *EnumHandle, 
     PVOID *ErrorBlob, 
      size_t *BlobSize
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorLoadErrorInfo (
      PVOID ErrorBlob, 
      size_t BlobSize, 
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorAddRecord (
      RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
void 
__stdcall
RpcErrorClearInformation (
    void
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCleanupThread (
      DWORD dwTimeout
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcGetAuthorizationContextForClient (
      RPC_BINDING_HANDLE ClientBinding,
      BOOL ImpersonateOnReturn,
      PVOID Reserved1,
      PLARGE_INTEGER pExpirationTime,
      LUID Reserved2,
      DWORD Reserved3,
      PVOID Reserved4,
      PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcFreeAuthorizationContext (
      PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockExclusive (
      RPC_BINDING_HANDLE ServerBindingHandle,
      PVOID UserContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockShared (
      RPC_BINDING_HANDLE ServerBindingHandle,
      PVOID UserContext
    );


typedef enum tagRpcLocalAddressFormat
{
    rlafInvalid = 0,
    rlafIPv4,
    rlafIPv6
} RpcLocalAddressFormat;

typedef struct _RPC_CALL_LOCAL_ADDRESS_V1
{
    unsigned int Version;
    void *Buffer;
    unsigned long BufferSize;
    RpcLocalAddressFormat AddressFormat;
} RPC_CALL_LOCAL_ADDRESS_V1, *PRPC_CALL_LOCAL_ADDRESS_V1;
























typedef struct tagRPC_CALL_ATTRIBUTES_V1_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V1_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_A;






typedef enum tagRpcCallType
{
    rctInvalid = 0,
    rctNormal,
    rctTraining,
    rctGuaranteed
} RpcCallType;

typedef enum tagRpcCallClientLocality
{
    rcclInvalid = 0,
    rcclLocal,
    rcclRemote,
    rcclClientUnknownLocality
} RpcCallClientLocality;


typedef struct tagRPC_CALL_ATTRIBUTES_V2_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID; 
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;	
    unsigned short OpNum;
    UUID InterfaceUuid;        
} RPC_CALL_ATTRIBUTES_V2_W;
    
typedef struct tagRPC_CALL_ATTRIBUTES_V2_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID; 
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;	
    unsigned short OpNum;
    UUID InterfaceUuid;    
} RPC_CALL_ATTRIBUTES_V2_A;



typedef struct tagRPC_CALL_ATTRIBUTES_V3_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID; 
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;	
    unsigned short OpNum;
    UUID InterfaceUuid;
    unsigned long          ClientIdentifierBufferLength;
    unsigned char          *ClientIdentifier;
} RPC_CALL_ATTRIBUTES_V3_W;
    
typedef struct tagRPC_CALL_ATTRIBUTES_V3_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID; 
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;	
    unsigned short OpNum;
    UUID InterfaceUuid;    
    unsigned long          ClientIdentifierBufferLength;
    unsigned char          *ClientIdentifier;
} RPC_CALL_ATTRIBUTES_V3_A;



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesW (
      RPC_BINDING_HANDLE ClientBinding,
      void *RpcCallAttributes
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesA (
      RPC_BINDING_HANDLE ClientBinding,
      void *RpcCallAttributes
    );






















typedef RPC_CALL_ATTRIBUTES_V3_A RPC_CALL_ATTRIBUTES;








typedef enum _RPC_NOTIFICATIONS
{
    RpcNotificationCallNone = 0,
    RpcNotificationClientDisconnect = 1,
    RpcNotificationCallCancel = 2      
} RPC_NOTIFICATIONS;



__declspec(dllimport)
RPC_STATUS 
__stdcall 
RpcServerSubscribeForNotification (
      RPC_BINDING_HANDLE Binding,
      RPC_NOTIFICATIONS Notification,
      RPC_NOTIFICATION_TYPES NotificationType,
      RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall 
RpcServerUnsubscribeForNotification (
      RPC_BINDING_HANDLE Binding,
      RPC_NOTIFICATIONS Notification,
      unsigned long *NotificationsQueued
    );



 

__declspec(dllimport)
RPC_STATUS 
__stdcall 
RpcBindingBind (
      PRPC_ASYNC_STATE pAsync,
      RPC_BINDING_HANDLE Binding,
      RPC_IF_HANDLE IfSpec    
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall 
RpcBindingUnbind (
      RPC_BINDING_HANDLE Binding
    );






 
RPC_STATUS __stdcall
I_RpcAsyncSetHandle (
       PRPC_MESSAGE Message,
       PRPC_ASYNC_STATE pAsync
    );

 
RPC_STATUS __stdcall
I_RpcAsyncAbortCall (
      PRPC_ASYNC_STATE pAsync,
      unsigned long ExceptionCode
    ) ;


int 
__stdcall
I_RpcExceptionFilter (
      unsigned long ExceptionCode
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqClientTokenAttributes (
      RPC_BINDING_HANDLE Binding,
      LUID * TokenId,
      LUID * AuthenticationId,
      LUID * ModifiedId
    );
    



#pragma endregion


}






























#pragma warning(disable:4103)

#pragma pack(pop)












































#pragma warning(disable:4103)

#pragma pack(pop)











}
































































































typedef char ON__INT8;


typedef unsigned char ON__UINT8;


typedef short ON__INT16;


typedef unsigned short ON__UINT16;


typedef int ON__INT32;


typedef unsigned int ON__UINT32;






typedef __int64 ON__INT64;


typedef unsigned __int64 ON__UINT64;

























typedef int ON_BOOL32;








typedef __int64 ON__INT_PTR;
typedef unsigned __int64 ON__UINT_PTR;



























































int on_vsnprintf( char *buffer, size_t count, const char *format, va_list argptr );

int on_vsnwprintf( wchar_t *buffer, size_t count, const wchar_t *format, va_list argptr );














































































































































































































































































































































































































































































































































































































































































































































































extern "C" {


extern  const double ON_DBL_QNAN;
extern  const double ON_DBL_PINF;
extern  const double ON_DBL_NINF;

extern  const float  ON_FLT_QNAN;
extern  const float  ON_FLT_PINF;
extern  const float  ON_FLT_NINF;






















void ON_DBL_SNAN( double* x );


void ON_FLT_SNAN( float* x );

}





























































struct tagON_2dex
{
  int i;
  int j;
};

typedef struct tagON_2dex ON_2dex;





struct tagON_3dex
{
  int i;
  int j;
  int k;
};

typedef struct tagON_3dex ON_3dex;






struct tagON_4dex
{
  int i;
  int j;
  int k;
  int l;
};

typedef struct tagON_4dex ON_4dex;

union ON_U
{
  char      b[8]; 
  ON__INT64 h;    
  ON__INT32 i;    
  int       j[2]; 
  void*     p;
  double    d;
};




class  ON
{
public:
  




  static void Begin();


  





  static void End();

  
  
  static
  int Version();

  
  
  static
  const char* SourceRevision();

  static
  const char* DocumentationRevision();

  static
  const char* SourceBranch();

  static
  const char* DocumentationBranch();


  

  static
  FILE* OpenFile( 
          const char* filename,
          const char* filemode
          );

  static
  FILE* OpenFile( 
          const wchar_t* filename,
          const wchar_t* filemode
          );

  static
  int CloseFile( 
          FILE* 
          );

  static
  int CloseAllFiles(); 

  











  static
  bool GetFileStats( const wchar_t* filename,
                     size_t* filesize,
                     time_t* create_time,
                     time_t* lastmodify_time
                    );

  static
  bool GetFileStats( FILE* fp,
                     size_t* filesize,
                     time_t* create_time,
                     time_t* lastmodify_time
                    );

  


  static bool IsDirectory( const wchar_t* pathname );
  static bool IsDirectory( const char* utf8pathname );

  





  static int IsOpenNURBSFile( const wchar_t* pathname );
  static int IsOpenNURBSFile( const char* utf8pathname );
  static int IsOpenNURBSFile( FILE* fp );

  
  enum eAnnotationType
  {
    dtNothing,
    dtDimLinear,
    dtDimAligned,
    dtDimAngular,
    dtDimDiameter,
    dtDimRadius,
    dtLeader,
    dtTextBlock,
    dtDimOrdinate,
  };

  static eAnnotationType AnnotationType(int); 


  
  enum eTextDisplayMode
  {
    dtNormal = 0,
    dtHorizontal = 1,
    dtAboveLine = 2,
    dtInLine = 3,
  };

  static eTextDisplayMode TextDisplayMode( int);

  
  enum active_space
  {
    no_space    = 0,
    model_space = 1, 
    page_space  = 2  
  };

  static active_space ActiveSpace(int); 



  
  enum unit_system
  {
    
    
    
    no_unit_system =  0, 

    
    angstroms      = 12,  

    
    nanometers     = 13,  
    microns        =  1,  
    millimeters    =  2,  
    centimeters    =  3,  
    decimeters     = 14,  
    meters         =  4,
    dekameters     = 15,  
    hectometers    = 16,  
    kilometers     =  5,  
    megameters     = 17,  
    gigameters     = 18,  

    
    microinches    =  6,  
    mils           =  7,  
    inches         =  8,  
    feet           =  9,  
    yards          = 19,  
    miles          = 10,  

    
    printer_point  = 20,  
    printer_pica   = 21,  

    
    nautical_mile  = 22, 
                         
                         

    
    astronomical   = 23, 
                         
                         
                         
    lightyears     = 24, 
                         
                         
                         
                         
                         
    parsecs        = 25, 
                         

    
    custom_unit_system = 11 
  };

  static unit_system UnitSystem(int); 

  
















  static double UnitScale(
      ON::unit_system us_from,
      ON::unit_system us_to
      );
  static double UnitScale(
      const class ON_UnitSystem& us_from, 
      const class ON_UnitSystem& us_to
      );
  static double UnitScale(
      ON::unit_system us_from,
      const class ON_UnitSystem& us_to
      );
  static double UnitScale(
      const class ON_UnitSystem& us_from, 
      ON::unit_system us_to
      );
  static double UnitScale(
      const class ON_3dmUnitsAndTolerances& us_from, 
      const class ON_3dmUnitsAndTolerances& us_to
      );


  









  static const wchar_t* NameReferenceDelimiter();

  







  static unsigned int NameReferenceDelimiterLength();

  



















  static const wchar_t* IsNameReferenceDelimiter(const wchar_t* s);

  
  enum distance_display_mode
  {
    decimal     = 0, 
    fractional  = 1,
    feet_inches = 2
  };

  static distance_display_mode DistanceDisplayMode(int); 


  
  enum point_style 
  {
    unknown_point_style   = 0,
    not_rational          = 1,
    homogeneous_rational  = 2,
    euclidean_rational    = 3,
    intrinsic_point_style = 4, 
    point_style_count     = 5
  };

  static point_style PointStyle(int); 

  
  enum knot_style 
  {               
    unknown_knot_style     = 0, 
    uniform_knots          = 1, 
    quasi_uniform_knots    = 2, 
    piecewise_bezier_knots = 3, 
    clamped_end_knots      = 4, 
    non_uniform_knots      = 5, 
    knot_style_count       = 6
  };

  static knot_style KnotStyle(int); 

  
  enum continuity
  {
    unknown_continuity = 0,

    
    
    
    C0_continuous =  1, 
    C1_continuous =  2, 
    C2_continuous =  3, 
    G1_continuous =  4, 
    G2_continuous =  5, 

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    C0_locus_continuous =  6, 
    C1_locus_continuous =  7, 
    C2_locus_continuous =  8, 
    G1_locus_continuous =  9, 
    G2_locus_continuous = 10, 

    Cinfinity_continuous = 11, 
    Gsmooth_continuous = 12    
  };

  



  static continuity Continuity(int);

  





  static continuity ParametricContinuity(int);

  






  static continuity PolylineContinuity(int);

  
  enum curve_style 
  {
    unknown_curve_style   =  0,
    line                  =  1,
    circle                =  2,
    ellipse               =  3, 
    parabola              =  4,
    hyperbola             =  5,
    planar_polyline       =  6, 
    polyline              =  7, 
    planar_freeform_curve =  8, 
    freeform_curve        =  9, 
    curve_style_count     = 10
  };

  static curve_style CurveStyle(int); 

  
  enum surface_style 
  {
    unknown_surface_style =  0,
    plane                 =  1,
    circular_cylinder     =  2, 
    elliptical_cylinder   =  3, 
    circular_cone         =  4, 
    elliptical_cone       =  5, 
    sphere                =  6, 
    torus                 =  7, 
    surface_of_revolution =  8, 
    ruled_surface         =  9, 
    freeform_surface      = 10, 
    surface_style_count   = 11
  };

  static surface_style SurfaceStyle(int); 

  
  enum sort_algorithm
  {
    heap_sort  = 0,
    quick_sort = 1
  };

  static sort_algorithm SortAlgorithm(int); 

  
  enum endian {
    little_endian = 0, 
    big_endian    = 1  
  };

  static endian Endian(int); 
  static endian Endian();    

  
  enum archive_mode
  {
    unknown_archive_mode = 0,
    read      = 1, 
    write     = 2, 
    readwrite = 3,
    read3dm   = 5,
    write3dm  = 6
  };
  static archive_mode ArchiveMode(int); 


  

  
  
  
  
  enum view_projection
  { 
    unknown_view       = 0,
    parallel_view      = 1,
    perspective_view   = 2
  };

  









  static view_projection ViewProjection(int i);

  





  static bool IsPerspectiveProjection( ON::view_projection projection );


  





  static bool IsParallelProjection( ON::view_projection projection );

  

  enum coordinate_system 
  {
    world_cs  = 0, 
    camera_cs = 1, 
    clip_cs   = 2, 
    screen_cs = 3 
  };

  static coordinate_system CoordinateSystem(int); 

  
	enum exception_type 
  {
    unknown_exception = 0,
		out_of_memory,  
    corrupt_object,               
                                  
		unable_to_write_archive,      
		unable_to_read_archive,       
		unable_to_seek_archive,       
		unexpected_end_of_archive,    
		unexpected_value_in_archive   
  };
  static exception_type ExceptionType(int); 

  
  
	enum layer_mode 
  {
    normal_layer       = 0, 
    hidden_layer       = 1, 
    locked_layer       = 2, 
    layer_mode_count   = 3
  };
  static layer_mode LayerMode(int); 

  
	enum object_mode 
  {
    normal_object    = 0, 
    hidden_object    = 1, 
    locked_object    = 2, 
    idef_object      = 3, 
                          
                          
    object_mode_count = 4
  };
  static object_mode ObjectMode(int); 

  
	enum object_color_source
  {
    color_from_layer    = 0, 
    color_from_object   = 1, 
    color_from_material = 2, 
    color_from_parent   = 3  
                             
  };
  static object_color_source ObjectColorSource(int); 

  
	enum plot_color_source
  {
    plot_color_from_layer   = 0, 
    plot_color_from_object  = 1, 
    plot_color_from_display = 2, 
    plot_color_from_parent  = 3  
                                 
  };
  static plot_color_source PlotColorSource(int); 

  
	enum plot_weight_source
  {
    plot_weight_from_layer   = 0, 
    plot_weight_from_object  = 1, 
    plot_weight_from_parent  = 3  
                                  
  };
  static plot_weight_source PlotWeightSource(int); 

  
	enum object_linetype_source
  {
    linetype_from_layer  = 0, 
    linetype_from_object = 1, 
    linetype_from_parent = 3  
                              
  };
  static object_linetype_source ObjectLinetypeSource(int); 

  
	enum object_material_source
  {
    material_from_layer  = 0, 
    material_from_object = 1, 
    material_from_parent = 3  
                              
                              
                              
                              
                              
                              
                              
  };
  static object_material_source ObjectMaterialSource(int); 

  
  enum light_style
  {
    unknown_light_style      = 0,
    
    
    
    camera_directional_light = 4, 
    camera_point_light       = 5, 
    camera_spot_light        = 6,
    world_directional_light  = 7, 
    world_point_light        = 8, 
    world_spot_light         = 9,
    ambient_light            = 10, 
    world_linear_light       = 11,
    world_rectangular_light  = 12,
    light_style_count        = 13
  };
  static light_style LightStyle(int); 

  
  enum curvature_style
  {
    unknown_curvature_style = 0,
    gaussian_curvature = 1,
    mean_curvature = 2, 
    min_curvature  = 3, 
    max_curvature  = 4, 
    curvature_style_count = 5
  };
  static curvature_style CurvatureStyle(int); 

  
  enum display_mode
  {
    default_display       = 0, 
    wireframe_display     = 1, 
    shaded_display        = 2, 
    renderpreview_display = 3  
  };
  static display_mode DisplayMode(int); 


  enum view_type
  {
    model_view_type  = 0,       
    page_view_type   = 1,       
                                
                                
                                
                                
    nested_view_type = 2,       
                                
                                
  };
  static view_type ViewType(int); 


  
  
  
  enum texture_mode
  {
    no_texture = 0,        
    modulate_texture = 1,  
    decal_texture = 2      
  };
  
  static texture_mode TextureMode(int); 
  
  
  

  
  enum object_type
  {
    
    
    
    
    unknown_object_type  =          0,

    point_object         =          1, 
    pointset_object      =          2, 
    curve_object         =          4, 
    surface_object       =          8, 
    brep_object          =       0x10, 
    mesh_object          =       0x20, 
    layer_object         =       0x40, 
    material_object      =       0x80, 
    light_object         =      0x100, 
    annotation_object    =      0x200, 
    userdata_object      =      0x400, 
    instance_definition  =      0x800, 
    instance_reference   =     0x1000, 
    text_dot             =     0x2000, 
    grip_object          =     0x4000, 
    detail_object        =     0x8000, 
    hatch_object         =    0x10000, 
    morph_control_object =    0x20000, 
    loop_object          =    0x80000, 
    polysrf_filter       =   0x200000, 
    edge_filter          =   0x400000, 
    polyedge_filter      =   0x800000, 
    meshvertex_object    = 0x01000000, 
    meshedge_object      = 0x02000000, 
    meshface_object      = 0x04000000, 
    cage_object          = 0x08000000, 
    phantom_object       = 0x10000000,
    clipplane_object     = 0x20000000,
    beam_object          = 0x40000000, 
    extrusion_object     = 0x40000000, 
    
    any_object           = 0xFFFFFFFF

    
  };

  static object_type ObjectType(int); 

  
  enum bitmap_type
  {
    unknown_bitmap_type = 0,
    windows_bitmap = 1,     
    opengl_bitmap = 2,      
    png_bitmap = 3
  };
  static bitmap_type BitmapType(int); 

  enum object_decoration
  {
    no_object_decoration = 0,
    start_arrowhead      = 0x08, 
    end_arrowhead        = 0x10, 
    both_arrowhead       = 0x18  
  };
  static object_decoration ObjectDecoration(int); 

  enum mesh_type
  {
    default_mesh  = 0,
    render_mesh   = 1,
    analysis_mesh = 2,
    preview_mesh  = 3,
    any_mesh      = 4
  };
  static mesh_type MeshType(int); 


  
  
  
  
  
  
  
  
  enum osnap_mode
  {
    os_none          =          0,
    os_near          =          2,
    os_focus         =          8,
    os_center        =       0x20,
    os_vertex        =       0x40,
    os_knot          =       0x80,
    os_quadrant      =      0x200,
    os_midpoint      =      0x800,
    os_intersection  =     0x2000,
    os_end           =    0x20000,
    os_perpendicular =    0x80000,
    os_tangent       =   0x200000,
    os_point         = 0x08000000,
    os_all_snaps     = 0xFFFFFFFF
  };
  static osnap_mode OSnapMode(int); 


  
  enum eCurveType
  {
    ctCurve, 
    ctArc,
    ctCircle,
    ctLine,
    ctNurbs,
    ctOnsurface,
    ctProxy,
    ctPolycurve,
    ctPolyline,
  };


  
  
  
  
  enum cubic_loft_end_condition
  {
    cubic_loft_ec_quadratic      = 0,
    cubic_loft_ec_linear         = 1,
    cubic_loft_ec_cubic          = 2,
    cubic_loft_ec_natural        = 3,
    cubic_loft_ec_unit_tangent   = 4,
    cubic_loft_ec_1st_derivative = 5,
    cubic_loft_ec_2nd_derivative = 6,
    cubic_loft_ec_free_cv        = 7
  };

  










  static 
  cubic_loft_end_condition CubicLoftEndCondition(int i); 

private:
  
  
  
  
};








class  ON_COMPONENT_INDEX
{
public:

  
  
  
  enum TYPE
  {
    invalid_type       =   0,

    brep_vertex        =   1,
    brep_edge          =   2,
    brep_face          =   3,
    brep_trim          =   4,
    brep_loop          =   5,

    mesh_vertex        =  11,
    meshtop_vertex     =  12,
    meshtop_edge       =  13,
    mesh_face          =  14,

    idef_part          =  21,

    polycurve_segment  =  31,

    pointcloud_point   =  41,

    group_member       =  51,


    extrusion_bottom_profile = 61, 
                                   
    extrusion_top_profile    = 62, 
                                   
    extrusion_wall_edge      = 63, 
                                   
                                   
    extrusion_wall_surface   = 64, 
                                   
    extrusion_cap_surface    = 65, 
                                   
    extrusion_path           = 66, 
                                   

    dim_linear_point   = 100,
    dim_radial_point   = 101,
    dim_angular_point  = 102,
    dim_ordinate_point = 103,
    dim_text_point     = 104,

    no_type           = 0xFFFFFFFF
  };

  









  static 
  TYPE Type(int i);

  







  static
  int Compare( const ON_COMPONENT_INDEX* a, const ON_COMPONENT_INDEX* b);

  



  ON_COMPONENT_INDEX();

  



  ON_COMPONENT_INDEX(TYPE type,int index);

  bool operator==(const ON_COMPONENT_INDEX& other) const;
  bool operator!=(const ON_COMPONENT_INDEX& other) const;
  bool operator<(const ON_COMPONENT_INDEX& other) const;
  bool operator<=(const ON_COMPONENT_INDEX& other) const;
  bool operator>(const ON_COMPONENT_INDEX& other) const;
  bool operator>=(const ON_COMPONENT_INDEX& other) const;

  void Set(TYPE type,int index);

  



  void UnSet();

  




  bool IsSet() const;

  




  bool IsMeshComponentIndex() const;

  




  bool IsBrepComponentIndex() const;

  



  bool IsIDefComponentIndex() const;

  



  bool IsPolyCurveComponentIndex() const;

  



  bool IsGroupMemberComponentIndex() const;

  




  bool IsExtrusionProfileComponentIndex() const;

  



  bool IsExtrusionPathComponentIndex() const;

  



  bool IsExtrusionWallEdgeComponentIndex() const;

  



  bool IsExtrusionWallSurfaceComponentIndex() const;

  




  bool IsExtrusionWallComponentIndex() const;

  





  bool IsExtrusionComponentIndex() const;

  



  bool IsPointCloudComponentIndex() const;

  



  bool IsAnnotationComponentIndex() const;

  TYPE m_type;

  






























  int m_index;
};



extern "C" {





























unsigned int ON_SetStringConversionWindowsCodePage( 
                unsigned int code_page 
                );


























unsigned int ON_GetStringConversionWindowsCodePage();




















unsigned int ON_SetStringConversionWindowsLocaleID( 
                unsigned int locale_id, 
                ON_BOOL32 bWin9X
                );















unsigned int ON_GetStringConversionWindowsLocaleID();




int on_wcsicmp( const wchar_t*, const wchar_t* );



wchar_t* on_wcsupr(wchar_t*);



wchar_t* on_wcslwr(wchar_t*);



wchar_t* on_wcsrev(wchar_t*);





int on_stricmp(const char*, const char*); 





int on_strnicmp(const char * s1, const char * s2, int n);



char* on_strupr(char*);



char* on_strlwr(char*);



char* on_strrev(char*);






int on_WideCharToMultiByte(
    const wchar_t*, 
    int,            
    char*,          
    int             
    );






int on_MultiByteToWideChar(
    const char*, 
    int,         
    wchar_t*,    
    int          
    );












































 void on_splitpath(
  const char* path,
  const char** drive,
  const char** dir,
  const char** fname,
  const char** ext
  );













































 void on_wsplitpath(
  const wchar_t* path,
  const wchar_t** drive,
  const wchar_t** dir,
  const wchar_t** fname,
  const wchar_t** ext
  );

}













































extern "C" {







void ON_ErrorMessage( 
       int,         
       const char*  
       ); 






int     ON_GetErrorCount(void);






int     ON_GetWarningCount(void);







int     ON_GetMathErrorCount(void);


int     ON_GetDebugErrorMessage(void);


void    ON_EnableDebugErrorMessage( int bEnableDebugErrorMessage );



void    ON_Error( const char*, 
                  int,         
                  const char*, 
                  ...          
                  );


void    ON_ErrorEx( const char*, 
                  int,           
                  const char*,   
                  const char*,   
                  ...            
                  );

void    ON_Warning( const char*, 
                    int,         
                    const char*, 
                    ...          
                  );

void    ON_WarningEx( const char*, 
                  int,           
                  const char*,   
                  const char*,   
                  ...            
                  );



void    ON_Assert( int,         
                   const char*, 
                   int,         
                   const char*, 
                   ...          
                  );


void    ON_AssertEx( int,        
                  const char*,   
                  int,           
                  const char*,   
                  const char*,   
                  ...            
                  );


void    ON_MathError( 
        const char*, 
        const char*, 
        const char*  
        );

}
























extern "C" {



size_t ON_MemoryPageSize();




void* ON_MainMemoryPool(void);


void* ON_WorkerMemoryPool(void);


void*  onmalloc( size_t );


void*  onmalloc_from_pool( void*, size_t );


void*  oncalloc( size_t, size_t );


void*  oncalloc_from_pool( void*, size_t, size_t );


void   onfree( void* );


void*  onrealloc( void*, size_t );


void*  onrealloc_from_pool( void*, void*, size_t );


size_t onmsize( const void* );


void*  onmemdup( const void*, size_t );


char*  onstrdup( const char* );


wchar_t* onwcsdup( const wchar_t* );


unsigned char* onmbsdup( const unsigned char* );


size_t onmemoryusecount(
          size_t* malloc_count, 
          size_t* realloc_count, 
          size_t* free_count, 
          size_t* pool_count 
          );


size_t onmemoryusecountex(
          size_t* malloc_count, 
          size_t* realloc_count, 
          size_t* free_count, 
          size_t* pool_count,
          size_t* malloc_zero_count,
          size_t* free_null_count 
          );











}
























extern "C" {

struct ON_RANDOM_NUMBER_CONTEXT
{
  ON__UINT32 mti;     
  ON__UINT32 mt[624]; 
};





















void on_random_number_seed(
        ON__UINT32 s,
        struct ON_RANDOM_NUMBER_CONTEXT* rand_context
        );
























ON__UINT32 on_random_number(
        struct ON_RANDOM_NUMBER_CONTEXT* rand_context
        );











void on_srand(ON__UINT32 s);










ON__UINT32 on_rand(void);


}




class  ON_RandomNumberGenerator
{
public:
  ON_RandomNumberGenerator();

  





  void Seed( ON__UINT32 s );

  



  ON__UINT32 RandomNumber();

  



  double RandomDouble();

  



  double RandomDouble(double t0, double t1);

  










  void RandomPermutation(void* base, size_t nel, size_t sizeof_element );

private:
  struct ON_RANDOM_NUMBER_CONTEXT m_rand_context;
};


























extern "C" {












































ON__UINT16 ON_CRC16(
         ON__UINT16 current_remainder,
         size_t sizeof_buffer,
         const void* buffer
         );











































ON__UINT32 ON_CRC32(
         ON__UINT32 current_remainder,
         size_t sizeof_buffer,
         const void* buffer
         );
































}

























typedef UUID ON_UUID;






















extern "C" {



extern  const ON_UUID ON_nil_uuid;



extern  const ON_UUID ON_max_uuid;









extern  const ON_UUID ON_rhino2_id;
extern  const ON_UUID ON_rhino3_id;
extern  const ON_UUID ON_rhino4_id;
extern  const ON_UUID ON_rhino5_id;
extern  const ON_UUID ON_rhino_id;



extern  const ON_UUID ON_v2_userdata_id;
extern  const ON_UUID ON_v3_userdata_id;
extern  const ON_UUID ON_v4_userdata_id;













extern  const ON_UUID ON_opennurbs4_id;
extern  const ON_UUID ON_opennurbs5_id;
extern  const ON_UUID ON_opennurbs_id;

}













 
bool ON_CreateUuid( ON_UUID& uuid );







class  ON_UuidIndex
{
public:
  ON_UuidIndex();

  


  static 
  int CompareIdAndIndex( const ON_UuidIndex* a, const ON_UuidIndex* b );

  


  static 
  int CompareIndexAndId( const ON_UuidIndex* a, const ON_UuidIndex* b );

  


  static 
  int CompareId( const ON_UuidIndex* a, const ON_UuidIndex* b );

  


  static 
  int CompareIndex( const ON_UuidIndex* a, const ON_UuidIndex* b );

  
  
  
  ON_UUID m_id;
  int m_i;
};















 
int ON_UuidCompare( 
        const ON_UUID* a, 
        const ON_UUID* b 
        );













 
int ON_UuidCompare( 
        const ON_UUID& a, 
        const ON_UUID& b
        );










bool ON_UuidIsNil( 
        const ON_UUID& uuid 
        );










bool ON_UuidIsNotNil( 
        const ON_UUID& uuid 
        );















 
ON_UUID ON_UuidFromString( const char* s );















 
ON_UUID ON_UuidFromString( const wchar_t* s );













 
char* ON_UuidToString( const ON_UUID& uuid, char* s );














 
wchar_t* ON_UuidToString( const ON_UUID& uuid, wchar_t* s );

class ON_String;











 
const char* ON_UuidToString( const ON_UUID& uuid, ON_String& s);

class ON_wString;











 
const wchar_t* ON_UuidToString( const ON_UUID& uuid, ON_wString& s);

























extern "C" {

enum ON_UnicodeEncoding
{
  ON_UTF_unset=0, 
  ON_not_UTF,     
  ON_UTF_8,       
  ON_UTF_16,      
  ON_UTF_16BE,    
  ON_UTF_16LE,    
  ON_UTF_32,      
  ON_UTF_32BE,    
  ON_UTF_32LE     
};









enum ON_UnicodeEncoding ON_UnicodeNativeCPU_UTF16();









enum ON_UnicodeEncoding ON_UnicodeNativeCPU_UTF32();






























enum ON_UnicodeEncoding ON_IsUTFByteOrderMark(
  const void* buffer,
  size_t sizeof_buffer
  );














int ON_IsValidUnicodeCodePoint(
  ON__UINT32 u
  );

struct ON_UnicodeErrorParameters
{
  






































  unsigned int m_error_status;

  





  unsigned int m_error_mask;

  




  ON__UINT32 m_error_code_point;
};




































int ON_DecodeUTF32(
    const ON__UINT32* sUTF32,
    int sUTF32_count,
    struct ON_UnicodeErrorParameters* e,
    ON__UINT32* unicode_code_point
    );






































int ON_DecodeSwapByteUTF32(
    const ON__UINT32* sUTF32,
    int sUTF32_count,
    struct ON_UnicodeErrorParameters* e,
    ON__UINT32* unicode_code_point
    );































int ON_EncodeUTF8( ON__UINT32 u, ON__UINT8 sUTF8[6] );



























int ON_DecodeUTF8(
    const ON__UINT8* sUTF8,
    int sUTF8_count,
    struct ON_UnicodeErrorParameters* e,
    ON__UINT32* unicode_code_point
    );

























int ON_EncodeUTF16( ON__UINT32 unicode_code_point, ON__UINT16 sUTF16[2] );








































int ON_DecodeUTF16(
    const ON__UINT16* sUTF16,
    int sUTF16_count,
    struct ON_UnicodeErrorParameters* e,
    ON__UINT32* unicode_code_point
    );










































int ON_DecodeSwapByteUTF16(
    const ON__UINT16* sUTF16,
    int sUTF16_count,
    struct ON_UnicodeErrorParameters* e,
    ON__UINT32* unicode_code_point
    );

































































































int ON_ConvertUTF8ToUTF16(
    int bTestByteOrder,
    const ON__UINT8* sUTF8,
    int sUTF8_count,
    ON__UINT16* sUTF16,
    int sUTF16_count,
    unsigned int* error_status,
    unsigned int error_mask,
    ON__UINT32 error_code_point,
    const ON__UINT8** sNextUTF8
    );


































































































int ON_ConvertUTF8ToUTF32(
    int bTestByteOrder,
    const ON__UINT8* sUTF8,
    int sUTF8_count,
    ON__UINT32* sUTF32,
    int sUTF32_count,
    unsigned int* error_status,
    unsigned int error_mask,
    ON__UINT32 error_code_point,
    const ON__UINT8** sNextUTF8
    );






































































































int ON_ConvertUTF16ToUTF8(
    int bTestByteOrder,
    const ON__UINT16* sUTF16,
    int sUTF16_count,
    ON__UINT8* sUTF8,
    int sUTF8_count,
    unsigned int* error_status,
    unsigned int error_mask,
    ON__UINT32 error_code_point,
    const ON__UINT16** sNextUTF16
    );







































































































int ON_ConvertUTF16ToUTF32(
    int bTestByteOrder,
    const ON__UINT16* sUTF16,
    int sUTF16_count,
    unsigned int* sUTF32,
    int sUTF32_count,
    unsigned int* error_status,
    unsigned int error_mask,
    ON__UINT32 error_code_point,
    const ON__UINT16** sNextUTF16
    );












































































































int ON_ConvertUTF32ToUTF8(
    int bTestByteOrder,
    const ON__UINT32* sUTF32,
    int sUTF32_count,
    ON__UINT8* sUTF8,
    int sUTF8_count,
    unsigned int* error_status,
    unsigned int error_mask,
    ON__UINT32 error_code_point,
    const ON__UINT32** sNextUTF32
    );












































































































int ON_ConvertUTF32ToUTF16(
    int bTestByteOrder,
    const ON__UINT32* sUTF32,
    int sUTF32_count,
    ON__UINT16* sUTF16,
    int sUTF16_count,
    unsigned int* error_status,
    unsigned int error_mask,
    ON__UINT32 error_code_point,
    const ON__UINT32** sNextUTF32
    );



















































































































int ON_ConvertUTF32ToUTF32(
    int bTestByteOrder,
    const ON__UINT32* sInputUTF32,
    int sInputUTF32_count,
    ON__UINT32* sOuputUTF32,
    int sOutputUTF32_count,
    unsigned int* error_status,
    unsigned int error_mask,
    ON__UINT32 error_code_point,
    const ON__UINT32** sNextInputUTF32
    );














































































































int ON_ConvertWideCharToUTF8(
    int bTestByteOrder,
    const wchar_t* sWideChar,
    int sWideChar_count,
    char* sUTF8,
    int sUTF8_count,
    unsigned int* error_status,
    unsigned int error_mask,
    ON__UINT32 error_code_point,
    const wchar_t** sNextWideChar
    );

















































































































int ON_ConvertWideCharToUTF32(
    int bTestByteOrder,
    const wchar_t* sWideChar,
    int sWideChar_count,
    ON__UINT32* sUTF32,
    int sUTF32_count,
    unsigned int* error_status,
    unsigned int error_mask,
    ON__UINT32 error_code_point,
    const wchar_t** sNextWideChar
    );










































































































int ON_ConvertUTF8ToWideChar(
    int bTestByteOrder,
    const char* sUTF8,
    int sUTF8_count,
    wchar_t* sWideChar,
    int sWideChar_count,
    unsigned int* error_status,
    unsigned int error_mask,
    ON__UINT32 error_code_point,
    const char** sNextUTF8
    );

}


























class  ON_FixedSizePool
{
public:
  ON_FixedSizePool();
  ~ON_FixedSizePool();
  
  


























  bool Create( 
    size_t sizeof_element,
    size_t element_count_estimate,
    size_t block_element_capacity
    );

  



  size_t SizeofElement() const;

  



  void* AllocateElement();
  
  

































  void ReturnElement(void* p);

  





  void ReturnAll();

  




  void Destroy();

  



  size_t ActiveElementCount() const;

  



  size_t TotalElementCount() const;

  











































  void* FirstElement();
  void* FirstElement( size_t element_index );

  





















  void* NextElement();

  












































  void* FirstBlock( size_t* block_element_count );

  






















  void* NextBlock( size_t* block_element_count );

  





















  void* Element(size_t element_index) const;

public:
  
  

  



  void SetHeap( void* heap );

  






  void* Heap();

  






  void EmergencyDestroy();

private:
  friend class ON_FixedSizePoolIterator;

  void* m_first_block;

  
  
  void* m_al_element_stack;

  
  void* m_qwerty_it_block;
  void* m_qwerty_it_element;

  void* m_al_block; 
  
  void* m_al_element_array;
  size_t m_al_count;
  size_t m_sizeof_element;
  size_t m_block_element_count;  
  size_t m_active_element_count; 
  size_t m_total_element_count;  
  void* m_heap;
  
private:
  
  size_t BlockElementCapacity( const void* block ) const;

  
  size_t BlockElementCount( const void* block ) const;
private:
  
  ON_FixedSizePool(const ON_FixedSizePool&);
  ON_FixedSizePool& operator=(const ON_FixedSizePool&);
};

class  ON_FixedSizePoolIterator
{
public:
  ON_FixedSizePoolIterator( const class ON_FixedSizePool& fsp );

  const class ON_FixedSizePool& m_fsp;

  





































  void* FirstElement();
  void* FirstElement( size_t element_index );

  















  void* NextElement();

  






































  void* FirstBlock( size_t* block_element_count );

  
















  void* NextBlock( size_t* block_element_count );

private:
  void* m_it_block;
  void* m_it_element;

  
  ON_FixedSizePoolIterator& operator=(const ON_FixedSizePoolIterator&);
};


template <class T> class ON_SimpleFixedSizePool : private ON_FixedSizePool
{
public:
  

  ON_SimpleFixedSizePool();
  ~ON_SimpleFixedSizePool();
  
  





















  bool Create( 
    size_t element_count_estimate,
    size_t block_element_count
    );

  



  size_t SizeofElement() const;

  



  T* AllocateElement();
  
  

































  void ReturnElement(T* p);

  





  void ReturnAll();

  




  void Destroy();

  



  size_t ActiveElementCount() const;

  



  size_t TotalElementCount() const;

  



























  T* FirstElement();

  











  T* NextElement();

  





















  T* FirstBlock( size_t* block_element_count );

  










  T* NextBlock( size_t* block_element_count );


  





















  T* Element(size_t element_index) const;

public:
  
  

  



  void SetHeap( void* heap );

  






  void* Heap();

  






  void EmergencyDestroy();

private:
  
  ON_SimpleFixedSizePool(const ON_SimpleFixedSizePool<T>&);
  ON_SimpleFixedSizePool<T>& operator=(const ON_SimpleFixedSizePool<T>&);
};
























template <class T> 
ON_SimpleFixedSizePool<T>::ON_SimpleFixedSizePool()
: ON_FixedSizePool()
{}

template <class T>
ON_SimpleFixedSizePool<T>::~ON_SimpleFixedSizePool()
{ 
  ON_FixedSizePool::Destroy();
}

template <class T>
bool ON_SimpleFixedSizePool<T>::Create( 
  size_t element_count_estimate,
  size_t block_element_count
  )
{
  return ON_FixedSizePool::Create(sizeof(T),element_count_estimate,block_element_count);
}

template <class T>
size_t ON_SimpleFixedSizePool<T>::SizeofElement() const
{
  return ON_FixedSizePool::SizeofElement();
}

template <class T>
T* ON_SimpleFixedSizePool<T>::AllocateElement()
{
  return (T *)ON_FixedSizePool::AllocateElement();
}

template <class T>
void ON_SimpleFixedSizePool<T>::ReturnElement(T* p)
{
  ON_FixedSizePool::ReturnElement(p);
}

template <class T>
void ON_SimpleFixedSizePool<T>::ReturnAll()
{
  ON_FixedSizePool::ReturnAll();
}

template <class T>
void ON_SimpleFixedSizePool<T>::Destroy()
{
  ON_FixedSizePool::Destroy();
}

template <class T>
size_t ON_SimpleFixedSizePool<T>::ActiveElementCount() const
{
  return ON_FixedSizePool::ActiveElementCount();
}

template <class T>
size_t ON_SimpleFixedSizePool<T>::TotalElementCount() const
{
  return ON_FixedSizePool::TotalElementCount();
}

template <class T>
T* ON_SimpleFixedSizePool<T>::FirstElement()
{
  return (T *)ON_FixedSizePool::FirstElement();
}

template <class T>
T* ON_SimpleFixedSizePool<T>::NextElement()
{
  return (T *)ON_FixedSizePool::NextElement();
}

template <class T>
T* ON_SimpleFixedSizePool<T>::FirstBlock( size_t* block_element_count )
{
  return (T *)ON_FixedSizePool::FirstBlock(block_element_count);
}

template <class T>
T* ON_SimpleFixedSizePool<T>::NextBlock( size_t* block_element_count )
{
  return (T *)ON_FixedSizePool::NextBlock(block_element_count);
}

template <class T>
T* ON_SimpleFixedSizePool<T>::Element(size_t element_index) const
{
  return (T *)ON_FixedSizePool::Element(element_index);
}

template <class T>
void ON_SimpleFixedSizePool<T>::SetHeap( void* heap )
{
  ON_FixedSizePool::SetHeap(heap);
}

template <class T>
void* ON_SimpleFixedSizePool<T>::Heap()
{
  return ON_FixedSizePool::Heap();
}

template <class T>
void ON_SimpleFixedSizePool<T>::EmergencyDestroy()
{
  ON_FixedSizePool::EmergencyDestroy();
}






















































void ON_Sort( 
        ON::sort_algorithm method,
        int* index,
        const void* base,
        size_t count,
        size_t sizeof_element,
        int (*compare)(const void*,const void*) 
        );































void ON_Sort( 
        ON::sort_algorithm method,
        int* index,
        const void* base,
        size_t count,
        size_t sizeof_element,
        int (*compare)(const void*,const void*,void*), 
        void* context
        );

































void ON_hsort( 
        void* base,
        size_t count,
        size_t sizeof_element,
        int (*compare)(const void*,const void*)
        );


void ON_qsort( 
        void* base,
        size_t count,
        size_t sizeof_element,
        int (*compare)(const void*,const void*)
        );


void ON_hsort( 
        void* base,
        size_t count,
        size_t sizeof_element,
        int (*compare)(void*,const void*,const void*),
        void* context
        );


void ON_qsort( 
        void* base,
        size_t count,
        size_t sizeof_element,
        int (*compare)(void*,const void*,const void*),
        void* context
        );

















void ON_SortDoubleArray( 
        ON::sort_algorithm sort_algorithm,
        double* a,
        size_t nel
        );
















void ON_SortIntArray(
        ON::sort_algorithm sort_algorithm,
        int* a,
        size_t nel
        );
















void ON_SortUnsignedIntArray(
        ON::sort_algorithm sort_algorithm,
        unsigned int* a,
        size_t nel
        );
















void ON_SortStringArray(
        ON::sort_algorithm sort_algorithm,
        char** a,
        size_t nel
        );


const int* ON_BinarySearchIntArray( 
          int key, 
          const int* base, 
          size_t nel
          );


const unsigned int* ON_BinarySearchUnsignedIntArray( 
          unsigned int key, 
          const unsigned int* base, 
          size_t nel
          );


const double* ON_BinarySearchDoubleArray( 
          double key, 
          const double* base, 
          size_t nel
          );







class  ON_CheckSum
{
public:
  ON_CheckSum();
  ~ON_CheckSum();

  static const ON_CheckSum UnsetCheckSum;

  
  void Zero();

  



  bool IsSet() const;

  
  

  











  bool SetBufferCheckSum( 
    size_t size, 
    const void* buffer,
    time_t time
   );

  







  bool SetFileCheckSum( 
    FILE* fp
   );

  







  bool SetFileCheckSum( 
    const wchar_t* filename
   );

  








  bool CheckBuffer( 
    size_t size, 
    const void* buffer
    ) const;

  









  bool CheckFile( 
    FILE* fp,
    bool bSkipTimeCheck = false
    ) const;

  









  bool CheckFile( 
    const wchar_t* filename,
    bool bSkipTimeCheck = false
    ) const;

  bool Write(class ON_BinaryArchive&) const;
  bool Read(class ON_BinaryArchive&);

  void Dump(class ON_TextLog&) const;

public:
  size_t     m_size;   
  time_t     m_time;   
  ON__UINT32 m_crc[8]; 
};








class ON_String;  
class ON_wString; 






class  ON_String
{
public:


	ON_String();
	ON_String( const ON_String& );

	ON_String( const char* );
	ON_String( const char*, int  );        
	ON_String( char, int = 1  );   

	ON_String( const unsigned char* );
	ON_String( const unsigned char*, int  );        
	ON_String( unsigned char, int = 1  ); 
  
  
	ON_String( const wchar_t* src );  
	ON_String( const wchar_t* src, int length ); 
  ON_String( const ON_wString& src ); 


  
	bool LoadResourceString( HINSTANCE, UINT); 
										                         


  void Create();
  void Destroy(); 
  void EmergencyDestroy();

  










  void EnableReferenceCounting( bool bEnable );

  



  bool IsReferenceCounted() const;


  
	
	int Length() const;
	bool IsEmpty() const; 
  void Empty();   

	char& operator[](int);
	char operator[](int) const;
  char GetAt(int) const;
	void SetAt(int, char);
	void SetAt(int, unsigned char);
	operator const char*() const;  

	
	ON_String& operator=(const ON_String&);
	ON_String& operator=(char);
	ON_String& operator=(const char*);
	ON_String& operator=(unsigned char);
	ON_String& operator=(const unsigned char*);
	ON_String& operator=(const wchar_t* src); 
	ON_String& operator=(const ON_wString& src);  

  
  ON_String operator+(const ON_String&) const;
  ON_String operator+(char) const;
  ON_String operator+(unsigned char) const;
  ON_String operator+(const char*) const;
  ON_String operator+(const unsigned char*) const;

	
  bool operator==(const ON_String&) const;
  bool operator==(const char*)const ;
  bool operator!=(const ON_String&)const ;
  bool operator!=(const char*)const ;
  bool operator<(const ON_String&)const ;
  bool operator<(const char*)const ;
  bool operator>(const ON_String&)const ;
  bool operator>(const char*)const ;
  bool operator<=(const ON_String&)const ;
  bool operator<=(const char*)const ;
  bool operator>=(const ON_String&)const ;
  bool operator>=(const char*)const ;

  
  void Append( const char*, int ); 
  void Append( const unsigned char*, int ); 
	const ON_String& operator+=(const ON_String&);
	const ON_String& operator+=(char);
	const ON_String& operator+=(unsigned char);
	const ON_String& operator+=(const char*);
	const ON_String& operator+=(const unsigned char*);

	
  
  
  
	int Compare( const char* ) const;
	int Compare( const unsigned char* ) const;

	int CompareNoCase( const char* ) const;
	int CompareNoCase( const unsigned char* ) const;

  
  
  
  
  
  
  
  
  
  
	bool WildCardMatch( const char* ) const;
	bool WildCardMatch( const unsigned char* ) const;

  
  
  
  
  
  
  
  
  
  
	bool WildCardMatchNoCase( const char* ) const;
	bool WildCardMatchNoCase( const unsigned char* ) const;

  








  int Replace( const char* token1, const char* token2 );
  int Replace( const unsigned char* token1, const unsigned char* token2 );
  int Replace( char token1, char token2 );
  int Replace( unsigned char token1, unsigned char token2 );


	
	ON_String Mid(
    int, 
    int  
    ) const;
	ON_String Mid(
    int 
    ) const;
	ON_String Left(
    int 
    ) const;
	ON_String Right(
    int 
    ) const;

	
	void MakeUpper();
	void MakeLower();
	void MakeReverse();
  void TrimLeft(const char* = 0);
  void TrimRight(const char* = 0);
  void TrimLeftAndRight(const char* = 0);

  
	int Remove( const char chRemove);

	
	
	int Find(char) const;
	int Find(unsigned char) const;
	int ReverseFind(char) const;
	int ReverseFind(unsigned char) const;

	
	int Find(const char*) const;
	int Find(const unsigned char*) const;

	
	void __cdecl Format( const char*, ...);
	void __cdecl Format( const unsigned char*, ...);

	
	void ReserveArray(size_t); 
                          
	void ShrinkArray();     
  void SetLength(size_t);    
  char* Array();
  const char* Array() const;

  




  unsigned int SizeOf() const;

  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  










































  static void SplitPath( 
    const char* path,
    ON_String* drive,
    ON_String* dir,
    ON_String* fname,
    ON_String* ext
    );


public:
	~ON_String();

protected:
	char* m_s; 
             

	
	struct ON_aStringHeader* Header() const;
	void CreateArray(int);
  void CopyArray();
  void CopyToArray( const ON_String& );
  void CopyToArray( int, const char* );
  void CopyToArray( int, const unsigned char* );
  void CopyToArray( int, const wchar_t* );
  void AppendToArray( const ON_String& );
  void AppendToArray( int, const char* );
  void AppendToArray( int, const unsigned char* );
	static int Length(const char*);  
	static int Length(const unsigned char*);  
};










class  ON_wString
{
public:


	ON_wString();
	ON_wString( const ON_wString& );

	ON_wString( const ON_String& src ); 

	ON_wString( const char* src ); 
	ON_wString( const char* src, int  );  
	ON_wString( char, int = 1  );   

	ON_wString( const unsigned char* src); 
	ON_wString( const unsigned char*src, int  );        
	ON_wString( unsigned char, int = 1  ); 
  
	ON_wString( const wchar_t* );
	ON_wString( const wchar_t*, int  );        
	ON_wString( wchar_t, int = 1  );   


  
	bool LoadResourceString(HINSTANCE, UINT); 
										                        


  void Create();
  void Destroy(); 
  void EmergencyDestroy();

  










  void EnableReferenceCounting( bool bEnable );

  



  bool IsReferenceCounted() const;


	
	int Length() const;
	bool IsEmpty() const;
  void Empty();   

	wchar_t& operator[](int);
	wchar_t operator[](int) const;
  wchar_t GetAt(int) const;
	void SetAt(int, char);
	void SetAt(int, unsigned char);
	void SetAt(int, wchar_t);
	operator const wchar_t*() const;  

	
	const ON_wString& operator=(const ON_wString&);
	const ON_wString& operator=(const ON_String& src); 
	const ON_wString& operator=(char);
	const ON_wString& operator=(const char* src); 
	const ON_wString& operator=(unsigned char);
	const ON_wString& operator=(const unsigned char* src); 
  const ON_wString& operator=(wchar_t);
  const ON_wString& operator=(const wchar_t*);

	
  void Append( const char* sUTF8, int ); 
  void Append( const unsigned char* sUTF8, int ); 
  void Append( const wchar_t*, int ); 
	const ON_wString& operator+=(const ON_wString&);
	const ON_wString& operator+=(const ON_String& sUTF8); 
	const ON_wString& operator+=(char);
	const ON_wString& operator+=(unsigned char);
	const ON_wString& operator+=(wchar_t);
	const ON_wString& operator+=(const char* sUTF8); 
	const ON_wString& operator+=(const unsigned char* sUTF8); 
	const ON_wString& operator+=(const wchar_t*);

  
  ON_wString operator+(const ON_wString&) const;
  ON_wString operator+(const ON_String& sUTF8) const; 
  ON_wString operator+(char) const;
  ON_wString operator+(unsigned char) const;
  ON_wString operator+(wchar_t) const;
  ON_wString operator+(const char* sUTF8) const; 
  ON_wString operator+(const unsigned char* sUTF8) const; 
  ON_wString operator+(const wchar_t*) const;

	
  bool operator==(const ON_wString&) const;
  bool operator==(const wchar_t*) const;
  bool operator!=(const ON_wString&) const;
  bool operator!=(const wchar_t*) const;
  bool operator<(const ON_wString&) const;
  bool operator<(const wchar_t*) const;
  bool operator>(const ON_wString&) const;
  bool operator>(const wchar_t*) const;
  bool operator<=(const ON_wString&) const;
  bool operator<=(const wchar_t*) const;
  bool operator>=(const ON_wString&) const;
  bool operator>=(const wchar_t*) const;

	
  
  
  
	int Compare( const char* sUTF8 ) const; 
	int Compare( const unsigned char* sUTF8 ) const; 
	int Compare( const wchar_t* ) const;

	int CompareNoCase( const char* sUTF8) const; 
	int CompareNoCase( const unsigned char* sUTF8) const; 
	int CompareNoCase( const wchar_t* ) const;

  
  
  
  
  
  
  
  
  
  
	bool WildCardMatch( const wchar_t* ) const;

  
  
  
  
  
  
  
  
  
  
	bool WildCardMatchNoCase( const wchar_t* ) const;

  








  int Replace( const wchar_t* token1, const wchar_t* token2 );
  int Replace( wchar_t token1, wchar_t token2 );

  





  void UrlEncode();

  





  bool UrlDecode();

  














  int ReplaceWhiteSpace( wchar_t token, const wchar_t* whitespace = 0 );

  











  int RemoveWhiteSpace( const wchar_t* whitespace = 0 );

  
	ON_wString Mid(
    int, 
    int  
    ) const;
	ON_wString Mid(
    int 
    ) const;
	ON_wString Left(
    int 
    ) const;
	ON_wString Right(
    int 
    ) const;

	
	void MakeUpper();
	void MakeLower();
	void MakeReverse();
  void TrimLeft(const wchar_t* = 0);
  void TrimRight(const wchar_t* = 0);
  void TrimLeftAndRight(const wchar_t* = 0);

  



	int Remove( wchar_t c);

	
	
	int Find(char) const;
	int Find(unsigned char) const;
	int Find(wchar_t) const;
	int ReverseFind(char) const;
	int ReverseFind(unsigned char) const;
	int ReverseFind(wchar_t) const;

	
	int Find(const char*) const;
	int Find(const unsigned char*) const;
	int Find(const wchar_t*) const;


	
	void __cdecl Format( const char*, ...);
	void __cdecl Format( const unsigned char*, ...);
	void __cdecl Format( const wchar_t*, ...);

	
	void ReserveArray(size_t); 
                          
	void ShrinkArray();     
  void SetLength(size_t); 
  wchar_t* Array();
  const wchar_t* Array() const;

  




  unsigned int SizeOf() const;

  



  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  




  ON__UINT32 DataCRCLower(ON__UINT32 current_remainder) const;

  











































  static void SplitPath( 
    const char* path,
    ON_wString* drive,
    ON_wString* dir,
    ON_wString* fname,
    ON_wString* ext
    );

  static void SplitPath( 
    const wchar_t* path,
    ON_wString* drive,
    ON_wString* dir,
    ON_wString* fname,
    ON_wString* ext
    );

public:
	~ON_wString();

protected:
	wchar_t* m_s; 
                

	
	struct ON_wStringHeader* Header() const;
	void CreateArray(int);
  void CopyArray();
  void CopyToArray( const ON_wString& );
  void CopyToArray( int, const char* );
  void CopyToArray( int, const unsigned char* );
  void CopyToArray( int, const wchar_t* );
  void AppendToArray( const ON_wString& );
  void AppendToArray( int, const char* );
  void AppendToArray( int, const unsigned char* );
  void AppendToArray( int, const wchar_t* );
	static int Length(const char*);  
	static int Length(const unsigned char*);  
	static int Length(const wchar_t*); 
};

class  ON_UnitSystem
{
public:
  ON_UnitSystem();   
  ~ON_UnitSystem();

  ON_UnitSystem(ON::unit_system);
  ON_UnitSystem& operator=(ON::unit_system);

  bool operator==(const ON_UnitSystem&);
  bool operator!=(const ON_UnitSystem&);

  








  
  bool IsValid() const;

  void Default(); 

  bool Read( class ON_BinaryArchive& );
  bool Write( class ON_BinaryArchive& ) const;
  void Dump( class ON_TextLog& ) const;

  




  bool IsSet() const;

  




  void Unset();

  ON::unit_system m_unit_system;

  
  double m_custom_unit_scale;      
  ON_wString m_custom_unit_name;   

  
  
  
  
  
  
  
};

























typedef bool (*ON_StreamCallbackFunction)( void* context, ON__UINT32 size, const void* buffer );

class  ON_CompressStream
{
public:
  ON_CompressStream();
  virtual ~ON_CompressStream();

  




























  bool SetCallback( 
    ON_StreamCallbackFunction callback_function,
    void* callback_context
    );

  






  ON_StreamCallbackFunction CallbackFunction() const;

  




  void* CallbackContext() const;
  
  









  bool Begin();

  











  bool In( 
    ON__UINT64 in_buffer_size, 
    const void* in_buffer 
    );

  















  virtual bool Out( 
    void* callback_context, 
    ON__UINT32 out_buffer_size, 
    const void* out_buffer 
    );

  







  bool End();

  








  ON__UINT64 InSize() const;

  







  ON__UINT64 OutSize() const;

  







  ON__UINT32 InCRC() const;

  







  ON__UINT32 OutCRC() const;

private:
  ON_StreamCallbackFunction m_out_callback_function;
  void* m_out_callback_context;
  ON__UINT64 m_in_size;
  ON__UINT64 m_out_size;
  ON__UINT32 m_in_crc;
  ON__UINT32 m_out_crc;
  void* m_implementation;
  void* m_reserved;

  void ErrorHandler();

private:
  
  ON_CompressStream(const ON_CompressStream&);
  ON_CompressStream& operator=(const ON_CompressStream&);
};


class  ON_UncompressStream
{
public:
  ON_UncompressStream();
  virtual ~ON_UncompressStream();

  




























  bool SetCallback( 
    ON_StreamCallbackFunction callback_function,
    void* callback_context
    );

  






  ON_StreamCallbackFunction CallbackFunction() const;

  




  void* CallbackContext() const;
  
  









  bool Begin();

  











  bool In(
    ON__UINT64 in_buffer_size,
    const void* in_buffer
    );

  















  virtual bool Out( 
    void* callback_context, 
    ON__UINT32 out_buffer_size, 
    const void* out_buffer 
    );

  







  bool End();

  








  ON__UINT64 InSize() const;

  







  ON__UINT64 OutSize() const;

  







  ON__UINT32 InCRC() const;

  







  ON__UINT32 OutCRC() const;

private:
  ON_StreamCallbackFunction m_out_callback_function;
  void* m_out_callback_context;
  ON__UINT64 m_in_size;
  ON__UINT64 m_out_size;
  ON__UINT32 m_in_crc;
  ON__UINT32 m_out_crc;
  void* m_implementation;
  void* m_reserved;

  void ErrorHandler();

private:
  
  ON_UncompressStream(const ON_UncompressStream&);
  ON_UncompressStream& operator=(const ON_UncompressStream&);
};

























class  ON_Base64EncodeStream
{
public:
  ON_Base64EncodeStream();
  virtual ~ON_Base64EncodeStream();

  




























  bool SetCallback( 
    ON_StreamCallbackFunction callback_function,
    void* callback_context
    );

  






  ON_StreamCallbackFunction CallbackFunction() const;

  




  void* CallbackContext() const;
  
  









  bool Begin();


  












  bool In(
    ON__UINT64 in_buffer_size,
    const void* in_buffer
    );

  



























  virtual bool Out( 
    void* callback_context, 
    ON__UINT32 out_buffer_size, 
    const char* out_buffer 
    );

  







  bool End();
  
  








  ON__UINT64 InSize() const;

  








  ON__UINT64 OutSize() const;

  







  ON__UINT32 InCRC() const;

  







  ON__UINT32 OutCRC() const;
    
private:
  ON_StreamCallbackFunction m_out_callback_function;
  void* m_out_callback_context;
  ON__UINT64 m_in_size;
  ON__UINT64 m_out_size;
  ON__UINT32 m_in_crc;
  ON__UINT32 m_out_crc;
  void* m_implementation;
  void* m_reserved;

  void ErrorHandler();
  
private:
  
  ON_Base64EncodeStream(const ON_Base64EncodeStream&);
  ON_Base64EncodeStream& operator=(const ON_Base64EncodeStream&);
};



class  ON_DecodeBase64
{
public:
  ON_DecodeBase64();
  virtual ~ON_DecodeBase64();

  void Begin();

  
  
  
  
  
  
  
  
  
  
  
  
  const char* Decode(const char* base64str);
  const char* Decode(const char* base64str, size_t base64str_count);
  const wchar_t* Decode(const wchar_t* base64str);
  const wchar_t* Decode(const wchar_t* base64str, size_t base64str_count);

  
  
  
  
  
  
  bool End();

  
  
  
  
  
  
  virtual void Output();

  
  
  unsigned int m_decode_count; 

  int  m_output_count; 
  unsigned char m_output[512];

  
  
  void SetError();

  
  
  const bool Error() const;

private:
  int m_status; 
                
                
                
                

  
  int m_cache_count;
  int m_cache[4];

  void DecodeHelper1(); 
  void DecodeHelper2(); 
};






















































































class  ON_Color
{
public:
	

  static const ON_Color UnsetColor; 

  
	ON_Color();

  
	ON_Color(
    int red,   
    int green, 
    int blue   
    );

	ON_Color(
    int red,   
    int green, 
    int blue,  
    int alpha  
    );

  
	ON_Color(unsigned int);

	
  operator unsigned int() const;	

  






  unsigned int WindowsRGB() const;

  
  int Compare( const ON_Color& ) const; 

	int Red()   const; 
	int Green() const; 
	int Blue()  const; 
  int Alpha() const; 

	double FractionRed()   const; 
	double FractionGreen() const; 
	double FractionBlue()  const; 
	double FractionAlpha() const; 

  void SetRGB(
    int red,   
    int green, 
    int blue   
    );

  void SetFractionalRGB(
    double red,   
    double green, 
    double blue   
    );

  void SetAlpha(
    int alpha 
    );

  void SetFractionalAlpha(
    double alpha 
    );

  void SetRGBA(
    int red,   
    int green, 
    int blue,  
    int alpha  
    );

  
  void SetFractionalRGBA(
    double red,   
    double green, 
    double blue,  
    double alpha  
    );

  
  
  
  
  
  double Hue() const;

  
  double Saturation() const;

  
  double Value() const;

  void SetHSV( 
         double h, 
         double s, 
         double v 
         );

private:
  
  
  
  
	unsigned int m_color;
};














































class  ON_DisplayMaterialRef
{
public:
  



  ON_DisplayMaterialRef();
  int Compare(const ON_DisplayMaterialRef& other) const;
  bool operator==(const ON_DisplayMaterialRef& other) const;
  bool operator!=(const ON_DisplayMaterialRef& other) const;
  bool operator<(const ON_DisplayMaterialRef& other) const;
  bool operator<=(const ON_DisplayMaterialRef& other) const;
  bool operator>(const ON_DisplayMaterialRef& other) const;
  bool operator>=(const ON_DisplayMaterialRef& other) const;

  
  

  ON_UUID m_viewport_id;          
                                  
                                  
                                  
                                  

  ON_UUID m_display_material_id;  

  
  
  
  
  
  
  static const ON_UUID m_invisible_in_detail_id;
};





class  ON_LinetypeSegment
{
public:
  ON_LinetypeSegment();

  bool operator==( const ON_LinetypeSegment& src) const;
  bool operator!=( const ON_LinetypeSegment& src) const;

  
  
  
  enum eSegType
  {
    stLine,
    stSpace,
  };

  void Dump( class ON_TextLog& ) const;

  

  double m_length; 
  eSegType m_seg_type;
};




























class ON_BoundingBox;
class ON_Xform;
class ON_Line;
class ON_Plane;

class ON_2dPoint;
class ON_3dPoint;
class ON_4dPoint;

class ON_2dVector;
class ON_3dVector;

class ON_2fVector;
class ON_3fVector;

class ON_Interval;





class  ON_Interval
{
public:

  static const ON_Interval EmptyInterval; 

  
  
  ON_Interval();

  ON_Interval(double t0,double t1);

  ~ON_Interval();

  bool operator!=(const ON_Interval&) const;
  bool operator==(const ON_Interval&) const;

  
  double m_t[2];

  





  void Destroy();

  








  void Set(
    double t0, 
    double t1
    );

  










  double ParameterAt (
    double normalized_parameter
    ) const; 
  ON_Interval ParameterAt (
    ON_Interval normalized_interval
    ) const; 
  
  










  double NormalizedParameterAt (
    double interval_parameter
    ) const;
  ON_Interval NormalizedParameterAt (
    ON_Interval interval_parameter
    ) const;

  double& operator[](int); 
  double operator[](int) const; 
  double& operator[](unsigned int); 
  double operator[](unsigned int) const; 

  double Min() const; 
  double Max() const; 
  double Mid() const; 
  double Length() const;

  bool IsIncreasing() const; 
  bool IsDecreasing() const; 
  bool IsInterval() const;   
  bool IsSingleton() const;  
  bool IsEmptyInterval() const;   
  bool IsValid() const;      

  
  bool IsEmptySet() const;   

	bool MakeIncreasing();		

  








  int Compare( const ON_Interval& other ) const;

  











  bool Includes(
    double t,
    bool bTestOpenInterval = false
    ) const;

  












  bool Includes( 
    const ON_Interval& other,
    bool bProperSubSet = false
    ) const;

  



  void Reverse();

  



  void Swap();

  
  
  
  
  
  
  
  bool Intersection( 
         const ON_Interval&
         );

  
  
  
  
  
  
  
  bool Intersection( 
         const ON_Interval&, 
         const ON_Interval&
         );

  
  
  
  
  
  
  
  bool Union( 
         const ON_Interval&
         );

  bool Union( 
         double t
         );

  bool Union( 
         int count,
         const double* t
         );

  
  
  
  
  
  
  
  bool Union( 
         const ON_Interval&, 
         const ON_Interval&
         );
};





class  ON_2dPoint
{
public:
  double x, y;

  static const ON_2dPoint Origin;     
  static const ON_2dPoint UnsetPoint; 

  
  ON_2dPoint();                         
  ON_2dPoint(double x,double y);
  ON_2dPoint(const ON_3dPoint& );       
  ON_2dPoint(const ON_4dPoint& );       
  ON_2dPoint(const ON_2dVector& );      
  ON_2dPoint(const ON_3dVector& );      
  ON_2dPoint(const double*);            

  ON_2dPoint(const class ON_2fPoint&);  
  ON_2dPoint(const class ON_3fPoint&);  
  ON_2dPoint(const class ON_4fPoint&);  
  ON_2dPoint(const class ON_2fVector&); 
  ON_2dPoint(const class ON_3fVector&); 
  ON_2dPoint(const float*);             

  
  operator double*();
  operator const double*() const;

  
  ON_2dPoint& operator=(const ON_3dPoint&);
  ON_2dPoint& operator=(const ON_4dPoint&);
  ON_2dPoint& operator=(const ON_2dVector&);
  ON_2dPoint& operator=(const ON_3dVector&);
  ON_2dPoint& operator=(const double*); 

  ON_2dPoint& operator=(const ON_2fPoint&);
  ON_2dPoint& operator=(const ON_3fPoint&);
  ON_2dPoint& operator=(const ON_4fPoint&);
  ON_2dPoint& operator=(const ON_2fVector&);
  ON_2dPoint& operator=(const ON_3fVector&);
  ON_2dPoint& operator=(const float*);  

  ON_2dPoint& operator*=(double);
  ON_2dPoint& operator/=(double);
  ON_2dPoint& operator+=(const ON_2dPoint&);  
  ON_2dPoint& operator+=(const ON_2dVector&);
  ON_2dPoint& operator+=(const ON_3dVector&); 
  ON_2dPoint& operator-=(const ON_2dPoint&);  
  ON_2dPoint& operator-=(const ON_2dVector&);
  ON_2dPoint& operator-=(const ON_3dVector&); 

  ON_2dPoint  operator*(int) const;
  ON_2dPoint  operator/(int) const;
  ON_2dPoint  operator*(float) const;
  ON_2dPoint  operator/(float) const;
  ON_2dPoint  operator*(double) const;
  ON_2dPoint  operator/(double) const;

  ON_2dPoint  operator+(const ON_2dPoint&) const;
  ON_2dPoint  operator+(const ON_2dVector&) const;
  ON_2dVector operator-(const ON_2dPoint&) const;
  ON_2dPoint  operator-(const ON_2dVector&) const;
  ON_3dPoint  operator+(const ON_3dPoint&) const;
  ON_3dPoint  operator+(const ON_3dVector&) const;
  ON_3dVector operator-(const ON_3dPoint&) const;
  ON_3dPoint  operator-(const ON_3dVector&) const;

  ON_2dPoint  operator+(const ON_2fPoint&) const;
  ON_2dPoint  operator+(const ON_2fVector&) const;
  ON_2dVector operator-(const ON_2fPoint&) const;
  ON_2dPoint  operator-(const ON_2fVector&) const;
  ON_3dPoint  operator+(const ON_3fPoint&) const;
  ON_3dPoint  operator+(const ON_3fVector&) const;
  ON_3dVector operator-(const ON_3fPoint&) const;
  ON_3dPoint  operator-(const ON_3fVector&) const;

  double operator*(const ON_2dPoint&) const; 
  double operator*(const ON_2dVector&) const; 
  double operator*(const ON_4dPoint&) const;
  ON_2dPoint operator*(const ON_Xform&) const;

  bool operator==(const ON_2dPoint&) const;
  bool operator!=(const ON_2dPoint&) const;

  
  bool operator<=(const ON_2dPoint&) const;
  bool operator>=(const ON_2dPoint&) const;
  bool operator<(const ON_2dPoint&) const;
  bool operator>(const ON_2dPoint&) const;

  
  double& operator[](int);
  double operator[](int) const;
  double& operator[](unsigned int);
  double operator[](unsigned int) const;

  



  bool IsValid() const;

  



  bool IsUnsetPoint() const;

  
  void Set(double x,double y);

  double DistanceTo( const ON_2dPoint& ) const;

  int MaximumCoordinateIndex() const;
  double MaximumCoordinate() const; 

  int MinimumCoordinateIndex() const;
  double MinimumCoordinate() const; 

  void Zero(); 

  
  
  void Transform( 
        const ON_Xform&
        );

  void Rotate( 
        double angle,              
        const ON_2dPoint& center   
        );

  void Rotate( 
        double sin_angle,          
        double cos_angle,          
        const ON_2dPoint& center   
        );
};


ON_2dPoint operator*(int, const ON_2dPoint&);


ON_2dPoint operator*(float, const ON_2dPoint&);


ON_2dPoint operator*(double, const ON_2dPoint&);





class  ON_3dPoint
{
public:
  double x, y, z;

  static const ON_3dPoint Origin;     
  static const ON_3dPoint UnsetPoint; 

  
  ON_3dPoint();                         
  ON_3dPoint(double x,double y,double z);
  ON_3dPoint(const ON_2dPoint& );       
  ON_3dPoint(const ON_4dPoint& );       
  ON_3dPoint(const ON_2dVector& );      
  ON_3dPoint(const ON_3dVector& );      
  ON_3dPoint(const double*);            

  ON_3dPoint(const class ON_2fPoint&);  
  ON_3dPoint(const class ON_3fPoint&);  
  ON_3dPoint(const class ON_4fPoint&);  
  ON_3dPoint(const class ON_2fVector&); 
  ON_3dPoint(const class ON_3fVector&); 
  ON_3dPoint(const float*);             

  
  operator double*();
  operator const double*() const;

  
  ON_3dPoint& operator=(const ON_2dPoint&);
  ON_3dPoint& operator=(const ON_4dPoint&);
  ON_3dPoint& operator=(const ON_2dVector&);
  ON_3dPoint& operator=(const ON_3dVector&);
  ON_3dPoint& operator=(const double*); 

  ON_3dPoint& operator=(const class ON_2fPoint&);
  ON_3dPoint& operator=(const class ON_3fPoint&);
  ON_3dPoint& operator=(const class ON_4fPoint&);
  ON_3dPoint& operator=(const class ON_2fVector&);
  ON_3dPoint& operator=(const class ON_3fVector&);
  ON_3dPoint& operator=(const float*);  

  ON_3dPoint& operator*=(double);
  ON_3dPoint& operator/=(double);
  ON_3dPoint& operator+=(const ON_3dPoint&);  
  ON_3dPoint& operator+=(const ON_3dVector&);
  ON_3dPoint& operator-=(const ON_3dPoint&);  
  ON_3dPoint& operator-=(const ON_3dVector&);

  ON_3dPoint  operator*(int) const;
  ON_3dPoint  operator/(int) const;
  ON_3dPoint  operator*(float) const;
  ON_3dPoint  operator/(float) const;
  ON_3dPoint  operator*(double) const;
  ON_3dPoint  operator/(double) const;

  ON_3dPoint  operator+(const ON_3dPoint&) const;
  ON_3dPoint  operator+(const ON_3dVector&) const;
  ON_3dVector operator-(const ON_3dPoint&) const;
  ON_3dPoint  operator-(const ON_3dVector&) const;
  ON_3dPoint  operator+(const ON_2dPoint&) const;
  ON_3dPoint  operator+(const ON_2dVector&) const;
  ON_3dVector operator-(const ON_2dPoint&) const;
  ON_3dPoint  operator-(const ON_2dVector&) const;

  ON_3dPoint  operator+(const ON_3fPoint&) const;
  ON_3dPoint  operator+(const ON_3fVector&) const;
  ON_3dVector operator-(const ON_3fPoint&) const;
  ON_3dPoint  operator-(const ON_3fVector&) const;
  ON_3dPoint  operator+(const ON_2fPoint&) const;
  ON_3dPoint  operator+(const ON_2fVector&) const;
  ON_3dVector operator-(const ON_2fPoint&) const;
  ON_3dPoint  operator-(const ON_2fVector&) const;

  double operator*(const ON_3dPoint&) const; 
  double operator*(const ON_3dVector&) const; 
  double operator*(const ON_4dPoint&) const;
  ON_3dPoint operator*(const ON_Xform&) const;

  bool operator==(const ON_3dPoint&) const;
  bool operator!=(const ON_3dPoint&) const;

  
  bool operator<=(const ON_3dPoint&) const;
  bool operator>=(const ON_3dPoint&) const;
  bool operator<(const ON_3dPoint&) const;
  bool operator>(const ON_3dPoint&) const;

  
  double& operator[](int);
  double operator[](int) const;
  double& operator[](unsigned int);
  double operator[](unsigned int) const;

  



  bool IsValid() const;

  



  bool IsUnsetPoint() const;

  
  void Set(double x,double y,double z);

  double DistanceTo( const ON_3dPoint& ) const;

  int MaximumCoordinateIndex() const;
  double MaximumCoordinate() const; 
  
  int MinimumCoordinateIndex() const;
  double MinimumCoordinate() const; 

  double Fuzz( double tolerance = 2.3283064365386962890625e-10 ) const; 

  void Zero(); 

  
  
  void Transform( 
        const ON_Xform&
        );

  void Rotate( 
        double angle,             
        const ON_3dVector& axis,  
        const ON_3dPoint& center  
        );

  void Rotate( 
        double sin_angle,         
        double cos_angle,         
        const ON_3dVector& axis,  
        const ON_3dPoint& center  
        );
};


ON_3dPoint operator*(int, const ON_3dPoint&);


ON_3dPoint operator*(float, const ON_3dPoint&);


ON_3dPoint operator*(double, const ON_3dPoint&);





class  ON_4dPoint
{
public:
  double x, y, z, w;
  
  
  ON_4dPoint();                       
  ON_4dPoint(double x,double y,double z,double w);

  ON_4dPoint(const ON_2dPoint& );     
  ON_4dPoint(const ON_3dPoint& );     
  ON_4dPoint(const ON_2dVector& );    
  ON_4dPoint(const ON_3dVector& );    
  ON_4dPoint(const double*);          

  ON_4dPoint(const ON_2fPoint& );     
  ON_4dPoint(const ON_3fPoint& );     
  ON_4dPoint(const ON_4fPoint& );     
  ON_4dPoint(const ON_2fVector& );    
  ON_4dPoint(const ON_3fVector& );    
  ON_4dPoint(const float*);           

  
  operator double*();
  operator const double*() const;

  
  ON_4dPoint& operator=(const ON_2dPoint&);
  ON_4dPoint& operator=(const ON_3dPoint&);
  ON_4dPoint& operator=(const ON_2dVector&);
  ON_4dPoint& operator=(const ON_3dVector&);
  ON_4dPoint& operator=(const double*); 

  ON_4dPoint& operator=(const class ON_2fPoint&);
  ON_4dPoint& operator=(const class ON_3fPoint&);
  ON_4dPoint& operator=(const class ON_4fPoint&);
  ON_4dPoint& operator=(const class ON_2fVector&);
  ON_4dPoint& operator=(const class ON_3fVector&);
  ON_4dPoint& operator=(const float*);  

  ON_4dPoint& operator*=(double);
  ON_4dPoint& operator/=(double);
  ON_4dPoint& operator+=(const ON_4dPoint&); 
  ON_4dPoint& operator-=(const ON_4dPoint&); 

  ON_4dPoint  operator*(double) const;
  ON_4dPoint  operator/(double) const;
  ON_4dPoint  operator+(const ON_4dPoint&) const; 
  ON_4dPoint  operator-(const ON_4dPoint&) const; 

  double operator*(const ON_4dPoint&) const;
  ON_4dPoint operator*(const ON_Xform&) const;

  
  
  bool operator==(ON_4dPoint) const;
  bool operator!=(const ON_4dPoint&) const;

  
  double& operator[](int);
  double operator[](int) const;
  double& operator[](unsigned int);
  double operator[](unsigned int) const;

  



  bool IsValid() const;

  



  bool IsUnsetPoint() const;

  
  void Set(double x,double y,double z,double w);

  int MaximumCoordinateIndex() const;
  double MaximumCoordinate() const; 

  int MinimumCoordinateIndex() const;
  double MinimumCoordinate() const; 

  void Zero();      
  bool Normalize(); 

  
  
  void Transform( 
        const ON_Xform&
        );
};


ON_4dPoint operator*(double, const ON_4dPoint&);





class  ON_2dVector
{
public:
  double x, y;

  static const ON_2dVector ZeroVector;  
  static const ON_2dVector XAxis;       
  static const ON_2dVector YAxis;       
  static const ON_2dVector UnsetVector; 

  
  
  
  
  
  
  static const ON_2dVector& UnitVector(
    int 
    );

  
  ON_2dVector();                     
  ON_2dVector(double x,double y);

  ON_2dVector(const ON_3dVector& ); 
  ON_2dVector(const ON_2dPoint& );  
  ON_2dVector(const ON_3dPoint& );  
  ON_2dVector(const double*);       

  ON_2dVector(const ON_2fVector& ); 
  ON_2dVector(const ON_3fVector& ); 
  ON_2dVector(const ON_2fPoint& );  
  ON_2dVector(const ON_3fPoint& );  
  ON_2dVector(const float*);        

  
  operator double*();
  operator const double*() const;

  
  ON_2dVector& operator=(const ON_3dVector&);
  ON_2dVector& operator=(const ON_2dPoint&);
  ON_2dVector& operator=(const ON_3dPoint&);
  ON_2dVector& operator=(const double*); 

  ON_2dVector& operator=(const ON_2fVector&);
  ON_2dVector& operator=(const ON_3fVector&);
  ON_2dVector& operator=(const ON_2fPoint&);
  ON_2dVector& operator=(const ON_3fPoint&);
  ON_2dVector& operator=(const float*);  

  ON_2dVector  operator-() const;

  ON_2dVector& operator*=(double);
  ON_2dVector& operator/=(double);
  ON_2dVector& operator+=(const ON_2dVector&);
  ON_2dVector& operator-=(const ON_2dVector&);
  

  double operator*(const ON_2dVector&) const; 
  double operator*(const ON_2dPoint&) const; 
  double operator*(const ON_2fVector&) const; 

  ON_2dVector  operator*(int) const;
  ON_2dVector  operator/(int) const;
  ON_2dVector  operator*(float) const;
  ON_2dVector  operator/(float) const;
  ON_2dVector  operator*(double) const;
  ON_2dVector  operator/(double) const;

  ON_2dVector  operator+(const ON_2dVector&) const;
  ON_2dPoint   operator+(const ON_2dPoint&) const;
  ON_2dVector  operator-(const ON_2dVector&) const;
  ON_2dPoint   operator-(const ON_2dPoint&) const;
  ON_3dVector  operator+(const ON_3dVector&) const;
  ON_3dPoint   operator+(const ON_3dPoint&) const;
  ON_3dVector  operator-(const ON_3dVector&) const;
  ON_3dPoint   operator-(const ON_3dPoint&) const;

  ON_2dVector  operator+(const ON_2fVector&) const;
  ON_2dPoint   operator+(const ON_2fPoint&) const;
  ON_2dVector  operator-(const ON_2fVector&) const;
  ON_2dPoint   operator-(const ON_2fPoint&) const;
  ON_3dVector  operator+(const ON_3fVector&) const;
  ON_3dPoint   operator+(const ON_3fPoint&) const;
  ON_3dVector  operator-(const ON_3fVector&) const;
  ON_3dPoint   operator-(const ON_3fPoint&) const;

  double operator*(const ON_4dPoint&) const;
  ON_2dVector operator*(const ON_Xform&) const;

  bool operator==(const ON_2dVector&) const;
  bool operator!=(const ON_2dVector&) const;

  
  bool operator<=(const ON_2dVector&) const;
  bool operator>=(const ON_2dVector&) const;
  bool operator<(const ON_2dVector&) const;
  bool operator>(const ON_2dVector&) const;

  
  double& operator[](int);
  double operator[](int) const;
  double& operator[](unsigned int);
  double operator[](unsigned int) const;

  



  bool IsValid() const;

  



  bool IsUnsetVector() const;

  
  void Set(double x,double y);

  int MaximumCoordinateIndex() const;
  double MaximumCoordinate() const; 

  int MinimumCoordinateIndex() const;
  double MinimumCoordinate() const; 

  double LengthSquared() const;
  double Length() const;

	
	
	double WedgeProduct(const ON_2dVector& B) const;

  bool Decompose( 
         
         
         
         
         
         
         const ON_2dVector&, 
         const ON_2dVector&, 
         double*, 
         double*  
         ) const;

  int IsParallelTo( 
        
        
        
        
        const ON_2dVector& other,                           
        double angle_tolerance = (3.141592653589793238462643/180.0) 
        ) const;

  bool IsPerpendicularTo(
        
        
        
        const ON_2dVector& other,                           
        double angle_tolerance = (3.141592653589793238462643/180.0) 
        ) const;

  void Zero(); 
  void Reverse(); 
  bool Unitize();  

  
  
  
  
  
  
  
  
  
  
  bool IsTiny(
         double tiny_tol = 2.3283064365386962890625e-10 
         ) const;

  
  
  bool IsZero() const;

  
  
  bool IsUnitVector() const;

  
  bool PerpendicularTo( 
                        
        const ON_2dVector& 
        );

  
  bool PerpendicularTo( 
        const ON_2dPoint&, 
        const ON_2dPoint& 
        );

  
  
  void Transform( 
        const ON_Xform& 
        );

  void Rotate( 
        double angle            
        );

  void Rotate( 
        double sin_angle,       
        double cos_angle        
        );
};


ON_2dVector operator*(int, const ON_2dVector&);


ON_2dVector operator*(float, const ON_2dVector&);


ON_2dVector operator*(double, const ON_2dVector&);







double 
ON_DotProduct( 
    const ON_2dVector&, 
    const ON_2dVector& 
    );


ON_3dVector 
ON_CrossProduct(
    const ON_2dVector&, 
    const ON_2dVector& 
    );


double			 
ON_WedgeProduct(		
    const ON_2dVector& A, 
    const ON_2dVector& B 
    );


bool 
ON_IsOrthogonalFrame( 
    const ON_2dVector&, 
    const ON_2dVector&  
    );


bool 
ON_IsOrthonormalFrame( 
    const ON_2dVector&, 
    const ON_2dVector&  
    );


bool 
ON_IsRightHandFrame( 
    const ON_2dVector&, 
    const ON_2dVector&  
    );





class  ON_3dVector
{
public:
  double x, y, z;

  static const ON_3dVector ZeroVector;  
  static const ON_3dVector XAxis;       
  static const ON_3dVector YAxis;       
  static const ON_3dVector ZAxis;       
  static const ON_3dVector UnsetVector; 

  
  
  
  
  
  
  
  static const ON_3dVector& UnitVector(
    int 
    );

  
  ON_3dVector();                     
  ON_3dVector(double x,double y,double z);
  ON_3dVector(const ON_2dVector& );  
  ON_3dVector(const ON_2dPoint& );   
  ON_3dVector(const ON_3dPoint& );   
  ON_3dVector(const double*);        

  ON_3dVector(const ON_2fVector& );  
  ON_3dVector(const ON_3fVector& );  
  ON_3dVector(const ON_2fPoint& );   
  ON_3dVector(const ON_3fPoint& );   
  ON_3dVector(const float*);         

  
  operator double*();
  operator const double*() const;

  
  ON_3dVector& operator=(const ON_2dVector&);
  ON_3dVector& operator=(const ON_2dPoint&);
  ON_3dVector& operator=(const ON_3dPoint&);
  ON_3dVector& operator=(const double*); 
  
  ON_3dVector& operator=(const ON_2fVector&);
  ON_3dVector& operator=(const ON_3fVector&);
  ON_3dVector& operator=(const ON_2fPoint&);
  ON_3dVector& operator=(const ON_3fPoint&);
  ON_3dVector& operator=(const float*);  

  ON_3dVector  operator-() const;

  ON_3dVector& operator*=(double);
  ON_3dVector& operator/=(double);
  ON_3dVector& operator+=(const ON_3dVector&);
  ON_3dVector& operator-=(const ON_3dVector&);
  

  double operator*(const ON_3dVector&) const; 
  double operator*(const ON_3dPoint&) const; 
  double operator*(const ON_3fVector&) const; 

  ON_3dVector  operator*(int) const;
  ON_3dVector  operator/(int) const;
  ON_3dVector  operator*(float) const;
  ON_3dVector  operator/(float) const;
  ON_3dVector  operator*(double) const;
  ON_3dVector  operator/(double) const;

  ON_3dVector  operator+(const ON_3dVector&) const;
  ON_3dPoint   operator+(const ON_3dPoint&) const;
  ON_3dVector  operator-(const ON_3dVector&) const;
  ON_3dPoint   operator-(const ON_3dPoint&) const;
  ON_3dVector  operator+(const ON_2dVector&) const;
  ON_3dPoint   operator+(const ON_2dPoint&) const;
  ON_3dVector  operator-(const ON_2dVector&) const;
  ON_3dPoint   operator-(const ON_2dPoint&) const;

  ON_3dVector  operator+(const ON_3fVector&) const;
  ON_3dPoint   operator+(const ON_3fPoint&) const;
  ON_3dVector  operator-(const ON_3fVector&) const;
  ON_3dPoint   operator-(const ON_3fPoint&) const;
  ON_3dVector  operator+(const ON_2fVector&) const;
  ON_3dPoint   operator+(const ON_2fPoint&) const;
  ON_3dVector  operator-(const ON_2fVector&) const;
  ON_3dPoint   operator-(const ON_2fPoint&) const;

  double operator*(const ON_4dPoint&) const;
  ON_3dVector operator*(const ON_Xform&) const;

  bool operator==(const ON_3dVector&) const;
  bool operator!=(const ON_3dVector&) const;

  
  bool operator<=(const ON_3dVector&) const;
  bool operator>=(const ON_3dVector&) const;
  bool operator<(const ON_3dVector&) const;
  bool operator>(const ON_3dVector&) const;

  
  double& operator[](int);
  double operator[](int) const;
  double& operator[](unsigned int);
  double operator[](unsigned int) const;

  



  bool IsValid() const;

  



  bool IsUnsetVector() const;

  
  void Set(double x,double y,double z);

  int MaximumCoordinateIndex() const;
  double MaximumCoordinate() const; 

  int MinimumCoordinateIndex() const;
  double MinimumCoordinate() const; 

  double LengthSquared() const;
  double Length() const;

  bool Decompose( 
         
         
         
         
         
         
         const ON_3dVector&, 
         const ON_3dVector&, 
         const ON_3dVector&, 
         double*, 
         double*, 
         double*  
         ) const;

  int IsParallelTo( 
        
        
        
        
        const ON_3dVector& other,                           
        double angle_tolerance = (3.141592653589793238462643/180.0) 
        ) const;

  bool IsPerpendicularTo(
        
        
        
        const ON_3dVector& other,                           
        double angle_tolerance = (3.141592653589793238462643/180.0) 
        ) const;

  double Fuzz( double tolerance = 2.3283064365386962890625e-10 ) const; 

  void Zero(); 
  void Reverse(); 
  bool Unitize();  
  double LengthAndUnitize(); 

  
  
  
  
  
  
  
  
  
  
  bool IsTiny(
         double tiny_tol = 2.3283064365386962890625e-10 
         ) const;

  
  
  bool IsZero() const;

  
  
  bool IsUnitVector() const;

  
  bool PerpendicularTo( 
                        
        const ON_3dVector& 
        );

  
  bool PerpendicularTo(
               
               
               
               
         const ON_3dPoint&, const ON_3dPoint&, const ON_3dPoint& 
         );

  
  
  void Transform( 
        const ON_Xform& 
        );

  void Rotate( 
        double angle,           
        const ON_3dVector& axis 
        );

  void Rotate( 
        double sin_angle,        
        double cos_angle,        
        const ON_3dVector& axis  
        );
};

class  ON_3dRay
{
public:
  ON_3dRay();
  ~ON_3dRay();

  ON_3dPoint  m_P;
  ON_3dVector m_V;
};






class  ON_PlaneEquation : public ON_3dVector
{
public:
  
  

  static const ON_PlaneEquation UnsetPlaneEquation; 
  static const ON_PlaneEquation ZeroPlaneEquation; 

  ON_PlaneEquation();

  ON_PlaneEquation(double xx, double yy, double zz, double dd);

  







  bool IsValid() const;

  




  bool IsSet() const;

  









  bool Create( ON_3dPoint P, ON_3dVector N );

  







  double ValueAt(ON_3dPoint P) const;
  double ValueAt(ON_4dPoint P) const;
  double ValueAt(ON_3dVector P) const;
  double ValueAt(double x, double y, double z) const;

  



















  double* ValueAt(
        int Pcount,
        const ON_3fPoint* P,
        double* value,
        double value_range[2]
        ) const;

  double* ValueAt(
        int Pcount,
        const ON_3dPoint* P,
        double* value,
        double value_range[2]
        ) const;

  






  double ZeroTolerance() const;

  


















  bool Transform( const ON_Xform& xform );

  







  ON_3dPoint ClosestPointTo( ON_3dPoint point ) const;

  








  double MinimumValueAt(const ON_BoundingBox& bbox) const;

  








  double MaximumValueAt(const ON_BoundingBox& bbox) const;

  




















  double MaximumValueAt(
    bool bRational,
    int point_count,
    int point_stride,
    const double* points,
    double stop_value
    ) const;

  




















  double MinimumValueAt(
    bool bRational,
    int point_count,
    int point_stride,
    const double* points,
    double stop_value
    ) const;

  





















  double MaximumAbsoluteValueAt(
    bool bRational,
    int point_count,
    int point_stride,
    const double* points,
    double stop_value
    ) const;

  























  bool IsNearerThan( 
          const class ON_BezierCurve& bezcrv,
          double s0,
          double s1,
          int sample_count,
          double endpoint_tolerance,
          double interior_tolerance,
          double* smin,
          double* smax
          ) const;
  
  bool operator==(const ON_PlaneEquation&) const;
  bool operator!=(const ON_PlaneEquation&) const;

  double d; 
};


ON_3dVector operator*(int, const ON_3dVector&);


ON_3dVector operator*(float, const ON_3dVector&);


ON_3dVector operator*(double, const ON_3dVector&);







double 
ON_DotProduct( 
    const ON_3dVector&, 
    const ON_3dVector& 
    );



ON_3dVector 
ON_CrossProduct(
    const ON_3dVector&, 
    const ON_3dVector& 
    );


ON_3dVector 
ON_CrossProduct( 
    const double*, 
    const double*  
    );


double 
ON_TripleProduct( 
    const ON_3dVector&,
    const ON_3dVector&,
    const ON_3dVector&
    );


double 
ON_TripleProduct(  
    const double*, 
    const double*, 
    const double*  
    );


bool 
ON_IsOrthogonalFrame( 
    const ON_3dVector&, 
    const ON_3dVector&, 
    const ON_3dVector&  
    );


bool 
ON_IsOrthonormalFrame( 
    const ON_3dVector&, 
    const ON_3dVector&, 
    const ON_3dVector&  
    );


bool 
ON_IsRightHandFrame( 
    const ON_3dVector&, 
    const ON_3dVector&, 
    const ON_3dVector&  
    );









extern  const ON_3dPoint  ON_UNSET_POINT; 


extern  const ON_3dVector ON_UNSET_VECTOR; 


extern  const ON_3dPoint  ON_origin; 


extern  const ON_3dVector ON_xaxis; 


extern  const ON_3dVector ON_yaxis; 


extern  const ON_3dVector ON_zaxis; 


























class ON_Xform;

class ON_2fPoint;
class ON_3fPoint;
class ON_4fPoint;

class ON_2fVector;
class ON_3fVector;





class  ON_2fPoint
{
public:
  float x, y;

  static const ON_2fPoint Origin; 

  
  ON_2fPoint();                       
  ON_2fPoint(float x,float y);

  ON_2fPoint(const ON_3fPoint& );     
  ON_2fPoint(const ON_4fPoint& );     
  ON_2fPoint(const ON_2fVector& );    
  ON_2fPoint(const ON_3fVector& );    
  ON_2fPoint(const float*);           

  ON_2fPoint(const ON_2dPoint& );     
  ON_2fPoint(const ON_3dPoint& );     
  ON_2fPoint(const ON_4dPoint& );     
  ON_2fPoint(const ON_2dVector& );    
  ON_2fPoint(const ON_3dVector& );    
  ON_2fPoint(const double*);          

  
  operator float*();
  operator const float*() const;

  
  ON_2fPoint& operator=(const ON_3fPoint&);
  ON_2fPoint& operator=(const ON_4fPoint&);
  ON_2fPoint& operator=(const ON_2fVector&);
  ON_2fPoint& operator=(const ON_3fVector&);
  ON_2fPoint& operator=(const float*);  

  ON_2fPoint& operator=(const ON_2dPoint&);
  ON_2fPoint& operator=(const ON_3dPoint&);
  ON_2fPoint& operator=(const ON_4dPoint&);
  ON_2fPoint& operator=(const ON_2dVector&);
  ON_2fPoint& operator=(const ON_3dVector&);
  ON_2fPoint& operator=(const double*); 

  ON_2fPoint& operator*=(float);
  ON_2fPoint& operator/=(float);
  ON_2fPoint& operator+=(const ON_2fPoint&);
  ON_2fPoint& operator+=(const ON_2fVector&);
  ON_2fPoint& operator+=(const ON_3fVector&);
  ON_2fPoint& operator-=(const ON_2fPoint&);
  ON_2fPoint& operator-=(const ON_2fVector&);
  ON_2fPoint& operator-=(const ON_3fVector&);

  ON_2fPoint  operator*(int) const;
  ON_2fPoint  operator/(int) const;
  ON_2fPoint  operator*(float) const;
  ON_2fPoint  operator/(float) const;
  ON_2dPoint  operator*(double) const;
  ON_2dPoint  operator/(double) const;

  ON_2fPoint  operator+(const ON_2fPoint&) const;
  ON_2fPoint  operator+(const ON_2fVector&) const;
  ON_2fVector operator-(const ON_2fPoint&) const;
  ON_2fPoint  operator-(const ON_2fVector&) const;
  ON_3fPoint  operator+(const ON_3fPoint&) const;
  ON_3fPoint  operator+(const ON_3fVector&) const;
  ON_3fVector operator-(const ON_3fPoint&) const;
  ON_3fPoint  operator-(const ON_3fVector&) const;

  ON_2dPoint  operator+(const ON_2dPoint&) const;
  ON_2dPoint  operator+(const ON_2dVector&) const;
  ON_2dVector operator-(const ON_2dPoint&) const;
  ON_2dPoint  operator-(const ON_2dVector&) const;
  ON_3dPoint  operator+(const ON_3dPoint&) const;
  ON_3dPoint  operator+(const ON_3dVector&) const;
  ON_3dVector operator-(const ON_3dPoint&) const;
  ON_3dPoint  operator-(const ON_3dVector&) const;

  float operator*(const ON_2fPoint&) const; 
  float operator*(const ON_2fVector&) const; 
  float operator*(const ON_4fPoint&) const;

  bool operator==(const ON_2fPoint&) const;
  bool operator!=(const ON_2fPoint&) const;

  
  bool operator<=(const ON_2fPoint&) const;
  bool operator>=(const ON_2fPoint&) const;
  bool operator<(const ON_2fPoint&) const;
  bool operator>(const ON_2fPoint&) const;

  
  float& operator[](int);
  float operator[](int) const;
  float& operator[](unsigned int);
  float operator[](unsigned int) const;

  
  void Set(float,float);

  double DistanceTo( const ON_2fPoint& ) const;

  int MaximumCoordinateIndex() const;
  double MaximumCoordinate() const; 

  void Zero(); 

  
  
  void Transform( 
        const ON_Xform&
        );

  void Rotate( 
        double,              
        const ON_2fPoint&   
        );

  void Rotate( 
        double,              
        double,              
        const ON_2fPoint&   
        );
};


ON_2fPoint operator*(int, const ON_2fPoint&);


ON_2fPoint operator*(float, const ON_2fPoint&);


ON_2dPoint operator*(double, const ON_2fPoint&);





class  ON_3fPoint
{
public:
  float x, y, z;

  static const ON_3fPoint Origin; 

  
  ON_3fPoint();                       
  ON_3fPoint(float x,float y,float z);
  ON_3fPoint(const ON_2fPoint& );     
  ON_3fPoint(const ON_4fPoint& );     
  ON_3fPoint(const ON_2fVector& );    
  ON_3fPoint(const ON_3fVector& );    
  ON_3fPoint(const float*);           

  ON_3fPoint(const ON_2dPoint& );     
  ON_3fPoint(const ON_3dPoint& );     
  ON_3fPoint(const ON_4dPoint& );     
  ON_3fPoint(const ON_2dVector& );    
  ON_3fPoint(const ON_3dVector& );    
  ON_3fPoint(const double*);          

  
  operator float*();
  operator const float*() const;

  
  ON_3fPoint& operator=(const ON_2fPoint&);
  ON_3fPoint& operator=(const ON_4fPoint&);
  ON_3fPoint& operator=(const ON_2fVector&);
  ON_3fPoint& operator=(const ON_3fVector&);
  ON_3fPoint& operator=(const float*);  

  ON_3fPoint& operator=(const ON_2dPoint&);
  ON_3fPoint& operator=(const ON_3dPoint&);
  ON_3fPoint& operator=(const ON_4dPoint&);
  ON_3fPoint& operator=(const ON_2dVector&);
  ON_3fPoint& operator=(const ON_3dVector&);
  ON_3fPoint& operator=(const double*); 

  ON_3fPoint& operator*=(float);
  ON_3fPoint& operator/=(float);
  ON_3fPoint& operator+=(const ON_3fPoint&);
  ON_3fPoint& operator+=(const ON_3fVector&);
  ON_3fPoint& operator-=(const ON_3fPoint&);
  ON_3fPoint& operator-=(const ON_3fVector&);

  ON_3fPoint  operator*(int) const;
  ON_3fPoint  operator/(int) const;
  ON_3fPoint  operator*(float) const;
  ON_3fPoint  operator/(float) const;
  ON_3dPoint  operator*(double) const;
  ON_3dPoint  operator/(double) const;

  ON_3fPoint  operator+(const ON_3fPoint&) const;
  ON_3fPoint  operator+(const ON_3fVector&) const;
  ON_3fVector operator-(const ON_3fPoint&) const;
  ON_3fPoint  operator-(const ON_3fVector&) const;
  ON_3fPoint  operator+(const ON_2fPoint&) const;
  ON_3fPoint  operator+(const ON_2fVector&) const;
  ON_3fVector operator-(const ON_2fPoint&) const;
  ON_3fPoint  operator-(const ON_2fVector&) const;

  ON_3dPoint  operator+(const ON_3dPoint&) const;
  ON_3dPoint  operator+(const ON_3dVector&) const;
  ON_3dVector operator-(const ON_3dPoint&) const;
  ON_3dPoint  operator-(const ON_3dVector&) const;
  ON_3dPoint  operator+(const ON_2dPoint&) const;
  ON_3dPoint  operator+(const ON_2dVector&) const;
  ON_3dVector operator-(const ON_2dPoint&) const;
  ON_3dPoint  operator-(const ON_2dVector&) const;

  float operator*(const ON_3fPoint&) const; 
  float operator*(const ON_3fVector&) const; 
  float operator*(const ON_4fPoint&) const;

  bool operator==(const ON_3fPoint&) const;
  bool operator!=(const ON_3fPoint&) const;

  
  bool operator<=(const ON_3fPoint&) const;
  bool operator>=(const ON_3fPoint&) const;
  bool operator<(const ON_3fPoint&) const;
  bool operator>(const ON_3fPoint&) const;

  
  float& operator[](int);
  float operator[](int) const;
  float& operator[](unsigned int);
  float operator[](unsigned int) const;

  
  void Set(float,float,float);

  double DistanceTo( const ON_3fPoint& ) const;

  int MaximumCoordinateIndex() const;
  double MaximumCoordinate() const; 
  double Fuzz( double = 2.3283064365386962890625e-10 ) const; 

  void Zero(); 

  
  
  void Transform( 
        const ON_Xform&
        );

  void Rotate( 
        double,               
        const ON_3fVector&, 
        const ON_3fPoint&   
        );

  void Rotate( 
        double,               
        double,               
        const ON_3fVector&, 
        const ON_3fPoint&   
        );
};


ON_3fPoint operator*(int, const ON_3fPoint&);


ON_3fPoint operator*(float, const ON_3fPoint&);


ON_3dPoint operator*(double, const ON_3fPoint&);





class  ON_4fPoint
{
public:
  float x, y, z, w;

  
  ON_4fPoint();                        
  ON_4fPoint(float x,float y,float z,float w);

  ON_4fPoint(const ON_2fPoint& );     
  ON_4fPoint(const ON_3fPoint& );     
  ON_4fPoint(const ON_2fVector& );    
  ON_4fPoint(const ON_3fVector& );    
  ON_4fPoint(const float*);           

  ON_4fPoint(const ON_2dPoint& );     
  ON_4fPoint(const ON_3dPoint& );     
  ON_4fPoint(const ON_4dPoint& );     
  ON_4fPoint(const ON_2dVector& );    
  ON_4fPoint(const ON_3dVector& );    
  ON_4fPoint(const double*);          

  
  operator float*();
  operator const float*() const;

  
  ON_4fPoint& operator=(const ON_2fPoint&);
  ON_4fPoint& operator=(const ON_3fPoint&);
  ON_4fPoint& operator=(const ON_2fVector&);
  ON_4fPoint& operator=(const ON_3fVector&);
  ON_4fPoint& operator=(const float*);  

  ON_4fPoint& operator=(const ON_2dPoint&);
  ON_4fPoint& operator=(const ON_3dPoint&);
  ON_4fPoint& operator=(const ON_4dPoint&);
  ON_4fPoint& operator=(const ON_2dVector&);
  ON_4fPoint& operator=(const ON_3dVector&);
  ON_4fPoint& operator=(const double*); 

  ON_4fPoint& operator*=(float);
  ON_4fPoint& operator/=(float);
  ON_4fPoint& operator+=(const ON_4fPoint&);
  ON_4fPoint& operator-=(const ON_4fPoint&);

  ON_4fPoint  operator*(float) const;
  ON_4fPoint  operator/(float) const;
  ON_4fPoint  operator+(const ON_4fPoint&) const; 
  ON_4fPoint  operator-(const ON_4fPoint&) const; 

  float operator*(const ON_4fPoint&) const;

  
  
  bool operator==(ON_4fPoint) const;
  bool operator!=(const ON_4fPoint&) const;

  
  float& operator[](int);
  float operator[](int) const;
  float& operator[](unsigned int);
  float operator[](unsigned int) const;

  
  void Set(float,float,float,float);

  int MaximumCoordinateIndex() const;
  double MaximumCoordinate() const; 

  void Zero();      
  bool Normalize(); 

  
  
  void Transform( 
        const ON_Xform&
        );
};


ON_4fPoint operator*(float, const ON_4fPoint&);


ON_4dPoint operator*(double, const ON_4fPoint&);





class  ON_2fVector
{
public:
  float x, y;

  static const ON_2fVector ZeroVector; 
  static const ON_2fVector XAxis;      
  static const ON_2fVector YAxis;      

  
  
  
  
  
  
  static const ON_2fVector& UnitVector(
    int 
    );

  
  ON_2fVector();                      
  ON_2fVector(float x,float y);
  ON_2fVector(const ON_2fPoint& );     
  ON_2fVector(const ON_3fPoint& );     
  ON_2fVector(const ON_4fPoint& );     
  ON_2fVector(const ON_3fVector& );    
  ON_2fVector(const float*);           

  ON_2fVector(const ON_2dPoint& );     
  ON_2fVector(const ON_3dPoint& );     
  ON_2fVector(const ON_4dPoint& );     
  ON_2fVector(const ON_2dVector& );    
  ON_2fVector(const ON_3dVector& );    
  ON_2fVector(const double*);          

  
  operator float*();
  operator const float*() const;

  
  ON_2fVector& operator=(const ON_2fPoint&);
  ON_2fVector& operator=(const ON_3fPoint&);
  ON_2fVector& operator=(const ON_3fVector&);
  ON_2fVector& operator=(const float*);  

  ON_2fVector& operator=(const ON_2dPoint&);
  ON_2fVector& operator=(const ON_3dPoint&);
  ON_2fVector& operator=(const ON_2dVector&);
  ON_2fVector& operator=(const ON_3dVector&);
  ON_2fVector& operator=(const double*); 

  ON_2fVector  operator-() const;

  ON_2fVector& operator*=(float);
  ON_2fVector& operator/=(float);
  ON_2fVector& operator+=(const ON_2fVector&);
  ON_2fVector& operator-=(const ON_2fVector&);

  float operator*(const ON_2fVector&) const; 
  float operator*(const ON_2fPoint&) const; 
  double operator*(const ON_2dVector&) const; 
  
  ON_2fVector  operator*(int) const;
  ON_2fVector  operator/(int) const;
  ON_2fVector  operator*(float) const;
  ON_2fVector  operator/(float) const;
  ON_2dVector  operator*(double) const;
  ON_2dVector  operator/(double) const;

  ON_2fVector  operator+(const ON_2fVector&) const;
  ON_2fPoint   operator+(const ON_2fPoint&) const;
  ON_2fVector  operator-(const ON_2fVector&) const;
  ON_2fPoint   operator-(const ON_2fPoint&) const;
  ON_3fVector  operator+(const ON_3fVector&) const;
  ON_3fPoint   operator+(const ON_3fPoint&) const;
  ON_3fVector  operator-(const ON_3fVector&) const;
  ON_3fPoint   operator-(const ON_3fPoint&) const;

  ON_2dVector  operator+(const ON_2dVector&) const;
  ON_2dPoint   operator+(const ON_2dPoint&) const;
  ON_2dVector  operator-(const ON_2dVector&) const;
  ON_2dPoint   operator-(const ON_2dPoint&) const;
  ON_3dVector  operator+(const ON_3dVector&) const;
  ON_3dPoint   operator+(const ON_3dPoint&) const;
  ON_3dVector  operator-(const ON_3dVector&) const;
  ON_3dPoint   operator-(const ON_3dPoint&) const;

  float operator*(const ON_4fPoint&) const;

  bool operator==(const ON_2fVector&) const;
  bool operator!=(const ON_2fVector&) const;

  
  bool operator<=(const ON_2fVector&) const;
  bool operator>=(const ON_2fVector&) const;
  bool operator<(const ON_2fVector&) const;
  bool operator>(const ON_2fVector&) const;

  
  float& operator[](int);
  float operator[](int) const;
  float& operator[](unsigned int);
  float operator[](unsigned int) const;

  
  void Set(float,float);

  int MaximumCoordinateIndex() const;
  double MaximumCoordinate() const; 

  double LengthSquared() const;
  double Length() const;

  bool Decompose( 
         
         
         
         
         
         
         const ON_2fVector&, 
         const ON_2fVector&, 
         double*, 
         double*  
         ) const;

  int IsParallelTo( 
        
        
        
        
        const ON_2fVector&,                 
        double = (3.141592653589793238462643/180.0) 
        ) const;

  bool IsPerpendicularTo(
        
        
        
        const ON_2fVector&,                 
        double = (3.141592653589793238462643/180.0) 
        ) const;

  void Zero(); 
  void Reverse(); 
  bool Unitize();  
  bool IsUnitVector() const;

  
  
  
  
  
  
  
  
  
  
  bool IsTiny(
         double = 2.3283064365386962890625e-10 
         ) const;

  
  
  bool IsZero() const;

  
  bool PerpendicularTo( 
                        
        const ON_2fVector& 
        );

  
  bool PerpendicularTo( 
        const ON_2fPoint&, 
        const ON_2fPoint& 
        );
};


ON_2fVector operator*(int, const ON_2fVector&);


ON_2fVector operator*(float, const ON_2fVector&);


ON_2dVector operator*(double, const ON_2fVector&);







float 
ON_DotProduct( 
    const ON_2fVector&, 
    const ON_2fVector& 
    );


ON_3fVector 
ON_CrossProduct(
    const ON_2fVector&, 
    const ON_2fVector& 
    );


bool 
ON_IsOrthogonalFrame( 
    const ON_2fVector&, 
    const ON_2fVector&  
    );


bool 
ON_IsOrthonormalFrame( 
    const ON_2fVector&, 
    const ON_2fVector&  
    );


bool 
ON_IsRightHandFrame( 
    const ON_2fVector&, 
    const ON_2fVector&  
    );





class  ON_3fVector
{
public:
  float x, y, z;

  static const ON_3fVector ZeroVector; 
  static const ON_3fVector XAxis;      
  static const ON_3fVector YAxis;      
  static const ON_3fVector ZAxis;      

  
  
  
  
  
  
  
  static const ON_3fVector& UnitVector(
    int 
    );

  
  ON_3fVector();                      
  ON_3fVector(float x,float y,float z);

  ON_3fVector(const ON_2fPoint& );     
  ON_3fVector(const ON_3fPoint& );     
  ON_3fVector(const ON_4fPoint& );     
  ON_3fVector(const ON_2fVector& );    
  ON_3fVector(const float*);           

  ON_3fVector(const ON_2dPoint& );     
  ON_3fVector(const ON_3dPoint& );     
  ON_3fVector(const ON_4dPoint& );     
  ON_3fVector(const ON_2dVector& );    
  ON_3fVector(const ON_3dVector& );    
  ON_3fVector(const double*);          

  
  operator float*();
  operator const float*() const;

  
  ON_3fVector& operator=(const ON_2fPoint&);
  ON_3fVector& operator=(const ON_3fPoint&);
  ON_3fVector& operator=(const ON_4fPoint&);
  ON_3fVector& operator=(const ON_2fVector&);
  ON_3fVector& operator=(const float*);  

  ON_3fVector& operator=(const ON_2dPoint&);
  ON_3fVector& operator=(const ON_3dPoint&);
  ON_3fVector& operator=(const ON_4dPoint&);
  ON_3fVector& operator=(const ON_2dVector&);
  ON_3fVector& operator=(const ON_3dVector&);
  ON_3fVector& operator=(const double*); 
  
  ON_3fVector  operator-() const;

  ON_3fVector& operator*=(float);
  ON_3fVector& operator/=(float);
  ON_3fVector& operator+=(const ON_3fVector&);
  ON_3fVector& operator-=(const ON_3fVector&);

  float operator*(const ON_3fVector&) const; 
  float operator*(const ON_3fPoint&) const; 
  double operator*(const ON_3dVector&) const; 

  ON_3fVector  operator*(int) const;
  ON_3fVector  operator/(int) const;
  ON_3fVector  operator*(float) const;
  ON_3fVector  operator/(float) const;
  ON_3dVector  operator*(double) const;
  ON_3dVector  operator/(double) const;

  ON_3fVector  operator+(const ON_3fVector&) const;
  ON_3fPoint   operator+(const ON_3fPoint&) const;
  ON_3fVector  operator-(const ON_3fVector&) const;
  ON_3fPoint   operator-(const ON_3fPoint&) const;
  ON_3fVector  operator+(const ON_2fVector&) const;
  ON_3fPoint   operator+(const ON_2fPoint&) const;
  ON_3fVector  operator-(const ON_2fVector&) const;
  ON_3fPoint   operator-(const ON_2fPoint&) const;

  ON_3dVector  operator+(const ON_3dVector&) const;
  ON_3dPoint   operator+(const ON_3dPoint&) const;
  ON_3dVector  operator-(const ON_3dVector&) const;
  ON_3dPoint   operator-(const ON_3dPoint&) const;
  ON_3dVector  operator+(const ON_2dVector&) const;
  ON_3dPoint   operator+(const ON_2dPoint&) const;
  ON_3dVector  operator-(const ON_2dVector&) const;
  ON_3dPoint   operator-(const ON_2dPoint&) const;

  float operator*(const ON_4fPoint&) const;

  bool operator==(const ON_3fVector&) const;
  bool operator!=(const ON_3fVector&) const;

  
  bool operator<=(const ON_3fVector&) const;
  bool operator>=(const ON_3fVector&) const;
  bool operator<(const ON_3fVector&) const;
  bool operator>(const ON_3fVector&) const;

  
  float& operator[](int);
  float operator[](int) const;
  float& operator[](unsigned int);
  float operator[](unsigned int) const;

  
  void Set(float,float,float);

  int MaximumCoordinateIndex() const;
  double MaximumCoordinate() const; 

  double LengthSquared() const;
  double Length() const;

  bool IsPerpendicularTo(
        
        
        
        const ON_3fVector&,                 
        double = (3.141592653589793238462643/180.0) 
        ) const;

  double Fuzz( double = 2.3283064365386962890625e-10 ) const; 

  void Zero(); 
  void Reverse(); 
  bool Unitize();  
  bool IsUnitVector() const;

  
  
  
  
  
  
  
  
  
  
  bool IsTiny(
         double = 2.3283064365386962890625e-10 
         ) const;

  
  
  bool IsZero() const;

  
  bool PerpendicularTo( 
                        
        const ON_3fVector& 
        );

  
  
  void Transform( 
        const ON_Xform& 
        );

  void Rotate( 
        double,             
        const ON_3fVector&  
        );

  void Rotate( 
        double,             
        double,             
        const ON_3fVector&  
        );
};


ON_3fVector operator*(int, const ON_3fVector&);


ON_3fVector operator*(float, const ON_3fVector&);


ON_3dVector operator*(double, const ON_3fVector&);







float 
ON_DotProduct( 
    const ON_3fVector&, 
    const ON_3fVector& 
    );



ON_3fVector 
ON_CrossProduct(
    const ON_3fVector&, 
    const ON_3fVector& 
    );


ON_3fVector 
ON_CrossProduct( 
    const float*, 
    const float*  
    );


float 
ON_TripleProduct( 
    const ON_3fVector&,
    const ON_3fVector&,
    const ON_3fVector&
    );


float 
ON_TripleProduct(  
    const float*, 
    const float*, 
    const float*  
    );


bool 
ON_IsOrthogonalFrame( 
    const ON_3fVector&, 
    const ON_3fVector&, 
    const ON_3fVector&  
    );


bool 
ON_IsOrthonormalFrame( 
    const ON_3fVector&, 
    const ON_3fVector&, 
    const ON_3fVector&  
    );


bool 
ON_IsRightHandFrame( 
    const ON_3fVector&, 
    const ON_3fVector&, 
    const ON_3fVector&  
    );







extern  const ON_3fPoint ON_forigin; 


extern  const ON_3fVector ON_fxaxis; 


extern  const ON_3fVector ON_fyaxis; 


extern  const ON_3fVector ON_fzaxis; 










class  ON_SurfaceCurvature
{
public:
  double k1, k2; 

  double GaussianCurvature() const;
  double MeanCurvature() const;
  double MinimumRadius() const;
  double MaximumRadius() const;
};
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class ON_2dPointArray;
class ON_3dPointArray;
class ON_4dPointArray;

class ON_2dVectorArray;
class ON_3dVectorArray;

class ON_2fPointArray;
class ON_3fPointArray;
class ON_4fPointArray;

class ON_2fVectorArray;
class ON_3fVectorArray;















template <class T> class ON_SimpleArray
{
public:
  

  
  
  ON_SimpleArray();
  ON_SimpleArray( int ); 

  
  ON_SimpleArray( const ON_SimpleArray<T>& );

  virtual
  ~ON_SimpleArray();

  
  virtual
  ON_SimpleArray<T>& operator=( const ON_SimpleArray<T>& );
  
  
  void EmergencyDestroy(void); 
                               
                               
                               
                               

  
  
	int Count() const;      
  unsigned int UnsignedCount() const;
	
	int Capacity() const;  

  unsigned int SizeOfArray() const; 

  unsigned int SizeOfElement() const; 

  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  
  
  T& operator[]( int );
  T& operator[]( unsigned int );
  T& operator[]( ON__INT64 );
  T& operator[]( ON__UINT64 );
  const T& operator[]( int ) const;
  const T& operator[]( unsigned int ) const;  
  const T& operator[]( ON__INT64 ) const;
  const T& operator[]( ON__UINT64 ) const;  

  operator T*();                     
  operator const T*() const;         
                                     

  T* First();
  const T* First() const;             

  
  T* At( int );
  T* At( unsigned int );
  T* At( ON__INT64 );
  T* At( ON__UINT64 );
  const T* At( int ) const;
  const T* At( unsigned int ) const;
  const T* At( ON__INT64 ) const;
  const T* At( ON__UINT64 ) const;

  T* Last();
  const T* Last() const;             

  
  

  T& AppendNew();                    
                                     
                                     

  void Append( const T& );           
                                     

  void Append( int, const T* );      


  void Insert( int, const T& );      
                                     
                                     
                                     

  void Remove();                     
                                     

  virtual
  void Remove( int );                
                                     
                                     
                                     

  void Empty();           

  void Reverse();         

  void Swap(int,int);     

  
  
  
  
  
  
  
  
  
  
  int Search( const T& ) const;

  
  
  
  
  
  
  
	
  int Search( const T*, int (*)(const T*,const T*) ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
	
  int BinarySearch( const T*, int (*)(const T*,const T*) ) const;
  int BinarySearch( const T*, int (*)(const T*,const T*), int ) const;

  
  
  
  bool HeapSort( int (*)(const T*,const T*) );

  
  
	
  bool QuickSort( int (*)(const T*,const T*) );

  


















  bool Sort( 
    ON::sort_algorithm sort_algorithm, 
    int*  ,
    int (*)(const T*,const T*) 
    ) const; 

  




















  bool Sort( 
    ON::sort_algorithm sort_algorithm,
    int*, 
    int (*)(const T*,const T*,void*), 
    void* 
    ) const; 

  
  
  
  bool Permute( const int*  );

  
  
  
  void Zero();

  
  
  
  void MemSet(unsigned char); 
  
  

  void Reserve( int );    

  void Shrink();          

  void Destroy();         
    
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  virtual
  T* Realloc(T*,int); 

  T* Array();                         
  
  const T* Array() const;             

  void SetCount( int );               
                                      

  void SetCapacity( int );            
                                      
                                      
                                      

  int NewCapacity() const;            
                                      

  








  T* KeepArray();

  




  void SetArray(T*);

  










  void SetArray(T*, int, int);

protected:
  
  void Move( int , int , int  );
	T*   m_a;        
	int  m_count;    
	int  m_capacity; 
};



























































class  ON_2dPointArray : public ON_SimpleArray<ON_2dPoint>
{
public:
  
  ON_2dPointArray();
  ON_2dPointArray(int);
  ON_2dPointArray( const ON_2dPointArray& );
  ON_2dPointArray& operator=( const ON_2dPointArray& );

  bool GetBBox( 
         double boxmin[2],
         double boxmax[2],
         int bGrowBox = false  
         ) const;

  bool Transform( const ON_Xform& );
  bool SwapCoordinates(int,int);
};





class  ON_2fPointArray : public ON_SimpleArray<ON_2fPoint>
{
public:
  
  ON_2fPointArray();
  ON_2fPointArray(int);
  ON_2fPointArray(const ON_2fPointArray&);
  ON_2fPointArray& operator=( const ON_2fPointArray& );

  bool GetBBox( 
         float boxmin[2],
         float boxmax[2],
         int bGrowBox = false  
         ) const;
  bool Transform( const ON_Xform& );
  bool SwapCoordinates(int,int);
};





class  ON_3dPointArray : public ON_SimpleArray<ON_3dPoint>
{
public:
  
  ON_3dPointArray();
  ON_3dPointArray(int);
  ON_3dPointArray(const ON_SimpleArray<ON_3dPoint>&);
  ON_3dPointArray& operator=( const ON_3dPointArray& );
  ON_3dPointArray(const ON_SimpleArray<ON_3fPoint>&);
  ON_3dPointArray& operator=( const ON_SimpleArray<ON_3fPoint>& );

  
  
  
  
  
  
  
  
  bool Create(
    int point_dimension,
    int bRational,
    int point_count,
    int point_stride,
    const double* points
    );

  
  
  
  
  
  
  
  
  bool Create(
    int point_dimension,
    int bRational,
    int point_count,
    int point_stride,
    const float* points
    );

  
  
  
  
  ON_BoundingBox BoundingBox() const;

  
  
  
  
  
  
  
  
  
  
  
  bool GetBoundingBox( 
    ON_BoundingBox& bbox,
    int bGrowBox = false
    ) const;

  
  
  
  
  
  
  
  
  
  
  
  bool GetBBox(
         double boxmin[3],
         double boxmax[3],
         int bGrowBox = false
         ) const;

  















	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  
  
  
  
  
  
  bool Transform( 
    const ON_Xform& xform 
    );

  
  
  
  
  
  
  
  
  
  
  bool SwapCoordinates(
    int i,
    int j
    );

  
  
  
  
  
  
  
  
  
  
  
  bool Rotate(
        double sin_angle,
        double cos_angle,
        const ON_3dVector& axis_of_rotation,
        const ON_3dPoint& center_of_rotation
        );

  
  
  
  
  
  
  
  
  
  
  
  bool Rotate(
        double angle_in_radians,
        const ON_3dVector& axis_of_rotation,
        const ON_3dPoint& center_of_rotation
        );

  
  
  
  
  
  
  bool Translate(
        const ON_3dVector& delta
        );

  

















  bool GetClosestPoint( 
          ON_3dPoint P,
          int* closest_point_index,
          double maximum_distance = 0.0
          ) const;

};





class  ON_3fPointArray : public ON_SimpleArray<ON_3fPoint>
{
public:
  
  ON_3fPointArray();
  ON_3fPointArray(int);
  ON_3fPointArray(const ON_3fPointArray&);
  ON_3fPointArray& operator=( const ON_3fPointArray& );

  bool GetBBox(
         float boxmin[3],
         float boxmax[3],
         int bGrowBox = false
         ) const;

  bool Transform( const ON_Xform& );

  bool SwapCoordinates(int,int);
};





class  ON_4dPointArray : public ON_SimpleArray<ON_4dPoint>
{
public:
  
  ON_4dPointArray();
  ON_4dPointArray(int);
  ON_4dPointArray(const ON_4dPointArray&);
  ON_4dPointArray& operator=( const ON_4dPointArray& );

  bool Transform( const ON_Xform& );
  bool SwapCoordinates(int,int);
};





class  ON_4fPointArray : public ON_SimpleArray<ON_4fPoint>
{
public:
  
  ON_4fPointArray();
  ON_4fPointArray(int);
  ON_4fPointArray(const ON_4fPointArray&);
  ON_4fPointArray& operator=( const ON_4fPointArray& );

  bool Transform( const ON_Xform& );
  bool SwapCoordinates(int,int);
};





class  ON_2dVectorArray : public ON_SimpleArray<ON_2dVector>
{
public:
  
  ON_2dVectorArray();
  ON_2dVectorArray(int);
  ON_2dVectorArray(const ON_2dVectorArray&);
  ON_2dVectorArray& operator=( const ON_2dVectorArray& );

  bool GetBBox(
         double boxmin[2],
         double boxmax[2],
         int bGrowBox = false
         ) const;

  bool Transform( const ON_Xform& );
  bool SwapCoordinates(int,int);
};





class  ON_2fVectorArray : public ON_SimpleArray<ON_2fVector>
{
public:
  
  ON_2fVectorArray();
  ON_2fVectorArray(int);
  ON_2fVectorArray(const ON_2fVectorArray&);
  ON_2fVectorArray& operator=( const ON_2fVectorArray& );

  bool GetBBox(
         float boxmin[2],
         float boxmax[2],
         bool = false
         ) const;

  bool Transform( const ON_Xform& );
  bool SwapCoordinates(int,int);
};





class  ON_3dVectorArray : public ON_SimpleArray<ON_3dVector>
{
public:
  ON_3dVectorArray();
  ON_3dVectorArray(int);
  ON_3dVectorArray(const ON_3dVectorArray&);
  ON_3dVectorArray& operator=( const ON_3dVectorArray& );

  bool GetBBox(
         double boxmin[3],
         double boxmax[3],
         bool bGrowBow = false
         ) const;

  bool Transform( const ON_Xform& );
  bool SwapCoordinates(int,int);
};




class  ON_3fVectorArray : public ON_SimpleArray<ON_3fVector>
{
public:
  ON_3fVectorArray();
  ON_3fVectorArray(int);
  ON_3fVectorArray(const ON_3fVectorArray&);
  ON_3fVectorArray& operator=( const ON_3fVectorArray& );

  bool GetBBox(
         float boxmin[3],
         float boxmax[3],
         int bGrowBox = false
         ) const;

  bool Transform( const ON_Xform& );
  bool SwapCoordinates(int,int);
};
















template <class T> class ON_ClassArray
{
public:
  
  ON_ClassArray(); 
  ON_ClassArray( int ); 

  
  ON_ClassArray( const ON_ClassArray<T>& );

  virtual
  ~ON_ClassArray(); 

  
  ON_ClassArray<T>& operator=( const ON_ClassArray<T>& );
  
  
  void EmergencyDestroy(void); 
                               
                               
                               
                               

  
  
	int Count() const;      
	unsigned int UnsignedCount() const;

	int Capacity() const;  

  unsigned int SizeOfArray() const; 

  unsigned int SizeOfElement() const; 

  
  
  T& operator[]( int );
  T& operator[]( unsigned int );
  T& operator[]( ON__INT64 );
  T& operator[]( ON__UINT64 );
  const T& operator[]( int ) const;
  const T& operator[]( unsigned int ) const;  
  const T& operator[]( ON__INT64 ) const;
  const T& operator[]( ON__UINT64 ) const;  

  operator T*();                     
  operator const T*() const;         
                                     
  T* First();
  const T* First() const;             

  
  T* At( int );
  T* At( unsigned int );
  T* At( ON__INT64 );
  T* At( ON__UINT64 );
  const T* At( int ) const;
  const T* At( unsigned int ) const;
  const T* At( ON__INT64 ) const;
  const T* At( ON__UINT64 ) const;

  T* Last();
  const T* Last() const;             

  
  

  T& AppendNew();                    
                                     

  void Append( const T& );           
                                     

  void Append( int, const T*);       

  void Insert( int, const T& );      
                                     
                                     
                                     

  void Remove();                     
                                     

  void Remove( int );                
                                     
                                     
                                     

  void Empty();           

  void Reverse();         

  void Swap(int,int);     

  
  
  
  
  
  
  
  int Search( const T*, int (*)(const T*,const T*) ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
	
  int BinarySearch( const T*, int (*)(const T*,const T*) ) const;
  int BinarySearch( const T*, int (*)(const T*,const T*), int ) const;

  
  
	
  
  virtual
  bool HeapSort( int (*)(const T*,const T*) );

  
  
  virtual
  bool QuickSort( int (*)(const T*,const T*) );

  



















  bool Sort( 
    ON::sort_algorithm sort_algorithm, 
    int*  ,
    int (*)(const T*,const T*)
    ) const; 

  




















  bool Sort( 
    ON::sort_algorithm sort_algorithm,
    int*, 
    int (*)(const T*,const T*,void*), 
    void* 
    ) const; 

  
  
  
  bool Permute( const int*  );

  
  
  
  
  void Zero();

  

  void Reserve( int ); 

  void Shrink();       

  void Destroy();      
    
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  virtual
  T* Realloc(T*,int); 

  T* Array();                         
  
  const T* Array() const;             

  void SetCount( int );               
                                      

  void SetCapacity( int );            
                                      
                                      

  int NewCapacity() const;            
                                      

  T* KeepArray();                     
                                      
                                      
                                      
                                      
                                      
                                      
                                      
                                      
                                      

  




  void SetArray(T*);

  












  void SetArray(T*, int, int);

protected:
  
  void Move( int , int , int  );
  void ConstructDefaultElement(T*);
  void DestroyElement(T&);
	T*   m_a;        
	int  m_count;    
	int  m_capacity; 
};










template <class T> class ON_ObjectArray : public ON_ClassArray<T>
{
public:
  ON_ObjectArray(); 
  ~ON_ObjectArray(); 
  ON_ObjectArray( int ); 
  ON_ObjectArray( const ON_ObjectArray<T>& );
  ON_ObjectArray<T>& operator=( const ON_ObjectArray<T>& );

  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  
  
  
  T* Realloc(T*,int);

  
  
  
  
  bool HeapSort( int (*)(const T*,const T*) );

  
  
  
  bool QuickSort( int (*)(const T*,const T*) );
};

class  ON_UuidPair
{
public:
  



  static 
  int CompareFirstUuid(const class ON_UuidPair*,const class ON_UuidPair*);

  



  static 
  int CompareSecondUuid(const class ON_UuidPair*,const class ON_UuidPair*);

  



  static 
  int Compare(const class ON_UuidPair*,const class ON_UuidPair*);

  ON_UuidPair();
  ON_UUID m_uuid[2];
};



























class  ON_UuidList : private ON_SimpleArray<ON_UUID>
{
public:
  ON_UuidList();
  ON_UuidList(int capacity);
  ~ON_UuidList();
  ON_UuidList(const ON_UuidList& src);
  ON_UuidList& operator=(const ON_UuidList& src);

  




  static
  int CompareUuid( const ON_UUID* a, const ON_UUID* b );

  



  int Count() const;

  







  const ON_UUID* Array() const;

  




  void Empty();

  




  void Destroy();

  void Reserve(int capacity);

  






  void Compact();

  














  bool AddUuid(ON_UUID uuid, bool bCheckForDupicates=true);

  








  bool RemoveUuid(ON_UUID uuid);

  





  bool FindUuid(ON_UUID uuid) const;

  







  bool Write( 
    class ON_BinaryArchive& archive 
    ) const;

  












  bool Write( 
    class ON_BinaryArchive& archive,
      bool bSortBeforeWrite
    ) const;

  







  bool Read( 
    class ON_BinaryArchive& archive 
    );

  













  bool Read( 
    class ON_BinaryArchive& archive,
    bool bSortAferRead
    );

  







  int GetUuids(
     ON_SimpleArray<ON_UUID>& uuid_list
     ) const;

  








  void RemapUuids( 
    const ON_SimpleArray<ON_UuidPair>& uuid_remap 
    );

private:
  void PurgeHelper();
  void SortHelper();
  ON_UUID* SearchHelper(const ON_UUID*) const;
  int m_sorted_count;
  int m_removed_count;
};









class  ON_UuidIndexList : private ON_SimpleArray<ON_UuidIndex>
{
public:
  ON_UuidIndexList();
  ON_UuidIndexList(int capacity);
  ~ON_UuidIndexList();
  ON_UuidIndexList(const ON_UuidIndexList& src);
  ON_UuidIndexList& operator=(const ON_UuidIndexList& src);

  



  int Count() const;

  




  void Empty();

  void Reserve( int capacity );

  
















  bool AddUuidIndex(
    ON_UUID uuid, 
    int index, 
    bool bCheckForDupicates=true);

  








  bool RemoveUuid(
    ON_UUID uuid
    );

  









  bool FindUuid(ON_UUID uuid, int* index=0) const;

  







  bool FindUuidIndex(ON_UUID uuid, int index) const;

  







  int GetUuids(
     ON_SimpleArray<ON_UUID>& uuid_list
     ) const;

  











  void ImproveSearchSpeed();

private:
  ON_UuidIndex* SearchHelper(const ON_UUID*) const;
  unsigned int m_sorted_count;
  unsigned int m_removed_count;
};









class  ON_UuidPairList : private ON_SimpleArray<ON_UuidPair>
{
public:
  ON_UuidPairList();
  ON_UuidPairList(int capacity);
  ~ON_UuidPairList();
  ON_UuidPairList(const ON_UuidPairList& src);
  ON_UuidPairList& operator=(const ON_UuidPairList& src);

  



  int Count() const;

  




  void Empty();

  void Reserve( int capacity );

  


















  bool AddPair(
    ON_UUID id1, 
    ON_UUID id2, 
    bool bCheckForDupicates=true
    );

  








  bool RemovePair(
    ON_UUID id1
    );

  









  bool RemovePair(
    ON_UUID id1,
    ON_UUID id2
    );

  










  bool FindId1(ON_UUID id1, ON_UUID* id2=0) const;

  






  bool FindPair(ON_UUID id1, ON_UUID id2) const;

  







  int GetId1s(
     ON_SimpleArray<ON_UUID>& uuid_list
     ) const;

  











  void ImproveSearchSpeed();

private:
  ON_UuidPair* SearchHelper(const ON_UUID*) const;
  unsigned int m_sorted_count;
  unsigned int m_removed_count;
};

class  ON_2dexMap : private ON_SimpleArray<ON_2dex>
{
public:
  ON_2dexMap();
  ON_2dexMap(int capacity);
  ~ON_2dexMap();

  int Count() const;

  void Reserve(int capacity);

  const ON_2dex* Array() const;

  ON_2dex operator[](int i) const;

  











  void Create(int count, int i0, int j);

  












  int FindIndex( 
          int i, 
          int not_found_rc
          ) const;

  









  bool AddIndex( 
          int i, 
          int j
          );

  










  bool SetIndex( 
          int i, 
          int j
          );

  







  void SetOrAddIndex( 
          int i, 
          int j
          );

  









  bool RemoveIndex( 
          int i
          );

  const ON_2dex* Find2dex(int i) const;

private:
  bool m_bSorted;
};
























template< class T>
static
int ON_CompareIncreasing( const T* a, const T* b);































template< class T>
static
int ON_CompareDecreasing( const T* a, const T* b);





























#pragma warning(push)







#pragma warning(disable:4100)






#pragma warning(disable:4211)


















template <class T>
T* ON_SimpleArray<T>::Realloc(T* ptr,int capacity)
{
  return (T*)onrealloc(ptr,capacity*sizeof(T));
}

template <class T>
ON_SimpleArray<T>::ON_SimpleArray()
                          : m_a(0),
                            m_count(0),
                            m_capacity(0)
{}

template <class T>
ON_SimpleArray<T>::ON_SimpleArray( int c )
                          : m_a(0),
                            m_count(0),
                            m_capacity(0)
{
  if ( c > 0 ) 
    SetCapacity( c );
}


template <class T>
ON_SimpleArray<T>::ON_SimpleArray( const ON_SimpleArray<T>& src )
                          : m_a(0),
                            m_count(0),
                            m_capacity(0)
{
  *this = src; 
}

template <class T>
ON_SimpleArray<T>::~ON_SimpleArray()
{ 
  SetCapacity(0);
}

template <class T>
ON_SimpleArray<T>& ON_SimpleArray<T>::operator=( const ON_SimpleArray<T>& src )
{
  if( &src != this ) {
    if ( src.m_count <= 0 ) {
      m_count = 0;
    }
    else {
      if ( m_capacity < src.m_count ) {
        SetCapacity( src.m_count );
      }
      if ( m_a ) {
        m_count = src.m_count;
        memcpy( m_a, src.m_a, m_count*sizeof(T) );
      }
    }
  }  
  return *this;
}



template <class T>
void ON_SimpleArray<T>::EmergencyDestroy(void)
{
  m_count = 0;
  m_capacity = 0;
  m_a = 0;
}



template <class T>
int ON_SimpleArray<T>::Count() const
{
  return m_count;
}

template <class T>
unsigned int ON_SimpleArray<T>::UnsignedCount() const
{
  return ((unsigned int)m_count);
}

template <class T>
int ON_SimpleArray<T>::Capacity() const
{
  return m_capacity;
}

template <class T>
unsigned int ON_SimpleArray<T>::SizeOfArray() const
{
  return ((unsigned int)(m_capacity*sizeof(T)));
}

template <class T>
unsigned int ON_SimpleArray<T>::SizeOfElement() const
{
  return ((unsigned int)(sizeof(T)));
}


template <class T>
ON__UINT32 ON_SimpleArray<T>::DataCRC(ON__UINT32 current_remainder) const
{
  return ON_CRC32(current_remainder,m_count*sizeof(m_a[0]),m_a);
}

template <class T>
T& ON_SimpleArray<T>::operator[]( int i )
{ 






  return m_a[i]; 
}

template <class T>
T& ON_SimpleArray<T>::operator[]( unsigned int i )
{ 






  return m_a[i]; 
}


template <class T>
T& ON_SimpleArray<T>::operator[]( ON__INT64 i )
{ 






  return m_a[i]; 
}

template <class T>
T& ON_SimpleArray<T>::operator[]( ON__UINT64 i )
{ 






  return m_a[i]; 
}

template <class T>
const T& ON_SimpleArray<T>::operator[](int i) const
{






  return m_a[i];
}

template <class T>
const T& ON_SimpleArray<T>::operator[](unsigned int i) const
{






  return m_a[i];
}


template <class T>
const T& ON_SimpleArray<T>::operator[](ON__INT64 i) const
{






  return m_a[i];
}

template <class T>
const T& ON_SimpleArray<T>::operator[](ON__UINT64 i) const
{






  return m_a[i];
}


template <class T>
ON_SimpleArray<T>::operator T*()
{
  return (m_count > 0) ? m_a : 0;
}

template <class T>
ON_SimpleArray<T>::operator const T*() const
{
  return (m_count > 0) ? m_a : 0;
}

template <class T>
T* ON_SimpleArray<T>::Array()
{
  return m_a;
}

template <class T>
const T* ON_SimpleArray<T>::Array() const
{
  return m_a;
}

template <class T>
T* ON_SimpleArray<T>::KeepArray()
{
  T* p = m_a;
  m_a = 0;
  m_count = 0;
  m_capacity = 0;
  return p;
}

template <class T>
void ON_SimpleArray<T>::SetArray(T* p)
{
  if ( m_a && m_a != p )
    onfree(m_a);
  m_a = p;
}

template <class T>
void ON_SimpleArray<T>::SetArray(T* p, int count, int capacity)
{
  if ( m_a && m_a != p )
    onfree(m_a);
  m_a = p;
  m_count = count;
  m_capacity = capacity;
}

template <class T>
T* ON_SimpleArray<T>::First()
{ 
  return (m_count > 0) ? m_a : 0;
}

template <class T>
const T* ON_SimpleArray<T>::First() const
{
  return (m_count > 0) ? m_a : 0;
}

template <class T>
T* ON_SimpleArray<T>::At( int i )
{ 
  return (i >= 0 && i < m_count) ? m_a+i : 0;
}

template <class T>
T* ON_SimpleArray<T>::At( unsigned int i )
{ 
  return (i < (unsigned int)m_count) ? m_a+i : 0;
}

template <class T>
const T* ON_SimpleArray<T>::At( int i) const
{
  return (i >= 0 && i < m_count) ? m_a+i : 0;
}

template <class T>
const T* ON_SimpleArray<T>::At( unsigned int i) const
{
  return (i < (unsigned int)m_count) ? m_a+i : 0;
}

template <class T>
T* ON_SimpleArray<T>::At( ON__INT64 i )
{ 
  return (i >= 0 && i < (ON__INT64)m_count) ? m_a+i : 0;
}

template <class T>
T* ON_SimpleArray<T>::At( ON__UINT64 i )
{ 
  return (i < (ON__UINT64)m_count) ? m_a+i : 0;
}

template <class T>
const T* ON_SimpleArray<T>::At( ON__INT64 i) const
{
  return (i >= 0 && i < (ON__INT64)m_count) ? m_a+i : 0;
}

template <class T>
const T* ON_SimpleArray<T>::At( ON__UINT64 i) const
{
  return (i < (ON__UINT64)m_count) ? m_a+i : 0;
}

template <class T>
T* ON_SimpleArray<T>::Last()
{ 
  return (m_count > 0) ? m_a+(m_count-1) : 0;
}

template <class T>
const T* ON_SimpleArray<T>::Last() const
{
  return (m_count > 0) ? m_a+(m_count-1) : 0;
}



template <class T>
void ON_SimpleArray<T>::Move( int dest_i, int src_i, int ele_cnt )
{
  
  
  if ( ele_cnt <= 0 || src_i < 0 || dest_i < 0 || src_i == dest_i || 
       src_i + ele_cnt > m_count || dest_i > m_count )
    return;

  int capacity = dest_i + ele_cnt;
  if ( capacity > m_capacity ) {
    if ( capacity < 2*m_capacity )
      capacity = 2*m_capacity;
    SetCapacity( capacity );
  }

  memmove( &m_a[dest_i], &m_a[src_i], ele_cnt*sizeof(T) );
}

template <class T>
T& ON_SimpleArray<T>::AppendNew()
{
  if ( m_count == m_capacity ) 
  {
    int new_capacity = NewCapacity();
    Reserve( new_capacity );
  }
  memset( &m_a[m_count], 0, sizeof(T) );
  return m_a[m_count++];
}

template <class T>
void ON_SimpleArray<T>::Append( const T& x ) 
{
  if ( m_count == m_capacity ) 
  {
    const int newcapacity = NewCapacity();
    if (m_a)
    {
      const int s = (int)(&x - m_a); 
      if ( s >= 0 && s < m_capacity )
      {
        
        
        
        
        T temp;   
        temp = x; 
        Reserve( newcapacity );
        m_a[m_count++] = temp;
        return;
      }
    }
    Reserve(newcapacity);
  }
  m_a[m_count++] = x;
}

template <class T>
void ON_SimpleArray<T>::Append( int count, const T* p ) 
{
  if ( count > 0 && p ) 
  {
    if ( count + m_count > m_capacity ) 
    {
      int newcapacity = NewCapacity();
      if ( newcapacity < count + m_count )
        newcapacity = count + m_count;
      Reserve( newcapacity );
    }
    memcpy( m_a + m_count, p, count*sizeof(T) );
    m_count += count;
  }
}

template <class T>
void ON_SimpleArray<T>::Insert( int i, const T& x ) 
{
  if( i >= 0 && i <= m_count ) 
  {
    if ( m_count == m_capacity ) 
    {
      int newcapacity = NewCapacity();
      Reserve( newcapacity );
    }
	  m_count++;
    Move( i+1, i, m_count-1-i );
	  m_a[i] = x;
  }
}

template <class T>
void ON_SimpleArray<T>::Remove()
{
  Remove(m_count-1);
} 

template <class T>
void ON_SimpleArray<T>::Remove( int i )
{
  if ( i >= 0 && i < m_count ) {
    Move( i, i+1, m_count-1-i );
    m_count--;
    memset( &m_a[m_count], 0, sizeof(T) );
  }
} 

template <class T>
void ON_SimpleArray<T>::Empty()
{
  if ( m_a )
    memset( m_a, 0, m_capacity*sizeof(T) );
  m_count = 0;
}

template <class T>
void ON_SimpleArray<T>::Reverse()
{
  
  
  
  T t;
  int i = 0;  
  int j = m_count-1;
  for ( ; i < j; i++, j-- ) {
    t = m_a[i];
    m_a[i] = m_a[j];
    m_a[j] = t;
  }
}

template <class T>
void ON_SimpleArray<T>::Swap( int i, int j )
{
  if ( i != j ) {
    const T t(m_a[i]);
    m_a[i] = m_a[j];
    m_a[j] = t;
  }
}

template <class T>
int ON_SimpleArray<T>::Search( const T& key ) const
{
  const T* p = &key;
  for ( int i = 0; i < m_count; i++ ) {
    if (!memcmp(p,m_a+i,sizeof(T))) 
      return i;
  }
  return -1;
}

template <class T>
int ON_SimpleArray<T>::Search( const T* key, int (*compar)(const T*,const T*) ) const
{
  for ( int i = 0; i < m_count; i++ ) {
    if (!compar(key,m_a+i)) 
      return i;
  }
  return -1;
}

template <class T>
int ON_SimpleArray<T>::BinarySearch( const T* key, int (*compar)(const T*,const T*) ) const
{
  const T* found = (key&&m_a&&m_count>0) 
                 ? (const T*)bsearch( key, m_a, m_count, sizeof(T), (int(*)(const void*,const void*))compar ) 
                 : 0;

  

  int rc;
  if ( 0 != found )
  {
    


    rc = ((int)(found - m_a));



















  }
  else
  {
    
    rc = -1;
  }

  return rc;

}

template <class T>
int ON_SimpleArray<T>::BinarySearch( const T* key, int (*compar)(const T*,const T*), int count ) const
{
  if ( count > m_count )
    count = m_count;
  if ( count <= 0 )
    return -1;
  const T* found = (key&&m_a&&m_count>0) 
                 ? (const T*)bsearch( key, m_a, count, sizeof(T), (int(*)(const void*,const void*))compar ) 
                 : 0;

  

  int rc;
  if ( 0 != found )
  {
    


    rc = ((int)(found - m_a));



















  }
  else
  {
    
    rc = -1;
  }
  return rc;
}



template <class T>
bool ON_SimpleArray<T>::HeapSort( int (*compar)(const T*,const T*) )
{
  bool rc = false;
  if ( m_a && m_count > 0 && compar ) {
    if ( m_count > 1 )
      ON_hsort( m_a, m_count, sizeof(T), (int(*)(const void*,const void*))compar );
    rc = true;
  }
  return rc;
}

template <class T>
bool ON_SimpleArray<T>::QuickSort( int (*compar)(const T*,const T*) )
{
  bool rc = false;
  if ( m_a && m_count > 0 && compar ) {
    if ( m_count > 1 )
      ON_qsort( m_a, m_count, sizeof(T), (int(*)(const void*,const void*))compar );
    rc = true;
  }
  return rc;
}

template <class T>
bool ON_SimpleArray<T>::Sort( ON::sort_algorithm sa, int* index, int (*compar)(const T*,const T*) ) const
{
  bool rc = false;
  if ( m_a && m_count > 0 && compar && index ) {
    if ( m_count > 1 )
      ON_Sort(sa, index, m_a, m_count, sizeof(T), (int(*)(const void*,const void*))compar );
    else if ( m_count == 1 )
      index[0] = 0;
    rc = true;
  }
  return rc;
}

template <class T>
bool ON_SimpleArray<T>::Sort( ON::sort_algorithm sa, int* index, int (*compar)(const T*,const T*,void*),void* p ) const
{
  bool rc = false;
  if ( m_a && m_count > 0 && compar && index ) {
    if ( m_count > 1 )
      ON_Sort(sa, index, m_a, m_count, sizeof(T), (int(*)(const void*,const void*,void*))compar, p );
    else if ( m_count == 1 )
      index[0] = 0;
    rc = true;
  }
  return rc;
}

template <class T>
bool ON_SimpleArray<T>::Permute( const int* index )
{
  bool rc = false;
  if ( m_a && m_count > 0 && index ) {
    int i;
    T* buffer = (T*)onmalloc(m_count*sizeof(buffer[0]));
    memcpy( buffer, m_a, m_count*sizeof(T) );
    for (i = 0; i < m_count; i++ )
      memcpy( m_a+i, buffer+index[i], sizeof(T) ); 
    onfree(buffer);
    rc = true;
  }
  return rc;
}

template <class T>
void ON_SimpleArray<T>::Zero()
{
  if ( m_a && m_capacity > 0 ) {
    memset( m_a, 0, m_capacity*sizeof(T) );
  }
}

template <class T>
void ON_SimpleArray<T>::MemSet( unsigned char value )
{
  if ( m_a && m_capacity > 0 ) {
    memset( m_a, value, m_capacity*sizeof(T) );
  }
}



template <class T>
void ON_SimpleArray<T>::Reserve( int newcap ) 
{
  if( m_capacity < newcap )
    SetCapacity( newcap );
}

template <class T>
void ON_SimpleArray<T>::Shrink()
{
  SetCapacity( m_count );
}

template <class T>
void ON_SimpleArray<T>::Destroy()
{
  SetCapacity( 0 );
}



template <class T>
void ON_SimpleArray<T>::SetCount( int count ) 
{
  if ( count >= 0 && count <= m_capacity )
    m_count = count;
}

template <class T>
void ON_SimpleArray<T>::SetCapacity( int capacity ) 
{
  
  if ( capacity != m_capacity ) {
    if( capacity > 0 ) {
      if ( m_count > capacity )
        m_count = capacity;
      
      m_a = Realloc( m_a, capacity );
      if ( m_a ) {
        if ( capacity > m_capacity ) {
          
          memset( m_a + m_capacity, 0, (capacity-m_capacity)*sizeof(T) );
        }
        m_capacity = capacity;
      }
      else {
        
        m_count = m_capacity = 0;
      }
    }
    else if (m_a) {
      Realloc(m_a,0);
      m_a = 0;
      m_count = m_capacity = 0;
    }
  }
}

template <class T>
int ON_SimpleArray<T>::NewCapacity() const
{
  
  
  
  
  
  
  
  

  
  
  
  
  
  

  
  const size_t cap_size = 32*sizeof(void*)*1024*1024;
  if (m_count*sizeof(T) <= cap_size || m_count < 8)
    return ((m_count <= 2) ? 4 : 2*m_count);

  
  
  int delta_count = 8 + cap_size/sizeof(T);
  if ( delta_count > m_count )
    delta_count = m_count;
  return (m_count + delta_count);
}

template <class T>
int ON_ClassArray<T>::NewCapacity() const
{
  
  
  
  
  
  
  
  

  
  
  
  
  
  

  
  const size_t cap_size = 32*sizeof(void*)*1024*1024;
  if (m_count*sizeof(T) <= cap_size || m_count < 8)
    return ((m_count <= 2) ? 4 : 2*m_count);

  
  
  int delta_count = 8 + cap_size/sizeof(T);
  if ( delta_count > m_count )
    delta_count = m_count;
  return (m_count + delta_count);
}





template <class T>
ON_ObjectArray<T>::ON_ObjectArray()
{
}

template <class T>
ON_ObjectArray<T>::~ON_ObjectArray()
{
}

template <class T>
ON_ObjectArray<T>::ON_ObjectArray( const ON_ObjectArray<T>& src ) : ON_ClassArray<T>(src)
{
}

template <class T>
ON_ObjectArray<T>& ON_ObjectArray<T>::operator=( const ON_ObjectArray<T>& src)
{
  if( this != &src)
  {
    ON_ClassArray<T>::operator =(src);
  }
  return *this;
}


template <class T>
ON_ObjectArray<T>::ON_ObjectArray( int c )
                  : ON_ClassArray<T>(c)
{
}

template <class T>
T* ON_ObjectArray<T>::Realloc(T* ptr,int capacity)
{
  T* reptr = (T*)onrealloc(ptr,capacity*sizeof(T));
  if ( ptr && reptr && reptr != ptr )
  {
    
    
    int i;
    for ( i = 0; i < this->m_count; i++ )
    {
      reptr[i].MemoryRelocate();
    }
  }
  return reptr;
}








template <class T>
T* ON_ClassArray<T>::Realloc(T* ptr,int capacity)
{
  return (T*)onrealloc(ptr,capacity*sizeof(T));
}

template <class T>
ON__UINT32 ON_ObjectArray<T>::DataCRC(ON__UINT32 current_remainder) const
{
  
  
  int i;
  for ( i = 0; i < this->m_count; i++ )
  {
    current_remainder = this->m_a[i].DataCRC(current_remainder);
  }
  return current_remainder;
}

template <class T>
ON_ClassArray<T>::ON_ClassArray()
                          : m_a(0),
                            m_count(0),
                            m_capacity(0)                            
{}

template <class T>
ON_ClassArray<T>::ON_ClassArray( int c )
                          : m_a(0),
                            m_count(0),
                            m_capacity(0)                            
{
  if ( c > 0 ) 
    SetCapacity( c );
}


template <class T>
ON_ClassArray<T>::ON_ClassArray( const ON_ClassArray<T>& src )
                          : m_a(0),
                            m_count(0),
                            m_capacity(0)                            
{
  *this = src; 
}

template <class T>
ON_ClassArray<T>::~ON_ClassArray()
{ 
  SetCapacity(0);
}

template <class T>
ON_ClassArray<T>& ON_ClassArray<T>::operator=( const ON_ClassArray<T>& src )
{
  int i;
  if( &src != this ) {
    if ( src.m_count <= 0 ) {
      m_count = 0;
    }
    else {
      if ( m_capacity < src.m_count ) {
        SetCapacity( src.m_count );
      }
      if ( m_a ) {
        m_count = src.m_count;
        for ( i = 0; i < m_count; i++ ) {
          m_a[i] = src.m_a[i];
        }
      }
    }
  }  
  return *this;
}



template <class T>
void ON_ClassArray<T>::EmergencyDestroy(void)
{
  m_count = 0;
  m_capacity = 0;
  m_a = 0;
}



template <class T>
int ON_ClassArray<T>::Count() const
{
  return m_count;
}

template <class T>
unsigned int ON_ClassArray<T>::UnsignedCount() const
{
  return ((unsigned int)m_count);
}

template <class T>
int ON_ClassArray<T>::Capacity() const
{
  return m_capacity;
}

template <class T>
unsigned int ON_ClassArray<T>::SizeOfArray() const
{
  return ((unsigned int)(m_capacity*sizeof(T)));
}

template <class T>
unsigned int ON_ClassArray<T>::SizeOfElement() const
{
  return ((unsigned int)(sizeof(T)));
}

template <class T>
T& ON_ClassArray<T>::operator[]( int i )
{ 






  return m_a[i]; 
}


template <class T>
T& ON_ClassArray<T>::operator[]( ON__INT64 i )
{ 






  return m_a[i]; 
}

template <class T>
T& ON_ClassArray<T>::operator[]( unsigned int i )
{ 






  return m_a[i]; 
}

template <class T>
T& ON_ClassArray<T>::operator[]( ON__UINT64 i )
{ 






  return m_a[i]; 
}

template <class T>
const T& ON_ClassArray<T>::operator[](int i) const
{






  return m_a[i];
}

template <class T>
const T& ON_ClassArray<T>::operator[](ON__INT64 i) const
{






  return m_a[i];
}

template <class T>
const T& ON_ClassArray<T>::operator[](unsigned int i) const
{






  return m_a[i];
}

template <class T>
const T& ON_ClassArray<T>::operator[](ON__UINT64 i) const
{






  return m_a[i];
}

template <class T>
ON_ClassArray<T>::operator T*()
{
  return (m_count > 0) ? m_a : 0;
}

template <class T>
ON_ClassArray<T>::operator const T*() const
{
  return (m_count > 0) ? m_a : 0;
}

template <class T>
T* ON_ClassArray<T>::Array()
{
  return m_a;
}

template <class T>
const T* ON_ClassArray<T>::Array() const
{
  return m_a;
}

template <class T>
T* ON_ClassArray<T>::KeepArray()
{
  T* p = m_a;
  m_a = 0;
  m_count = 0;
  m_capacity = 0;
  return p;
}

template <class T>
void ON_ClassArray<T>::SetArray(T* p)
{
  if ( m_a && m_a != p )
    Destroy();
  m_a = p;
}

template <class T>
void ON_ClassArray<T>::SetArray(T* p, int count, int capacity)
{
  if ( m_a && m_a != p )
    Destroy();
  m_a = p;
  m_count = count;
  m_capacity = capacity;
}

template <class T>
T* ON_ClassArray<T>::First()
{ 
  return (m_count > 0) ? m_a : 0;
}

template <class T>
const T* ON_ClassArray<T>::First() const
{
  return (m_count > 0) ? m_a : 0;
}

template <class T>
T* ON_ClassArray<T>::At( int i )
{ 
  return (i >= 0 && i < m_count) ? m_a+i : 0;
}

template <class T>
T* ON_ClassArray<T>::At( unsigned int i )
{ 
  return (i < (unsigned int)m_count) ? m_a+i : 0;
}

template <class T>
const T* ON_ClassArray<T>::At( int i) const
{
  return (i >= 0 && i < m_count) ? m_a+i : 0;
}

template <class T>
const T* ON_ClassArray<T>::At( unsigned int i) const
{
  return (i < (unsigned int)m_count) ? m_a+i : 0;
}


template <class T>
T* ON_ClassArray<T>::At( ON__INT64 i )
{ 
  return (i >= 0 && i < (ON__INT64)m_count) ? m_a+i : 0;
}

template <class T>
T* ON_ClassArray<T>::At( ON__UINT64 i )
{ 
  return (i < (ON__UINT64)m_count) ? m_a+i : 0;
}

template <class T>
const T* ON_ClassArray<T>::At( ON__INT64 i) const
{
  return (i >= 0 && i < (ON__INT64)m_count) ? m_a+i : 0;
}

template <class T>
const T* ON_ClassArray<T>::At( ON__UINT64 i) const
{
  return (i < (ON__UINT64)m_count) ? m_a+i : 0;
}


template <class T>
T* ON_ClassArray<T>::Last()
{ 
  return (m_count > 0) ? m_a+(m_count-1) : 0;
}

template <class T>
const T* ON_ClassArray<T>::Last() const
{
  return (m_count > 0) ? m_a+(m_count-1) : 0;
}



template <class T>
void ON_ClassArray<T>::Move( int dest_i, int src_i, int ele_cnt )
{
  
  
  
  if ( ele_cnt <= 0 || src_i < 0 || dest_i < 0 || src_i == dest_i || 
       src_i + ele_cnt > m_count || dest_i > m_count )
    return;

  int capacity = dest_i + ele_cnt;
  if ( capacity > m_capacity ) {
    if ( capacity < 2*m_capacity )
      capacity = 2*m_capacity;
    SetCapacity( capacity );
  }

  
  
  
  
  memmove( (void*)(&m_a[dest_i]), (const void*)(&m_a[src_i]), ele_cnt*sizeof(T) );
}

template <class T>
void ON_ClassArray<T>::ConstructDefaultElement(T* p)
{
  
  
  new(p) T;
}

template <class T>
void ON_ClassArray<T>::DestroyElement(T& x)
{
  x.~T();
}

template <class T>
T& ON_ClassArray<T>::AppendNew()
{
  if ( m_count == m_capacity ) 
  {
    int newcapacity = NewCapacity();
    Reserve( newcapacity );
  }
  else
  {
    
    DestroyElement(m_a[m_count]);
    
    ConstructDefaultElement(&m_a[m_count]);
  }
  return m_a[m_count++];
}

template <class T>
void ON_ClassArray<T>::Append( const T& x ) 
{
  if ( m_count == m_capacity ) 
  {
    const int newcapacity = NewCapacity();
    if (m_a)
    {
      const int s = (int)(&x - m_a); 
      if ( s >= 0 && s < m_capacity )
      {
        
        
        
        
        T temp;   
        temp = x; 
        Reserve( newcapacity );
        m_a[m_count++] = temp;
        return;
      }
    }
    Reserve(newcapacity);
  }
  m_a[m_count++] = x;
}

template <class T>
void ON_ClassArray<T>::Append( int count, const T* p ) 
{
  int i;
  if ( count > 0 && p ) 
  {
    if ( count + m_count > m_capacity ) 
    {
      int newcapacity = NewCapacity();
      if ( newcapacity < count + m_count )
        newcapacity = count + m_count;
      Reserve( newcapacity );
    }
    for ( i = 0; i < count; i++ ) {
      m_a[m_count++] = p[i];
    }
  }
}


template <class T>
void ON_ClassArray<T>::Insert( int i, const T& x ) 
{
  if( i >= 0 && i <= m_count ) 
  {
    if ( m_count == m_capacity ) 
    {
      int newcapacity = NewCapacity();
      Reserve( newcapacity );
    }
    DestroyElement( m_a[m_count] );
	  m_count++;
    if ( i < m_count-1 ) {
      Move( i+1, i, m_count-1-i );
      
      
      memset( (void*)(&m_a[i]), 0, sizeof(T) );
      ConstructDefaultElement( &m_a[i] );
    }
    else {
      ConstructDefaultElement( &m_a[m_count-1] );
    }
	  m_a[i] = x; 
  }
}

template <class T>
void ON_ClassArray<T>::Remove( )
{
  Remove(m_count-1);
} 

template <class T>
void ON_ClassArray<T>::Remove( int i )
{
  if ( i >= 0 && i < m_count ) 
  {
    DestroyElement( m_a[i] );
    
    
    memset( (void*)(&m_a[i]), 0, sizeof(T) );
    Move( i, i+1, m_count-1-i );
    
    
    memset( (void*)(&m_a[m_count-1]), 0, sizeof(T) );
    ConstructDefaultElement(&m_a[m_count-1]);
    m_count--;
  }
} 

template <class T>
void ON_ClassArray<T>::Empty()
{
  int i;
  for ( i = m_count-1; i >= 0; i-- ) {
    DestroyElement( m_a[i] );
    
    
    memset( (void*)(&m_a[i]), 0, sizeof(T) );
    ConstructDefaultElement( &m_a[i] );
  }
  m_count = 0;
}

template <class T>
void ON_ClassArray<T>::Reverse()
{
  
  
  
  char t[sizeof(T)];
  int i = 0;  
  int j = m_count-1;
  for ( ; i < j; i++, j-- ) {
    memcpy( t, &m_a[i], sizeof(T) );
    memcpy( &m_a[i], &m_a[j], sizeof(T) );
    memcpy( &m_a[j], t, sizeof(T) );
  }
}

template <class T>
void ON_ClassArray<T>::Swap( int i, int j )
{
  if ( i != j && i >= 0 && j >= 0 && i < m_count && j < m_count ) {
    char t[sizeof(T)];
    memcpy( t,       &m_a[i], sizeof(T) );
    memcpy( &m_a[i], &m_a[j], sizeof(T) );
    memcpy( &m_a[j], t,       sizeof(T) );
  }
}

template <class T>
int ON_ClassArray<T>::Search( const T* key, int (*compar)(const T*,const T*) ) const
{
  for ( int i = 0; i < m_count; i++ ) 
  {
    if (!compar(key,m_a+i)) 
      return i;
  }
  return -1;
}

template <class T>
int ON_ClassArray<T>::BinarySearch( const T* key, int (*compar)(const T*,const T*) ) const
{
  const T* found = (key&&m_a&&m_count>0) ? (const T*)bsearch( key, m_a, m_count, sizeof(T), (int(*)(const void*,const void*))compar ) : 0;

  
  return found ? ((int)(found - m_a)) : -1;




}

template <class T>
int ON_ClassArray<T>::BinarySearch( const T* key, int (*compar)(const T*,const T*), int count ) const
{
  if ( count > m_count )
    count = m_count;
  if ( count <= 0 )
    return -1;
  const T* found = (key&&m_a&&m_count>0) ? (const T*)bsearch( key, m_a, count, sizeof(T), (int(*)(const void*,const void*))compar ) : 0;

  
  return found ? ((int)(found - m_a)) : -1;




}

template <class T>
bool ON_ClassArray<T>::HeapSort( int (*compar)(const T*,const T*) )
{
  bool rc = false;
  if ( m_a && m_count > 0 && compar ) 
  {
    if ( m_count > 1 )
      ON_hsort( m_a, m_count, sizeof(T), (int(*)(const void*,const void*))compar );
    rc = true;
  }
  return rc;
}

template <class T>
bool ON_ClassArray<T>::QuickSort( int (*compar)(const T*,const T*) )
{
  bool rc = false;
  if ( m_a && m_count > 0 && compar ) 
  {
    if ( m_count > 1 )
      ON_qsort( m_a, m_count, sizeof(T), (int(*)(const void*,const void*))compar );
    rc = true;
  }
  return rc;
}



template <class T>
bool ON_ObjectArray<T>::HeapSort( int (*compar)(const T*,const T*) )
{
  bool rc = false;
  
  
  if ( this->m_a && this->m_count > 0 && compar ) 
  {
    if ( this->m_count > 1 )
    {
      ON_hsort( this->m_a, this->m_count, sizeof(T), (int(*)(const void*,const void*))compar );
      
      
      
      int i;
      for ( i = 0; i < this->m_count; i++ )
      {
        this->m_a[i].MemoryRelocate();
      }
    }
    rc = true;
  }
  return rc;
}

template <class T>
bool ON_ObjectArray<T>::QuickSort( int (*compar)(const T*,const T*) )
{
  bool rc = false;
  
  
  if ( this->m_a && this->m_count > 0 && compar ) 
  {
    if ( this->m_count > 1 )
    {
      ON_qsort( this->m_a, this->m_count, sizeof(T), (int(*)(const void*,const void*))compar );

      
      
      int i;
      for ( i = 0; i < this->m_count; i++ )
      {
        this->m_a[i].MemoryRelocate();
      }
    }
    rc = true;
  }
  return rc;
}


template <class T>
bool ON_ClassArray<T>::Sort( ON::sort_algorithm sa, int* index, int (*compar)(const T*,const T*) ) const
{
  bool rc = false;
  if ( m_a && m_count > 0 && compar && index )
  {
    if ( m_count > 1 )
      ON_Sort(sa, index, m_a, m_count, sizeof(T), (int(*)(const void*,const void*))compar );
    else if ( m_count == 1 )
      index[0] = 0;
    rc = true;
  }
  return rc;
}

template <class T>
bool ON_ClassArray<T>::Sort( ON::sort_algorithm sa, int* index, int (*compar)(const T*,const T*,void*),void* p ) const
{
  bool rc = false;
  if ( m_a && m_count > 0 && compar && index ) 
  {
    if ( m_count > 1 )
      ON_Sort(sa, index, m_a, m_count, sizeof(T), (int(*)(const void*,const void*,void*))compar, p );
    else if ( m_count == 1 )
      index[0] = 0;
    rc = true;
  }
  return rc;
}

template <class T>
bool ON_ClassArray<T>::Permute( const int* index )
{
  bool rc = false;
  if ( m_a && m_count > 0 && index ) 
  {
    int i;
    T* buffer = (T*)onmalloc(m_count*sizeof(buffer[0]));
    memcpy( buffer, m_a, m_count*sizeof(T) );
    for (i = 0; i < m_count; i++ )
      memcpy( m_a+i, buffer+index[i], sizeof(T) ); 
    onfree(buffer);
    rc = true;
  }
  return rc;
}

template <class T>
void ON_ClassArray<T>::Zero()
{
  int i;
  if ( m_a && m_capacity > 0 ) {
    for ( i = m_capacity-1; i >= 0; i-- ) {
      DestroyElement(m_a[i]);
      
      
      memset( (void*)(&m_a[i]), 0, sizeof(T) );
      ConstructDefaultElement(&m_a[i]);
    }
  }
}



template <class T>
void ON_ClassArray<T>::Reserve( int newcap ) 
{
  if( m_capacity < newcap )
    SetCapacity( newcap );
}

template <class T>
void ON_ClassArray<T>::Shrink()
{
  SetCapacity( m_count );
}

template <class T>
void ON_ClassArray<T>::Destroy()
{
  SetCapacity( 0 );
}



template <class T>
void ON_ClassArray<T>::SetCount( int count ) 
{
  if ( count >= 0 && count <= m_capacity )
    m_count = count;
}

template <class T>
void ON_ClassArray<T>::SetCapacity( int capacity ) 
{
  
  int i;
  if ( capacity < 1 ) {
    if ( m_a ) {
      for ( i = m_capacity-1; i >= 0; i-- ) {
        DestroyElement(m_a[i]);
      }
      Realloc(m_a,0);
      m_a = 0;
    }
    m_count = 0;
    m_capacity = 0;
  }
  else if ( m_capacity < capacity ) {
    
    m_a = Realloc( m_a, capacity );
    
    if ( 0 != m_a )
    {
      
      
      
      
      memset( (void*)(m_a + m_capacity), 0, (capacity-m_capacity)*sizeof(T) );
      for ( i = m_capacity; i < capacity; i++ ) {
        ConstructDefaultElement(&m_a[i]);
      }
      m_capacity = capacity;
    }
    else
    {
      
      m_capacity = 0;
      m_count = 0;
    }
  }
  else if ( m_capacity > capacity ) {
    
    for ( i = m_capacity-1; i >= capacity; i-- ) {
      DestroyElement(m_a[i]);
    }
    if ( m_count > capacity )
      m_count = capacity;
    m_capacity = capacity;
    m_a = Realloc( m_a, capacity );
    if ( 0 == m_a )
    {
      
      m_capacity = 0;
      m_count = 0;
    }
  }
}





template< class T>
static
int ON_CompareIncreasing( const T* a, const T* b)
{
	if( *a < *b ) 
    return -1;
	if( *b < *a ) 
    return  1;
	return 0;
}

template< class T>
static
int ON_CompareDecreasing( const T* a, const T* b)
{
	if( *b < *a ) 
    return -1;
	if( *a < *b ) 
    return  1;
	return 0;
}


#pragma warning(pop)






















































int ON_GetBase32Digits( const ON_SimpleArray<unsigned char>& x, ON_SimpleArray<unsigned char>& base32_digits );

int ON_GetBase32Digits( const unsigned char* x, int x_count, unsigned char* base32_digits );





















bool ON_Base32ToString( const ON_SimpleArray<unsigned char>& base32_digits, ON_String& sBase32 );

bool ON_Base32ToString( const ON_SimpleArray<unsigned char>& base32_digits, ON_wString& sBase32 );

bool ON_Base32ToString( const unsigned char* base32_digits, int base32_digit_count, char* sBase32 );
















int ON_CorrectBase32StringTypos( const wchar_t* sBase32, ON_wString& sBase32clean );

int ON_CorrectBase32StringTypos( const char* sBase32, ON_String& sBase32clean );

int ON_CorrectBase32StringTypos( const char* sBase32, char* sBase32clean );

























int ON_StringToBase32(const ON_wString& sBase32, ON_SimpleArray<unsigned char>& base32_digits );

int ON_StringToBase32(const ON_String& sBase32, ON_SimpleArray<unsigned char>& base32_digits );

int ON_StringToBase32(const char* sBase32, unsigned char* base32_digits );































class  ON_PlugInRef
{
public:
  ON_PlugInRef();

  
  ON_UUID m_plugin_id;
  int m_plugin_type; 
  int m_plugin_platform; 
  int m_plugin_sdk_version;
  int m_plugin_sdk_service_release;
  ON_wString m_plugin_name;
  ON_wString m_plugin_version;
  ON_wString m_plugin_filename; 

  
  ON_wString m_developer_organization;
  ON_wString m_developer_address;
  ON_wString m_developer_country;
  ON_wString m_developer_phone;
  ON_wString m_developer_email;
  ON_wString m_developer_website;
  ON_wString m_developer_updateurl;
  ON_wString m_developer_fax;

  void Default();

  bool Write( ON_BinaryArchive& file ) const;
  bool Read( ON_BinaryArchive& file );

  void Dump(ON_TextLog& text_log) const;
};









































class  ON_BoundingBox
{
public:
  static const ON_BoundingBox EmptyBoundingBox; 

  ON_BoundingBox(); 

	ON_BoundingBox(
    const ON_3dPoint&, 
    const ON_3dPoint&  
    );
  ~ON_BoundingBox();


  
  int IsVisible( 
    const ON_Xform& bbox2c
    ) const;

  void Destroy(); 

  
  ON_3dPoint& operator[](int);
  const ON_3dPoint& operator[](int) const;

  ON_3dPoint Min() const;
  ON_3dPoint Max() const;
  ON_3dVector Diagonal() const; 
  ON_3dPoint Center() const;
  ON_3dPoint Corner( 
    int, 
    int, 
    int  
    ) const;
  bool GetCorners( 
    ON_3dPointArray& box_corners 
    ) const;
  bool GetCorners( 
    ON_3dPoint box_corners[8] 
    ) const;

  











  bool GetEdges( 
    ON_Line edges[12]  
    ) const;

  bool IsValid() const; 
  
  void Dump(class ON_TextLog&) const;
  
  















  int IsDegenerate( 
    double tolerance = -1.23432101234321e+308
    ) const;


  
  
  
  
  
  bool Transform( const ON_Xform& );

  double Tolerance() const; 
                            


  
  
  bool Set(     
    int dim,
    int is_rat,
    int count,
    int stride,
    const double* point_array,
    int bGrowBox = false
    );

  bool Set(
    const ON_3dPoint& point,
    int bGrowBox = false
    );

  bool Set(
    const ON_2dPoint& point,
    int bGrowBox = false
    );

  bool Set(     
    const ON_SimpleArray<ON_4dPoint>& point_array,
    int bGrowBox = false
    );

  bool Set(     
    const ON_SimpleArray<ON_3dPoint>& point_array,
    int bGrowBox = false
    );

  bool Set(     
    const ON_SimpleArray<ON_2dPoint>& point_array,
    int bGrowBox = false
    );

  bool Set(     
    int dim,
    int is_rat,
    int count,
    int stride,
    const float* point_array,
    int bGrowBox = false
    );

  bool Set(
    const ON_3fPoint& point,
    int bGrowBox = false
    );

  bool Set(
    const ON_2fPoint& point,
    int bGrowBox = false
    );

  bool Set(     
    const ON_SimpleArray<ON_4fPoint>& point_array,
    int bGrowBox = false
    );

  bool Set(     
    const ON_SimpleArray<ON_3fPoint>& point_array,
    int bGrowBox = false
    );

  bool Set(     
    const ON_SimpleArray<ON_2fPoint>& point_array,
    int bGrowBox = false
    );

	bool IsPointIn(
         const ON_3dPoint& test_point, 
         int bStrictlyIn = false 
                   
                   
                   
         ) const;

  
  
  
  ON_3dPoint ClosestPoint( 
    const ON_3dPoint& test_point
    ) const;


  











  double MinimumDistanceTo( const ON_3dPoint& P ) const;

  











  double MaximumDistanceTo( const ON_3dPoint& P ) const;


  












  double MinimumDistanceTo( const ON_BoundingBox& other ) const;

  












  double MaximumDistanceTo( const ON_BoundingBox& other ) const;

  












  double MinimumDistanceTo( const ON_Line& line ) const;

  












  double MinimumDistanceTo( const ON_Plane& plane ) const;
  double MinimumDistanceTo( const ON_PlaneEquation& plane_equation ) const;

  












  double MaximumDistanceTo( const ON_Line& line ) const;

  
















  double MaximumDistanceTo( const ON_Plane& plane ) const;
  double MaximumDistanceTo( const ON_PlaneEquation& plane_equation ) const;


  










  bool IsFartherThan( double d, const ON_3dPoint& P ) const;

  












  bool IsFartherThan( double d, const ON_Line& line ) const;

  











  bool IsFartherThan( double d, const ON_Plane& plane ) const;

  













  bool IsFartherThan( double d, const ON_PlaneEquation& plane_equation ) const;

  










  bool IsFartherThan( double d, const ON_BoundingBox& other ) const;


  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int GetClosestPoint( 
    const ON_Line&, 
    ON_3dPoint&,    
    double*,        
    double*         
    ) const;

  
  
  
  
  bool GetClosestPoint( 
         const ON_BoundingBox&, 
         ON_3dPoint&, 
         ON_3dPoint&  
         )  const;

  
  
  ON_3dPoint FarPoint( 
    const ON_3dPoint& 
    ) const;

  
  
  bool GetFarPoint( 
         const ON_BoundingBox&, 
         ON_3dPoint&, 
         ON_3dPoint&  
         )  const;

  












  bool Intersection(
         const ON_BoundingBox& other_bbox
         );

  













  bool Intersection( 
         const ON_BoundingBox& bbox_A, 
         const ON_BoundingBox& bbox_B
         );

	bool Intersection(				
				 const ON_Line&,		
				 double* =0 ,			
				 double* =0       
				 ) const;			 

  












  bool Includes( 
    const ON_BoundingBox& other,
    bool bProperSubSet = false
    ) const;

	double Volume() const;

  double Area() const;

  
  
  bool Union( 
         const ON_BoundingBox&
         );

  bool Union( 
         const ON_BoundingBox&, 
         const ON_BoundingBox&
         );
                  
  









  bool IsDisjoint(
    const ON_BoundingBox& other_bbox
    ) const;

  bool SwapCoordinates( int, int );

  ON_3dPoint m_min;
  ON_3dPoint m_max;
};


































bool ON_GetPointListBoundingBox(
    int dim,
    int is_rat,
    int count,
    int stride,
    const double* point_list,
    ON_BoundingBox& bbox,
    int bGrowBox = false,
    const ON_Xform* xform = 0
    );


bool ON_GetPointListBoundingBox(
    int dim,
    int is_rat,
    int count,
    int stride,
    const float* point_list,
    ON_BoundingBox& bbox,
    int bGrowBox = false,
    const ON_Xform* xform = 0
    );


bool ON_GetPointListBoundingBox(
    int dim,
    int is_rat,
    int count,
    int stride,
    const double* point_list,
    double* boxmin,       
    double* boxmax,       
    int bGrowBox
    );


ON_BoundingBox ON_PointListBoundingBox(
    int dim,
    int is_rat,
    int count,
    int stride,
    const double* point_list
    );


bool ON_GetPointListBoundingBox(
    int dim,
    int is_rat,
    int count,
    int stride,
    const float* point_list,
    float* boxmin,       
    float* boxmax,       
    int bGrowBox
    );


ON_BoundingBox ON_PointListBoundingBox( 
    int dim,
    int is_rat,
    int count,
    int stride,
    const float* point_list
    );


bool ON_GetPointGridBoundingBox(
        int dim,
        int is_rat,
        int point_count0, int point_count1,
        int point_stride0, int point_stride1,
        const double* point_grid,
        double* boxmin,       
        double* boxmax,       
        int bGrowBox
    );


ON_BoundingBox ON_PointGridBoundingBox(
        int dim,
        int is_rat,
        int point_count0, int point_count1,
        int point_stride0, int point_stride1,
        const double* point_grid
    );


double ON_BoundingBoxTolerance(
        int dim,
        const double* bboxmin,
        const double* bboxmax
        );





























bool ON_BeyondSinglePrecision( const ON_BoundingBox& bbox, ON_Xform* xform );


bool ON_WorldBBoxIsInTightBBox( 
          const ON_BoundingBox& tight_bbox, 
          const ON_BoundingBox& world_bbox,
          const ON_Xform* xform
          );























class ON_Xform;

class  ON_Matrix
{
public:
  ON_Matrix();
  ON_Matrix( 
    int row_count,
    int col_count
     );
  ON_Matrix( 
     int, 
     int, 
     int, 
     int  
     );
  ON_Matrix( const ON_Xform& );
  ON_Matrix( const ON_Matrix& );

  














  ON_Matrix(
    int row_count,
    int col_count,
    double** M,
    bool bDestructorFreeM
    );

  virtual ~ON_Matrix();
  void EmergencyDestroy(); 

  
  
  
  double* operator[](int);
  const double* operator[](int) const;

  ON_Matrix& operator=(const ON_Matrix&);
  ON_Matrix& operator=(const ON_Xform&);

  bool IsValid() const;
  int IsSquare() const; 
  int RowCount() const;
  int ColCount() const;
  int MinCount() const; 
  int MaxCount() const; 

  void RowScale(int,double); 
  void ColScale(int,double);
  void RowOp(int,double,int);
  void ColOp(int,double,int);

  bool Create(
     int, 
     int  
     );

  bool Create( 
               
               
               
     int, 
     int, 
     int, 
     int  
     );

  














  bool Create(
    int row_count,
    int col_count,
    double** M,
    bool bDestructorFreeM
    );


  void Destroy();

  void Zero();

  void SetDiagonal(double); 
  void SetDiagonal(const double*); 
  void SetDiagonal(int, const double*); 
  void SetDiagonal(const ON_SimpleArray<double>&); 

  bool Transpose();

  bool SwapRows( int, int ); 
  bool SwapCols( int, int ); 
  bool Invert( 
          double 
          );

  












  bool Multiply( const ON_Matrix& A, const ON_Matrix& B );

  












  bool Add( const ON_Matrix& A, const ON_Matrix& B );


  







  bool Scale( double s );


  
  
  
  
  
  
  
  
  
  
  
  
  
  int RowReduce( 
    double,  
    double&, 
    double&  
    ); 

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int RowReduce(
    double,        
    double*,       
    double* = 0 
    ); 

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int RowReduce(
    double,        
    ON_3dPoint*,   
    double* = 0 
    ); 

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int RowReduce( 
    double,      
    int,         
    int,         
    double*,     
    double* = 0 
    ); 

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool BackSolve(
    double,        
    int,           
    const double*, 
    double*        
      ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool BackSolve(
    double,            
    int,               
    const ON_3dPoint*, 
    ON_3dPoint*        
      ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool BackSolve(
    double,       
    int,          
    int,          
    int,          
    const double*,
    int,          
    double*       
      ) const;

  bool IsRowOrthoganal() const;
  bool IsRowOrthoNormal() const;

  bool IsColOrthoganal() const;
  bool IsColOrthoNormal() const;


  double** m; 
              
              
private:
  int m_row_count;
  int m_col_count;
  
  ON_SimpleArray<double*> m_rowmem; 
	double** m_Mmem; 
	int   m_row_offset; 
	int   m_col_offset; 
  void* m_cmem;
  
  double const * const * ThisM() const;
  double * * ThisM();
};

























































bool ON_GetMatrixSVD(
  int row_count,
  int col_count,
  double const * const * A,
  double**& U,
  double*& W,
  double**& V
  );



























int ON_InvertSVDW(
  int count, 
  const double* W,
  double*& invW
  );








































































bool ON_SolveSVD(
  int row_count,
  int col_count,
  double const * const * U,
  const double* invW,
  double const * const * V,
  const double* B,
  double*& X
  );
  

























int ON_RowReduce( 
          int row_count, 
          int col_count,
          double zero_pivot,
          double** A, 
          double** B, 
          double pivots[2] 
          );





























class ON_Matrix;

class  ON_Xform
{
public:
  double m_xform[4][4]; 
                        
                        
                        
                        
                        

  
  ON_Xform();                     

  ON_Xform( int );                
  ON_Xform( double );             


  
  
  ON_Xform( double[4][4] );       
  ON_Xform( float[4][4] );        

  
  ON_Xform( const double[4][4] ); 
  ON_Xform( const float[4][4] );  
  
  ON_Xform( const double* );      
  ON_Xform( const float* );       
  
  ON_Xform( const ON_Matrix& ); 
                                    
                                    
	ON_Xform(const ON_3dPoint& P,	
						const ON_3dVector& X,	
						const ON_3dVector& Y,	
						const ON_3dVector& Z); 

  
  
  double* operator[](int);
  const double* operator[](int) const;

  
  ON_Xform& operator=( int );
  ON_Xform& operator=( float );
  ON_Xform& operator=( double );
  ON_Xform& operator=( const ON_Matrix& ); 
                                               
                                               

  
  
  ON_2dPoint operator*( const ON_2dPoint& ) const;
  ON_3dPoint operator*( const ON_3dPoint& ) const;
  ON_4dPoint operator*( const ON_4dPoint& ) const;
  
  ON_2dVector operator*( const ON_2dVector& ) const;
  ON_3dVector operator*( const ON_3dVector& ) const;
  
  ON_Xform operator*( const ON_Xform&  ) const;
  ON_Xform operator+( const ON_Xform& ) const;
  ON_Xform operator-( const ON_Xform&  ) const;

  







  bool IsValid() const;

  












  bool IsIdentity( double zero_tolerance = 0.0) const;
  
  







  bool IsNotIdentity( double zero_tolerance = 0.0) const;
  
  











  bool IsTranslation( double zero_tolerance = 0.0) const;
  
  








  bool IsZero() const;

  








  int IsSimilarity() const;


  int Compare( const ON_Xform& other ) const;

  
  
  void Transpose(); 

  int 
  Rank( 
    double* = 0 
  ) const;

  double
  Determinant( 
    double* = 0 
  ) const;

  bool
  Invert( 
          
          
    double* = 0 
  );

  ON_Xform
  Inverse(  
            
    double* = 0 
  ) const;

  















  double GetSurfaceNormalXform( ON_Xform& N_xform ) const;

  



















  double GetMappingXforms( ON_Xform& P_xform, ON_Xform& N_xform ) const;

  
  
  
  
  
  
  
  
  
  void ActOnLeft(
         double, 
         double, 
         double, 
         double, 
         double[4] 
         ) const;

  
  
  
  
  
  
  
  
  
  void ActOnRight(
         double, 
         double, 
         double, 
         double, 
         double[4] 
         ) const;

  
  

  
  void Zero();

  
  void Identity();

  
  void Diagonal(double); 

  











  void Scale( 
    double x_scale_factor,
    double y_scale_factor,
    double z_scale_factor
    );

  









  void Scale( 
    const ON_3dVector& scale_vector
    );

  







  void Scale
    (
    ON_3dPoint fixed_point,
    double scale_factor
    );

  









  void Scale
    (
    const ON_Plane& plane,
    double x_scale_factor,
    double y_scale_factor,
    double z_scale_factor
    );

  








  void Shear
    (
    const ON_Plane& plane,
    const ON_3dVector& x1,
    const ON_3dVector& y1,
    const ON_3dVector& z1
    );

  
  void Translation( 
    const ON_3dVector& 
    );

  
  void Translation( 
    double, 
    double, 
    double  
    );

  
  
  
  
  
  
  
  void PlanarProjection(
    const ON_Plane& plane
    );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  void Rotation(
    double sin_angle,
    double cos_angle,
    ON_3dVector rotation_axis,
    ON_3dPoint rotation_center
    );

  
  
  
  
  void Rotation(
    double angle_radians,
    ON_3dVector rotation_axis,
    ON_3dPoint rotation_center
    );

  




  void Rotation(
    ON_3dVector start_dir,
    ON_3dVector end_dir,
    ON_3dPoint rotation_center
    );

  
  
  
  
  
  
  
  
  void Rotation( 
    const ON_3dVector& X0,
    const ON_3dVector& Y0,
    const ON_3dVector& Z0,
    const ON_3dVector& X1,
    const ON_3dVector& Y1,
    const ON_3dVector& Z1
    );

  
  
  
  
  
  
  
  
  
  void Rotation( 
    const ON_3dPoint& P0,
    const ON_3dVector& X0,
    const ON_3dVector& Y0,
    const ON_3dVector& Z0,
    const ON_3dPoint& P1,
    const ON_3dVector& X1,
    const ON_3dVector& Y1,
    const ON_3dVector& Z1
    );

  






  void Rotation( 
    const ON_Plane& plane0,
    const ON_Plane& plane1
    );

  










  void Mirror(
    ON_3dPoint point_on_mirror_plane,
    ON_3dVector normal_to_mirror_plane
    );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool ChangeBasis( 
    const ON_Plane& plane0,
    const ON_Plane& plane1
    );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool ChangeBasis( 
    const ON_3dVector& X0,
    const ON_3dVector& Y0,
    const ON_3dVector& Z0,
    const ON_3dVector& X1,
    const ON_3dVector& Y1,
    const ON_3dVector& Z1
    );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool ChangeBasis( 
    const ON_3dPoint& P0,
    const ON_3dVector& X0,
    const ON_3dVector& Y0,
    const ON_3dVector& Z0,
    const ON_3dPoint& P1,
    const ON_3dVector& X1,
    const ON_3dVector& Y1,
    const ON_3dVector& Z1
    );

  
  void WorldToCamera( 
         const ON_3dPoint&,  
         const ON_3dVector&, 
         const ON_3dVector&, 
         const ON_3dVector&  
         );
  void CameraToWorld( 
         const ON_3dPoint&,  
         const ON_3dVector&, 
         const ON_3dVector&, 
         const ON_3dVector&  
         );
  bool CameraToClip( 
      ON_BOOL32, 
      double, double, 
      double, double, 
      double, double  
      );

  
  bool ClipToCamera( 
      int, 
      double, double, 
      double, double, 
      double, double  
      );

  
  
  
  
  
  
  
  bool ClipToScreen(                           
      double, 
      double, 
      double, 
      double, 
      double, 
      double  
      );

  
  
  
  
  
  
  
  bool ScreenToClip(
      double, 
      double, 
      double, 
      double, 
      double, 
      double  
      );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int ClipFlag4d(
    const double* 
    ) const;

  
  
  
  
  
  
  
  int ClipFlag4d(
    int, 
    int, 
    const double*, 
    ON_BOOL32 = true 
    ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int ClipFlag3d(
    const double* 
    ) const;

  
  
  
  
  
  
  int ClipFlag3d(
    int, 
    int, 
    const double*, 
    ON_BOOL32 = true 
    ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int ClipFlag3dBox(
    const double*, 
    const double*  
    ) const;


  








  bool IntervalChange(
    int dir,
    ON_Interval old_interval,
    ON_Interval new_interval
    );
};

class  ON_ClippingRegion
{
public:
  ON_ClippingRegion();

  
  
  
  ON_Xform m_xform;

  









  void SetClipPlaneTolerance( double clip_plane_tolerance );

  








  double ClipPlaneTolerance() const;

  enum
  {
    max_clip_plane_count = 16, 
    frustum_bitmask      = 0x0000003F,
    near_plane_bitmask   = 0x00000020,
    far_plane_bitmask    = 0x00000010,
    clip_plane_bitmask   = 0x7FFFFFC0,
    negw_bitmask         = 0x80000000
  };

  
  
  
  int m_clip_plane_count; 

private:
  
  
  
  
  float m_clip_plane_tolerance;

public:
  ON_PlaneEquation m_clip_plane[max_clip_plane_count];

  





















  int InViewFrustum( 
    ON_3dPoint P
    ) const;
  int InViewFrustum( 
    const ON_BoundingBox& bbox
    ) const;
  int InViewFrustum( 
    int count, 
    const ON_3fPoint* p
    ) const;
  int InViewFrustum( 
    int count, 
    const ON_3dPoint* p
    ) const;
  int InViewFrustum( 
    int count, 
    const ON_4dPoint* p
    ) const;

  





















  int InClipPlaneRegion( 
    ON_3dPoint P
    ) const;
  int InClipPlaneRegion( 
    const ON_BoundingBox& bbox
    ) const;
  int InClipPlaneRegion( 
    int count, 
    const ON_3fPoint* p
    ) const;
  int InClipPlaneRegion( 
    int count, 
    const ON_3dPoint* p
    ) const;
  int InClipPlaneRegion( 
    int count, 
    const ON_4dPoint* p
    ) const;


  















  int IsVisible( 
    ON_3dPoint P
    ) const;
  int IsVisible( 
    const ON_BoundingBox& bbox
    ) const;
  int IsVisible( 
    int count, 
    const ON_3fPoint* p
    ) const;
  int IsVisible( 
    int count, 
    const ON_3dPoint* p
    ) const;
  int IsVisible( 
    int count, 
    const ON_4dPoint* p
    ) const;

  




































  int TransformPoints( int count, ON_4dPoint* p ) const;
  int TransformPoints( int count, ON_4dPoint* p, unsigned int* pflags ) const;


  























  unsigned int TransformPoint(
                     const ON_4dPoint& P, 
                     ON_4dPoint& Q
                     ) const;
  unsigned int TransformPoint(
                     const ON_3dPoint& P, 
                     ON_3dPoint& Q
                     ) const;
  unsigned int TransformPoint(
                     const ON_3fPoint& P, 
                     ON_3dPoint& Q
                     ) const;

  












  bool GetLineClipPlaneParamters( 
         ON_4dPoint P0, 
         ON_4dPoint P1, 
         double* t0, 
         double* t1 
         ) const;

};


class  ON_Localizer
{
public:
  ON_Localizer();
  ~ON_Localizer();

  ON_Localizer(const ON_Localizer&);
  ON_Localizer& operator=(const ON_Localizer&);

  void Destroy();
  bool Read(ON_BinaryArchive&);
  bool Write(ON_BinaryArchive&) const;

  





























  bool CreateCylinderLocalizer( ON_3dPoint P, ON_3dVector D, double r0, double r1 );

  























  bool CreatePlaneLocalizer( ON_3dPoint P, ON_3dVector N, double h0, double h1 );

  




























  bool CreateSphereLocalizer( ON_3dPoint P, double r0, double r1 );

  










  double Value(ON_3dPoint P) const;
  double Value(double distance) const;

  





  bool IsZero( const ON_BoundingBox& bbox ) const;

  enum TYPE
  {
    no_type       = 0,
    sphere_type   = 1,
    plane_type    = 2,
    cylinder_type = 3,
    curve_type    = 4,
    surface_type  = 5,
    distance_type = 6,
    force_32bit_localizer_type = 0xFFFFFFFF
  };

  TYPE m_type;

  ON_Interval      m_d;
  ON_3dPoint       m_P;
  ON_3dVector      m_V;
  class ON_NurbsCurve*   m_nurbs_curve;
  class ON_NurbsSurface* m_nurbs_surface;
};


class  ON_SpaceMorph
{
public:
  ON_SpaceMorph();
  virtual ~ON_SpaceMorph();

  











  virtual
  bool IsIdentity( const ON_BoundingBox& bbox ) const;

  












  double Tolerance() const;

  






  void SetTolerance(
          double tolerance
          );

  










  bool QuickPreview() const;

  





  void SetQuickPreview( 
          bool bQuickPreview 
          );

  










  bool PreserveStructure() const;

  





  void SetPreserveStructure( 
          bool bPreserveStructure
          );

private:
  double m_tolerance;
  bool m_bQuickPreview;
  bool m_bPreserveStructure;
};




































class  ON_Quaternion
{
public:
  
  double a,b,c,d;

  static const ON_Quaternion Zero;     
  static const ON_Quaternion Identity; 
  static const ON_Quaternion I;        
  static const ON_Quaternion J;        
  static const ON_Quaternion K;        

  ON_Quaternion() {}

  ON_Quaternion(double qa, double qb, double qc, double qd);

  
  ON_Quaternion(const ON_3dVector& v);

  
  ON_Quaternion& operator=(const ON_3dVector& v);

  void Set(double qa, double qb, double qc, double qd);

  
  ON_Quaternion  operator*(int) const;
  ON_Quaternion  operator/(int) const;
  ON_Quaternion  operator*(float) const;
  ON_Quaternion  operator/(float) const;
  ON_Quaternion  operator*(double) const;
  ON_Quaternion  operator/(double) const;

  ON_Quaternion  operator+(const ON_Quaternion&) const;
  ON_Quaternion  operator-(const ON_Quaternion&) const;

  
  ON_Quaternion  operator*(const ON_Quaternion&) const;

  



  bool IsValid() const;

  



  ON_Quaternion Conjugate() const;

  









  bool Invert();

  








  ON_Quaternion Inverse() const;

  




  double Length() const;

  



  double LengthSquared() const;

  




  double DistanceTo(const ON_Quaternion& q) const;

  




  static double Distance(const ON_Quaternion& p, const ON_Quaternion& q);

  
















  ON_Xform MatrixForm() const;

  







  bool Unitize();

  













  void SetRotation(double angle, const ON_3dVector& axis);

  











  static ON_Quaternion Rotation(double angle, const ON_3dVector& axis);

  











  void SetRotation(const ON_Plane& plane0, const ON_Plane& plane1);

  











  static ON_Quaternion Rotation(const ON_Plane& plane0, const ON_Plane& plane1);

  











  bool GetRotation(double& angle, ON_3dVector& axis) const;

  















  bool GetRotation(ON_Xform& xform) const;

  






  bool GetRotation(ON_Plane& plane) const;

  



















  ON_3dVector Rotate(ON_3dVector v) const;

  



  ON_3dVector Vector() const;

  



  double Scalar() const;

  



  bool IsZero() const;

  



  bool IsNotZero() const;

  



  bool IsScalar() const;

  



  bool IsVector() const; 


  



  static ON_Quaternion Exp(ON_Quaternion q);

  



  static ON_Quaternion Log(ON_Quaternion q);

  



  static ON_Quaternion Pow(ON_Quaternion q, double t);


  static ON_Quaternion Slerp(ON_Quaternion q0, ON_Quaternion q1, double t);

};






ON_Quaternion ON_QuaternionProduct( const ON_Quaternion& p, const ON_Quaternion& q);









ON_Quaternion ON_CrossProduct( const ON_Quaternion& p, const ON_Quaternion& q);


ON_Quaternion operator*(int, const ON_Quaternion&);


ON_Quaternion operator*(float, const ON_Quaternion&);


ON_Quaternion operator*(double, const ON_Quaternion&);





























class  ON_Workspace
{
public:
  







  ON_Workspace();

  





  ~ON_Workspace();


  






  void Destroy();

  


























  void* GetMemory( size_t sz );

  




















  int* GetIntMemory( size_t count );

  














  int** GetIntMemory( size_t row_count, size_t col_count );

  




















  double* GetDoubleMemory( size_t count );

  














  double** GetDoubleMemory( size_t row_count, size_t col_count );

  




















  ON_3dPoint* GetPointMemory( size_t count );

  




















  ON_3dVector* GetVectorMemory( size_t count );

  



























  void* GrowMemory( void* ptr, size_t sz );

  






















  int* GrowIntMemory( int* ptr, size_t count );

  






















  double* GrowDoubleMemory( double* ptr, size_t count );

  






















  ON_3dPoint* GrowPointMemory( ON_3dPoint* ptr, size_t count );

  






















  ON_3dVector* GrowVectorMemory( ON_3dVector* ptr, size_t count );

  



















  ON_BOOL32 KeepMemory( void* ptr );

  












  void KeepAllMemory();

  















  FILE* OpenFile(
          const char* filename, 
          const char* filemode
          );

  















  FILE* OpenFile(
          const wchar_t* filename, 
          const wchar_t* filemode
          );

  
















  int KeepFile(FILE* fileptr);

private:
  struct ON_Workspace_FBLK * m_pFileBlk;
  struct ON_Workspace_MBLK * m_pMemBlk;

private:
  
  
  
  ON_Workspace( const ON_Workspace& );
  ON_Workspace& operator=( const ON_Workspace& );
};
























class  ON_Plane
{
public:

  





  ON_Plane();

  











  ON_Plane(
    const ON_3dPoint& origin,
    const ON_3dVector& normal
    );

  











  ON_Plane(
    const ON_3dPoint& origin,
    const ON_3dVector& x_dir,
    const ON_3dVector& y_dir
    );

  










  ON_Plane(
    const ON_3dPoint& origin,
    const ON_3dPoint& x_point,
    const ON_3dPoint& y_point
    );

  







  ON_Plane(
    const double equation[4]
    );

  ~ON_Plane();

  bool operator==(const ON_Plane&) const;
  bool operator!=(const ON_Plane&) const;

  











  bool CreateFromNormal(
    const ON_3dPoint& origin,
    const ON_3dVector& normal
    );

  













  bool CreateFromFrame(
    const ON_3dPoint& origin,
    const ON_3dVector& x_dir,
    const ON_3dVector& y_dir
    );

  












  bool CreateFromPoints(
    const ON_3dPoint& origin,
    const ON_3dPoint& point_on_x,
    const ON_3dPoint& point_on
    );

  












  bool CreateFromEquation( 
    const double equation[4]
    );

  






  bool IsValid() const;

  



  const ON_3dPoint& Origin() const;

  



  const ON_3dVector& Xaxis() const;

  



  const ON_3dVector& Yaxis() const;

  



  const ON_3dVector& Normal() const;


  





  void SetOrigin( const ON_3dPoint& origin );
  
  








  ON_3dPoint PointAt(
    double u,
    double v
    ) const;

  









  ON_3dPoint PointAt(
    double u,
    double v,
    double w
    ) const;

  












  ON_Line IsoLine(
         int dir,
         double c
         ) const;

  












  double DistanceTo( 
        const ON_3dPoint& point
        ) const;


  bool GetDistanceToBoundingBox(
           
				   const ON_BoundingBox&, 

           
				   double* min,    
           double* max
) const;

  









  bool UpdateEquation();

  










  bool ClosestPointTo( 
         ON_3dPoint world_point,
         double* u,
         double* v
         ) const;

  







  ON_3dPoint ClosestPointTo( 
         ON_3dPoint point
         ) const;

  

  







  bool Transform( 
        const ON_Xform& xform
        );

  









  bool SwapCoordinates(
        int i,
        int j
        );

  









  bool Rotate(
        double sin_angle,
        double cos_angle,
        const ON_3dVector& axis
        );

  








  bool Rotate(
        double angle,
        const ON_3dVector& axis
        );

  










  bool Rotate(
        double sin_angle,
        double cos_angle,
        const ON_3dVector& axis,
        const ON_3dPoint&  center
        );

  









  bool Rotate(
        double angle,
        const ON_3dVector& axis,
        const ON_3dPoint& center
        );

  







  bool Translate(
        const ON_3dVector&  delta
        );

  






  bool Flip();


	const static
	ON_Plane World_xy;	

public:
  
  ON_3dPoint  origin;

  
  ON_3dVector xaxis;

  
  ON_3dVector yaxis;

  
  ON_3dVector zaxis;

  
  ON_PlaneEquation plane_equation;
  
};

class  ON_ClippingPlaneInfo
{
public:
  
  

  
  
  ON_PlaneEquation m_plane_equation;
  ON_UUID m_plane_id;
  bool m_bEnabled;

  void Default();
  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );
};

class  ON_ClippingPlane
{
public:
  ON_ClippingPlane();
  ~ON_ClippingPlane();

  void Default();

  ON_Plane m_plane;
  ON_UuidList m_viewport_ids; 
  ON_UUID m_plane_id;
  bool m_bEnabled; 

  ON_ClippingPlaneInfo ClippingPlaneInfo() const;

  bool Read( class ON_BinaryArchive& );
  bool Write( class ON_BinaryArchive& ) const;
};
















extern  const ON_Plane ON_xy_plane;
extern  const ON_Plane ON_yz_plane;
extern  const ON_Plane ON_zx_plane;





















int ON_Get3dConvexHull( 
          const ON_SimpleArray<ON_3dPoint> & points, 
          ON_SimpleArray<ON_PlaneEquation> & hull 
          );























class ON_NurbsCurve;












class  ON_Circle
{
public:
  
  
  ON_Circle();

  
  
  ON_Circle(
    const ON_Plane& plane,
    double radius
    );

  
  
  ON_Circle(
    const ON_3dPoint& center,
    double radius
    );

  
  
  ON_Circle(
    const ON_Plane& plane,
    const ON_3dPoint& center,
    double radius
    );

  
  
  ON_Circle( 
    const ON_2dPoint& P,
    const ON_2dPoint& Q,
    const ON_2dPoint& R
    );

  
  
  ON_Circle(
    const ON_3dPoint& P,
    const ON_3dPoint& Q,
    const ON_3dPoint& R
    );

  ~ON_Circle();

  
  
  bool Create(
    const ON_Plane& plane,
    double radius
    );

  
  
  bool Create(
    const ON_3dPoint& center,
    double radius
    );

  
  
  bool Create(
    const ON_Plane& plane,
    const ON_3dPoint& center,
    double radius
    );

  
  
  bool Create( 
    const ON_2dPoint& P,
    const ON_2dPoint& Q,
    const ON_2dPoint& R
    );

  
  
  bool Create(
    const ON_3dPoint& P,
    const ON_3dPoint& Q,
    const ON_3dPoint& R
    );

  
  
  
  bool Create(
    const ON_2dPoint& P,
    const ON_2dVector& tangent_at_P,
    const ON_2dPoint& Q
    );

  
  
  
  bool Create(
    const ON_3dPoint& P,
    const ON_3dVector& tangent_at_P,
    const ON_3dPoint& Q
    );

	
  bool IsValid() const;

  

  bool IsInPlane( const ON_Plane&, double = 2.3283064365386962890625e-10 ) const;

  double Radius() const;
  double Diameter() const;
  double Circumference() const;
  const ON_3dPoint& Center() const;
  const ON_3dVector& Normal() const;
  const ON_Plane& Plane() const; 

  ON_BoundingBox BoundingBox() const;

  














	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  bool Transform( const ON_Xform& );

  
  
  ON_3dPoint PointAt( 
    double 
    ) const;
  ON_3dVector DerivativeAt( 
    int,   
    double 
    ) const;

  ON_3dVector TangentAt(double) const;

  
  bool ClosestPointTo( 
         const ON_3dPoint& point, 
         double* t
         ) const;

  
  ON_3dPoint ClosestPointTo( 
         const ON_3dPoint& point
         ) const;

  
  double EquationAt( const ON_2dPoint& plane_point ) const;

  ON_2dVector GradientAt( const ON_2dPoint& plane_point ) const;

  
  bool Rotate(
        double sin_angle,
        double cos_angle,
        const ON_3dVector& axis_of_rotation
        );

  bool Rotate(
        double angle_in_radians,
        const ON_3dVector&  axis_of_rotation
        );

  
  bool Rotate(
        double sin_angle,
        double cos_angle,
        const ON_3dVector& axis_of_rotation,
        const ON_3dPoint& center_of_rotation
        );

  bool Rotate(
        double angle_in_radians,
        const ON_3dVector&  axis_of_rotation,
        const ON_3dPoint& center_of_rotation
        );

  bool Translate(
        const ON_3dVector& delta
        );

  bool Reverse();

  
  
  
  
  
  
  
  
  
  
  
  int GetNurbForm(
        ON_NurbsCurve& nurbs_curve
        ) const; 

  



























  bool GetRadianFromNurbFormParameter(
        double nurbs_parameter,
        double* circle_radians_parameter
        ) const;

  



























  bool GetNurbFormParameterFromRadian(
        double circle_radians_parameter,
        double* nurbs_parameter
        ) const;

public:
  
  ON_Plane   plane;  
  double     radius;   
  
};

























class ON_Ellipse;
class ON_Plane;

class  ON_Ellipse
{
public:
  ON_Ellipse(); 

  ON_Ellipse(
    const ON_Plane&,
    double, double     
    );

  ON_Ellipse(
    const ON_Circle&
    );

  ~ON_Ellipse();

  ON_Ellipse& operator=(const ON_Circle&);

  ON_BOOL32 Create(
    const ON_Plane&,  
    double, double     
    );

  ON_BOOL32 Create(
    const ON_Circle&
    );

  ON_BOOL32 IsValid() const; 
                        

  ON_BOOL32 IsCircle() const; 

  double Radius( 
    int 
    ) const; 
  const ON_3dPoint& Center() const;
  const ON_3dVector& Normal() const;
  const ON_Plane& Plane() const; 

  



  double FocalDistance() const;

  bool GetFoci( ON_3dPoint& F1, ON_3dPoint& F2 ) const;

  
  
  
  ON_3dPoint  PointAt( double ) const;
  ON_3dVector DerivativeAt( 
                 int, 
                 double 
                 ) const;

  ON_3dVector TangentAt( double ) const;  
  ON_3dVector CurvatureAt( double ) const;  

  
  ON_BOOL32 ClosestPointTo( 
         const ON_3dPoint&, 
         double*
         ) const;
  
  ON_3dPoint ClosestPointTo( 
         const ON_3dPoint& 
         ) const;

  
  double EquationAt( const ON_2dPoint& ) const;
  ON_2dVector GradientAt( const ON_2dPoint& ) const;

  
  ON_BOOL32 Rotate(
        double,              
        double,              
        const ON_3dVector&  
        );
  ON_BOOL32 Rotate(
        double,              
        const ON_3dVector&  
        );

  
  ON_BOOL32 Rotate(
        double,              
        double,              
        const ON_3dVector&, 
        const ON_3dPoint&   
        );
  ON_BOOL32 Rotate(
        double,              
        const ON_3dVector&, 
        const ON_3dPoint&   
        );

  ON_BOOL32 Translate(
        const ON_3dVector&
        );

  
  int GetNurbForm( ON_NurbsCurve& ) const; 

public: 
  
  
  
  ON_Plane plane;
  double radius[2]; 
};























class  ON_Line
{
public:

  ON_Line();
  ON_Line( const ON_3dPoint& start, const ON_3dPoint& end );
  ~ON_Line();

  



  bool IsValid() const;

  
  ON_3dPoint& operator[](int);
  const ON_3dPoint& operator[](int) const;


  
  
  
  
  
  
  
  bool Create( 
    const ON_3dPoint& start, 
    const ON_3dPoint& end
    );

  





  ON_BoundingBox BoundingBox() const;

  












  bool GetBoundingBox(
         ON_BoundingBox& bbox,
         int bGrowBox = false
         ) const;

  














	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  













  bool InPlane( ON_Plane& plane, double tolerance = 0.0 ) const;

  
  
  double Length() const;

  
  
  
  
  ON_3dVector Direction() const;

  
  
  
  
  ON_3dVector Tangent() const;

  











  ON_3dPoint PointAt( 
    double t 
    ) const;

  










  bool ClosestPointTo( 
    const ON_3dPoint& test_point, 
    double* t
    ) const;

  








  ON_3dPoint ClosestPointTo( 
    const ON_3dPoint& test_point
    ) const;

  












  double DistanceTo( ON_3dPoint test_point ) const;


  











  double MinimumDistanceTo( const ON_3dPoint& P ) const;
  double MinimumDistanceTo( const ON_Line& L ) const;

  










  double MaximumDistanceTo( const ON_3dPoint& P ) const;
  double MaximumDistanceTo( const ON_Line& other ) const;


  











  bool IsFartherThan( double d, const ON_3dPoint& P ) const;
  bool IsFartherThan( double d, const ON_Line& L ) const;


  

  
  
  void Reverse();

  bool Transform( 
    const ON_Xform& xform
    );

  
  bool Rotate(
        double sin_angle,
        double cos_angle,
        const ON_3dVector& axis_of_rotation,
        const ON_3dPoint& center_of_rotation
        );

  bool Rotate(
        double angle_in_radians,
        const ON_3dVector& axis_of_rotation,
        const ON_3dPoint& center_of_rotation
        );

  bool Translate(
        const ON_3dVector& delta
        );

public:
  ON_3dPoint from; 
  ON_3dPoint to;   
};























class  ON_Polyline : public ON_3dPointArray
{
public:
  ON_Polyline();
  ON_Polyline(const ON_3dPointArray&);
  ON_Polyline& operator=(const ON_3dPointArray&);
  ~ON_Polyline();

  
  
  
  
  
  
  
  
  
  bool CreateInscribedPolygon(
    const ON_Circle& circle,
    int side_count
    );

  
  
  
  
  
  
  
  
  
  
  bool CreateCircumscribedPolygon(
    const ON_Circle& circle,
    int side_count
    );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool CreateStarPolygon(
    const ON_Circle& circle,
    double other_radius,
    int side_count
    );

  
  
  
  
  
  
  
  
  
  
  
  bool IsValid(
    double tolerance = 0.0 
    ) const;

  
  
  
  
  
  
  
  
  
  int Clean( 
    double tolerance = 0.0 
    );

  
  
  int PointCount() const;

  
  
  int SegmentCount() const;

  
  
  
  
  
  
  
  bool IsClosed(
    double tolerance = 0.0 
    ) const;


  
  
  double Length() const;

  
  
  
  
  ON_3dVector SegmentDirection (
    int segment_index
    ) const;

  
  
  
  
  ON_3dVector SegmentTangent (
    int segment_index
    ) const;

  
  
  
  
  ON_3dPoint PointAt( double t ) const;

  
  
  
  
  ON_3dVector DerivativeAt( double t ) const;

  
  
  
  
  ON_3dVector TangentAt( double t ) const;

  
  
  
  
  
  
  
  
  
  
  bool ClosestPointTo( 
        const ON_3dPoint& test_point, 
        double* t
        ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool ClosestPointTo( 
        const ON_3dPoint& test_point, 
        double* t, 
        int segment_index0, 
        int segment_index1 
        ) const;

  
  
  
  
  
  
  
  ON_3dPoint ClosestPointTo( 
       const ON_3dPoint& test_point
    ) const;

};























class ON_NurbsSurface;
class ON_RevSurface;
class ON_Brep;





class  ON_Cylinder
{
public:
  ON_Cylinder(); 

  ON_Cylinder( 
    const ON_Circle&  
    );

  ON_Cylinder( 
    const ON_Circle&,  
    double             
    );

  ~ON_Cylinder();

  bool Create(
    const ON_Circle&  
    );

  bool Create(
    const ON_Circle&,  
    double               
    );

  bool IsValid() const; 
                        

  bool IsFinite() const; 
                         
                         

  const ON_3dVector& Axis() const;
  const ON_3dPoint& Center() const;
  double Height() const; 
  ON_Circle CircleAt( 
        double 
        ) const;
  ON_Line LineAt( 
        double 
        ) const;

  
  ON_3dPoint PointAt(
    double, 
    double  
    ) const;
  ON_3dPoint NormalAt(
    double, 
    double  
    ) const;

  
  bool ClosestPointTo( 
         ON_3dPoint, 
         double*, 
         double*  
         ) const;
  
  ON_3dPoint ClosestPointTo( 
         ON_3dPoint 
         ) const;

  

  
  bool Rotate(
        double,               
        double,               
        const ON_3dVector&  
        );
  bool Rotate(
        double,               
        const ON_3dVector&  
        );

  
  bool Rotate(
        double,               
        double,               
        const ON_3dVector&, 
        const ON_3dPoint&   
        );
  bool Rotate(
        double,              
        const ON_3dVector&, 
        const ON_3dPoint&   
        );

  bool Translate(
        const ON_3dVector&
        );

  
  int GetNurbForm( ON_NurbsSurface& ) const; 

  








  ON_RevSurface* RevSurfaceForm( ON_RevSurface* srf = 0 ) const;

public: 
  
  ON_Circle  circle;

  
  
  
  
  
  
  
  
  
  
  double height[2];
};























class ON_NurbsSurface;
class ON_Brep;




class  ON_Cone
{
public:

  
  
  ON_Cone();

  
  ON_Cone(
    const ON_Plane& plane,
    double height,
    double radius
    );

  ~ON_Cone();

  
  
  
  
  
  
  
  ON_BOOL32 Create(
    const ON_Plane& plane,
    double height,
    double radius
    );

  
  
  ON_BOOL32 IsValid() const;

  
  
  
  
  ON_3dPoint BasePoint() const;

  
  
  
  
  const ON_3dPoint& ApexPoint() const;

  
  
  const ON_3dVector& Axis() const;

  
  
  
  
  double AngleInRadians() const;

  
  
  
  double AngleInDegrees() const;           

  
  
  
  
  ON_3dPoint PointAt(
    double radial_parameter,
    double height_parameter
    ) const;

  
  
  
  
  
  
  ON_3dVector NormalAt(
    double radial_parameter,
    double height_parameter
    ) const;

  
  
  
  
  ON_Circle CircleAt( 
    double height_parameter
    ) const;

  
  
  
  
  ON_Line LineAt( 
    double radial_parameter 
    ) const;

  
  bool ClosestPointTo( 
          ON_3dPoint point, 
          double* radial_parameter,
          double* height_parameter
         ) const;

  
  ON_3dPoint ClosestPointTo( 
         ON_3dPoint 
         ) const;

  ON_BOOL32 Transform( const ON_Xform& );

  
  ON_BOOL32 Rotate(
        double sin_angle,
        double cos_angle,
        const ON_3dVector& axis_of_rotation
        );

  ON_BOOL32 Rotate(
        double angle_in_radians,
        const ON_3dVector& axis_of_rotation
        );

  
  ON_BOOL32 Rotate(
        double sin_angle,
        double cos_angle,
        const ON_3dVector& axis_of_rotation,
        const ON_3dPoint& center_of_rotation
        );
  ON_BOOL32 Rotate(
        double angle_in_radians,
        const ON_3dVector& axis_of_rotation,
        const ON_3dPoint& center_of_rotation
        );

  ON_BOOL32 Translate(
        const ON_3dVector& delta
        );

  ON_BOOL32 GetNurbForm( ON_NurbsSurface& ) const;

  








  ON_RevSurface* RevSurfaceForm( ON_RevSurface* srf = 0 ) const;

public:
  ON_Plane plane; 
  double   height; 
  double   radius; 
};























class ON_RevSurface;

class  ON_Sphere
{
public:
  
  ON_Plane plane; 
  double radius;  

  ON_Sphere();
  ON_Sphere( const ON_3dPoint& center, double radius ); 
  ~ON_Sphere();

  bool IsValid() const;

  bool Create( const ON_3dPoint& center, double radius); 

  ON_Circle LatitudeRadians(double latitude_radians ) const;
  ON_Circle LatitudeDegrees(double latitude_degrees) const;
  ON_Circle LongitudeRadians(double longitude_radians) const;
  ON_Circle LongitudeDegrees(double longitude_degrees) const;

  ON_3dPoint Center() const;
  ON_3dPoint NorthPole() const;
  ON_3dPoint SouthPole() const;
  double Diameter() const;
  double Radius() const;

  ON_3dPoint PointAt(
    double longitude_radians, 
    double latitude_radians
    ) const;   

  ON_3dVector NormalAt(
    double longitude_radians, 
    double latitude_radians
    ) const;   

  ON_BoundingBox BoundingBox() const;

  
  bool ClosestPointTo( 
         ON_3dPoint test_point, 
         double* longitude_radians, 
         double* latitude_radians 
         ) const;

  
  ON_3dPoint ClosestPointTo( 
         ON_3dPoint test_point
         ) const;

  

  
  bool Rotate(
        double sin_angle,               
        double cos_angle,               
        const ON_3dVector& axis_of_rotation 
        );

  bool Rotate(
        double angle_radians,               
        const ON_3dVector& axis_of_rotation 
        );

  
  bool Rotate(
        double sin_angle,               
        double cos_angle,               
        const ON_3dVector& axis_of_rotation, 
        const ON_3dPoint& center_of_rotation  
        );

  bool Rotate(
        double angle_radians,               
        const ON_3dVector& axis_of_rotation, 
        const ON_3dPoint& center_of_rotation  
        );

  bool Translate(
        const ON_3dVector&
        );

  bool Transform( const ON_Xform& );

  
  int GetNurbForm( ON_NurbsSurface& ) const; 

  













  ON_RevSurface* RevSurfaceForm( bool bArcLengthParameterization, ON_RevSurface* srf = 0 ) const;
  __declspec(deprecated) ON_RevSurface* RevSurfaceForm( ON_RevSurface* srf = 0 ) const;
};























class  ON_Box
{
public:
  ON_Plane plane; 
  
  ON_Interval dx;
  ON_Interval dy;
  ON_Interval dz;

  ON_Box();
  ON_Box( const ON_BoundingBox& bbox );
  ~ON_Box();

  bool IsValid() const;

  bool Create( const ON_BoundingBox& bbox );

  void Destroy();

  ON_3dPoint Center() const;
  bool GetCorners( ON_3dPoint* corners ) const;
  bool GetCorners( ON_SimpleArray<ON_3dPoint>& corners ) const;

  ON_BoundingBox BoundingBox() const;

  ON_3dPoint PointAt( 
          double r, 
          double s, 
          double t 
          ) const;

  bool ClosestPointTo( 
          ON_3dPoint point, 
          double* r, 
          double* s, 
          double* t 
          ) const;

  
  ON_3dPoint ClosestPointTo( 
         ON_3dPoint test_point
         ) const;

  
  bool Rotate(
        double sin_angle,               
        double cos_angle,               
        const ON_3dVector& axis_of_rotation 
        );

  bool Rotate(
        double angle_radians,               
        const ON_3dVector& axis_of_rotation 
        );

  
  bool Rotate(
        double sin_angle,               
        double cos_angle,               
        const ON_3dVector& axis_of_rotation, 
        const ON_3dPoint& center_of_rotation  
        );

  bool Rotate(
        double angle_radians,               
        const ON_3dVector& axis_of_rotation, 
        const ON_3dPoint& center_of_rotation  
        );

  bool Translate(
        const ON_3dVector&
        );

  bool Transform( const ON_Xform& );

  















  int IsDegenerate( 
    double tolerance = -1.23432101234321e+308
    ) const;

  double Volume() const;

  double Area() const;
};























class ON_RevSurface;
class ON_TextLog;







class  ON_Torus
{

public:
  

  ON_Plane plane; 
  double major_radius;  
  double minor_radius;  

public:

  ON_Torus();
  ON_Torus( const ON_Plane& major__plane, double major__radius, double minor__radius );
  ON_Torus( const ON_Circle& major__circle, double minor__radius );
  ~ON_Torus();

  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  ON_BOOL32 Create( const ON_Plane& major__plane, double major__radius, double minor__radius );
  ON_BOOL32 Create( const ON_Circle& major__circle, double minor__radius);

  














  ON_Circle MajorCircleRadians(double minor_angle_radians ) const;

  














  ON_Circle MajorCircleDegrees(double minor_angle_degrees) const;

  















  ON_Circle MinorCircleRadians(double major_angle_radians) const;

  















  ON_Circle MinorCircleDegrees(double major_angle_degrees) const;

  ON_3dPoint Center() const;
  ON_3dVector Axis() const;
  double MajorRadius() const;
  double MinorRadius() const;

  ON_3dPoint PointAt(
    double major_angle_radians, 
    double minor_angle_radians
    ) const;

  ON_3dVector NormalAt(
    double major_angle_radians, 
    double minor_angle_radians
    ) const;

  
  ON_BOOL32 ClosestPointTo( 
         ON_3dPoint test_point, 
         double* major_angle_radians, 
         double* minor_angle_radians
         ) const;

  
  ON_3dPoint ClosestPointTo( 
         ON_3dPoint test_point
         ) const;

  
  ON_BOOL32 Rotate(
        double sin_angle,               
        double cos_angle,               
        const ON_3dVector& axis_of_rotation 
        );

  ON_BOOL32 Rotate(
        double angle_radians,               
        const ON_3dVector& axis_of_rotation 
        );

  
  ON_BOOL32 Rotate(
        double sin_angle,               
        double cos_angle,               
        const ON_3dVector& axis_of_rotation, 
        const ON_3dPoint& center_of_rotation  
        );

  ON_BOOL32 Rotate(
        double angle_radians,               
        const ON_3dVector& axis_of_rotation, 
        const ON_3dPoint& center_of_rotation  
        );

  ON_BOOL32 Translate(
        const ON_3dVector&
        );

  ON_BOOL32 Transform( const ON_Xform& );

  
  int GetNurbForm( ON_NurbsSurface& ) const; 

  







  ON_RevSurface* RevSurfaceForm( ON_RevSurface* srf = 0 ) const;
};























class ON_PolynomialCurve;
class ON_PolynomialSurface;
class ON_BezierCurve;
class ON_BezierSurface;
class ON_TextLog;
class ON_NurbsCurve;
class ON_NurbsSurface;
class ON_X_EVENT;

class  ON_PolynomialCurve
{
public:
  ON_PolynomialCurve();

  
  
  
  
  
  
  ON_PolynomialCurve(
    int dim,
    ON_BOOL32 bIsRational,
    int order
    );

  ~ON_PolynomialCurve();

  ON_PolynomialCurve(const ON_PolynomialCurve&);

  ON_PolynomialCurve(const ON_BezierCurve&);

  ON_PolynomialCurve& operator=(const ON_PolynomialCurve&);

  ON_PolynomialCurve& operator=(const ON_BezierCurve&);

  
  
  
  
  
  
  ON_BOOL32 Create(
    int dim,
    ON_BOOL32 bIsRational,
    int order
    );

  
  
  void Destroy();

  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Evaluate(
         double t,
         int der_count,
         int v_stride,
         double* v
         ) const;

  
  int m_dim;

  
  int m_is_rat;

  
  int m_order;

  
  ON_4dPointArray m_cv;

  
  ON_Interval m_domain;
};

class  ON_PolynomialSurface
{
public:
  ON_PolynomialSurface();
  ON_PolynomialSurface(
    int,  
    ON_BOOL32, 
    int,  
    int   
    );
  ~ON_PolynomialSurface();
  ON_PolynomialSurface(const ON_PolynomialSurface&);
  ON_PolynomialSurface(const ON_BezierSurface&);
  ON_PolynomialSurface& operator=(const ON_PolynomialSurface&);
  ON_PolynomialSurface& operator=(const ON_BezierSurface&);

  ON_BOOL32 Create(
    int,  
    ON_BOOL32, 
    int,  
    int   
    );
  void Destroy();

  ON_BOOL32 Evaluate(          
         double s, 
         double t,        
         int der_count,   
         int v_stride,    
         double* v        
         ) const;

  int m_dim;    
  int m_is_rat; 
  int m_order[2];
  ON_4dPointArray m_cv; 
                        
  ON_Interval m_domain[2];
};

class  ON_BezierCurve
{
public:

  ON_BezierCurve();

  
  
  
  
  
  
  ON_BezierCurve(
    int dim,
    ON_BOOL32 bIsRational,
    int order
    );

  ~ON_BezierCurve();
  ON_BezierCurve(const ON_BezierCurve&);
  ON_BezierCurve(const ON_PolynomialCurve&);
  ON_BezierCurve(const ON_2dPointArray&); 
  ON_BezierCurve(const ON_3dPointArray&); 
  ON_BezierCurve(const ON_4dPointArray&); 
  ON_BezierCurve& operator=(const ON_BezierCurve&);
  ON_BezierCurve& operator=(const ON_PolynomialCurve&);


  ON_BezierCurve& operator=(const ON_2dPointArray&); 
  ON_BezierCurve& operator=(const ON_3dPointArray&); 
  ON_BezierCurve& operator=(const ON_4dPointArray&); 

  bool IsValid() const;

  void Dump( ON_TextLog& ) const; 

  
  
  int Dimension() const;

  
  
  
  
  
  
  
  
  bool Create(
    int dim,
    ON_BOOL32 bIsRational,
    int order
    );

  
  
  void Destroy();

  void EmergencyDestroy(); 

  
  
  
  
  
  
  
  
  
  bool Loft( 
    const ON_3dPointArray& points
    );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool Loft(
    int pt_dim,
    int pt_count,
    int pt_stride,
    const double* pt,
    int t_stride,
    const double* t
    );

  
  
  
  
  
  
  
  
  
  
  
  
  
  bool GetBBox( 
         double* box_min,
         double* box_max,
         int bGrowBox = false
         ) const;

  
  
  
  
  
  
  
  
  
  
  bool GetBoundingBox(
         ON_BoundingBox& bbox,
         int bGrowBox = false
         ) const;

  
  
  
  
  ON_BoundingBox BoundingBox() const;

  















	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  
  
  
  
  
  
  
  bool Transform( 
         const ON_Xform& xform
         );

  
  
  
  
  
  
  
  
  
  
  
  
  
  bool Rotate(
        double sin_angle,
        double cos_angle,
        const ON_3dVector& rotation_axis,
        const ON_3dPoint& rotation_center
        );

  
  
  
  
  
  
  
  
  
  
  
  
  bool Rotate(
        double rotation_angle,
        const ON_3dVector& rotation_axis,
        const ON_3dPoint& rotation_center
        );

  
  
  
  
  
  
  
  
  bool Translate( 
    const ON_3dVector& translation_vector
    );

  
  
  
  
  
  
  
  
  
  bool Scale( 
    double scale_factor
    );

  
  
  ON_Interval Domain() const;

  
  
  
  bool Reverse();

  
  
  
  
  
  
  ON_3dPoint  PointAt( 
                double t 
                ) const;

  
  
  
  
  
  
  
  
  
  
  ON_3dVector DerivativeAt(
                double t 
                ) const;

  
  
  
  
  
  
  
  
  
  
  ON_3dVector TangentAt(
                double t 
                ) const;

  
  
  
  
  
  
  
  
  
  
  ON_3dVector CurvatureAt(
                double t
                ) const;

  
  
  
  
  
  
  
  bool EvPoint(
         double t,
         ON_3dPoint& point
         ) const;

  
  
  
  
  
  
  
  
  bool Ev1Der(
         double t,
         ON_3dPoint& point,
         ON_3dVector& first_derivative
         ) const;

  
  
  
  
  
  
  
  
  
  bool Ev2Der(
         double t,
         ON_3dPoint& point,
         ON_3dVector& first_derivative,
         ON_3dVector& second_derivative
         ) const;

  












  bool EvTangent(
         double t,
         ON_3dPoint& point,
         ON_3dVector& tangent
         ) const;

  










  bool EvCurvature(
         double t,
         ON_3dPoint& point,
         ON_3dVector& tangent,
         ON_3dVector& kappa
         ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  bool Evaluate(
         double t,
         int der_count,
         int v_stride,
         double* v
         ) const;

  
  
  
  
  
  
  
  bool GetNurbForm( 
    ON_NurbsCurve& nurbs_curve
    ) const;

  
  
  bool IsRational() const;
  
  
  
  
  int CVSize() const;

  
  
  
  int CVCount() const;
  
  
  
  int Order() const;        
	
  
  
  int Degree() const;

  




















  double* CV(
        int cv_index
        ) const;

  







  ON::point_style CVStyle() const;

  
  
  
  
  double Weight(
        int cv_index
        ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  bool SetWeight(
        int cv_index,
        double weight
        );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool SetCV(
        int cv_index,
        ON::point_style pointstyle,
        const double* cv
        );

  
  
  
  
  
  
  
  
  
  
  
  bool SetCV(
        int cv_index,
        const ON_3dPoint& point
        );

  
  
  
  
  
  
  
  
  
  
  
  
  bool SetCV(
        int cv_index,
        const ON_4dPoint& point
        );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool GetCV(
        int cv_index,
        ON::point_style pointstyle,
        double* cv
        ) const;

  
  
  
  
  
  
  
  
  bool GetCV(
        int cv_index,
        ON_3dPoint& point
        ) const;

  
  
  
  
  
  
  
  
  bool GetCV(
        int cv_index,
        ON_4dPoint& point
        ) const;

  
  
  bool ZeroCVs(); 

  
  
  
  
  
  
  bool MakeRational();

  
  
  
  
  
  
  bool MakeNonRational();

  
  
  
  
  
  
  bool IncreaseDegree(
          int desired_degree
          );

  
  
  
  
  
  
  bool ChangeDimension(
          int desired_dimension
          );

  
  

  
  
  
  
  
  
  bool ReserveCVCapacity(
    int desired_cv_capacity
    );

  
  
  
  
  
  
  
  
  
  
  bool Trim( 
    const ON_Interval& interval 
    );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool Split( 
         double t,
         ON_BezierCurve& left_side,
         ON_BezierCurve& right_side
         ) const;

  
  
  double ControlPolygonLength() const;

  





































  bool Reparameterize(
          double c
          );

  
  __declspec(deprecated) bool Reparametrize(double);

  















  bool ScaleConrolPoints( 
          int i, 
          double w
          );

  




































  bool ChangeWeights(
          int i0, 
          double w0, 
          int i1, 
          double w1
          );

  
  
public:
  
  
  
  
  
  
  


  
  int m_dim;

  
  int m_is_rat;

  
  int m_order;

  
  int m_cv_stride;

  
  double* m_cv;

  
  
  
  
  int m_cv_capacity;


  
  
  
  int m_reserved_ON_BezierCurve;

};


class  ON_BezierSurface
{
public:
  ON_BezierSurface();
  ON_BezierSurface(
    int dim,
    int is_rat,
    int order0,
    int order1
    );

  ~ON_BezierSurface();
  ON_BezierSurface(const ON_BezierSurface&);
  ON_BezierSurface(const ON_PolynomialSurface&);
  ON_BezierSurface& operator=(const ON_BezierSurface&);
  ON_BezierSurface& operator=(const ON_PolynomialSurface&);

  bool IsValid() const;
  void Dump( ON_TextLog& ) const; 
  int Dimension() const;

  bool Create(
    int dim,
    int is_rat,
    int order0,
    int order1
    );

  void Destroy();
  void EmergencyDestroy(); 

  







  bool Loft( const ON_ClassArray<ON_BezierCurve>& curve_list );

  








  bool Loft( 
    int count, 
    const ON_BezierCurve* const* curve_list 
    );

  bool GetBBox(        
         double*,      
         double*,      
         int bGrowBox = false  
         ) const;

  bool GetBoundingBox(
        ON_BoundingBox& bbox,
        int bGrowBox
        ) const;

  ON_BoundingBox BoundingBox() const;

  bool Transform( 
         const ON_Xform&
         );

  
  
  
  
  
  
  
  
  
  
  
  
  
  bool Rotate(
        double sin_angle,
        double cos_angle,
        const ON_3dVector& rotation_axis,
        const ON_3dPoint& rotation_center
        );

  
  
  
  
  
  
  
  
  
  
  
  
  bool Rotate(
        double rotation_angle,
        const ON_3dVector& rotation_axis,
        const ON_3dPoint& rotation_center
        );

  
  
  
  
  
  
  
  
  bool Translate( 
    const ON_3dVector& translation_vector
    );

  
  
  
  
  
  
  
  
  
  bool Scale( 
    double scale_factor
    );

  ON_Interval Domain(
    int 
    ) const;

  bool Reverse( int );  
                        
  
  bool Transpose(); 

  bool Evaluate( 
         double, double, 
         int,            
         int,            
         double*         
         ) const;

  ON_3dPoint PointAt(double s, double t) const;

  bool GetNurbForm( ON_NurbsSurface& ) const;

  bool IsRational() const;  
  
  int CVSize() const;       
                
  
  int Order(        
        int 
        ) const;
	
  int Degree(       
        int 
        ) const;

  





















  double* CV(
        int cv_index0,
        int cv_index1
        ) const;

  







  ON::point_style CVStyle() const;

  double Weight(        
        int,int          
        ) const;

  bool SetWeight(      
        int,int,         
        double
        );

  bool SetCV(              
        int,int,         
        ON::point_style, 
        const double*     
        );

  bool SetCV(               
        int,int,         
        const ON_3dPoint& 
                           
                           
        );

  bool SetCV(              
        int,int,         
        const ON_4dPoint& 
                          
                          
                          
        );

  bool GetCV(              
        int,int,          
        ON::point_style, 
        double*           
        ) const;

  bool GetCV(              
        int,int,         
        ON_3dPoint&      
        ) const;

  bool GetCV(              
        int,int,         
        ON_4dPoint&      
        ) const;

  bool ZeroCVs(); 

  bool MakeRational();

  bool MakeNonRational();

  bool Split( 
         int, 
         double, 
         ON_BezierSurface&, 
         ON_BezierSurface&  
         ) const;

  bool Trim(
       int dir,
       const ON_Interval& domain
       );

	
	ON_BezierCurve* IsoCurve(
		   int dir,    
                   
                   
                   
       double c,    
			 ON_BezierCurve* iso=0	
			 ) const;

	bool IsSingular( 
         int        
                   
         ) const;
 

  
  
  bool ReserveCVCapacity(
    int 
    );

  
  
public:
  
  
  
  
  
  
  


  int     m_dim;           
  int     m_is_rat;        
  int     m_order[2];      
  int     m_cv_stride[2];  
  double* m_cv;
  int     m_cv_capacity;   

  
  
  
  int m_reserved_ON_BezierSurface;

};




class  ON_BezierCage
{
public:
  ON_BezierCage();

  ON_BezierCage(
    int dim,
    bool is_rat,
    int order0,
    int order1,
    int order2
    );


  









  ON_BezierCage( 
    const ON_BoundingBox& bbox,
    int order0,
    int order1,
    int order2
    );


  

























  ON_BezierCage( 
    const ON_3dPoint* box_corners,
    int order0,
    int order1,
    int order2
    );

  ~ON_BezierCage();

  ON_BezierCage(const ON_BezierCage& src);

  ON_BezierCage& operator=(const ON_BezierCage& src);


  







  bool IsValid() const;

  void Dump( ON_TextLog& text_log) const;


  







  int Dimension() const;


  











  bool Create(
    int dim,
    bool is_rat,
    int order0,
    int order1,
    int order2
    );

  









  bool Create(
    const ON_BoundingBox& bbox,
    int order0,
    int order1,
    int order2
    );

  




















  bool Create(
    const ON_3dPoint* box_corners,
    int order0,
    int order1,
    int order2
    );


  



  void Destroy();

  







  void EmergencyDestroy();


  








  bool Read(ON_BinaryArchive& archive);

  








  bool Write(ON_BinaryArchive& archive) const;


  













  bool GetBBox(
         double* boxmin,
         double* boxmax,
         int bGrowBox = false 
         ) const;

  bool Transform( 
         const ON_Xform& xform
         );

  
  
  
  
  
  
  
  
  
  
  
  
  
  bool Rotate(
        double sin_angle,
        double cos_angle,
        const ON_3dVector& rotation_axis,
        const ON_3dPoint& rotation_center
        );

  
  
  
  
  
  
  
  
  
  
  
  
  bool Rotate(
        double rotation_angle,
        const ON_3dVector& rotation_axis,
        const ON_3dPoint& rotation_center
        );

  
  
  
  
  
  
  
  
  bool Translate( 
    const ON_3dVector& translation_vector
    );

  
  
  
  
  
  
  
  
  
  bool Scale( 
    double scale_factor
    );

  ON_Interval Domain(
    int 
    ) const;

  
  bool Evaluate( 
         double r, 
         double s, 
         double t,
         int der_count,
         int v_stride,
         double* v        
         ) const;

  







  ON_3dPoint PointAt(
         double r, 
         double s, 
         double t
         ) const;

  







  ON_3dPoint PointAt(
         ON_3dPoint rst
         ) const;

  bool IsRational() const;  
  
  bool IsSingular( 
        int        
                   
        ) const;

  int CVSize() const;       
                
  
  int Order(        
        int 
        ) const;
	
  int Degree(       
        int 
        ) const;

  





















  double* CV(
        int i,
        int j,
        int k
        ) const;

  







  ON::point_style CVStyle() const;

  double Weight(        
        int i,
        int j,
        int k
        ) const;

  bool SetWeight(      
        int i,
        int j,
        int k,
        double w
        );

  bool SetCV(              
        int i,
        int j,
        int k,
        ON::point_style, 
        const double*     
        );

  
  
  
  bool SetCV(
        int i,
        int j,
        int k,
        const ON_3dPoint& point
        );

  
  
  
  
  
  bool SetCV(
        int i,
        int j,
        int k,
        const ON_4dPoint& hpoint
        );

  bool GetCV(              
        int i,
        int j,
        int k,
        ON::point_style, 
        double*           
        ) const;

  bool GetCV(              
        int i,
        int j,
        int k,
        ON_3dPoint&      
        ) const;

  bool GetCV(              
        int i,
        int j,
        int k,
        ON_4dPoint&      
        ) const;

  bool ZeroCVs(); 

  bool MakeRational();

  bool MakeNonRational();


  
  

  



  bool ReserveCVCapacity(
    int cv_capacity
    );

  
  
public:
  
  
  
  
  
  
  


  int     m_dim;
  bool    m_is_rat;
  int     m_order[3];
  int     m_cv_stride[3];
  int     m_cv_capacity;
  double* m_cv;
};


class  ON_BezierCageMorph : public ON_SpaceMorph
{
public:
  ON_BezierCageMorph();
  ~ON_BezierCageMorph();

  







































  bool Create( 
    ON_3dPoint P0,
    ON_3dPoint P1,
    ON_3dPoint P2,
    ON_3dPoint P3,
    int point_countX,
    int point_countY,
    int point_countZ
    );

  














  bool SetXform( ON_Xform world2unitcube );

  














  bool SetBezierCage( ON_BezierCage& unitcube2world );

  const ON_Xform& WorldToUnitCube() const;
  const ON_BezierCage& BezierCage() const;

  bool Read(ON_BinaryArchive& archive);
  bool Write(ON_BinaryArchive& archive) const;

  







  bool Transform(const ON_Xform& xform);

private:
  bool m_bValid;

  
  
  ON_Xform m_xyz2rst;

  
  ON_BezierCage m_rst2xyz;
};











































class ON_3dVector;
class ON_Interval;
class ON_Line;
class ON_Arc;
class ON_Plane;





class  ON_Sum
{
public:

  



  void operator=(double x);

  



  void operator+=(double x);

  



  void operator-=(double x);

  



  ON_Sum();

  






  void Begin( double starting_value = 0.0 );

  





  void Plus( double x );

  







  void Plus( double x, double dx );

  












  double Total( double* error_estimate = 0 );

  



  int SummandCount() const;

private:
  enum {
    sum1_max_count=256,
    sum2_max_count=512,
    sum3_max_count=1024
  };
  double m_sum_err;
  double m_pos_sum;     
  double m_neg_sum;  
  
  int m_zero_count; 
  int m_pos_count; 
  int m_neg_count; 
  
  int m_pos_sum1_count;
  int m_pos_sum2_count;
  int m_pos_sum3_count;
  double m_pos_sum1[sum1_max_count];
  double m_pos_sum2[sum2_max_count];
  double m_pos_sum3[sum3_max_count];
  
  int m_neg_sum1_count;
  int m_neg_sum2_count;
  int m_neg_sum3_count;
  double m_neg_sum1[sum1_max_count];
  double m_neg_sum2[sum2_max_count];
  double m_neg_sum3[sum3_max_count];

  double SortAndSum( int, double* );
};







class  ON_Evaluator
{
public:

  





















  ON_Evaluator( 
    int parameter_count,
    int value_count,
    const ON_Interval* domain,
    const bool* periodic
    );

  virtual ~ON_Evaluator();
  
  








































  virtual int Evaluate(
       const double* parameters,
       double* values,
       double** jacobian
       ) = 0;

  





























  virtual int EvaluateHessian(
       const double* parameters,
       double* value,
       double* gradient,
       double** hessian
       );
  
  
  
  const int m_parameter_count;

  
  
  const int m_value_count;

  









  bool FiniteDomain() const;

  











  bool Periodic(
    int parameter_index
    ) const;

  












  ON_Interval Domain(
    int parameter_index
    ) const;


  
  
  
  ON_SimpleArray<ON_Interval> m_domain;

  
  
  
  
  
  ON_SimpleArray<bool> m_bPeriodicParameter;

private:
  ON_Evaluator(); 
  ON_Evaluator& operator=(const ON_Evaluator&); 
};








bool ON_IsValid( double x );


bool ON_IsValidFloat( float x );






























































float ON_ArrayDotProduct( 
          int,           
          const float*, 
          const float*  
          );


void   ON_ArrayScale( 
          int,           
          float,        
          const float*, 
          float*        
          );


void   ON_Array_aA_plus_B( 
          int,           
          float,        
          const float*, 
          const float*, 
          float*        
          );


double ON_ArrayDotProduct( 
          int,           
          const double*, 
          const double*  
          );


double ON_ArrayDotDifference( 
          int,           
          const double*, 
          const double*, 
          const double*  
          );


double ON_ArrayMagnitude( 
          int,           
          const double*  
          );


double ON_ArrayMagnitudeSquared( 
          int,           
          const double*  
          );


double ON_ArrayDistance( 
          int,           
          const double*, 
          const double*  
          );


double ON_ArrayDistanceSquared( 
          int,           
          const double*, 
          const double*  
          );


void   ON_ArrayScale( 
          int,           
          double,        
          const double*, 
          double*        
          );


void   ON_Array_aA_plus_B( 
          int,           
          double,        
          const double*, 
          const double*, 
          double*        
          );


int    ON_SearchMonotoneArray( 
          
          
          
          
          const double*, 
          int,           
          double         
          );
























double ON_BinomialCoefficient( 
          int i,
          int j
          );
























double ON_TrinomialCoefficient( 
          int i,
          int j,
          int k
          );



ON_BOOL32 ON_GetParameterTolerance(
        double, double, 
        double,          
        double*, double* 
        );



ON_BOOL32 ON_IsValidPointList(
        int,  
        ON_BOOL32, 
        int,  
        int,  
        const float*
        );


ON_BOOL32 ON_IsValidPointList(
        int,  
        ON_BOOL32, 
        int,  
        int,  
        const double*
        );




































int ON_IsPointListPlanar(
    bool bRational,
    int count,
    int stride,
    const double* points,
    const double* boxMin,
    const double* boxMax,
    double tolerance,
    ON_PlaneEquation* plane_equation
    );


ON_BOOL32 ON_IsValidPointGrid(
        int,  
        ON_BOOL32, 
        int, int, 
        int, int, 
        const double*
        );


bool ON_ReversePointList(
        int,  
        ON_BOOL32, 
        int,  
        int,  
        double*
        );


ON_BOOL32 ON_ReversePointGrid(
        int,  
        ON_BOOL32, 
        int, int, 
        int, int, 
        double*,
        int       
        );


bool ON_SwapPointListCoordinates( 
        int, 
        int, 
        float*,
        int, int 
        );


bool ON_SwapPointListCoordinates( 
        int, 
        int, 
        double*,
        int, int 
        );


ON_BOOL32 ON_SwapPointGridCoordinates(
        int, int, 
        int, int, 
        double*,
        int, int 
        );


bool ON_TransformPointList(
        int,  
        ON_BOOL32, 
        int,  
        int,  
        float*,
        const ON_Xform&
        );


bool ON_TransformPointList(
        int,  
        ON_BOOL32, 
        int,  
        int,  
        double*,
        const ON_Xform&
        );


ON_BOOL32 ON_TransformPointGrid(
        int,      
        ON_BOOL32,     
        int, int, 
        int, int, 
        double*,
        const ON_Xform&
        );


ON_BOOL32 ON_TransformVectorList(
       int,  
       int,  
       int,  
       float*,
       const ON_Xform&
       );


ON_BOOL32 ON_TransformVectorList(
       int,  
       int,  
       int,  
       double*,
       const ON_Xform&
       );

















bool ON_PointsAreCoincident(
    int dim,
    int is_rat,
    const double* pointA,
    const double* pointB
    );























bool ON_PointsAreCoincident(
    int dim,
    int is_rat,
    int point_count,
    int point_stride,
    const double* points
    );


int ON_ComparePoint( 
                              
                              
                              
          int dim,            
          ON_BOOL32 israt,    
          const double* cv0,  
          const double* cv1   
          );


int ON_ComparePointList( 
                              
                              
                              
          int,           
          ON_BOOL32,          
          int,           
          
          int,           
          const double*, 
          
          int,           
          const double*  
          );


ON_BOOL32 ON_IsPointListClosed(
       int,  
       int,  
       int,  
       int,  
       const double*
       );


ON_BOOL32 ON_IsPointGridClosed(
        int,  
        ON_BOOL32, 
        int, int, 
        int, int, 
        const double*,
        int       
       );


int ON_SolveQuadraticEquation( 
        
        
        
        
        
        
       double, double, double, 
       double*, double*        
       );


ON_BOOL32 ON_SolveTriDiagonal( 
        int,               
        int,               
        double*,           
        const double*,     
        double*,           
        const double*,     
        double*            
        );









int ON_Solve2x2( 
        double, double,   
        double, double,   
        double, double,   
        double*, double*, 
        double*           
        );




























int ON_Solve3x2( 
        const double[3], 
        const double[3], 
        double,  
        double,  
        double,  
        double*, 
        double*, 
        double*, 
        double*  
        );













































int ON_Solve3x3( 
        const double row0[3], 
        const double row1[3], 
        const double row2[3],
        double d0, 
        double d1, 
        double d2,
        double* x_addr, 
        double* y_addr, 
        double* z_addr,
        double* pivot_ratio
        );


















































int
ON_Solve4x4(
          const double row0[4], 
          const double row1[4], 
          const double row2[4],  
          const double row3[4],
          double d0, 
          double d1, 
          double d2, 
          double d3,
          double* x_addr, 
          double* y_addr, 
          double* z_addr, 
          double* w_addr,
          double* pivot_ratio
          );

























































double ON_SolveNxN(bool bFullPivot, bool bNormalize, int n, double* M[], double B[], double X[]);




ON_BOOL32 ON_EvJacobian( 
        double, 
        double, 
        double, 
        double* 
        );




















int ON_DecomposeVector(
        const ON_3dVector& V,
        const ON_3dVector& A,
        const ON_3dVector& B,
        double* x, double* y
        );



















ON_BOOL32 ON_EvNormalPartials(
        const ON_3dVector& ds,
        const ON_3dVector& dt,
        const ON_3dVector& dss,
        const ON_3dVector& dst,
        const ON_3dVector& dtt,
        ON_3dVector& ns,
        ON_3dVector& nt
        );


ON_BOOL32 
ON_Pullback3dVector( 
      const ON_3dVector&,   
      double,              
                                    
      const ON_3dVector&,     
      const ON_3dVector&,     
      const ON_3dVector&,     
      const ON_3dVector&,     
      const ON_3dVector&,     
      ON_2dVector&            
      );


ON_BOOL32 
ON_GetParameterTolerance(
        double,   
        double,   
        double,   
        double*,  
        double*   
        );



ON_BOOL32 ON_EvNormal(
        int, 
        const ON_3dVector&, const ON_3dVector&, 
        const ON_3dVector&, const ON_3dVector&, const ON_3dVector&, 
        ON_3dVector& 
        );



bool ON_EvTangent(
        const ON_3dVector&, 
        const ON_3dVector&, 
        ON_3dVector&        
        );



ON_BOOL32 ON_EvCurvature(
        const ON_3dVector&, 
        const ON_3dVector&, 
        ON_3dVector&,       
        ON_3dVector&        
        );


ON_BOOL32 ON_EvPrincipalCurvatures( 
        const ON_3dVector&, 
        const ON_3dVector&, 
        const ON_3dVector&, 
        const ON_3dVector&, 
        const ON_3dVector&, 
        const ON_3dVector&, 
        double*, 
        double*, 
        double*, 
        double*, 
        ON_3dVector&, 
        ON_3dVector&  
                        
        );


ON_BOOL32 ON_EvPrincipalCurvatures( 
        const ON_3dVector&, 
        const ON_3dVector&, 
        double l, 
        double m, 
        double n, 
        const ON_3dVector&, 
        double*, 
        double*, 
        double*, 
        double*, 
        ON_3dVector&, 
        ON_3dVector&  
                        
        );






















bool ON_EvSectionalCurvature( 
    const ON_3dVector& S10, 
    const ON_3dVector& S01,
    const ON_3dVector& S20, 
    const ON_3dVector& S11, 
    const ON_3dVector& S02,
    const ON_3dVector& planeNormal,
    ON_3dVector& K 
    );



ON_3dVector ON_NormalCurvature( 
        const ON_3dVector&, 
        const ON_3dVector&, 
        const ON_3dVector&, 
        const ON_3dVector&, 
        const ON_3dVector&, 
        const ON_3dVector&, 
        const ON_3dVector&  
        );




















































bool ON_IsCurvatureDiscontinuity( 
  const ON_3dVector Km, 
  const ON_3dVector Kp,
  double cos_angle_tolerance,
  double curvature_tolerance,
  double zero_curvature,
  double radius_tolerance,
  double relative_tolerance
  );


bool ON_IsCurvatureDiscontinuity( 
  const ON_3dVector Km, 
  const ON_3dVector Kp,
  double cos_angle_tolerance,
  double curvature_tolerance,
  double zero_curvature,
  double radius_tolerance
  );

















bool ON_IsG2CurvatureContinuous(
  const ON_3dVector Km, 
  const ON_3dVector Kp,
  double cos_angle_tolerance,
  double curvature_tolerance
  );
















bool ON_IsGsmoothCurvatureContinuous(
  const ON_3dVector Km, 
  const ON_3dVector Kp,
  double cos_angle_tolerance,
  double curvature_tolerance
  );
































ON_BOOL32 ON_IsContinuous(
  ON::continuity c,
  ON_3dPoint Pa,
  ON_3dVector D1a,
  ON_3dVector D2a,
  ON_3dPoint Pb,
  ON_3dVector D1b,
  ON_3dVector D2b,
  double point_tolerance=2.3283064365386962890625e-10,
  double d1_tolerance=2.3283064365386962890625e-10,
  double d2_tolerance=2.3283064365386962890625e-10,
  double cos_angle_tolerance=0.99984769515639123915701155881391,
  double curvature_tolerance=1.490116119385000000e-8
  );



bool ON_TuneupEvaluationParameter( 
   int side,
   double s0, double s1, 
   double *s             
   );



int ON_Compare2dex( const ON_2dex* a, const ON_2dex* b);


int ON_Compare3dex( const ON_3dex* a, const ON_3dex* b);


int ON_Compare4dex( const ON_4dex* a, const ON_4dex* b);


const ON_2dex* ON_BinarySearch2dexArray( 
          int key_i, 
          const ON_2dex* base, 
          size_t nel
          );








bool ON_Intersect( 
          const ON_Line&, 
          const ON_Line&, 
          double*, 
          double*  
          );






bool ON_Intersect( 
          const ON_Line&, 
          const ON_Plane&, 
          double* 
          );


bool ON_Intersect( 
        const ON_Plane&, 
        const ON_Plane&, 
        ON_Line& 
        );


bool ON_Intersect( 
        const ON_Plane&, 
        const ON_Plane&, 
        const ON_Plane&,
        ON_3dPoint& 
        );










int ON_Intersect( 
                 const ON_Plane&, const ON_Sphere&, ON_Circle&
                  );












int ON_Intersect(                  
        const ON_Line&, 
        const ON_Sphere&,
        ON_3dPoint&, 
        ON_3dPoint& 
        );


















int ON_Intersect( 
      const ON_Line&, 
      const ON_Cylinder&, 
      ON_3dPoint&, 
      ON_3dPoint& 
      );
















int ON_Intersect( 
                  const ON_Line& line, 
                  const ON_Circle& circle,
                  double* line_t0,
                  ON_3dPoint& circle_point0,
                  double* line_t1,
                  ON_3dPoint& circle_point1
                  );


















int ON_Intersect( 
                  const ON_Line& line, 
                  const ON_Arc& arc,
                  double* line_t0,
                  ON_3dPoint& arc_point0,
                  double* line_t1,
                  ON_3dPoint& arc_point1
                  );















int ON_Intersect( 
                  const ON_Plane& plane, 
                  const ON_Circle& circle,
                  ON_3dPoint& point0,
                  ON_3dPoint& point1
                  );















int ON_Intersect( 
                  const ON_Plane& plane, 
                  const ON_Arc& arc,
                  ON_3dPoint& point0,
                  ON_3dPoint& point1
                  );




int ON_ArePointsOnLine(
        int, 
        int, 
        int, 
        int, 
        const double*, 
        const ON_BoundingBox&, 
        const ON_Line&,
        double         
        );



int ON_ArePointsOnPlane(
        int, 
        int, 
        int, 
        int, 
        const double*, 
        const ON_BoundingBox&, 
        const ON_Plane&,
        double         
        );


























bool ON_EvaluateQuotientRule( 
          int dim, 
          int der_count,
          int v_stride, 
          double *v 
          );


























bool ON_EvaluateQuotientRule2( 
          int dim, 
          int der_count, 
          int v_stride, 
          double *v 
          );






























bool ON_EvaluateQuotientRule3( 
          int dim, 
          int der_count, 
          int v_stride,
          double *v 
          );


bool ON_GetPolylineLength(
        int,           
        ON_BOOL32,          
        int,           
        int,           
        const double*, 
        double*        
        );
















bool ON_GetClosestPointInPointList( 
          int point_count,
          const ON_3dPoint* point_list,
          ON_3dPoint P,
          int* closest_point_index
          );












































double ON_TestMathFunction( 
        int function_index, 
        double x, 
        double y 
        );



 double ON_Max(double a, double b);



 float ON_Max(float a, float b);



 int ON_Max(int a, int b);



 double ON_Min(double a, double b);



 float ON_Min(float a, float b);



 int ON_Min(int a, int b);





 int ON_Round(double x);



































 bool ON_GetConicEquationThrough6Points( 
        int stride, 
        const double* points2d, 
        double conic[6],
        double* max_pivot,
        double* min_pivot,
        double* zero_pivot
        );






















 bool ON_IsConicEquationAnEllipse( 
        const double conic[6], 
        ON_2dPoint& center, 
        ON_2dVector& major_axis, 
        ON_2dVector& minor_axis, 
        double* major_radius, 
        double* minor_radius
        );










































 bool ON_GetEllipseConicEquation( 
      double a, double b, 
      double x0, double y0, 
      double alpha,
      double conic[6]
      );







 double ON_Length2d( double x, double y );







 double ON_Length3d( double x, double y, double z );












 float ON_FloatFloor(double x);











 float ON_FloatCeil(double x);











































































bool ON_IntersectLineLine(
          const ON_Line& lineA, 
          const ON_Line& lineB, 
          double* a,
          double* b,
          double tolerance,
          bool bIntersectSegments
          );























bool ON_Intersect(
          const ON_Line& lineA, 
          const ON_Line& lineB, 
          double* a,
          double* b
          );


bool ON_Intersect( 
                   
                   
                   
          const ON_Line&, 
          const ON_Plane&, 
          double* 
          );

















bool ON_Intersect(
          const ON_Line& line, 
          const ON_PlaneEquation& plane_equation, 
          double* line_parameter
          );


bool ON_Intersect( const ON_Plane&, 
                  const ON_Plane&, 
                   ON_Line& 
                   );


bool ON_Intersect( const ON_Plane&, 
                  const ON_Plane&, 
                  const ON_Plane&,
                  ON_3dPoint& 
                  );


















int ON_Intersect(
          const ON_Plane& plane, 
          const ON_Sphere& sphere,
          ON_Circle& circle
          );


int ON_Intersect( 
                  
                  
                  
                  
                  
                  
                  
                  
                 const ON_Line&, const ON_Sphere&,
                  ON_3dPoint&, ON_3dPoint& 
                  );


int ON_Intersect( 
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  const ON_Line&, const ON_Cylinder&,
                  ON_3dPoint&, ON_3dPoint& 
                  );























bool ON_Intersect( const ON_BoundingBox& bbox, 
                   const ON_Line& line, 
                   double tolerance,
                   ON_Interval* line_parameters
                   );















int ON_Intersect( const ON_Sphere& sphere0, 
                  const ON_Sphere& sphere1, 
                  ON_Circle& circle
                 );























ON_BOOL32 ON_FindLocalMinimum( 
        int (*)(void*,double,double*,double*), 
        void*, 
        double, double, double, 
                                
        double, 
        double, 
        int,     
        double*  
        );


class ON_LocalZero1
{
public:
  ON_LocalZero1();
  virtual ~ON_LocalZero1();

  virtual
  ON_BOOL32 Evaluate( 
     double,  
     double*, 
     double*, 
     int      
              
  ) = 0;


  ON_BOOL32 FindZero( double* );  
                             
                             

  
  
  
  
  
  double m_t0, m_t1; 

  double m_f_tolerance; 
                        
                        

  double m_t_tolerance; 
                        
                        
                        

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  const double* m_k;
  
  
  int m_k_count;     

private:
  double m_s0, m_f0, m_s1, m_f1;
  ON_BOOL32 BracketZero(double,double,double,double,int=0);
  ON_BOOL32 BracketSpan(double,double,double,double);
  ON_BOOL32 NewtonRaphson( double, double, double, double, int, double* );
};

























double ON_DomainTolerance(
          double, 
          double  
          );


double ON_KnotTolerance(
          int,           
          int,           
          const double*, 
          int            
          );


double ON_SpanTolerance(
          int,           
          int,           
          const double*, 
          int            
          );


int ON_KnotCount( 
          int, 
          int  
          );


int ON_KnotMultiplicity(
          int,   
          int,   
          const double*, 
          int            
          );


int ON_KnotVectorSpanCount(
          int,           
          int,           
          const double*  
          );


bool ON_GetKnotVectorSpanVector(
          int,           
          int,           
          const double*, 
          double*        
          );






















int ON_NurbsSpanIndex(
          int order,
          int cv_count,
          const double* knot,
          double t,
          int side,
          int hint
          );


int ON_NextNurbsSpanIndex(
          
          
          
          
          int order,
          int cv_count,
          const double* knot,
          int            
          );


int ON_GetSpanIndices( 
          int order,
          int cv_count,
          const double* knot,
          int*           
                         
                         
                         
          );


double ON_SuperfluousKnot( 
          int order,
          int cv_count,
          const double* knot,
          int            
                         
          );


bool ON_IsKnotVectorPeriodic(
          int order,
          int cv_count,
          const double* knot
          );


bool ON_IsKnotVectorClamped(
          int order,
          int cv_count,
          const double* knot,
          int = 2        
          );


bool ON_IsKnotVectorUniform(
          int order,
          int cv_count,
          const double* knot 
          );




bool ON_KnotVectorHasBezierSpans(
          int order,
          int cv_count,
          const double* knot
          );



ON::knot_style ON_KnotVectorStyle( 
          int order,
          int cv_count,
          const double* knot
          );

















bool ON_SetKnotVectorDomain( 
          int order, 
          int cv_count, 
          double* knot, 
          double t0, 
          double t1 
          );


bool ON_GetKnotVectorDomain(
          int,           
          int,           
          const double*, 
          double*, double*
          );


bool ON_ReverseKnotVector(
          int,           
          int,           
          double*        
          );


int ON_CompareKnotVector( 
                                      
                                      
                                      
          
          int,           
          int,           
          const double*, 
          
          int,           
          int,           
          const double*  
          );


bool ON_IsValidKnotVector(
          int order,
          int cv_count, 
          const double* knot, 
          ON_TextLog* text_log = 0
          );


bool ON_ClampKnotVector(
          
          
          int,           
          int,           
          double*,       
          int            
          );


bool ON_MakeKnotVectorPeriodic(
          
          
          int,           
          int,           
          double*        
          );

 


















bool ON_MakeClampedUniformKnotVector(
          int order,
          int cv_count,
          double* knot,
          double delta = 1.0
          );




















bool ON_MakePeriodicUniformKnotVector(
          int order,
          int cv_count,
          double* knot,
          double delta = 1.0
          );


double ON_GrevilleAbcissa( 
          int,           
          const double*  
          );


bool ON_GetGrevilleAbcissae( 
          int,            
          int,            
          const double*,  
          bool,           
          double*         
                          
          );


bool ON_GetGrevilleKnotVector( 
          int,           
          const double*, 
                         
                         
          bool,          
          int,           
          int,           
          double*        
          );


bool ON_ClampKnotVector(
        int,       
        int,       
        int,       
        int,       
        double*,   
        double*,   
        int        
        );






int ON_InsertKnot(
        double,    
        int,       
        int,       
        int,       
        int,       
        int,       
        double*,   
        double*,   
        int*       
                   
        );





















bool ON_ReparameterizeRationalBezierCurve(
          double c,
          int dim,
          int order,
          int cvstride,
          double* cv
          );






























bool ON_ChangeRationalBezierCurveWeights(
          int dim, int order, int cvstride, double* cv,
          int i0, double w0, 
          int i1, double w1
          );

























bool ON_ReparameterizeRationalNurbsCurve(
          double c, 
          int dim, 
          int order, 
          int cv_count,
          int cvstride,
          double* cv,
          double* knot
          );























bool ON_ChangeRationalNurbsCurveEndWeights(
          int dim, 
          int order, 
          int cv_count,
          int cvstride, 
          double* cv, 
          double* knot,
          double w0, 
          double w1
          );
























bool ON_IncreaseBezierDegree(
        int,    
        ON_BOOL32,   
        int,    
        int,    
        double* 
        );


bool ON_RemoveBezierSingAt0( 
        int,    
        int,    
        int,    
        double* 
        );


bool ON_RemoveBezierSingAt1( 
        int,    
        int,    
        int,    
        double* 
        );


double ON_EvaluateBernsteinBasis( 
        int, 
        int, 
        double 
        );


void ON_EvaluatedeCasteljau(
        int,     
        int,     
        int,     
                 
        int,     
        double*, 
        double   
        );


bool ON_EvaluateBezier(
        int,            
        ON_BOOL32,           
        int,            
        int,            
        const double*,  
        double, double, 
        int,            
        double,         
        int,            
        double*         
        );
                                      

bool ON_EvaluateNurbsBasis( 
                  int,           
                  const double*, 
                  double,        
                  double*        
                  );


bool ON_EvaluateNurbsBasisDerivatives( 
                  int,           
                  const double*, 
                  int,           
                  double*        
                  );                      












































































bool ON_EvaluateNurbsSpan( 
        int dim,
        int is_rat,
        int order,
        const double* knot,
        int cv_stride,
        const double* cv,
        int der_count,
        double t,
        int v_stride,
        double* v
        );

















































bool ON_EvaluateNurbsSurfaceSpan(
        int dim,
        int is_rat,
        int order0, 
        int order1,
        const double* knot0,
        const double* knot1,
        int cv_stride0,
        int cv_stride1,
        const double* cv,
        int der_count,
        double s,
        double t,
        int v_stride,
        double* v
        );
            





























































bool ON_EvaluateNurbsCageSpan(
        int dim,
        int is_rat,
        int order0, int order1, int order2,
        const double* knot0,
        const double* knot1,
        const double* knot2,
        int cv_stride0, int cv_stride1, int cv_stride2,
        const double* cv,
        int der_count,
        double t0, double t1, double t2,
        int v_stride, 
        double* v
        );



bool ON_EvaluateNurbsDeBoor( 
        int,            
        int,            
        int,            
        double*,        
        const double*,  
        int,            
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
        double,         
        double          
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
        );



bool ON_EvaluateNurbsBlossom(int, 
                             int, 
                             int, 
                             const double*, 
                             const double*, 
                             
                             const double*, 
                             double* 

                             
                             
                            );



void ON_ConvertNurbSpanToBezier(
        int,       
        int,       
        int,       
        double*,   
        const double*, 
        double,        
        double         
        );






















class  ON_TextLog
{
public:
  




  ON_TextLog();

  







  ON_TextLog( FILE* fp); 

  






  ON_TextLog( ON_wString& s );

  virtual ~ON_TextLog();

  void SetDoubleFormat( const char* ); 
  void GetDoubleFormat( ON_String& ) const;

  void SetFloatFormat( const char* ); 
  void GetFloatFormat( ON_String& ) const;

  void PushIndent();
  void PopIndent();
  int IndentSize() const; 
                          
  void SetIndentSize(int);
  
  void PrintWrappedText( const char*, int = 60 );    
  void PrintWrappedText( const wchar_t*, int = 60 ); 

  










  void Print( const char* format, ... );

  










  void Print( const wchar_t* format, ... );

  void Print( float );
  void Print( double );
  void Print( const ON_2dPoint& );
  void Print( const ON_3dPoint& );
  void Print( const ON_4dPoint& );
  void Print( const ON_2dVector& );
  void Print( const ON_3dVector& );
  void Print( const ON_Xform& );
  void Print( const ON_UUID& );
  void Print( const ON_COMPONENT_INDEX& );

  





  void Print( const ON_wString& string );

  





  void Print( const ON_String& string );

  void Print( const ON_3dPointArray&, const char* = 0 );
  void Print( 
         const ON_Matrix&, 
         const char* = 0, 
         int = 0             
    );

  
  



  void PrintNewLine();

  





  void PrintString( const char* s );

  





  void PrintString( const wchar_t* s );

  void PrintRGB( const ON_Color& );

  void PrintTime( const struct tm& );

  void PrintPointList( 
    int,               
    ON_BOOL32,              
    int,               
    int,               
    const double*,     
    const char* = 0 
    );

  void PrintPointGrid( 
    int,               
    ON_BOOL32,              
    int, int,          
    int, int,          
    const double*,     
    const char* = 0 
    );
    
  void PrintKnotVector( 
    int,             
    int,             
    const double*    
    );

  ON_TextLog& operator<<( const char* );
  ON_TextLog& operator<<( char );
  ON_TextLog& operator<<( short );
  ON_TextLog& operator<<( int );
  ON_TextLog& operator<<( float );
  ON_TextLog& operator<<( double );
  ON_TextLog& operator<<( const ON_2dPoint& );
  ON_TextLog& operator<<( const ON_3dPoint& );
  ON_TextLog& operator<<( const ON_4dPoint& );
  ON_TextLog& operator<<( const ON_2dVector& );
  ON_TextLog& operator<<( const ON_3dVector& );
  ON_TextLog& operator<<( const ON_Xform& );

protected:
  FILE* m_pFile;
  ON_wString* m_pString;

  
  








  virtual
  void AppendText(
        const char* s
        );

  








  virtual
  void AppendText(
        const wchar_t* s
        );
                  
private:
  ON_String m_indent;
  ON_String m_double_format;
  ON_String m_double2_format;
  ON_String m_double3_format;
  ON_String m_double4_format;
  ON_String m_float_format;
  ON_String m_float2_format;
  ON_String m_float3_format;
  ON_String m_float4_format;

  ON_String m_line;

  int m_beginning_of_line; 
  int m_indent_size;       

private:
  
  ON_TextLog( const ON_TextLog& );
  ON_TextLog& operator=( const ON_TextLog& );

};






class ON_TextLogIndent
{
public:
    
    
  ON_TextLogIndent(
    class ON_TextLog& text_log
    );

    
    
    ON_TextLogIndent(
      class ON_TextLog& text_log,
      bool bEnabled
    );

  ~ON_TextLogIndent();

private:
  class ON_TextLog& m_text_log;
  bool m_bEnabled;

  
  
  ON_TextLogIndent(const ON_TextLogIndent&);
  ON_TextLogIndent& operator=(const ON_TextLogIndent&);
};






















































































































































































































































































                        





































   











   














































typedef unsigned char  z_Byte;  

typedef unsigned int   z_uInt;  
typedef unsigned int  z_uLong; 





   typedef z_Byte   z_Bytef;

typedef char   z_charf;
typedef int    z_intf;
typedef z_uInt   z_uIntf;
typedef z_uLong  z_uLongf;


   typedef void const *voidpc;
   typedef void    *z_voidpf;
   typedef void       *z_voidp;























































extern "C" {







































typedef z_voidpf (*z_alloc_func) (z_voidpf opaque, z_uInt items, z_uInt size);
typedef void   (*z_free_func)  (z_voidpf opaque, z_voidpf address);

struct internal_state;

typedef struct z_stream_s {
    z_Bytef    *next_in;  
    z_uInt     avail_in;  
    z_uLong    total_in;  

    z_Bytef    *next_out; 
    z_uInt     avail_out; 
    z_uLong    total_out; 

    char     *msg;      
    struct internal_state  *state; 

    z_alloc_func zalloc;  
    z_free_func  zfree;   
    z_voidpf     opaque;  

    int     data_type;  
    z_uLong   adler;      
    z_uLong   reserved;   
} z_stream;

typedef z_stream  *z_streamp;





typedef struct gz_header_s {
    int     text;       
    z_uLong   time;       
    int     xflags;     
    int     os;         
    z_Bytef   *extra;     
    z_uInt    extra_len;  
    z_uInt    extra_max;  
    z_Bytef   *name;      
    z_uInt    name_max;   
    z_Bytef   *comment;   
    z_uInt    comm_max;   
    int     hcrc;       
    int     done;       

} gz_header;

typedef gz_header  *gz_headerp;

































                        

















































                        

extern const char *  zlibVersion (void);





























extern int  z_deflate (z_streamp strm, int flush);





















































































extern int  z_deflateEnd (z_streamp strm);


































extern int  z_inflate (z_streamp strm, int flush);


































































































extern int  z_inflateEnd (z_streamp strm);










                        
































































extern int  z_deflateSetDictionary (z_streamp strm, const z_Bytef *dictionary, z_uInt dictLength);




































extern int  z_deflateCopy (z_streamp dest, z_streamp source);
















extern int  z_deflateReset (z_streamp strm);










extern int  z_deflateParams (z_streamp strm, int level, int strategy);


















extern int  deflateTune (z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain);












extern z_uLong  z_deflateBound (z_streamp strm, z_uLong sourceLen);







extern int  z_deflatePrime (z_streamp strm, int bits, int value);













extern int  deflateSetHeader (z_streamp strm, gz_headerp head);

































































extern int  z_inflateSetDictionary (z_streamp strm, const z_Bytef *dictionary, z_uInt dictLength);



















extern int  z_inflateSync (z_streamp strm);














extern int  z_inflateCopy (z_streamp dest, z_streamp source);














extern int  z_inflateReset (z_streamp strm);









extern int  inflatePrime (z_streamp strm, int bits, int value);













extern int  inflateGetHeader (z_streamp strm, gz_headerp head);




























































typedef unsigned (*z_in_func) (void  *, unsigned char  *  *);
typedef int (*z_out_func) (void  *, unsigned char  *, unsigned);

extern int  z_inflateBack (z_streamp strm, z_in_func in, void  *in_desc, z_out_func out, void  *out_desc);


































































extern int  z_inflateBackEnd (z_streamp strm);







extern z_uLong  zlibCompileFlags (void);









































                        









extern int  z_compress (z_Bytef *dest, z_uLongf *destLen, const z_Bytef *source, z_uLong sourceLen);













extern int  z_compress2 (z_Bytef *dest, z_uLongf *destLen, const z_Bytef *source, z_uLong sourceLen, int level);













extern z_uLong  z_compressBound (z_uLong sourceLen);






extern int  z_uncompress (z_Bytef *dest, z_uLongf *destLen, const z_Bytef *source, z_uLong sourceLen);

















typedef z_voidp gzFile;

extern gzFile  gzopen  (const char *path, const char *mode);
















extern gzFile  gzdopen  (int fd, const char *mode);












extern int  gzsetparams (gzFile file, int level, int strategy);







extern int     gzread  (gzFile file, z_voidp buf, unsigned len);







extern int     gzwrite (gzFile file, voidpc buf, unsigned len);






extern int    gzprintf (gzFile file, const char *format, ...);












extern int  gzputs (gzFile file, const char *s);






extern char *  gzgets (gzFile file, char *buf, int len);








extern int     gzputc (gzFile file, int c);





extern int     gzgetc (gzFile file);





extern int     gzungetc (int c, gzFile file);









extern int     gzflush (gzFile file, int flush);









extern int     gzseek (gzFile file, int offset, int whence);
















extern int     gzrewind (gzFile file);






extern int     gztell (gzFile file);








extern int  gzeof (gzFile file);





extern int  gzdirect (gzFile file);





extern int     gzclose (gzFile file);






extern const char *  gzerror (gzFile file, int *errnum);








extern void  gzclearerr (gzFile file);






                        







extern z_uLong  z_adler32 (z_uLong adler, const z_Bytef *buf, z_uInt len);















extern z_uLong  adler32_combine (z_uLong adler1, z_uLong adler2, int len2);







extern z_uLong  z_crc32   (z_uLong crc, const z_Bytef *buf, z_uInt len);















extern z_uLong  crc32_combine (z_uLong crc1, z_uLong crc2, int len2);










                        




extern int  z_deflateInit_ (z_streamp strm, int level, const char *version, int stream_size);
extern int  z_inflateInit_ (z_streamp strm, const char *version, int stream_size);
extern int  z_deflateInit2_ (z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size);
extern int  z_inflateInit2_ (z_streamp strm, int windowBits, const char *version, int stream_size);
extern int  inflateBackInit_ (z_streamp strm, int windowBits, unsigned char  *window, const char *version, int stream_size);















    struct internal_state {int dummy;}; 


extern const char   *  z_zError           (int);
extern int             z_inflateSyncPoint (z_streamp z);
extern const z_uLongf *  z_get_crc_table    (void);


}






extern "C" {
z_voidpf zcalloc (z_voidpf, unsigned, unsigned);
void  zcfree (z_voidpf, z_voidpf);
}

class  ON_CompressedBuffer
{
public:
  ON_CompressedBuffer();
  ~ON_CompressedBuffer();
  ON_CompressedBuffer(const ON_CompressedBuffer& src);
  ON_CompressedBuffer& operator=(const ON_CompressedBuffer& src);

  















  bool Compress(
          size_t sizeof__inbuffer,  
          const void* inbuffer,     
          int sizeof_element
          );

  



  size_t SizeOfUncompressedBuffer() const;

  













  bool Uncompress( 
          void* outbuffer,           
          int* bFailedCRC
          ) const;

  




  void Destroy();

  bool Write( ON_BinaryArchive& binary_archive ) const;
  bool Read( ON_BinaryArchive& binary_archive );

  
  
  
  
  bool CompressionInit( struct ON_CompressedBufferHelper* ) const;
  bool CompressionEnd( struct ON_CompressedBufferHelper* ) const;
  size_t DeflateHelper( 
        struct ON_CompressedBufferHelper*,
        size_t sizeof___inbuffer,  
        const void* in___buffer     
        );
  bool InflateHelper(
        struct ON_CompressedBufferHelper*,
        size_t sizeof___outbuffer,  
        void* out___buffer          
        ) const;
  bool WriteChar( 
        size_t count, 
        const void* buffer 
        );

  size_t     m_sizeof_uncompressed;
  size_t     m_sizeof_compressed;
  ON__UINT32 m_crc_uncompressed;
  ON__UINT32 m_crc_compressed;
  int        m_method; 
  int        m_sizeof_element;
  size_t     m_buffer_compressed_capacity;
  void*      m_buffer_compressed;
};























































































struct ON_RTreeBBox
{
  double m_min[3];
  double m_max[3];
};

struct ON_RTreeSphere
{
  double m_point[3];
  double m_radius;
};

struct ON_RTreeCapsule
{
  double m_point[2][3];
  double m_radius;
  double m_domain[2];
};

struct ON_RTreeBranch
{
  ON_RTreeBBox m_rect;

  
  
  union
  {
    struct ON_RTreeNode* m_child;
    ON__INT_PTR m_id;
  };
};

struct ON_RTreeLeaf
{
  ON_RTreeBBox m_rect;
  ON__INT_PTR m_id;
};




struct ON_RTreeNode
{
  inline bool IsInternalNode() const
    { return (m_level > 0); }  
  inline bool IsLeaf() const
    { return (m_level == 0); } 

  
  int m_level;  

  
  
  
  int m_count; 
  ON_RTreeBranch m_branch[6];
};

struct ON_RTreeSearchResult
{
  int m_capacity;   
  int m_count;      
  ON__INT_PTR* m_id; 
};

class  ON_RTreeMemPool
{
public:
  ON_RTreeMemPool( void* heap, size_t leaf_count );
  ~ON_RTreeMemPool();

  ON_RTreeNode* AllocNode();
  void FreeNode(ON_RTreeNode* node);

  struct ON_RTreeListNode* AllocListNode();
  void FreeListNode(struct ON_RTreeListNode* list_node);

  void DeallocateAll();

  



  size_t SizeOf() const;

  



  size_t SizeOfUnusedBuffer() const;

private:
  void GrowBuffer();

  struct Blk
  {
    struct Blk* m_next;
  };

  
  struct Blk* m_nodes;
  
  struct Blk* m_list_nodes;

  
  unsigned char* m_buffer;
  size_t m_buffer_capacity;

  struct Blk* m_blk_list;   
  size_t m_sizeof_blk;      

  void* m_heap;
  size_t m_sizeof_heap; 
};








class  ON_RTreeIterator
{
public:
  












  ON_RTreeIterator();
  ON_RTreeIterator(const class ON_RTree& a_rtree);

  ~ON_RTreeIterator();

  


















  bool Initialize(const class ON_RTree& a_rtree);

  


















  bool Initialize(const struct ON_RTreeNode* a_node);

  










  const ON_RTreeBranch* Value() const;

  























  bool First();

  











  bool Next();


  





















  bool Last();

  











  bool Prev();

private:
  enum { MAX_STACK = 32 }; 
  
  struct StackElement
  {
    const struct ON_RTreeNode* m_node;
    int m_branchIndex; 
  };

  bool PushChildren(struct StackElement* sp, bool bFirstChild);

  StackElement  m_stack[MAX_STACK]; 
  StackElement* m_sp;               
  const ON_RTreeNode* m_root;       
};


class  ON_RTree
{
public:
  ON_RTree( void* heap = 0, size_t leaf_count = 0 );
  ~ON_RTree();

  








  bool CreateMeshFaceTree( const class ON_Mesh* mesh );
  
  


















  bool Insert(const double a_min[3], const double a_max[3], void* a_element_id);
  bool Insert(const double a_min[3], const double a_max[3], int a_element_id);
  bool Insert2d(const double a_min[2], const double a_max[2], void* a_element_id);
  bool Insert2d(const double a_min[2], const double a_max[2], int a_element_id);
  
  


















  bool Remove(const double a_min[3], const double a_max[3], void* a_elementId);
  bool Remove(const double a_min[3], const double a_max[3], int a_elementId);
  bool Remove2d(const double a_min[2], const double a_max[2], void* a_elementId);
  bool Remove2d(const double a_min[2], const double a_max[2], int a_elementId);
  
  



  void RemoveAll();

  











































  bool Search( 
    ON_RTreeSphere* a_sphere,
    bool __cdecl resultCallback(void* a_context, ON__INT_PTR a_id), 
    void* a_context
    ) const;

  bool Search( 
    ON_RTreeCapsule* a_capsule,
    bool __cdecl resultCallback(void* a_context, ON__INT_PTR a_id), 
    void* a_context
    ) const;

  bool Search( 
    ON_RTreeBBox* a_rect,
    bool __cdecl resultCallback(void* a_context, ON__INT_PTR a_id), 
    void* a_context
    ) const;

  




















  bool Search(
    const double a_plane_eqn[4],
    double a_min,
    double a_max,
    bool __cdecl resultCallback(void* a_context, ON__INT_PTR a_id), 
    void* a_context
    ) const;

  bool Search(const double a_min[3], const double a_max[3],
    bool __cdecl resultCallback(void* a_context, ON__INT_PTR a_id), void* a_context 
    ) const;

	bool Search(const double a_min[3], const double a_max[3],
    ON_RTreeSearchResult& a_result 
    ) const;

	bool Search(const double a_min[3], const double a_max[3],
    ON_SimpleArray<ON_RTreeLeaf>& a_result 
    ) const;

  bool Search(const double a_min[3], const double a_max[3],
    ON_SimpleArray<void*>& a_result 
    ) const;

  bool Search(const double a_min[3], const double a_max[3],
    ON_SimpleArray<int>& a_result 
    ) const;

  bool Search2d(const double a_min[2], const double a_max[2],
    bool __cdecl resultCallback(void* a_context, ON__INT_PTR a_id), void* a_context
    ) const;

	bool Search2d(const double a_min[2], const double a_max[2],
    ON_RTreeSearchResult& a_result
    ) const;

	bool Search2d(const double a_min[2], const double a_max[2],
    ON_SimpleArray<ON_RTreeLeaf>& a_result
    ) const;

  bool Search2d(const double a_min[2], const double a_max[2],
    ON_SimpleArray<void*>& a_result
    ) const;

  bool Search2d(const double a_min[2], const double a_max[2],
    ON_SimpleArray<int>& a_result
    ) const;

  













  static bool Search( 
          const ON_RTree& a_rtreeA,
          const ON_RTree& a_rtreeB, 
          double tolerance,
          ON_SimpleArray<ON_2dex>& a_result
          );

  














  static bool Search( 
          const ON_RTree& a_rtreeA,
          const ON_RTree& a_rtreeB, 
          double tolerance,
          void __cdecl resultCallback(void* a_context, ON__INT_PTR a_idA, ON__INT_PTR a_idB),
          void* a_context
          );

  















  static bool Search( 
          const ON_RTree& a_rtreeA,
          const ON_RTree& a_rtreeB, 
          double tolerance,
          bool __cdecl resultCallback(void* a_context, ON__INT_PTR a_idA, ON__INT_PTR a_idB),
          void* a_context
          );
  







  int ElementCount();

  



  const ON_RTreeNode* Root() const;
  
  



  ON_BoundingBox BoundingBox() const;

  



  size_t SizeOf() const;

private:
  void SplitNode(ON_RTreeNode*, ON_RTreeBranch*, ON_RTreeNode**);
  bool AddBranch(ON_RTreeBranch*, ON_RTreeNode*, ON_RTreeNode**);
  bool InsertRectRec(ON_RTreeBBox*, ON__INT_PTR, ON_RTreeNode*, ON_RTreeNode**, int);
  bool InsertRect(ON_RTreeBBox*, ON__INT_PTR, ON_RTreeNode**, int);
  void LoadNodes(ON_RTreeNode*, ON_RTreeNode*, struct ON_RTreePartitionVars*);
  bool RemoveRect(ON_RTreeBBox*, ON__INT_PTR, ON_RTreeNode**);
  bool RemoveRectRec(ON_RTreeBBox*, ON__INT_PTR, ON_RTreeNode*, struct ON_RTreeListNode**);
  void ReInsert(ON_RTreeNode*, struct ON_RTreeListNode**);
  void RemoveAllRec(ON_RTreeNode*);
  ON_RTreeNode* m_root;
  size_t m_reserved;
  ON_RTreeMemPool m_mem_pool;
};





































class  ON_MappingChannel
{
public:
  ON_MappingChannel();
  void Default();
  int Compare( const ON_MappingChannel& other ) const;
  bool Write( ON_BinaryArchive& archive ) const;
  bool Read( ON_BinaryArchive& archive );

  ON_UUID m_mapping_id;  

  
  
  int m_mapping_index;

  
  
  
  int m_mapping_channel_id;

  
  
  
  
  
  
  
  
  
  
  ON_Xform m_object_xform;
};

























class  ON_MappingRef
{
public:
  ON_MappingRef();
  void Default();
  int Compare( const ON_MappingRef& other ) const;
  bool Write( ON_BinaryArchive& archive ) const;
  bool Read( ON_BinaryArchive& archive );

  bool IsValid( ON_TextLog* text_log ) const;


  bool Transform( const ON_Xform& xform );

  ON_UUID m_plugin_id;   

  








  const ON_MappingChannel* MappingChannel( 
    int mapping_channel_id
    ) const;

  const ON_MappingChannel* MappingChannel( 
    const ON_UUID& mapping_id
    ) const;


  










  bool AddMappingChannel(
    int mapping_channel_id,
    const ON_UUID& mapping_id
    );

  







  bool DeleteMappingChannel(
    int mapping_channel_id
    );

  bool DeleteMappingChannel(
    const ON_UUID& mapping_id
    );

  






  bool ChangeMappingChannel(
    int old_mapping_channel_id,
    int new_mapping_channel_id
    );

  
  
  
  
  
  ON_SimpleArray<ON_MappingChannel> m_mapping_channels;
};

class  ON_MaterialRef
{
public:
  
  
  
  

  
  
  
  

  ON_MaterialRef();
  void Default();
  int Compare( const ON_MaterialRef& other ) const;
  bool Write( ON_BinaryArchive& archive ) const;
  bool Read( ON_BinaryArchive& archive );

  ON_UUID m_plugin_id;   

  ON_UUID m_material_id; 
  
  
  ON_UUID m_material_backface_id; 

  ON::object_material_source MaterialSource() const;
  unsigned char m_material_source; 
  unsigned char m_reserved1;
  unsigned char m_reserved2;
  unsigned char m_reserved3;

  
  
  
  int m_material_index;

  
  
  
  int m_material_backface_index;
};





































class  ON_RenderingAttributes
{
public:
  ON_RenderingAttributes();
  void Default();
  int Compare( const ON_RenderingAttributes& other ) const;
  bool Write( ON_BinaryArchive& archive ) const;
  bool Read( ON_BinaryArchive& archive );

  bool IsValid( ON_TextLog* text_log ) const;


  const ON_MaterialRef* MaterialRef( const ON_UUID& plugin_id ) const;

  ON_ClassArray<ON_MaterialRef> m_materials;
};

class  ON_ObjectRenderingAttributes : public ON_RenderingAttributes
{
public:
  ON_ObjectRenderingAttributes();
  void Default();
  int Compare( const ON_ObjectRenderingAttributes& other ) const;
  bool Write( ON_BinaryArchive& archive ) const;
  bool Read( ON_BinaryArchive& archive );

  bool IsValid( ON_TextLog* text_log ) const;

  









  bool Transform( const ON_Xform& xform );

  






  const ON_MappingRef* MappingRef( 
    const ON_UUID& plugin_id 
    ) const;

  






  ON_MappingRef* AddMappingRef( 
    const ON_UUID& plugin_id 
    );

  






  bool DeleteMappingRef( 
    const ON_UUID& plugin_id 
    );


  









  const ON_MappingChannel* MappingChannel( 
    const ON_UUID& plugin_id, 
    int mapping_channel_id
    ) const;

  const ON_MappingChannel* MappingChannel( 
    const ON_UUID& plugin_id, 
    const ON_UUID& mapping_id
    ) const;


  











  bool AddMappingChannel(
    const ON_UUID& plugin_id, 
    int mapping_channel_id,
    const ON_UUID& mapping_id
    );

  








  bool DeleteMappingChannel(
    const ON_UUID& plugin_id, 
    int mapping_channel_id
    );

  bool DeleteMappingChannel(
    const ON_UUID& plugin_id, 
    const ON_UUID& mapping_id
    );

  







  bool ChangeMappingChannel(
    const ON_UUID& plugin_id, 
    int old_mapping_channel_id,
    int new_mapping_channel_id
    );

  
  
  
  
  
  ON_ClassArray<ON_MappingRef> m_mappings;

  












  void EnableAdvancedTexturePreview(bool b);

  



  bool AdvancedTexturePreview() const;

  bool m_bCastsShadows;    
  bool m_bReceivesShadows; 

private:
  
  unsigned char m_bits; 

  unsigned char m_reserved1;
};




































class  ON_FileStream
{
public:
  










  static FILE* Open( const wchar_t* filename, const wchar_t* mode );

  










  static FILE* Open( const char* filename, const char* mode );
  
  










  static int Close( FILE* fp );

  









  static ON__INT64 CurrentPosition( FILE* fp );

  







  static bool SeekFromCurrentPosition( FILE* fp, ON__INT64 offset );

  







  static bool SeekFromStart( FILE* fp, ON__INT64 offset );

  







  static bool SeekFromEnd( FILE* fp, ON__INT64 offset );

  











  static bool Seek( FILE* fp, ON__INT64 offset, int orgin );

  












  static ON__UINT64 Read( FILE* fp, ON__UINT64 count, void* buffer );

  












  static ON__UINT64 Write( FILE* fp, ON__UINT64 count, const void* buffer );

  








  static bool Flush( FILE* fp );

  



















  static bool GetFileInformation( 
    FILE* fp,
    ON__UINT64* file_size,
    ON__UINT64* file_create_time,
    ON__UINT64* file_last_modified_time
    );
};

class  ON_FileIterator
{
public:
  ON_FileIterator();
  ~ON_FileIterator();
  void Destroy();

  











































  const wchar_t* FirstFile( 
    const wchar_t* directory_name, 
    const wchar_t* file_name_filter
    );

  const wchar_t* FirstFile( 
    const char* directory_name, 
    const char* file_name_filter
    );

  





  const wchar_t* NextFile();

  const wchar_t* CurrentFileName() const;

  ON__UINT64 CurrentFileSize() const;

  



  bool CurrentFileIsDirectory() const;

  





  bool CurrentFileIsHidden() const;

  bool GetCurrentFullPathFileName( ON_wString& filename ) const;

  



  ON__UINT64 CurrentFileCreateTime() const;

  



  ON__UINT64 CurrentFileLastModifiedTime() const;

  



  ON__UINT64 CurrentFileLastAccessTime() const;

  



  ON__UINT64 Count() const;

private:
  
  ON__UINT64 m_count;
  ON_wString m_directory;


  ON__UINT32 m_file_attributes_mask;
  HANDLE m_h;
  WIN32_FIND_DATA m_fd;















};







typedef void (*ON_Buffer_ErrorHandler)(class ON_Buffer*);

class  ON_Buffer
{
public:
  ON_Buffer();
  ~ON_Buffer();

  ON_Buffer(const ON_Buffer& src);
  ON_Buffer& operator=(const ON_Buffer& src);

  










  static int Compare( const ON_Buffer& a, const ON_Buffer& b );

  void Destroy();
  void EmergencyDestroy();

  







  bool AtEnd() const;

  








  ON__UINT64 Size() const;

  





  ON__UINT32 CRC32( ON__UINT32 current_remainder ) const;


  








  ON__UINT64 CurrentPosition() const;
  
  








  ON__UINT64 Write( ON__UINT64 size, const void* buffer );

  


















  ON__UINT64 Read( ON__UINT64 size, void* buffer );

  enum
  {
    seek_from_beginning_of_file = 0,
    seek_from_current_position = 1,
    seek_from_end_of_file = 2
  };

  

















  bool Seek( 
    ON__INT64 offset, 
    int origin 
    );

  












  bool SeekFromStart( ON__INT64 offset ); 

  












  bool SeekFromCurrentPosition( ON__INT64 offset ); 

  












  bool SeekFromEnd( ON__INT64 offset ); 

  










  bool ChangeSize( ON__UINT64 buffer_size );

  










  bool Compact();

  



  bool IsValid( const ON_TextLog* text_log ) const;

  





  ON__UINT32 LastError() const;
  
  void ClearLastError();

  ON_Buffer_ErrorHandler ErrorHandler() const;
  
  void SetErrorHandler(ON_Buffer_ErrorHandler error_handler);

  





  bool WriteToBinaryArchive( ON_BinaryArchive& ) const;

  




  bool ReadFromBinaryArchive( ON_BinaryArchive& );

  
























  bool Compress( ON_Buffer& compressed_buffer ) const;

  

























  bool Uncompress( ON_Buffer& uncompressed_buffer ) const;

private:

  ON__UINT64 m_buffer_size; 
  ON__UINT64 m_current_position;

  struct ON_BUFFER_SEGMENT* m_first_segment;
  struct ON_BUFFER_SEGMENT* m_last_segment;
  struct ON_BUFFER_SEGMENT* m_current_segment;
  bool SetCurrentSegment(bool);
  void Copy( const ON_Buffer& );

  void* m_heap;
  ON_Buffer_ErrorHandler m_error_handler;

  ON__UINT32 m_last_error;
  unsigned char m_reserved[12];
};











class ON_Object;
class ON_Group;
class ON_Font;
class ON_DimStyle;
class ON_Arc;
class ON_ObjectAttributes;
class ON_InstanceDefinition;
class ON_HatchPattern;
class ON_Linetype;

struct ON_3DM_CHUNK
{
  size_t m_offset; 
                   
                   
                   
  unsigned int m_typecode;
  int m_value;
  int m_do_length; 
  ON__UINT16 m_do_crc16; 
  ON__UINT16 m_crc16;
  ON__UINT32 m_do_crc32; 
  ON__UINT32 m_crc32;
};

struct ON_3DM_BIG_CHUNK
{
  ON__UINT64 m_big_offset; 
                           
                           
                           

  ON__UINT64 Length() const; 

  ON__INT64 m_big_value;
  ON__UINT32 m_typecode;

  ON__UINT8 m_bLongChunk; 
  ON__UINT8 m_reserved1;
  ON__UINT8 m_reserved2;
  ON__UINT8 m_reserved3;

  
  ON__UINT8 m_do_crc16; 
  ON__UINT8 m_do_crc32; 
  ON__UINT16 m_crc16; 
  ON__UINT32 m_crc32; 
};

bool ON_IsLongChunkTypecode(ON__UINT32 typecode);

bool ON_IsShortChunkTypecode(ON__UINT32 typecode);












class ON_Light;
class ON_Bitmap;
class ON_TextureMapping;
class ON_Material;
class ON_Layer;
class ON_3dmProperties;
class ON_3dmSettings;
class ON_3dmObjectAttributes;
class ON_3dmGoo;

class ON_BinaryArchive;



void ON_SetBinaryArchiveOpenNURBSVersion(ON_BinaryArchive&,int);

class  ON_BinaryArchive 
{
public:
  ON_BinaryArchive( ON::archive_mode );
  virtual ~ON_BinaryArchive();

  virtual 
  size_t CurrentPosition( 
                ) const = 0; 
  virtual 
  bool SeekFromCurrentPosition( 
                int 
                ) = 0; 
  virtual 
  bool SeekFromStart(  
                size_t 
                ) = 0;
  virtual 
  bool AtEnd() const = 0; 

  bool BigSeekFromStart( ON__UINT64 offset );
  bool BigSeekForward( ON__UINT64 offset );
  bool BigSeekBackward( ON__UINT64 offset );
  bool BigSeekFromCurrentPosition( ON__INT64 offset );

  








  static
  bool ToggleByteOrder(
    int, 
    int, 
    const void*,  
    void*         
    );

  static
  const char* TypecodeName( unsigned int tcode );

  static
  char* ON_TypecodeParse( unsigned int tcode, char* typecode_name, size_t max_length );

  bool ReadMode() const;  
  bool WriteMode() const; 
  
  





  ON::endian Endian() const; 

  int BadCRCCount() const; 

  bool ReadByte( size_t, void* ); 

  bool WriteByte( size_t, const void* ); 

  









  ON__UINT64 ReadBuffer( ON__UINT64 sizeof_buffer, void* buffer );

  











  bool EnableCRCCalculation( bool bEnable );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  


  







  bool ReadCompressedBufferSize( size_t* sizeof__outbuffer );

  




















  bool ReadCompressedBuffer(
          size_t sizeof__outbuffer,
          void* outbuffer,
          int* bFailedCRC
          );

  








  bool WriteCompressedBuffer(
    size_t sizeof__inbuffer,
    const void* inbuffer
    );

  bool ReadBool( bool* );

	bool ReadChar(    
			size_t,       
			char*    
			);  
	bool ReadChar(    
			size_t,       
			unsigned char*    
			);  
	bool ReadChar(    
			char*    
			);  
	bool ReadChar(    
			unsigned char*    
			);  

	bool ReadShort(   
			size_t,       
			short*    
			);  
	bool ReadShort(   
			size_t,       
			unsigned short*    
			);  
	bool ReadShort(   
			short*    
			);  
	bool ReadShort(   
			unsigned short*    
			);  

	bool ReadInt( 
			size_t,	      
			int*      
			); 
	bool ReadInt( 
			size_t,	      
			unsigned int*      
			); 
	bool ReadInt( 
			int*      
			); 
	bool ReadInt( 
			unsigned int*      
			); 

	bool ReadBigInt( 
			size_t,	      
			ON__INT64*      
			); 
	bool ReadBigInt( 
			size_t,	      
			ON__UINT64*      
			); 
	bool ReadBigInt( 
			ON__INT64*      
			); 
	bool ReadBigInt( 
			ON__UINT64*      
			); 

	bool ReadLong( 
			size_t,	      
			long*      
			); 
	bool ReadLong( 
			size_t,	      
			unsigned long*      
			); 
	bool ReadLong( 
			long*      
			); 
	bool ReadLong( 
			unsigned long*      
			); 
	bool ReadSize( 
			size_t*
			); 

  bool ReadBigSize( size_t* ); 
  
  bool ReadBigTime( time_t* ); 


	bool ReadFloat(   
			size_t,       
			float*
			);
	bool ReadFloat(   
			float*
			);
	bool ReadDouble(  
			size_t,       
			double*
			);
	bool ReadDouble(  
			double*
			);

  bool ReadColor(
    ON_Color&
    );

  bool ReadPoint (
    ON_2dPoint&
    );
  bool ReadPoint (
    ON_3dPoint&
    );
  bool ReadPoint (
    ON_4dPoint&
    );
  bool ReadVector (
    ON_2dVector&
    );
  bool ReadVector (
    ON_3dVector&
    );

  bool ReadBoundingBox(ON_BoundingBox&);

  bool ReadXform(ON_Xform&);

  bool ReadPlaneEquation(ON_PlaneEquation&);

  bool ReadPlane(ON_Plane&);

  bool ReadLine(ON_Line&);

  bool ReadArc(ON_Arc&);

  bool ReadCircle(ON_Circle&);

  bool ReadInterval( ON_Interval& );

  bool ReadUuid( ON_UUID& );

  bool ReadDisplayMaterialRef( ON_DisplayMaterialRef& );

  bool ReadLinetypeSegment( ON_LinetypeSegment& );

  
  
  bool ReadTime( struct tm& );

  











  __declspec(deprecated) bool ReadStringSize(
      size_t* str_array_count
      );

  








  bool ReadStringUTF8ElementCount(
    size_t* string_utf8_element_count
    );

  








  bool ReadStringUTF16ElementCount(
    size_t* string_utf16_element_count
    );


  












  bool ReadString(
      size_t str_array_count,
      char* str_array
      );

  












  bool ReadString(
      size_t str_array_count,
      unsigned char* str_array
      );

  












  bool ReadString(
      size_t str_array_count,
      unsigned short*  str_array
      );

  bool ReadString( ON_String& sUTF8 );

  bool ReadString( ON_wString& s );

  bool ReadComponentIndex( ON_COMPONENT_INDEX& );

  bool ReadArray( ON_SimpleArray<bool>& );
  bool ReadArray( ON_SimpleArray<char>& );
  bool ReadArray( ON_SimpleArray<short>& );
  bool ReadArray( ON_SimpleArray<int>& );
  bool ReadArray( ON_SimpleArray<float>& );
  bool ReadArray( ON_SimpleArray<double>& );
  bool ReadArray( ON_SimpleArray<ON_Color>& );
  bool ReadArray( ON_SimpleArray<ON_2dPoint>& );
  bool ReadArray( ON_SimpleArray<ON_3dPoint>& );
  bool ReadArray( ON_SimpleArray<ON_4dPoint>& );
  bool ReadArray( ON_SimpleArray<ON_2dVector>& );
  bool ReadArray( ON_SimpleArray<ON_3dVector>& );
  bool ReadArray( ON_SimpleArray<ON_Xform>& );
  bool ReadArray( ON_SimpleArray<ON_2fPoint>& );
  bool ReadArray( ON_SimpleArray<ON_3fPoint>& );
  bool ReadArray( ON_SimpleArray<ON_4fPoint>& );
  bool ReadArray( ON_SimpleArray<ON_2fVector>& );
  bool ReadArray( ON_SimpleArray<ON_3fVector>& );
  bool ReadArray( ON_SimpleArray<ON_UUID>& );
  bool ReadArray( ON_SimpleArray<ON_UuidIndex>& );
  bool ReadArray( ON_SimpleArray<ON_SurfaceCurvature>& );
  bool ReadArray( ON_ClassArray<ON_String>& );
  bool ReadArray( ON_ClassArray<ON_wString>& );
  bool ReadArray( ON_SimpleArray<ON_DisplayMaterialRef>& );
  bool ReadArray( ON_SimpleArray<ON_LinetypeSegment>& );  
  bool ReadArray( ON_SimpleArray<ON_MappingChannel>& );
  bool ReadArray( ON_ClassArray<ON_MaterialRef>& );
  bool ReadArray( ON_ClassArray<ON_MappingRef>& );
  bool ReadArray( ON_ClassArray<class ON_ObjRef>& );
  bool ReadArray( ON_SimpleArray<class ON_ObjRef_IRefID>& );
  bool ReadArray( ON_SimpleArray<class ON_ClippingPlaneInfo>& );
  bool ReadArray( ON_ObjectArray<class ON_Layer>& );
  bool ReadArray( ON_SimpleArray<class ON_Layer*>& );

  bool WriteBool( bool );

  bool WriteChar(    
			size_t,       
			const char*    
			);  
	bool WriteChar(    
			size_t,       
			const unsigned char*    
			);  
	bool WriteChar(    
			char
			);  
	bool WriteChar(    
			unsigned char
			);  

	bool WriteShort(   
			size_t,       
			const short*    
			);  
	bool WriteShort(   
			size_t,       
			const unsigned short*    
			);  
	bool WriteShort(   
			short
			);  
	bool WriteShort(   
			unsigned short
			);  

	bool WriteInt( 
			size_t,	      
			const int*      
			); 
	bool WriteInt( 
			size_t,	      
			const unsigned int*      
			); 
	bool WriteInt( 
			int    
			); 
	bool WriteInt( 
			unsigned int
			); 

	bool WriteBigInt( 
			size_t,	      
			const ON__INT64*      
			); 
	bool WriteBigInt( 
			size_t,	      
			const ON__UINT64*      
			); 
	bool WriteBigInt( 
			ON__INT64    
			); 
	bool WriteBigInt( 
			ON__UINT64
			); 

	bool WriteLong( 
			size_t,	      
			const long*      
			); 
	bool WriteLong( 
			size_t,	      
			const unsigned long*      
			); 
	bool WriteLong( 
			long    
			); 
	bool WriteLong( 
			unsigned long
			); 
	bool WriteSize( 
			size_t
			); 

  bool WriteBigSize( size_t ); 
  
  bool WriteBigTime( time_t ); 

	bool WriteFloat(   
			size_t,       
			const float*
			);
	bool WriteFloat(   
			float
			);
	bool WriteDouble(  
      size_t,
			const double*
			);
	bool WriteDouble(  
			double
			);

  bool WriteColor (
    const ON_Color&
    );

  bool WritePoint (
    const ON_2dPoint&
    );
  bool WritePoint (
    const ON_3dPoint&
    );
  bool WritePoint (
    const ON_4dPoint&
    );
  bool WriteVector (
    const ON_2dVector&
    );
  bool WriteVector (
    const ON_3dVector&
    );

  bool WriteBoundingBox(const ON_BoundingBox&);

  bool WriteXform(const ON_Xform&);

  bool WritePlaneEquation(const ON_PlaneEquation&);

  bool WritePlane(const ON_Plane&);

  bool WriteLine(const ON_Line&);

  bool WriteArc(const ON_Arc&);

  bool WriteCircle(const ON_Circle&);

  bool WriteInterval( const ON_Interval& );

  bool WriteUuid( const ON_UUID& );

  bool WriteDisplayMaterialRef( const ON_DisplayMaterialRef& );

  bool WriteLinetypeSegment( const ON_LinetypeSegment& );

  
  
  bool WriteTime( const struct tm& );

  

















  bool WriteString(
      const char* sUTF8         
      );

  

















  bool WriteString(
      const unsigned char* sUTF8
      );

  

















  bool WriteString(
      const unsigned short* sUTF16
      );
  
  bool WriteString( const ON_String& sUTF8 );

  bool WriteString( const ON_wString& s);

  bool WriteComponentIndex( const ON_COMPONENT_INDEX& );

  bool WriteArray( const ON_SimpleArray<bool>& );
  bool WriteArray( const ON_SimpleArray<char>& );
  bool WriteArray( const ON_SimpleArray<short>& );
  bool WriteArray( const ON_SimpleArray<int>& );
  bool WriteArray( const ON_SimpleArray<float>& );
  bool WriteArray( const ON_SimpleArray<double>& );

  bool WriteArray( const ON_SimpleArray<ON_Color>& );

  bool WriteArray( const ON_SimpleArray<ON_2dPoint>& );
  bool WriteArray( const ON_SimpleArray<ON_3dPoint>& );
  bool WriteArray( const ON_SimpleArray<ON_4dPoint>& );
  bool WriteArray( const ON_SimpleArray<ON_2dVector>& );
  bool WriteArray( const ON_SimpleArray<ON_3dVector>& );

  bool WriteArray( const ON_SimpleArray<ON_2fPoint>& );
  bool WriteArray( const ON_SimpleArray<ON_3fPoint>& );
  bool WriteArray( const ON_SimpleArray<ON_4fPoint>& );
  bool WriteArray( const ON_SimpleArray<ON_2fVector>& );
  bool WriteArray( const ON_SimpleArray<ON_3fVector>& );
  bool WriteArray( const ON_SimpleArray<ON_Xform>& );
  bool WriteArray( const ON_SimpleArray<ON_UUID>& );
  bool WriteArray( const ON_SimpleArray<ON_UuidIndex>& );
  bool WriteArray( const ON_SimpleArray<ON_SurfaceCurvature>& );
  bool WriteArray( const ON_ClassArray<ON_String>& );
  bool WriteArray( const ON_ClassArray<ON_wString>& );
  bool WriteArray( const ON_SimpleArray<ON_DisplayMaterialRef>& );
  bool WriteArray( const ON_SimpleArray<ON_LinetypeSegment>& );  
  bool WriteArray( const ON_SimpleArray<ON_MappingChannel>& );
  bool WriteArray( const ON_ClassArray<ON_MaterialRef>& );
  bool WriteArray( const ON_ClassArray<ON_MappingRef>& );
  bool WriteArray( const ON_ClassArray<class ON_ObjRef>& );
  bool WriteArray( const ON_SimpleArray<class ON_ObjRef_IRefID>& );
  bool WriteArray( const ON_SimpleArray<class ON_ClippingPlaneInfo>& );
  bool WriteArray( int count, const class ON_Layer* );
  bool WriteArray( int count, const class ON_Layer*const* );

  
  
  
  

  












  int ReadObject( 
         ON_Object** ppObject
         );


  












  int ReadObject( 
         ON_Object& object
         );

  bool WriteObject( const ON_Object* ); 
  bool WriteObject( const ON_Object& ); 


  
  
  
  
  
  
  
  
  bool EnableSave3dmRenderMeshes( ON_BOOL32 = true ); 
  bool Save3dmRenderMeshes() const;

  bool EnableSave3dmAnalysisMeshes( ON_BOOL32 = true ); 
  bool Save3dmAnalysisMeshes() const;
  
  bool EnableSaveUserData( ON_BOOL32 = true ); 
  bool SaveUserData() const;
  
  







  static int CurrentArchiveVersion();

  
  
  

  


















  bool Write3dmStartSection( 
        int version,
        const char* sStartSectionComment
        );

  






  bool Read3dmStartSection( 
        int* version,
        ON_String& sStartSectionComment
        );

  
  
  
  bool Write3dmProperties(
        const ON_3dmProperties&
        );
  bool Read3dmProperties(
        ON_3dmProperties&
        );

  
  
  
  bool Write3dmSettings(
        const ON_3dmSettings&
        );
  bool Read3dmSettings(
        ON_3dmSettings&
        );

  
  
  
  bool BeginWrite3dmBitmapTable();
  bool Write3dmBitmap( const ON_Bitmap& );
  bool EndWrite3dmBitmapTable();

  bool BeginRead3dmBitmapTable();
  int  Read3dmBitmap(   
                        
            ON_Bitmap** 
            );
  bool EndRead3dmBitmapTable();

  
  
  
  bool BeginWrite3dmTextureMappingTable();
  bool Write3dmTextureMapping( const ON_TextureMapping& );
  bool EndWrite3dmTextureMappingTable();

  bool BeginRead3dmTextureMappingTable();
  int  Read3dmTextureMapping( 
            ON_TextureMapping** 
            );
  bool EndRead3dmTextureMappingTable();

  
  
  
  bool BeginWrite3dmMaterialTable();
  bool Write3dmMaterial( const ON_Material& );
  bool EndWrite3dmMaterialTable();

  bool BeginRead3dmMaterialTable();
  int  Read3dmMaterial( 
            ON_Material** 
            );
  bool EndRead3dmMaterialTable();

  
  
  
  bool BeginWrite3dmLinetypeTable();
  bool Write3dmLinetype( const ON_Linetype&);
  bool EndWrite3dmLinetypeTable();

  bool BeginRead3dmLinetypeTable();
  int  Read3dmLinetype(ON_Linetype**);
  bool EndRead3dmLinetypeTable();

  
  
  
  bool BeginWrite3dmLayerTable();
  bool Write3dmLayer( const ON_Layer& );
  bool EndWrite3dmLayerTable();

  bool BeginRead3dmLayerTable();
  int  Read3dmLayer( 
            ON_Layer** 
            );
  bool EndRead3dmLayerTable();

  
  
  
  bool BeginWrite3dmGroupTable();
  bool Write3dmGroup( const ON_Group& );
  bool EndWrite3dmGroupTable();

  bool BeginRead3dmGroupTable();

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int  Read3dmGroup(
            ON_Group** 
            );

  bool EndRead3dmGroupTable();


  
  
  
  bool BeginWrite3dmFontTable();
  bool Write3dmFont( const ON_Font& );
  bool EndWrite3dmFontTable();

  bool BeginRead3dmFontTable();

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int Read3dmFont(
            ON_Font** 
            );

  bool EndRead3dmFontTable();


  
  
  
  bool BeginWrite3dmDimStyleTable();
  bool Write3dmDimStyle( const ON_DimStyle& );
  bool EndWrite3dmDimStyleTable();

  bool BeginRead3dmDimStyleTable();

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int Read3dmDimStyle(
            ON_DimStyle** 
            );

  bool EndRead3dmDimStyleTable();


  
  
  
  bool BeginWrite3dmLightTable();
  bool Write3dmLight( const ON_Light&,
         const ON_3dmObjectAttributes* 
         );
  bool EndWrite3dmLightTable();

  bool BeginRead3dmLightTable();
  int  Read3dmLight(  
                      
                      
            ON_Light**, 
            ON_3dmObjectAttributes* 
                                    
            );
  bool EndRead3dmLightTable();


  
  
  
  bool BeginWrite3dmHatchPatternTable();
  bool Write3dmHatchPattern( const ON_HatchPattern&);
  bool EndWrite3dmHatchPatternTable();

  bool BeginRead3dmHatchPatternTable();
  int  Read3dmHatchPattern(ON_HatchPattern**);
  bool EndRead3dmHatchPatternTable();

  
  
  
  bool BeginWrite3dmInstanceDefinitionTable();
  bool Write3dmInstanceDefinition( const ON_InstanceDefinition& );
  bool EndWrite3dmInstanceDefinitionTable();

  bool BeginRead3dmInstanceDefinitionTable();

  
































      
  int Read3dmInstanceDefinition(
            ON_InstanceDefinition** 
            );

  bool EndRead3dmInstanceDefinitionTable();

  
  
  
  bool BeginWrite3dmObjectTable();
  bool Write3dmObject( 
         const ON_Object&,
         const ON_3dmObjectAttributes* 
         );
  bool EndWrite3dmObjectTable();

  bool BeginRead3dmObjectTable();
  int  Read3dmObject( 
                      
                      
                      
          ON_Object**, 
          ON_3dmObjectAttributes*, 
                                   
          unsigned int = 0 
          );  
  bool EndRead3dmObjectTable();

  
  
  
  bool BeginWrite3dmHistoryRecordTable();
  bool Write3dmHistoryRecord( 
         const class ON_HistoryRecord&
         );
  bool EndWrite3dmHistoryRecordTable();

  bool BeginRead3dmHistoryRecordTable();

  





  int  Read3dmHistoryRecord(
          class ON_HistoryRecord*&
          );
  bool EndRead3dmHistoryRecordTable();

  
  
  

  





























  bool BeginWrite3dmUserTable(
    const ON_UUID& plugin_id,
    bool bSavingGoo,
    int goo_3dm_version,
    int goo_opennurbs_version
    );

  bool EndWrite3dmUserTable();

  




















  bool Write3dmAnonymousUserTableRecord( 
    const ON_UUID& plugin_id,
    int goo_3dm_version,
    int goo_opennurbs_version,
    const ON_3dmGoo& goo
    );

  
  __declspec(deprecated) bool BeginWrite3dmUserTable( const ON_UUID& );

  
  __declspec(deprecated) bool Write3dmAnonymousUserTable( const ON_3dmGoo& );

  
















  bool BeginRead3dmUserTable(
    ON_UUID& plugin_id,
    bool* bLastSavedAsGoo,
    int* archive_3dm_version,
    int* archive_opennurbs_version
    );

  







  bool Read3dmAnonymousUserTable( 
    int archive_3dm_version,
    int archive_opennurbs_version,
    ON_3dmGoo& goo
    );

  bool EndRead3dmUserTable();

  
  __declspec(deprecated) bool BeginRead3dmUserTable(
    ON_UUID&
    );

  
  __declspec(deprecated) bool Read3dmAnonymousUserTable( ON_3dmGoo& );




  
  
  
  
  
  

  
  
  
  
  
  
  bool Write3dmEndMark();

  
  
  
  
  
  
  
  
  
  
  
  
  
  bool Read3dmEndMark( 
           size_t* 
           );

  
  
  
  
  
  
  

  
  
  
  
  
  
  
  
  
  
  
  
  bool BeginWrite3dmChunk(
        unsigned int, 
        int 
        );

  bool BeginWrite3dmBigChunk(
        ON__UINT32 typecode,
        ON__INT64 value
        );

  












  bool BeginWrite3dmChunk(
        unsigned int tcode,
        int major_version,
        int minor_version
        );


  
  bool EndWrite3dmChunk();

  bool Write3dmGoo( const ON_3dmGoo& ); 

  
  __declspec(deprecated) bool BeginRead3dmChunk(
        unsigned int*,   
        int*             
        );

  
  
  bool BeginRead3dmBigChunk(
        unsigned int*,   
        ON__INT64*       
        );
  












  bool BeginRead3dmChunk(
        unsigned int expected_tcode,
        int* major_version,
        int* minor_version
        );

  








  bool EndRead3dmChunk(); 
  bool EndRead3dmChunk(bool bSupressPartiallyReadChunkWarning); 


  
  
  
  

  



















  bool BeginWriteDictionary(
          ON_UUID dictionary_id,
          unsigned int version,
          const wchar_t* dictionary_name
          );
  















  bool EndWriteDictionary();

  















  bool BeginWriteDictionaryEntry(
          int de_type, 
          const wchar_t* entry_name
          );
  bool EndWriteDictionaryEntry();

  bool BeginReadDictionary(
          ON_UUID* dictionary_id,
          unsigned int* version,
          ON_wString& dictionary_name
          );
  bool EndReadDictionary();

  











  int BeginReadDictionaryEntry(
          int* de_type, 
          ON_wString& entry_name
          );
  bool EndReadDictionaryEntry();

  bool Read3dmGoo( ON_3dmGoo& ); 

  
  __declspec(deprecated) bool PeekAt3dmChunkType( 
        unsigned int*,   
        int*             
        );

  bool PeekAt3dmBigChunkType( 
        ON__UINT32* typecode,
        ON__INT64* big_value
        );

  bool Seek3dmChunkFromStart( 
        
        
        
        
        
        unsigned int    
        );
  bool Seek3dmChunkFromCurrentPosition( 
        
        
        
        
        
        unsigned int    
        );

  
  
  
  
  
  
  bool Write3dmChunkVersion(
    int, 
    int  
    );
  bool Read3dmChunkVersion(
    int*, 
    int*  
    );

  









  bool WriteObjectUserData( const ON_Object& object );

  









  bool ReadObjectUserData( ON_Object& object );

  















  int Archive3dmVersion() const;

  



















  int ArchiveOpenNURBSVersion() const;

  















  size_t ArchiveStartOffset() const;

  enum table_type
  {
    no_active_table = 0,
    properties_table,
    settings_table,
    bitmap_table,
    texture_mapping_table,
    material_table,
    linetype_table,
    layer_table,
    light_table,
    object_table,
    group_table,
    font_table,
    dimstyle_table,
    hatchpattern_table,
    instance_definition_table,
    historyrecord_table,
    user_table
  };

  








  int GetCurrentChunk(ON_3DM_CHUNK& chunk) const;
  int GetCurrentChunk(ON_3DM_BIG_CHUNK& big_chunk) const;

  














  bool FindTableInDamagedArchive(
          unsigned int tcode_table,
          unsigned int tcode_record,
          ON_UUID class_uuid,
          int min_length_data
          );

  














  unsigned int 
  Dump3dmChunk(
        ON_TextLog& text_log, 
        int recursion_depth = 0
        );

protected:

  





  virtual
  size_t Read( size_t, void* ) = 0; 

  





  virtual
  size_t Write( size_t, const void* ) = 0;

  






  virtual
  bool Flush() = 0;

  









  virtual
  int LoadUserDataApplication( 
    ON_UUID application_id 
    );

  bool SetArchive3dmVersion(int);

private:
  
  bool WriteInt8( size_t, const ON__INT8* );
  bool ReadInt8( size_t, ON__INT8* );

  
  bool WriteInt16( size_t, const ON__INT16* );
  bool ReadInt16( size_t, ON__INT16* );

  
  bool WriteInt32( size_t, const ON__INT32* );
  bool ReadInt32( size_t, ON__INT32* );

  
  bool WriteInt64( size_t, const ON__INT64* );
  bool ReadInt64(  size_t, ON__INT64* );

  bool BeginWrite3dmTable( 
    unsigned int 
    );
  bool EndWrite3dmTable( 
    unsigned int 
    );
  bool BeginRead3dmTable( 
    unsigned int 
    );
  bool EndRead3dmTable( 
    unsigned int 
    );
  
  bool Read3dmV1Layer( ON_Layer*& );
  int  Read3dmV1Light(  
                      
                      
            ON_Light**, 
            ON_3dmObjectAttributes* 
                                    
            );
  int Read3dmV1Material( ON_Material** );
  int  Read3dmV1Object( 
                      
                      
                      
          ON_Object**, 
          ON_3dmObjectAttributes*, 
                                   
          unsigned int = 0 
          );  

  bool Read3dmV1AttributesOrMaterial( 
            ON_3dmObjectAttributes*,    
            ON_Material*,      
            ON_BOOL32&,             
            unsigned int,      
            class ON__3dmV1_XDATA* = 0 
            );
  bool Read3dmV1String( ON_String& );
  int  Read3dmV1LayerIndex( const char* ) const;

public:
  
  bool ReadV1_TCODE_RH_POINT(ON_Object**,ON_3dmObjectAttributes*);
  bool ReadV1_TCODE_MESH_OBJECT(ON_Object**,ON_3dmObjectAttributes*);
  bool ReadV1_TCODE_LEGACY_CRV(ON_Object**,ON_3dmObjectAttributes*);
  bool ReadV1_TCODE_LEGACY_FAC(ON_Object**,ON_3dmObjectAttributes*);
  bool ReadV1_TCODE_LEGACY_SHL(ON_Object**,ON_3dmObjectAttributes*);
  bool ReadV1_TCODE_RHINOIO_OBJECT_NURBS_CURVE(ON_Object**,ON_3dmObjectAttributes*);
  bool ReadV1_TCODE_RHINOIO_OBJECT_NURBS_SURFACE(ON_Object**,ON_3dmObjectAttributes*);
  bool ReadV1_TCODE_RHINOIO_OBJECT_BREP(ON_Object**,ON_3dmObjectAttributes*);
  bool ReadV1_TCODE_ANNOTATION(unsigned int,ON_Object**,ON_3dmObjectAttributes*);

private:
  ON::archive_mode Mode() const; 
  void UpdateCRC( size_t, const void* );
  int ReadObjectHelper(ON_Object**);

  int m_3dm_version;
  int m_3dm_v1_layer_index;
  int m_3dm_v1_material_index;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  unsigned int m_error_message_mask;
protected:
  unsigned int ErrorMessageMask() const;
  










  bool MaskReadError( ON__UINT64 sizeof_request, ON__UINT64 sizeof_read ) const;
private:


  
  
  
  
  
  
  
  
  
  
  friend void ON_SetBinaryArchiveOpenNURBSVersion(ON_BinaryArchive&,int);
  int m_3dm_opennurbs_version;

  
  
  
  
  size_t m_3dm_start_section_offset;

  table_type m_active_table;

  table_type TableTypeFromTypecode( unsigned int ); 

  ON_SimpleArray<ON_3DM_BIG_CHUNK> m_chunk;

  
  bool PushBigChunk( ON__UINT32 typecode, ON__INT64 value );

  bool WriteChunkTypecode( ON__UINT32 );
  bool ReadChunkTypecode( ON__UINT32* );
  bool WriteChunkValue( ON__UINT32 typecode, ON__INT64 );
  bool WriteChunkLength( ON__UINT64 );
  bool ReadChunkValue( ON__UINT32 typecode, ON__INT64* value64 );
  bool FindMisplacedTable( 
        ON__UINT64 filelength,
        const ON__UINT32 table_tocde,
        const ON__UINT32 table_record_record,
        const ON_UUID class_uuid,
        const ON__UINT64 min_length_data
        );

  bool ReadObjectUserDataAnonymousChunk(
          const ON__UINT64 length_TCODE_ANONYMOUS_CHUNK,
          const int archive_3dm_version,
          const int archive_opennurbs_version,
          class ON_UserData* ud );

public:
  size_t SizeofChunkLength() const;

private:
  bool WriteEOFSizeOfFile( ON__UINT64 );
  bool ReadEOFSizeOfFile( ON__UINT64* );

  bool m_bDoChunkCRC; 
                      
  int m_bad_CRC_count; 


private:
  
  struct
  {
    ON::archive_mode mode; 
    enum
    {
      sizeof_x_buffer = 16384
    };
    unsigned char    buffer[sizeof_x_buffer];
    z_stream         strm;
  } m_zlib;

  
  size_t WriteDeflate(
        size_t,         
        const void*  
        );
  bool ReadInflate(
        size_t,  
        void* 
        );
  bool CompressionInit();
  void CompressionEnd();

private:
  
  
  ON::endian m_endian;

  ON::archive_mode m_mode;

  
  bool m_bSaveUserData; 
  bool m_bSavePreviewImage;    
  bool m_bEmbedTextureBitmaps; 
  bool m_bSaveRenderMeshes;    
  bool m_bSaveAnalysisMeshes;  

  
  
  
  ON_SimpleArray< ON_UUID > m_V3_plugin_id_list;

  struct ON__3dmV1LayerIndex* m_V1_layer_list;

  
  ON_BinaryArchive();
  ON_BinaryArchive( const ON_BinaryArchive& ); 
  ON_BinaryArchive& operator=( const ON_BinaryArchive& ); 

};

class  ON_3dmGoo
{
  
public:
  ON_3dmGoo();
  ~ON_3dmGoo();
  ON_3dmGoo( const ON_3dmGoo& );
  ON_3dmGoo& operator=( const ON_3dmGoo& );

  void Dump(ON_TextLog&) const;

  unsigned int m_typecode;
  int m_value;
  unsigned char* m_goo;
  ON_3dmGoo* m_next_goo;
  ON_3dmGoo* m_prev_goo;
};


class  ON_BinaryFile : public ON_BinaryArchive
{
public:
  ON_BinaryFile( ON::archive_mode );

  










  ON_BinaryFile( ON::archive_mode, FILE* fp );

  virtual ~ON_BinaryFile();

  
  size_t CurrentPosition() const; 
  bool SeekFromCurrentPosition(int);
  bool SeekFromStart(size_t);
  bool AtEnd() const;

  
  bool SeekFromEnd( int ); 

  
  
  
  
  
  
  
  
  void EnableMemoryBuffer(
         int=16384 
         );

protected:
  size_t Read( size_t, void* );
  size_t Write( size_t, const void* );
  bool Flush();

private:
  
  FILE* m_fp;

  
  
  
  
  
  
  size_t m_memory_buffer_capacity;
  size_t m_memory_buffer_size;
  size_t m_memory_buffer_ptr;
  unsigned char* m_memory_buffer;

private:
  
  ON_BinaryFile( ); 
  ON_BinaryFile( const ON_BinaryFile& ); 
  ON_BinaryFile& operator=( const ON_BinaryFile& ); 
};

class  ON_BinaryArchiveBuffer : public ON_BinaryArchive
{
public:
  








  ON_BinaryArchiveBuffer( ON::archive_mode, ON_Buffer* buffer );

  virtual ~ON_BinaryArchiveBuffer();

  











  bool SetBuffer( ON_Buffer* buffer );

  



  ON_Buffer* Buffer() const;

  
  size_t CurrentPosition() const; 
  bool SeekFromCurrentPosition(int);
  bool SeekFromStart(size_t);
  bool AtEnd() const;

  bool SeekFromEnd( ON__INT64 ); 

protected:
  size_t Read( size_t, void* );
  size_t Write( size_t, const void* );
  bool Flush();

private:
  
  ON_Buffer* m_buffer;

private:
  
  ON_BinaryArchiveBuffer( ON::archive_mode );
private:
  
  ON_BinaryArchiveBuffer( ); 
  ON_BinaryArchiveBuffer( const ON_BinaryArchiveBuffer& ); 
  ON_BinaryArchiveBuffer& operator=( const ON_BinaryArchiveBuffer& ); 
};


class  ON_Read3dmBufferArchive : public ON_BinaryArchive
{
public:

  














  ON_Read3dmBufferArchive( 
    size_t sizeof_buffer, 
    const void* buffer,
    bool bCopyBuffer,
    int archive_3dm_version,
    int archive_opennurbs_version
    );

  ~ON_Read3dmBufferArchive();

  



  size_t SizeOfBuffer() const;

  



  const void* Buffer() const;

  
  size_t CurrentPosition() const; 
  bool SeekFromCurrentPosition(int); 
  bool SeekFromStart(size_t);
  bool AtEnd() const;

protected:
  
  size_t Read( size_t, void* ); 
  size_t Write( size_t, const void* );
  bool Flush();

private:
  void* m_p;
  const unsigned char* m_buffer;
  size_t m_sizeof_buffer;
  size_t m_buffer_position;
  ON__INT_PTR m_reserved1;
  ON__INT_PTR m_reserved2;
  ON__INT_PTR m_reserved3;
  ON__INT_PTR m_reserved4;

private:
  
  ON_Read3dmBufferArchive(); 
  ON_Read3dmBufferArchive( const ON_Read3dmBufferArchive& );
  ON_Read3dmBufferArchive& operator=(const ON_Read3dmBufferArchive&);
};

class  ON_Write3dmBufferArchive : public ON_BinaryArchive
{
public:

  
















  ON_Write3dmBufferArchive( 
    size_t initial_sizeof_buffer, 
    size_t max_sizeof_buffer, 
    int archive_3dm_version,
    int archive_opennurbs_version
    );

  ~ON_Write3dmBufferArchive();

  



  size_t SizeOfArchive() const;

  



  size_t SizeOfBuffer() const;

  








  const void* Buffer() const;

  






  void* HarvestBuffer();

  
  size_t CurrentPosition() const; 
  bool SeekFromCurrentPosition(int); 
  bool SeekFromStart(size_t);
  bool AtEnd() const;

protected:
  
  size_t Read( size_t, void* ); 
  size_t Write( size_t, const void* ); 
  bool Flush();

private:
  void AllocBuffer(size_t);
  void* m_p;
  unsigned char* m_buffer;
  size_t m_sizeof_buffer;
  const size_t m_max_sizeof_buffer;
  size_t m_sizeof_archive;
  size_t m_buffer_position;
  ON__INT_PTR m_reserved1;
  ON__INT_PTR m_reserved2;
  ON__INT_PTR m_reserved3;
  ON__INT_PTR m_reserved4;

private:
  
  ON_Write3dmBufferArchive(); 
  ON_Write3dmBufferArchive( const ON_Write3dmBufferArchive& );
  ON_Write3dmBufferArchive& operator=(const ON_Write3dmBufferArchive&);
};































bool ON_WriteOneObjectArchive( 
          ON_BinaryArchive& archive,
          int version,
          const ON_Object& object
          );







































class  ON_Arc : public ON_Circle
{
public:
  
  ON_Arc();

  






  ON_Arc(
    const ON_Circle& circle,
    double angle_in_radians
    );

  





  ON_Arc(
    const ON_Circle& circle,
    ON_Interval angle_interval_in_radians
    );

  











  ON_Arc(
    const ON_Plane& plane,
    double radius,
    double angle_in_radians
    );

  









  ON_Arc(
    const ON_3dPoint& center,
    double radius,
    double angle_in_radians
    );

  













  ON_Arc(
    const ON_Plane& plane,
    const ON_3dPoint& center,
    double radius,
    double angle_in_radians
    );

  







  ON_Arc(
    const ON_2dPoint& start_point,
    const ON_2dPoint& interior_point,
    const ON_2dPoint& end_point
    );

  







  ON_Arc(
    const ON_3dPoint& start_point,
    const ON_3dPoint& interior_point,
    const ON_3dPoint& end_point
    );

  








  bool Create(
    const ON_Circle& circle,
    double angle_in_radians
    );

  









  bool Create(
    const ON_Circle& circle,
    ON_Interval angle_interval_in_radians
    );

  











  bool Create(
    const ON_Plane& plane,
    double radius,
    double angle_in_radians
    );

 









  bool Create(
    const ON_3dPoint& center,
    double radius,
    double angle_in_radians
    );

  













  bool Create(
    const ON_Plane& plane,
    const ON_3dPoint& center,
    double radius,
    double angle_in_radians
    );

  







  bool Create(
    const ON_2dPoint& start_point,
    const ON_2dPoint& interior_point,
    const ON_2dPoint& end_point
    );

  







  bool Create(
    const ON_3dPoint& start_point,
    const ON_3dPoint& interior_point,
    const ON_3dPoint& end_point
    );

  








  bool Create(
    const ON_2dPoint& start_point,
    const ON_2dVector& dir_at_start,
    const ON_2dPoint& end_point
    );

  








  bool Create(
    const ON_3dPoint& start_point,
    const ON_3dVector& dir_at_start,
    const ON_3dPoint& end_point
    );

  ON_Arc& operator=( const ON_Circle& );


  ~ON_Arc();

  
  
  
  
  
  
  
  void Dump( ON_TextLog& dump ) const;

  
  
	
	
  
  
  bool IsValid() const;

  
  
  
  
  ON_BoundingBox BoundingBox() const;

  
  
  
  
  
  
  
  
  
  
  
  bool GetBoundingBox(
         ON_BoundingBox& bbox,
         int bGrowBox = false
         ) const;

  














	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  
  
  
  bool IsCircle() const;

  
  
  double AngleRadians() const;

  
  
  double AngleDegrees() const;


  





  ON_Interval Domain() const;

  
  
  ON_Interval DomainRadians() const;

  
  
  ON_Interval DomainDegrees() const;

  
  
  
  
  
  bool SetAngleRadians(
    double angle_in_radians
    );

  









  bool SetAngleIntervalRadians(
    ON_Interval angle_in_radians
    );

  
  
  
  
  
  bool Trim(
    ON_Interval domain_radian
    );

  
  
  
  
  bool SetAngleDegrees(
    double angle_in_degrees
    );

  
  
  ON_3dPoint StartPoint() const;


  
  
  ON_3dPoint MidPoint() const;

  
  
  ON_3dPoint EndPoint() const;

  
  
  
  
  
  
  
  
  bool ClosestPointTo( 
         const ON_3dPoint& test_point, 
         double* t
         ) const;

  
  
  
  
  
  
  
  
  ON_3dPoint ClosestPointTo( 
         const ON_3dPoint& test_point
         ) const;

  
  
  double Length() const;

  








  double SectorArea() const;

  








  ON_3dPoint SectorAreaCentroid() const;

  






  double SegmentArea() const;

  






  ON_3dPoint SegmentAreaCentroid() const;

  
  
  
  bool Reverse();

  
  
  
  
  
  
  
  
  
  
  
  int GetNurbForm(
        ON_NurbsCurve& nurbs_curve
        ) const; 

  



























  bool GetRadianFromNurbFormParameter(
        double nurbs_parameter,
        double* arc_radians_parameter
        ) const;

  



























  bool GetNurbFormParameterFromRadian(
        double arc_radians_parameter,
        double* nurbs_parameter
        ) const;

private:
  friend bool ON_BinaryArchive::ReadArc( ON_Arc& );
  friend bool ON_BinaryArchive::WriteArc( const ON_Arc& );

  
  ON_Interval m_angle;
};































class ON_ClassId; 














class  ON_ClassId
{
public:

  
  
  
  
  
  
  
  
  
  
  ON_ClassId( 
          const char* sClassName,
          const char* sBaseClassName,
          ON_Object* (*create)(),
          const char* sUUID
           );

  ON_ClassId( 
          const char* sClassName,
          const char* sBaseClassName,
          ON_Object* (*create)(),
          bool (*copy)(const ON_Object*,ON_Object* ),
          const char* sUUID
           );

  ~ON_ClassId();

  
  
  
  
  
  
  
  
  static const ON_ClassId* ClassId( 
          const char* sClassName
          );

  
  
  
  
  
  
  
  
  
  static const ON_ClassId* ClassId( 
          ON_UUID class_uuid
          );

  
  
  
  
  
  
  
  static int IncrementMark();
  static int CurrentMark();
  static const ON_ClassId* LastClassId();

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  static int Purge(int mark);
  static bool PurgeAfter(const ON_ClassId* pClassId);

  
  
  
  
  static void Dump( 
    ON_TextLog& dump
    );

  
  
  const char* ClassName() const;

  
  
  const char* BaseClassName() const;
  
  
  
  const ON_ClassId* BaseClass() const;

  
  
  
  
  
  
  
	ON_BOOL32 IsDerivedFrom( 
    const ON_ClassId* potential_parent
    ) const;

  
  
  
  
  
  ON_Object* Create() const;

  
  
  ON_UUID Uuid() const;

  







  int Mark() const;

  unsigned int ClassIdVersion() const;

private:
  static ON_ClassId* m_p0;     
  static ON_ClassId* m_p1;     
  static int m_mark0;  
  ON_ClassId* m_pNext;         
  const ON_ClassId* m_pBaseClassId;  
  char m_sClassName[80];              
  char m_sBaseClassName[80];
  ON_Object* (*m_create)();
  ON_UUID m_uuid;
  int m_mark; 

private:
  
  ON_ClassId();
  ON_ClassId( const ON_ClassId&);
  ON_ClassId& operator=( const ON_ClassId&);

  void ConstructorHelper( 
          const char* sClassName, 
          const char* sBaseClassName, 
          const char* sUUID
          );

  
  
  
  friend class ON_Object;
  unsigned int m_class_id_version; 
  bool (*m_copy)(const ON_Object*,ON_Object*); 
  void* m_f2;
  void* m_f3;
  void* m_f4;
  void* m_f5;
  void* m_f6;
  void* m_f7;
  void* m_f8;
};























ON_UUID ON_GetMostRecentClassIdCreateUuid();




















































































class ON_UserData;

class  ON_UserString
{
public:
  ON_UserString();
  ~ON_UserString();
  ON_wString m_key;
  ON_wString m_string_value;

  void Dump(ON_TextLog& text_log) const;
  bool Write(ON_BinaryArchive&) const;
  bool Read(ON_BinaryArchive&);
};





















bool ON_IsNotValid();






class  ON_Object
{
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  protected: static void* m_s_ON_Object_ptr; public: static const ON_ClassId m_ON_Object_class_id; static ON_Object * Cast( ON_Object* ); static const ON_Object * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Object( const ON_Object*, ON_Object* ); public: ON_Object * Duplicate() const;;
public:

  













  bool CopyFrom( const ON_Object* src );

public:

  ON_Object();
  ON_Object( const ON_Object& );
  ON_Object& operator=( const ON_Object& );
  virtual ~ON_Object();

  



  void EmergencyDestroy();

  














  virtual 
  void MemoryRelocate();

  



























  ON_BOOL32 IsKindOf( 
        const ON_ClassId* pClassId
        ) const;

  
















  virtual
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const = 0;

  










  virtual
  void Dump( ON_TextLog& ) const;

  



  virtual
  unsigned int SizeOf() const;

  









  virtual
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  















  virtual
  ON_BOOL32 Write(
         ON_BinaryArchive& binary_archive
       ) const;

  














  virtual
  ON_BOOL32 Read(
         ON_BinaryArchive& binary_archive
       );

  




























  virtual
  ON::object_type ObjectType() const;



  








  virtual
  ON_UUID ModelObjectId() const;

  
  
  
  

  










  bool SetUserString( 
    const wchar_t* key, 
    const wchar_t* string_value 
    );

  














  int SetUserStrings( int count, const ON_UserString* user_strings, bool bReplace );

  








  bool GetUserString( 
    const wchar_t* key, 
    ON_wString& string_value 
    ) const;

  








  int GetUserStrings( 
    ON_ClassArray<ON_UserString>& user_strings 
    ) const;

  








  int GetUserStringKeys( 
    ON_ClassArray<ON_wString>& user_string_keys 
    ) const;

  



  int UserStringCount() const;

  
  
  
  

  
  
  
  
  
  
  
  

  














  ON_BOOL32 AttachUserData( 
          ON_UserData* pUserData 
          );

  
















  ON_BOOL32 DetachUserData(
          ON_UserData* pUserData 
          );


  










  ON_UserData* GetUserData( 
          const ON_UUID& userdata_uuid
          ) const;

  






  void PurgeUserData();

  










  ON_UserData* FirstUserData() const;

  






  void TransformUserData( 
    const ON_Xform& xform
    );

  










  void CopyUserData( 
    const ON_Object& source_object 
    );

  






  void MoveUserData( 
    ON_Object& source_object 
    );


  
  
  
  

  















  virtual
  void DestroyRuntimeCache( bool bDelete = true );

private:
  friend int ON_BinaryArchive::ReadObject( ON_Object** );
  friend bool ON_BinaryArchive::WriteObject( const ON_Object& );
  friend bool ON_BinaryArchive::ReadObjectUserData( ON_Object& );
  friend bool ON_BinaryArchive::WriteObjectUserData( const ON_Object& );
  friend class ON_UserData;
  ON_UserData* m_userdata_list;
};
























class  ON_UserData : public ON_Object
{
  protected: static void* m_s_ON_UserData_ptr; public: static const ON_ClassId m_ON_UserData_class_id; static ON_UserData * Cast( ON_Object* ); static const ON_UserData * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_UserData( const ON_Object*, ON_Object* ); public: ON_UserData * Duplicate() const;;
public:
  ON_UserData();
  ON_UserData(const ON_UserData&);
  ON_UserData& operator=(const ON_UserData&);

  
  
  
  ~ON_UserData();

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  







  void Dump( ON_TextLog& text_log ) const;

  





  unsigned int SizeOf() const;

  
  
  ON_Object* Owner() const;

  
  
  
  ON_UserData* Next() const;

  
  
  
  ON_UUID UserDataClassUuid() const; 

  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 IsUnknownUserData() const;

  






  virtual 
  ON_BOOL32 GetDescription( ON_wString& description );

  





















  virtual 
  ON_BOOL32 Archive() const; 

  






  virtual 
  ON_BOOL32 Transform( const ON_Xform& ); 

  





  ON_UUID m_userdata_uuid;

  







  ON_UUID m_application_uuid;

  
  
  
  
  
  
  
  unsigned int m_userdata_copycount;  

  
  
  
  
  
  
  
  ON_Xform m_userdata_xform; 

private: 
  friend int ON_BinaryArchive::ReadObject( ON_Object** );
  friend bool ON_BinaryArchive::WriteObject( const ON_Object& );
  friend bool ON_BinaryArchive::ReadObjectUserData( ON_Object& );
  friend bool ON_BinaryArchive::WriteObjectUserData( const ON_Object& );
  friend class ON_Object;
  ON_Object* m_userdata_owner; 
  ON_UserData* m_userdata_next;
};

class  ON_UnknownUserData : public ON_UserData
{
  protected: static void* m_s_ON_UnknownUserData_ptr; public: static const ON_ClassId m_ON_UnknownUserData_class_id; static ON_UnknownUserData * Cast( ON_Object* ); static const ON_UnknownUserData * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_UnknownUserData( const ON_Object*, ON_Object* ); public: ON_UnknownUserData * Duplicate() const;;
  
  
public:
  ON_UnknownUserData();
  ON_UnknownUserData(const ON_UnknownUserData&);
  ~ON_UnknownUserData();
  ON_UnknownUserData& operator=(const ON_UnknownUserData&);

  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const;
  ON_BOOL32 Write( ON_BinaryArchive& ) const;
  ON_BOOL32 Read( ON_BinaryArchive& );

  unsigned int SizeOf() const; 
  ON_BOOL32 GetDescription( ON_wString& ); 
  ON_BOOL32 Archive() const; 

  
  
  
  ON_UserData* Convert() const;

  





  ON_UUID m_unknownclass_uuid;
  int m_sizeof_buffer;
  void* m_buffer;

  
  
  
  
  
  
  
  
  
  
  
  
  int m_3dm_version; 
  int m_3dm_opennurbs_version; 
};

class  ON_UserStringList : public ON_UserData
{
  protected: static void* m_s_ON_UserStringList_ptr; public: static const ON_ClassId m_ON_UserStringList_class_id; static ON_UserStringList * Cast( ON_Object* ); static const ON_UserStringList * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_UserStringList( const ON_Object*, ON_Object* ); public: ON_UserStringList * Duplicate() const;;
public:

  ON_UserStringList();
  ~ON_UserStringList();

  
  void Dump( ON_TextLog& text_log ) const;

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  
  ON_BOOL32 Write(ON_BinaryArchive& binary_archive) const;

  
  ON_BOOL32 Read(ON_BinaryArchive& binary_archive);

  
  ON_BOOL32 GetDescription( ON_wString& description );

  
  ON_BOOL32 Archive() const; 

  













  bool SetUserString( const wchar_t* key, const wchar_t* string_value );

  bool GetUserString( const wchar_t* key, ON_wString& string_value ) const;

  














  int SetUserStrings( int count, const ON_UserString* us, bool bReplace );

  ON_ClassArray<ON_UserString> m_e;
};

class  ON_UserDataHolder : public ON_Object
{
public:
  
















  bool MoveUserDataFrom( const ON_Object& source_object );

  
















  bool MoveUserDataTo(  const ON_Object& source_object, bool bAppend );

  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;
};










class  ON_DocumentUserStringList : public ON_Object
{
  protected: static void* m_s_ON_DocumentUserStringList_ptr; public: static const ON_ClassId m_ON_DocumentUserStringList_class_id; static ON_DocumentUserStringList * Cast( ON_Object* ); static const ON_DocumentUserStringList * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_DocumentUserStringList( const ON_Object*, ON_Object* ); public: ON_DocumentUserStringList * Duplicate() const;;
public:
  ON_DocumentUserStringList();
  ~ON_DocumentUserStringList();

  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;
  void Dump( ON_TextLog& ) const;
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;
  ON_BOOL32 Write(ON_BinaryArchive& binary_archive) const;
  ON_BOOL32 Read(ON_BinaryArchive& binary_archive);

  
  
  
  
  
  
  
};





























class ON_Brep;









class  ON_Geometry : public ON_Object
{
  
  
  
  
  
  
  
  protected: static void* m_s_ON_Geometry_ptr; public: static const ON_ClassId m_ON_Geometry_class_id; static ON_Geometry * Cast( ON_Object* ); static const ON_Geometry * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Geometry( const ON_Object*, ON_Object* ); public: ON_Geometry * Duplicate() const;;

public:
  ON_Geometry();
  ON_Geometry(const ON_Geometry&);
  ON_Geometry& operator=(const ON_Geometry&);
  virtual ~ON_Geometry();

  
  
  
  
  
  
  ON_BoundingBox BoundingBox() const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 GetBoundingBox(
         ON_BoundingBox& bbox,
         int bGrowBox = false
         ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 GetBoundingBox(
         ON_3dPoint& bbox_min,
         ON_3dPoint& bbox_max,
         int bGrowBox = false
         ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Rotate(
        double sin_angle,
        double cos_angle,
        const ON_3dVector& rotation_axis,
        const ON_3dPoint& rotation_center
        );

  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Rotate(
        double rotation_angle,
        const ON_3dVector& rotation_axis,
        const ON_3dPoint& rotation_center
        );

  
  
  
  
  
  
  
  
  ON_BOOL32 Translate( 
    const ON_3dVector& translation_vector
    );

  
  
  
  
  
  
  
  
  
  ON_BOOL32 Scale( 
    double scale_factor
    );

  
  
  
  
  
  
  
  
  virtual 
  int Dimension() const = 0;

  
  
  
  
  
  
  
  
  
  
  
  
  virtual
  ON_BOOL32 GetBBox(
         double* boxmin,
         double* boxmax,
         int bGrowBox = false
         ) const = 0;

  

















  virtual
	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  virtual
  void ClearBoundingBox();

  
























  virtual
  ON_BOOL32 Transform( 
         const ON_Xform& xform
         );

  







  virtual
  bool IsDeformable() const;

  











  virtual
  bool MakeDeformable();

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  virtual
  ON_BOOL32 SwapCoordinates(
        int i,
        int j
        );

  











  virtual
  ON_BOOL32 HasBrepForm() const;

  
















  virtual
  ON_Brep* BrepForm( ON_Brep* brep = 0 ) const;

  












  virtual
  ON_COMPONENT_INDEX ComponentIndex() const;

  











  virtual
  bool EvaluatePoint( const class ON_ObjRef& objref, ON_3dPoint& P ) const;
};






























class ON_Curve;
class ON_Plane;
class ON_Arc;
class ON_NurbsCurve;
class ON_CurveTree;






class  ON_MeshCurveParameters
{
public:
  ON_MeshCurveParameters();

  
  
  
  
  
  
  
  
  int m_main_seg_count; 
  int m_sub_seg_count;

  int m_reserved1;
  int m_reserved2;

  
  
  double m_max_ang_radians;

  
  
  double m_max_chr;

  
  
  
  
  
  double m_max_aspect;

  
  
  
  double m_tolerance;

  
  
  double m_min_edge_length;
  
  
  
  double m_max_edge_length;

  double m_reserved3;
  double m_reserved4;
};

class  ON_Curve : public ON_Geometry
{
  

  
  
  
  
  
  
  
  protected: static void* m_s_ON_Curve_ptr; public: static const ON_ClassId m_ON_Curve_class_id; static ON_Curve * Cast( ON_Object* ); static const ON_Curve * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Curve( const ON_Object*, ON_Object* ); public: ON_Curve * Duplicate() const;;

public:
  
  void DestroyRuntimeCache( bool bDelete = true );

public:
  ON_Curve();
  ON_Curve(const ON_Curve&);
  ON_Curve& operator=(const ON_Curve&);
  virtual ~ON_Curve();

  
  unsigned int SizeOf() const;

  
  bool EvaluatePoint( const class ON_ObjRef& objref, ON_3dPoint& P ) const;

  












  virtual
  ON_Curve* DuplicateCurve() const;

  
  
  
  
  ON::object_type ObjectType() const;

  















	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  
  

  
  
  
  
  
  
  
  ON_BOOL32 GetDomain( double* t0, double* t1 ) const;

  
  
  virtual 
  ON_Interval Domain() const = 0;

  







  bool SetDomain( ON_Interval domain );

  
  
  
  
  
  
  
  virtual
  ON_BOOL32 SetDomain( 
        double t0, 
        double t1 
        );


  









  virtual 
  ON_BOOL32 ChangeClosedCurveSeam( 
            double t 
            );

  









  virtual
  bool ChangeDimension(
          int desired_dimension
          );


  
  
  
  
  virtual 
  int SpanCount() const = 0;

  
  
  
  
  
  
  
  virtual
  ON_BOOL32 GetSpanVector(
        double* knots
        ) const = 0; 

  
  
  
  
  
  virtual
  ON_BOOL32 GetSpanVectorIndex(
        double t ,               
        int side,                
        int* span_vector_index,  
        ON_Interval* span_domain 
        ) const;

  
  
  
  
  
  virtual 
  int Degree() const = 0; 

  
  
  
  
  
  virtual 
  ON_BOOL32 GetParameterTolerance( 
         double t,       
         double* tminus, 
         double* tplus   
         ) const;

  
  
  
  
  
  
  
  
  virtual
  ON_BOOL32 IsLinear(
        double tolerance = 2.3283064365386962890625e-10 
        ) const;

  















  virtual
  int IsPolyline(
        ON_SimpleArray<ON_3dPoint>* pline_points = 0,
        ON_SimpleArray<double>* pline_t = 0
        ) const;

  
  
  
  
  
  
  
  
  
  
  
  virtual
  ON_BOOL32 IsArc(
        const ON_Plane* plane = 0,
        ON_Arc* arc = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  





















  bool IsArcAt( 
    double t, 
    const ON_Plane* plane = 0,
    ON_Arc* arc = 0,
    double tolerance = 2.3283064365386962890625e-10,
    double* t0 = 0, 
    double* t1 = 0
    ) const;

  virtual
  bool IsEllipse(
      const ON_Plane* plane = 0,
      ON_Ellipse* ellipse = 0,
      double tolerance = 2.3283064365386962890625e-10
      ) const;

  
  
  
  
  
  
  
  
  
  virtual
  ON_BOOL32 IsPlanar(
        ON_Plane* plane = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  
  
  
  
  
  
  
  
  virtual
  ON_BOOL32 IsInPlane(
        const ON_Plane& test_plane,
        double tolerance = 2.3283064365386962890625e-10
        ) const = 0;

  















  bool IsClosable(
        double tolerance,
        double min_abs_size = 0.0,
        double min_rel_size = 10.0
        ) const;

  
  
  
  
  virtual 
  ON_BOOL32 IsClosed() const;

  
  
  
  
  virtual 
  ON_BOOL32 IsPeriodic() const;

  





















































  virtual
  bool GetNextDiscontinuity( 
                  ON::continuity c,
                  double t0,
                  double t1,
                  double* t,
                  int* hint=0,
                  int* dtype=0,
                  double cos_angle_tolerance=0.99984769515639123915701155881391,
                  double curvature_tolerance=1.490116119385000000e-8
                  ) const;

  
































  virtual
  bool IsContinuous(
    ON::continuity c,
    double t, 
    int* hint = 0,
    double point_tolerance=2.3283064365386962890625e-10,
    double d1_tolerance=2.3283064365386962890625e-10,
    double d2_tolerance=2.3283064365386962890625e-10,
    double cos_angle_tolerance=0.99984769515639123915701155881391,
    double curvature_tolerance=1.490116119385000000e-8
    ) const;


  
  
  
  
  
  
  virtual 
  ON_BOOL32 Reverse()=0;


  














  virtual
  ON_BOOL32 SetStartPoint(
          ON_3dPoint start_point
          );

  














  virtual
  ON_BOOL32 SetEndPoint(
          ON_3dPoint end_point
          );
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_3dPoint  PointAt( 
                double t 
                ) const;

  
  
  
  
  
  
  
  
  
  
  ON_3dPoint  PointAtStart() const;

  
  
  
  
  
  
  
  
  
  
  ON_3dPoint  PointAtEnd() const;

  
  
  
  
  
  
  
  
  
  
  ON_3dVector DerivativeAt(
                double t 
                ) const;

  
  
  
  
  
  
  
  
  
  
  ON_3dVector TangentAt(
                double t 
                ) const;

  
  
  
  
  
  
  
  
  
  
  ON_3dVector CurvatureAt(
                double t
                ) const;

  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 FrameAt( double t, ON_Plane& plane) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 EvPoint(
         double t,
         ON_3dPoint& point, 
         int side = 0,
         int* hint = 0
         ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Ev1Der(
         double t,
         ON_3dPoint& point,
         ON_3dVector& first_derivative,
         int side = 0,
         int* hint = 0
         ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Ev2Der(
         double t,
         ON_3dPoint& point,
         ON_3dVector& first_derivative,
         ON_3dVector& second_derivative,
         int side = 0,
         int* hint = 0
         ) const;

  

















  ON_BOOL32 EvTangent(
         double t,
         ON_3dPoint& point,
         ON_3dVector& tangent,
         int side = 0,
         int* hint = 0
         ) const;

  



















  ON_BOOL32 EvCurvature(
         double t,
         ON_3dPoint& point,
         ON_3dVector& tangent,
         ON_3dVector& kappa,
         int side = 0,
         int* hint = 0
         ) const;

  
























  virtual 
  ON_BOOL32 Evaluate(
         double t,
         int der_count,
         int v_stride,
         double* v,
         int side = 0,
         int* hint = 0
         ) const = 0;

  
  














  bool FirstSpanIsLinear( 
    double min_length,
    double tolerance
    ) const;

  bool LastSpanIsLinear( 
    double min_length,
    double tolerance
    ) const;

  bool FirstSpanIsLinear( 
    double min_length,
    double tolerance,
    ON_Line* span_line
    ) const;

  bool LastSpanIsLinear( 
    double min_length,
    double tolerance,
    ON_Line* span_line
    ) const;

  
  
  
  
  
  
  
  
  virtual
  ON_BOOL32 Trim(
    const ON_Interval& domain
    );

  
  
  
  
  
  
  
  
  
  
  virtual
  bool Extend(
    const ON_Interval& domain
    );

  


























  virtual
  ON_BOOL32 Split(
      double t,
      ON_Curve*& left_side,
      ON_Curve*& right_side
    ) const;

  





























  virtual
  int GetNurbForm(
        ON_NurbsCurve& nurbs_curve,
        double tolerance = 0.0,
        const ON_Interval* subdomain = 0
        ) const;
  























  virtual
  int HasNurbForm() const;

  


















  ON_NurbsCurve* NurbsCurve(
        ON_NurbsCurve* pNurbsCurve = 0,
        double tolerance = 0.0,
        const ON_Interval* subdomain = 0
        ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  virtual
  ON_BOOL32 GetCurveParameterFromNurbFormParameter(
        double nurbs_t,
        double* curve_t
        ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  virtual
  ON_BOOL32 GetNurbFormParameterFromCurveParameter(
        double curve_t,
        double* nurbs_t
        ) const;


  
  
  
  
  
  
  
  void DestroyCurveTree();

  


























protected:
  bool ParameterSearch( double t, int& index, bool bEnableSnap, const ON_SimpleArray<double>& m_t, 
															double RelTol=1.490116119385000000e-8) const;

private:
};











class  ON_CurveArray : public ON_SimpleArray<ON_Curve*>
{
public:
  ON_CurveArray( int = 0 );
  ~ON_CurveArray(); 

  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );

  void Destroy(); 

  bool Duplicate( ON_CurveArray& ) const; 
                                          

  















	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;
};















ON_Curve* ON_TrimCurve( 
            const ON_Curve& curve,
            ON_Interval trim_parameters
            );


















bool ON_ForceMatchCurveEnds(
                            ON_Curve& Crv0, 
                            int end0, 
                            ON_Curve& Crv1, 
                            int end1
                            );





















int ON_JoinCurves(const ON_SimpleArray<const ON_Curve*>& InCurves,
                  ON_SimpleArray<ON_Curve*>& OutCurves,
                  double join_tol,
                  bool bPreserveDirection = false,
                  ON_SimpleArray<int>* key = 0
                 );


















bool ON_SortLines( 
        int line_count, 
        const ON_Line* line_list, 
        int* index, 
        bool* bReverse 
        );
















bool ON_SortLines( 
        const ON_SimpleArray<ON_Line>& line_list,
        int* index, 
        bool* bReverse 
        );

















bool ON_SortCurves(
          int curve_count,
          const ON_Curve* const* curve_list, 
          int* index,
          bool* bReverse
          );
















bool ON_SortCurves( 
                   const ON_SimpleArray<const ON_Curve*>& curves, 
                   ON_SimpleArray<int>& index, 
                   ON_SimpleArray<bool>& bReverse 
                   );

















bool ON_SortCurves( 
          const ON_SimpleArray<ON_Curve*>& curves, 
          ON_SimpleArray<int>& index, 
          ON_SimpleArray<bool>& bReverse 
          );















int ON_ClosedCurveOrientation( const ON_Curve& curve, const ON_Xform* xform );




















double ON_CurveOrientationArea( 
  const ON_Curve* curve,
  const ON_Interval* domain,
  const ON_Xform* xform,
  bool bReverseCurve
  );






























class ON_Curve;
class ON_NurbsSurface;
class ON_SurfaceTree;







class ON_Mesh;
class ON_MeshParameters;
class ON_PolyCurve;
class ON_CurveProxy;
class ON_Surface;

class  ON_Surface : public ON_Geometry
{
  protected: static void* m_s_ON_Surface_ptr; public: static const ON_ClassId m_ON_Surface_class_id; static ON_Surface * Cast( ON_Object* ); static const ON_Surface * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Surface( const ON_Object*, ON_Object* ); public: ON_Surface * Duplicate() const;;

public:
  
  void DestroyRuntimeCache( bool bDelete = true );

  
public:

  
  
  
  
  enum ISO 
  {
    not_iso = 0, 
    x_iso   = 1, 
                 
    y_iso   = 2, 
                 
    W_iso   = 3, 
                 
    S_iso   = 4, 
                 
    E_iso   = 5, 
                 
    N_iso   = 6, 
                 
    iso_count = 7
  };

public:
  ON_Surface();
  ON_Surface(const ON_Surface&);
  ON_Surface& operator=(const ON_Surface&);
  virtual ~ON_Surface();

  
  unsigned int SizeOf() const;

  
  bool EvaluatePoint( const class ON_ObjRef& objref, ON_3dPoint& P ) const;

  












  virtual
  ON_Surface* DuplicateSurface() const;

  
  
  ON::object_type ObjectType() const;


  
  
  
  

  







  ON_BOOL32 HasBrepForm() const;

  
















  ON_Brep* BrepForm( ON_Brep* brep = 0 ) const;

  
  

  ON_BOOL32 GetDomain( 
         int dir,              
         double* t0,
         double* t1
         ) const;

  bool SetDomain( 
    int dir, 
    ON_Interval domain
    );

  virtual
  ON_BOOL32 SetDomain( 
    int dir, 
    double t0, 
    double t1
    );

  virtual
  ON_Interval Domain(
    int dir 
    ) const = 0;

  





















  virtual
  ON_BOOL32 GetSurfaceSize( 
      double* width, 
      double* height 
      ) const;


  virtual 
  int SpanCount(
    int dir 
    ) const = 0; 

  virtual
  ON_BOOL32 GetSpanVector( 
        int dir, 
        double* span_vector 
        ) const = 0; 

  
  
  
  
  
  virtual
  ON_BOOL32 GetSpanVectorIndex(
        int dir , 
        double t,      
        int side,         
        int* span_vector_index,        
        ON_Interval* span_interval 
        ) const;

  virtual 
  int Degree( 
                  
    int dir 
    ) const = 0; 

  virtual ON_BOOL32 GetParameterTolerance( 
         int dir,        
         double t,       
         double* tminus, 
         double* tplus   
         ) const;

  













  virtual
  ISO IsIsoparametric(
        const ON_Curve& curve,
        const ON_Interval* curve_domain = 0
        ) const;

  












  virtual
  ISO IsIsoparametric(
        const ON_BoundingBox& bbox
        ) const;

  










  virtual
  ON_BOOL32 IsPlanar(
        ON_Plane* plane = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  










  bool IsSphere(
        ON_Sphere* sphere = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  










  bool IsCylinder(
        ON_Cylinder* cylinder = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  










  bool IsCone(
        ON_Cone* cone = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  










  bool IsTorus(
        ON_Torus* torus = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  virtual 
  ON_BOOL32 IsClosed(   
        int        
        ) const;

  virtual 
  ON_BOOL32 IsPeriodic( 
        int        
        ) const;

  virtual
  ON_BOOL32 IsSingular( 
        int        
                   
        ) const;

  




  bool IsSolid() const;

  










  bool IsAtSingularity(
    double s, 
    double t, 
    bool bExact = true
    ) const;

  











  int IsAtSeam(
    double s,
    double t
    ) const;
  
  



















































  virtual
  bool GetNextDiscontinuity( 
                  int dir,
                  ON::continuity c,
                  double t0,
                  double t1,
                  double* t,
                  int* hint=0,
                  int* dtype=0,
                  double cos_angle_tolerance=0.99984769515639123915701155881391,
                  double curvature_tolerance=1.490116119385000000e-8
                  ) const;

  
























  virtual
  bool IsContinuous(
    ON::continuity c,
    double s, 
    double t, 
    int* hint = 0,
    double point_tolerance=2.3283064365386962890625e-10,
    double d1_tolerance=2.3283064365386962890625e-10,
    double d2_tolerance=2.3283064365386962890625e-10,
    double cos_angle_tolerance=0.99984769515639123915701155881391,
    double curvature_tolerance=1.490116119385000000e-8
    ) const;

  virtual 
  ON_BOOL32 Reverse(  
    int 
    ) = 0;

  virtual 
  ON_BOOL32 Transpose() = 0; 

  
  ON_3dPoint  PointAt( double, double ) const;
  ON_3dVector NormalAt( double, double ) const;
  ON_BOOL32 FrameAt( double u, double v, ON_Plane& frame) const;

  ON_BOOL32 EvPoint( 
         double u, double v,   
         ON_3dPoint& point,    
         int quadrant = 0,     
                               
                               
                               
                               
                               
         int* hint = 0         
                               
         ) const;

  ON_BOOL32 Ev1Der( 
         double u, double v,   
         ON_3dPoint& point,    
         ON_3dVector& du,      
         ON_3dVector& dv,      
         int quadrant = 0,     
                               
                               
                               
                               
                               
         int* hint = 0         
                               
         ) const;

  ON_BOOL32 Ev2Der( 
         double u, double v,   
         ON_3dPoint& point,    
         ON_3dVector& du,      
         ON_3dVector& dv,      
         ON_3dVector& duu,     
         ON_3dVector& duv,     
         ON_3dVector& dvv,     
         int quadrant= 0,      
                               
                               
                               
                               
                               
         int* hint = 0         
                               
         ) const;

  ON_BOOL32 EvNormal( 
         double u, double v,   
         ON_3dPoint& point,    
         ON_3dVector& normal,  
         int quadrant = 0,     
                               
                               
                               
                               
                               
         int* hint = 0         
                               
         ) const;

  ON_BOOL32 EvNormal( 
         double u, double v,   
         ON_3dVector& normal,  
         int quadrant = 0,     
                               
                               
                               
                               
                               
         int* hint = 0         
                               
         ) const;

  ON_BOOL32 EvNormal( 
         double u, double v,   
         ON_3dPoint& point,    
         ON_3dVector& du,      
         ON_3dVector& dv,      
         ON_3dVector& normal,  
         int = 0,              
                               
                               
                               
                               
                               
         int* = 0              
                               
         ) const;

  
  virtual 
  ON_BOOL32 Evaluate( 
         double u, double v,   
         int num_der,          
         int array_stride,     
         double* der_array,    
         int quadrant = 0,     
                               
                               
                               
                               
                               
         int* hint = 0         
                               
         ) const = 0;

  



















  virtual
  ON_Curve* IsoCurve(
         int dir,
         double c
         ) const;

  















  virtual
  ON_BOOL32 Trim(
         int dir,
         const ON_Interval& domain
         );

  
















  virtual
  bool Extend(
    int dir,
    const ON_Interval& domain
    );


  

























  virtual
  ON_BOOL32 Split(
         int dir,
         double c,
         ON_Surface*& west_or_south_side,
         ON_Surface*& east_or_north_side
         ) const;

  































  virtual
  int GetNurbForm(
        ON_NurbsSurface& nurbs_surface,
        double tolerance = 0.0
        ) const;


  























  virtual
  int HasNurbForm() const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_NurbsSurface* NurbsSurface(
        ON_NurbsSurface* pNurbsSurface = 0,
        double tolerance = 0.0,
        const ON_Interval* s_subdomain = 0,
        const ON_Interval* t_subdomain = 0
        ) const;

  virtual
  bool GetSurfaceParameterFromNurbFormParameter(
        double nurbs_s, double nurbs_t,
        double* surface_s, double* surface_t
        ) const;

  virtual
  bool GetNurbFormParameterFromSurfaceParameter(
        double surface_s, double surface_t,
        double* nurbs_s,  double* nurbs_t
        ) const;


  
  
  void DestroySurfaceTree();
};

class  ON_SurfaceProperties
{
  
public:
  
  ON_SurfaceProperties();

  







  void Set( const ON_Surface* surface );

  bool m_bIsSet;           

  bool m_bHasSingularity;  
  bool m_bIsSingular[4];   

  bool m_bHasSeam;         
  bool m_bIsClosed[2];     

private:
  bool m_bReserved[7];

public:
  ON_Interval m_domain[2]; 

private:
  unsigned char m_reserved[16];

public:
  
  const ON_Surface* m_surface;

  
  
  ON__INT_PTR m_tag;
};











class  ON_SurfaceArray : public ON_SimpleArray<ON_Surface*>
{
public:
  ON_SurfaceArray( int = 0 );
  ~ON_SurfaceArray();

  ON_BOOL32 Write( ON_BinaryArchive& ) const;
  ON_BOOL32 Read( ON_BinaryArchive& );

  void Destroy(); 

  ON_BOOL32 Duplicate( ON_SurfaceArray& ) const; 
                                     
};




































class  ON_Viewport : public ON_Geometry 
{
	protected: static void* m_s_ON_Viewport_ptr; public: static const ON_ClassId m_ON_Viewport_class_id; static ON_Viewport * Cast( ON_Object* ); static const ON_Viewport * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Viewport( const ON_Object*, ON_Object* ); public: ON_Viewport * Duplicate() const;;
public:

  
  static const ON_3dVector Default3dCameraDirection;

  
	ON_Viewport();
  ~ON_Viewport();
	ON_Viewport& operator=( const ON_Viewport& );

  bool IsValidCamera() const;
  bool IsValidFrustum() const;

  
  

  



















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  
  
  
  
  
  
  
  void Dump( 
    ON_TextLog& 
    ) const;

  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;


  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );


  
  

  
  
  
  
  
  
  
  
  int Dimension() const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 GetBBox( 
         double*, 
         double*, 
         ON_BOOL32 = false 
         ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Transform( 
         const ON_Xform& 
         );

  
  
  void Initialize();

  ON::view_projection Projection() const;

  









  bool SetProjection( ON::view_projection projection );

  













  bool ChangeToParallelProjection( bool bSymmetricFrustum );

  























  bool ChangeToPerspectiveProjection( 
          double target_distance,
          bool bSymmetricFrustum,
          double lens_length
          );

  


























  bool ChangeToTwoPointPerspectiveProjection( 
          double target_distance,
          ON_3dVector up,
          double lens_length
          );

  



  bool IsPerspectiveProjection() const;

  






  bool IsTwoPointPerspectiveProjection() const;

  



  bool IsParallelProjection() const;

  
  
  bool SetCameraLocation( const ON_3dPoint& );
  bool SetCameraDirection( const ON_3dVector& );
  bool SetCameraUp( const ON_3dVector& );

  ON_3dPoint CameraLocation() const;
  ON_3dVector CameraDirection() const;
  ON_3dVector CameraUp() const;

  bool CameraLocationIsLocked() const;
  bool CameraDirectionIsLocked() const;
  bool CameraUpIsLocked() const;
  bool FrustumIsLeftRightSymmetric() const;
  bool FrustumIsTopBottomSymmetric() const;

  void SetCameraLocationLock( bool bLockCameraLocation );
  void SetCameraDirectionLock( bool bLockCameraDirection ) ;
  void SetCameraUpLock( bool bLockCameraUp );
  void SetFrustumLeftRightSymmetry( bool bForceLeftRightSymmetry );
  void SetFrustumTopBottomSymmetry( bool bForceTopBottomSymmetry );
  void UnlockCamera(); 
  void UnlockFrustumSymmetry(); 

  
  bool GetCameraFrame(
      double*, 
      double*, 
      double*, 
      double*  
      ) const;

  
  ON_3dVector CameraX() const; 
  ON_3dVector CameraY() const; 
  ON_3dVector CameraZ() const; 

  
  bool IsCameraFrameWorldPlan( 
      
      
      
      
      
      
      
      int*, 
      int*, 
      int*  
      );

  bool GetCameraExtents( 
      
      
      int,           
      int,           
      const double*, 
      ON_BoundingBox& cambbox, 
      int bGrowBox = false   
      ) const;

  bool GetCameraExtents( 
      
      
      const ON_BoundingBox&, 
      ON_BoundingBox& cambbox, 
      int bGrowBox = false   
      ) const;

  bool GetCameraExtents( 
      
      
      ON_3dPoint&,     
      double,          
      ON_BoundingBox& cambox, 
      int bGrowBox = false     
      ) const;

  





  bool SetFrustum(
        double left,   
        double right,  
        double bottom, 
        double top,    
        double near_dist,   
        double far_dist     
        );
  bool GetFrustum(
        double* left,        
        double* right,       
        double* bottom,      
        double* top,         
        double* near_dist = 0, 
        double* far_dist = 0   
        ) const;

  
  
  
  
  
  
  bool SetFrustumAspect( double );

  
  bool GetFrustumAspect( double& ) const;

  
  bool GetFrustumCenter( double* ) const;

  
  
  
  
  double FrustumLeft() const;
  double FrustumRight() const;
  double FrustumBottom() const;
  double FrustumTop() const;
  double FrustumNear() const;
  double FrustumFar() const;

  



  double FrustumWidth() const; 

  



  double FrustumHeight() const; 

  



  double FrustumMinimumDiameter() const;

  



  double FrustumMaximumDiameter() const;


  bool SetFrustumNearFar(       
         const double* bboxmin,  
         const double* bboxmax   
         );
  bool SetFrustumNearFar( 
         const double* center,  
         double radius         
         );
  bool SetFrustumNearFar( 
         double near_dist, 
         double far_dist   
         );

  




















  bool ChangeToSymmetricFrustum( 
    bool bLeftRightSymmetric, 
    bool bTopBottomSymmetric,
    double target_distance
    );

  


















  bool GetPointDepth(       
         ON_3dPoint point,
         double* near_dist,
         double* far_dist,
         bool bGrowNearFar=false
         ) const;

  

















  bool GetPointDepth(       
       ON_3dPoint point,
       double* view_plane_depth
       ) const;

  































  bool GetBoundingBoxDepth(       
         ON_BoundingBox bbox,
         double* near_dist,
         double* far_dist,
         bool bGrowNearFar=false
         ) const;

  





























  bool GetBoundingBoxProjectionExtents(
    ON_BoundingBox bbox,
    ON_Interval& x_extents,
    ON_Interval& y_extents
    ) const;

  


















  bool GetSphereDepth( 
         ON_Sphere sphere,
         double* near_dist,
         double* far_dist,
         bool bGrowNearFar=false
         ) const;

  

































  bool SetFrustumNearFar( 
         double near_dist,
         double far_dist,
         double min_near_dist,
         double min_near_over_far,
         double target_dist
         );

  bool SetFrustumNearFar( 
         double near_dist,
         double far_dist,
         double min_near_dist,
         double min_near_over_far,
         double target_dist,
         double relative_depth_bias
         );

  
  
  
  
  
  
  
  
  
  
  
  
  bool GetNearPlane( 
    ON_Plane& near_plane 
    ) const;

  bool GetNearPlaneEquation( 
    ON_PlaneEquation& near_plane_equation 
    ) const;

  
  
  
  
  
  
  
  
  
  
  
  bool GetFarPlane( 
    ON_Plane& far_plane 
    ) const;

  bool GetFarPlaneEquation( 
    ON_PlaneEquation& far_plane_equation 
    ) const;

  



















  bool GetViewPlane( 
    double view_plane_depth,
    ON_Plane& view_plane 
    ) const;

  bool GetViewPlaneEquation( 
    double view_plane_depth,
    ON_PlaneEquation& view_plane_equation 
    ) const;

  












  bool GetFrustumLeftPlane( 
    ON_Plane& left_plane 
    ) const;

  bool GetFrustumLeftPlaneEquation( 
    ON_PlaneEquation& left_plane_equation 
    ) const;

  












  bool GetFrustumRightPlane( 
    ON_Plane& right_plane 
    ) const;

  bool GetFrustumRightPlaneEquation( 
    ON_PlaneEquation& right_plane_equation 
    ) const;

  












  bool GetFrustumBottomPlane( 
    ON_Plane& bottom_plane 
    ) const;

  bool GetFrustumBottomPlaneEquation( 
    ON_PlaneEquation& bottom_plane_equation 
    ) const;
  












  bool GetFrustumTopPlane( 
    ON_Plane& top_plane 
    ) const;

  bool GetFrustumTopPlaneEquation( 
    ON_PlaneEquation& top_plane_equation 
    ) const;

  
  
  
  
  
  
  
  
  
  
  
  bool GetNearRect( 
          ON_3dPoint& left_bottom,
          ON_3dPoint& right_bottom,
          ON_3dPoint& left_top,
          ON_3dPoint& right_top
          ) const;

  
  
  
  
  
  
  
  
  
  
  
  bool GetFarRect( 
          ON_3dPoint& left_bottom,
          ON_3dPoint& right_bottom,
          ON_3dPoint& left_top,
          ON_3dPoint& right_top
          ) const;

  




















  bool GetViewPlaneRect(
          double view_plane_depth,
          ON_3dPoint& left_bottom,
          ON_3dPoint& right_bottom,
          ON_3dPoint& left_top,
          ON_3dPoint& right_top
          ) const;


  
































  bool SetScreenPort(
        int port_left,
        int port_right,
        int port_bottom,
        int port_top,
        int port_near = 0,
        int port_far = 0
        );

  bool GetScreenPort(
        int* left,
        int* right,         
        int* port_bottom,
        int* port_top,      
        int* port_near=0,  
        int* port_far=0   
        ) const;

  



  int ScreenPortWidth() const;

  



  int ScreenPortHeight() const;

  bool GetScreenPortAspect( double& ) const; 

  bool GetCameraAngle( 
          double* half_diagonal_angle, 
          double* half_vertical_angle, 
          double* half_horizontal_angle 
          ) const;
  bool GetCameraAngle( 
          double* half_smallest_angle  
          ) const;
  bool SetCameraAngle( 
          double half_smallest_angle 
                  
          );

  
  
  
  
  
  
  bool GetCamera35mmLensLength( 
    double* lens_length 
    ) const;
  bool SetCamera35mmLensLength( 
    double lens_length 
    );

  
  bool GetCamera35mmLenseLength( 
    double* lens_length 
    ) const;

  
  bool SetCamera35mmLenseLength( 
    double lens_length 
    );

  bool GetXform( 
         ON::coordinate_system srcCS,
         ON::coordinate_system destCS,
         ON_Xform& matrix      
         ) const;

  













  bool GetFrustumLine( 
            double screenx, 
            double screeny, 
            ON_Line& world_line
            ) const;

  
  bool GetWorldToScreenScale( 
    const ON_3dPoint& point_in_frustum, 
    double* pixels_per_unit             
    ) const;

  bool GetCoordinateSprite(
         int,        
         int, int,   
         int[3],     
         double [3][2]  
         ) const;

  
  
  
  bool Extents( 
         double half_view_angle,        
                        
         const ON_BoundingBox& world_bbox
         );
  bool Extents( 
         double half_view_angle,        
                        
         const ON_3dPoint& center, 
         double radius        
         );

  
  
  
  

  
  
  bool ZoomToScreenRect(
         int screen_x0, 
         int screen_y0,  
         int screen_x1, 
         int screen_y1   
         );

  
  
  
  
  
  bool DollyCamera( 
                    
          const ON_3dVector& dolly_vector 
          );

  
  
  
  bool GetDollyCameraVector(
         int screen_x0, 
         int screen_y0,  
         int screen_x1, 
         int screen_y1,  
         double proj_plane_dist,      
                      
         ON_3dVector& dolly_vector 
         ) const;

  
  
  bool DollyFrustum(
          double dolly_distance 
          );

  













  bool SetViewScale( double x, double y );
  void GetViewScale( double* x, double* y ) const;

  





  ON_Xform ClipModXform() const;

  





  ON_Xform ClipModInverseXform() const;

  



  bool ClipModXformIsIdentity() const;

  

















  ON_3dPoint FrustumCenterPoint( double target_distance ) const;

  










  ON_3dPoint TargetPoint() const;

  











  bool SetTargetPoint( ON_3dPoint target_point );

  

















  double TargetDistance( bool bUseFrustumCenterFallback ) const;

  













  static void GetPerspectiveClippingPlaneConstraints( 
        ON_3dPoint camera_location,
        unsigned int depth_buffer_bit_depth,
        double* min_near_dist,
        double* min_near_over_far
        );

  



























  double ClipCoordDepthBias(
    double relative_depth_bias,
    double clip_z, 
    double clip_w
    ) const;

  































  bool GetClipCoordDepthBiasXform( 
    double relative_depth_bias,
    ON_Xform& clip_bias
    ) const;

  









  void SetPerspectiveClippingPlaneConstraints(
        unsigned int depth_buffer_bit_depth
        );

  









  void SetPerspectiveMinNearOverFar(double min_near_over_far);

  










  double PerspectiveMinNearOverFar() const;

  









  void SetPerspectiveMinNearDist(double min_near_dist);

  










  double PerspectiveMinNearDist() const;
  
  















  bool  SetViewportId(const ON_UUID& viewport_id );

  ON_UUID ViewportId(void) const;

  







  void ChangeViewportId(const ON_UUID& viewport_id);


  






























  int InViewFrustum( 
    ON_3dPoint P
    ) const;
  int InViewFrustum( 
    const ON_BoundingBox& bbox
    ) const;
  int InViewFrustum( 
    int count, 
    const ON_3fPoint* p
    ) const;
  int InViewFrustum( 
    int count, 
    const ON_3dPoint* p
    ) const;
  int InViewFrustum( 
    int count, 
    const ON_4dPoint* p
    ) const;

  
protected:

  
  
  bool m_bValidCamera;
  bool m_bValidFrustum;
  bool m_bValidPort;
  unsigned char m_reserved1;

  

  
  ON::view_projection m_projection;

  
  
  
  
  
  
  

  
  
  
  
  bool m_bLockCamUp;
  bool m_bLockCamDir;
  bool m_bLockCamLoc;
  unsigned char m_frustum_symmetry_flags; 
                                          
  ON_3dPoint m_CamLoc;  
  ON_3dVector m_CamDir; 
  ON_3dVector m_CamUp;  

  
  ON_3dVector m_CamX;
  ON_3dVector m_CamY;
  ON_3dVector m_CamZ;

  
  
  
  
  
  double m_frus_left,   m_frus_right; 
  double m_frus_bottom, m_frus_top;   
  double m_frus_near,   m_frus_far;   
                                      
  

  
  
  
  
  
  int m_port_left,   m_port_right; 
  int m_port_bottom, m_port_top;   
                                   
                                   
                                   
                                   
                                   
  int m_port_near,   m_port_far;   
                                   
                                   


  
  
  
  
  
  ON_3dPoint m_target_point;

private:
  
  
  
  ON_UUID m_viewport_id;

  bool SetCameraFrame(); 

  
  
  
  
  

  





  bool SetClipModXform( ON_Xform clip_mod_xform );
  ON_Xform m_clip_mods;
  ON_Xform m_clip_mods_inverse;

  
  
  double m__MIN_NEAR_DIST;
  double m__MIN_NEAR_OVER_FAR;

public:
  static const double DefaultNearDist;        
  static const double DefaultFarDist;         
  static const double DefaultMinNearDist;     
  static const double DefaultMinNearOverFar;  
};


bool 
ON_GetViewportRotationAngles( 
    const ON_3dVector&, 
    const ON_3dVector&, 
    const ON_3dVector&, 
    double*, 
    double*, 
    double*  
    );


bool
ON_ViewportFromRhinoView( 
        ON::view_projection, 
        const ON_3dPoint&, 
        double, 
        double, 
        double, 
        double, 
        double, 
        int, 
        int, 
        ON_Viewport&
        );


















bool
ON_IntersectViewFrustumPlane(
          const ON_Viewport& vp,
          const ON_PlaneEquation& plane_equation, 
          ON_SimpleArray<ON_3dPoint>& points 
          );



































class ON_Line;
class ON_BrepFace;
class ON_3dPoint;

typedef int  ( *TEXMAP_INTERSECT_LINE_SURFACE )( const ON_Line*, const ON_BrepFace*, ON_SimpleArray<ON_X_EVENT>& );
typedef bool ( *TEXMAP_BREP_FACE_CLOSEST_POINT )( const ON_BrepFace*, const ON_3dPoint*, ON_3dPoint& );

class  ON_TextureMapping : public ON_Object
{
public:
	protected: static void* m_s_ON_TextureMapping_ptr; public: static const ON_ClassId m_ON_TextureMapping_class_id; static ON_TextureMapping * Cast( ON_Object* ); static const ON_TextureMapping * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_TextureMapping( const ON_Object*, ON_Object* ); public: ON_TextureMapping * Duplicate() const;;

	ON_TextureMapping();
	~ON_TextureMapping();

	
  
	ON_TextureMapping(const ON_TextureMapping& src);
	ON_TextureMapping& operator=(const ON_TextureMapping& src);

  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  void Dump( ON_TextLog& ) const;

  
  unsigned int SizeOf() const;

  
  ON_BOOL32 Write(
         ON_BinaryArchive& binary_archive
       ) const;

  
  ON_BOOL32 Read(
         ON_BinaryArchive& binary_archive
       );

  void Default();

  virtual
  ON_UUID ModelObjectId() const;

	



	bool RequiresVertexNormals() const;
	bool IsPeriodic(void) const;

  




	bool SetSurfaceParameterMapping(void);

  





































  bool SetPlaneMapping(
            const ON_Plane& plane,
            const ON_Interval& dx,
            const ON_Interval& dy,
            const ON_Interval& dz
            );

  






















	bool SetCylinderMapping( 
		 const ON_Cylinder& cylinder,
		 bool bIsCapped
	);

  












	bool SetSphereMapping( 
		 const ON_Sphere& sphere
	);

  

















































	bool SetBoxMapping( 
		 const ON_Plane& plane,
		 ON_Interval dx,
		 ON_Interval dy,
		 ON_Interval dz,
     bool bIsCapped
	);

	


















	bool GetMappingPlane(
		 ON_Plane& plane,
		 ON_Interval& dx,
		 ON_Interval& dy,
		 ON_Interval& dz
	   ) const;

	













	bool GetMappingCylinder( 
		 ON_Cylinder& cylinder
	) const;

	













	bool GetMappingSphere( 
		 ON_Sphere& sphere
	) const;

	



























	bool GetMappingBox( 
		 ON_Plane& plane,
		 ON_Interval& dx,
		 ON_Interval& dy,
		 ON_Interval& dz
	) const;


  










  bool ReverseTextureCoordinate( int dir );

  










  bool SwapTextureCoordinate( int i, int j );

  












  bool TileTextureCoordinate( int dir, double count, double offset );

  




































  virtual
  int Evaluate( 
    const ON_3dPoint& P,
    const ON_3dVector& N,
    ON_3dPoint* T
    ) const;

  virtual
  int Evaluate( 
    const ON_3dPoint& P,
    const ON_3dVector& N,
    ON_3dPoint* T,
	  const ON_Xform& P_xform,
    const ON_Xform& N_xform
    ) const;

  int EvaluatePlaneMapping( 
    const ON_3dPoint& P,
    const ON_3dVector& N,
    ON_3dPoint* T
    ) const;

  int EvaluateSphereMapping( 
    const ON_3dPoint& P,
    const ON_3dVector& N,
    ON_3dPoint* T
    ) const;

  int EvaluateCylinderMapping( 
    const ON_3dPoint& P,
    const ON_3dVector& N,
    ON_3dPoint* T
    ) const;

  int EvaluateBoxMapping( 
    const ON_3dPoint& P,
    const ON_3dVector& N,
    ON_3dPoint* T
    ) const;

  
















  bool HasMatchingTextureCoordinates( 
         const ON_Mesh& mesh,
         const ON_Xform* object_xform = 0
         ) const; 
  bool HasMatchingTextureCoordinates( 
         const class ON_MappingTag& tag,
         const ON_Xform* object_xform = 0
         ) const; 

  












































  bool GetTextureCoordinates( 
    const ON_Mesh& mesh, 
    ON_SimpleArray<ON_3fPoint>& T,
		const ON_Xform* mesh_xform = 0,
    bool bLazy = false,
    ON_SimpleArray<int>* Tside = 0
    ) const;

  bool GetTextureCoordinates( 
    const ON_Mesh& mesh, 
    ON_SimpleArray<ON_2fPoint>& T,
		const ON_Xform* mesh_xform = 0,
    bool bLazy = false,
    ON_SimpleArray<int>* Tside = 0
    ) const;

public:
  
  
  
  
  ON_UUID m_mapping_id;

  
  
  
  
  
  
  int m_mapping_index;

  
  
  ON_wString m_mapping_name;

  
  
  
  
  
  
  
  
  
	
  
  enum TYPE
  {
    no_mapping       = 0,

    srfp_mapping     = 1, 
    plane_mapping    = 2, 
    cylinder_mapping = 3, 
    sphere_mapping   = 4, 
    box_mapping      = 5,
    mesh_mapping_primitive = 6, 
    srf_mapping_primitive  = 7, 
    brep_mapping_primitive = 8, 

    force_32bit_mapping_type = 0xFFFFFFFF
  };

	TYPE m_type;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  enum PROJECTION
  {
    no_projection    = 0,
    clspt_projection = 1,
    ray_projection   = 2,
    force_32bit_mapping_projection = 0xFFFFFFFF
  };

  PROJECTION m_projection;

  
  
  
  
  
  
  
  
  
  
  enum TEXTURE_SPACE
  {
    single  = 0, 
    divided = 1, 
                 
                 
                 
                 
    force_32bit_texture_space = 0xFFFFFFFF
  };
  
  TEXTURE_SPACE m_texture_space;

  
  
  
  
  bool m_bCapped;

  
  
  
  
  
  
  
  
  
  
  ON_Xform m_Pxyz;
  ON_Xform m_Nxyz;

  
  
  ON_Xform m_uvw;

  
  ON_Object* m_mapping_primitive;

  static TYPE TypeFromInt( int i );
  static PROJECTION ProjectionFromInt( int i );
  static TEXTURE_SPACE TextureSpaceFromInt( int i);

  ON__UINT32 MappingCRC() const;
};















































class  ON_Texture : public ON_Object
{
public:
  protected: static void* m_s_ON_Texture_ptr; public: static const ON_ClassId m_ON_Texture_class_id; static ON_Texture * Cast( ON_Object* ); static const ON_Texture * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Texture( const ON_Object*, ON_Object* ); public: ON_Texture * Duplicate() const;;

  ON_Texture();
  ~ON_Texture();

  


  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  void Dump( ON_TextLog& ) const;

  
  unsigned int SizeOf() const;

  
  ON_BOOL32 Write(
         ON_BinaryArchive& binary_archive
       ) const;

  
  ON_BOOL32 Read(
         ON_BinaryArchive& binary_archive
       );

  void Default();

  int Compare( const ON_Texture& other ) const; 

  










  bool ReverseTextureCoordinate( int dir );

  










  bool SwapTextureCoordinate( int i, int j );

  












  bool TileTextureCoordinate( int dir, double count, double offset );

  










  bool IsTiled( int dir, double* count, double* offset ) const;


  ON_UUID m_texture_id;

  
  enum MAPPING_CHANNEL
  {
    tc_channel      = 0,     
                             
    default_channel = 1,	   
							               
    srfp_channel = 0xFFFFFFFE, 
    emap_channel = 0xFFFFFFFF  
  };

  
  
  
  
  
  
  
  
  
  int m_mapping_channel_id;

  
  
  
  
  
  
  ON_wString m_filename;
  bool m_filename_bRelativePath;

  
  
  
  
  bool m_bOn;

  
  
  
  enum TYPE
  {
    no_texture_type = 0,

    bitmap_texture       = 1, 
    bump_texture         = 2, 
    transparency_texture = 3, 

    
    emap_texture = 86, 

    force_32bit_texture_type = 0xFFFFFFFF
  };

  TYPE m_type;

  
  
  enum MODE
  {
    no_texture_mode  = 0,
    modulate_texture = 1,  
    decal_texture    = 2,  
    blend_texture    = 3,  
                           
                           

    force_32bit_texture_mode = 0xFFFFFFFF
  };

  MODE m_mode;

  enum FILTER
  {
    nearest_filter = 0, 
    linear_filter  = 1, 

    force_32bit_texture_filter = 0xFFFFFFFF
  };
  
  
  
  
  FILTER m_minfilter;  

  
  
  
  FILTER m_magfilter;

  enum WRAP
  {
    repeat_wrap      = 0,
    clamp_wrap       = 1,

    force_32bit_texture_wrap = 0xFFFFFFFF
  };

  WRAP m_wrapu;
  WRAP m_wrapv;
  WRAP m_wrapw;

  
  bool m_bApply_uvw; 
  ON_Xform m_uvw;

  
  
  
  ON_Color m_border_color;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_Color m_transparent_color;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_UUID m_transparency_texture_id;

  
  
  
  
  
  ON_Interval m_bump_scale;

  
  
  
  
  
  
  
  
  
  
  
  
  
  double m_blend_constant_A;
  double m_blend_A[4];
  ON_Color m_blend_constant_RGB;
  double m_blend_RGB[4];

  
  
  
  
  int m_blend_order;

  
  
  
  
  
  ON_UUID m_runtime_ptr_id;
  const void* m_runtime_ptr;

  static TYPE   TypeFromInt( int i );
  static MODE   ModeFromInt( int i );
  static FILTER FilterFromInt( int i );
  static WRAP   WrapFromInt( int i );
};








































class  ON_Material : public ON_Object
{
  protected: static void* m_s_ON_Material_ptr; public: static const ON_ClassId m_ON_Material_class_id; static ON_Material * Cast( ON_Object* ); static const ON_Material * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Material( const ON_Object*, ON_Object* ); public: ON_Material * Duplicate() const;;

public:
  static double MaxShine();			

  ON_Material();					
  ~ON_Material();					
  

  bool operator==(const ON_Material&) const; 
  bool operator!=(const ON_Material&) const; 

  void Default();

  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  ON::object_type ObjectType() const;

  
  ON_UUID ModelObjectId() const;


  
  

  
  int Compare( const ON_Material& other ) const; 

  
  ON_Color Ambient() const;
  
  ON_Color Diffuse() const;
  
  ON_Color Emission() const;
  
  ON_Color Specular() const;

  
  void SetAmbient(  ON_Color );
  
  void SetDiffuse(  ON_Color );
  
  void SetEmission( ON_Color );
  
  void SetSpecular( ON_Color );

  
  double Shine() const;
  void SetShine( double );         

  
  double Transparency() const;
  void SetTransparency( double );  

  
  int MaterialIndex() const;
  
  void SetMaterialIndex( int );

  
  ON_UUID MaterialPlugInUuid() const;

  
  void SetMaterialPlugInUuid( ON_UUID );

  
  const wchar_t* MaterialName() const;

  
  void SetMaterialName( const wchar_t* );

  
  
  ON_UUID m_material_id;

  
  
  
  
  
  int m_material_index;

  
  ON_wString m_material_name;  
  
  ON_wString m_flamingo_library; 
                                 

  ON_Color   m_ambient;
  ON_Color   m_diffuse;
  ON_Color   m_emission;
  ON_Color   m_specular;
  ON_Color   m_reflection;
  ON_Color   m_transparent;
  double     m_index_of_refraction; 
  double     m_reflectivity; 
  double     m_shine;        
  double     m_transparency; 

  bool m_bShared; 
  
  
  
  
  
  

  bool m_bDisableLighting; 
  
  
  
  
  
  
  
  

private:
  unsigned char m_reserved1[2];

  unsigned char m_reserved2[4];

public:

  










  int FindTexture(
    ON_UUID texture_id
    ) const;

  










































  int FindTexture(
    const wchar_t* filename,
    ON_Texture::TYPE type,
    int i0 = -1
    ) const;

  














  int AddTexture( 
    const ON_Texture& tx
    );

  













  int AddTexture(
    const wchar_t* filename,
    ON_Texture::TYPE type 
    );

  









  int DeleteTexture(
    const wchar_t* filename,
    ON_Texture::TYPE type 
    );

  ON_ObjectArray<ON_Texture> m_textures;

  

















  ON_SimpleArray<ON_UuidIndex> m_material_channel;

  ON_UUID m_plugin_id; 

private:
  static double m_max_shine;
  bool ReadV3Helper( ON_BinaryArchive& file, int minor_version );
  bool WriteV3Helper( ON_BinaryArchive& file ) const;
};



































class  ON_Layer : public ON_Object
{
  protected: static void* m_s_ON_Layer_ptr; public: static const ON_ClassId m_ON_Layer_class_id; static ON_Layer * Cast( ON_Object* ); static const ON_Layer * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Layer( const ON_Object*, ON_Object* ); public: ON_Layer * Duplicate() const;;

public:

  ON_Layer();
  ~ON_Layer();
  
  

  
  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  ON::object_type ObjectType() const;

  ON_UUID ModelObjectId() const;

  
  
  

  void Default();

  bool SetLayerName( const char* );
  bool SetLayerName( const wchar_t* );
	const ON_wString& LayerName() const;

  















  static const wchar_t* LayerNameReferenceDelimiter();

  











  static const wchar_t* LayerNamePathDelimiter();

  








  static bool GetLeafName( const wchar_t* layer_name, ON_wString& leaf_name);

  








  static bool GetParentName( const wchar_t* layer_name, ON_wString& parent_path_name );

  













  static bool RemoveReferenceName( const wchar_t* layer_name, ON_wString& layer_path_name );

  








  static bool GetReferenceName( const wchar_t* layer_name, ON_wString& reference_name );

  
  
  
  enum PER_VIEWPORT_SETTINGS
  {
    per_viewport_none              =  0,

    per_viewport_id               =  1,
    per_viewport_color            =  2,
    per_viewport_plot_color       =  4,
    per_viewport_plot_weight      =  8,
    per_viewport_visible          = 16,
    per_viewport_persistent_visibility = 32,

    per_viewport_all_settings     = 0xFFFFFFFF
    
  };

 
















  bool HasPerViewportSettings(
    ON_UUID viewport_id,
    unsigned int settings_mask
    ) const;

  








  bool HasPerViewportSettings(
    const ON_UUID& viewport_id
    ) const;


  











  bool CopyPerViewportSettings( 
    ON_UUID source_viewport_id,
    ON_UUID destination_viewport_id
    );


  


















  bool CopyPerViewportSettings( 
    const ON_Layer& source_layer,
    ON_UUID viewport_id,
    unsigned int settings_mask
    );

  








  void DeletePerViewportSettings( 
    const ON_UUID& viewport_id 
    ) const;

  








  void CullPerViewportSettings( 
    int viewport_id_count, 
    const ON_UUID* viewport_id_list
    );

  




  ON__UINT32 PerViewportSettingsCRC() const;

  










	void SetColor( ON_Color layer_color ); 

  










  void SetPerViewportColor( ON_UUID viewport_id, ON_Color layer_color );

  
  __declspec(deprecated) void SetColor( ON_Color, const ON_UUID& );

  








	ON_Color Color() const;

  








  ON_Color PerViewportColor( ON_UUID viewport_id ) const;

  
	__declspec(deprecated) ON_Color Color( const ON_UUID& ) const;

  









  void DeletePerViewportColor( const ON_UUID& viewport_id );

  










	void SetPlotColor( ON_Color plot_color ); 

  void SetPerViewportPlotColor( ON_UUID viewport_id, ON_Color plot_color );

  
  __declspec(deprecated)	void SetPlotColor( ON_Color, const ON_UUID& ); 

  




	ON_Color PlotColor() const;

  








	ON_Color PerViewportPlotColor( ON_UUID viewport_id ) const;
  
  
  __declspec(deprecated)	ON_Color PlotColor( const ON_UUID& ) const;

  









  void DeletePerViewportPlotColor( const ON_UUID& viewport_id );

  







	bool SetLinetypeIndex( int linetype_index );

  




	int LinetypeIndex() const;

  







  bool IsVisible() const;

  











  void SetVisible( bool bVisible );

  
























  bool PersistentVisibility() const;

  












  void SetPersistentVisibility( bool bPersistentVisibility );

  











  void UnsetPersistentVisibility();
    
  









	bool PerViewportIsVisible( ON_UUID viewport_id ) const;	

   
  __declspec(deprecated) bool IsVisible( const ON_UUID& ) const; 

  













  void SetPerViewportVisible( ON_UUID viewport_id, bool bVisible );
  
   
  __declspec(deprecated) void SetVisible( bool, const ON_UUID& );

  





















  bool PerViewportPersistentVisibility( ON_UUID viewport_id ) const;

  












  void SetPerViewportPersistentVisibility( ON_UUID viewport_id, bool bPersistentVisibility );

  void UnsetPerViewportPersistentVisibility( ON_UUID viewport_id );    

  









  void DeletePerViewportVisible( const ON_UUID& viewport_id );

  













  void GetPerViewportVisibilityViewportIds(
    ON_SimpleArray<ON_UUID>& viewport_id_list
    ) const;

  





  bool IsLocked() const;

  








  void SetLocked( bool bLocked );

  























  bool PersistentLocking() const;

  












  void SetPersistentLocking(bool bPersistentLocking);

  










  void UnsetPersistentLocking();

  



  bool IsVisibleAndNotLocked() const;

  



  bool IsVisibleAndLocked() const;

  
  
  
  
  
  
  bool SetRenderMaterialIndex( int ); 
  int RenderMaterialIndex() const;

  bool SetLayerIndex( int ); 
  int LayerIndex() const;

  bool SetIgesLevel( int ); 
  int IgesLevel() const;

  







  double PlotWeight() const;
  
  double PerViewportPlotWeight( ON_UUID viewport_id ) const;

   
  __declspec(deprecated) double PlotWeight( const ON_UUID& ) const;

  







  void SetPlotWeight(double plot_weight_mm);

  







  void SetPerViewportPlotWeight(ON_UUID viewport_id, double plot_weight_mm);

   
  __declspec(deprecated) void SetPlotWeight(double, const ON_UUID& );

  









  void DeletePerViewportPlotWeight( const ON_UUID& viewport_id );

  







  int UpdateViewportIds( 
    const ON_UuidPairList& viewport_id_map 
    );

public:

  int m_layer_index;       
  ON_UUID m_layer_id;
  ON_UUID m_parent_layer_id; 
                             
                             
                             
                             

  int m_iges_level;        



  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int m_material_index; 
  ON_RenderingAttributes m_rendering_attributes;
  
  int m_linetype_index;    
  
  
  
  
  
  
  
  
  
  
  ON_Color m_color;
  ON_UUID m_display_material_id;

  
  ON_Color m_plot_color;   
                           
  double m_plot_weight_mm; 
                           
                           
  ON_wString m_name;

  bool m_bVisible;  
  bool m_bLocked;   
  bool m_bExpanded; 
                    
                    


  
  
  
  
  enum LAYER_SETTINGS
  {
    no_layer_settings = 0,
    userdata_settings = 1,
    color_settings = 2,
    plot_color_settings = 4,
    plot_weight_settings = 8,
    visible_settings = 16,
    locked_settings = 32,
    all_layer_settings = 0xFFFFFFFF
  };

  






  static unsigned int Differences( const ON_Layer& layer0, const ON_Layer& layer1 );

  









  void Set( unsigned int settings, const ON_Layer& settings_values  );

  












  void SaveSettings( unsigned int settings, bool bUpdate );

  






  unsigned int SavedSettings() const;

  












  bool GetSavedSettings( ON_Layer& layer, unsigned int& settings ) const;
  
private:
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  unsigned char m_extension_bits;
};


































 bool ON_IsHairlinePrintWidth( double width_mm );



 double ON_HairlinePrintWidth();







class  ON_Linetype : public ON_Object
{
  protected: static void* m_s_ON_Linetype_ptr; public: static const ON_ClassId m_ON_Linetype_class_id; static ON_Linetype * Cast( ON_Object* ); static const ON_Linetype * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Linetype( const ON_Object*, ON_Object* ); public: ON_Linetype * Duplicate() const;;

public:

  



  ON_Linetype();

  ~ON_Linetype();


  



  void Default();

  



  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  



  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  



  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  
  ON_UUID ModelObjectId() const;


  
  
  

  


  bool SetLinetypeName( const char*);
  bool SetLinetypeName( const wchar_t*);
	const wchar_t* LinetypeName() const;

  




  bool SetLinetypeIndex( int);
  int LinetypeIndex() const;

  



  double PatternLength() const;


  



  int SegmentCount() const;

  





  int AppendSegment( const ON_LinetypeSegment& segment);

  








  bool RemoveSegment( int index );

  



  bool SetSegment( int index, const ON_LinetypeSegment& segment);

  



  bool SetSegment( int index, double length, ON_LinetypeSegment::eSegType type);

  



  ON_LinetypeSegment Segment( int index) const;

  




  ON_SimpleArray<ON_LinetypeSegment>& Segments();
  const ON_SimpleArray<ON_LinetypeSegment>& Segments() const;

public:
  int m_linetype_index;
  ON_UUID m_linetype_id;    
  ON_wString m_linetype_name;

private:
  ON_SimpleArray<ON_LinetypeSegment> m_segments;
};
























class  ON_Group : public ON_Object
{
  protected: static void* m_s_ON_Group_ptr; public: static const ON_ClassId m_ON_Group_class_id; static ON_Group * Cast( ON_Object* ); static const ON_Group * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Group( const ON_Object*, ON_Object* ); public: ON_Group * Duplicate() const;;
public:
  ON_Group();
  ~ON_Group();
  
  

  
  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  
  
  
  void SetGroupName( const wchar_t* );
  void SetGroupName( const char* );
  
  void GetGroupName( ON_wString& ) const;
  const wchar_t* GroupName() const;

  void SetGroupIndex(int);
  int GroupIndex() const;

public:
  ON_wString m_group_name;
  int m_group_index;
  ON_UUID m_group_id;
};























class  ON_Font : public ON_Object
{
  protected: static void* m_s_ON_Font_ptr; public: static const ON_ClassId m_ON_Font_class_id; static ON_Font * Cast( ON_Object* ); static const ON_Font * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Font( const ON_Object*, ON_Object* ); public: ON_Font * Duplicate() const;;
public:
  ON_Font();
  ~ON_Font();
  

  














  bool CreateFontFromFaceName( 
    const wchar_t* face_name,
    bool bBold,
    bool bItalic 
    );


  ON_Font( const LOGFONT& logfont );
  ON_Font& operator=( const LOGFONT& logfont );


  
  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  void Dump( ON_TextLog& ) const; 

  
  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  
  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  
  ON_UUID ModelObjectId() const;

  
  
  

  enum 
  { 



    

    
    
    
    
    
    
    
    
    
    
    
    
    
    face_name_size = 65,

    
    bold_weight   = 700,
    medium_weight = 500,
    normal_weight = 400,
    light_weight  = 300,

    
    default_charset = 1,
    symbol_charset  = 2,















    normal_font_height = 256
  }; 

  
  static 
  const double m_default_linefeed_ratio;

  static
  const int m_metrics_char; 
                            
                            

  



  static
  bool IsSymbolFontFaceName( 
          const wchar_t* facename
          );

  void SetFontName( const wchar_t* );
  void SetFontName( const char* );
  
  void GetFontName( ON_wString& ) const;
  const wchar_t* FontName() const;

  void SetFontIndex(int);
  int FontIndex() const;

  



  double LinefeedRatio() const;

  void SetLinefeedRatio( double linefeed_ratio );

  bool SetFontFaceName( const wchar_t* );
  bool SetFontFaceName( const char* );
  
  void GetFontFaceName( ON_wString& ) const;
  const wchar_t* FontFaceName() const;

  int FontWeight() const;
  void SetFontWeight( int);

  bool IsItalic() const;
  void SetIsItalic( bool );
  void SetItalic( bool );

  bool IsBold() const;
  void SetBold( bool );

  
  bool IsUnderlined() const;
  void SetUnderlined( bool );

  void Defaults();

  




  int HeightOfI() const;

  




  int HeightOfLinefeed() const;

  










  double AscentRatio() const;

  














  bool CompareFontCharacteristics( ON_Font& font_to_compare, bool bCompareName) const;


  bool SetLogFont( const LOGFONT& logfont );
  const LOGFONT& LogFont() const;


public:
  ON_wString m_font_name;      
  int        m_font_weight;    
  bool       m_font_italic;    
  bool       m_font_underlined;
  double     m_linefeed_ratio; 
  int        m_font_index;     
  ON_UUID    m_font_id;
  wchar_t    m_facename[face_name_size]; 

public:

  





  void UpdateImplementationSettings();

  
  LOGFONT m_logfont;


private:
  
  int m_I_height; 
                  
};























class  ON_Light : public ON_Geometry
{
  protected: static void* m_s_ON_Light_ptr; public: static const ON_ClassId m_ON_Light_class_id; static ON_Light * Cast( ON_Object* ); static const ON_Light * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Light( const ON_Object*, ON_Object* ); public: ON_Light * Duplicate() const;;

public:
  ON_Light();
  ~ON_Light();
  
  
  

  
  
  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  
  
  
  
  
  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  ON::object_type ObjectType() const;

  
  ON_UUID ModelObjectId() const;


  
  
  
  
  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  ON_BOOL32 Transform( 
         const ON_Xform&
         );
 
  
  
  
  

  void Default(); 

  
  
  
  
  ON_BOOL32 Enable( ON_BOOL32 = true ); 
  ON_BOOL32 IsEnabled() const;
  
  
  
  
  
  
  void SetStyle(ON::light_style);
  ON::light_style Style() const;

  const ON_BOOL32 IsPointLight() const;
  const ON_BOOL32 IsDirectionalLight() const;
  const ON_BOOL32 IsSpotLight() const;
  const ON_BOOL32 IsLinearLight() const;
  const ON_BOOL32 IsRectangularLight() const;

  ON::coordinate_system CoordinateSystem() const; 

  














  ON_BOOL32 GetLightXform( 
           const ON_Viewport& vp,
           ON::coordinate_system dest_cs, 
           ON_Xform& xform 
           ) const;

  void SetLocation( const ON_3dPoint& );
  void SetDirection( const ON_3dVector& );

  ON_3dPoint Location() const;
  ON_3dVector Direction() const;
  ON_3dVector PerpindicularDirection() const;

  double Intensity() const; 
  void SetIntensity(double);

  double PowerWatts() const;
  double PowerLumens() const;
  double PowerCandela() const;
  
  void SetPowerWatts( double );
  void SetPowerLumens( double );
  void SetPowerCandela( double );

  
  
  
  
  void SetAmbient(  ON_Color );
  void SetDiffuse(  ON_Color );
  void SetSpecular( ON_Color );
  ON_Color Ambient() const;
  ON_Color Diffuse() const;
  ON_Color Specular() const;

  
  
  
  
  
  void SetAttenuation(double,double,double);
  void SetAttenuation(const ON_3dVector&);
  ON_3dVector Attenuation() const;
  double Attenuation(double) const; 
                                    

  
  
  
  
  
  
  
  void SetSpotAngleDegrees( double );
  double SpotAngleDegrees() const;

  void SetSpotAngleRadians( double );
  double SpotAngleRadians() const;

  
  
  
  
  
  
  
  
  
  void SetSpotExponent( double );
  double SpotExponent() const;

  
  
  
  
  
  
  void SetHotSpot( double );
  double HotSpot() const;

  
  bool GetSpotLightRadii( double* inner_radius, double* outer_radius ) const;


  
  
  
  
  
  void SetLength( const ON_3dVector& );
  ON_3dVector Length() const;

  void SetWidth( const ON_3dVector& );
  ON_3dVector Width() const;

  
  
  
  
  
  
  
  void SetShadowIntensity(double);
  double ShadowIntensity() const;
                                 

  
  
  
  
  void SetLightIndex( int );
  int LightIndex() const;

  
  
  
  
  void SetLightName( const char* );
  void SetLightName( const wchar_t* );
  const ON_wString& LightName() const;

public:
  int           m_light_index;
  ON_UUID       m_light_id;
  ON_wString    m_light_name;

  ON_BOOL32                 m_bOn;   
  ON::light_style      m_style; 

  ON_Color m_ambient;
  ON_Color m_diffuse;
  ON_Color m_specular;
  
  ON_3dVector m_direction; 
  ON_3dPoint  m_location;  
  ON_3dVector m_length;    
                           
  ON_3dVector m_width;     
                           
                           

  double      m_intensity; 
                           
                           
                           
                           
                           
  double      m_watts;     
                           
                           

  
  double       m_spot_angle;    
  double       m_spot_exponent; 
                                
                                
  double       m_hotspot;       

  
  ON_3dVector m_attenuation;    
                                
                                

  
  double       m_shadow_intensity; 
};





























class  ON_Point : public ON_Geometry
{
public:
  ON_3dPoint point;

  ON_Point();
  ON_Point(const ON_Point&);
  ON_Point(const ON_3dPoint&);
  ON_Point(double,double,double);
  ~ON_Point();
  ON_Point& operator=(const ON_Point&);
  ON_Point& operator=(const ON_3dPoint&);
  
  operator double*();
  operator const double*() const;
  operator ON_3dPoint*();
  operator const ON_3dPoint*() const;
  operator ON_3dPoint&();
  operator const ON_3dPoint&() const;

  
  
  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  ON::object_type ObjectType() const;

  
  
  
  

  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  bool IsDeformable() const;

  
  bool MakeDeformable();

  ON_BOOL32 SwapCoordinates(
        int, int        
        );

private:
  protected: static void* m_s_ON_Point_ptr; public: static const ON_ClassId m_ON_Point_class_id; static ON_Point * Cast( ON_Object* ); static const ON_Point * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Point( const ON_Object*, ON_Object* ); public: ON_Point * Duplicate() const;;
};





























class  ON_PointCloud : public ON_Geometry
{
  protected: static void* m_s_ON_PointCloud_ptr; public: static const ON_ClassId m_ON_PointCloud_class_id; static ON_PointCloud * Cast( ON_Object* ); static const ON_PointCloud * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_PointCloud( const ON_Object*, ON_Object* ); public: ON_PointCloud * Duplicate() const;;

public:
  ON_PointCloud();
  ON_PointCloud(
    int  
    );
  ON_PointCloud( const ON_PointCloud& );
  ~ON_PointCloud();
  ON_PointCloud& operator=( const ON_PointCloud& );

  ON_3dPoint& operator[](int);
  const ON_3dPoint& operator[](int) const;

  








  ON_3dPoint Point( ON_COMPONENT_INDEX ci ) const;

  void Destroy();

  




  void EmergencyDestroy();

  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  void Dump( ON_TextLog& ) const; 

  
  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  
  ON_BOOL32 Read( ON_BinaryArchive& );

  
  ON::object_type ObjectType() const;

  
  int Dimension() const;

  
  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  
	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  
  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  bool IsDeformable() const;

  
  bool MakeDeformable();

  
  ON_BOOL32 SwapCoordinates(
        int, int        
        );

  
















  bool GetClosestPoint( 
          ON_3dPoint P,
          int* closest_point_index,
          double maximum_distance = 0.0
          ) const;


  
  
  
  int PointCount() const;
  void AppendPoint( const ON_3dPoint& );
  void InvalidateBoundingBox(); 

  
  void SetOrdered(bool bOrdered); 
  bool IsOrdered() const; 

  
  bool HasPlane() const; 
  void SetPlane( const ON_Plane& );
  const ON_Plane& Plane();
  double Height(int);

  



  bool HasPointNormals() const;

  



  bool HasPointColors() const;


  



  int HiddenPointCount() const;

  



  void DestroyHiddenPointArray();

  






  const bool* HiddenPointArray() const;

  






  void SetHiddenPointFlag( int point_index, bool bHidden );

  








  bool PointIsHidden( int point_index ) const;

  
  
  ON_3dPointArray m_P;

  
  
  
  
  
  ON_SimpleArray<ON_3dVector> m_N;

  
  
  
  
  
  ON_SimpleArray<ON_Color> m_C;

  
  
  
  
  
  
  ON_SimpleArray<bool> m_H;
  int m_hidden_count;

  ON_Plane m_plane;
  ON_BoundingBox m_bbox;
  unsigned int m_flags; 
                        

};








































class ON_CurveProxy;
class  ON_CurveProxy : public ON_Curve
{
  protected: static void* m_s_ON_CurveProxy_ptr; public: static const ON_ClassId m_ON_CurveProxy_class_id; static ON_CurveProxy * Cast( ON_Object* ); static const ON_CurveProxy * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_CurveProxy( const ON_Object*, ON_Object* ); public: ON_CurveProxy * Duplicate() const;;

public:
  
  void DestroyRuntimeCache( bool bDelete = true );

public:
  ON_CurveProxy();
  ON_CurveProxy( const ON_CurveProxy& );
  ON_CurveProxy( const ON_Curve* );
  ON_CurveProxy( const ON_Curve*, ON_Interval );

  ON_CurveProxy& operator=(const ON_CurveProxy&);

  virtual ~ON_CurveProxy();

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  






  void SetProxyCurve( const ON_Curve* real_curve );

  













  void SetProxyCurve( const ON_Curve* real_curve, 
                      ON_Interval real_curve_subdomain
                      );

  



  const ON_Curve* ProxyCurve() const;

  












  bool SetProxyCurveDomain( ON_Interval proxy_curve_subdomain );


  









  ON_Interval ProxyCurveDomain() const;

  




  bool ProxyCurveIsReversed() const;

  





  double RealCurveParameter( double t ) const;

  





  double ThisCurveParameter( double real_curve_parameter ) const;

private:
  
  const ON_Curve* m_real_curve;

  
  
  bool m_bReversed;

  
  
  
  
  ON_Interval m_real_curve_domain;

  
  
	
  
  
	
  
  
  ON_Interval m_this_domain;

  ON_Interval RealCurveInterval( const ON_Interval* sub_domain ) const;


public:
  












  ON_Curve* DuplicateCurve() const;
  
  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write( 
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read( 
         ON_BinaryArchive&  
       );

  
  

  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  

  
  
  
  
  
  ON_Interval Domain() const;

  
  ON_BOOL32 SetDomain( 
        double t0, 
        double t1 
        );

  bool SetDomain( ON_Interval domain );

  int SpanCount() const; 

  ON_BOOL32 GetSpanVector(
    double*
    ) const; 

  int Degree( 
                  
    ) const; 

  
  ON_BOOL32 GetParameterTolerance( 
         double,  
         double*, 
         double*  
         ) const;

  ON_BOOL32 IsLinear( 
                 
        double = 2.3283064365386962890625e-10 
        ) const;

  
  int IsPolyline(
        ON_SimpleArray<ON_3dPoint>* pline_points = 0,
        ON_SimpleArray<double>* pline_t = 0
        ) const;

  ON_BOOL32 IsArc( 
              
        const ON_Plane* = 0, 
        ON_Arc* = 0, 
                         
        double = 2.3283064365386962890625e-10    
        ) const;

  ON_BOOL32 IsPlanar(
        ON_Plane* = 0, 
                           
        double = 2.3283064365386962890625e-10    
        ) const;

  ON_BOOL32 IsInPlane(
        const ON_Plane&, 
        double = 2.3283064365386962890625e-10    
        ) const;

  ON_BOOL32 IsClosed(  
        void      
        ) const;  
                  

  ON_BOOL32 IsPeriodic(  
        void 
        ) const;
  
  



































  bool GetNextDiscontinuity( 
                  ON::continuity c,
                  double t0,
                  double t1,
                  double* t,
                  int* hint=0,
                  int* dtype=0,
                  double cos_angle_tolerance=0.99984769515639123915701155881391,
                  double curvature_tolerance=1.490116119385000000e-8
                  ) const;

  
































  bool IsContinuous(
    ON::continuity c,
    double t, 
    int* hint = 0,
    double point_tolerance=2.3283064365386962890625e-10,
    double d1_tolerance=2.3283064365386962890625e-10,
    double d2_tolerance=2.3283064365386962890625e-10,
    double cos_angle_tolerance=0.99984769515639123915701155881391,
    double curvature_tolerance=1.490116119385000000e-8
    ) const;

  ON_BOOL32 Reverse();       
                        

  ON_BOOL32 Evaluate( 
         double,         
         int,            
         int,            
         double*,        
         int = 0,        
                         
                         
                         
         int* = 0        
                         
         ) const;

  
  ON_BOOL32 Trim(
    const ON_Interval& domain
    );

  
  ON_BOOL32 Split(
      double t,
      ON_Curve*& left_side,
      ON_Curve*& right_side
    ) const;

  int GetNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ON_NurbsCurve&,
        double = 0.0,
        const ON_Interval* = 0 
        ) const;

  int HasNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ) const;

  
  ON_BOOL32 GetCurveParameterFromNurbFormParameter(
        double, 
        double* 
        ) const;

  
  ON_BOOL32 GetNurbFormParameterFromCurveParameter(
        double, 
        double* 
        ) const;
};






























class ON_Curve;
class ON_NurbsSurface;
class  ON_SurfaceProxy : public ON_Surface
{
public:
  
  void DestroyRuntimeCache( bool bDelete = true );

public:
  ON_SurfaceProxy();
  ON_SurfaceProxy(const ON_Surface*);
  ON_SurfaceProxy(const ON_SurfaceProxy&);
  ON_SurfaceProxy& operator=(const ON_SurfaceProxy&);

  virtual ~ON_SurfaceProxy();

  void SetProxySurface( const ON_Surface* proxy_surface );
  const ON_Surface* ProxySurface() const;
  bool ProxySurfaceIsTransposed() const;

private:
  const ON_Surface* m_surface;
  bool m_bTransposed; 

public:
  












  virtual
  ON_Surface* DuplicateSurface() const;

  
  

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  
  

  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  

  ON_Interval Domain(
    int 
    ) const;


  











  ON_BOOL32 GetSurfaceSize( 
      double* width, 
      double* height 
      ) const;

  int SpanCount(
    int 
    ) const; 

  ON_BOOL32 GetSpanVector( 
    int, 
    double* 
    ) const; 

  int Degree( 
                  
    int 
    ) const; 


  ON_BOOL32 GetParameterTolerance( 
         int,     
         double,  
         double*, 
         double*  
         ) const;

  
  ISO IsIsoparametric(
        const ON_Curve& curve,
        const ON_Interval* curve_domain = 0
        ) const;

  
  ISO IsIsoparametric(
        const ON_BoundingBox& bbox
        ) const;

  












  ON_BOOL32 IsPlanar(
        ON_Plane* plane = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  ON_BOOL32 IsClosed(   
        int        
        ) const;

  ON_BOOL32 IsPeriodic( 
        int        
        ) const;

  ON_BOOL32 IsSingular( 
        int        
                   
        ) const;
  
  



















































  bool GetNextDiscontinuity( 
                  int dir,
                  ON::continuity c,
                  double t0,
                  double t1,
                  double* t,
                  int* hint=0,
                  int* dtype=0,
                  double cos_angle_tolerance=0.99984769515639123915701155881391,
                  double curvature_tolerance=1.490116119385000000e-8
                  ) const;

  


























  bool IsContinuous(
    ON::continuity c,
    double s, 
    double t, 
    int* hint = 0,
    double point_tolerance=2.3283064365386962890625e-10,
    double d1_tolerance=2.3283064365386962890625e-10,
    double d2_tolerance=2.3283064365386962890625e-10,
    double cos_angle_tolerance=0.99984769515639123915701155881391,
    double curvature_tolerance=1.490116119385000000e-8
    ) const;

  ON_BOOL32 Reverse(  
    int 
    );

  ON_BOOL32 Transpose(); 

  
  ON_BOOL32 Evaluate( 
         double, double, 
         int,            
         int,            
         double*,        
         int = 0,        
                         
                         
                         
                         
                         
         int* = 0        
                         
         ) const;


  ON_Curve* IsoCurve(
         int dir,
         double c
         ) const;

  int GetNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ON_NurbsSurface&,
        double = 0.0
        ) const;

  int HasNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ) const;

  bool GetSurfaceParameterFromNurbFormParameter(
        double nurbs_s, double nurbs_t,
        double* surface_s, double* surface_t
        ) const;

  bool GetNurbFormParameterFromSurfaceParameter(
        double surface_s, double surface_t,
        double* nurbs_s,  double* nurbs_t
        ) const;

private:

  protected: static void* m_s_ON_SurfaceProxy_ptr; public: static const ON_ClassId m_ON_SurfaceProxy_class_id; static ON_SurfaceProxy * Cast( ON_Object* ); static const ON_SurfaceProxy * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_SurfaceProxy( const ON_Object*, ON_Object* ); public: ON_SurfaceProxy * Duplicate() const;;
};



























class  ON_MeshParameters
{
  
public:

  enum MESH_STYLE
  {
    
    
    unset_mesh_style      =   0,
    render_mesh_fast      =   1, 
    render_mesh_quality   =   2, 
    
    render_mesh_custom    =   9,
    render_mesh_per_object = 10 
  };

  




  static 
  const ON_MeshParameters FastRenderMesh;

  




  static 
  const ON_MeshParameters QualityRenderMesh;

  













  static
  double Tolerance( double relative_tolerance, double actual_size );

  












  static
  double MinEdgeLength( double max_edge_length, double tolerance );

  ON_MeshParameters();
  ~ON_MeshParameters();
  
  
 
  bool operator!=(const ON_MeshParameters&) const;
  bool operator==(const ON_MeshParameters&) const;

  
  bool operator==(const ON_Mesh&) const;
  bool operator!=(const ON_Mesh&) const;
  
  void Dump( ON_TextLog& test_log ) const;

  void Default(); 

  







  void Set(
    double density,
    double min_edge_length = 0.0001
    );

  



  __declspec(deprecated)
  void JaggedAndFasterMeshParameters();

  



  __declspec(deprecated)
  void SmoothAndSlowerMeshParameters();

  




  void DefaultAnalysisMeshParameters();

  
  
  int Compare( const ON_MeshParameters& ) const;

  





  int CompareGeometrySettings( const ON_MeshParameters& ) const;


  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );
  ON__UINT32 DataCRC(ON__UINT32) const;


  
  
  
  
  
  bool m_bCustomSettings;    
                             
                             
                             
                             
                             
                             

  bool m_bComputeCurvature;  
                             

  bool m_bSimplePlanes;      
                             
                             
                             
                             

  bool m_bRefine;            
                             

  bool m_bJaggedSeams;       
                             
                             
                             
                             
                             

  bool m_bDoublePrecision;   
                             
                             
                             
                             
                             
  bool m_bCustomSettingsEnabled; 
                             
                             
                             
  unsigned char m_mesher;    
    
  int m_texture_range;       
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             

private:
  unsigned int m_reserved2;
public:
                           
  

  double m_tolerance; 

        
  double m_relative_tolerance; 
  double m_min_tolerance;      
                               
                               
                               
                               
                               


  double m_min_edge_length; 
                            
                            

  double m_max_edge_length; 
                            
                            

  
  double m_grid_aspect_ratio;  
                               
                               
  int    m_grid_min_count;     
  int    m_grid_max_count;     
  double m_grid_angle;         
                               
                               
  double m_grid_amplification; 
                               
                               
                               
                               

  
  double m_refine_angle;       
                               

  
  int     m_face_type;         
                               
                               
private:
  unsigned int m_reserved3;
};

class  ON_MeshCurvatureStats
{
public:
  ON_MeshCurvatureStats();
  ~ON_MeshCurvatureStats();
  ON_MeshCurvatureStats(const ON_MeshCurvatureStats& );
  ON_MeshCurvatureStats& operator=(const ON_MeshCurvatureStats&);

  void Destroy();
  void EmergencyDestroy();
  
  bool Set( ON::curvature_style,
            int,           
            const ON_SurfaceCurvature*, 
            const ON_3fVector*, 
            double = 0.0   
            );

  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );

  ON::curvature_style m_style;
  
  double m_infinity; 
                     
  int    m_count_infinite; 
  int    m_count;    
  double m_mode;     
  double m_average;  
  double m_adev;     

  ON_Interval m_range;
};






struct ON_MeshTopologyVertex
{
  
  
  int m_tope_count;

  
  
  
  
  
  const int* m_topei;

  
  
  int m_v_count;

  
  
  const int* m_vi;
};

struct ON_MeshTopologyEdge
{
  
  
  int m_topvi[2];

  
  int m_topf_count;

  
  
  const int* m_topfi;
};

struct  ON_MeshTopologyFace
{
  


























  int m_topei[4];

  




  char m_reve[4];

  







  bool IsTriangle() const;

  






  bool IsQuad() const;

  








  bool IsValid( ) const;
};

class  ON_MeshFace
{
public:
  int vi[4]; 

  





  bool IsTriangle() const;

  





  bool IsQuad() const;

  















  bool IsValid( 
        int mesh_vertex_count
        ) const;
  bool IsValid(
        int mesh_vertex_count,
        const ON_3fPoint* V
        ) const;
  bool IsValid(
        int mesh_vertex_count,
        const ON_3dPoint* V
        ) const;

  




  void Flip();

  















  bool Repair(
        int mesh_vertex_count
        );
  bool Repair(
        int mesh_vertex_count,
        const ON_3fPoint* V
        );
  bool Repair(
        int mesh_vertex_count,
        const ON_3dPoint* V
        );

  









  bool ComputeFaceNormal( const ON_3dPoint* dV, ON_3dVector& FN ) const;
  bool ComputeFaceNormal( const ON_3fPoint* fV, ON_3dVector& FN ) const;
};

struct ON_MeshFaceSide
{
  int vi[2]; 
  int fi;    
  unsigned char  side;  
  unsigned char  dir;   
  unsigned short value; 
};














void ON_SortMeshFaceSidesByVertexIndex( 
        int sides_count, 
        struct ON_MeshFaceSide* sides 
        );

struct ON_MeshPart
{
  
  
  int vi[2]; 
  int fi[2]; 
  int vertex_count;   
  int triangle_count; 
};















class  ON_MeshTopology
{
  
  
public:
  ON_MeshTopology();
  ~ON_MeshTopology();

  bool IsValid() const;

  void Dump( ON_TextLog& ) const;

  
  
  const ON_Mesh* m_mesh;

  
  
  int TopVertexCount() const;

  
  
  int TopEdgeCount() const;
  
  
  
  int TopFaceCount() const;

  







  class ON_MeshVertexRef VertexRef(ON_COMPONENT_INDEX ci) const;

  class ON_MeshVertexRef VertexRef(int topv_index) const;

  







  class ON_MeshEdgeRef EdgeRef(ON_COMPONENT_INDEX ci) const;

  class ON_MeshEdgeRef EdgeRef(int tope_index) const;

  











  class ON_MeshFaceRef FaceRef(ON_COMPONENT_INDEX ci) const;

  class ON_MeshFaceRef FaceRef(int topf_index) const;


  







  ON_3fPoint TopVertexPoint(
    int topv_index
    ) const;

  








  ON_Line TopEdgeLine(
    int tope_index
    ) const;

  
  
  
  int TopEdge(
    int vtopi0,
    int vtopi1 
    ) const;

  
  
  
  bool GetTopFaceVertices(
    int topfi,    
    int topvi[4]  
    ) const;

  












  bool SortVertexEdges( int topvi ) const;

  









  bool SortVertexEdges() const;

  










  bool TopVertexIsHidden( int topvi ) const;

  










  bool TopEdgeIsHidden( int topei ) const;

  










  bool TopFaceIsHidden( int topfi ) const;

  
  
  
  
  ON_SimpleArray<int> m_topv_map;

  
  
  
  ON_SimpleArray<ON_MeshTopologyVertex> m_topv;

  
  
  
  ON_SimpleArray<ON_MeshTopologyEdge> m_tope;

  
  
  
  
  
  
  
  ON_SimpleArray<ON_MeshTopologyFace> m_topf;

  










  int* GetIntArray(int count);

private:
  friend class ON_Mesh;

  bool Create();
  void Destroy();
  void EmergencyDestroy();

  
  struct memchunk
  {
    struct memchunk* next;
  } *m_memchunk;

  
  volatile int m_b32IsValid; 
                    
                    
                    
  int WaitUntilReady(int sleep_value) const; 

private:
  
  ON_MeshTopology(const ON_MeshTopology&);
  ON_MeshTopology& operator=(const ON_MeshTopology&);
};

struct ON_MeshNgon
{
  
  int N;

  
  
  
  
  
  int* vi;

  
  
  
  
  
  
  int* fi;
};

class  ON_MeshNgonList
{
public:
  ON_MeshNgonList();
  ~ON_MeshNgonList();
  ON_MeshNgonList(const ON_MeshNgonList&);
  ON_MeshNgonList& operator=(const ON_MeshNgonList&);


  












  bool AddNgon(int N, const int* vi, const int* fi);
  struct ON_MeshNgon* AddNgon(int N);

  



  int NgonCount() const;

  





  ON_MeshNgon* Ngon(int Ngon_index) const;

  




  bool ReserveNgonCapacity(int capacity);

  



  void Destroy();

  



  unsigned int SizeOf() const;

private:
  int m_ngons_count;
  int m_ngons_capacity;
  ON_MeshNgon* m_ngons;
  struct ON_NGON_MEMBLK* m_memblk_list;
};

class  ON_MeshPartition
{
public:
  ON_MeshPartition();
  ~ON_MeshPartition();

  
  int m_partition_max_vertex_count;
  
  int m_partition_max_triangle_count;

  
  
  
  
  
  
  
  
  ON_SimpleArray<struct ON_MeshPart> m_part;
};



class  ON_MappingTag
{
public:
  ON_MappingTag();
  void Default();
  bool Write(ON_BinaryArchive&) const;
  bool Read(ON_BinaryArchive&);
  void Dump( ON_TextLog& ) const;
  void Transform( const ON_Xform& xform );
  void Set(const ON_TextureMapping& mapping);

  




  void SetDefaultSurfaceParameterMappingTag();

  int Compare( const ON_MappingTag& other,
               bool bCompareId = true,
               bool bCompareCRC = true,
               bool bCompareXform = true
               ) const;

  



  bool IsSet() const;

  





  bool IsDefaultSurfaceParameterMapping() const;

  
  
  
  
  
  
  
  
  ON_UUID                 m_mapping_id;   
  ON_TextureMapping::TYPE m_mapping_type; 
  ON__UINT32              m_mapping_crc;  
  ON_Xform                m_mesh_xform;
};

class  ON_TextureCoordinates
{
public:
  ON_TextureCoordinates();

  ON_MappingTag   m_tag;
  int                        m_dim; 
  ON_SimpleArray<ON_3fPoint> m_T;   
};













class  ON_Mesh : public ON_Geometry
{
  protected: static void* m_s_ON_Mesh_ptr; public: static const ON_ClassId m_ON_Mesh_class_id; static ON_Mesh * Cast( ON_Object* ); static const ON_Mesh * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Mesh( const ON_Object*, ON_Object* ); public: ON_Mesh * Duplicate() const;;
public:
  ON_Mesh();
  ON_Mesh(
    int   initial_face_array_capacity,   
    int   initial_vertex_array_capacity, 
    bool  has_vertex_normals,            
    bool  has_texture_coordinates        
    );
  ON_Mesh( const ON_Mesh& );
  ON_Mesh& operator=( const ON_Mesh& );
  ~ON_Mesh();

  
  void MemoryRelocate();

  
  void DestroyRuntimeCache( bool bDelete = true );

  void Destroy();
  void EmergencyDestroy(); 
                           
                           
                           
                           
                           
                           
                           

  void DestroyTree( bool bDeleteTree = true );

  
  

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  ON_BOOL32 Read( ON_BinaryArchive& );

  ON::object_type ObjectType() const;

  
  

  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  















	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  bool IsDeformable() const;

  
  bool MakeDeformable();

  ON_BOOL32 SwapCoordinates(
        int, int        
        );

  
  bool EvaluatePoint( const class ON_ObjRef& objref, ON_3dPoint& P ) const;


  
  
  

  
  bool SetVertex(
         int,              
         const ON_3dPoint& 
         );
  bool SetVertex(
         int,              
         const ON_3fPoint& 
         );
  bool SetVertexNormal(
         int,               
         const ON_3dVector& 
         );
  bool SetVertexNormal(
         int,               
         const ON_3fVector& 
         );
  bool SetTextureCoord(
         int,               
         double, double     
         );
  bool SetTriangle(
         int, 
         int,int,int 
         );
  bool SetQuad(
         int, 
         int,int,int,int 
         );

  







  ON_MeshVertexRef VertexRef(ON_COMPONENT_INDEX ci) const;

  ON_MeshVertexRef VertexRef(int mesh_V_index) const;

  







  ON_MeshEdgeRef EdgeRef(ON_COMPONENT_INDEX ci) const;

  ON_MeshEdgeRef EdgeRef(int tope_index) const;

  







  ON_MeshFaceRef FaceRef(ON_COMPONENT_INDEX ci) const;

  ON_MeshFaceRef FaceRef(int mesh_F_index) const;

  












  ON_Geometry* MeshComponent( 
      ON_COMPONENT_INDEX ci
      ) const;

  
  int VertexCount() const;
  int FaceCount() const;
  int QuadCount() const; 
  int TriangleCount() const; 
  int InvalidFaceCount() const; 
  bool HasVertexNormals() const; 
  bool HasFaceNormals() const;
  bool HasTextureCoordinates() const;
  bool HasSurfaceParameters() const;
  bool HasPrincipalCurvatures() const;
  bool HasVertexColors() const;

  



  int HiddenVertexCount() const;

  bool GetCurvatureStats( 
         ON::curvature_style, 
         ON_MeshCurvatureStats& 
         ) const;

  void InvalidateVertexBoundingBox(); 
                             
  void InvalidateVertexNormalBoundingBox(); 
                             
  void InvalidateTextureCoordinateBoundingBox(); 
                             
  void InvalidateCurvatureStats(); 
                             
  void InvalidateBoundingBoxes(); 


  void Flip(); 

  void FlipVertexNormals(); 
  void FlipFaceNormals(); 
  void FlipFaceOrientation(); 

  void SetMeshParameters( const ON_MeshParameters& );
  const ON_MeshParameters* MeshParameters() const;
  void DeleteMeshParameters();

  
  bool UnitizeVertexNormals();
  bool UnitizeFaceNormals();
  bool CountQuads();

  



  bool ConvertQuadsToTriangles();

  














  bool ConvertTrianglesToQuads(
    double angle_tol_radians,
    double min_diagonal_length_ratio
    );

  bool ComputeFaceNormals();   
  bool ComputeFaceNormal(int); 

  














  int GetClashingFacePairs( 
    int max_pair_count,
    ON_SimpleArray< ON_2dex >& clashing_pairs
    ) const;

  




















  int CullClashingFaces( int what_to_cull );

  int CullDegenerateFaces(); 

  int CullUnusedVertices(); 

  
  
  
  bool Compact();

  bool ComputeVertexNormals();    
  
  
  
  
  bool NormalizeTextureCoordinates();

	
	
	
	
	
	bool TransposeTextureCoordinates();
	bool TransposeSurfaceParameters();
 
	
	
	
	
	
	
	
	
	bool ReverseTextureCoordinates( int dir );
	bool ReverseSurfaceParameters( int dir );
 


  
















  bool SetTextureCoordinates( 
          const class ON_TextureMapping& mapping,
					const class ON_Xform* mesh_xform = 0,
          bool bLazy = true
          );

  bool HasCachedTextureCoordinates() const;

  const ON_TextureCoordinates* CachedTextureCoordinates( 
          const ON_UUID& mapping_id 
          ) const;

  const ON_TextureCoordinates* SetCachedTextureCoordinates( 
          const class ON_TextureMapping& mapping,
					const class ON_Xform* mesh_xform = 0,
          bool bLazy = true
          );

  bool EvaluateMeshGeometry( const ON_Surface& ); 
                                                  

  
  bool CombineCoincidentVertices( 
          ON_3fVector, 
                       
          double  
                  
                  
          );

  












  bool CombineIdenticalVertices(
          bool bIgnoreVertexNormals = false,
          bool bIgnoreTextureCoordinates = false
          );

  void Append( const ON_Mesh& ); 
                                 

  










  void Append( int count, const ON_Mesh* const* meshes );
  
  













  void SetClosed(int closed);

  



  bool IsClosed() const;

  



  bool IsManifold() const;

  




  bool IsOriented() const;

  




















  bool IsManifold(
    bool bTopologicalTest,
    bool* pbIsOriented = 0,
    bool* pbHasBoundary = 0
    ) const;

  
















  void SetSolidOrientation(int solid_orientation);

  









  int SolidOrientation() const;

  










  bool IsSolid() const;

  

























  int GetVertexEdges( 
    int vcount,
    const int* vertex_index, 
    bool bNoDuplicates,
    ON_SimpleArray<ON_2dex>& edges
    ) const;


  










  int GetMeshEdges( 
    ON_SimpleArray<ON_2dex>& edges
    ) const;

  

























  int* GetVertexLocationIds( 
    int first_vid, 
    int* Vid, 
    int* Vindex
    ) const;

  



























  int GetMeshFaceSideList( 
      const int* Vid,
      struct ON_MeshFaceSide*& sides
      ) const;

  















































  int GetMeshEdgeList( 
      ON_SimpleArray<ON_2dex>& edge_list, 
      int edge_type_partition[5] 
      ) const;

  int GetMeshEdgeList( 
      ON_SimpleArray<ON_2dex>& edge_list, 
      ON_SimpleArray<int>& ci_meshtop_edge_map,
      int edge_type_partition[5] 
      ) const;

  int GetMeshEdgeList( 
      ON_SimpleArray<ON_2dex>& edge_list, 
      ON_SimpleArray<int>& ci_meshtop_edge_map,
      ON_SimpleArray<int>& ci_meshtop_vertex_map,
      int edge_type_partition[5] 
      ) const;

  
  
  
  

  








  bool CollapseEdge( int topei );

  










  bool IsSwappableEdge( int topei );


  










  bool SwapEdge( int topei );

  












  bool DeleteFace( int meshfi );

  



  void DestroyHiddenVertexArray();

  






  const bool* HiddenVertexArray() const;

  






  void SetVertexHiddenFlag( int meshvi, bool bHidden );

  








  bool VertexIsHidden( int meshvi ) const;

  











  bool FaceIsHidden( int meshvi ) const;


  
  
  
  
  
  
  
  
  
  
  
  const ON_MeshTopology& Topology() const;

  
  
  
  
  
  void DestroyTopology();

  






  bool TopologyExists() const;


  
  
  
  
  
  
  
  
  
  const ON_MeshPartition* CreatePartition( 
                int, 
                int  
                );
  const ON_MeshPartition* Partition() const;
  void DestroyPartition();

  















  ON_Mesh* MeshPart( 
    const ON_MeshPart& mesh_part,
    ON_Mesh* mesh 
    ) const;

  








  ON_Mesh* DuplicateFace( 
    int face_index,
    ON_Mesh* mesh 
    ) const;

  
  
  
  
  
  
  
  

  





  const class ON_MeshNgonList* NgonList() const;

  







  class ON_MeshNgonList* ModifyNgonList();

  



  void DestroyNgonList();

  
  
  
  
  
  
  

  























  int GetConnectedComponents( bool bUseVertexConnections, 
                              bool bTopologicalConnections, 
                              ON_SimpleArray<int>& facet_component_labels
                            ) const;

  





















  int GetConnectedComponents( bool bUseVertexConnections, 
                              bool bTopologicalConnections, 
                              ON_SimpleArray<ON_Mesh*>* components
                            ) const;


  
  
  
  

  




  bool HasSynchronizedDoubleAndSinglePrecisionVertices() const;

  















  bool HasDoublePrecisionVertices() const;

  





  void EnableDoublePrecisionVertices(bool bEnableDoublePrecisionVertices);

  







  void UpdateSinglePrecisionVertices();

  







  void UpdateDoublePrecisionVertices();

  








  void SetSinglePrecisionVerticesAsValid();

  








  void SetDoublePrecisionVerticesAsValid();

  













  bool SinglePrecisionVerticesAreValid() const;

  












  bool DoublePrecisionVerticesAreValid() const;

  



  void DestroyDoublePrecisionVertices();


  
  

  
  
  
  
  

  



























  ON_3dPointArray& DoublePrecisionVertices();
  const ON_3dPointArray& DoublePrecisionVertices() const;

  








  ON_3fPointArray& SinglePrecisionVertices();
  const ON_3fPointArray& SinglePrecisionVertices() const;

  










  ON_3fPointArray m_V;

  






  ON_3dPoint Vertex(int vertex_index) const;

  
  ON_SimpleArray<ON_MeshFace> m_F;

  
  
  
  
  ON_3fVectorArray m_N;

  
  
  
  
  ON_3fVectorArray m_FN;

  
  
  
  

  
  
  
  ON_MappingTag m_Ttag; 
  ON_2fPointArray m_T;  

  
  
  
  
  
  
  
  ON_ClassArray<ON_TextureCoordinates> m_TC;  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  


  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_2dPointArray m_S;
  ON_Interval m_srf_domain[2]; 
  double m_srf_scale[2];


  
  
  
  
  

  ON_Interval m_packed_tex_domain[2];

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  bool m_packed_tex_rotate;

  







  bool HasPackedTextureRegion() const;

  
  

  ON_SimpleArray<ON_SurfaceCurvature> m_K;  
                                            
                                            
                                            

  
  
  ON_MappingTag m_Ctag; 
  ON_SimpleArray<ON_Color> m_C;  
                                 
                                 
                                 

  
  
  ON_SimpleArray<bool> m_H; 
                            
                            
                            
  int m_hidden_count;       
                            

  
  
  const ON_Object* m_parent; 

protected:
  friend class ON_MeshVertexRef;
  friend class ON_MeshEdgeRef;
  friend class ON_MeshFaceRef;


  
  
  ON_MeshTopology m_top;

  ON_MeshParameters* m_mesh_parameters; 
                                        
  int                         m_invalid_count;
  int                         m_quad_count;
  int                         m_triangle_count;

private:
  char m_mesh_is_closed;   
  char m_mesh_is_manifold; 
  char m_mesh_is_oriented; 
  char m_mesh_is_solid;    

protected:
  
  float m_vbox[2][3]; 
  float m_nbox[2][3]; 
                      
  float m_tbox[2][2]; 
  ON_MeshCurvatureStats* m_kstat[4]; 

  
  ON_MeshPartition* m_partition;

private:
  bool Write_1( ON_BinaryArchive& ) const; 
  bool Write_2( int, ON_BinaryArchive& ) const; 
  bool Read_1( ON_BinaryArchive& );
  bool Read_2( int, ON_BinaryArchive& );
  bool WriteFaceArray( int, int, ON_BinaryArchive& ) const;
  bool ReadFaceArray( int, int, ON_BinaryArchive& );
  bool SwapEdge_Helper( int, bool );
};

class  ON_MeshVertexRef : public ON_Geometry
{
  protected: static void* m_s_ON_MeshVertexRef_ptr; public: static const ON_ClassId m_ON_MeshVertexRef_class_id; static ON_MeshVertexRef * Cast( ON_Object* ); static const ON_MeshVertexRef * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_MeshVertexRef( const ON_Object*, ON_Object* ); public: ON_MeshVertexRef * Duplicate() const;;
public:
  ON_MeshVertexRef();
  ~ON_MeshVertexRef();
  ON_MeshVertexRef& operator=(const ON_MeshVertexRef&);


  
  const ON_Mesh* m_mesh;
  
  
  
  int m_mesh_vi; 
  
  
  int m_top_vi; 


  









  ON_COMPONENT_INDEX ComponentIndex() const;

  





  const ON_MeshTopology* MeshTopology() const;

  





  ON_3dPoint Point() const;

  




  const ON_MeshTopologyVertex* MeshTopologyVertex() const;

  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;
  void Dump( ON_TextLog& ) const;
  unsigned int SizeOf() const;
  ON::object_type ObjectType() const;

  
  int Dimension() const;
  ON_BOOL32 GetBBox(
         double* boxmin,
         double* boxmax,
         int bGrowBox = false
         ) const;
  ON_BOOL32 Transform( 
         const ON_Xform& xform
         );
};

class  ON_MeshEdgeRef : public ON_Geometry
{
  protected: static void* m_s_ON_MeshEdgeRef_ptr; public: static const ON_ClassId m_ON_MeshEdgeRef_class_id; static ON_MeshEdgeRef * Cast( ON_Object* ); static const ON_MeshEdgeRef * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_MeshEdgeRef( const ON_Object*, ON_Object* ); public: ON_MeshEdgeRef * Duplicate() const;;
public:
  ON_MeshEdgeRef();
  ~ON_MeshEdgeRef();
  ON_MeshEdgeRef& operator=(const ON_MeshEdgeRef&);

  
  const ON_Mesh* m_mesh;
  
  
  int m_top_ei; 

  







  ON_COMPONENT_INDEX ComponentIndex() const;

  






  const ON_MeshTopology* MeshTopology() const;
  





  ON_Line Line() const;

  




  const ON_MeshTopologyEdge* MeshTopologyEdge() const;

  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;
  void Dump( ON_TextLog& ) const;
  unsigned int SizeOf() const;
  ON::object_type ObjectType() const;

  
  int Dimension() const;
  ON_BOOL32 GetBBox(
         double* boxmin,
         double* boxmax,
         int bGrowBox = false
         ) const;
  ON_BOOL32 Transform( 
         const ON_Xform& xform
         );
};

class  ON_MeshFaceRef : public ON_Geometry
{
  protected: static void* m_s_ON_MeshFaceRef_ptr; public: static const ON_ClassId m_ON_MeshFaceRef_class_id; static ON_MeshFaceRef * Cast( ON_Object* ); static const ON_MeshFaceRef * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_MeshFaceRef( const ON_Object*, ON_Object* ); public: ON_MeshFaceRef * Duplicate() const;;
public:
  ON_MeshFaceRef();
  ~ON_MeshFaceRef();
  ON_MeshFaceRef& operator=(const ON_MeshFaceRef&);

  
  const ON_Mesh* m_mesh;

  
  int m_mesh_fi; 

  







  ON_COMPONENT_INDEX ComponentIndex() const;

  





  const ON_MeshTopology* MeshTopology() const;

  



  const ON_MeshFace* MeshFace() const;

  




  const ON_MeshTopologyFace* MeshTopologyFace() const;

  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;
  void Dump( ON_TextLog& ) const;
  unsigned int SizeOf() const;
  ON::object_type ObjectType() const;

  
  int Dimension() const;
  ON_BOOL32 GetBBox(
         double* boxmin,
         double* boxmax,
         int bGrowBox = false
         ) const;
  ON_BOOL32 Transform( 
         const ON_Xform& xform
         );
};
















ON_Mesh* ON_ControlPolygonMesh( 
          const ON_NurbsSurface& nurbs_surface, 
          bool bCleanMesh,
          ON_Mesh* input_mesh = 0
          );












ON_3dVector ON_TriangleNormal(
        const ON_3dPoint& A,
        const ON_3dPoint& B,
        const ON_3dPoint& C
        );























bool ON_GetTrianglePlaneEquation(
        const ON_3dPoint& A,
        const ON_3dPoint& B,
        const ON_3dPoint& C,
        double* a,
        double* b,
        double* c,
        double* d,
        double* evaluation_tol
        );
























class  ON_PointGrid : public ON_Geometry
{
public:
  ON_PointGrid();
  ON_PointGrid(const ON_PointGrid&);
  ON_PointGrid(
          int,  
          int   
          );

  void Initialize(void);  

  ON_BOOL32 Create( 
          int,  
          int   
          );

  void Destroy();

  virtual ~ON_PointGrid();
  void EmergencyDestroy(); 

	ON_PointGrid& operator=(const ON_PointGrid&);

  
  ON_3dPoint* operator[](int);             
  const ON_3dPoint* operator[](int) const; 
  
  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  ON::object_type ObjectType() const;

  
  

  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  















	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  bool IsDeformable() const;

  
  bool MakeDeformable();

  ON_BOOL32 SwapCoordinates(
        int, int        
        );

  
  

  ON_BOOL32 IsClosed( 
        int 
        ) const;

  int PointCount(   
        int         
        ) const;

  int PointCount(   
        void
        ) const;

  ON_3dPoint& Point(
        int, int 
        );

  ON_3dPoint Point(
        int, int 
        ) const;

  double* PointArray();

  const double* PointArray() const;

  int PointArrayStride(  
        int         
        ) const;

  ON_BOOL32 SetPoint(      
        int, int, 
        const ON_3dPoint& 
        );

  ON_BOOL32 GetPoint(              
        int, int,   
        ON_3dPoint&      
        ) const;

  ON_BOOL32 Reverse(  
    int 
    );

  ON_BOOL32 Transpose(); 

  
  
protected:

  int m_point_count[2];   
  int m_point_stride0;    
  ON_3dPointArray m_point;
  

private:
  static ON_3dPoint m_no_point; 

  protected: static void* m_s_ON_PointGrid_ptr; public: static const ON_ClassId m_ON_PointGrid_class_id; static ON_PointGrid * Cast( ON_Object* ); static const ON_PointGrid * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_PointGrid( const ON_Object*, ON_Object* ); public: ON_PointGrid * Duplicate() const;;
};
























class ON_LineCurve;
class  ON_LineCurve : public ON_Curve
{
  protected: static void* m_s_ON_LineCurve_ptr; public: static const ON_ClassId m_ON_LineCurve_class_id; static ON_LineCurve * Cast( ON_Object* ); static const ON_LineCurve * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_LineCurve( const ON_Object*, ON_Object* ); public: ON_LineCurve * Duplicate() const;;

public:
  ON_LineCurve();
  ON_LineCurve(const ON_2dPoint&,const ON_2dPoint&); 
  ON_LineCurve(const ON_3dPoint&,const ON_3dPoint&); 
  ON_LineCurve(const ON_Line&);
  ON_LineCurve(const ON_Line&,
                double,double    
                );
  ON_LineCurve(const ON_LineCurve&);

  virtual ~ON_LineCurve();

	ON_LineCurve& operator=(const ON_LineCurve&);
	ON_LineCurve& operator=(const ON_Line&);
  
  
  

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  
  

  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  















	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  bool IsDeformable() const;

  
  bool MakeDeformable();

  ON_BOOL32 SwapCoordinates(
        int, int        
        );

  
  

  ON_Interval Domain() const;

  
  
  
  
  
  
  
  ON_BOOL32 SetDomain( 
        double t0, 
        double t1 
        );

  bool ChangeDimension(
          int desired_dimension
          );

  int SpanCount() const; 

  ON_BOOL32 GetSpanVector( 
         double* 
         ) const; 

  int Degree( 
                  
    ) const; 

  ON_BOOL32 IsLinear( 
                 
        double = 2.3283064365386962890625e-10 
        ) const;

  















  virtual
  int IsPolyline(
        ON_SimpleArray<ON_3dPoint>* pline_points = 0,
        ON_SimpleArray<double>* pline_t = 0
        ) const;

  ON_BOOL32 IsArc( 
              
        const ON_Plane* = 0, 
        ON_Arc* = 0, 
                         
        double = 2.3283064365386962890625e-10    
        ) const;

  ON_BOOL32 IsPlanar(
        ON_Plane* = 0, 
                           
        double = 2.3283064365386962890625e-10    
        ) const;

  ON_BOOL32 IsInPlane(
        const ON_Plane&, 
        double = 2.3283064365386962890625e-10    
        ) const;

  ON_BOOL32 IsClosed(  
        void      
        ) const;  
                  

  ON_BOOL32 IsPeriodic(  
        void 
        ) const;
  
  














  ON_BOOL32 SetStartPoint(
          ON_3dPoint start_point
          );

  














  ON_BOOL32 SetEndPoint(
          ON_3dPoint end_point
          );

  ON_BOOL32 Reverse();       
                        

  ON_BOOL32 Evaluate( 
         double,         
         int,            
         int,            
         double*,        
         int = 0,        
                         
                         
                         
         int* = 0        
                         
         ) const;

  
  
  
  
  
  
  
  
  
  ON_BOOL32 Trim(
    const ON_Interval& domain
    );

  
  
  
  
  
  
  
  
  
  bool Extend(
    const ON_Interval& domain
    );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Split(
      double t,    
      ON_Curve*& left_side, 
      ON_Curve*& right_side 
    ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int GetNurbForm(
        ON_NurbsCurve&,
        double = 0.0,
        const ON_Interval* = 0
        ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int HasNurbForm(
        ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  virtual
  ON_BOOL32 GetCurveParameterFromNurbFormParameter(
        double nurbs_t,
        double* curve_t
        ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  virtual
  ON_BOOL32 GetNurbFormParameterFromCurveParameter(
        double curve_t,
        double* nurbs_t
        ) const;

  
  

  ON_Line m_line;
  ON_Interval m_t;  
  int      m_dim;   
};







































class  ON_ArcCurve : public ON_Curve
{
  protected: static void* m_s_ON_ArcCurve_ptr; public: static const ON_ClassId m_ON_ArcCurve_class_id; static ON_ArcCurve * Cast( ON_Object* ); static const ON_ArcCurve * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_ArcCurve( const ON_Object*, ON_Object* ); public: ON_ArcCurve * Duplicate() const;;

public:
  ON_ArcCurve();
  ON_ArcCurve(const ON_ArcCurve&);
  virtual ~ON_ArcCurve();

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  



  ON_ArcCurve( 
      const ON_Arc& arc 
      );

  



  ON_ArcCurve(
      const ON_Arc& arc,
      double t0,
      double t1
      );

  




  ON_ArcCurve(
      const ON_Circle& circle
      );

  



  ON_ArcCurve(
      const ON_Circle& circle,
      double t0,
      double t1
      );


	ON_ArcCurve& operator=(const ON_ArcCurve&);

  



	ON_ArcCurve& operator=(const ON_Arc& arc);

  




	ON_ArcCurve& operator=(const ON_Circle& circle);
  
  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const;

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  
  

  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  















	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;


  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  

  
  
  
  
  
  
  
  
  ON_BOOL32 SetDomain(
        double t0, 
        double t1 
        );

  ON_Interval Domain() const;

  bool ChangeDimension(
          int desired_dimension
          );

  ON_BOOL32 ChangeClosedCurveSeam( 
            double t 
            );

  int SpanCount() const; 

  ON_BOOL32 GetSpanVector( 
         double* 
         ) const; 

  int Degree( 
                  
    ) const; 

  ON_BOOL32 IsLinear( 
                 
        double = 2.3283064365386962890625e-10 
        ) const;

  ON_BOOL32 IsArc( 
              
        const ON_Plane* = 0, 
        ON_Arc* = 0, 
                         
        double = 0.0    
        ) const;

  ON_BOOL32 IsPlanar(
        ON_Plane* = 0, 
                           
        double = 0.0    
        ) const;

  ON_BOOL32 IsInPlane(
        const ON_Plane&, 
        double = 0.0    
        ) const;

  ON_BOOL32 IsClosed(  
        void      
        ) const;  
                  

  ON_BOOL32 IsPeriodic(  
        void 
        ) const;
  
  bool IsContinuous(
    ON::continuity c,
    double t, 
    int* hint = 0,
    double point_tolerance=2.3283064365386962890625e-10,
    double d1_tolerance=2.3283064365386962890625e-10,
    double d2_tolerance=2.3283064365386962890625e-10,
    double cos_angle_tolerance=0.99984769515639123915701155881391,
    double curvature_tolerance=1.490116119385000000e-8
    ) const;

  ON_BOOL32 Reverse();       
                        

  














  ON_BOOL32 SetStartPoint(
          ON_3dPoint start_point
          );

  














  ON_BOOL32 SetEndPoint(
          ON_3dPoint end_point
          );

  ON_BOOL32 Evaluate( 
         double,         
         int,            
         int,            
         double*,        
         int = 0,        
                         
                         
                         
         int* = 0        
                         
         ) const;

  ON_BOOL32 Trim( const ON_Interval& );

  
  
  
  
  
  
  
  
  
  bool Extend(
    const ON_Interval& domain
    );

  

















  virtual
  ON_BOOL32 Split(
      double t,
      ON_Curve*& left_side,
      ON_Curve*& right_side
    ) const;

  
  int GetNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ON_NurbsCurve&,
        double = 0.0,
        const ON_Interval* = 0     
        ) const;

  
  int HasNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ) const;

  
  ON_BOOL32 GetCurveParameterFromNurbFormParameter(
        double, 
        double* 
        ) const;

  
  ON_BOOL32 GetNurbFormParameterFromCurveParameter(
        double, 
        double* 
        ) const;
  
  
  



  bool IsCircle() const;

  
  
	double Radius() const;

  
  
  double AngleRadians() const;

  
  
  double AngleDegrees() const;


  

  ON_Arc   m_arc;
  
  
  
  ON_Interval m_t;  

  
  
  int m_dim;

};
























class ON_PolylineCurve;
class  ON_PolylineCurve : public ON_Curve
{
  protected: static void* m_s_ON_PolylineCurve_ptr; public: static const ON_ClassId m_ON_PolylineCurve_class_id; static ON_PolylineCurve * Cast( ON_Object* ); static const ON_PolylineCurve * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_PolylineCurve( const ON_Object*, ON_Object* ); public: ON_PolylineCurve * Duplicate() const;;

public:
  ON_PolylineCurve();
  ON_PolylineCurve(const ON_3dPointArray&);
  ON_PolylineCurve(const ON_PolylineCurve&);
	ON_PolylineCurve& operator=(const ON_PolylineCurve&);
	ON_PolylineCurve& operator=(const ON_3dPointArray&);

  virtual ~ON_PolylineCurve();

  
  
  void EmergencyDestroy(); 

  
  
  

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  
  void Dump( 
    ON_TextLog& dump
    ) const;

  
  
  ON_BOOL32 Write(
         ON_BinaryArchive& binary_archive
       ) const;

  
  
  ON_BOOL32 Read(
         ON_BinaryArchive& binary_archive
       );

  
  

  
  
  
  
  int Dimension() const;

  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 GetBBox( 
         double* boxmin,
         double* boxmax,
         int bGrowBox = false
         ) const;

  














	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Transform( 
         const ON_Xform& xform
         );

  
  bool IsDeformable() const;

  
  bool MakeDeformable();

  
  
  
  
  
  
  ON_BOOL32 SwapCoordinates(
        int i, 
        int j
        );

  
  

  
  
  
  
  ON_Interval Domain() const;

  
  
  
  
  
  
  
  
  ON_BOOL32 SetDomain(
        double t0, 
        double t1 
        );

  bool ChangeDimension(
          int desired_dimension
          );

  











  ON_BOOL32 ChangeClosedCurveSeam( 
            double t 
            );

  
  
  
  
  
  int SpanCount() const;

  
  
  
  
  
  
  
  
  
  ON_BOOL32 GetSpanVector(
         double* knot_values
         ) const;

  
  
  
  
  int Degree() const; 

  
  
  
  
  
  ON_BOOL32 IsLinear(
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  















  int IsPolyline(
        ON_SimpleArray<ON_3dPoint>* pline_points = 0,
        ON_SimpleArray<double>* pline_t = 0
        ) const;

  
  
  
  
  ON_BOOL32 IsArc(
        const ON_Plane* plane = 0,
        ON_Arc* arc = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  
  
  
  
  ON_BOOL32 IsPlanar(
        ON_Plane* plane = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  
  
  
  
  
  ON_BOOL32 IsInPlane(
        const ON_Plane& test_plane,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  
  
  
  
  
  
  
  ON_BOOL32 IsClosed() const;

  
  
  
  
  ON_BOOL32 IsPeriodic(  
        void 
        ) const;
  
  



































  bool GetNextDiscontinuity( 
                  ON::continuity c,
                  double t0,
                  double t1,
                  double* t,
                  int* hint=0,
                  int* dtype=0,
                  double cos_angle_tolerance=0.99984769515639123915701155881391,
                  double curvature_tolerance=1.490116119385000000e-8
                  ) const;

  
































  bool IsContinuous(
    ON::continuity c,
    double t, 
    int* hint = 0,
    double point_tolerance=2.3283064365386962890625e-10,
    double d1_tolerance=2.3283064365386962890625e-10,
    double d2_tolerance=2.3283064365386962890625e-10,
    double cos_angle_tolerance=0.99984769515639123915701155881391,
    double curvature_tolerance=1.490116119385000000e-8
    ) const;

  
  
  
  
  
  
  ON_BOOL32 Reverse();

  














  
  ON_BOOL32 SetStartPoint(
          ON_3dPoint start_point
          );

  














  
  ON_BOOL32 SetEndPoint(
          ON_3dPoint end_point
          );

  ON_BOOL32 Evaluate( 
         double,         
         int,            
         int,            
         double*,        
         int = 0,        
                         
                         
                         
         int* = 0        
                         
         ) const;

  
  
  ON_BOOL32 Trim( const ON_Interval& );

  
  
  
  
  
  
  
  
  
  bool Extend(
    const ON_Interval& domain
    );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Split(
      double,    
      ON_Curve*&, 
      ON_Curve*&  
    ) const;

  int GetNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ON_NurbsCurve&,
        double = 0.0,
        const ON_Interval* = 0     
        ) const;

  int HasNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ) const;

  
  ON_BOOL32 GetCurveParameterFromNurbFormParameter(
        double, 
        double* 
        ) const;

  
  ON_BOOL32 GetNurbFormParameterFromCurveParameter(
        double, 
        double* 
        ) const;






















 
	bool ParameterSearch(double t, int& index, bool bEnableSnap) const;

  bool Append( const ON_PolylineCurve& );

  
  
	public:
  int PointCount() const; 

  ON_Polyline            m_pline;
  ON_SimpleArray<double> m_t;    
  int                    m_dim;  
};






























class ON_NurbsCurve;
class  ON_NurbsCurve : public ON_Curve
{
  protected: static void* m_s_ON_NurbsCurve_ptr; public: static const ON_ClassId m_ON_NurbsCurve_class_id; static ON_NurbsCurve * Cast( ON_Object* ); static const ON_NurbsCurve * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_NurbsCurve( const ON_Object*, ON_Object* ); public: ON_NurbsCurve * Duplicate() const;;

public:
  







  static ON_NurbsCurve* New();
  static ON_NurbsCurve* New(
            const ON_NurbsCurve& nurbs_curve 
            );
  static ON_NurbsCurve* New(
            const ON_BezierCurve& bezier_curve 
            );
  static ON_NurbsCurve* New(
            int dimension,
            ON_BOOL32 bIsRational,
            int order,
            int cv_count
            );

  ON_NurbsCurve();
  ON_NurbsCurve(const ON_NurbsCurve&);

  
  
  
  
  ON_NurbsCurve(
        const ON_BezierCurve& bezier_curve
        );

  
  
  
  
  
  
  
  ON_NurbsCurve(
          int dimension,
          ON_BOOL32 bIsRational,
          int order,
          int cv_count
          );

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  











  bool IsDuplicate( 
          const ON_NurbsCurve& other, 
          bool bIgnoreParameterization,
          double tolerance = 2.3283064365386962890625e-10 
          ) const;

  
  
  void Initialize(void);

  
  
  
  
  
  
  
  bool Create( 
          int dimension,
          ON_BOOL32 bIsRational,
          int order,
          int cv_count
          );

  
  
  
  
  
  
  
  
  
  
  
  bool CreateClampedUniformNurbs( 
          int dimension,
          int order,
          int point_count,
          const ON_3dPoint* point,
          double knot_delta = 1.0
          );

  
  
  
  
  
  
  
  
  
  
  
  bool CreatePeriodicUniformNurbs( 
          int dimension,
          int order,
          int point_count,
          const ON_3dPoint* point,
          double knot_delta = 1.0
          );

  
  
  void Destroy();

  virtual ~ON_NurbsCurve();

  
  
  void EmergencyDestroy(); 

	ON_NurbsCurve& operator=(const ON_NurbsCurve& src);

  
  
  
  
	ON_NurbsCurve& operator=(
    const ON_BezierCurve& bezier_curve
    );

  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  
  void Dump( 
    ON_TextLog& dump
    ) const;

  
  
  ON_BOOL32 Write(
         ON_BinaryArchive& binary_archive
       ) const;

  
  
  ON_BOOL32 Read(
         ON_BinaryArchive& binary_archive
       );

  
  

  
  
  
  
  int Dimension() const;

  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 GetBBox( 
         double* boxmin,
         double* boxmax,
         int bGrowBox = false
         ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Transform( 
         const ON_Xform& xform
         );

  
  bool IsDeformable() const;

  
  bool MakeDeformable();

  
  
  
  
  
  
  ON_BOOL32 SwapCoordinates(
        int i, 
        int j
        );

  
  

  
  
  
  
  ON_Interval Domain() const;

  
  
  
  
  
  
  
  
  ON_BOOL32 SetDomain(
        double t0, 
        double t1 
        );

  











  ON_BOOL32 ChangeClosedCurveSeam( 
            double t 
            );

  
  
  
  
  
  
  
  
  int SpanCount() const;

  
  
  
  
  
  
  
  
  
  ON_BOOL32 GetSpanVector(
         double* knot_values
         ) const; 

  
  
  
  
  int Degree() const; 

  
  
  ON_BOOL32 GetParameterTolerance( 
         double t,
         double* tminus,
         double* tplus
         ) const;

  
  
  ON_BOOL32 IsLinear(
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  















  int IsPolyline(
        ON_SimpleArray<ON_3dPoint>* pline_points = 0,
        ON_SimpleArray<double>* pline_t = 0
        ) const;

  
  
  ON_BOOL32 IsArc(
        const ON_Plane* plane = 0,
        ON_Arc* arc = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  
  
  ON_BOOL32 IsPlanar(
        ON_Plane* plane = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  
  
  ON_BOOL32 IsInPlane(
        const ON_Plane& test_plane,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  
  
  
  
  
  
  
  ON_BOOL32 IsClosed() const;

  
  
  
  
  
  
  ON_BOOL32 IsPeriodic() const;
  
  



































  bool GetNextDiscontinuity( 
                  ON::continuity c,
                  double t0,
                  double t1,
                  double* t,
                  int* hint=0,
                  int* dtype=0,
                  double cos_angle_tolerance=0.99984769515639123915701155881391,
                  double curvature_tolerance=1.490116119385000000e-8
                  ) const;

  
































  bool IsContinuous(
    ON::continuity c,
    double t, 
    int* hint = 0,
    double point_tolerance=2.3283064365386962890625e-10,
    double d1_tolerance=2.3283064365386962890625e-10,
    double d2_tolerance=2.3283064365386962890625e-10,
    double cos_angle_tolerance=0.99984769515639123915701155881391,
    double curvature_tolerance=1.490116119385000000e-8
    ) const;

  














  
  ON_BOOL32 SetStartPoint(
          ON_3dPoint start_point
          );

  














  
  ON_BOOL32 SetEndPoint(
          ON_3dPoint end_point
          );

  
  
  
  
  
  
  ON_BOOL32 Reverse();       

  
  
  ON_BOOL32 Evaluate( 
         double,         
         int,            
         int,            
         double*,        
         int = 0,        
                         
                         
                         
         int* = 0        
                         
         ) const;

  



















  bool SpanIsLinear( 
    int span_index, 
    double min_length,
    double tolerance
    ) const;

  bool SpanIsLinear( 
    int span_index, 
    double min_length,
    double tolerance,
    ON_Line* line
    ) const;

  














  bool RepairBadKnots(
    double knot_tolerance=0.0,
    bool bRepair = true
    );

  
  
  ON_BOOL32 Trim( const ON_Interval& );

  
  
  
  
  
  
  
  
  
  bool Extend(
    const ON_Interval& domain
    );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Split(
      double split_param,    
      ON_Curve*& left_result, 
      ON_Curve*& right_result 
    ) const;

  
  
  int GetNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ON_NurbsCurve& nurbsform,
        double tolerance = 0.0,
        const ON_Interval* subdomain = 0     
        ) const;

  
  
  int HasNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ) const;

  
  
  ON_BOOL32 GetCurveParameterFromNurbFormParameter(
        double  nurbs_t,
        double* curve_t
        ) const;

  
  
  ON_BOOL32 GetNurbFormParameterFromCurveParameter(
        double  curve_t,
        double* nurbs_t
        ) const;

public:

  
  

  bool IsRational(  
        void
        ) const;
  
  int CVSize(       
        void        
        ) const;
  
  int Order(        
        void
        ) const;
	
  int CVCount(      
        void 
        ) const;

  int KnotCount(    
        void
        ) const;
  
  




















  double* CV(
        int cv_index
        ) const;

  







  ON::point_style CVStyle() const;


  double Weight(        
        int             
        ) const;

  ON_BOOL32 SetWeight(      
        int,            
        double
        );

  ON_BOOL32 SetCV(              
        int,              
        ON::point_style, 
        const double*     
        );

  ON_BOOL32 SetCV(               
        int,               
        const ON_3dPoint& 
                           
                           
        );

  ON_BOOL32 SetCV(              
        int,              
        const ON_4dPoint& 
                          
                          
                          
        );

  ON_BOOL32 GetCV(              
        int,              
        ON::point_style, 
        double*           
        ) const;

  ON_BOOL32 GetCV(              
        int,              
        ON_3dPoint&      
        ) const;

  ON_BOOL32 GetCV(              
        int,              
        ON_4dPoint&      
        ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  bool SetKnot(
        int knot_index,
        double knot_value
        );

  
  
  
  
  
  
  
  
  double Knot(
        int knot_index
        ) const;

  
  
  
  
  
  
  
  
  
  int KnotMultiplicity(
        int knot_index
        ) const;

  
  
  
  
  
  
  
  const double* Knot() const;

  
  
  
  
  
  
  
  
  
  
  
  
  bool MakeClampedUniformKnotVector( 
    double delta = 1.0 
    );

  
  
  
  
  
  
  
  
  
  
  
  
  bool MakePeriodicUniformKnotVector( 
    double delta = 1.0 
    );

  bool IsClamped( 
        int = 2 
        ) const;
  
  double SuperfluousKnot(
           int 
           ) const;

  double GrevilleAbcissa(
           int   
           ) const;

  bool GetGrevilleAbcissae( 
           double*   
           ) const;

  bool ZeroCVs(); 

  
  
  
  
  
  
  bool ClampEnd(
            int end
            );

  
  
  
  
  
  
  
  
  
  bool InsertKnot( 
            double knot_value,
            int knot_multiplicity
            );

  bool MakeRational();

  bool MakeNonRational();

  bool IncreaseDegree(
          int desired_degree
          );

  bool ChangeDimension(
          int desired_dimension
          );

  bool Append( const ON_NurbsCurve& );

  
  
  bool ReserveCVCapacity(
    int 
    );
  bool ReserveKnotCapacity(
    int 
    );

  
  
  double ControlPolygonLength() const;

  
  
  
  
  
  bool ConvertSpanToBezier(
      int,            
      ON_BezierCurve& 
      ) const;

  












  bool SpanIsSingular( 
    int span_index 
    ) const;

  






  bool IsSingular() const;

  



















  bool RemoveSpan(
    int span_index 
    );

  



  int RemoveSingularSpans();

  
  
  
  bool HasBezierSpans() const;

  









      
  bool MakePiecewiseBezier( 
        bool bSetEndWeightsToOne = false
        );

  

















  bool ChangeEndWeights( double w0, double w1 );

  



















  bool Reparameterize( double c );



  
  
public:
  
  
  
  
  
  
  

  int     m_dim;            

  int     m_is_rat;         
                            
                            
                            

  int     m_order;          

  int     m_cv_count;       

  

  int     m_knot_capacity;  
                            
                            
                            
                            
                            
                            
                            
                            
                            

  double* m_knot;           
                            
  
  

  int     m_cv_stride;      
                            

  int     m_cv_capacity;    
                            
                            
                            
                            
                            
                            
                            

  double* m_cv;             
                            
                            
                            
                            
                            
                            
                            
                            
                            
};








































class ON_PolyCurve;
class  ON_PolyCurve : public ON_Curve
{
  protected: static void* m_s_ON_PolyCurve_ptr; public: static const ON_ClassId m_ON_PolyCurve_class_id; static ON_PolyCurve * Cast( ON_Object* ); static const ON_PolyCurve * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_PolyCurve( const ON_Object*, ON_Object* ); public: ON_PolyCurve * Duplicate() const;;

public:
  
  void DestroyRuntimeCache( bool bDelete = true );

public:
  ON_PolyCurve();
  ON_PolyCurve( int ); 
                        
  ON_PolyCurve(const ON_PolyCurve&);

  void Destroy();

  virtual ~ON_PolyCurve();

  void EmergencyDestroy(); 

	ON_PolyCurve& operator=(const ON_PolyCurve&);
  
  
  

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  





















  bool IsValid( bool bAllowGaps, ON_TextLog* text_log ) const;


  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  
  

  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  














	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  bool IsDeformable() const;

  
  bool MakeDeformable();

  ON_BOOL32 SwapCoordinates(
        int, int        
        );

  
  bool EvaluatePoint( const class ON_ObjRef& objref, ON_3dPoint& P ) const;

  
  

  ON_Curve* DuplicateCurve() const;

  ON_Interval Domain() const;

  
  
  
  
  
  
  
  
  ON_BOOL32 SetDomain(
        double t0, 
        double t1 
        );

  bool ChangeDimension(
          int desired_dimension
          );

  











  ON_BOOL32 ChangeClosedCurveSeam( 
            double t 
            );

  int SpanCount() const; 

  ON_BOOL32 GetSpanVector( 
         double* 
         ) const; 

  int Degree( 
                  
    ) const; 

  ON_BOOL32 IsLinear( 
                 
        double = 2.3283064365386962890625e-10 
        ) const;

  















  int IsPolyline(
        ON_SimpleArray<ON_3dPoint>* pline_points = 0,
        ON_SimpleArray<double>* pline_t = 0
        ) const;

  ON_BOOL32 IsArc( 
              
        const ON_Plane* = 0, 
        ON_Arc* = 0, 
                         
        double = 2.3283064365386962890625e-10    
        ) const;

  ON_BOOL32 IsPlanar(
        ON_Plane* = 0, 
                           
        double = 2.3283064365386962890625e-10    
        ) const;

  ON_BOOL32 IsInPlane(
        const ON_Plane&, 
        double = 2.3283064365386962890625e-10    
        ) const;

  ON_BOOL32 IsClosed(  
        void      
        ) const;  
                  

  ON_BOOL32 IsPeriodic(  
        void 
        ) const;
  
  



































  bool GetNextDiscontinuity( 
                  ON::continuity c,
                  double t0,
                  double t1,
                  double* t,
                  int* hint=0,
                  int* dtype=0,
                  double cos_angle_tolerance=0.99984769515639123915701155881391,
                  double curvature_tolerance=1.490116119385000000e-8
                  ) const;

  
































  bool IsContinuous(
    ON::continuity c,
    double t, 
    int* hint = 0,
    double point_tolerance=2.3283064365386962890625e-10,
    double d1_tolerance=2.3283064365386962890625e-10,
    double d2_tolerance=2.3283064365386962890625e-10,
    double cos_angle_tolerance=0.99984769515639123915701155881391,
    double curvature_tolerance=1.490116119385000000e-8
    ) const;

  ON_BOOL32 Reverse();       
                        

  














  
  ON_BOOL32 SetStartPoint(
          ON_3dPoint start_point
          );

  














  
  ON_BOOL32 SetEndPoint(
          ON_3dPoint end_point
          );

  ON_BOOL32 Evaluate( 
         double,         
         int,            
         int,            
         double*,        
         int = 0,        
                         
                         
                         
         int* = 0        
                         
         ) const;

  
  
  
  
  
  
  
  
  
  ON_BOOL32 Trim(
    const ON_Interval& domain
    );

  
  
  
  
  
  
  
  
  
  bool Extend(
    const ON_Interval& domain
    );

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_BOOL32 Split(
      double t,    
      ON_Curve*& left_side, 
      ON_Curve*& right_side 
    ) const;

  int GetNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ON_NurbsCurve&,
        double = 0.0,
        const ON_Interval* = 0     
        ) const;

  int HasNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ) const;

  
  ON_BOOL32 GetCurveParameterFromNurbFormParameter(
        double, 
        double* 
        ) const;

  
  ON_BOOL32 GetNurbFormParameterFromCurveParameter(
        double, 
        double* 
        ) const;

  
  

  int Count() const; 

  
  ON_Curve* operator[](int) const;

  








  ON_Curve* SegmentCurve(
    int segment_index
    ) const;

  










  double SegmentCurveParameter(
    double polycurve_parameter
    ) const;

  











  double PolyCurveParameter(
    int segment_index,
    double segmentcurve_parameter
    ) const;

  









  ON_Interval SegmentDomain( 
    int segment_index
    ) const;

  









  int SegmentIndex(
    double polycurve_parameter
    ) const;

  











  int SegmentIndex(
    ON_Interval sub_domain,
    int* segment_index0,
    int* segment_index1
    ) const;

  ON_Curve* FirstSegmentCurve() const; 

  ON_Curve* LastSegmentCurve() const;  

  














  int FindNextGap( int segment_index0 ) const;

  












  bool HasGapAt( int segment_index ) const;
  
  
  __declspec(deprecated) int HasGap() const;

  


























  bool CloseGap( int gap_index, int segments_to_modify );

  





  int CloseGaps();

  void Reserve( int ); 

  
  
  
  ON_BOOL32 Prepend( ON_Curve* ); 
  ON_BOOL32 Append( ON_Curve* );  
  ON_BOOL32 Insert( 
           int, 
           ON_Curve*
           );

  
  
  ON_BOOL32 PrependAndMatch(ON_Curve*); 
  ON_BOOL32 AppendAndMatch(ON_Curve*);  

  ON_BOOL32 Remove(); 
  ON_BOOL32 Remove( int ); 

  
  
  
  
  
  ON_Curve* HarvestSegment( int );

	



  bool IsNested() const;

	





	void RemoveNesting();

  








	bool RemoveNestingEx();

  






	bool HasSynchronizedSegmentDomains() const;

  








	bool SynchronizeSegmentDomains();




	
	
	
	void SetSegment(int index, ON_Curve* crv);

	
  







  bool SetParameterization( const double* t );





















 
	bool ParameterSearch(double t, int& index, bool bEnableSnap) const;

  



  const ON_CurveArray& SegmentCurves() const;

  



  const ON_SimpleArray<double>& SegmentParameters() const;

  
  
private:
  
  
  

  ON_CurveArray m_segment;  
                             
                             

  ON_SimpleArray<double> m_t; 
};

























class ON_CurveOnSurface;
class  ON_CurveOnSurface : public ON_Curve
{
  protected: static void* m_s_ON_CurveOnSurface_ptr; public: static const ON_ClassId m_ON_CurveOnSurface_class_id; static ON_CurveOnSurface * Cast( ON_Object* ); static const ON_CurveOnSurface * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_CurveOnSurface( const ON_Object*, ON_Object* ); public: ON_CurveOnSurface * Duplicate() const;;

public:
  ON_CurveOnSurface();

  








  ON_CurveOnSurface( ON_Curve* p2dCurve,  
                     ON_Curve* p3dCurve,  
                     ON_Surface* pSurface 
                     );
  ON_CurveOnSurface(const ON_CurveOnSurface&); 
  ON_CurveOnSurface& operator=(const ON_CurveOnSurface&); 

  




  virtual ~ON_CurveOnSurface();

  
  unsigned int SizeOf() const;


  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  
  

  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  ON_BOOL32 SwapCoordinates(
        int, int        
        );

  
  

  ON_Interval Domain() const;

  int SpanCount() const; 

  ON_BOOL32 GetSpanVector( 
         double* 
         ) const; 

  int Degree( 
                  
    ) const; 


  
  ON_BOOL32 GetParameterTolerance( 
         double,  
         double*, 
         double*  
         ) const;

  ON_BOOL32 IsLinear( 
                 
        double = 2.3283064365386962890625e-10 
        ) const;

  ON_BOOL32 IsArc( 
              
        const ON_Plane* = 0, 
        ON_Arc* = 0, 
                         
        double = 2.3283064365386962890625e-10    
        ) const;

  ON_BOOL32 IsPlanar(
        ON_Plane* = 0, 
                           
        double = 2.3283064365386962890625e-10    
        ) const;

  ON_BOOL32 IsInPlane(
        const ON_Plane&, 
        double = 2.3283064365386962890625e-10    
        ) const;

  ON_BOOL32 IsClosed(  
        void      
        ) const;  
                  

  ON_BOOL32 IsPeriodic(  
        void 
        ) const;
  
  ON_BOOL32 Reverse();       
                        

  ON_BOOL32 Evaluate( 
         double,         
         int,            
         int,            
         double*,        
         int = 0,        
                         
                         
                         
         int* = 0        
                         
         ) const;

  int GetNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ON_NurbsCurve&,
        double = 0.0,
        const ON_Interval* = 0     
        ) const;

  
  

  
  
  
  ON_Curve* m_c2;  
  ON_Curve* m_c3;  
  ON_Surface* m_s; 
};






























class  ON_TensorProduct
{
  
public:
  ON_TensorProduct();

  virtual
  ~ON_TensorProduct();

  
  
  
  
  
  virtual
  int DimensionA() const = 0; 

  virtual
  int DimensionB() const = 0; 

  virtual
  int DimensionC() const = 0; 

  virtual
  bool Evaluate( double,        
                 const double*, 
                 double,        
                 const double*, 
                 double*        
                ) = 0;

};

class ON_Brep;
class ON_NurbsSurface;

class  ON_NurbsSurface : public ON_Surface
{
  protected: static void* m_s_ON_NurbsSurface_ptr; public: static const ON_ClassId m_ON_NurbsSurface_class_id; static ON_NurbsSurface * Cast( ON_Object* ); static const ON_NurbsSurface * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_NurbsSurface( const ON_Object*, ON_Object* ); public: ON_NurbsSurface * Duplicate() const;;

public:
  







  static ON_NurbsSurface* New();
  static ON_NurbsSurface* New(
          const ON_NurbsSurface& nurbs_surface
          );
  static ON_NurbsSurface* New(
            const ON_BezierSurface& bezier_surface 
            );
  static ON_NurbsSurface* New(
          int dimension,
          ON_BOOL32 bIsRational,
          int order0,
          int order1,
          int cv_count0,
          int cv_count1
          );

  ON_NurbsSurface();
  ON_NurbsSurface(const ON_NurbsSurface& nurbs_surface);
  ON_NurbsSurface(const ON_BezierSurface& bezier_surface);
  ON_NurbsSurface(
          int dimension,     
          ON_BOOL32 bIsRational, 
          int order0,       
          int order1,       
          int cv_count0,    
          int cv_count1     
          );

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  











  bool IsDuplicate( 
          const ON_NurbsSurface& other, 
          bool bIgnoreParameterization,
          double tolerance = 2.3283064365386962890625e-10 
          ) const;

  void Initialize(void);  

  ON_BOOL32 Create( 
          int dim,  
          ON_BOOL32 is_rat, 
          int order0,  
          int order1,  
          int cv_count0,  
          int cv_count1  
          );

  

























  virtual
  int CreateRuledSurface(
         const ON_Curve& curveA,
         const ON_Curve& curveB,
         const ON_Interval* curveA_domain = 0,
         const ON_Interval* curveB_domain = 0
         );

  























  int CreateConeSurface(
         ON_3dPoint apex_point,
         const ON_Curve& curve,
         const ON_Interval* curve_domain = 0
         );

  
















  bool CollapseSide(
    int side,
    ON_3dPoint point = ON_UNSET_POINT
    );

  void Destroy();

  virtual ~ON_NurbsSurface();

  void EmergencyDestroy(); 

  ON_NurbsSurface& operator=(const ON_NurbsSurface&);
  
  





	ON_NurbsSurface& operator=(
    const ON_BezierSurface& bezier_surface
    );

  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  
  

  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  bool IsDeformable() const;

  
  bool MakeDeformable();

  ON_BOOL32 SwapCoordinates(
        int, int        
        );

  
  

  ON_BOOL32 SetDomain( 
    int dir, 
    double t0, 
    double t1
    );

  ON_Interval Domain(
    int 
    ) const;


  











  ON_BOOL32 GetSurfaceSize( 
      double* width, 
      double* height 
      ) const;

  int SpanCount(
    int 
    ) const; 

  ON_BOOL32 GetSpanVector( 
    int, 
    double* 
    ) const; 

  int Degree( 
                  
    int 
    ) const; 

  ON_BOOL32 GetParameterTolerance( 
         int,     
         double,  
         double*, 
         double*  
         ) const;

  












  ON_BOOL32 IsPlanar(
        ON_Plane* plane = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  ON_BOOL32 IsClosed(   
        int 
        ) const;   
                   

  ON_BOOL32 IsPeriodic( 
        int 
        ) const;   
  
  ON_BOOL32 IsSingular( 
        int        
                   
        ) const;

  



















































  bool GetNextDiscontinuity( 
                  int dir,
                  ON::continuity c,
                  double t0,
                  double t1,
                  double* t,
                  int* hint=0,
                  int* dtype=0,
                  double cos_angle_tolerance=0.99984769515639123915701155881391,
                  double curvature_tolerance=1.490116119385000000e-8
                  ) const;

  


























  bool IsContinuous(
    ON::continuity c,
    double s, 
    double t, 
    int* hint = 0,
    double point_tolerance=2.3283064365386962890625e-10,
    double d1_tolerance=2.3283064365386962890625e-10,
    double d2_tolerance=2.3283064365386962890625e-10,
    double cos_angle_tolerance=0.99984769515639123915701155881391,
    double curvature_tolerance=1.490116119385000000e-8
    ) const;

  ON_BOOL32 Reverse(  
    int 
    );

  ON_BOOL32 Transpose(); 

  ON_BOOL32 Evaluate( 
         double, double, 
         int,            
         int,            
         double*,        
         int = 0,        
                         
                         
                         
                         
                         
         int* = 0        
                         
         ) const;

  













  ON_Curve* IsoCurve(
         int dir,
         double c
         ) const;

  
















  ON_BOOL32 Trim(
         int dir,
         const ON_Interval& domain
         );

  















  bool Extend(
    int dir,
    const ON_Interval& domain
    );


  


























  ON_BOOL32 Split(
         int dir,
         double c,
         ON_Surface*& west_or_south_side,
         ON_Surface*& east_or_north_side
         ) const;

  














  ON_Surface* Offset(
        double offset_distance, 
        double tolerance, 
        double* max_deviation = 0
        ) const;

  int GetNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ON_NurbsSurface&,
        double = 0.0 
        ) const;

  
  

  











  double ControlPolygonLength( int dir ) const;


  bool IsRational(  
        void
        ) const;
  
  int CVSize(       
        void        
        ) const;
  
  int Order(        
        int         
        ) const;
	
  int CVCount(      
        int         
        ) const;

  int CVCount(      
        void
        ) const;

  int KnotCount(    
        int dir         
        ) const;
  
  





















  double* CV(
        int i,
        int j
        ) const;

  







  ON::point_style CVStyle() const;

  double Weight(        
        int i, int j   
        ) const;

  ON_BOOL32 SetWeight(      
        int i, int j,   
        double weight
        );

  ON_BOOL32 SetCV(              
        int i, int j,   
        ON::point_style, 
        const double* cv    
        );

  ON_BOOL32 SetCV(               
        int i, int j,   
        const ON_3dPoint& cv
                           
                           
        );

  ON_BOOL32 SetCV(              
        int i, int j,   
        const ON_4dPoint& cv
        );

  ON_BOOL32 SetCVRow(          
       int row_index,               
       const ON_3dPoint& cv 
                          
                          
       );

  ON_BOOL32 SetCVRow(          
       int row_index,               
       int v_stride,               
       const double* v     
       );

  ON_BOOL32 SetCVColumn(       
       int col_index,               
       const ON_3dPoint& cv 
                          
                          
       );

  ON_BOOL32 SetCVColumn(       
       int col_index,               
       int v_stride,               
       const double* v     
       );

  ON_BOOL32 GetCV(              
        int i, int j,   
        ON::point_style, 
        double* cv          
        ) const;

  ON_BOOL32 GetCV(              
        int i, int j,   
        ON_3dPoint& cv     
        ) const;

  ON_BOOL32 GetCV(              
        int i, int j,   
        ON_4dPoint& cv     
        ) const;

  int SetKnot(
        int dir,    
        int knot_index,            
        double knot_value         
        );

  double Knot(
        int dir,    
        int knot_index  
        ) const;

  int KnotMultiplicity(
        int dir,    
        int knot_index            
        ) const;

  const double* Knot(   
        int dir    
        ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  bool MakeClampedUniformKnotVector( 
    int dir,
    double delta = 1.0 
    );

  
  
  
  
  
  
  
  
  
  
  
  
  
  bool MakePeriodicUniformKnotVector( 
    int dir,
    double delta = 1.0 
    );


  bool IsClamped( 
        int dir,    
        int end = 2 
        ) const;
  
  double SuperfluousKnot(
           int dir,    
           int end  
           ) const;

  double GrevilleAbcissa(
           int dir,  
           int cv_index  
           ) const;

  bool GetGrevilleAbcissae( 
           int dir,      
           double* g   
           ) const;

  bool SetClampedGrevilleKnotVector(
           int dir,          
           int g_stride,          
           const double* g 
           );

  bool SetPeriodicGrevilleKnotVector(
           int dir,          
           int g_stride,          
           const double* g 
           );

  bool ZeroCVs(); 

  bool ClampEnd(
            int dir,         
            int end 
            );

  bool InsertKnot(
           int dir,         
           double knot_value, 
           int knot_multiplicity=1   
           );

  bool MakeRational();

  bool MakeNonRational();

  bool IncreaseDegree(
           int dir,  
           int desired_degree  
           );

  bool ChangeDimension(
           int desired_dimension  
           );

  










  ON_BOOL32 ChangeSurfaceSeam( 
						int dir,
            double t 
            );


  
  ON_BOOL32 TensorProduct(
        const ON_NurbsCurve&, 
        const ON_NurbsCurve&, 
        ON_TensorProduct&     
        );

  
  
  ON_BOOL32 ReserveKnotCapacity( 
                    
    int dir, 
    int knot_array_capacity 
    );
  ON_BOOL32 ReserveCVCapacity(  
                    
    int cv_array_capacity 
    );

  














  ON_BOOL32 ConvertSpanToBezier(
      int span_index0,
      int span_index1, 
      ON_BezierSurface& bezier_surface
      ) const;

  
  
public:
  
  
  
  
  
  
  

  int     m_dim;            

  int     m_is_rat;         
                            
                            
                            

  int     m_order[2];       

  int     m_cv_count[2];    

  

  int     m_knot_capacity[2]; 
                              
                              
                              
                              
                              
                              
                              
                              
                              

  double* m_knot[2];        
                            
  
  

  int     m_cv_stride[2];   
                            

  int     m_cv_capacity;    
                            
                            
                            
                            
                            
                            
                            

  double* m_cv;             
                            
                            
                            
                            
                            
                            
                            
                            
                            
};


class  ON_NurbsCage : public ON_Geometry
{
  protected: static void* m_s_ON_NurbsCage_ptr; public: static const ON_ClassId m_ON_NurbsCage_class_id; static ON_NurbsCage * Cast( ON_Object* ); static const ON_NurbsCage * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_NurbsCage( const ON_Object*, ON_Object* ); public: ON_NurbsCage * Duplicate() const;;

public:
  ON_NurbsCage();

  ON_NurbsCage(
    int dim,
    bool is_rat,
    int order0,
    int order1,
    int order2,
    int cv_count0,
    int cv_count1,
    int cv_count2
    );

  ON_NurbsCage( 
    const ON_BoundingBox& bbox,
    int order0,
    int order1,
    int order2,
    int cv_count0,
    int cv_count1,
    int cv_count2
    );

  ON_NurbsCage( 
    const ON_3dPoint* box_corners, 
    int order0,
    int order1,
    int order2,
    int cv_count0,
    int cv_count1,
    int cv_count2
    );

  ON_NurbsCage( const ON_BezierCage& src );

  ~ON_NurbsCage();

  ON_NurbsCage(const ON_NurbsCage& src);

  ON_NurbsCage& operator=(const ON_NurbsCage& src);

  ON_NurbsCage& operator=(const ON_BezierCage& src);


  












  ON_BOOL32 IsValid( 
          ON_TextLog* text_log = 0 
          ) const;

  





  void Dump( ON_TextLog& text_log) const;

  






  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  









  ON_BOOL32 Read(
    ON_BinaryArchive& archive
    );

  









  ON_BOOL32 Write(
    ON_BinaryArchive& archive
    ) const;

  









  ON::object_type ObjectType() const;

  













  void DestroyRuntimeCache( 
    bool bDelete = true 
    );


  













  int Dimension() const;

  














  ON_BOOL32 GetBBox(
         double* boxmin,
         double* boxmax,
         int bGrowBox = false 
         ) const;

  














	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  








  ON_BOOL32 Transform( 
         const ON_Xform& xform
         );

  







  bool IsDeformable() const;

  





  bool MakeDeformable();

  





  bool IsParallelogram(double tolerance) const;

  bool Create(
    int dim,
    bool is_rat,
    int order0,
    int order1,
    int order2,
    int cv_count0,
    int cv_count1,
    int cv_count2
    );

  




















  bool Create(
    const ON_BoundingBox& bbox,
    int order0,
    int order1,
    int order2,
    int cv_count0,
    int cv_count1,
    int cv_count2
    );

  




















  bool Create(
    const ON_3dPoint* box_corners,
    int order0,
    int order1,
    int order2,
    int cv_count0,
    int cv_count1,
    int cv_count2
    );

  void Destroy();

  void EmergencyDestroy(); 

  ON_Interval Domain(
    int 
    ) const;

  bool Reverse( 
    int dir 
    );
  
  bool Transpose(
    int dir0,
    int dir1
    );

  bool ClampEnd(
            int dir,         
            int end 
            );

  bool InsertKnot(
           int dir,         
           double knot_value, 
           int knot_multiplicity=1   
           );

  ON_BOOL32 IncreaseDegree(
           int dir,  
           int desired_degree  
           );

  ON_BOOL32 ChangeDimension(
           int desired_dimension  
           );

  



































































  bool Evaluate( 
         double r, 
         double s, 
         double t,
         int der_count,
         int v_stride,
         double* v,
         int side=0,
         int* hint=0
         ) const;

  







  ON_3dPoint PointAt(
         double r, 
         double s, 
         double t
         ) const;

  ON_NurbsSurface* IsoSurface(
         int dir,
         double c,
         ON_NurbsSurface* srf = 0
         ) const;

  bool Trim(
         int dir,
         const ON_Interval& domain
         );

  bool Extend(
    int dir,
    const ON_Interval& domain
    );

  







  ON_3dPoint PointAt(
         ON_3dPoint rst
         ) const;

  bool IsRational() const;
  
  int CVSize() const;
  
  int Order(
        int dir     
        ) const;
	
  int CVCount(      
        int         
        ) const;

  int CVCount(      
        void
        ) const;

  int KnotCount(    
        int dir     
        ) const;

  int Degree(
        int dir
        ) const;


  int SpanCount(
    int dir         
    ) const;

  bool GetSpanVector(
    int dir,        
    double* span_vector
    ) const;

  





















  double* CV(
        int i,
        int j,
        int k
        ) const;

  







  ON::point_style CVStyle() const;

  double Weight(        
        int i,
        int j,
        int k
        ) const;

  bool SetWeight(      
        int i,
        int j,
        int k,
        double w
        );

  bool SetCV(              
        int i,
        int j,
        int k,
        ON::point_style, 
        const double*     
        );

  
  
  
  bool SetCV(
        int i,
        int j,
        int k,
        const ON_3dPoint& point
        );

  
  
  
  
  
  bool SetCV(
        int i,
        int j,
        int k,
        const ON_4dPoint& hpoint
        );

  bool GetCV(              
        int i,
        int j,
        int k,
        ON::point_style, 
        double*           
        ) const;

  bool GetCV(              
        int i,
        int j,
        int k,
        ON_3dPoint&      
        ) const;

  bool GetCV(              
        int i,
        int j,
        int k,
        ON_4dPoint&      
        ) const;

  








  bool SetKnot(
        int dir,
        int knot_index,
        double knot_value
        );

  






  double Knot(
        int dir,
        int knot_index
        ) const;

  bool ZeroCVs(); 

  bool MakeRational();

  bool MakeNonRational();

  bool IsClosed(   
        int 
        ) const;   
                   

  bool IsPeriodic( 
        int 
        ) const;   

  bool IsSingular( 
        int        
                   
        ) const;

  double GrevilleAbcissa(
          int dir,    
          int gindex  
          ) const;

  
  

  



  bool ReserveCVCapacity(
    int cv_capacity
    );

  bool ReserveKnotCapacity(
    int dir,
    int cv_capacity
    );

  
  
public:
  
  
  
  
  
  
  


  int     m_dim;
  bool    m_is_rat;
  int     m_order[3];
  int     m_cv_count[3];
  int     m_knot_capacity[3];
  double* m_knot[3];
  int     m_cv_stride[3];
  int     m_cv_capacity;
  double* m_cv;
};


bool ON_GetCageXform( 
          const ON_NurbsCage& cage, 
          ON_Xform& cage_xform 
          );


class  ON_MorphControl : public ON_Geometry
{
  protected: static void* m_s_ON_MorphControl_ptr; public: static const ON_ClassId m_ON_MorphControl_class_id; static ON_MorphControl * Cast( ON_Object* ); static const ON_MorphControl * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_MorphControl( const ON_Object*, ON_Object* ); public: ON_MorphControl * Duplicate() const;;

public:
  ON_MorphControl();
  ~ON_MorphControl();
  


  void Destroy();
  

  
  
  
  

  void MemoryRelocate();

  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const;

  unsigned int SizeOf() const;

  ON_BOOL32 Write(
    ON_BinaryArchive& archive
    ) const;

  ON_BOOL32 Read(
    ON_BinaryArchive& archive
    );

  ON::object_type ObjectType() const;

  void DestroyRuntimeCache( bool bDelete = true );

  
  
  
  

  int Dimension() const;

  ON_BOOL32 GetBBox(
         double* boxmin,
         double* boxmax,
         int bGrowBox = false
         ) const;

	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  void ClearBoundingBox();

  ON_BOOL32 Transform( 
         const ON_Xform& xform
         );

  ON_BOOL32 HasBrepForm() const;

  ON_Brep* BrepForm( ON_Brep* brep = 0 ) const;


  



  bool IsRational() const;

  



  bool MakeRational();

  



  bool MakeNonRational();

  



  int CVCount() const;

  int CVCount(int dir) const;
  int Order(int dir) const;
  const double* Knot(int dir) const;
  ON_3dex MaxCVIndex() const;
  const double* CV(ON_3dex) const;
  double Weight(ON_3dex) const;

  
  
  
  

  
















  bool AddControlLocalizer(
    double support_distance, 
    double falloff_distance
    );

  bool AddSphereLocalizer(
    ON_3dPoint center,
    double support_distance, 
    double falloff_distance
    );

  bool AddCylinderLocalizer(
    ON_Line axis,
    double support_distance, 
    double falloff_distance
    );

  bool AddBoxLocalizer(
    ON_BoundingBox bbox,
    double support_distance, 
    double falloff_distance
    );

  bool AddPlaneLocalizer(
    const ON_Plane& plane,
    double support_distance, 
    double falloff_distance
    );

  bool AddConvexPolygonLocalizer(
    const ON_SimpleArray<ON_Plane>& planes,
    double support_distance, 
    double falloff_distance
    );

  
  
  

  
  bool GetCageMorph( class ON_CageMorph& cage_morph ) const;

  bool IsIdentity( const ON_BoundingBox& bbox ) const;

  int m_varient; 

  
  
  ON_NurbsCurve   m_nurbs_curve0;
  ON_NurbsCurve   m_nurbs_curve;
  ON_Interval     m_nurbs_curve_domain;

  ON_NurbsSurface m_nurbs_surface0;
  ON_NurbsSurface m_nurbs_surface;
  ON_Interval     m_nurbs_surface_domain[2];

  ON_Xform        m_nurbs_cage0;
  ON_NurbsCage    m_nurbs_cage;

  
  ON_UuidList m_captive_id;

  

  
  ON_ClassArray<ON_Localizer> m_localizers;

  
  double m_sporh_tolerance;
  bool   m_sporh_bQuickPreview;
  bool   m_sporh_bPreserveStructure;
};


class  ON_CageMorph : public ON_SpaceMorph
{
public:
  ON_CageMorph();
  ~ON_CageMorph();

  bool IsIdentity( const ON_BoundingBox& bbox ) const;

  const ON_MorphControl* m_control;
};















ON_NurbsSurface* ON_NurbsSurfaceQuadrilateral( 
             const ON_3dPoint& P, 
             const ON_3dPoint& Q, 
             const ON_3dPoint& R, 
             const ON_3dPoint& S,
             ON_NurbsSurface* nurbs_surface = 0
             );










































class ON_PlaneSurface;

class  ON_PlaneSurface : public ON_Surface
{
  protected: static void* m_s_ON_PlaneSurface_ptr; public: static const ON_ClassId m_ON_PlaneSurface_class_id; static ON_PlaneSurface * Cast( ON_Object* ); static const ON_PlaneSurface * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_PlaneSurface( const ON_Object*, ON_Object* ); public: ON_PlaneSurface * Duplicate() const;;

public:
  ON_PlaneSurface();
  ON_PlaneSurface(const ON_PlaneSurface&);
  ON_PlaneSurface& operator=(const ON_PlaneSurface&);

  ON_PlaneSurface(const ON_Plane&);
  ON_PlaneSurface& operator=(const ON_Plane&);

  virtual ~ON_PlaneSurface();

  
  
  
  
  
  
  
  
  
  ON_Plane m_plane;

  
  

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  
  

  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  

  












  ON_BOOL32 SetDomain( 
    int dir, 
    double t0, 
    double t1
    );

  ON_Interval Domain(
    int 
    ) const;

  











  ON_BOOL32 GetSurfaceSize( 
      double* width, 
      double* height 
      ) const;

  int SpanCount(
    int 
    ) const; 

  ON_BOOL32 GetSpanVector( 
    int, 
    double* 
    ) const; 

  int Degree( 
                  
    int 
    ) const; 

  ON_BOOL32 GetParameterTolerance( 
         int,     
         double,  
         double*, 
         double*  
         ) const;

  












  ON_BOOL32 IsPlanar(
        ON_Plane* plane = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  ON_BOOL32 IsClosed(   
        int        
        ) const;

  ON_BOOL32 IsPeriodic( 
        int        
        ) const;

  ON_BOOL32 IsSingular( 
        int        
                   
        ) const;
  
  



















































  bool GetNextDiscontinuity( 
                  int dir,
                  ON::continuity c,
                  double t0,
                  double t1,
                  double* t,
                  int* hint=0,
                  int* dtype=0,
                  double cos_angle_tolerance=0.99984769515639123915701155881391,
                  double curvature_tolerance=1.490116119385000000e-8
                  ) const;

  


























  bool IsContinuous(
    ON::continuity c,
    double s, 
    double t, 
    int* hint = 0,
    double point_tolerance=2.3283064365386962890625e-10,
    double d1_tolerance=2.3283064365386962890625e-10,
    double d2_tolerance=2.3283064365386962890625e-10,
    double cos_angle_tolerance=0.99984769515639123915701155881391,
    double curvature_tolerance=1.490116119385000000e-8
    ) const;

  ON_BOOL32 Reverse(  
    int 
    );

  ON_BOOL32 Transpose(); 


  ON_BOOL32 Evaluate( 
         double, double, 
         int,            
         int,            
         double*,        
         int = 0,        
                         
                         
                         
                         
                         
         int* = 0        
                         
         ) const;

  













  ON_Curve* IsoCurve(
         int dir,         
         double c
         ) const;

  
















  ON_BOOL32 Trim(
         int dir,
         const ON_Interval& domain
         );

  















  bool Extend(
    int dir,
    const ON_Interval& domain
    );

  


























  ON_BOOL32 Split(
         int dir,
         double c,
         ON_Surface*& west_or_south_side,
         ON_Surface*& east_or_north_side
         ) const;

  























  bool GetClosestPoint( 
          const ON_3dPoint& P,
          double* s,
          double* t,
          double maximum_distance = 0.0,
          const ON_Interval* sdomain = 0,
          const ON_Interval* tdomain = 0
          ) const;

  
  
  
  
  
  
  
  
  ON_BOOL32 GetLocalClosestPoint( const ON_3dPoint&, 
          double,double,     
          double*,double*,   
          const ON_Interval* = 0, 
          const ON_Interval* = 0  
          ) const;


  
















  ON_Surface* Offset(
        double offset_distance, 
        double tolerance, 
        double* max_deviation = 0
        ) const;


  int GetNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ON_NurbsSurface&,
        double = 0.0
        ) const;

  int HasNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ) const;

  














  bool SetExtents( 
         int dir,
         ON_Interval extents,
         bool bSynchDomain = false
         );

  










  ON_Interval Extents(
         int dir
         ) const;

  











  bool CreatePseudoInfinitePlane( 
          ON_PlaneEquation plane_equation,
          const ON_BoundingBox& bbox,
          double padding = 0.0625
          );

  











  bool CreatePseudoInfinitePlane( 
          const ON_Plane& plane,
          const ON_BoundingBox& bbox,
          double padding = 0.0625
          );

  












  bool CreatePseudoInfinitePlane( 
          const ON_Plane& plane,
          int point_count,
          const ON_3dPoint* point_list,
          double padding = 0.0625
          );

protected:
  
  ON_Interval m_domain[2]; 

  
  ON_Interval m_extents[2];
};


class  ON_ClippingPlaneSurface : public ON_PlaneSurface
{
  protected: static void* m_s_ON_ClippingPlaneSurface_ptr; public: static const ON_ClassId m_ON_ClippingPlaneSurface_class_id; static ON_ClippingPlaneSurface * Cast( ON_Object* ); static const ON_ClippingPlaneSurface * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_ClippingPlaneSurface( const ON_Object*, ON_Object* ); public: ON_ClippingPlaneSurface * Duplicate() const;;
public:
  ON_ClippingPlaneSurface();
  ON_ClippingPlaneSurface(const ON_Plane& src);
  ON_ClippingPlaneSurface(const ON_PlaneSurface& src);
  ~ON_ClippingPlaneSurface();

  ON_ClippingPlaneSurface& operator=(const ON_Plane& src);
  ON_ClippingPlaneSurface& operator=(const ON_PlaneSurface& src);

  void Default();

  
  ON::object_type ObjectType() const;

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  
  void Dump( ON_TextLog& ) const; 

  
  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  
  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  ON_ClippingPlane m_clipping_plane;
};

























class  ON_RevSurface : public ON_Surface
{
  protected: static void* m_s_ON_RevSurface_ptr; public: static const ON_ClassId m_ON_RevSurface_class_id; static ON_RevSurface * Cast( ON_Object* ); static const ON_RevSurface * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_RevSurface( const ON_Object*, ON_Object* ); public: ON_RevSurface * Duplicate() const;;

public:
  
  void DestroyRuntimeCache( bool bDelete = true );

public:
  
  
  ON_Curve*   m_curve;

  
  ON_Line     m_axis;

  
  
  
  ON_Interval m_angle;

  
  
  
  
  
  
  
  
  ON_Interval m_t;

  
  
  
  
  ON_BOOL32 m_bTransposed;

  
  ON_BoundingBox m_bbox;

  







  static ON_RevSurface* New();
  static ON_RevSurface* New( const ON_RevSurface& rev_surface );


  ON_RevSurface();
  ~ON_RevSurface();
  ON_RevSurface( const ON_RevSurface& );
  ON_RevSurface& operator=( const ON_RevSurface& );

  void Destroy();

  ON_BOOL32 SetAngleRadians(
    double start_angle_radians,
    double end_angle_radians
    );
  
  ON_BOOL32 SetAngleDegrees(
    double start_angle_degrees,
    double end_angle_degrees
    );

  
  
  
  

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  
  
  
  
  
  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  
  
  
  
  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  void ClearBoundingBox();

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  
  
  
  
  ON_BOOL32 SetDomain( 
    int dir, 
    double t0, 
    double t1
    );

  ON_Interval Domain(
    int 
    ) const;

  











  ON_BOOL32 GetSurfaceSize( 
      double* width, 
      double* height 
      ) const;

  int SpanCount(
    int 
    ) const; 

  ON_BOOL32 GetSpanVector( 
    int, 
    double* 
    ) const; 

  int Degree( 
                  
    int 
    ) const; 

  ON_BOOL32 GetParameterTolerance( 
         int,     
         double,  
         double*, 
         double*  
         ) const;

  










  ON_BOOL32 IsSpherical(
        ON_Sphere* sphere = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  










  ON_BOOL32 IsCylindrical(
        ON_Cylinder* cylinder = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  










  ON_BOOL32 IsConical(
        ON_Cone* cone = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  












  ON_BOOL32 IsPlanar(
        ON_Plane* plane = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  ON_BOOL32 IsClosed(   
        int        
        ) const;

  ON_BOOL32 IsPeriodic( 
        int        
        ) const;

  ON_BOOL32 IsSingular( 
        int        
                   
        ) const;
  
  



















































  bool GetNextDiscontinuity( 
                  int dir,
                  ON::continuity c,
                  double t0,
                  double t1,
                  double* t,
                  int* hint=0,
                  int* dtype=0,
                  double cos_angle_tolerance=0.99984769515639123915701155881391,
                  double curvature_tolerance=1.490116119385000000e-8
                  ) const;




























  bool IsContinuous(
    ON::continuity c,
    double s, 
    double t, 
    int* hint = 0,
    double point_tolerance=2.3283064365386962890625e-10,
    double d1_tolerance=2.3283064365386962890625e-10,
    double d2_tolerance=2.3283064365386962890625e-10,
    double cos_angle_tolerance=0.99984769515639123915701155881391,
    double curvature_tolerance=1.490116119385000000e-8
    ) const;

  ON_BOOL32 Reverse(  
    int 
    );

  ON_BOOL32 Transpose(); 

  ON_BOOL32 Evaluate( 
         double, double, 
         int,            
         int,            
         double*,        
         int = 0,        
                         
                         
                         
                         
                         
         int* = 0        
                         
         ) const;

  













  ON_Curve* IsoCurve(
         int dir,
         double c
         ) const;

  















  ON_BOOL32 Trim(
         int dir,
         const ON_Interval& domain
         );

  















  bool Extend(
    int dir,
    const ON_Interval& domain
    );

  

























  ON_BOOL32 Split(
         int dir,
         double c,
         ON_Surface*& west_or_south_side,
         ON_Surface*& east_or_north_side
         ) const;

  int GetNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ON_NurbsSurface&,
        double = 0.0
        ) const;

  int HasNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ) const;

  bool GetSurfaceParameterFromNurbFormParameter(
        double nurbs_s, double nurbs_t,
        double* surface_s, double* surface_t
        ) const;

  bool GetNurbFormParameterFromSurfaceParameter(
        double surface_s, double surface_t,
        double* nurbs_s,  double* nurbs_t
        ) const;
};























class ON_SumSurface;


class  ON_SumSurface : public ON_Surface
{
  protected: static void* m_s_ON_SumSurface_ptr; public: static const ON_ClassId m_ON_SumSurface_class_id; static ON_SumSurface * Cast( ON_Object* ); static const ON_SumSurface * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_SumSurface( const ON_Object*, ON_Object* ); public: ON_SumSurface * Duplicate() const;;

public:
  
  void DestroyRuntimeCache( bool bDelete = true );

public:

  
  
  
  ON_Curve*  m_curve[2]; 
                         
  ON_3dVector m_basepoint;
  ON_BoundingBox m_bbox; 

public:

  







  static ON_SumSurface* New();
  static ON_SumSurface* New( const ON_SumSurface& rev_surface );

  ON_SumSurface();
  ~ON_SumSurface();
  ON_SumSurface( const ON_SumSurface& );
  ON_SumSurface& operator=(const ON_SumSurface&);

  








  ON_BOOL32 Create( const ON_Curve& curve, ON_3dVector extrusion_vector );

  










  ON_BOOL32 Create( ON_Curve* pCurve, ON_3dVector extrusion_vector );

  








  ON_BOOL32 Create( const ON_Curve& curve, 
               const ON_Curve& path_curve
               );

  












  ON_BOOL32 Create( 
          ON_Curve* pCurve, 
          ON_Curve* pPathCurve
          );

  void Destroy();

  void EmergencyDestroy();


  
  
  
  

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  
















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  
  
  
  
  
  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  
  
  
  
  int Dimension() const;

  ON_BOOL32 GetBBox(
         double* boxmin,
         double* boxmax,
         int bGrowBox = false
         ) const;

  void ClearBoundingBox();

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  bool IsDeformable() const;

  
  bool MakeDeformable();

  
  
  
  
  ON_BOOL32 SetDomain( 
    int dir, 
    double t0, 
    double t1
    );

  ON_Interval Domain(
    int 
    ) const;

  











  ON_BOOL32 GetSurfaceSize( 
      double* width, 
      double* height 
      ) const;

  int SpanCount(
    int 
    ) const; 

  ON_BOOL32 GetSpanVector( 
    int, 
    double* 
    ) const; 

  int Degree( 
                  
    int 
    ) const; 

  ON_BOOL32 GetParameterTolerance( 
         int,     
         double,  
         double*, 
         double*  
         ) const;

  












  ON_BOOL32 IsPlanar(
        ON_Plane* plane = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;

  ON_BOOL32 IsClosed(   
        int        
        ) const;

  ON_BOOL32 IsPeriodic( 
        int        
        ) const;

  ON_BOOL32 IsSingular( 
        int        
                   
        ) const;
  
  



















































  bool GetNextDiscontinuity( 
                  int dir,
                  ON::continuity c,
                  double t0,
                  double t1,
                  double* t,
                  int* hint=0,
                  int* dtype=0,
                  double cos_angle_tolerance=0.99984769515639123915701155881391,
                  double curvature_tolerance=1.490116119385000000e-8
                  ) const;

  


























  bool IsContinuous(
    ON::continuity c,
    double s, 
    double t, 
    int* hint = 0,
    double point_tolerance=2.3283064365386962890625e-10,
    double d1_tolerance=2.3283064365386962890625e-10,
    double d2_tolerance=2.3283064365386962890625e-10,
    double cos_angle_tolerance=0.99984769515639123915701155881391,
    double curvature_tolerance=1.490116119385000000e-8
    ) const;

  ON_BOOL32 Reverse(  
    int 
    );

  ON_BOOL32 Transpose(); 

  ON_BOOL32 Evaluate( 
         double, double, 
         int,            
         int,            
         double*,        
         int = 0,        
                         
                         
                         
                         
                         
         int* = 0        
                         
         ) const;

  ON_Curve* IsoCurve(
         int,              
                           
                           
                           
         double            
         ) const;

  int GetNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ON_NurbsSurface&,
        double = 0.0
        ) const;

  int HasNurbForm( 
                   
                   
                   
                   
                   
                   
                   
                   
                   
        ) const;

  bool GetSurfaceParameterFromNurbFormParameter(
        double nurbs_s, double nurbs_t,
        double* surface_s, double* surface_t
        ) const;

  bool GetNurbFormParameterFromSurfaceParameter(
        double surface_s, double surface_t,
        double* nurbs_s,  double* nurbs_t
        ) const;


  















  ON_BOOL32 Trim(
         int dir,
         const ON_Interval& domain
         );

  















  bool Extend(
    int dir,
    const ON_Interval& domain
    );

  

























  ON_BOOL32 Split(
         int dir,
         double c,
         ON_Surface*& west_or_south_side,
         ON_Surface*& east_or_north_side
         ) const;
};





























class ON_BrepTrim;
class ON_BrepEdge;
class ON_BrepLoop;
class ON_BrepFace;



















class  ON_BrepVertex : public ON_Point
{
  protected: static void* m_s_ON_BrepVertex_ptr; public: static const ON_ClassId m_ON_BrepVertex_class_id; static ON_BrepVertex * Cast( ON_Object* ); static const ON_BrepVertex * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_BrepVertex( const ON_Object*, ON_Object* ); public: ON_BrepVertex * Duplicate() const;;

public:
  
  
  
  
  ON_U m_vertex_user; 

  
  int m_vertex_index;

  
  
  
  
  
  ON_BrepVertex();
  ON_BrepVertex(
    int 
    );
  ON_BrepVertex& operator=(const ON_BrepVertex&);

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  void Dump( ON_TextLog& ) const; 

  
  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  
  ON_BOOL32 Read( ON_BinaryArchive& );

  
  ON_COMPONENT_INDEX ComponentIndex() const;

  
  

  
  
  
  
  bool SetPoint( 
          const ON_3dPoint& 
          );

  
  
  ON_3dPoint Point() const;

  
  
  
  
  double Tolerance() const;

  
  
  int EdgeCount() const;

  
  

  
  
  
  
  
  
  
  
  
  ON_SimpleArray<int> m_ei;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  double m_tolerance;

private:
  ON_BrepVertex( const ON_BrepVertex& ); 

};














class  ON_BrepEdge : public  ON_CurveProxy
{
  protected: static void* m_s_ON_BrepEdge_ptr; public: static const ON_ClassId m_ON_BrepEdge_class_id; static ON_BrepEdge * Cast( ON_Object* ); static const ON_BrepEdge * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_BrepEdge( const ON_Object*, ON_Object* ); public: ON_BrepEdge * Duplicate() const;;
public:

  
  
  
  
  ON_U m_edge_user;

  
  int m_edge_index;    


  
  ON_BOOL32 IsClosed() const;

  
  
  
  
  
  ON_BrepEdge();
  ON_BrepEdge(int); 
  ON_BrepEdge& operator=(const ON_BrepEdge&);

  
  
  ON::object_type ObjectType() const;

  



  ON_Brep* Brep() const;


  





  ON_BrepTrim* Trim( int eti ) const;

  



  int TrimCount() const;

  





  ON_BrepVertex* Vertex(int evi) const;

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  void Dump( ON_TextLog& ) const; 

  
  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  
  ON_BOOL32 Read( ON_BinaryArchive& );

  
  ON_COMPONENT_INDEX ComponentIndex() const;

  
  ON_BOOL32 Reverse();

  
  ON_BOOL32 SetStartPoint(
          ON_3dPoint start_point
          );

  
  ON_BOOL32 SetEndPoint(
          ON_3dPoint end_point
          );

  
  

  




  int EdgeCurveIndexOf() const;

  



  const ON_Curve* EdgeCurveOf() const;

  
















  bool ChangeEdgeCurve(
    int c3i 
    );

  




  void UnsetPlineEdgeParameters();

  
  
  int m_c3i;

  
  
  
  
  
  
  
  
  
  int m_vi[2];

  
  ON_SimpleArray<int> m_ti;

  
  
  
  
  
  
  
  
  
  double m_tolerance;

private:
  friend class ON_Brep;
  ON_Brep* m_brep; 
  ON_BrepEdge( const ON_BrepEdge& ); 
};

struct ON_BrepTrimPoint
{
  ON_2dPoint p; 
  double t;     
  double e;     
};

























class  ON_BrepTrim : public  ON_CurveProxy
{
  protected: static void* m_s_ON_BrepTrim_ptr; public: static const ON_ClassId m_ON_BrepTrim_class_id; static ON_BrepTrim * Cast( ON_Object* ); static const ON_BrepTrim * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_BrepTrim( const ON_Object*, ON_Object* ); public: ON_BrepTrim * Duplicate() const;;

public:
  void DestroyRuntimeCache( bool bDelete = true );

  
  unsigned int SizeOf() const;

  
  
  
  
  ON_U m_trim_user;

  int m_trim_index;  

  
  enum TYPE 
  {
    unknown  = 0,
    boundary = 1,       
                        
                        
    mated    = 2,       
                        
                        
                        
    seam     = 3,       
                        
                        
                        
                        
                        
                        
                        
    singular = 4,       
                        
                        
                        
    crvonsrf = 5,       
                        
                        
    ptonsrf  = 6,       
                        
                        
                        
    slit     = 7,       
                        
    trim_type_count = 8,
    force_32_bit_trim_type = 0xFFFFFFFF
  };

  
  
  
  
  
  ON_BrepTrim();
  ON_BrepTrim(int); 
  ON_BrepTrim& operator=(const ON_BrepTrim&);

  



  ON_Brep* Brep() const;

  



  ON_BrepLoop* Loop() const;

  



  ON_BrepFace* Face() const;

  




  ON_BrepEdge* Edge() const;

  





  ON_BrepVertex* Vertex(int tvi) const;

  
  
  
  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  ON_BOOL32 Read( ON_BinaryArchive& );

  
  ON_COMPONENT_INDEX ComponentIndex() const;

  
  
  
  
  
  ON_BOOL32 Reverse();

  
  ON_BOOL32 SetStartPoint(
          ON_3dPoint start_point
          );

  
  ON_BOOL32 SetEndPoint(
          ON_3dPoint end_point
          );

  
  
  
  

















  bool ChangeTrimCurve( int c2i );

  







  void DestroyPspaceInformation();
  
  
















  bool RemoveFromEdge( 
        bool bRemoveFromStartVertex,
        bool bRemoveFromEndVertex
        );

  












  bool AttachToEdge(
        int edge_index,
        bool bRev3d
        );

  



  const ON_Curve* TrimCurveOf() const;

  



  const ON_Curve* EdgeCurveOf() const;

  



  const ON_Surface* SurfaceOf() const;

  




  int TrimCurveIndexOf() const;

  




  int EdgeCurveIndexOf() const;

  




  int SurfaceIndexOf() const;

  



  int FaceIndexOf() const;

  












  bool IsSlit() const;

  














  bool IsSeam() const;

  











  bool TransformTrim( const ON_Xform& xform );

  
  int m_c2i;

  
  int m_ei;

  
  
  
  
  
  
  int m_vi[2];
        
  
  bool   m_bRev3d;

  TYPE   m_type;
  ON_Surface::ISO  m_iso;

  
  int    m_li;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  double m_tolerance[2]; 

  
  
  ON_SimpleArray<ON_BrepTrimPoint> m_pline;

  




  void UnsetPlineEdgeParameters();

  
  
  ON_BoundingBox m_pbox;

public:
  

  void m__legacy_flags_Set(int,int);   
  bool m__legacy_flags_Get(int*,int*) const; 
  double m__legacy_2d_tol; 
  double m__legacy_3d_tol; 
  int    m__legacy_flags;  

private:
  friend class ON_Brep;
  ON_Brep* m_brep; 
  ON_BrepTrim( const ON_BrepTrim& ); 
};

class  ON_BrepLoop : public  ON_Geometry
{
  protected: static void* m_s_ON_BrepLoop_ptr; public: static const ON_ClassId m_ON_BrepLoop_class_id; static ON_BrepLoop * Cast( ON_Object* ); static const ON_BrepLoop * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_BrepLoop( const ON_Object*, ON_Object* ); public: ON_BrepLoop * Duplicate() const;;

public:
  void DestroyRuntimeCache( bool bDelete = true );

  
  
  
  

  





  int Dimension() const;

  
  ON_BOOL32 GetBBox(
         double* boxmin,
         double* boxmax,
         int bGrowBox = false
         ) const;

  
  ON_BOOL32 Transform( 
         const ON_Xform& xform
         );
public:
  



  ON_Brep* Brep() const;

  



  ON_BrepFace* Face() const;

  





  ON_BrepTrim* Trim( int lti ) const;

  



  int TrimCount() const;

  
  
  
  
  ON_U m_loop_user;

  int m_loop_index;  

  enum TYPE {
    unknown  = 0,
    outer    = 1,  
    inner    = 2,  
    slit     = 3,  
    crvonsrf = 4,  
                   
    ptonsrf = 5,   
                   
    type_count = 6
  };

  ON_BrepLoop();
  ON_BrepLoop(int); 
  ON_BrepLoop& operator=(const ON_BrepLoop&);

  
  
  
  
  

  
  unsigned int SizeOf() const;

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  ON_BOOL32 Read( ON_BinaryArchive& );

  
  ON_COMPONENT_INDEX ComponentIndex() const;

  
  

  
  
  
  int IndexOfTrim( const ON_BrepTrim& ) const;

  




  int SurfaceIndexOf() const;

  



  const ON_Surface* SurfaceOf() const;

  











  bool TransformTrim( const ON_Xform& xform );

  ON_SimpleArray<int> m_ti;   
  TYPE         m_type;
  int          m_fi;   

  
  
  
  ON_BoundingBox m_pbox;
private:
  friend class ON_Brep;
  ON_Brep* m_brep;
  ON_BrepLoop(const ON_BrepLoop&); 
};

class  ON_BrepFace : public ON_SurfaceProxy
{
  protected: static void* m_s_ON_BrepFace_ptr; public: static const ON_ClassId m_ON_BrepFace_class_id; static ON_BrepFace * Cast( ON_Object* ); static const ON_BrepFace * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_BrepFace( const ON_Object*, ON_Object* ); public: ON_BrepFace * Duplicate() const;;

public:
  void DestroyRuntimeCache( bool bDelete = true );

  
  
  
  
  ON_U m_face_user;

  int m_face_index;  

  ON_BrepFace();
  ~ON_BrepFace();
  ON_BrepFace(int);
  ON_BrepFace& operator=(const ON_BrepFace&);

  



  ON_Brep* Brep() const;

  





  ON_BrepLoop* Loop( int fli ) const;

  



  int LoopCount() const;

  



  ON_BrepLoop* OuterLoop() const;

  











  class ON_BrepFaceSide* FaceSide(int dir) const;


  
  
  
  
  

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  ON_BOOL32 Read( ON_BinaryArchive& );

  
  ON_COMPONENT_INDEX ComponentIndex() const;

  
  void ClearBoundingBox();

  
  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  













  ON_BOOL32 Reverse(
    int dir
    );

  










  ON_BOOL32 Transpose();

  










  ON_BOOL32 SetDomain(
    int dir,
    double t0,
    double t1
    );

  






  bool SetDomain(
         ON_Interval udom,
         ON_Interval vdom
         );

  
  
  
  

  
  bool SetMesh( ON::mesh_type, ON_Mesh* mesh );

  const ON_Mesh* Mesh( ON::mesh_type mesh_type ) const;

  












  void DestroyMesh( ON::mesh_type mesh_type, bool bDeleteMesh = true );

  
  

  











  bool TransformTrim( const ON_Xform& xform );

  





























  bool ChangeSurface(
    int si
    );
  bool ChangeSurface(
    int si,
    bool bTransformTrimCurves
    );

  




  int SurfaceIndexOf() const;

  



  const ON_Surface* SurfaceOf() const;

  ON_SimpleArray<int> m_li; 
  int m_si;            
  bool m_bRev;         
                       

  
  
  
  
  
  
  
  
  
  
  
  
  
  int m_face_material_channel;

  
  ON_UUID m_face_uuid;
private:
  ON_BoundingBox m_bbox;      
  ON_Interval    m_domain[2]; 
  ON_Mesh* m_render_mesh;
  ON_Mesh* m_analysis_mesh;
  ON_Mesh* m_preview_mesh;
  
  
private:
  friend class ON_Brep;
  ON_Brep* m_brep;
  ON_BrepFace( const ON_BrepFace& );
};

class  ON_BrepFaceSide : public ON_Object
{
  protected: static void* m_s_ON_BrepFaceSide_ptr; public: static const ON_ClassId m_ON_BrepFaceSide_class_id; static ON_BrepFaceSide * Cast( ON_Object* ); static const ON_BrepFaceSide * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_BrepFaceSide( const ON_Object*, ON_Object* ); public: ON_BrepFaceSide * Duplicate() const;;
public:
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  
  
  
  ON_U m_faceside_user;

  
  int m_faceside_index;  

  ON_BrepFaceSide();
  ~ON_BrepFaceSide();
  ON_BrepFaceSide& operator=(const ON_BrepFaceSide&);

  ON_BOOL32 Write(ON_BinaryArchive& binary_archive) const;
  ON_BOOL32 Read(ON_BinaryArchive& binary_archive);


  



  ON_Brep* Brep() const;

  



  class ON_BrepRegionTopology* RegionTopology() const;

  



  class ON_BrepRegion* Region() const;

  



  class ON_BrepFace* Face() const;

  






  int SurfaceNormalDirection() const;

public:
  int m_ri; 
            
            
            
  int m_fi; 
  int m_srf_dir; 
                 

private:
  friend class ON_Brep;
  friend class ON_BrepRegionTopology;
  ON_BrepRegionTopology* m_rtop;
  ON_BrepFaceSide( const ON_BrepFaceSide& );
};

class  ON_BrepRegion : public ON_Object
{
  protected: static void* m_s_ON_BrepRegion_ptr; public: static const ON_ClassId m_ON_BrepRegion_class_id; static ON_BrepRegion * Cast( ON_Object* ); static const ON_BrepRegion * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_BrepRegion( const ON_Object*, ON_Object* ); public: ON_BrepRegion * Duplicate() const;;
public:
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  
  
  
  ON_U m_region_user;

  
  int m_region_index;

  ON_BrepRegion();
  ~ON_BrepRegion();
  ON_BrepRegion& operator=(const ON_BrepRegion&);

  ON_BOOL32 Write(ON_BinaryArchive& binary_archive) const;
  ON_BOOL32 Read(ON_BinaryArchive& binary_archive);

  



  ON_Brep* Brep() const;

  



  class ON_BrepRegionTopology* RegionTopology() const;

  







  ON_BrepFaceSide* FaceSide(int rfsi) const;

  



  bool IsFinite() const;

  



  const ON_BoundingBox& BoundingBox() const;

  ON_SimpleArray<int> m_fsi; 
  int m_type; 
  ON_BoundingBox m_bbox;

  











  ON_Brep* RegionBoundaryBrep( ON_Brep* brep = 0 ) const;

private:
  friend class ON_Brep;
  friend class ON_BrepRegionTopology;
  ON_BrepRegionTopology* m_rtop;
  ON_BrepRegion( const ON_BrepRegion& );
};






















class  ON_BrepVertexArray : public ON_ObjectArray<ON_BrepVertex>
{
public:
  ON_BrepVertexArray();
  ~ON_BrepVertexArray();

  ON_BOOL32 Read( ON_BinaryArchive& );
  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  unsigned int SizeOf() const;
};

class  ON_BrepEdgeArray   : public  ON_ObjectArray<ON_BrepEdge>
{
public:
  ON_BrepEdgeArray();
  ~ON_BrepEdgeArray();
  ON_BOOL32 Read( ON_BinaryArchive& );
  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  unsigned int SizeOf() const;
};

class  ON_BrepTrimArray   : public  ON_ObjectArray<ON_BrepTrim>
{
public:
  ON_BrepTrimArray();
  ~ON_BrepTrimArray();
  ON_BOOL32 Read( ON_BinaryArchive& );
  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  unsigned int SizeOf() const;
};

class  ON_BrepLoopArray   : public  ON_ObjectArray<ON_BrepLoop>
{
public:
  ON_BrepLoopArray();
  ~ON_BrepLoopArray();
  ON_BOOL32 Read( ON_BinaryArchive& );
  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  unsigned int SizeOf() const;
};

class  ON_BrepFaceArray   : public  ON_ObjectArray<ON_BrepFace>
{
public:
  ON_BrepFaceArray();
  ~ON_BrepFaceArray();
  ON_BOOL32 Read( ON_BinaryArchive& );
  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  unsigned int SizeOf() const;
};

class  ON_BrepFaceSideArray : public ON_ObjectArray<ON_BrepFaceSide>
{
public:
  ON_BrepFaceSideArray();
  ~ON_BrepFaceSideArray();

  bool Read( ON_BinaryArchive& );
  bool Write( ON_BinaryArchive& ) const;

  unsigned int SizeOf() const;
};

class  ON_BrepRegionArray : public ON_ObjectArray<ON_BrepRegion>
{
public:
  ON_BrepRegionArray();
  ~ON_BrepRegionArray();

  bool Read( ON_BinaryArchive& );
  bool Write( ON_BinaryArchive& ) const;

  unsigned int SizeOf() const;
};

class  ON_BrepRegionTopology
{
public:
  ON_BrepRegionTopology();
  ON_BrepRegionTopology(const ON_BrepRegionTopology& src);
  ~ON_BrepRegionTopology();
  ON_BrepRegionTopology& operator=(const ON_BrepRegionTopology&);

  ON_BrepFaceSideArray m_FS;
  ON_BrepRegionArray m_R;

  ON_Brep* Brep() const;
  bool IsValid( ON_TextLog* text_log = 0 ) const;
  bool Read( ON_BinaryArchive& );
  bool Write( ON_BinaryArchive& ) const;

  unsigned int SizeOf() const;

private:
  friend class ON_BrepRegionTopologyUserData;
  friend class ON_Brep;
  ON_Brep* m_brep;
};

class  ON_Brep : public ON_Geometry 
{
  protected: static void* m_s_ON_Brep_ptr; public: static const ON_ClassId m_ON_Brep_class_id; static ON_Brep * Cast( ON_Object* ); static const ON_Brep * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Brep( const ON_Object*, ON_Object* ); public: ON_Brep * Duplicate() const;;

public:
  
  void DestroyRuntimeCache( bool bDelete = true );

  
  unsigned int SizeOf() const;

  
  ON__UINT32 DataCRC(ON__UINT32 current_remainder) const;

  
  bool EvaluatePoint( const class ON_ObjRef& objref, ON_3dPoint& P ) const;

public:


  


























  static ON_Brep* New();

  








  static ON_Brep* New(const ON_Brep&);

	
  ON_Brep();
	~ON_Brep();		
  ON_Brep(const ON_Brep&);
  ON_Brep& operator=(const ON_Brep&);

  
  void MemoryRelocate();


  









  bool IsDuplicate( 
          const ON_Brep& other, 
          double tolerance = 2.3283064365386962890625e-10 
          ) const;

  
  

  
  void Destroy(); 

  
  void EmergencyDestroy(); 

  










  int CreateMesh( 
    const ON_MeshParameters& mp,
    ON_SimpleArray<ON_Mesh*>& mesh_list
    ) const;

  












  void DestroyMesh( ON::mesh_type mesh_type, bool bDeleteMesh = true );

  














  int GetMesh( ON::mesh_type mesh_type, ON_SimpleArray< const ON_Mesh* >& meshes ) const;

  























  bool Create( 
          ON_Surface*& pSurface
          );

  bool Create( 
          ON_NurbsSurface*& pNurbsSurface
          );

  bool Create( 
          ON_PlaneSurface*& pPlaneSurface
          );

  bool Create( 
          ON_RevSurface*& pRevSurface
          );

  bool Create( 
          ON_SumSurface*& pSumSurface
          );

  




















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  






















  bool IsValidTopology( ON_TextLog* text_log = 0 ) const;


  

























  bool IsValidGeometry( ON_TextLog* text_log = 0 ) const;

  



























  bool IsValidTolerancesAndFlags( ON_TextLog* text_log = 0 ) const;

  
  
  
  
  
  
  
  bool IsValidForV2() const;
  bool IsValidForV2( const ON_BrepTrim& ) const;
  bool IsValidForV2( const ON_BrepEdge& ) const;

  
  void Dump( ON_TextLog& ) const; 

  
  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  
  ON_BOOL32 Read( ON_BinaryArchive& );

  
  ON::object_type ObjectType() const;

  
  int Dimension() const;

  
  void ClearBoundingBox();

  
  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  
  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  ON_BOOL32 SwapCoordinates(
        int, int        
        );

  
  ON_BOOL32 HasBrepForm() const; 

  












  ON_Brep* BrepForm( ON_Brep* brep = 0 ) const;

  
  

  
  
  
  
  int AddTrimCurve( ON_Curve* ); 
  int AddEdgeCurve( ON_Curve* ); 
  int AddSurface( ON_Surface* ); 

  
  
  
  
  
  
  
  
  
  bool SetEdgeCurve( 
    ON_BrepEdge& edge,
    int c3_index,
    const ON_Interval* sub_domain = 0
    );

  
  
  
  
  
  
  
  
  
  bool SetTrimCurve( 
    ON_BrepTrim& trim,
    int c2_index,
    const ON_Interval* sub_domain = 0
    );

  
  
  ON_BrepVertex& NewVertex();
  ON_BrepVertex& NewVertex( 
    ON_3dPoint vertex_point,
    double vertex_tolerance = -1.23432101234321e+308
    );

  ON_BrepEdge& NewEdge(
                  int = -1              
                  );
  ON_BrepEdge& NewEdge( 
                  ON_BrepVertex&, 
                  ON_BrepVertex&, 
                  int = -1,       
                  const ON_Interval* = 0, 
                  double edge_tolerance = -1.23432101234321e+308
                  );

  


















  ON_BrepFace& NewFace(
                  int si = -1
                  );

  























  ON_BrepFace* NewFace( 
    const ON_Surface& surface 
    );

  






























  ON_BrepFace* NewFace(
       ON_Surface* pSurface,
       int vid[4],
       int eid[4],
       ON_BOOL32 bRev3d[4]
       );

  


















  ON_BrepFace* NewRuledFace(
        const ON_BrepEdge& edgeA,
        bool bRevEdgeA,
        const ON_BrepEdge& edgeB, 
        bool bRevEdgeB
        );

  

















  ON_BrepFace* NewConeFace(
        const ON_BrepVertex& vertex,
        const ON_BrepEdge& edge,
        bool bRevEdge
        );

  






  ON_BrepLoop& NewLoop( ON_BrepLoop::TYPE );

  







  ON_BrepLoop& NewLoop( ON_BrepLoop::TYPE loop_type, ON_BrepFace& face );

  










  ON_BrepLoop* NewOuterLoop( int face_index );

  

























  ON_BrepLoop* NewOuterLoop(
         int face_index,
         int vid[4],
         int eid[4],
         ON_BOOL32 bRev3d[4]
         );

  























  bool NewPlanarFaceLoop(
        int face_index,
        ON_BrepLoop::TYPE loop_type,
        ON_SimpleArray<ON_Curve*>& boundary,
        ON_BOOL32 bDuplicateCurves = true
        );


  































  ON_BrepTrim& NewTrim(
                  int c2i = -1
                  );

  

































  ON_BrepTrim& NewTrim(
                  ON_BOOL32 bRev3d,
                  ON_BrepLoop& loop,
                  int c2i = -1
                  );

  


































  ON_BrepTrim& NewTrim(
                  ON_BrepEdge& edge,
                  ON_BOOL32 bRev3d,
                  int c2i = -1
                  );

  
































  ON_BrepTrim& NewTrim(
                  ON_BrepEdge& edge,
                  ON_BOOL32 bRev3d,
                  ON_BrepLoop& loop,
                  int c2i = -1
                  );

  













  ON_BrepTrim& NewSingularTrim(
                  const ON_BrepVertex& vertex,
                  ON_BrepLoop& loop,
                  ON_Surface::ISO iso,
                  int c2i = -1
                  );

  













  ON_BrepVertex& NewPointOnFace( 
    ON_BrepFace& face,
    double s,
    double t
    );

  














  ON_BrepTrim& NewCurveOnFace(
                  ON_BrepFace& face,
                  ON_BrepEdge& edge,
                  ON_BOOL32 bRev3d = false,
                  int c2i = -1
                  );

  
  
  void Append( 
    const ON_Brep& 
    ); 

  
  
  
  
  void SetVertices(void);

  
  
  
  
  
  bool SetTrimIsoFlags();    
  bool SetTrimIsoFlags( ON_BrepFace& );
  bool SetTrimIsoFlags( ON_BrepLoop& );
  bool SetTrimIsoFlags( ON_BrepTrim& );


  
















  ON_BrepTrim::TYPE TrimType( 
    const ON_BrepTrim& trim, 
    ON_BOOL32 bLazy = true
    ) const;

  
  
  
  
  bool SetTrimTypeFlags( ON_BOOL32 bLazy = false );    
  bool SetTrimTypeFlags( ON_BrepFace&, ON_BOOL32 bLazy = false );
  bool SetTrimTypeFlags( ON_BrepLoop&, ON_BOOL32 bLazy = false );
  bool SetTrimTypeFlags( ON_BrepTrim&, ON_BOOL32 bLazy = false );

  
  
  bool GetTrim2dStart( 
          int trim_index,         
          ON_2dPoint& 
          ) const;

  
  
  bool GetTrim2dEnd(
          int,         
          ON_2dPoint& 
          ) const;

  
  
  bool GetTrim3dStart( 
          int,         
          ON_3dPoint& 
          ) const;

  
  
  bool GetTrim3dEnd(
          int,         
          ON_3dPoint& 
          ) const;

  
  
  
  ON_BrepLoop::TYPE ComputeLoopType( const ON_BrepLoop& ) const;

  
  
  
  
  bool SetVertexTolerance( ON_BrepVertex& vertex, ON_BOOL32 bLazy = false ) const;
  virtual
  bool SetTrimTolerance( ON_BrepTrim& trim, ON_BOOL32 bLazy = false ) const;
  virtual
  bool SetEdgeTolerance( ON_BrepEdge& edge, ON_BOOL32 bLazy = false ) const;

  

















  bool SetVertexTolerances( ON_BOOL32 bLazy = false );

  

















  bool SetTrimTolerances( ON_BOOL32 bLazy = false );

  

















  bool SetEdgeTolerances( ON_BOOL32 bLazy = false );


  









  virtual
  bool SetTrimBoundingBox( ON_BrepTrim& trim, ON_BOOL32 bLazy=false );

  









  virtual
  bool SetTrimBoundingBoxes( ON_BrepLoop& loop, ON_BOOL32 bLazy=false );


  











  virtual
  bool SetTrimBoundingBoxes( ON_BrepFace& face, ON_BOOL32 bLazy=false );

  










  virtual
  bool SetTrimBoundingBoxes( ON_BOOL32 bLazy=false );

  






















  void SetTolerancesBoxesAndFlags(
       ON_BOOL32 bLazy = false,
       ON_BOOL32 bSetVertexTolerances = true,
       ON_BOOL32 bSetEdgeTolerances = true,
       ON_BOOL32 bSetTrimTolerances = true,
       ON_BOOL32 bSetTrimIsoFlags = true,
       ON_BOOL32 bSetTrimTypeFlags = true,
       ON_BOOL32 bSetLoopTypeFlags = true,
       ON_BOOL32 bSetTrimBoxes = true
       );


  
  

  









  int SurfaceUseCount( 
              int surface_index,
              int max_count=0 ) 
              const;
  









  int EdgeCurveUseCount( 
              int c3_index,
              int max_count=0 ) 
              const;

  









  int TrimCurveUseCount( 
              int c2_index,
              int max_count=0 ) 
              const;

  













  ON_Curve* Loop3dCurve( 
    const ON_BrepLoop& loop,
    ON_BOOL32 bRevCurveIfFaceRevIsTrue = false
    ) const;

  














  int Loop3dCurve( 
    const ON_BrepLoop& loop,
    ON_SimpleArray<ON_Curve*>& curve_list,
    ON_BOOL32 bRevCurveIfFaceRevIsTrue = false
    ) const;


  








  ON_Curve* Loop2dCurve( const ON_BrepLoop& loop ) const;

  















  virtual
  int SolidOrientation() const;

  











  bool IsSolid() const;
  
  















  bool IsManifold( 
    ON_BOOL32* pbIsOriented = 0,
    ON_BOOL32* pbHasBoundary = 0
    ) const;

  


















  bool IsPointInside(
          ON_3dPoint P, 
          double tolerance,
          bool bStrictlyInside
          ) const;


  bool IsSurface() const;      
                               
                               
                               
                               
                               
                               
                               
                               


  bool FaceIsSurface(          
         int 
         ) const;              
                               
                               
                               
                               
                               
                               
                               
                               

  bool LoopIsSurfaceBoundary(  
         int 
         ) const;              

  
  

  
  
  
  bool FlipReversedSurfaces();

  
  
  
  
  bool SetTrimDomain(
         int, 
         const ON_Interval&
         );

  
  
  
  
  bool SetEdgeDomain(
         int, 
         const ON_Interval&
         );

  
  
  void Flip();

  
  void FlipFace(ON_BrepFace&);

  
  
  
  
  
  
  
  void FlipLoop(ON_BrepLoop&); 

  
  
  
  
  
  
  
  
  
  
  
  int LoopDirection( const ON_BrepLoop& ) const;


  













  bool SortFaceLoops( ON_BrepFace& face ) const;

  





  bool CombineCoincidentVertices(ON_BrepVertex&, ON_BrepVertex&); 

  





  bool CombineCoincidentEdges(ON_BrepEdge&, ON_BrepEdge&); 

  



















  ON_BrepEdge* CombineContiguousEdges( 
    int edge_index0, 
    int edge_iindex1, 
    double angle_tolerance_radians = 3.141592653589793238462643/180.0
    );

  
  
  
  
  
  void DeleteVertex(ON_BrepVertex& vertex);
  void DeleteEdge(ON_BrepEdge& edge, ON_BOOL32 bDeleteEdgeVertices); 
  void DeleteTrim(ON_BrepTrim& trim, ON_BOOL32 bDeleteTrimEdges); 
  void DeleteLoop(ON_BrepLoop& loop, ON_BOOL32 bDeleteLoopEdges); 
  void DeleteFace(ON_BrepFace& face, ON_BOOL32 bDeleteFaceEdges); 
  void DeleteSurface(int s_index);
  void Delete2dCurve(int c2_index);
  void Delete3dCurve(int c3_index);

  
  
  
  
  
  
  
  
  
  
  
  void LabelConnectedComponent(
    int face_index,
    int label
    );

  













  int LabelConnectedComponents();

  














  int GetConnectedComponents( 
          ON_SimpleArray< ON_Brep* >& components,
          bool bDuplicateMeshes
          ) const;

  


















  ON_Brep* SubBrep( 
    int subfi_count, 
    const int* sub_fi, 
    ON_Brep* sub_brep = 0 
    ) const;

  
  
  
  
  bool HasRegionTopology() const;

  






  const ON_BrepRegionTopology& RegionTopology() const;

  






  void DestroyRegionTopology();
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_Brep* DuplicateFace(
    int face_index,
    ON_BOOL32 bDuplicateMeshes
    ) const;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_Brep* DuplicateFaces(
    int face_count,
    const int* face_index,
    ON_BOOL32 bDuplicateMeshes
    ) const;

  
  
  
  
  
  
  
  
  ON_Brep* ExtractFace(
    int face_index
    );


  













  bool StandardizeEdgeCurve( int edge_index, bool bAdjustEnds );


  


















  bool StandardizeEdgeCurve( int edge_index, bool bAdjustEnds, int EdgeCurveUse );


  








  void StandardizeEdgeCurves( bool bAdjustEnds );

  












  bool StandardizeTrimCurve( int trim_index );

  






  void StandardizeTrimCurves();

  












  bool StandardizeFaceSurface( int face_index );

  






  void StandardizeFaceSurfaces();

  
  __declspec(deprecated) void StardardizeFaceSurfaces();

  












  void Standardize();
  

  




























  bool ShrinkSurface( ON_BrepFace& face, int DisableSide=0 );

  


















  bool ShrinkSurfaces();

  














  bool Compact();

  bool CullUnusedFaces(); 
  bool CullUnusedLoops(); 
  bool CullUnusedTrims(); 
  bool CullUnusedEdges(); 
  bool CullUnusedVertices(); 
  bool CullUnused3dCurves(); 
  bool CullUnused2dCurves(); 
  bool CullUnusedSurfaces(); 

  
  

  
  int PrevTrim(
        int 
        ) const;
  int NextTrim(
        int 
        ) const;

  


















  int PrevEdge(
        int current_edge_index,
        int endi,
        int* prev_endi = 0
        ) const;

  


















  int NextEdge(
        int current_edge_index,
        int endi,
        int* next_endi = 0
        ) const;

  















  const ON_Geometry* BrepComponent( 
    ON_COMPONENT_INDEX ci
    ) const;

  












  ON_BrepVertex* Vertex( int vertex_index ) const;
  ON_BrepVertex* Vertex( ON_COMPONENT_INDEX vertex_index ) const;

  












  ON_BrepEdge* Edge( int edge_index ) const;
  ON_BrepEdge* Edge( ON_COMPONENT_INDEX edge_index ) const;

  












  ON_BrepTrim* Trim( int trim_index ) const;
  ON_BrepTrim* Trim( ON_COMPONENT_INDEX trim_index ) const;

  












  ON_BrepLoop* Loop( int loop_index ) const;
  ON_BrepLoop* Loop( ON_COMPONENT_INDEX loop_index ) const;

  












  ON_BrepFace* Face( int face_index ) const;
  ON_BrepFace* Face( ON_COMPONENT_INDEX face_index ) const;

  







  bool RemoveSlits();

  









  bool RemoveSlits(ON_BrepFace& F);

  











  int MergeFaces(int fid0, int fid1);

  







  bool MergeFaces();

  











  bool RemoveNesting(
          bool bExtractSingleSegments,
          bool bEdges = true, 
          bool bTrimCurves = true
          );

  






















  bool CollapseEdge(
    int edge_index,
    bool bCloseTrimGap = true,
    int vertex_index = -1
    );

  




















  bool ChangeVertex( 
    int old_vi, 
    int new_vi, 
    bool bClearTolerances 
    );

  













  bool CloseTrimGap( 
    ON_BrepTrim& trim0, 
    ON_BrepTrim& trim1 
    );

  





















  int RemoveWireEdges( bool bDeleteVertices = true );

  











  int RemoveWireVertices();

  
  

  void Set_user(ON_U u); 
  void Clear_vertex_user_i(); 
  void Clear_edge_user_i(int);   
  void Clear_edge_user_i();   
  void Clear_trim_user_i();   
  void Clear_loop_user_i();   
  void Clear_face_user_i();   
  void Clear_user_i();        

  
  
  
  
  ON_U m_brep_user; 

  
  
  
  ON_CurveArray   m_C2;  
                         
  ON_CurveArray   m_C3;  
  ON_SurfaceArray m_S;   

  
  
  
  ON_BrepVertexArray  m_V;   
  ON_BrepEdgeArray    m_E;   
  ON_BrepTrimArray    m_T;   
  ON_BrepLoopArray    m_L;   
  ON_BrepFaceArray    m_F;   

protected:	
  friend class ON_BrepFace;
  friend class ON_BrepRegion;
  friend class ON_BrepFaceSide;
  ON_BoundingBox m_bbox;

  
  
  
  
  
  
  
  int m_is_solid;

  
  
  
  friend bool ON_BinaryArchive::ReadV1_TCODE_LEGACY_FAC(ON_Object**,ON_3dmObjectAttributes*);
  friend bool ON_BinaryArchive::ReadV1_TCODE_LEGACY_SHL(ON_Object**,ON_3dmObjectAttributes*);
  void Initialize();

  
  void SetTrimIsoFlag(int,double[6]);
  void SetTrimIsoFlag(int);

  
  bool SetEdgeVertex(const int, const int, const int );
  bool HopAcrossEdge( int&, int& ) const;
  bool SetTrimStartVertex( const int, const int);
  void SetLoopVertices(const int);
  void ClearTrimVertices();
  void ClearEdgeVertices();

  
  bool SwapLoopParameters(
        int 
        );
  bool SwapTrimParameters(
        int 
        );

  
  bool IsValidTrim(int trim_index,ON_TextLog* text_log) const;
  bool IsValidTrimTopology(int trim_index,ON_TextLog* text_log) const;
  bool IsValidTrimGeometry(int trim_index,ON_TextLog* text_log) const;
  bool IsValidTrimTolerancesAndFlags(int trim_index,ON_TextLog* text_log) const;

  bool IsValidLoop(int loop_index,ON_TextLog* text_log) const;
  bool IsValidLoopTopology(int loop_index,ON_TextLog* text_log) const;
  bool IsValidLoopGeometry(int loop_index,ON_TextLog* text_log) const;
  bool IsValidLoopTolerancesAndFlags(int loop_index,ON_TextLog* text_log) const;

  bool IsValidFace(int face_index,ON_TextLog* text_log) const;
  bool IsValidFaceTopology(int face_index,ON_TextLog* text_log) const;
  bool IsValidFaceGeometry(int face_index,ON_TextLog* text_log) const;
  bool IsValidFaceTolerancesAndFlags(int face_index,ON_TextLog* text_log) const;
  
  bool IsValidEdge(int edge_index,ON_TextLog* text_log) const;
  bool IsValidEdgeTopology(int edge_index,ON_TextLog* text_log) const;
  bool IsValidEdgeGeometry(int edge_index,ON_TextLog* text_log) const;
  bool IsValidEdgeTolerancesAndFlags(int edge_index,ON_TextLog* text_log) const;

  bool IsValidVertex(int vertex_index,ON_TextLog* text_log) const;
  bool IsValidVertexTopology(int vertex_index,ON_TextLog* text_log) const;
  bool IsValidVertexGeometry(int vertex_index,ON_TextLog* text_log) const;
  bool IsValidVertexTolerancesAndFlags(int vertex_index,ON_TextLog* text_log) const;

  void SetTolsFromLegacyValues();

  
  bool ReadOld100( ON_BinaryArchive& ); 
  bool ReadOld101( ON_BinaryArchive& ); 
  bool ReadOld200( ON_BinaryArchive&, int ); 
  ON_Curve* Read100_BrepCurve( ON_BinaryArchive& ) const;
  ON_Surface* Read100_BrepSurface( ON_BinaryArchive& ) const;

  
  bool ReadV1_LegacyTrimStuff( ON_BinaryArchive&, ON_BrepFace&, ON_BrepLoop& );
  bool ReadV1_LegacyTrim( ON_BinaryArchive&, ON_BrepFace&, ON_BrepLoop& );
  bool ReadV1_LegacyLoopStuff( ON_BinaryArchive&, ON_BrepFace& );
  bool ReadV1_LegacyLoop( ON_BinaryArchive&, ON_BrepFace& );
  bool ReadV1_LegacyFaceStuff( ON_BinaryArchive& );
  bool ReadV1_LegacyShellStuff( ON_BinaryArchive& );
};




























ON_Brep* ON_BrepFromMesh( 
          const ON_MeshTopology& mesh_topology, 
          ON_BOOL32 bTrimmedTriangles = true,
          ON_Brep* pBrep = 0 
          );

















































ON_Brep* ON_BrepBox( const ON_3dPoint* box_corners, ON_Brep* pBrep = 0 );

















































ON_Brep* ON_BrepWedge( const ON_3dPoint* corners, ON_Brep* pBrep = 0 );














ON_Brep* ON_BrepSphere( const ON_Sphere& sphere, ON_Brep* pBrep = 0 );













ON_Brep* ON_BrepTorus( const ON_Torus& torus, ON_Brep* pBrep = 0 );


















ON_Brep* ON_BrepCylinder( const ON_Cylinder& cylinder, 
                          ON_BOOL32 bCapBottom,
                          ON_BOOL32 bCapTop,
                          ON_Brep* pBrep = 0 );

















ON_Brep* ON_BrepCone( 
          const ON_Cone& cone, 
          ON_BOOL32 bCapBottom,
          ON_Brep* pBrep = 0 
          );



























ON_Brep* ON_BrepRevSurface( 
          ON_RevSurface*& pRevSurface,
          ON_BOOL32 bCapStart,
          ON_BOOL32 bCapEnd,
          ON_Brep* pBrep = 0 
          );


          















ON_Brep* ON_BrepTrimmedPlane( 
            const ON_Plane& plane, 
            const ON_Curve& boundary,
            ON_Brep* pBrep = 0 );





















ON_Brep* ON_BrepTrimmedPlane( 
            const ON_Plane& plane, 
            ON_SimpleArray<ON_Curve*>& boundary,
            ON_BOOL32 bDuplicateCurves = true,
            ON_Brep* pBrep = 0 );

























bool ON_BrepExtrude( 
          ON_Brep& brep,
          const ON_Curve& path_curve,
          bool bCap = true
          );





































int ON_BrepExtrudeFace( 
          ON_Brep& brep,
          int face_index,
          const ON_Curve& path_curve,
          bool bCap = true
          );




























int ON_BrepExtrudeLoop( 
          ON_Brep& brep,
          int loop_index,
          const ON_Curve& path_curve,
          bool bCap = true
          );
























int ON_BrepExtrudeEdge( 
          ON_Brep& brep,
          int edge_index,
          const ON_Curve& path_curve
          );


























int ON_BrepExtrudeVertex( 
          ON_Brep& brep,
          int vertex_index,
          const ON_Curve& path_curve
          );

























int ON_BrepConeFace( 
          ON_Brep& brep,
          int face_index,
          ON_3dPoint apex_point
          );
























bool ON_BrepConeLoop( 
          ON_Brep& brep,
          int loop_index,
          ON_3dPoint apex_point
          );
























int ON_BrepConeEdge( 
          ON_Brep& brep,
          int edge_index,
          ON_3dPoint apex_point
          );



int ON_BrepMergeFaces(ON_Brep& B, int fid0, int fid1);


bool ON_BrepMergeFaces(ON_Brep& B);







bool ON_BrepRemoveSlits(ON_BrepFace& F);



void ON_BrepMergeAllEdges(ON_Brep& B);














ON_Brep* ON_MergeBreps(
          const ON_Brep& brep0,
          const ON_Brep& brep1,
          double tolerance
          );






























bool ON_GetEndCapTransformation(
          ON_3dPoint P, 
          ON_3dVector T, 
          ON_3dVector U, 
          const ON_3dVector* Normal,
          ON_Xform& xform, 
          ON_Xform* scale2d,
          ON_Xform* rot2d
          );

class  ON_Extrusion : public ON_Surface
{
  protected: static void* m_s_ON_Extrusion_ptr; public: static const ON_ClassId m_ON_Extrusion_class_id; static ON_Extrusion * Cast( ON_Object* ); static const ON_Extrusion * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Extrusion( const ON_Object*, ON_Object* ); public: ON_Extrusion * Duplicate() const;;
public:
  ON_Extrusion();
  ON_Extrusion(const ON_Extrusion& src);
  ~ON_Extrusion();

  ON_Extrusion& operator=(const ON_Extrusion&);

  
  
  
  
  void DestroyRuntimeCache( bool bDelete = true );

  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;
  void Dump( ON_TextLog& ) const;
  unsigned int SizeOf() const;
  ON__UINT32 DataCRC( ON__UINT32 current_remainder ) const;
  ON_BOOL32 Write( ON_BinaryArchive& binary_archive) const;
  ON_BOOL32 Read( ON_BinaryArchive& binary_archive );
  ON::object_type ObjectType() const;

  
  
  
  
  int Dimension() const;
  ON_BOOL32 GetBBox(
        double* boxmin,
        double* boxmax,
        int bGrowBox = false
        ) const;
	bool GetTightBoundingBox( 
        ON_BoundingBox& tight_bbox, 
        int bGrowBox = false,
        const ON_Xform* xform = 0
        ) const;
  ON_BOOL32 Transform( 
        const ON_Xform& xform
        );

  














  ON_Brep* BrepForm(
        ON_Brep* brep = 0 
        ) const;

  

















  ON_Brep* BrepForm(
    ON_Brep* brep,
    bool bSmoothFaces 
    ) const;

  












  ON_SumSurface* SumSurfaceForm( 
    ON_SumSurface* sum_surface 
    ) const;

  

















  bool GetBrepFormComponentIndex(
    ON_COMPONENT_INDEX extrusion_ci,
    ON_COMPONENT_INDEX& brep_ci
    ) const;

  bool GetBrepFormComponentIndex(
    ON_COMPONENT_INDEX extrusion_ci,
    double extrusion_profile_parameter,
    const ON_Brep& brep_form,
    ON_COMPONENT_INDEX& brep_ci
    ) const;

  
  
  
  
  ON_BOOL32 SetDomain( 
        int dir,
        double t0, 
        double t1
        );
  ON_Interval Domain(
        int dir
        ) const;
  ON_BOOL32 GetSurfaceSize( 
        double* width, 
        double* height 
        ) const;
  int SpanCount(
        int dir
        ) const;
  ON_BOOL32 GetSpanVector(
        int dir,
        double* span_vector
        ) const;
  ON_BOOL32 GetSpanVectorIndex(
        int dir,
        double t,
        int side,
        int* span_vector_index,
        ON_Interval* span_interval
        ) const;
  int Degree(
        int dir
        ) const; 
  ON_BOOL32 GetParameterTolerance(
         int dir,
         double t,
         double* tminus,
         double* tplus
         ) const;
  ISO IsIsoparametric(
        const ON_Curve& curve,
        const ON_Interval* curve_domain = 0
        ) const;
  ON_BOOL32 IsPlanar(
        ON_Plane* plane = 0,
        double tolerance = 2.3283064365386962890625e-10
        ) const;
  ON_BOOL32 IsClosed(
        int
        ) const;
  ON_BOOL32 IsPeriodic(
        int
        ) const;
  bool GetNextDiscontinuity( 
                  int dir,
                  ON::continuity c,
                  double t0,
                  double t1,
                  double* t,
                  int* hint=0,
                  int* dtype=0,
                  double cos_angle_tolerance=0.99984769515639123915701155881391,
                  double curvature_tolerance=1.490116119385000000e-8
                  ) const;
  bool IsContinuous(
    ON::continuity c,
    double s, 
    double t, 
    int* hint = 0,
    double point_tolerance=2.3283064365386962890625e-10,
    double d1_tolerance=2.3283064365386962890625e-10,
    double d2_tolerance=2.3283064365386962890625e-10,
    double cos_angle_tolerance=0.99984769515639123915701155881391,
    double curvature_tolerance=1.490116119385000000e-8
    ) const;
  ISO IsIsoparametric(
        const ON_BoundingBox& bbox
        ) const;
  ON_BOOL32 Reverse( int dir );
  ON_BOOL32 Transpose();
  ON_BOOL32 Evaluate(
         double u, double v,
         int num_der,
         int array_stride,
         double* der_array,
         int quadrant = 0,
         int* hint = 0
         ) const;
  ON_Curve* IsoCurve(
         int dir,
         double c
         ) const;

  ON_BOOL32 Trim(
         int dir,
         const ON_Interval& domain
         );
  bool Extend(
    int dir,
    const ON_Interval& domain
    );
  ON_BOOL32 Split(
         int dir,
         double c,
         ON_Surface*& west_or_south_side,
         ON_Surface*& east_or_north_side
         ) const;

  bool GetClosestPoint( 
          const ON_3dPoint& P,
          double* s,
          double* t,
          double maximum_distance = 0.0,
          const ON_Interval* sdomain = 0,
          const ON_Interval* tdomain = 0
          ) const;

  ON_BOOL32 GetLocalClosestPoint( const ON_3dPoint&, 
          double,double,     
          double*,double*,   
          const ON_Interval* = 0, 
          const ON_Interval* = 0  
          ) const;

  
  
  
  
  

  int GetNurbForm(
        ON_NurbsSurface& nurbs_surface,
        double tolerance = 0.0
        ) const;
  int HasNurbForm() const;
  bool GetSurfaceParameterFromNurbFormParameter(
        double nurbs_s, double nurbs_t,
        double* surface_s, double* surface_t
        ) const;
  bool GetNurbFormParameterFromSurfaceParameter(
        double surface_s, double surface_t,
        double* nurbs_s,  double* nurbs_t
        ) const;


  
  
  
  

  


















  bool SetMesh( ON::mesh_type mt, ON_Mesh* mesh );

  















  const ON_Mesh* Mesh( ON::mesh_type mt ) const;

  















  ON_Mesh* RemoveMesh( ON::mesh_type mt );

  









  void DestroyMesh( ON::mesh_type mt, bool bDeleteMesh = true );

  
  
  
  
  void Destroy();

  














  bool SetPath(ON_3dPoint A, ON_3dPoint B);

  



















  bool SetPathAndUp(ON_3dPoint A, ON_3dPoint B, ON_3dVector up );

  











  int PathParameter() const;

  ON_3dPoint PathStart() const;
  ON_3dPoint PathEnd() const;
  ON_3dVector PathTangent() const;

  












  bool SetMiterPlaneNormal(ON_3dVector N, int end);

  void GetMiterPlaneNormal(int end, ON_3dVector& N) const;

  






  int IsMitered() const;

  



  bool IsSolid() const;

  






  int IsCapped() const;

  








  int CapCount() const;

  






















  __declspec(deprecated) int FaceCount() const;

  







  bool GetProfileTransformation( double s, ON_Xform& xform ) const;

  

















  bool GetProfilePlane( double s, ON_Plane& plane ) const;


  

















  bool GetPathPlane( double s, ON_Plane& plane ) const;

  





















  bool SetOuterProfile( ON_Curve* outer_profile, bool bCap );

  
















  bool AddInnerProfile( ON_Curve* inner_profile );

  






  int ProfileCount() const;

  











  int ProfileSmoothSegmentCount( int profile_index ) const;

  











  int ProfileParameter() const;

  










  const ON_Curve* Profile(int profile_index) const;

  














  ON_Curve* Profile3d(int profile_index, double s ) const;

  









  ON_Curve* Profile3d( ON_COMPONENT_INDEX ci ) const;

  









  ON_Curve* WallEdge( ON_COMPONENT_INDEX ci ) const;

  









  ON_Surface* WallSurface( ON_COMPONENT_INDEX ci ) const;

  








  ON_LineCurve* PathLineCurve(ON_LineCurve* line_curve) const;

  











  int ProfileIndex( double profile_parameter ) const;


  






  const ON_PolyCurve* PolyProfile() const;

  





  int GetProfileCurves( ON_SimpleArray<const ON_Curve*>& profile_curves ) const;


  












  int GetProfileKinkParameters( int profile_index, ON_SimpleArray<double>& profile_kink_parameters ) const;

  





  bool ProfileIsKinked( int profile_index ) const;

  







  static bool IsValidPolyCurveProfile( const ON_PolyCurve& polycurve, ON_TextLog* text_log = 0 );

  







  static bool CleanupPolyCurveProfile( ON_PolyCurve& polycurve );

  
  
  
  
  
  
  
  ON_Line m_path;
  ON_Interval m_t;
  ON_3dVector m_up;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int m_profile_count;
  ON_Curve* m_profile;

  
  
  
  bool m_bCap[2];

  
  
  
  
  
  
  
  
  bool m_bHaveN[2];
  ON_3dVector m_N[2];

  
  ON_Interval m_path_domain;
  bool m_bTransposed; 

  
  
  static const double m_Nz_min; 

  
  
  static const double m_path_length_min; 

  
































  static ON_Extrusion* Cylinder( 
    const ON_Cylinder& cylinder, 
    bool bCapBottom,
    bool bCapTop,
    ON_Extrusion* extrusion = 0 
    );

  






































  static ON_Extrusion* Pipe( 
    const ON_Cylinder& cylinder, 
    double other_radius,
    bool bCapBottom,
    bool bCapTop,
    ON_Extrusion* extrusion = 0 
    );

  



























  static ON_Extrusion* CreateFrom3dCurve( 
    const ON_Curve& curve,
    const ON_Plane* plane,
    double height,
    bool bCap,
    ON_Extrusion* extrusion = 0 
    );

};


































class  ON_Bitmap : public ON_Object
{
  
  protected: static void* m_s_ON_Bitmap_ptr; public: static const ON_ClassId m_ON_Bitmap_class_id; static ON_Bitmap * Cast( ON_Object* ); static const ON_Bitmap * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Bitmap( const ON_Object*, ON_Object* ); public: ON_Bitmap * Duplicate() const;;
public:
  ON_Bitmap();
  ~ON_Bitmap();

  
  
  

  
  ON_UUID ModelObjectId() const;


  void Dump( ON_TextLog& ) const; 

  void EmergencyDestroy();
  void Destroy();

  void Defaults();

  virtual
  int Width() const = 0;
  virtual
  int Height() const = 0; 
                          
  virtual
  int BitsPerPixel() const = 0; 
  virtual
  int SizeofScan() const = 0;  
  virtual
  int SizeofImage() const = 0; 

  virtual
  unsigned char* Bits(
    int 
    ) = 0;
  virtual
  const unsigned char* Bits(
    int 
    ) const = 0;

  ON_UUID    m_bitmap_id;
  int        m_bitmap_index;
  ON_wString m_bitmap_name;     
  ON_wString m_bitmap_filename; 
};







class  ON_EmbeddedFile : public ON_Object
{
  protected: static void* m_s_ON_EmbeddedFile_ptr; public: static const ON_ClassId m_ON_EmbeddedFile_class_id; static ON_EmbeddedFile * Cast( ON_Object* ); static const ON_EmbeddedFile * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_EmbeddedFile( const ON_Object*, ON_Object* ); public: ON_EmbeddedFile * Duplicate() const;;
public:
  ON_EmbeddedFile();
  ON_EmbeddedFile(const ON_EmbeddedFile& src);
  ON_EmbeddedFile& operator=(const ON_EmbeddedFile& src);

  virtual ~ON_EmbeddedFile();
  void EmergencyDestroy();
  void Destroy();
  void DestroyBuffer();

  














  bool Create( 
    const wchar_t* filename, 
    bool bCompress
    );

  










  bool Create( 
    FILE* fp,
    bool bCompress 
    );
  
  










  bool Create( 
    const void* source_buffer,
    ON__UINT64 sizeof_source_buffer,
    bool bCompress 
    );

  bool Extract( 
    const wchar_t* destination_filename
    ) const;

  bool Extract( 
    FILE* fp
    ) const;

  










  bool Extract( 
    void* buffer
    ) const;
        
  



  const wchar_t* FullFileName() const;
    
  





  const wchar_t* RelativeFileName() const;

  ON_UUID Id() const;

  void SetId( ON_UUID id );

  void SetFullFileName( const wchar_t* full_file_name );


  void SetRelativeFileName( const wchar_t* relative_file_name );

  ON__UINT64 FileSize() const;
  ON__UINT64 FileLastModifiedTime() const;
  ON__UINT32 FileCRC() const;
  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  ON_BOOL32 Write( ON_BinaryArchive& ) const;
  ON_BOOL32 Read( ON_BinaryArchive& );

  
  
  
  
  ON_UUID    m_id;
  ON_wString m_full_file_name; 
  ON_wString m_relative_file_name; 

private:
  void* m_reserved;

public:
  ON__UINT64 m_file_size;
  ON__UINT64 m_file_time;  
  ON__UINT32 m_file_crc;   

public:
  ON__UINT32 m_buffer_crc; 
  ON_Buffer m_buffer;
  unsigned char m_bCompressedBuffer; 

private:
  unsigned char m_reserved3[7];
};
















































































































class  ON_WindowsBitmap : public ON_Bitmap
{
  protected: static void* m_s_ON_WindowsBitmap_ptr; public: static const ON_ClassId m_ON_WindowsBitmap_class_id; static ON_WindowsBitmap * Cast( ON_Object* ); static const ON_WindowsBitmap * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_WindowsBitmap( const ON_Object*, ON_Object* ); public: ON_WindowsBitmap * Duplicate() const;;
  
  
public:

  ON_WindowsBitmap();
  ON_WindowsBitmap( const ON_WindowsBitmap& );
  ~ON_WindowsBitmap();

  ON_WindowsBitmap& operator=( const ON_WindowsBitmap& );

  void EmergencyDestroy();
  void Destroy();

  bool Create( 
         int, 
         int, 
         int  
         );

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  ON_BOOL32 Write( ON_BinaryArchive& ) const; 
  ON_BOOL32 Read( ON_BinaryArchive& );        
  bool WriteCompressed( ON_BinaryArchive& ) const;
  bool ReadCompressed( ON_BinaryArchive& );
  bool WriteUncompressed( ON_BinaryArchive& ) const;
  bool ReadUncompressed( ON_BinaryArchive& );

  int Width() const;
  int Height() const; 
                      

  int PaletteColorCount() const; 
  int SizeofPalette() const;     
  int BitsPerPixel() const;
  
  int SizeofScan() const;        
  int SizeofImage() const;       

  unsigned char* Bits(
    int 
    );
  const unsigned char* Bits(
    int 
    ) const;

  

  ON_Color Pixel( 
    int, 
    int  
    ) const;
  ON_Color Pixel( 
    int,  
    const unsigned char* 
    ) const;

  
  
  



  















  ON_WindowsBitmap( const BITMAPINFO& src );

  










  ON_WindowsBitmap( const BITMAPINFO* src );

  








  ON_WindowsBitmap& operator=( const BITMAPINFO& src );

  
























































  bool Create( const BITMAPINFO* bmi, 
               const unsigned char* bits,
               bool bCopy
             );



  





  bool IsContiguous() const;


  BITMAPINFO*                  m_bmi;




  unsigned char*               m_bits;

private:
  int m_bFreeBMI; 
                  
                  
                  
};






class  ON_WindowsBitmapEx : public ON_WindowsBitmap
{
  protected: static void* m_s_ON_WindowsBitmapEx_ptr; public: static const ON_ClassId m_ON_WindowsBitmapEx_class_id; static ON_WindowsBitmapEx * Cast( ON_Object* ); static const ON_WindowsBitmapEx * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_WindowsBitmapEx( const ON_Object*, ON_Object* ); public: ON_WindowsBitmapEx * Duplicate() const;;
public:
  ON_WindowsBitmapEx();
  ~ON_WindowsBitmapEx();
  ON_BOOL32 Write( ON_BinaryArchive& ) const; 
  ON_BOOL32 Read( ON_BinaryArchive& );        
};

class  ON_EmbeddedBitmap : public ON_Bitmap
{
  protected: static void* m_s_ON_EmbeddedBitmap_ptr; public: static const ON_ClassId m_ON_EmbeddedBitmap_class_id; static ON_EmbeddedBitmap * Cast( ON_Object* ); static const ON_EmbeddedBitmap * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_EmbeddedBitmap( const ON_Object*, ON_Object* ); public: ON_EmbeddedBitmap * Duplicate() const;;
public:
  ON_EmbeddedBitmap();
  ~ON_EmbeddedBitmap();
  void EmergencyDestroy();
  void Destroy();
  void Create( int sizeof_buffer );

  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  ON_BOOL32 Write( ON_BinaryArchive& ) const;
  ON_BOOL32 Read( ON_BinaryArchive& );

  int Width() const;
  int Height() const;
  int BitsPerPixel() const;
  int SizeofScan() const;
  int SizeofImage() const;
  unsigned char* Bits(int);
  const unsigned char* Bits(int) const;

  void* m_buffer;
  size_t m_sizeof_buffer;
  int m_free_buffer; 
  ON__UINT32 m_biffer_crc32; 
};































class  ON_InstanceDefinition : public ON_Geometry
{
  protected: static void* m_s_ON_InstanceDefinition_ptr; public: static const ON_ClassId m_ON_InstanceDefinition_class_id; static ON_InstanceDefinition * Cast( ON_Object* ); static const ON_InstanceDefinition * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_InstanceDefinition( const ON_Object*, ON_Object* ); public: ON_InstanceDefinition * Duplicate() const;;

public:

  
  
  
  enum IDEF_UPDATE_TYPE
  {
    static_def = 0,
    embedded_def = 1,
      
      
      
      
      
      
      
      
      
    linked_and_embedded_def = 2,
      
      
      
      
      
      
      
      
    linked_def = 3,   
      
      
      
      
      
      
      
      
      
      
    force_32bit_idef_update_type = 0xFFFFFFFF
  };

  
  static IDEF_UPDATE_TYPE IdefUpdateType(int i);

  
  
  
  
  enum
  {
    no_idef_settings            =    0,
    idef_name_setting           =    1,  
    idef_description_setting    =    2,  
    idef_url_setting            =    4,  
    idef_units_setting          =    8,  
    idef_source_archive_setting = 0x10,  
    idef_userdata_setting       = 0x20, 
    all_idef_settings           = 0xFFFFFFFF
  };

public:
  ON_InstanceDefinition();
  ~ON_InstanceDefinition();

  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  void Dump( ON_TextLog& ) const;

  ON_BOOL32 Write(
         ON_BinaryArchive& binary_archive
       ) const;
  ON_BOOL32 Read(
         ON_BinaryArchive& binary_archive
       );
  ON::object_type ObjectType() const;
  unsigned int SizeOf() const;

  
  int Dimension() const;
  ON_BOOL32 GetBBox(
         double* boxmin,
         double* boxmax,
         int bGrowBox = false
         ) const;
  ON_BOOL32 Transform( 
         const ON_Xform& xform
         );

  
  ON_UUID ModelObjectId() const;

  
  const wchar_t* Name() const;

  







  void SetName( const wchar_t* name );

  const wchar_t* Description() const;
  void SetDescription( const wchar_t* description );

  const wchar_t* URL() const;
  void SetURL( const wchar_t* url );

  const wchar_t* URL_Tag() const;
  void SetURL_Tag( const wchar_t* url_tag );

  ON_UUID Uuid() const;
  void SetUuid( ON_UUID uuid );

  void SetBoundingBox( ON_BoundingBox bbox );

  
  ON_SimpleArray<ON_UUID> m_object_uuid;

  





















  void SetSourceArchive( 
        const wchar_t* source_archive, 
        ON_CheckSum checksum,
        IDEF_UPDATE_TYPE update_type
        );

  











  void DestroySourceArchive();

  



  const wchar_t* SourceArchive() const;

  



  ON_CheckSum SourceArchiveCheckSum() const;

  const ON_UnitSystem& UnitSystem() const;

  










  void SetAlternateSourceArchivePath( 
        const wchar_t* alternate_source_archive_path,
        bool bRelativePath
        );

  










  bool GetAlternateSourceArchivePath( 
        ON_wString& alternate_source_archive_path,
        bool& bRelativePath
        ) const;
  



  void SetUnitSystem( ON::unit_system us );
  void SetUnitSystem( const ON_UnitSystem& us );

  




  bool HasLinkedIdefLayerSettings() const;

  







  void UpdateLinkedIdefReferenceFileLayerSettings( unsigned int layer_count, ON_Layer** layer_settings );

  







  void UpdateLinkedIdefParentLayerSettings( const ON_Layer* linked_idef_parent_layer );

  const ON_Layer* LinkedIdefParentLayerSettings() const;

  












  void UpdateLinkedIdefReferenceFileLayerRuntimeId( const ON_UuidPairList& id_map );

  













  void UpdateLinkedIdefLayerSettings( unsigned int layer_count, const ON_Layer*const* layer_settings );

public:

  ON_UUID m_uuid;     
  ON_wString m_name;  
                      
                      
                      
  ON_wString m_description; 

  ON_wString m_url;
  ON_wString m_url_tag;     











public:
  ON_BoundingBox m_bbox;

  ON_UnitSystem  m_us;
  
  
  
  
  
  
  
  IDEF_UPDATE_TYPE m_idef_update_type; 

  IDEF_UPDATE_TYPE IdefUpdateType() const;

  int m_idef_update_depth; 
                           
                           
                           

  ON_wString m_source_archive;   
                                 
  bool m_source_bRelativePath;  
                                 
                                 

  
  
  
  
  
  unsigned char m_idef_layer_style;
                               
private:
  unsigned char m_reserved2[2];


private:
  
  
  
  
  
  unsigned int m_reserved1;


public:
  ON_CheckSum m_source_archive_checksum; 
                                         
};









class  ON_InstanceRef : public ON_Geometry
{
  protected: static void* m_s_ON_InstanceRef_ptr; public: static const ON_ClassId m_ON_InstanceRef_class_id; static ON_InstanceRef * Cast( ON_Object* ); static const ON_InstanceRef * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_InstanceRef( const ON_Object*, ON_Object* ); public: ON_InstanceRef * Duplicate() const;;

public:
  ON_InstanceRef();

  
  
  
  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;
  ON_BOOL32 Write(
         ON_BinaryArchive& binary_archive
       ) const;
  ON_BOOL32 Read(
         ON_BinaryArchive& binary_archive
       );
  ON::object_type ObjectType() const;

  
  
  
  
  int Dimension() const;
  ON_BOOL32 GetBBox(
         double* boxmin,
         double* boxmax,
         int bGrowBox = false
         ) const;
  ON_BOOL32 Transform( 
         const ON_Xform& xform
         );

  
  bool IsDeformable() const;

  
  bool MakeDeformable();

  
  

  
  
  
  ON_UUID m_instance_definition_uuid;

  
  ON_Xform m_xform;

  
  ON_BoundingBox m_bbox;

  
  
  static const double m_singular_xform_tol;
};

























class  ON_3dmRevisionHistory
{
public:
  ON_3dmRevisionHistory();
  ~ON_3dmRevisionHistory();
  

  void Default();
  ON_BOOL32 IsValid() const;
  int NewRevision(); 

  ON_BOOL32 Read( ON_BinaryArchive& );
  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  void Dump( ON_TextLog& ) const;

  




  bool CreateTimeIsSet() const;

  




  bool LastEditedTimeIsSet() const;

  ON_wString m_sCreatedBy;
  ON_wString m_sLastEditedBy;
  struct tm  m_create_time;     
  struct tm  m_last_edit_time;  
  int        m_revision_count;
};



class  ON_3dmNotes
{
public:
  ON_3dmNotes();
  ON_3dmNotes( const ON_3dmNotes& );
  ~ON_3dmNotes();
  ON_3dmNotes& operator=(const ON_3dmNotes&);

  void Default();
  ON_BOOL32 IsValid() const;

  ON_BOOL32 Read( ON_BinaryArchive& );
  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  void Dump(ON_TextLog&) const;

  
  
  
  
  
  ON_wString m_notes; 
  ON_BOOL32 m_bVisible;    
  ON_BOOL32 m_bHTML;       

  
  int m_window_left;
  int m_window_top;
  int m_window_right;
  int m_window_bottom;
};



class  ON_3dmApplication
{
  
public:
  ON_3dmApplication();
  ON_3dmApplication( const ON_3dmApplication& );
  ~ON_3dmApplication();
  ON_3dmApplication& operator=(const ON_3dmApplication&);

  void Default();
  ON_BOOL32 IsValid() const;

  ON_BOOL32 Read( ON_BinaryArchive& );
  ON_BOOL32 Write( ON_BinaryArchive& ) const;

  void Dump( ON_TextLog& ) const;

  ON_wString m_application_name;    
  ON_wString m_application_URL;     
  ON_wString m_application_details; 
};



class  ON_3dmProperties
{
public:
  ON_3dmProperties();
  ~ON_3dmProperties();
  ON_3dmProperties(const ON_3dmProperties&);
  ON_3dmProperties& operator=(const ON_3dmProperties&);

  void Default();

  ON_BOOL32 Read(ON_BinaryArchive&);
  ON_BOOL32 Write(ON_BinaryArchive&) const;

  void Dump( ON_TextLog& ) const;

  ON_3dmRevisionHistory  m_RevisionHistory;
  ON_3dmNotes            m_Notes;
  ON_WindowsBitmap       m_PreviewImage;     
  ON_3dmApplication      m_Application;      
};































class  ON_3dmUnitsAndTolerances
{
public:
  
  
  ON_3dmUnitsAndTolerances();
  ~ON_3dmUnitsAndTolerances();

  ON_3dmUnitsAndTolerances(const ON_3dmUnitsAndTolerances&);
  ON_3dmUnitsAndTolerances& operator=(const ON_3dmUnitsAndTolerances&);

  
  __declspec(deprecated) void Default();

  bool Read( ON_BinaryArchive& );
  bool Write( ON_BinaryArchive& ) const;

  void Dump( ON_TextLog& ) const;

  




  bool TolerancesAreValid() const;

  
















  unsigned int SetInvalidTolerancesToDefaultValues();

  
  
  
  
  
  
  
  double Scale( ON::unit_system ) const;

  ON_UnitSystem m_unit_system;

  double m_absolute_tolerance;  
  double m_angle_tolerance;     
  double m_relative_tolerance;  

  ON::distance_display_mode m_distance_display_mode; 
  int m_distance_display_precision; 
                                    
                                    

public:
  








  static const ON_3dmUnitsAndTolerances DefaultValue;
};









class  ON_3dmAnnotationSettings
{
public:
  ON_3dmAnnotationSettings();
  ~ON_3dmAnnotationSettings();
  ON_3dmAnnotationSettings(const ON_3dmAnnotationSettings&);
  ON_3dmAnnotationSettings& operator=(const ON_3dmAnnotationSettings&);

  void Default();

  bool Read( ON_BinaryArchive& );
  bool Write( ON_BinaryArchive& ) const;

  void Dump( ON_TextLog& text_log ) const;

  
  
  double m_dimscale;       
  double m_textheight;
  double m_dimexe;
  double m_dimexo;
  double m_arrowlength;
  double m_arrowwidth;
  double m_centermark;

  



  double WorldViewTextScale() const;

  




  void SetWorldViewTextScale(double world_view_text_scale );

  



  double WorldViewHatchScale() const;

  




  void SetWorldViewHatchScale(double world_view_hatch_scale );


  



  bool IsAnnotationScalingEnabled() const;

  




  void EnableAnnotationScaling( bool bEnable );

  



  bool IsHatchScalingEnabled() const;

  




  void EnableHatchScaling( bool bEnable );

  
  
  
  
  
private:
  
  
  
  
  
  
  
  float m_world_view_text_scale;
  float m_world_view_hatch_scale;
  
private:
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  unsigned char m_bEnableAnnotationScaling;

  unsigned char m_bEnableHatchScaling;

private:
  unsigned char m_reserved[6];

public:

  ON::unit_system m_dimunits;  
  int m_arrowtype;     
  int m_angularunits;  
  int m_lengthformat;  
  int m_angleformat;   
  int m_textalign;     
  int m_resolution;    
                       

  ON_wString m_facename; 
};






class  ON_3dmConstructionPlaneGridDefaults
{
public:
  ON_3dmConstructionPlaneGridDefaults();
  ~ON_3dmConstructionPlaneGridDefaults();
  ON_3dmConstructionPlaneGridDefaults(const ON_3dmConstructionPlaneGridDefaults&);
  ON_3dmConstructionPlaneGridDefaults& operator=(const ON_3dmConstructionPlaneGridDefaults&);

  void Default();

  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );

  void Dump( ON_TextLog& text_log ) const;

	double m_grid_spacing;   
  double m_snap_spacing;   
                           
                           
	int m_grid_line_count;   
  int m_grid_thick_frequency; 
                            
                            
                            

  ON_BOOL32 m_bShowGrid;
  ON_BOOL32 m_bShowGridAxes;
  ON_BOOL32 m_bShowWorldAxes;
};





class  ON_3dmConstructionPlane
{
public:
  ON_3dmConstructionPlane();
  ~ON_3dmConstructionPlane();

  
  
  

  void Default();

  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );

  void Dump( ON_TextLog& text_log ) const;

  ON_Plane    m_plane;

  
	double m_grid_spacing;   
  double m_snap_spacing;   
                           
                           
	int m_grid_line_count;   
  int m_grid_thick_frequency; 
                            
                            
                            
  bool m_bDepthBuffer; 
                       
                       

  ON_wString  m_name;
};















class  ON_3dmViewPosition
{
public:
  
  ON_3dmViewPosition();
  ~ON_3dmViewPosition();
  ON_3dmViewPosition(const ON_3dmViewPosition&);
  ON_3dmViewPosition& operator=(const ON_3dmViewPosition&);

  void Default();

  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );

  
  
  
  double m_wnd_left;    
  double m_wnd_right;
  double m_wnd_top;
  double m_wnd_bottom;
  ON_BOOL32 m_bMaximized;    

  
  
  
  
  unsigned char m_floating_viewport;
private:
  
  unsigned char m_reserved_1;
  unsigned char m_reserved_2;
  unsigned char m_reserved_3;
};





class  ON_3dmViewTraceImage
{
public:
  ON_3dmViewTraceImage();
  ~ON_3dmViewTraceImage();
  bool operator==( const ON_3dmViewTraceImage& ) const;
  bool operator!=( const ON_3dmViewTraceImage& ) const;

  void Default();

  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );

  
  ON_Plane m_plane;
  double   m_width;
  double   m_height;

  ON_wString m_bitmap_filename;
  bool m_bGrayScale; 
  bool m_bHidden;    
  bool m_bFiltered;  
};






class  ON_3dmWallpaperImage
{
public:
  ON_3dmWallpaperImage();
  ~ON_3dmWallpaperImage();
  bool operator==( const ON_3dmWallpaperImage& ) const;
  bool operator!=( const ON_3dmWallpaperImage& ) const;

  void Default();

  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );

  ON_wString m_bitmap_filename;
  bool m_bGrayScale; 
  bool m_bHidden;    
};






class  ON_3dmPageSettings
{
public:
  ON_3dmPageSettings();
  ~ON_3dmPageSettings();

  bool IsValid( ON_TextLog* text_log = 0 ) const;

  void Default();

  int m_page_number;

  
  double m_width_mm;
  double m_height_mm;

  
  double m_left_margin_mm;
  double m_right_margin_mm;
  double m_top_margin_mm;
  double m_bottom_margin_mm;

  ON_wString m_printer_name;

  bool Write(ON_BinaryArchive& archive) const;
  bool Read(ON_BinaryArchive& archive);
};


class  ON_3dmView
{
public:
  ON_3dmView();
  ~ON_3dmView();

  
  
  
  

  void Default();

  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );

  void Dump( ON_TextLog& text_log ) const;

  bool IsValid( ON_TextLog* text_log = 0 ) const;

  
  ON_Viewport m_vp;

  
  
  
  ON_SimpleArray<ON_ClippingPlaneInfo> m_clipping_planes;

  
  
  
  bool m_bLockedProjection;

  
  
  
  

  











  ON_3dPoint TargetPoint() const;

  











  bool SetTargetPoint(ON_3dPoint target_point);

  
  
  
  
  
  
   ON_3dPoint m_target; 
  
  
  
  

  
  

  ON_wString  m_name;   
  
  
  
  
  
  ON_UUID m_display_mode_id;
  ON::display_mode m_display_mode;

  
  
  ON_3dmViewPosition m_position;

  ON::view_type m_view_type; 

  
  
  
  ON_3dmPageSettings m_page_settings;

  
  ON_3dmConstructionPlane m_cplane;
  bool m_bShowConstructionGrid;
  bool m_bShowConstructionAxes;

  
  bool m_bShowWorldAxes;

  
  ON_3dmViewTraceImage m_trace_image;

  
  ON_3dmWallpaperImage m_wallpaper_image;
};
















class  ON_3dmRenderSettings
{
public:
  ON_3dmRenderSettings();
  ~ON_3dmRenderSettings();
  ON_3dmRenderSettings(const ON_3dmRenderSettings&);
  ON_3dmRenderSettings& operator=(const ON_3dmRenderSettings&);

  void Default();

  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );

  void Dump( ON_TextLog& text_log ) const;

  bool ScaleBackgroundToFit() const;
  void SetScaleBackgroundToFit( bool bScaleBackgroundToFit );

  
  
  
  ON_BOOL32 m_bCustomImageSize;
  int  m_image_width;   
  int  m_image_height;  

private:
  bool m_bScaleBackgroundToFit;
  unsigned char m_reserved1[3];
public:

  
  
  
  double m_image_dpi; 
  
  
  
  ON::unit_system m_image_us;

  ON_Color m_ambient_light;
  
  int m_background_style; 
  ON_Color m_background_color; 
  ON_wString m_background_bitmap_filename;

  ON_BOOL32 m_bUseHiddenLights;

  ON_BOOL32 m_bDepthCue;
  ON_BOOL32 m_bFlatShade;

  ON_BOOL32 m_bRenderBackfaces;
  ON_BOOL32 m_bRenderPoints;
  ON_BOOL32 m_bRenderCurves;
  ON_BOOL32 m_bRenderIsoparams;
  ON_BOOL32 m_bRenderMeshEdges;
  ON_BOOL32 m_bRenderAnnotation;

  int m_antialias_style; 

  int m_shadowmap_style;    
  int m_shadowmap_width;
  int m_shadowmap_height;
  double m_shadowmap_offset;
  
  ON_Color  m_background_bottom_color;
  
  
  
  
  
  
  
  bool    m_bUsesAmbientAttr;
  bool    m_bUsesBackgroundAttr;
  bool    m_bUsesBackfaceAttr;
  bool    m_bUsesPointsAttr;
  bool    m_bUsesCurvesAttr;
  bool    m_bUsesIsoparmsAttr;
  bool    m_bUsesMeshEdgesAttr;
  bool    m_bUsesAnnotationAttr;
  bool    m_bUsesHiddenLightsAttr;

private:
  unsigned char m_reserved2[3];
};







class  ON_EarthAnchorPoint
{
public:
  ON_EarthAnchorPoint();
  ~ON_EarthAnchorPoint();

  static
  int Compare(
          const ON_EarthAnchorPoint*, 
          const ON_EarthAnchorPoint*
          );

  static
  int CompareEarthLocation(
          const ON_EarthAnchorPoint*, 
          const ON_EarthAnchorPoint*
          );

  static
  int CompareModelDirection(
          const ON_EarthAnchorPoint*, 
          const ON_EarthAnchorPoint*
          );

  static
  int CompareIdentification(
          const ON_EarthAnchorPoint*, 
          const ON_EarthAnchorPoint*
          );

  void Default();
  bool Read( ON_BinaryArchive& );
  bool Write( ON_BinaryArchive& ) const;

  
  
  
  
  double m_earth_basepoint_latitude;  
  double m_earth_basepoint_longitude; 
  double m_earth_basepoint_elevation; 
  int m_earth_basepoint_elevation_zero; 
                                        
                                        

  
  ON_3dPoint  m_model_basepoint; 

  
  ON_3dVector m_model_north; 
  ON_3dVector m_model_east;  

  
  ON_UUID    m_id;           
  ON_wString m_name;
  ON_wString m_description; 
  ON_wString m_url;
  ON_wString m_url_tag;      

  






  bool GetModelCompass( 
          ON_Plane& model_compass 
          ) const;

  
































  bool GetModelToEarthXform(
          const ON_UnitSystem& model_unit_system,
          ON_Xform& model_to_earth
          ) const;
};



class  ON_3dmIOSettings
{
public:
  ON_3dmIOSettings();

  void Default();

  bool Read(ON_BinaryArchive&);
  bool Write(ON_BinaryArchive&) const;

  
  bool m_bSaveTextureBitmapsInFile;

  
  
  
  
  int m_idef_link_update;  
      
      
      
      
};






class  ON_3dmSettings
{
public:
  ON_3dmSettings();
  ~ON_3dmSettings();

  
  
  
  

  void Default();

  bool Read(ON_BinaryArchive&);
  bool Write(ON_BinaryArchive&) const;

  void Dump( ON_TextLog& ) const;

  
  ON_wString m_model_URL;

  
  
  
  ON_3dPoint m_model_basepoint;


  
  
  
  ON_EarthAnchorPoint m_earth_anchor_point;

  
  ON_3dmUnitsAndTolerances m_ModelUnitsAndTolerances;

  
  ON_3dmUnitsAndTolerances m_PageUnitsAndTolerances;

  
  ON_MeshParameters m_RenderMeshSettings;

  
  ON_MeshParameters m_CustomRenderMeshSettings;

  
  ON_MeshParameters m_AnalysisMeshSettings;

  
  ON_3dmAnnotationSettings m_AnnotationSettings;

  ON_ClassArray<ON_3dmConstructionPlane> m_named_cplanes;
  ON_ClassArray<ON_3dmView>              m_named_views;
  ON_ClassArray<ON_3dmView>              m_views; 
  ON_UUID m_active_view_id; 

  
  
  int m_current_layer_index;

  int m_current_material_index;
  ON::object_material_source m_current_material_source;
  
  ON_Color m_current_color;
  ON::object_color_source m_current_color_source;

  ON_Color m_current_plot_color;
  ON::plot_color_source m_current_plot_color_source;

  int m_current_linetype_index;
  ON::object_linetype_source m_current_linetype_source;

  int m_current_font_index;

  int m_current_dimstyle_index;
 
  
  
  
  
  
  
  int m_current_wire_density;

  ON_3dmRenderSettings m_RenderSettings;

  
  ON_3dmConstructionPlaneGridDefaults m_GridDefaults;

  
  
  
  double m_linetype_display_scale;

  
  ON_ClassArray<ON_PlugInRef> m_plugin_list;

  ON_3dmIOSettings m_IO_settings;
private:
  bool Read_v1(ON_BinaryArchive&);
  bool Read_v2(ON_BinaryArchive&);
  bool Write_v1(ON_BinaryArchive&) const;
  bool Write_v2(ON_BinaryArchive&) const;
};













































class  ON_3dmObjectAttributes : public ON_Object
{
  protected: static void* m_s_ON_3dmObjectAttributes_ptr; public: static const ON_ClassId m_ON_3dmObjectAttributes_class_id; static ON_3dmObjectAttributes * Cast( ON_Object* ); static const ON_3dmObjectAttributes * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_3dmObjectAttributes( const ON_Object*, ON_Object* ); public: ON_3dmObjectAttributes * Duplicate() const;;

public:
  
  

  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;
  
  void Dump( ON_TextLog& ) const;
  
  unsigned int SizeOf() const;
  
  ON_BOOL32 Write(ON_BinaryArchive&) const;
  
  ON_BOOL32 Read(ON_BinaryArchive&);

  




  bool Transform( const ON_Xform& xform );

  
public:
  ON_3dmObjectAttributes();
  ~ON_3dmObjectAttributes();

  
  
  
  

  bool operator==(const ON_3dmObjectAttributes&) const;
  bool operator!=(const ON_3dmObjectAttributes&) const;

  
  void Default();

  

  
  
  
  
  
  ON::object_mode Mode() const;
  void SetMode( ON::object_mode ); 

  






  bool IsInstanceDefinitionObject() const;

  





  bool IsVisible() const;

  








  void SetVisible( bool bVisible );

  
  
  
  
  ON::object_linetype_source LinetypeSource() const;
  void SetLinetypeSource( ON::object_linetype_source ); 

  
  
  
  
  
  
  
  ON::object_color_source ColorSource() const;
  void SetColorSource( ON::object_color_source ); 

  
  
  
  
  
  ON::plot_color_source PlotColorSource() const;
  void SetPlotColorSource( ON::plot_color_source ); 

  ON::plot_weight_source PlotWeightSource() const;
  void SetPlotWeightSource( ON::plot_weight_source );


  
  
  
  
  
  
  ON::display_mode DisplayMode() const;
  void SetDisplayMode( ON::display_mode  ); 

  






























  __declspec(deprecated) unsigned int ApplyParentalControl( 
         const ON_3dmObjectAttributes& parent_attributes,
         unsigned int control_limits = 0xFFFFFFFF
         );

  unsigned int ApplyParentalControl( 
         const ON_3dmObjectAttributes& parent_attributes,
         const ON_Layer& parent_layer,
         unsigned int control_limits = 0xFFFFFFFF
         );

  
  
  
  
  
  
  
  ON_UUID m_uuid;

  
  
  ON_wString m_name;

  
  
  
  
  ON_wString m_url;

  
  
  
  
  int m_layer_index;

  
  
  
  
  
  int m_linetype_index;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int m_material_index;
  ON_ObjectRenderingAttributes m_rendering_attributes;

  
  
  
  

  






  bool SetCustomRenderMeshParameters(const class ON_MeshParameters& mp);

  












  bool EnableCustomRenderMeshParameters(bool bEnable);

  












  const ON_MeshParameters* CustomRenderMeshParameters() const;

  



  void DeleteCustomRenderMeshParameters();

  
  
  
  


  








  ON::object_material_source MaterialSource() const;

  







  void SetMaterialSource( ON::object_material_source ms );

  
  
  ON_Color      m_color;

  
  
  ON_Color      m_plot_color;

  
  
  
  
  
  int m_display_order;

  
  
  
  double m_plot_weight_mm;

  
  ON::object_decoration  m_object_decoration;

  
  
  
  
  
  
  
  
  
  
  int m_wire_density;


  
  
  
  
  
  
  ON_UUID m_viewport_id;

  
  
  
  
  ON::active_space m_space;

private:
  bool m_bVisible;
  unsigned char m_mode;               
                                      
  unsigned char m_color_source;       
  unsigned char m_plot_color_source;  
  unsigned char m_plot_weight_source; 
  unsigned char m_material_source;    
  unsigned char m_linetype_source;    
  
  unsigned char m_reserved_0;
  
  ON_SimpleArray<int> m_group; 
public:

  

  
  int GroupCount() const;

  
  
  
  const int* GroupList() const;

  
  
  int GetGroupList(ON_SimpleArray<int>&) const;

  
  
  int TopGroup() const;

  
  ON_BOOL32 IsInGroup(
    int 
    ) const;

  
  ON_BOOL32 IsInGroups(
    int,       
    const int* 
    ) const;

  
  ON_BOOL32 IsInGroups(
    const ON_SimpleArray<int>& 
    ) const;

  
  
  void AddToGroup(
    int 
    );

  
  
  void RemoveFromGroup(
    int 
    );

  
  void RemoveFromTopGroup();

  
  void RemoveFromAllGroups();


  

  














































  bool FindDisplayMaterialRef(
      const ON_DisplayMaterialRef& search_material,
      ON_DisplayMaterialRef* found_material = 0
    ) const;

  








  bool FindDisplayMaterialId( 
        const ON_UUID& viewport_id, 
        ON_UUID* display_material_id = 0
        ) const;
     
  












  bool AddDisplayMaterialRef(
    ON_DisplayMaterialRef display_material
    );

  

















  bool RemoveDisplayMaterialRef(
    ON_UUID viewport_id,
    ON_UUID display_material_id = ON_nil_uuid
    );

  



  void RemoveAllDisplayMaterialRefs();

  



  int DisplayMaterialRefCount() const;

  ON_SimpleArray<ON_DisplayMaterialRef> m_dmref;

private:
  bool WriteV5Helper( ON_BinaryArchive& file ) const;
  bool ReadV5Helper( ON_BinaryArchive& file );
};
























class  ON_AnnotationTextDot : public ON_Point
{
  
  protected: static void* m_s_ON_AnnotationTextDot_ptr; public: static const ON_ClassId m_ON_AnnotationTextDot_class_id; static ON_AnnotationTextDot * Cast( ON_Object* ); static const ON_AnnotationTextDot * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_AnnotationTextDot( const ON_Object*, ON_Object* ); public: ON_AnnotationTextDot * Duplicate() const;;
public:
  ON_AnnotationTextDot();
  ~ON_AnnotationTextDot();
  ON_AnnotationTextDot(const ON_AnnotationTextDot&);
  ON_AnnotationTextDot& operator=(const ON_AnnotationTextDot&);

  
  
  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  ON_wString m_text;
};

class  ON_AnnotationArrow : public ON_Geometry
{
  
  protected: static void* m_s_ON_AnnotationArrow_ptr; public: static const ON_ClassId m_ON_AnnotationArrow_class_id; static ON_AnnotationArrow * Cast( ON_Object* ); static const ON_AnnotationArrow * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_AnnotationArrow( const ON_Object*, ON_Object* ); public: ON_AnnotationArrow * Duplicate() const;;
public:
  ON_AnnotationArrow();
  ~ON_AnnotationArrow();
  ON_AnnotationArrow(const ON_AnnotationArrow&);
  ON_AnnotationArrow& operator=(const ON_AnnotationArrow&);

  
  
  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  ON::object_type ObjectType() const;

  
  
  
  

  int Dimension() const;

  
  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  
  
  
  ON_3dVector Vector() const;
  ON_3dPoint Head() const;
  ON_3dPoint Tail() const;

  ON_3dPoint m_tail;
  ON_3dPoint m_head;
};







class  ON_Annotation : public ON_Geometry
{
  protected: static void* m_s_ON_Annotation_ptr; public: static const ON_ClassId m_ON_Annotation_class_id; static ON_Annotation * Cast( ON_Object* ); static const ON_Annotation * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Annotation( const ON_Object*, ON_Object* ); public: ON_Annotation * Duplicate() const;;

  enum SYMBOLS
  {
    degreesym = 176,
    radiussym = 'R',
    diametersym = 216,
    plusminussym = 177,
  };



public:

  virtual ON_BOOL32 IsRealObject() const = 0;

  ON_Annotation();
  ON_Annotation(const ON_Annotation&);
  ~ON_Annotation();
  ON_Annotation& operator=(const ON_Annotation&);

  void Create();  
                  
  void Destroy();
  void EmergencyDestroy();

  
  
  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const; 

  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  ON::object_type ObjectType() const;

  
  
  
  

  int Dimension() const;

  ON_BOOL32 GetBBox( 
         double*,    
         double*,    
         ON_BOOL32 = false  
         ) const;

  ON_BOOL32 Transform( 
         const ON_Xform&
         );

  
  
  
  

  
  static const ON_3dmAnnotationSettings& AnnotationSettings();
  static void SetAnnotationSettings( const ON_3dmAnnotationSettings* );

  bool IsText() const;
  bool IsLeader() const;
  bool IsDimension() const;

  virtual double NumericValue() const;
  virtual void SetTextToDefault();

  void SetType( ON::eAnnotationType type );
  ON::eAnnotationType Type() const;
  void SetTextDisplayMode( ON::eTextDisplayMode mode);
  ON::eTextDisplayMode TextDisplayMode() const;

  void SetPlane( const ON_Plane& plane );
  ON_Plane Plane() const;
  int PointCount() const;
  void SetPoints( const ON_SimpleArray<ON_2dPoint>& points );
  const ON_SimpleArray<ON_2dPoint>& Points() const;
  void SetPoint( int idx, ON_3dPoint point );
  ON_2dPoint Point( int idx ) const;
  void SetUserText( const wchar_t* string );
  const ON_wString& UserText() const;
  void SetDefaultText( const wchar_t* string );
  const ON_wString& DefaultText() const;
  void SetUserPositionedText( int bUserPositionedText );
  bool UserPositionedText() const;

  
  bool GetECStoWCSXform( ON_Xform& xform ) const;
  bool GeWCStoECSXform( ON_Xform& xform ) const;

  ON::eAnnotationType m_type;          
                                       

  ON::eTextDisplayMode m_textdisplaymode; 
                                       

  ON_Plane m_plane;                    
  ON_SimpleArray<ON_2dPoint> m_points; 

  ON_wString m_usertext;               
  ON_wString m_defaulttext;            

  bool m_userpositionedtext;           
                                       
};


class  ON_LinearDimension : public ON_Annotation
{
  protected: static void* m_s_ON_LinearDimension_ptr; public: static const ON_ClassId m_ON_LinearDimension_class_id; static ON_LinearDimension * Cast( ON_Object* ); static const ON_LinearDimension * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_LinearDimension( const ON_Object*, ON_Object* ); public: ON_LinearDimension * Duplicate() const;;

public:
  ON_BOOL32 IsRealObject() const;
  ON_LinearDimension();
  ON_LinearDimension(const ON_LinearDimension&);
  ~ON_LinearDimension();
  ON_LinearDimension& operator=(const ON_LinearDimension&);

  double NumericValue();
  void SetTextToDefault();
  void EmergencyDestroy();
};

class  ON_RadialDimension : public ON_Annotation
{
  protected: static void* m_s_ON_RadialDimension_ptr; public: static const ON_ClassId m_ON_RadialDimension_class_id; static ON_RadialDimension * Cast( ON_Object* ); static const ON_RadialDimension * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_RadialDimension( const ON_Object*, ON_Object* ); public: ON_RadialDimension * Duplicate() const;;

public:
  ON_BOOL32 IsRealObject() const;
  ON_RadialDimension();
  ON_RadialDimension(const ON_RadialDimension&);
  ~ON_RadialDimension();
  ON_RadialDimension& operator=(const ON_RadialDimension&);

  double NumericValue();
  void SetTextToDefault();

  void EmergencyDestroy();
};

class  ON_AngularDimension : public ON_Annotation
{
  protected: static void* m_s_ON_AngularDimension_ptr; public: static const ON_ClassId m_ON_AngularDimension_class_id; static ON_AngularDimension * Cast( ON_Object* ); static const ON_AngularDimension * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_AngularDimension( const ON_Object*, ON_Object* ); public: ON_AngularDimension * Duplicate() const;;

public:
  ON_BOOL32 IsRealObject() const;

  ON_AngularDimension();
  ON_AngularDimension(const ON_AngularDimension&);
  ~ON_AngularDimension();
  ON_AngularDimension& operator=(const ON_AngularDimension&);

  void EmergencyDestroy();

  ON_BOOL32 Write( ON_BinaryArchive& file ) const;
  ON_BOOL32 Read( ON_BinaryArchive& file );

  void SetAngle( double angle ) { m_angle = angle; }
  double Angle() const { return m_angle; }
  void SetRadius( double radius ) { m_radius = radius; }
  double Radius() const { return m_radius; }

  double NumericValue();
  void SetTextToDefault();


private:
  double m_angle;      
  double m_radius;     
};

class  ON_TextEntity : public ON_Annotation
{
  protected: static void* m_s_ON_TextEntity_ptr; public: static const ON_ClassId m_ON_TextEntity_class_id; static ON_TextEntity * Cast( ON_Object* ); static const ON_TextEntity * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_TextEntity( const ON_Object*, ON_Object* ); public: ON_TextEntity * Duplicate() const;;

public:
  ON_BOOL32 IsRealObject() const;
  ON_TextEntity();
  ON_TextEntity(const ON_TextEntity&);
  ~ON_TextEntity();
  ON_TextEntity& operator=(const ON_TextEntity&);

  void EmergencyDestroy();

  ON_BOOL32 Write( ON_BinaryArchive& file ) const;
  ON_BOOL32 Read( ON_BinaryArchive& file );

  void SetFaceName( ON_wString string ) { m_facename = string; }
  ON_wString FaceName() const { return m_facename; }
  void SetFontWeight( int weight ) { m_fontweight = weight; }
  int FontWeight() const { return m_fontweight; }
  void SetHeight( double height ) { m_height = height; }
  double Height() const { return m_height; }

private:
  ON_wString m_facename;
  int m_fontweight;  
  double m_height;   
};

class  ON_Leader : public ON_Annotation
{
  protected: static void* m_s_ON_Leader_ptr; public: static const ON_ClassId m_ON_Leader_class_id; static ON_Leader * Cast( ON_Object* ); static const ON_Leader * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Leader( const ON_Object*, ON_Object* ); public: ON_Leader * Duplicate() const;;

public:
  ON_BOOL32 IsRealObject() const;
  ON_Leader();
  ON_Leader(const ON_Leader&);
  ~ON_Leader();
  ON_Leader& operator=(const ON_Leader&);

  void EmergencyDestroy();
};












































class  ON_Annotation2Text : public ON_wString
{
public:
  ON_Annotation2Text();
  ~ON_Annotation2Text();

  
  
  
  
  
  

  
  
  
  
  
  
  
  
  
  
  
  
  



  ON_Annotation2Text& operator=(const char*);
  ON_Annotation2Text& operator=(const wchar_t*);

  void SetText( const char* s );
  void SetText( const wchar_t* s );

  
  
  
  
  
  
  
  
  
  RECT m_rect;
};


class  ON_TextExtra : public ON_UserData
{
  protected: static void* m_s_ON_TextExtra_ptr; public: static const ON_ClassId m_ON_TextExtra_class_id; static ON_TextExtra * Cast( ON_Object* ); static const ON_TextExtra * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_TextExtra( const ON_Object*, ON_Object* ); public: ON_TextExtra * Duplicate() const;;
public:

  ON_TextExtra();
  ~ON_TextExtra();

  static
  ON_TextExtra* TextExtension(class ON_TextEntity2* pDim, bool bCreate);
  static const 
  ON_TextExtra* TextExtension(const class ON_TextEntity2* pDim, bool bCreate);

  void SetDefaults();

  
  void Dump( ON_TextLog& text_log ) const;

  
  unsigned int SizeOf() const;

  
  ON_BOOL32 Write(ON_BinaryArchive& binary_archive) const;

  
  ON_BOOL32 Read(ON_BinaryArchive& binary_archive);

  
  ON_BOOL32 GetDescription( ON_wString& description );

  
  ON_BOOL32 Archive() const; 

  ON_UUID ParentUUID() const;
  void SetParentUUID( ON_UUID parent_uuid);

  bool DrawTextMask() const;
  void SetDrawTextMask(bool bDraw);

  int MaskColorSource() const;
  void SetMaskColorSource(int source);

  ON_Color MaskColor() const;  
                               
  void SetMaskColor(ON_Color color);

  double MaskOffsetFactor() const;
  void SetMaskOffsetFactor(double offset);

  ON_UUID  m_parent_uuid;    

  bool     m_bDrawMask;      

  int      m_color_source;   
                             

  ON_Color m_mask_color;     

  double   m_border_offset;  
                             
                             
};


class  ON_DimensionExtra : public ON_UserData
{
  protected: static void* m_s_ON_DimensionExtra_ptr; public: static const ON_ClassId m_ON_DimensionExtra_class_id; static ON_DimensionExtra * Cast( ON_Object* ); static const ON_DimensionExtra * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_DimensionExtra( const ON_Object*, ON_Object* ); public: ON_DimensionExtra * Duplicate() const;;
public:

  ON_DimensionExtra();
  ~ON_DimensionExtra();

  static
  ON_DimensionExtra* DimensionExtension(class ON_LinearDimension2* pDim, bool bCreate);
  static const 
  ON_DimensionExtra* DimensionExtension(const class ON_LinearDimension2* pDim, bool bCreate);
  static
  ON_DimensionExtra* DimensionExtension(class ON_RadialDimension2* pDim, bool bCreate);
  static const 
  ON_DimensionExtra* DimensionExtension(const class ON_RadialDimension2* pDim, bool bCreate);
  static
  ON_DimensionExtra* DimensionExtension(class ON_OrdinateDimension2* pDim, bool bCreate);
  static const 
  ON_DimensionExtra* DimensionExtension(const class ON_OrdinateDimension2* pDim, bool bCreate);

  void SetDefaults();

  
  void Dump( ON_TextLog& text_log ) const;

  
  unsigned int SizeOf() const;

  
  ON_BOOL32 Write(ON_BinaryArchive& binary_archive) const;

  
  ON_BOOL32 Read(ON_BinaryArchive& binary_archive);

  
  ON_BOOL32 GetDescription( ON_wString& description );

  
  ON_BOOL32 Archive() const; 

  ON_UUID ParentUUID() const;
  void SetParentUUID( ON_UUID parent_uuid);

  
  
  
  int ArrowPosition() const;
  void SetArrowPosition( int position);

  
  
  
  
  double DistanceScale() const;
  void SetDistanceScale(double s);

  
  void SetModelSpaceBasePoint(ON_3dPoint basepoint);
  ON_3dPoint ModelSpaceBasePoint() const;

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  
  
  
  

  ON_UUID m_partent_uuid;  

  int m_arrow_position;

  
  
  
  
  
  
  
  
  
  
  
  RECT* m_text_rects;

  double m_distance_scale;
  ON_3dPoint m_modelspace_basepoint;
};










class  ON_Annotation2 : public ON_Geometry
{
  protected: static void* m_s_ON_Annotation2_ptr; public: static const ON_ClassId m_ON_Annotation2_class_id; static ON_Annotation2 * Cast( ON_Object* ); static const ON_Annotation2 * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Annotation2( const ON_Object*, ON_Object* ); public: ON_Annotation2 * Duplicate() const;;

  
  enum SYMBOLS
  {
    degreesym = 176,
    radiussym = L'R',
    diametersym = 216,
    plusminussym = 177,
  };

public:
  ON_Annotation2();
  ~ON_Annotation2();
  
  
  

  
  ON_Annotation2(const ON_Annotation&);
  ON_Annotation2& operator=(const ON_Annotation&);

  
  
  void Create();

  void Destroy();

  void EmergencyDestroy();

  
  
  
  

  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;


  







  ON_BOOL32 Write(
         ON_BinaryArchive&
       ) const;

  







  ON_BOOL32 Read(
         ON_BinaryArchive&
       );

  


  ON::object_type ObjectType() const;

  
  
  
  

  


  int Dimension() const;

  
  ON_BOOL32 Transform( const ON_Xform& xform );

  
  bool EvaluatePoint( const class ON_ObjRef& objref, ON_3dPoint& P ) const;

  
  
  
  

  
  
  enum eTextJustification
  {
    tjUndefined = 0,
    tjLeft   = 1<<0,
    tjCenter = 1<<1,
    tjRight  = 1<<2,
    tjBottom = 1<<16,
    tjMiddle = 1<<17,
    tjTop    = 1<<18,
    tjBottomLeft   = tjBottom | tjLeft,
    tjBottomCenter = tjBottom | tjCenter,
    tjBottomRight  = tjBottom | tjRight,
    tjMiddleLeft   = tjMiddle | tjLeft,
    tjMiddleCenter = tjMiddle | tjCenter,
    tjMiddleRight  = tjMiddle | tjRight,
    tjTopLeft      = tjTop    | tjLeft,
    tjTopCenter    = tjTop    | tjCenter,
    tjTopRight     = tjTop    | tjRight,
  };

  









  bool IsText() const;

  









  bool IsLeader() const;

  









  bool IsDimension() const;

  












  int Index() const;
  void SetIndex( int);

  








  virtual 
  double NumericValue() const;

  









  void SetHeight( double);
  double Height() const;

  








  void SetType( ON::eAnnotationType);
  ON::eAnnotationType Type() const;

  







  void SetPlane( const ON_Plane&);
  const ON_Plane& Plane() const;

  








  int PointCount() const;
  void SetPointCount( int count);

  







  void SetPoints( const ON_2dPointArray&);
  const ON_2dPointArray& Points() const;

  









  void SetPoint( int, const ON_2dPoint&);
  ON_2dPoint Point( int) const;

  















  
  __declspec(deprecated) void SetUserText( const wchar_t* text_value );

  
  __declspec(deprecated) const ON_wString& UserText() const;


  





















  const wchar_t* TextValue() const;

  


















  void SetTextValue( const wchar_t* text_value );

  

















  const wchar_t* TextFormula() const;

  

















  void SetTextFormula( const wchar_t* s );

  
















  void SetUserPositionedText( int bUserPositionedText );
  bool UserPositionedText() const;

  










  void SetTextDisplayMode( ON::eTextDisplayMode);
  ON::eTextDisplayMode TextDisplayMode() const;


  









  ON_BOOL32 GetECStoWCSXform( ON_Xform&) const;

  









  ON_BOOL32 GetWCStoECSXform( ON_Xform& xform) const;

  







  void ReservePoints( int);


  





  static const wchar_t* DefaultText();

  










  virtual 
  void ConvertBack( ON_Annotation& target);

  












  virtual
  void SetJustification( unsigned int justification);

  virtual 
  unsigned int Justification();

  






































  bool GetTextXform( 
        RECT gdi_text_rect,
        int gdi_height_of_I,
        double dimstyle_textheight,
        double dimstyle_textgap,
        ON::eTextDisplayMode dimstyle_textalignment,
        double dimscale,
        ON_3dVector cameraX,
        ON_3dVector cameraY,
        const ON_Xform* model_xform,
        ON_Xform& text_xform 
        ) const;

  







































  bool GetTextXform( 
        RECT gdi_text_rect,
        int gdi_height_of_I,
        double dimstyle_textheight,
        double dimstyle_textgap,
        ON::eTextDisplayMode dimstyle_textalignment,
        double dimscale,
        ON_3dVector cameraX,
        ON_3dVector cameraY,
        ON_Xform& xform
        ) const;

  
























  
  
  
  
  
  
  
  
  
  bool GetTextXform( 
      const RECT gdi_text_rect,
      const ON_Font& font,
      const ON_DimStyle* dimstyle,
      double dimscale,
      const ON_Viewport* vp,
      const ON_Xform* model_xform,
      ON_Xform& text_xform  
      ) const;

  

























  bool GetTextXform( 
      RECT gdi_text_rect,
      const ON_Font& font,
      const ON_DimStyle& dimstyle,
      double dimscale,
      const ON_Viewport* vp,
      ON_Xform& xform
      ) const;

  












  bool GetTextPoint( ON_2dPoint& text_2d_point ) const;

  
  ON::eAnnotationType m_type;

  
  
  
  
  
  ON::eTextDisplayMode m_textdisplaymode;

  
  
  
  
  
  
  ON_Plane m_plane;

  
  
  
  
  
  
  
  
  ON_2dPointArray m_points;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_Annotation2Text m_usertext;

  
  
  bool m_userpositionedtext;
  
  
  
  
  
  
  
  bool m_annotative_scale;
private:
  bool m_reserved_b1;
  bool m_reserved_b2;
public:

  
  
  int m_index;

  
  
  
  double m_textheight;

  
  
  unsigned int m_justification;
};



class  ON_LinearDimension2 : public ON_Annotation2
{
  protected: static void* m_s_ON_LinearDimension2_ptr; public: static const ON_ClassId m_ON_LinearDimension2_class_id; static ON_LinearDimension2 * Cast( ON_Object* ); static const ON_LinearDimension2 * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_LinearDimension2( const ON_Object*, ON_Object* ); public: ON_LinearDimension2 * Duplicate() const;;

public:

  



























  enum POINT_INDEX
  {
    
    
    
    
    
    ext0_pt_index    = 0, 
    arrow0_pt_index  = 1, 
    ext1_pt_index    = 2, 
    arrow1_pt_index  = 3, 
    userpositionedtext_pt_index = 4,
    dim_pt_count     = 5, 

    
    text_pivot_pt = 10000, 
    dim_mid_pt    = 10001  
  };

  ON_LinearDimension2();
  ~ON_LinearDimension2();
  
  
  

  
  ON_BOOL32 Transform( const ON_Xform& xform );

  








  int Repair();

  








  ON_2dPoint Dim2dPoint(
       int point_index
       ) const;

  








  ON_3dPoint Dim3dPoint(
       int point_index
       ) const;

  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  ON_BOOL32 Write(ON_BinaryArchive&) const;

  
  ON_BOOL32 Read(ON_BinaryArchive&);

  
  ON_BOOL32 GetBBox(
         double*,
         double*,
         ON_BOOL32 = false
         ) const;

  
	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  





  double NumericValue() const;

  







  int StyleIndex() const;
  void SetStyleIndex( int);

  





  static const wchar_t* DefaultText();



  void GetV2Form( ON_LinearDimension& dim);

  bool CreateFromV2( 
      const ON_Annotation& v2_ann,
      const ON_3dmAnnotationSettings& settings,
      int dimstyle_index
      );

  


























  int GetDimensionLineSegments(
      RECT gdi_text_rect,
      int gdi_height_of_I,
      ON_Xform gdi_to_world,
      const ON_DimStyle& dimstyle,
      double dimscale,
      const ON_Viewport* vp,
      double a[6],
      bool& bInside
      ) const;


  
  
  ON_DimensionExtra* DimensionExtension();
  const ON_DimensionExtra* DimensionExtension() const;




};



class  ON_RadialDimension2 : public ON_Annotation2
{
  protected: static void* m_s_ON_RadialDimension2_ptr; public: static const ON_ClassId m_ON_RadialDimension2_class_id; static ON_RadialDimension2 * Cast( ON_Object* ); static const ON_RadialDimension2 * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_RadialDimension2( const ON_Object*, ON_Object* ); public: ON_RadialDimension2 * Duplicate() const;;

public:

  



















  enum POINT_INDEX
  {
    
    
    
    
    
    center_pt_index = 0, 
    arrow_pt_index  = 1, 
    tail_pt_index   = 2, 
    knee_pt_index   = 3, 
    dim_pt_count    = 4, 

    
    text_pivot_pt = 10000, 
  };

  ON_RadialDimension2();
  ~ON_RadialDimension2();
  
  
  

  
  ON_BOOL32 Transform( const ON_Xform& xform );

  








  ON_2dPoint Dim2dPoint(
       int point_index
       ) const;

  








  ON_3dPoint Dim3dPoint(
       int point_index
       ) const;


  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  ON_BOOL32 Write(ON_BinaryArchive&) const;

  
  ON_BOOL32 Read(ON_BinaryArchive&);

  
  ON_BOOL32 GetBBox(
         double*,
         double*,
         ON_BOOL32 = false
         ) const;

  
	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  













  bool CreateFromPoints( 
          ON_3dPoint center, 
          ON_3dPoint arrowtip, 
          ON_3dVector xaxis, 
          ON_3dVector normal,
          double offset_distance
          );

  






  double NumericValue() const;

  







  int StyleIndex() const;
  void SetStyleIndex( int);

  





  static const wchar_t* DefaultDiameterText();
  static const wchar_t* DefaultRadiusText();


  void GetV2Form( ON_RadialDimension& dim);

  bool CreateFromV2( 
      const ON_Annotation& v2_ann,
      const ON_3dmAnnotationSettings& settings,
      int dimstyle_index
      );

  bool GetArrowHeadDirection( ON_2dVector& arrowhead_dir ) const;
  bool GetArrowHeadTip( ON_2dPoint& arrowhead_tip ) const;
};




class  ON_AngularDimension2 : public ON_Annotation2
{
  protected: static void* m_s_ON_AngularDimension2_ptr; public: static const ON_ClassId m_ON_AngularDimension2_class_id; static ON_AngularDimension2 * Cast( ON_Object* ); static const ON_AngularDimension2 * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_AngularDimension2( const ON_Object*, ON_Object* ); public: ON_AngularDimension2 * Duplicate() const;;

public:

  

































  enum POINT_INDEX
  {
    
    
    
    
    
    userpositionedtext_pt_index  = 0, 
    start_pt_index = 1, 
    end_pt_index   = 2, 
    arc_pt_index   = 3, 
    dim_pt_count   = 4, 

    
    text_pivot_pt = 10000, 
    arcstart_pt   = 10001,
    arcend_pt     = 10002,
    arcmid_pt     = 10003,
    arccenter_pt  = 10004, 
    extension0_pt = 10005, 
    extension1_pt = 10006  
  };

  ON_AngularDimension2();
  ~ON_AngularDimension2();
  
  
  

  
  ON_BOOL32 Transform( const ON_Xform& xform );

  








  ON_2dPoint Dim2dPoint(
       int point_index
       ) const;

  








  ON_3dPoint Dim3dPoint(
       int point_index
       ) const;


  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  ON_BOOL32 GetBBox(
         double*,
         double*,
         ON_BOOL32 = false
         ) const;

  
	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  







  ON_BOOL32 Write( ON_BinaryArchive& file ) const;
  ON_BOOL32 Read( ON_BinaryArchive& file );

  

















  bool CreateFromPoints( 
    const ON_3dPoint& apex, 
    const ON_3dPoint& p0, 
    const ON_3dPoint& p1, 
    ON_3dPoint& arcpt, 
    ON_3dVector& Normal
    );

  









  bool CreateFromArc( 
    const ON_Arc& arc
    );

  bool CreateFromV2( 
      const ON_Annotation& v2_ann,
      const ON_3dmAnnotationSettings& settings,
      int dimstyle_index
      );

  bool GetArc( ON_Arc& arc ) const;

  bool GetExtensionLines(ON_Line extensions[2]) const;

  
  void SetAngle( double angle);
  double Angle() const;
  void SetRadius( double radius);
  double Radius() const;

  





  double NumericValue() const;

  







  int StyleIndex() const;
  void SetStyleIndex( int);

  





  static const wchar_t* DefaultText();


  










  void ConvertBack( ON_AngularDimension2& target);


  void GetV2Form( ON_AngularDimension& dim);

  double m_angle;      
  double m_radius;     

  






















  int GetDimensionArcSegments(
      RECT gdi_text_rect,
      int gdi_height_of_I,
      ON_Xform gdi_to_world,
      const ON_DimStyle& dimstyle,
      double dimscale,
      const ON_Viewport* vp,
      double a[6],
      bool& bInside
      ) const;

  
  







  double DimpointOffset(
    int index) const;

  






  void SetDimpointOffset(
    int index, 
    double offset);
};









class  ON_OrdinateDimension2 : public ON_Annotation2
{
  protected: static void* m_s_ON_OrdinateDimension2_ptr; public: static const ON_ClassId m_ON_OrdinateDimension2_class_id; static ON_OrdinateDimension2 * Cast( ON_Object* ); static const ON_OrdinateDimension2 * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_OrdinateDimension2( const ON_Object*, ON_Object* ); public: ON_OrdinateDimension2 * Duplicate() const;;

public:

  









































  enum POINT_INDEX
  {
    
    
    
    
    
    definition_pt_index    = 0, 
    leader_end_pt_index    = 1, 
    dim_pt_count           = 2, 

    
    text_pivot_pt = 10000, 
    offset_pt_0   = 10001, 
    offset_pt_1   = 10002  
  };

  enum DIRECTION
  {
    x = 0,  
    y = 1,  
  };

  ON_OrdinateDimension2();
  ~ON_OrdinateDimension2();

  
  ON_BOOL32 Transform( const ON_Xform& xform );

  










  ON_2dPoint Dim2dPoint(
       int point_index,
       double default_offset = 1.0
       ) const;

  










  ON_3dPoint Dim3dPoint(
       int point_index,
       double default_offset = 1.0
       ) const;

  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  ON_BOOL32 GetBBox(
         double* boxmin,
         double* boxmax,
         ON_BOOL32 bGrowBox = false
         ) const;

  
	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  







  ON_BOOL32 Write( ON_BinaryArchive& file ) const;
  ON_BOOL32 Read( ON_BinaryArchive& file );

  






  double NumericValue() const;

  







  int StyleIndex() const;
  void SetStyleIndex( int);

  









  int ImpliedDirection() const;

  







  int Direction() const;
  void SetDirection( int direction);

  










  





  static const wchar_t* DefaultText();

  











  double KinkOffset( int index) const;
  void SetKinkOffset( int index, double offset);


  int m_direction;   
                     
                     

  
  double m_kink_offset_0;  
  double m_kink_offset_1;  

  












  void CalcKinkPoints( ON_2dPoint p0, ON_2dPoint p1, 
                       int direction, double default_offset,
                       ON_2dPoint& k0, ON_2dPoint& k1) const;

};





class  ON_TextEntity2 : public ON_Annotation2
{
  protected: static void* m_s_ON_TextEntity2_ptr; public: static const ON_ClassId m_ON_TextEntity2_class_id; static ON_TextEntity2 * Cast( ON_Object* ); static const ON_TextEntity2 * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_TextEntity2( const ON_Object*, ON_Object* ); public: ON_TextEntity2 * Duplicate() const;;

public:
  ON_TextEntity2();
  ~ON_TextEntity2();

  
  
  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  ON_BOOL32 Write(ON_BinaryArchive&) const;

  
  ON_BOOL32 Read(ON_BinaryArchive&);

  
  ON_BOOL32 Transform( const ON_Xform& xform );

  
  
  
  ON_BOOL32 GetBBox(
         double*,
         double*,
         ON_BOOL32 = false
         ) const;

  
  
  
	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  









  int FontIndex() const;
  void SetFontIndex( int);


  void GetV2Form( ON_TextEntity& text);

  void SetJustification( unsigned int justification);

  unsigned int Justification();

  
  bool DrawTextMask() const;
  void SetDrawTextMask(bool bDraw);

  
  
  
  int MaskColorSource() const;
  void SetMaskColorSource(int source);

  ON_Color MaskColor() const;  
                               
  void SetMaskColor(ON_Color color);

  
  
  
  double MaskOffsetFactor() const;
  void SetMaskOffsetFactor(double offset);

  
  
  
  bool AnnotativeScaling() const;
  void SetAnnotativeScaling(bool b);
};



class  ON_Leader2 : public ON_Annotation2
{
  protected: static void* m_s_ON_Leader2_ptr; public: static const ON_ClassId m_ON_Leader2_class_id; static ON_Leader2 * Cast( ON_Object* ); static const ON_Leader2 * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Leader2( const ON_Object*, ON_Object* ); public: ON_Leader2 * Duplicate() const;;

public:

  
























  enum POINT_INDEX
  {
    
    
    
    
    
    arrow_pt_index  = 0, 

    
    text_pivot_pt = 10000, 
    tail_pt       = 10001
  };

  
  ON_Leader2();
  ~ON_Leader2();
  
  
  

  
  ON_BOOL32 Transform( const ON_Xform& xform );

  








  ON_2dPoint Dim2dPoint(
       int point_index
       ) const;

  








  ON_3dPoint Dim3dPoint(
       int point_index
       ) const;

  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  ON_BOOL32 Write(ON_BinaryArchive&) const;

  
  ON_BOOL32 Read(ON_BinaryArchive&);

  
  ON_BOOL32 GetBBox(
         double*,
         double*,
         ON_BOOL32 = false
         ) const;

  
	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  










  void AddPoint( const ON_2dPoint& point);
  bool RemovePoint( int index = -1);

  





  void GetV2Form( ON_Leader& leader);
  bool CreateFromV2( 
      const ON_Annotation& v2_ann,
      const ON_3dmAnnotationSettings& settings,
      int dimstyle_index
      );


  bool GetTextDirection( ON_2dVector& text_dir ) const;
  bool GetArrowHeadDirection( ON_2dVector& arrowhead_dir ) const;
  bool GetArrowHeadTip( ON_2dPoint& arrowhead_tip ) const;
};





class  ON_TextDot : public ON_Geometry
{
  protected: static void* m_s_ON_TextDot_ptr; public: static const ON_ClassId m_ON_TextDot_class_id; static ON_TextDot * Cast( ON_Object* ); static const ON_TextDot * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_TextDot( const ON_Object*, ON_Object* ); public: ON_TextDot * Duplicate() const;;

public:
  ON_TextDot();
  ~ON_TextDot();
  
  
  

  void EmergencyDestroy();

  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  


  void Dump( ON_TextLog& log) const;

  







  ON_BOOL32 Write( ON_BinaryArchive& ar) const;

  







  ON_BOOL32 Read( ON_BinaryArchive& ar);

  


  ON::object_type ObjectType() const;

  
  

  


  int Dimension() const;

  














  ON_BOOL32 GetBBox( double* box_min, double* box_max, ON_BOOL32 grow_box = false) const;

  










  ON_BOOL32 Transform( const ON_Xform& xform);

  
  bool IsDeformable() const;

  
  bool MakeDeformable();

  const ON_3dPoint& Point() const;
  void SetPoint( const ON_3dPoint& point);

  int Height() const;
  void SetHeight( int);

  const wchar_t* TextString() const;
  void SetTextString( const wchar_t* string);

  const wchar_t* FontFace() const;
  void SetFontFace( const wchar_t* face);

  
  









  void SetAlwaysOnTop(bool bTop);
  bool AlwaysOnTop() const;

  









  void SetTransparent(bool bTransparent);
  bool Transparent() const;

  









  void SetBold(bool bBold);
  bool Bold() const;

  









  void SetItalic(bool bItalic);
  bool Italic() const;


  ON_3dPoint m_point;
  int m_height;        
  ON_wString m_text;
  ON_wString m_fontface;
  int m_display;       
};

































class  ON_HatchLoop
{
public:



















  enum eLoopType
  {
    ltOuter = 0,
    ltInner = 1,
  };

  ON_HatchLoop();
  ON_HatchLoop( ON_Curve* pCurve2d, eLoopType type = ltOuter);
  ON_HatchLoop( const ON_HatchLoop& src);
  ~ON_HatchLoop();

  ON_HatchLoop& operator=( const ON_HatchLoop& src);

  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;
  void Dump( ON_TextLog& ) const; 
  ON_BOOL32 Write( ON_BinaryArchive&) const;
  ON_BOOL32 Read( ON_BinaryArchive&);

  
  

  






  const ON_Curve* Curve() const;
 
  









  bool SetCurve( const ON_Curve& curve);

  





  eLoopType Type() const;

  





  void SetType( eLoopType type);

protected:
  friend class ON_Hatch;
  eLoopType m_type;         
  ON_Curve* m_p2dCurve;     
                            
};

























class  ON_HatchLine
{
public:
  ON_HatchLine();
  

  ON_HatchLine( 
    double angle, 
    const ON_2dPoint& base, 
    const ON_2dVector& offset,
    const ON_SimpleArray<double> dashes);

  bool operator==( const ON_HatchLine&) const;
  bool operator!=( const ON_HatchLine&) const;

  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;
  void Dump( ON_TextLog& ) const; 
  ON_BOOL32 Write( ON_BinaryArchive&) const;  
  ON_BOOL32 Read( ON_BinaryArchive&);  

  
  

  







  double Angle() const;

  







  void SetAngle( double angle);
  
  






  ON_2dPoint Base() const;
  






  void SetBase( const ON_2dPoint& base);
  
  








  ON_2dVector Offset() const;

  








  void SetOffset( const ON_2dVector& offset);

  






  int DashCount() const;

  







  double Dash( int) const;

  





  void AppendDash( double dash);

  





  void SetPattern( const ON_SimpleArray<double>& dashes);

  










  void GetLineData(
    double& angle, 
    ON_2dPoint& base, 
    ON_2dVector& offset, 
    ON_SimpleArray<double>& dashes) const;

  






  double GetPatternLength() const;

public:
  double m_angle;
  ON_2dPoint m_base;
  ON_2dVector m_offset;
  ON_SimpleArray< double> m_dashes;
};



























class  ON_HatchPattern : public ON_Object
{
  protected: static void* m_s_ON_HatchPattern_ptr; public: static const ON_ClassId m_ON_HatchPattern_class_id; static ON_HatchPattern * Cast( ON_Object* ); static const ON_HatchPattern * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_HatchPattern( const ON_Object*, ON_Object* ); public: ON_HatchPattern * Duplicate() const;;

public:

  enum eFillType
  {
    ftSolid    = 0,  
    ftLines    = 1,  
    ftGradient = 2,  
    ftLast     = 3
  };

  ON_HatchPattern();
  ~ON_HatchPattern();
  

 
  
   ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;
  void Dump( ON_TextLog& ) const; 
  ON_BOOL32 Write( ON_BinaryArchive&) const;
  ON_BOOL32 Read( ON_BinaryArchive&);

  
  ON_UUID ModelObjectId() const;


  
  

  




  eFillType FillType() const;

  





  void SetFillType( eFillType type);

  






  void SetName( const wchar_t* pName);
  void SetName( const char* pName);
  
  





  void GetName( ON_wString& string) const;

  





  const wchar_t* Name() const;

  






  void SetDescription( const wchar_t* pDescription);
  void SetDescription( const char* pDescription);
  
  





  void GetDescription( ON_wString& string) const;

  






  const wchar_t* Description() const;

  






  void SetIndex( int index);

  






  int Index() const;

  
  
  






  int HatchLineCount() const;

  








  int AddHatchLine( const ON_HatchLine& line);

  








  const ON_HatchLine* HatchLine( int index) const;

  








  bool RemoveHatchLine( int index);

  








  void RemoveAllHatchLines();

  








  int SetHatchLines( const ON_ClassArray<ON_HatchLine> lines);

public:
  int m_hatchpattern_index;         
  ON_wString m_hatchpattern_name;   
  ON_UUID m_hatchpattern_id;
  
  eFillType m_type;
  
  ON_wString m_description;  

  
  
  
  
  ON_ClassArray<ON_HatchLine> m_lines; 
};













class  ON_Hatch : public ON_Geometry
{
  protected: static void* m_s_ON_Hatch_ptr; public: static const ON_ClassId m_ON_Hatch_class_id; static ON_Hatch * Cast( ON_Object* ); static const ON_Hatch * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_Hatch( const ON_Object*, ON_Object* ); public: ON_Hatch * Duplicate() const;;

public:
  
  ON_Hatch();
  ON_Hatch( const ON_Hatch&);
  ON_Hatch& operator=(const ON_Hatch&);
  ~ON_Hatch();

  virtual ON_Hatch* DuplicateHatch() const;

  
  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;
  void Dump( ON_TextLog& ) const; 
  ON_BOOL32 Write( ON_BinaryArchive&) const;
  ON_BOOL32 Read( ON_BinaryArchive&);
  ON::object_type ObjectType() const;

  
  
  


  int Dimension() const;

  













  ON_BOOL32 GetBBox( double*, double*, ON_BOOL32 = false) const;

  















	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;


  











  ON_BOOL32 Transform( const ON_Xform&);

  
  

  











  bool Create( const ON_Plane& plane,
               const ON_SimpleArray<const ON_Curve*> loops, 
               int pattern_index, 
               double pattern_rotation, 
               double pattern_scale);

  






  const ON_Plane& Plane() const;

  






  void SetPlane( const ON_Plane& plane);
  
  









  double PatternRotation() const;











  void SetPatternRotation( double rotation);
  
  









  double PatternScale() const;











  void SetPatternScale( double scale);
  
  






  int LoopCount() const;

  







  void AddLoop( ON_HatchLoop* loop);

  










  bool InsertLoop( int index,
                   ON_HatchLoop* loop);

  







  bool RemoveLoop( int index);

  








  const ON_HatchLoop* Loop( int index) const;

  









  ON_Curve* LoopCurve3d( int index) const;

  






  int PatternIndex() const;








  void SetPatternIndex( int index);

  
  





  void SetBasePoint(ON_2dPoint basepoint);

  







  void SetBasePoint(ON_3dPoint point);

  



  ON_3dPoint BasePoint() const;

  



  ON_2dPoint BasePoint2d() const;

  











  bool ReplaceLoops(ON_SimpleArray<const ON_Curve*> loops);

protected:
  ON_Plane m_plane;
  double m_pattern_scale;
  double m_pattern_rotation;
  ON_SimpleArray<ON_HatchLoop*> m_loops;
  int m_pattern_index;

    
  class ON_HatchExtra* HatchExtension();

};























class  ON_DimStyle : public ON_Object
{
  protected: static void* m_s_ON_DimStyle_ptr; public: static const ON_ClassId m_ON_DimStyle_class_id; static ON_DimStyle * Cast( ON_Object* ); static const ON_DimStyle * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_DimStyle( const ON_Object*, ON_Object* ); public: ON_DimStyle * Duplicate() const;;

public:
  enum eArrowType
  {
    solidtriangle = 0,    
    dot = 1,
    tick = 2,
    shorttriangle = 3,    
    arrow = 4,
    rectangle = 5,
    longtriangle = 6,     
    longertriangle = 7,   
  };

  ON_DimStyle();
  ~ON_DimStyle();
  

  ON_DimStyle& operator=( const ON_3dmAnnotationSettings& src);

  
  
  

  


















  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  
  void Dump( ON_TextLog& ) const; 

  
  ON_BOOL32 Write(
         ON_BinaryArchive&  
       ) const;

  
  ON_BOOL32 Read(
         ON_BinaryArchive&  
       );

  void EmergencyDestroy();

  
  ON_UUID ModelObjectId() const;


  
  
  

  void SetName( const wchar_t* );
  void SetName( const char* );

  void GetName( ON_wString& ) const;
  const wchar_t* Name() const;

  void SetIndex(int);
  int Index() const;

  void SetDefaults();
  void SetDefaultsNoExtension();


  double ExtExtension() const;
  void SetExtExtension( const double);

  double ExtOffset() const;
  void SetExtOffset( const double);

  double ArrowSize() const;
  void SetArrowSize( const double);

  double LeaderArrowSize() const;
  void SetLeaderArrowSize( const double);

  double CenterMark() const;
  void SetCenterMark( const double);

  int TextAlignment() const;
  void SetTextAlignment( ON::eTextDisplayMode);

  int ArrowType() const;
  void SetArrowType( eArrowType);

  int LeaderArrowType() const;
  void SetLeaderArrowType( eArrowType);

  int AngularUnits() const;
  void SetAngularUnits( int);

  int LengthFormat() const;
  void SetLengthFormat( int);

  int AngleFormat() const;
  void SetAngleFormat( int);

  int LengthResolution() const;
  void SetLengthResolution( int);

  int AngleResolution() const;
  void SetAngleResolution( int);

  int FontIndex() const;
  virtual void SetFontIndex( int index);

  double TextGap() const;
  void SetTextGap( double gap);

  double TextHeight() const;
  void SetTextHeight( double height);

  
  double LengthFactor() const;
  __declspec(deprecated) void SetLengthactor( double);
  void SetLengthFactor( double); 

  bool Alternate() const;
  void SetAlternate( bool);

  double AlternateLengthFactor() const;
  __declspec(deprecated) void SetAlternateLengthactor( double);
  void SetAlternateLengthFactor( double); 

  int AlternateLengthFormat() const;
  void SetAlternateLengthFormat( int);

  int AlternateLengthResolution() const;
  void SetAlternateLengthResolution( int);

  int AlternateAngleFormat() const;
  void SetAlternateAngleFormat( int);

  int AlternateAngleResolution() const;
  void SetAlternateAngleResolution( int);

  void GetPrefix( ON_wString& ) const;
  const wchar_t* Prefix() const;
  void SetPrefix( const wchar_t*);
  void SetPrefix( wchar_t*);

  void GetSuffix( ON_wString& ) const;
  const wchar_t* Suffix() const;
  void SetSuffix( const wchar_t*);
  void SetSuffix( wchar_t*);

  void GetAlternatePrefix( ON_wString& ) const;
  const wchar_t* AlternatePrefix() const;
  void SetAlternatePrefix( const wchar_t*);
  void SetAlternatePrefix( wchar_t*);

  void GetAlternateSuffix( ON_wString& ) const;
  const wchar_t* AlternateSuffix() const;
  void SetAlternateSuffix( const wchar_t*);
  void SetAlternateSuffix( wchar_t*);

  bool SuppressExtension1() const;
  void SetSuppressExtension1( bool);

  bool SuppressExtension2() const;
  void SetSuppressExtension2( bool);

  
  __declspec(deprecated) void Composite( const ON_DimStyle& override);

  
  
  enum eField
  {
    fn_name                        = 0,
    fn_index                       = 1,
    fn_extextension                = 2,
    fn_extoffset                   = 3,
    fn_arrowsize                   = 4,
    fn_centermark                  = 5,
    fn_textgap                     = 6,
    fn_textheight                  = 7,
    fn_textalign                   = 8,
    fn_arrowtype                   = 9,
    fn_angularunits                = 10,
    fn_lengthformat                = 11,
    fn_angleformat                 = 12,
    fn_angleresolution             = 13,
    fn_lengthresolution            = 14,
    fn_fontindex                   = 15,
    fn_lengthfactor                = 16,
    fn_bAlternate                  = 17,
    fn_alternate_lengthfactor      = 18,
    fn_alternate_lengthformat      = 19, 
    fn_alternate_lengthresolution  = 20,
    fn_alternate_angleformat       = 21, 
    fn_alternate_angleresolution   = 22,
    fn_prefix                      = 23,
    fn_suffix                      = 24,
    fn_alternate_prefix            = 25,
    fn_alternate_suffix            = 26,
    fn_dimextension                = 27,
    fn_leaderarrowsize             = 28,
    fn_leaderarrowtype             = 29,
    fn_suppressextension1          = 30,
    fn_suppressextension2          = 31,
    fn_last                        = 32, 
                   
  
  
    fn_overall_scale               = 33,
    fn_ext_line_color_source       = 34,
    fn_dim_line_color_source       = 35,
    fn_arrow_color_source          = 36,
    fn_text_color_source           = 37,
    fn_ext_line_color              = 38,
    fn_dim_line_color              = 39,
    fn_arrow_color                 = 40,
    fn_text_color                  = 41,
    fn_ext_line_plot_color_source  = 42,
    fn_dim_line_plot_color_source  = 43,
    fn_arrow_plot_color_source     = 44,
    fn_text_plot_color_source      = 45,
    fn_ext_line_plot_color         = 46,
    fn_dim_line_plot_color         = 47,
    fn_arrow_plot_color            = 48,
    fn_text_plot_color             = 49,
    fn_ext_line_plot_weight_source = 50,
    fn_dim_line_plot_weight_source = 51,
    fn_ext_line_plot_weight_mm     = 52,
    fn_dim_line_plot_weight_mm     = 53,
    fn_tolerance_style             = 54,
    fn_tolerance_resolution        = 55,
    fn_tolerance_upper_value       = 56,
    fn_tolerance_lower_value       = 57,
    fn_tolerance_height_scale      = 58,
    fn_baseline_spacing            = 59,

  
  
    fn_draw_mask                   = 60,
    fn_mask_color_source           = 61,
    fn_mask_color                  = 62,
    fn_mask_border                 = 63,

  
  
    fn_dimscale                    = 64,
    fn_dimscale_source             = 65,

    
    
    
    fn_really_last                 = 0xFFFF
  };

  
  
  __declspec(deprecated) void InvalidateField( eField field);
  __declspec(deprecated) void InvalidateAllFields();
  __declspec(deprecated) void ValidateField( eField field);
  __declspec(deprecated) bool IsFieldValid( eField) const;

  
  double DimExtension() const;
  void SetDimExtension( const double);

  
  

  
  
  bool IsFieldOverride( eField field_id) const;
  
  
  void SetFieldOverride(  ON_DimStyle::eField field_id, bool bOverride);

  
  bool HasOverrides() const;

  
  
  
  
  bool OverrideFields( const ON_DimStyle& source, const ON_DimStyle& parent);

  
  
  
  
  
  bool InheritFields( const ON_DimStyle& parent);

  
  bool IsChildDimstyle() const;

  
  
  bool IsChildOf( const ON_UUID& parent_uuid) const;
  bool IsChildOf( ON_UUID& parent_uuid) const; 

  ON_UUID ParentId() const;

  
  void SetParentId( ON_UUID parent_uuid);
  __declspec(deprecated) void SetParent( ON_UUID& parent_uuid); 

  
  
  
  
  
  
  
  int  ToleranceStyle() const;
  int  ToleranceResolution() const;
  double ToleranceUpperValue() const;
  double ToleranceLowerValue() const;
  double ToleranceHeightScale() const;

  double BaselineSpacing() const;

  void SetToleranceStyle( int style);
  void SetToleranceResolution( int resolution);
  void SetToleranceUpperValue( double upper_value);
  void SetToleranceLowerValue( double lower_value);
  void SetToleranceHeightScale( double scale);
  
  void SetBaselineSpacing( double spacing = false);

    
  bool DrawTextMask() const;
  void SetDrawTextMask(bool bDraw);

  
  
  
  int MaskColorSource() const;
  void SetMaskColorSource(int source);

  ON_Color MaskColor() const;  
                               
  void SetMaskColor(ON_Color color);

  
  void SetDimScaleSource(int source);
  int DimScaleSource() const;          
  void SetDimScale(double scale);
  double DimScale() const;

  
  
  
  double MaskOffsetFactor() const;

  void Scale( double scale);

  
  
  void SetSourceDimstyle(ON_UUID source_uuid);
  ON_UUID SourceDimstyle() const;

  
  static int      DefaultToleranceStyle();
  static int      DefaultToleranceResolution();
  static double   DefaultToleranceUpperValue();
  static double   DefaultToleranceLowerValue();
  static double   DefaultToleranceHeightScale();
  static double   DefaultBaselineSpacing();
  static bool     DefaultDrawTextMask(); 
  static int      DefaultMaskColorSource(); 
  static ON_Color DefaultMaskColor(); 
  static double   DefaultDimScale(); 
  static int      DefaultDimScaleSource(); 

  bool CompareFields(const ON_DimStyle& other) const;

public:
  ON_wString m_dimstyle_name;   
  int m_dimstyle_index;         
  ON_UUID m_dimstyle_id;

  double m_extextension; 
  double m_extoffset;    
  double m_arrowsize;  
  double m_centermark; 
  double m_textgap;    
  double m_textheight; 
  int m_textalign;     
  int m_arrowtype;     
  int m_angularunits;  
  int m_lengthformat;  
  int m_angleformat;   
  int m_angleresolution;    
  int m_lengthresolution;   
                            
  int m_fontindex;     

  
  double m_lengthfactor;  
  bool m_bAlternate;      
                          
  double m_alternate_lengthfactor;  
  int m_alternate_lengthformat;     
  int m_alternate_lengthresolution; 
                                    
  int m_alternate_angleformat;      
  int m_alternate_angleresolution;  
  ON_wString m_prefix;              
  ON_wString m_suffix;              
  ON_wString m_alternate_prefix;    
  ON_wString m_alternate_suffix;    

private:
  unsigned int m_valid;        
public:

  
  double m_dimextension;  

  
  double m_leaderarrowsize;       
  int    m_leaderarrowtype;       
  bool   m_bSuppressExtension1;   
  bool   m_bSuppressExtension2;   


  
  
  class ON_DimStyleExtra* DimStyleExtension(); 
  const class ON_DimStyleExtra* DimStyleExtension() const; 
};











































































































































































































class  ON_ObjRefEvaluationParameter
{
public:
  ON_ObjRefEvaluationParameter();
  ~ON_ObjRefEvaluationParameter();

  void Default();

  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );


  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  int m_t_type;
private:
  int m_reserved; 
public:
  double m_t[4];
  ON_Interval m_s[3]; 
  ON_COMPONENT_INDEX m_t_ci; 
                             
};

class  ON_ObjRef_IRefID
{
public:
  ON_ObjRef_IRefID();
  ~ON_ObjRef_IRefID();

  bool Write(ON_BinaryArchive&) const;
  bool Read(ON_BinaryArchive&);

  void Default();

  
  
  ON_UUID  m_iref_uuid;

  
  ON_Xform m_iref_xform;

  
  
  
  ON_UUID  m_idef_uuid;

  
  
  
  
  
  int m_idef_geometry_index;

  
  
  
  
  
  
  
  ON_Xform m_geometry_xform;

  
  
  
  
  
  
  
  ON_COMPONENT_INDEX m_component_index;

  
  
  
  
  
  
  ON_ObjRefEvaluationParameter m_evp;
};











class  ON_ObjRef
{
public:
  ON_ObjRef();
  ON_ObjRef(const ON_ObjRef& src);
  ON_ObjRef& operator=(const ON_ObjRef& src);
  ~ON_ObjRef();

  void Destroy();
  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );

  
  
  
  ON_UUID m_uuid;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  const ON_Geometry* m_geometry;
  const ON_Geometry* m_parent_geometry;
  ON_COMPONENT_INDEX m_component_index;
  int m_geometry_type;

  
  
  
  
  
  
  
  unsigned int m_runtime_sn;

  
  
  
  ON_3dPoint m_point;

  
  
  ON::osnap_mode m_osnap_mode;

  
  
  
  ON_ObjRefEvaluationParameter m_evp;

  
  
  
  
  
  ON_SimpleArray<ON_ObjRef_IRefID> m__iref;

  







  void DecrementProxyReferenceCount();

  




  void SetProxy( 
          ON_Object* proxy1, 
          ON_Object* proxy2, 
          bool bCountReferences 
          );

  bool SetParentIRef( const ON_InstanceRef& iref,
                      ON_UUID iref_id,
                      int idef_geometry_index
                      );

  




  int ProxyReferenceCount() const;

  





  const ON_Object* ProxyObject(int proxy_object_index) const;

  








  void RemapObjectId( const ON_SimpleArray<ON_UuidPair>& uuid_remap );

private:
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ON_Object* m__proxy1;
  ON_Object* m__proxy2;
  int* m__proxy_ref_count;
  
};





































class ON_BumpFunction
{
public:
  ON_BumpFunction();

  bool operator==(const ON_BumpFunction& other) const;
  bool operator<(const ON_BumpFunction& other) const;
  bool operator>(const ON_BumpFunction& other) const;

  double ValueAt(
    double s,
    double t
    ) const;

  void Evaluate(
    double s,
    double t,
    int der_count,
    double* value
    ) const;

  ON_2dPoint m_point; 
  int m_type[2];      

  
  double m_x0;
  double m_y0;
  double m_sx[2];      
  double m_sy[2];      
  double m_a;         

  void EvaluateHelperLinearBump(double t, double dt, int der_count, double* value) const;
  void EvaluateHelperQuinticBump(double t, double dt, int der_count, double* value) const;
};


class ON_OffsetSurfaceValue
{
public:
  double m_s;
  double m_t;
  double m_distance;
  double m_radius;
  int m_index;
};














class  ON_OffsetSurfaceFunction
{
public:
  ON_OffsetSurfaceFunction();
  ~ON_OffsetSurfaceFunction();

  









  bool SetBaseSurface(
    const ON_Surface* srf 
    );

  



  const ON_Surface* BaseSurface() const;

  
















  bool SetSideTangency(
    int side,
    bool bEnable
    );

  









  bool SideTangency(int side) const;

  










  bool SetOffsetPoint(
    double s,
    double t,
    double distance,
    double radius = 0.0
    );

  







  bool SetPoint( 
    int index, 
    double s, 
    double t
    );


  






  bool SetDistance( 
    int index, 
    double distance);


  



  int OffsetPointCount() const;

  





  ON_2dPoint OffsetSurfaceParameter(int i) const;

  





  double OffsetDistance(int i) const;

  








  double DistanceAt(
    double s,
    double t
    ) const;

  












  bool EvaluateDistance(
        double s,
        double t,
        int num_der,
        double* value
        ) const;

  








  ON_3dPoint PointAt(
    double s,
    double t
    ) const;

  



  void Destroy();

private:
  friend class ON_OffsetSurface;
  bool Initialize();

  const ON_Surface* m_srf;

  ON_Interval m_domain[2];

  bool m_bZeroSideDerivative[4];   

  ON_SimpleArray<ON_OffsetSurfaceValue> m_offset_value;


  ON_SimpleArray<class ON_BumpFunction> m_bumps;

  bool m_bValid;
};

class  ON_OffsetSurface : public ON_SurfaceProxy
{
  
  
  
  
  
  
  
  
  protected: static void* m_s_ON_OffsetSurface_ptr; public: static const ON_ClassId m_ON_OffsetSurface_class_id; static ON_OffsetSurface * Cast( ON_Object* ); static const ON_OffsetSurface * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_OffsetSurface( const ON_Object*, ON_Object* ); public: ON_OffsetSurface * Duplicate() const;;
public:
  ON_OffsetSurface();
  ~ON_OffsetSurface();
  ON_OffsetSurface( const ON_OffsetSurface& src);
  ON_OffsetSurface& operator=(const ON_OffsetSurface& src);

  ON_BOOL32 GetBBox(
         double* bbox_min,
         double* bbox_max,
         int bGrowBox = false
         ) const;

  ON_BOOL32 Evaluate( 
         double, double, 
         int,            
         int,            
         double*,        
         int = 0,        
                         
                         
                         
                         
                         
         int* = 0        
                         
         ) const;

  










  bool SetBaseSurface(
    const ON_Surface* base_surface
    );

  













  bool SetBaseSurface(
        ON_Surface* base_surface, 
        bool bManage
        );

  



  const ON_Surface* BaseSurface() const;

  ON_OffsetSurfaceFunction& OffsetFunction();
  const ON_OffsetSurfaceFunction& OffsetFunction() const;

private:
  
  ON_Surface* m__pSrf;
  ON_OffsetSurfaceFunction m_offset_function;
};
























class  ON_DetailView : public ON_Geometry
{
  protected: static void* m_s_ON_DetailView_ptr; public: static const ON_ClassId m_ON_DetailView_class_id; static ON_DetailView * Cast( ON_Object* ); static const ON_DetailView * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_DetailView( const ON_Object*, ON_Object* ); public: ON_DetailView * Duplicate() const;;

public:
  ON_DetailView();
  ~ON_DetailView();

  
  

  
  
  
  
  void MemoryRelocate();

  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;

  void Dump( ON_TextLog& ) const;

  unsigned int SizeOf() const;

  ON_BOOL32 Write(
         ON_BinaryArchive& binary_archive
       ) const;

  ON_BOOL32 Read(
         ON_BinaryArchive& binary_archive
       );

  ON::object_type ObjectType() const; 

  
  
  
  
  
  int Dimension() const;

  ON_BOOL32 GetBBox(
         double* boxmin,
         double* boxmax,
         int bGrowBox = false
         ) const;

	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  ON_BOOL32 Transform( const ON_Xform& xform );

  
  
  
  
  
  
  double m_page_per_model_ratio;

  
  
  
  ON_3dmView m_view;

  
  
  ON_NurbsCurve m_boundary;
};







































class  ON_SerialNumberMap
{
public:
  ON_SerialNumberMap( void* pool = 0 );
  ~ON_SerialNumberMap();

  struct MAP_VALUE
  {
    ON__UINT32 m_u_type;
    union
    {
      void* ptr;
      unsigned int ui;
      int i;
    } m_u;
  };

  struct SN_ELEMENT
  {
    
    
    
    
    ON_UUID m_id;
    struct SN_ELEMENT* m_next; 

    
    
    
    
    unsigned int m_sn;

    
    
    
    
    
    
    
    unsigned char m_sn_active; 
    unsigned char m_id_active; 
    unsigned char m_reserved1;
    unsigned char m_reserved2;

    
    
    
    
    
    
    
    
    
    struct MAP_VALUE m_value;

    void Dump(ON_TextLog&) const;
  };

  



  size_t ActiveSerialNumberCount() const;

  




  size_t ActiveIdCount() const;

  















  struct SN_ELEMENT* FirstElement() const;

  















  struct SN_ELEMENT* LastElement() const;

  

















  struct SN_ELEMENT* FindSerialNumber(unsigned int sn) const;

  

















  struct SN_ELEMENT* FindId(ON_UUID) const;

  



























  struct SN_ELEMENT* AddSerialNumber(unsigned int sn);

  
































  struct SN_ELEMENT* AddSerialNumberAndId(unsigned int sn, ON_UUID id);

  


















  struct SN_ELEMENT* RemoveSerialNumberAndId(unsigned int sn);

  






















  struct SN_ELEMENT* RemoveId(unsigned int sn, ON_UUID id);

  





















  size_t GetElements(
          unsigned int sn0,
          unsigned int sn1, 
          size_t max_count,
          ON_SimpleArray<SN_ELEMENT>& elements
          ) const;

  



  void EmptyList();

  








  bool IsValid(ON_TextLog* textlog) const;

  void Dump(ON_TextLog& text_log) const;

private:
  
  
  ON_SerialNumberMap(const ON_SerialNumberMap&);
  ON_SerialNumberMap& operator=(const ON_SerialNumberMap&);

  enum
  {
    
    
    
    SN_BLOCK_CAPACITY = 8192,
    SN_PURGE_RATIO = 16,
    ID_HASH_TABLE_COUNT = 8192
  };

  struct SN_BLOCK
  {
    size_t m_count;  
    size_t m_purged; 
    unsigned int m_sorted; 
    unsigned int m_sn0; 
    unsigned int m_sn1; 
    struct SN_ELEMENT m_sn[SN_BLOCK_CAPACITY];
    void EmptyBlock();
    void CullBlockHelper();
    void SortBlockHelper();
    bool IsValidBlock(ON_TextLog* textlog,struct SN_ELEMENT*const* hash_table,size_t* active_id_count) const;
    struct SN_ELEMENT* BinarySearchBlockHelper(unsigned int sn);
    static int CompareMaxSN(const void*,const void*);
    size_t ActiveElementEstimate(unsigned int sn0, unsigned int sn1) const;
    void Dump(ON_TextLog&) const;
  };

  unsigned int m_maxsn; 
  unsigned int m_reserved;

  
  void* m_pool;

  
  size_t m_sn_count;   
  size_t m_sn_purged;  

  
  bool m_bHashTableIsValid; 
  size_t m_active_id_count; 
  ON_UUID m_inactive_id;    
                            
                            
                            
                            
                            
                            

  
  
  
  
  
  
  struct SN_BLOCK** m_snblk_list;
  size_t m_snblk_list_capacity; 
  size_t m_snblk_list_count;    

  
  
  
  
  
  struct SN_BLOCK* m_e_blk;

  
  
  
  SN_BLOCK m_sn_block0;

  struct SN_ELEMENT* FindElementHelper(unsigned int sn);
  void UpdateMaxSNHelper();
  void GarbageCollectHelper();
  size_t GarbageCollectMoveHelper(SN_BLOCK* dst,SN_BLOCK* src);

  
  
  
  
  struct SN_ELEMENT* m_hash_table[ID_HASH_TABLE_COUNT];
  size_t HashIndex(const ON_UUID*) const;
  void InvalidateHashTableHelper(); 
  bool RemoveBlockFromHashTableHelper(const struct SN_BLOCK* blk);
  void AddBlockToHashTableHelper(struct SN_BLOCK* blk);
  void BuildHashTableHelper();      
};


































class  ON_CurveProxyHistory
{
public:
  
  
  ON_CurveProxyHistory();
  ~ON_CurveProxyHistory();

  ON_ObjRef m_curve_ref;                
  bool      m_bReversed;                
  ON_Interval m_full_real_curve_domain; 
  ON_Interval m_sub_real_curve_domain;  
  ON_Interval m_proxy_curve_domain;     

  void Destroy();
  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );
  void Dump( ON_TextLog& ) const;

private:
  ON__UINT8 m_reserved[64];
};











class  ON_PolyEdgeHistory
{
public:
  
  
  ON_PolyEdgeHistory();
  ~ON_PolyEdgeHistory();

  void Destroy();
  bool Write( ON_BinaryArchive& ) const;
  bool Read( ON_BinaryArchive& );
  void Dump( ON_TextLog& ) const;

  ON_ClassArray< ON_CurveProxyHistory > m_segment;
  ON_SimpleArray<double> m_t;
  int m_evaluation_mode;
private:
  ON__UINT8 m_reserved[64];
};

class  ON_HistoryRecord : public ON_Object
{
  protected: static void* m_s_ON_HistoryRecord_ptr; public: static const ON_ClassId m_ON_HistoryRecord_class_id; static ON_HistoryRecord * Cast( ON_Object* ); static const ON_HistoryRecord * Cast( const ON_Object* ); virtual const ON_ClassId* ClassId() const; private: virtual ON_Object* DuplicateObject() const; static bool CopyON_HistoryRecord( const ON_Object*, ON_Object* ); public: ON_HistoryRecord * Duplicate() const;;
public:
  ON_HistoryRecord();
  ~ON_HistoryRecord();

  
  
  ON_HistoryRecord(const ON_HistoryRecord& src);
  ON_HistoryRecord& operator=(const ON_HistoryRecord& src);

  
  ON_BOOL32 IsValid( ON_TextLog* text_log = 0 ) const;
  
  void Dump( ON_TextLog& ) const;
  
  ON_BOOL32 Write(ON_BinaryArchive& binary_archive) const;
  
  ON_BOOL32 Read(ON_BinaryArchive& binary_archive);
  
  ON_UUID ModelObjectId() const;

  
  
  void Destroy();

  void DestroyValue( int value_id );

  































  bool SetBoolValue(     int value_id, bool b);
  bool SetIntValue(      int value_id, int i);
  bool SetDoubleValue(   int value_id, double x);
  bool SetPointValue(    int value_id, ON_3dPoint p);
  bool SetVectorValue(   int value_id, ON_3dVector v);
  bool SetXformValue(    int value_id, ON_Xform xform);
  bool SetColorValue(    int value_id, ON_Color c);
  bool SetObjRefValue(   int value_id, const ON_ObjRef& oref);
  bool SetPointOnObjectValue( int value_id, const ON_ObjRef& oref, ON_3dPoint point );
  bool SetUuidValue(     int value_id, ON_UUID uuid );
  bool SetStringValue(   int value_id, const wchar_t* s );
  bool SetGeometryValue( int value_id, ON_Geometry* g);
  bool SetPolyEdgeValue( int value_id, const ON_PolyEdgeHistory& polyedge );

  































  bool SetBoolValues(     int value_id, int count, const bool* b);
  bool SetIntValues(      int value_id, int count, const int* i);
  bool SetDoubleValues(   int value_id, int count, const double* x);
  bool SetPointValues(    int value_id, int count, const ON_3dPoint* P);
  bool SetVectorValues(   int value_id, int count, const ON_3dVector* V);
  bool SetXformValues(    int value_id, int count, const ON_Xform* xform);
  bool SetColorValues(    int value_id, int count, const ON_Color* c);
  bool SetObjRefValues(   int value_id, int count, const ON_ObjRef* oref);
  bool SetUuidValues(     int value_id, int count, const ON_UUID* u );
  bool SetStringValues(   int value_id, int count, const wchar_t* const* s );
  bool SetStringValues(   int value_id, const ON_ClassArray<ON_wString>& s );
  bool SetGeometryValues( int value_id, const ON_SimpleArray<ON_Geometry*> a);
  bool SetPolyEdgeValues( int value_id, int count, const ON_PolyEdgeHistory* a );

  



  bool GetStringValue( int value_id, ON_wString& str ) const;
  bool GetBoolValue( int value_id, bool* b ) const;
  bool GetIntValue( int value_id, int* i ) const;
  bool GetDoubleValue( int value_id, double* number ) const;
  bool GetPointValue( int value_id, ON_3dPoint& point ) const;
  bool GetVectorValue( int value_id, ON_3dVector& point ) const;
  bool GetXformValue( int value_id, ON_Xform& point ) const;
  bool GetColorValue( int value_id, ON_Color* color ) const;
  bool GetObjRefValue( int value_id, ON_ObjRef& oref ) const;
  bool GetPointOnObjectValue( int value_id, ON_ObjRef& oref ) const;
  bool GetCurveValue( int value_id, const ON_Curve*& ) const;
  bool GetSurfaceValue( int value_id, const ON_Surface*& ) const;
  bool GetBrepValue( int value_id, const ON_Brep*& ) const;
  bool GetMeshValue( int value_id, const ON_Mesh*& ) const;
  bool GetGeometryValue( int value_id, const ON_Geometry*& ) const;
  bool GetUuidValue( int value_id, ON_UUID* uuid ) const;
  bool GetPolyEdgeValue( int value_id, const ON_PolyEdgeHistory*& polyedge ) const;

  int GetStringValues( int value_id, ON_ClassArray<ON_wString>& string ) const;
  int GetBoolValues( int value_id, ON_SimpleArray<bool>& ) const;
  int GetIntValues( int value_id, ON_SimpleArray<int>& ) const;
  int GetDoubleValues( int value_id, ON_SimpleArray<double>& ) const;
  int GetPointValues( int value_id, ON_SimpleArray<ON_3dPoint>& ) const;
  int GetVectorValues( int value_id, ON_SimpleArray<ON_3dVector>& ) const;
  int GetXformValues( int value_id, ON_SimpleArray<ON_Xform>& ) const;
  int GetColorValues( int value_id, ON_SimpleArray<ON_Color>& ) const;
  int GetObjRefValues( int value_id, ON_ClassArray<ON_ObjRef>& objects ) const;
  int GetGeometryValues( int value_id, ON_SimpleArray<const ON_Geometry*>& ) const;
  int GetUuidValues( int value_id, ON_SimpleArray<ON_UUID>& ) const;
  int GetPolyEdgeValues( int value_id, ON_SimpleArray<const ON_PolyEdgeHistory*>& ) const;

  









  bool IsAntecedent( ON_UUID object_uuid ) const;


  







  int ValueReport( ON_TextLog& text_log ) const;

  
  
  
  ON_UUID m_command_id;

  
  
  
  
  int m_version;

  enum RECORD_TYPE
  {
    history_parameters = 0, 
    feature_parameters = 1, 
    force_32bit_record_type = 0xFFFFFFFF
  };

  RECORD_TYPE m_record_type;

  







  static
  RECORD_TYPE RecordType(int i);

  
  
  ON_UUID m_record_id;

  
  
  
  ON_UuidList m_antecedents;

  
  
  ON_UuidList m_descendants;

  
  
  ON_SimpleArray< class ON_Value* > m_value;

  








  void RemapObjectIds( const ON_SimpleArray<ON_UuidPair>& uuid_remap );

private:
  bool m_bValuesSorted;
  ON_Value* FindValueHelper( int, int, bool ) const;
  void CopyHelper( const ON_HistoryRecord&);
};
























class  ON_AerialPhotoImageFrustum
{
public:
  ON_AerialPhotoImageFrustum();

  bool IsSet() const;

  bool HeightIsSet() const;
  bool CornersAreSet() const;
  bool UnitSystemIsSet() const;

  void Unset();

  
  
  ON_UnitSystem m_unit_system;

  
  
  
  double m_height;

  
  
  
  
  
  
  
  
  ON_2dPoint m_corners[4];
};

class  ON_AerialPhotoCameraPosition
{
public:
  ON_AerialPhotoCameraPosition();

  



  bool IsSet() const;

  void Unset();

  
  
  
  
  bool UnitSystemIsSet() const;
  bool SetUnitSystem( ON::unit_system unit_system );
  bool SetUnitSystem ( ON_UnitSystem unit_system );
  ON_UnitSystem UnitSystem() const;
  bool GetUnitSystem( ON_UnitSystem& unit_system ) const;
  void UnsetUnitSystem();


  
  
  
  
  bool LocationIsSet() const;

  bool SetLocation( 
    ON_3dPoint camera_location 
    );

  bool GetLocation(
    ON_3dPoint& camera_location
    ) const;

  ON_3dPoint Location() const;

  void UnsetLocation();

  
  
  
  
  bool OrientationIsSet() const;    

  bool GetOrientationAnglesDegrees(
    double* omega_degrees, 
    double* phi_degrees, 
    double* kappa_degrees
    ) const;

  bool GetOrientationAnglesRadians(
    double* omega_radians, 
    double* phi_radians, 
    double* kappa_radians
    ) const;

  











  bool GetOrientationFrame(
    ON_3dVector& camera_X,
    ON_3dVector& camera_Y,
    ON_3dVector& camera_Z
    ) const;

  bool GetOrientationUp(
    ON_3dVector& camera_up
    ) const;

  bool GetOrientationRight(
    ON_3dVector& camera_right
    ) const;

  bool GetOrientationDirection(
    ON_3dVector& camera_direction
    ) const;


  






  bool GetOrientationRotation(
    ON_Xform& camera_rotaion 
    ) const;

  ON_Xform OrientationRotation() const;

  






















  bool SetOrientationAnglesRadians(
    double omega_radians, 
    double phi_radians, 
    double kappa_radians
    );

  






















  bool SetOrientationAnglesDegrees(
    double omega_degrees, 
    double phi_degrees, 
    double kappa_degrees
    );

  






















  bool SetOrientationVectors(
    ON_3dVector camera_up,
    ON_3dVector camera_right,
    ON_3dVector camera_direction
    );

  





















  bool SetOrientationRotation(
    ON_Xform camera_rotation
    );

  void UnsetOrientation();
  
private:
  unsigned char m_status;
  unsigned char m_reserved1[3];
  unsigned int m_reserved2;

  ON_UnitSystem m_unit_system;

  ON_3dPoint m_location;

  ON_3dVector m_orientation_angles_degrees;
  ON_3dVector m_orientation_angles_radians;

  ON_3dVector m_orientation_direction;
  ON_3dVector m_orientation_up;
  ON_3dVector m_orientation_right;

  ON_Xform m_orientation_rotation;
};




class  ON_AerialPhotoImage
{
public:
  ON_AerialPhotoImage();

  void Unset();

  bool NameIsSet() const;

  void SetName(
    const wchar_t* name
    );

  void GetName(
    ON_wString& name
    ) const;

  void UnsetName();

  void SetId( ON_UUID image_id );

  ON_UUID Id() const;

  
  
  
  
  bool CameraPositionIsSet() const;
  bool CameraLocationIsSet() const;
  bool CameraOrientationIsSet() const;

  void SetCameraPosition(
    ON_AerialPhotoCameraPosition camera_position
    );

  void GetCameraPosition(
    ON_AerialPhotoCameraPosition& camera_position
    ) const;

  void UnsetCameraPosition();
  
  
  
  
  
  bool ImageFrustumIsSet() const;

  void SetImageFrustum(
    ON_AerialPhotoImageFrustum image_frustum
    );

  void GetImageFrustum(
    ON_AerialPhotoImageFrustum& image_frustum
    ) const;

  void UnsetImageFrustum();

  
  
  
  
  bool ImageFileNameIsSet() const;

  void SetImageFileName(
    const wchar_t* image_file_name
    );

  void GetImageFileName(
    ON_wString& image_file_name
    ) const;

  void UnsetImageFileName();

  bool ImageSizeIsSet() const;

  bool SetImageSize(
    int width_pixels,
    int height_pixels
    );

  bool GetImageSize(
    int* width_pixels,
    int* height_pixels
    ) const;

  void UnsetImageSize();

  
  
  
  
  bool GetViewProjection( 
    ON_BoundingBox target_bbox,
    ON_Viewport& viewport
    ) const;
  
private:
  ON_wString m_name;

  ON_UUID m_id;

  ON_AerialPhotoCameraPosition m_camera_position;

  ON_AerialPhotoImageFrustum m_image_frustum;

  ON_wString m_image_file_name;
  
  int m_image_width_pixels;
  int m_image_height_pixels;
};





























class  ONX_Model_UserData
{
public:
















  ONX_Model_UserData();
  ~ONX_Model_UserData();
  ONX_Model_UserData(const ONX_Model_UserData&);
  ONX_Model_UserData& operator=(const ONX_Model_UserData&);

  void Dump( ON_TextLog& ) const;

  ON_UUID  m_uuid;
  ON_3dmGoo m_goo;

private:
  void Destroy();
  unsigned int* m_ref_count; 

public:
  int m_usertable_3dm_version ;
  int m_usertable_opennurbs_version;
};





class  ONX_Model_Object
{
public:
















  ONX_Model_Object();
  ~ONX_Model_Object();
  ONX_Model_Object(const ONX_Model_Object&);
  ONX_Model_Object& operator=(const ONX_Model_Object&);

  void Dump( ON_TextLog& ) const;

  
  
  
  bool m_bDeleteObject;
  const ON_Object* m_object;
  ON_3dmObjectAttributes m_attributes;

private:
  void Destroy();
  unsigned int* m_ref_count; 
};





class  ONX_Model_RenderLight
{
public:
















  ONX_Model_RenderLight();
  ~ONX_Model_RenderLight();
  ONX_Model_RenderLight(const ONX_Model_RenderLight&);
  ONX_Model_RenderLight& operator=(const ONX_Model_RenderLight&);

  ON_Light m_light;
  ON_3dmObjectAttributes m_attributes;
};







































class  ONX_Model
{
public:
















  ONX_Model();
  virtual ~ONX_Model();

  



  void Destroy();

  











































  bool Read( 
         ON_BinaryArchive& archive,
         ON_TextLog* error_log = 0
         );

  bool Read( 
         const char* filename,
         ON_TextLog* error_log = 0
         );

  bool Read( 
         const wchar_t* filename,
         ON_TextLog* error_log = 0
         );

  
















































































  bool Write( 
         ON_BinaryArchive& archive,
         int version = 0,
         const char* sStartSectionComment = 0,
         ON_TextLog* error_log = 0
         );

  bool Write( 
         const char* filename,
         int version = 0,
         const char* sStartSectionComment = 0,
         ON_TextLog* error_log = 0
         );

  bool Write( 
         const wchar_t* filename,
         int version = 0,
         const char* sStartSectionComment = 0,
         ON_TextLog* error_log = 0
         );

  









  bool IsValid( ON_TextLog* text_log = 0 ) const;

  







  virtual
  void Polish();

  



































  virtual
  int Audit( 
        bool bAttemptRepair,
        int* repair_count,
        ON_TextLog* text_log,
        ON_SimpleArray<int>* warnings
        );

  
  
  
  

  
  int m_3dm_file_version;
  int m_3dm_opennurbs_version;
  ON_String m_sStartSectionComments;

  
  
  ON_3dmProperties m_properties;

  
  
  ON_3dmSettings   m_settings;

  
  ON_SimpleArray<ON_Bitmap*>            m_bitmap_table;
  ON_ObjectArray<ON_TextureMapping>     m_mapping_table;
  ON_ObjectArray<ON_Material>           m_material_table;
  ON_ObjectArray<ON_Linetype>           m_linetype_table;
  ON_ObjectArray<ON_Layer>              m_layer_table;
  ON_ObjectArray<ON_Group>              m_group_table;
  ON_ObjectArray<ON_Font>               m_font_table;
  ON_ObjectArray<ON_DimStyle>           m_dimstyle_table;
  ON_ClassArray<ONX_Model_RenderLight>  m_light_table;
  ON_ObjectArray<ON_HatchPattern>       m_hatch_pattern_table;
  ON_ObjectArray<ON_InstanceDefinition> m_idef_table;
  ON_ClassArray<ONX_Model_Object>       m_object_table;
  ON_SimpleArray<ON_HistoryRecord*>     m_history_record_table;
  ON_ClassArray<ONX_Model_UserData>     m_userdata_table;

  
  ON_UuidIndexList m_mapping_id_index;
  ON_UuidIndexList m_material_id_index;
  ON_UuidIndexList m_object_id_index;
  ON_UuidIndexList m_idef_id_index;

  
  size_t m_file_length;

  
  
  int m_crc_error_count;

  
  
  
  

  



  ON_BoundingBox BoundingBox() const;

  






  void GetRenderMaterial( 
        const ON_3dmObjectAttributes& attributes,
        ON_Material& material 
        ) const;

  






  void GetRenderMaterial( 
        int object_index,
        ON_Material& material 
        ) const;

  






  void GetLinetype( 
        const ON_3dmObjectAttributes& attributes,
        ON_Linetype& linetype 
        ) const;

  






  void GetLinetype(
        int object_index,
        ON_Linetype& linetype 
        ) const;

  







  ON_Color WireframeColor(const ON_3dmObjectAttributes& attributes) const;

  







  ON_Color WireframeColor(int object_index) const;

  







  virtual
  int ObjectIndex( 
    ON_UUID object_uuid 
    ) const;

  




















  virtual
  int IDefIndex( 
    ON_UUID idef_uuid 
    ) const;

  







  virtual
  int IDefIndex( 
    const wchar_t* idef_name
    ) const;

  



  virtual
  void GetUnusedIDefName( ON_wString& idef_name ) const;

  














  virtual
  int UsesIDef( 
        const ON_InstanceRef& iref,
        ON_UUID idef_uuid
        ) const;

  




















  virtual
  int LayerIndex( 
    const wchar_t* layer_name
    ) const;

  



  virtual
  void GetUnusedLayerName( ON_wString& layer_name ) const;

  
  
  
  

  









  bool SetDocumentUserString( 
    const wchar_t* key, 
    const wchar_t* string_value 
    );

  








  bool GetDocumentUserString( 
    const wchar_t* key, 
    ON_wString& string_value 
    ) const;

  








  int GetDocumentUserStrings( ON_ClassArray<ON_UserString>& user_strings ) const;

  
  
  
  


  
  
  
  

  
  void Dump( ON_TextLog& ) const;
  
  
  void DumpSummary( ON_TextLog& ) const;

  
  void DumpBitmapTable( ON_TextLog& ) const; 

  
  void DumpTextureMappingTable( ON_TextLog& ) const; 

  
  void DumpMaterialTable( ON_TextLog& ) const; 

  
  void DumpLinetypeTable( ON_TextLog& ) const; 

  
  void DumpLayerTable( ON_TextLog& ) const;

  
  void DumpLightTable( ON_TextLog& ) const;

  
  void DumpGroupTable( ON_TextLog& ) const;

  
  void DumpFontTable( ON_TextLog& ) const;

  
  void DumpDimStyleTable( ON_TextLog& ) const;

  
  void DumpHatchPatternTable( ON_TextLog& ) const;

  
  void DumpIDefTable( ON_TextLog& ) const;

  
  void DumpObjectTable( ON_TextLog& ) const;

  
  void DumpHistoryRecordTable( ON_TextLog& ) const;

  
  void DumpUserDataTable( ON_TextLog& ) const;

  
  
  
  

  




  void DestroyCache();

  
  
  
  
  static bool IsRDKDocumentInformation(const ONX_Model_UserData& docud);
  static bool GetRDKDocumentInformation(const ONX_Model_UserData& docud,ON_wString& rdk_xml_document_data);

  static bool IsRDKObjectInformation(const ON_UserData& objectud);
  static bool GetRDKObjectInformation(const ON_Object& object,ON_wString& rdk_xml_object_data);
  
  
  
  


private:
  
  ONX_Model(const ONX_Model&);
  ONX_Model& operator=(const ONX_Model&);

private:

  
  ON_BoundingBox m__object_table_bbox;
};











bool ONX_IsValidName( 
          const wchar_t* name 
          );






































































































































  

































































#pragma once










 


 
namespace std {
using :: clock_t; using :: size_t;
using :: time_t; using :: tm;
using :: asctime; using :: clock; using :: ctime;
using :: difftime; using :: gmtime; using :: localtime;
using :: mktime; using :: strftime; using :: time;
}
 
























  
  
  
    
  
  








#pragma once





__pragma(pack(push, 8)) extern "C" {








typedef struct
{
    intmax_t quot;
    intmax_t rem;
} _Lldiv_t;

typedef _Lldiv_t imaxdiv_t;








 
__declspec(dllimport) intmax_t __cdecl imaxabs(
      intmax_t _Number
    );

 
__declspec(dllimport) imaxdiv_t __cdecl imaxdiv(
      intmax_t _Numerator,
      intmax_t _Denominator
    );

__declspec(dllimport) intmax_t __cdecl strtoimax(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

__declspec(dllimport) intmax_t __cdecl _strtoimax_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

__declspec(dllimport) uintmax_t __cdecl strtoumax(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

__declspec(dllimport) uintmax_t __cdecl _strtoumax_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

__declspec(dllimport) intmax_t __cdecl wcstoimax(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

__declspec(dllimport) intmax_t __cdecl _wcstoimax_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

__declspec(dllimport) uintmax_t __cdecl wcstoumax(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

__declspec(dllimport) uintmax_t __cdecl _wcstoumax_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );






















    


















    


















    


















    


















    


















    

























    


















    


















    


















    


















    






} __pragma(pack(pop))





































  
  









  








  
















  
  























































































































 







typedef int           Standard_Integer;
typedef double        Standard_Real;
typedef bool          Standard_Boolean;
typedef float         Standard_ShortReal;
typedef char          Standard_Character;
typedef unsigned char Standard_Byte;
typedef void*         Standard_Address;
typedef size_t        Standard_Size;
typedef std::time_t   Standard_Time;


typedef char          Standard_Utf8Char;     
typedef unsigned char Standard_Utf8UChar;    






typedef char16_t      Standard_ExtCharacter;
typedef char16_t      Standard_Utf16Char;    
typedef char32_t      Standard_Utf32Char;    

typedef wchar_t       Standard_WideChar;     


typedef const Standard_Character*    Standard_CString;
typedef const Standard_ExtCharacter* Standard_ExtString;





















































inline  Standard_Integer Abs (const Standard_Integer Value)
{
  return Value >= 0 ? Value : -Value;
}




inline Standard_Integer HashCode (const Standard_Integer theMe,
                                  const Standard_Integer theUpper)
{
  
  return ((theMe & 0x7fffffff ) % theUpper) + 1;
}




inline Standard_Boolean IsEqual (const Standard_Integer theOne,
                                 const Standard_Integer theTwo)
{
  return theOne == theTwo;
}




inline Standard_Integer HashCode(const long long int theMe,
  const Standard_Integer theUpper)
{
  return ((theMe & 0x7fffffffffffffff) % theUpper) + 1;
}





inline Standard_Integer HashCode (const Standard_Utf32Char theMe,
                                  const Standard_Integer   theUpper)
{
  return ((theMe & 0x7fffffff ) % theUpper) + 1;
}




inline Standard_Boolean IsEqual (const Standard_Utf32Char theOne,
                                 const Standard_Utf32Char theTwo)
{
  return theOne == theTwo;
}





inline Standard_Boolean IsEven (const Standard_Integer Value)
{ return Value % 2 == 0; }





inline Standard_Boolean IsOdd (const Standard_Integer Value)
{ return Value % 2 == 1; }




inline Standard_Integer  Max (const Standard_Integer Val1,
			      const Standard_Integer Val2)
{
  return Val1 >= Val2 ? Val1 : Val2;
}




inline Standard_Integer  Min (const Standard_Integer Val1,
			      const Standard_Integer Val2)
{
  return Val1 <= Val2 ? Val1 : Val2;
}




inline Standard_Integer  Modulus (const Standard_Integer Value,
				  const Standard_Integer Divisor)
{ return Value % Divisor; }




inline Standard_Integer Square(const Standard_Integer Value)
{ return Value * Value; }




inline Standard_Integer  IntegerFirst()
{ return (-2147483647 - 1); }




inline Standard_Integer  IntegerLast()
{ return 2147483647; }




inline Standard_Integer  IntegerSize()
{ return (8 * sizeof(Standard_Integer)); }







inline Standard_Integer HashCode (const Standard_Address Value, 
				  const Standard_Integer Upper)
{
  union {Standard_Address L ;
         Standard_Integer I[2] ;} U ;
  U.I[0] = 0 ;
  U.I[1] = 0 ;
  U.L = Value;
  return HashCode( ( ( U.I[0] ^ U.I[1] ) & 0x7fffffff )  , Upper ) ;
}





inline Standard_Boolean IsEqual(const Standard_Address One
			       ,const Standard_Address Two)
{ return One == Two; }



























inline Standard_Integer HashCode(const Standard_Size Val,
                                 const Standard_Integer Upper)
{
  Standard_Size aKey = ~Val + (Val << 18);
  aKey ^= (aKey >> 31);
  aKey *= 21;
  aKey ^= (aKey >> 11);
  aKey += (aKey << 6);
  aKey ^= (aKey >> 22);
  return (Standard_Integer(aKey & 0x7fffffff) % Upper) + 1;
}




inline Standard_Boolean IsEqual(const Standard_Size One,
                                const Standard_Size Two)
{
  return One == Two;
}





class Standard_ErrorHandler;
class Standard_GUID;
class Standard_Persistent;
class Standard_Transient;
class Standard_Failure;




class Standard 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
  __declspec( dllexport ) static Standard_Address Allocate (const Standard_Size aSize);
  
  
  
  __declspec( dllexport ) static void Free (const Standard_Address thePtr);
  
  
  
  template <typename T>
  static inline void Free (T*& thePtr) 
  { 
    Free ((void*)thePtr);
    thePtr = 0;
  }
  
  
  
  
  __declspec( dllexport ) static Standard_Address Reallocate (const Standard_Address aStorage, const Standard_Size aNewSize);
  
  
  
  
  
  
  __declspec( dllexport ) static Standard_Address AllocateAligned (const Standard_Size theSize, const Standard_Size theAlign);
  
  
  
  __declspec( dllexport ) static void FreeAligned (const Standard_Address thePtrAligned);
  
  
  
  template <typename T>
  static inline void FreeAligned (T*& thePtrAligned)
  {
    FreeAligned ((void* )thePtrAligned);
    thePtrAligned = 0;
  }
  
  
  
  
  __declspec( dllexport ) static Standard_Integer Purge();

};






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































__declspec( dllimport ) extern Standard_Integer HashCode    (const Standard_Real, const Standard_Integer);  

__declspec( dllimport ) extern Standard_Real    ACos        (const Standard_Real );
__declspec( dllimport ) extern Standard_Real    ACosApprox  (const Standard_Real );
__declspec( dllimport ) extern Standard_Real    ASin        (const Standard_Real );
__declspec( dllimport ) extern Standard_Real    ATan2       (const Standard_Real , const Standard_Real );
__declspec( dllimport ) extern Standard_Real    NextAfter   (const Standard_Real , const Standard_Real );


__declspec( dllimport ) extern Standard_Real    Sign(const Standard_Real a, const Standard_Real b);

__declspec( dllimport ) extern Standard_Real    ATanh       (const Standard_Real );
__declspec( dllimport ) extern Standard_Real    ACosh       (const Standard_Real );
__declspec( dllimport ) extern Standard_Real    Sinh       (const Standard_Real );
__declspec( dllimport ) extern Standard_Real    Cosh       (const Standard_Real );
__declspec( dllimport ) extern Standard_Real    Log         (const Standard_Real );
__declspec( dllimport ) extern Standard_Real    Sqrt        (const Standard_Real );




inline Standard_Real     RealSmall() 
{ return 2.2250738585072014e-308; }




inline Standard_Real     Abs(const Standard_Real Value) 
{ return fabs(Value); }





inline Standard_Boolean  IsEqual (const Standard_Real Value1, 
				  const Standard_Real Value2) 
{ return Abs((Value1 - Value2)) < RealSmall(); }

         
         
         
         
         
         





inline Standard_Integer  RealDigits() 
{ return 15; }





inline Standard_Real     RealEpsilon() 
{ return 2.2204460492503131e-016; }




inline Standard_Real     RealFirst() 
{ return -1.7976931348623158e+308; }
  




inline Standard_Integer  RealFirst10Exp() 
{ return (-307); }




inline Standard_Real     RealLast() 
{ return  1.7976931348623158e+308; }





inline Standard_Integer  RealLast10Exp() 
{ return  308; }





inline Standard_Integer  RealMantissa() 
{ return  53; }




inline Standard_Integer  RealRadix() 
{ return  2; }




inline Standard_Integer  RealSize() 
{ return (8 * sizeof(Standard_Real)); }



         
         
         





inline Standard_Real     IntToReal(const Standard_Integer Value) 
{ return Value; }




inline Standard_Real     ATan(const Standard_Real Value) 
{ return atan(Value); }





inline Standard_Real     Ceiling (const Standard_Real Value) 
{ return ceil(Value); }




inline Standard_Real     Cos (const Standard_Real Value) 
{ return cos(Value); }











inline Standard_Real     Epsilon (const Standard_Real Value) 
{
  Standard_Real aEpsilon;

  if (Value>=0.0){
    aEpsilon = NextAfter(Value, RealLast()) - Value;
  } else {
    aEpsilon = Value - NextAfter(Value, RealFirst());
  }
  return aEpsilon;
}




inline Standard_Real     Exp (const Standard_Real Value) 
{ return exp(Value); }




inline Standard_Real     Floor (const Standard_Real Value) 
{ return floor(Value); }




inline Standard_Real     IntegerPart (const Standard_Real Value) 
{ return ( (Value>0) ? floor(Value) : ceil(Value) ); }





inline Standard_Real     Log10 (const Standard_Real Value) 
{ return log10(Value); }




inline Standard_Real     Max (const Standard_Real Val1, 
                              const Standard_Real Val2) 
{
  return Val1 >= Val2 ? Val1 : Val2;
}




inline Standard_Real     Min (const Standard_Real Val1, 
                              const Standard_Real Val2)
{
  return Val1 <= Val2 ? Val1 : Val2;
}




inline Standard_Real     Pow (const Standard_Real Value, const Standard_Real P)
{ return pow(Value,P); }




inline  Standard_Real    RealPart (const Standard_Real Value) 
{ return fabs(IntegerPart(Value) - Value); }






inline  Standard_Integer RealToInt (const Standard_Real Value) 
{ 
  
  
  
  return Value < (-2147483647 - 1) ? (-2147483647 - 1)
    : Value > 2147483647 ? 2147483647
    : (Standard_Integer)Value;
}








inline Standard_ShortReal RealToShortReal (const Standard_Real theVal)
{
  return theVal < -3.402823466e+38F ? -3.402823466e+38F
    : theVal > 3.402823466e+38F ? 3.402823466e+38F
    : (Standard_ShortReal)theVal;
}




inline Standard_Real     Round (const Standard_Real Value) 
{ return IntegerPart(Value + (Value > 0 ? 0.5 : -0.5)); }




inline Standard_Real     Sin (const Standard_Real Value) 
{ return sin(Value); }





inline Standard_Real     ASinh(const Standard_Real Value)



{ return asinh(Value); }





inline Standard_Real     Square(const Standard_Real Value) 
{ return Value * Value; }




inline Standard_Real     Tan (const Standard_Real Value) 
{ return tan(Value); }




inline Standard_Real     Tanh (const Standard_Real Value) 
{ return tanh(Value); }



































#pragma once










 


	















 
namespace std {
using :: isalnum; using :: isalpha; using :: iscntrl;
using :: isdigit; using :: isgraph; using :: islower;
using :: isprint; using :: ispunct; using :: isspace;
using :: isupper; using :: isxdigit; using :: tolower;
using :: toupper;

using :: isblank;
}
 












inline Standard_Boolean IsEqual(const Standard_Character One,
				const Standard_Character Two)
{ return One == Two; }















  



inline Standard_Boolean IsAlphabetic(const Standard_Character me) 
{ return std::isalpha ((unsigned char)me) != 0; }




inline Standard_Boolean IsDigit(const Standard_Character me) 
{ return std::isdigit ((unsigned char)me) != 0; }




inline Standard_Boolean IsXDigit(const Standard_Character me) 
{ return std::isxdigit((unsigned char)me) != 0; }




inline Standard_Boolean IsAlphanumeric(const Standard_Character me) 
{ return (IsAlphabetic(me) || IsDigit(me)) ; }




inline Standard_Boolean IsControl(const Standard_Character me) 
{ return std::iscntrl((unsigned char)me) != 0; }





inline Standard_Boolean IsGraphic(const Standard_Character me) 
{ return std::isgraph((unsigned char)me) != 0; }




inline Standard_Boolean IsLowerCase(const Standard_Character me) 
{ return std::islower((unsigned char)me) != 0; }




inline Standard_Boolean IsPrintable(const Standard_Character me) 
{ return std::isprint((unsigned char)me) != 0; }





inline Standard_Boolean IsPunctuation(const Standard_Character me) 
{ return ( IsGraphic(me) && !IsAlphanumeric(me)); }




inline Standard_Boolean IsSpace(const Standard_Character me) 
{ return std::isspace((unsigned char)me) != 0; }




inline Standard_Boolean IsUpperCase(const Standard_Character me) 
{ return std::isupper((unsigned char)me) != 0; }




inline Standard_Character LowerCase(const Standard_Character me) 
{ return (Standard_Character)(unsigned char)std::tolower(me); }




inline Standard_Character UpperCase(const Standard_Character me) 
{ return (Standard_Character)(unsigned char)std::toupper(me); }








































































#pragma once





#pragma once





#pragma once





#pragma once





#pragma once









#pragma once





#pragma once





#pragma once





















#pragma once







#pragma pack(push,8)
#pragma warning(push,3)


#pragma warning(disable: 4275)









#pragma once




































































































































































































































































































































#pragma pack(push, 8)







    struct __type_info_node;





    extern __type_info_node __type_info_root_node;




__pragma(pack(push, 8)) extern "C" {


#pragma warning(push)
#pragma warning(disable: 4510 4512 4610) 
struct __std_type_info_data
{
    char const* _UndecoratedName;
    char const  _DecoratedName[1];
};
#pragma warning(pop)

__declspec(dllimport) int __cdecl __std_type_info_compare(
      __std_type_info_data const* _Lhs,
      __std_type_info_data const* _Rhs
    );

__declspec(dllimport) size_t __cdecl __std_type_info_hash(
      __std_type_info_data const* _Data
    );

__declspec(dllimport) char const* __cdecl __std_type_info_name(
      __std_type_info_data* _Data,
      __type_info_node*     _RootNode
    );

} __pragma(pack(pop))



class type_info
{
public:

    type_info(type_info const&) = delete;
    type_info& operator=(type_info const&) = delete;

    size_t hash_code() const throw()
    {
        return __std_type_info_hash(&_Data);
    }

    bool operator==(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) == 0;
    }

    bool operator!=(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) != 0;
    }

    bool before(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) < 0;
    }

    char const* name() const throw()
    {
        


        return __std_type_info_name(&_Data, &__type_info_root_node);
        
    }

    char const* raw_name() const throw()
    {
        return _Data._DecoratedName;
    }

    virtual ~type_info() throw();

private:

    mutable __std_type_info_data _Data;
};

namespace std {
	using ::type_info;
}



namespace std {

class bad_cast
    : public exception
{
public:

    bad_cast() throw()
        : exception("bad cast", 1)
    {
    }

    static bad_cast __construct_from_string_literal(char const* const _Message) throw()
    {
        return bad_cast(_Message, 1);
    }

private:

    bad_cast(char const* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_typeid
    : public exception
{
public:

    bad_typeid() throw()
        : exception("bad typeid", 1)
    {
    }

    static bad_typeid __construct_from_string_literal(char const* const _Message) throw()
    {
        return bad_typeid(_Message, 1);
    }

private:

    friend class __non_rtti_object;

    bad_typeid(char const* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class __non_rtti_object
    : public bad_typeid
{
public:

    static __non_rtti_object __construct_from_string_literal(char const* const _Message) throw()
    {
        return __non_rtti_object(_Message, 1);
    }

private:

    __non_rtti_object(char const* const _Message, int) throw()
        : bad_typeid(_Message, 1)
    {
    }
};

} 



#pragma pack(pop)


 


























































#pragma pack(pop)
#pragma warning(pop)












#pragma once





#pragma once












#pragma once




__pragma(pack(push, 8)) extern "C" {















struct lconv
{
    char*    decimal_point;
    char*    thousands_sep;
    char*    grouping;
    char*    int_curr_symbol;
    char*    currency_symbol;
    char*    mon_decimal_point;
    char*    mon_thousands_sep;
    char*    mon_grouping;
    char*    positive_sign;
    char*    negative_sign;
    char     int_frac_digits;
    char     frac_digits;
    char     p_cs_precedes;
    char     p_sep_by_space;
    char     n_cs_precedes;
    char     n_sep_by_space;
    char     p_sign_posn;
    char     n_sign_posn;
    wchar_t* _W_decimal_point;
    wchar_t* _W_thousands_sep;
    wchar_t* _W_int_curr_symbol;
    wchar_t* _W_currency_symbol;
    wchar_t* _W_mon_decimal_point;
    wchar_t* _W_mon_thousands_sep;
    wchar_t* _W_positive_sign;
    wchar_t* _W_negative_sign;
};





















__declspec(dllimport) void __cdecl _lock_locales(void);
__declspec(dllimport) void __cdecl _unlock_locales(void);


__declspec(dllimport) int __cdecl _configthreadlocale(
      int _Flag
    );


__declspec(dllimport) char* __cdecl setlocale(
            int         _Category,
      char const* _Locale
    );


__declspec(dllimport) struct lconv* __cdecl localeconv(void);


__declspec(dllimport) _locale_t __cdecl _get_current_locale(void);


__declspec(dllimport) _locale_t __cdecl _create_locale(
        int         _Category,
      char const* _Locale
    );

__declspec(dllimport) void __cdecl _free_locale(
      _locale_t _Locale
    );



__declspec(dllimport) wchar_t* __cdecl _wsetlocale(
            int            _Category,
      wchar_t const* _Locale
    );


__declspec(dllimport) _locale_t __cdecl _wcreate_locale(
        int            _Category,
      wchar_t const* _Locale
    );



__declspec(dllimport) wchar_t**    __cdecl ___lc_locale_name_func(void);
__declspec(dllimport) unsigned int __cdecl ___lc_codepage_func   (void);
__declspec(dllimport) unsigned int __cdecl ___lc_collate_cp_func (void);



} __pragma(pack(pop))




 #pragma pack(push,8)
 #pragma warning(push,3)
 
 


 
  
extern "C" {
  
 

		












		










 
 
 
 
 
 
 
 

typedef struct _Collvec
	{	
	unsigned int _Page;		
	wchar_t *_LocaleName;
	} _Collvec;

typedef struct _Ctypevec
	{	
	unsigned int _Page;		
	const short *_Table;
	int _Delfl;
	wchar_t *_LocaleName;
	} _Ctypevec;

typedef struct _Cvtvec
	{	
	unsigned int _Page;		
	unsigned int _Mbcurmax;
	int _Isclocale;	
	unsigned char _Isleadbyte[32];	
	} _Cvtvec;

		
__declspec(dllimport) _Collvec __cdecl _Getcoll(void);
__declspec(dllimport) _Ctypevec __cdecl _Getctype(void);
__declspec(dllimport) _Cvtvec __cdecl _Getcvt(void);
__declspec(dllimport) int __cdecl _Getdateorder(void);

 








__declspec(dllimport) int __cdecl _Mbrtowc(  wchar_t *, const char *, size_t,
	mbstate_t *, const _Cvtvec *);
 

__declspec(dllimport) float __cdecl _Stof(const char *,
	    char **, long);
__declspec(dllimport) double __cdecl _Stod(const char *,
	    char **, long);
__declspec(dllimport) long double __cdecl _Stold(const char *,
	    char **, long);

__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *,
	const char *, const char *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Strxfrm(
	    char *_String1,
	  char *_End1, const char *, const char *, const _Collvec *);
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Wcrtomb(  char *, wchar_t, mbstate_t *,
	const _Cvtvec *);
__declspec(dllimport) int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
	const wchar_t *, const wchar_t *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Wcsxfrm(
	    wchar_t *_String1,
	  wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

__declspec(dllimport) short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
__declspec(dllimport) const wchar_t *__cdecl _Getwctypes(const wchar_t *,
	const wchar_t *, short *, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);

 
  
}
  
 


extern "C" {
 
 
__declspec(dllimport) char *__cdecl _Getdays(void);

 
 
__declspec(dllimport) char *__cdecl _Getmonths(void);

__declspec(dllimport) void *__cdecl _Gettnames(void);

 
__declspec(dllimport) size_t __cdecl _Strftime(  char *,
	  size_t _Maxsize,   const char *,   const struct tm *,
	  void *);

 
 
__declspec(dllimport) wchar_t *__cdecl _W_Getdays(void);

 
 
__declspec(dllimport) wchar_t *__cdecl _W_Getmonths(void);

__declspec(dllimport) void *__cdecl _W_Gettnames(void);

 
__declspec(dllimport) size_t __cdecl _Wcsftime(  wchar_t *,
	  size_t _Maxsize,   const wchar_t *,   const struct tm *,
	  void *);
}

 







__declspec(dllimport) _locale_t __cdecl _GetLocaleForCP(unsigned int);
 

 
 #pragma warning(pop)
 #pragma pack(pop)











 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4412)

namespace std {
		
class __declspec(dllimport) _Timevec
	{	
public:
	 _Timevec(void *_Ptr = 0)
		: _Timeptr(_Ptr)
		{	
		}

	 _Timevec(const _Timevec& _Right)
		{	
		*this = _Right;
		}

	 ~_Timevec() noexcept
		{	
		free(_Timeptr);
		}

	_Timevec&  operator=(const _Timevec& _Right)
		{	
		_Timeptr = _Right._Timeptr;
		((_Timevec *)&_Right)->_Timeptr = 0;
		return (*this);
		}

	void * _Getptr() const
		{	
		return (_Timeptr);
		}

private:
	void *_Timeptr;	
	};

		
class __declspec(dllimport) _Locinfo
	{	
public:
	typedef ::_Collvec _Collvec;
	typedef ::_Ctypevec _Ctypevec;
	typedef ::_Cvtvec _Cvtvec;
	typedef ::std:: _Timevec _Timevec;

	static  void __cdecl _Locinfo_ctor(
		_Locinfo *, const char *);
	static  void __cdecl _Locinfo_ctor(
		_Locinfo *, int, const char *);
	static  void __cdecl _Locinfo_dtor(
		_Locinfo *);
	static  _Locinfo& __cdecl _Locinfo_Addcats(
		_Locinfo *, int, const char *);

	 _Locinfo(const char *_Pch = "C")
 
		: _Lock(0)
 

		{	
		if (_Pch == 0)
			throw runtime_error("bad locale name");
		_Locinfo_ctor(this, _Pch);
		}

	 _Locinfo(int _Cat, const char *_Pch)
 
		: _Lock(0)
 

		{	
		if (_Pch == 0)
			throw runtime_error("bad locale name");
		_Locinfo_ctor(this, _Cat, _Pch);
		}

	 ~_Locinfo() noexcept
		{	
		_Locinfo_dtor(this);
		}

	_Locinfo&  _Addcats(int _Cat, const char *_Pch)
		{	
		if (_Pch == 0)
			throw runtime_error("bad locale name");
		return (_Locinfo_Addcats(this, _Cat, _Pch));
		}

	const char * _Getname() const
		{	
		return (_Newlocname._C_str());
		}

	_Collvec  _Getcoll() const
		{	
		return (::_Getcoll());
		}

	_Ctypevec  _Getctype() const
		{	
		return (::_Getctype());
		}

	_Cvtvec  _Getcvt() const
		{	
		return (::_Getcvt());
		}

	const lconv * _Getlconv() const
		{	
		return (localeconv());
		}

	_Timevec  _Gettnames() const
		{	
		return (_Timevec(::_Gettnames()));
		}

	const char * _Getdays() const
		{	
		const char *_Ptr = ::_Getdays();

		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_Days = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Days._Empty() ? _Days._C_str()
			: ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				":Thu:Thursday:Fri:Friday:Sat:Saturday");
		}

	const char * _Getmonths() const
		{	
		const char *_Ptr = ::_Getmonths();

		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_Months = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Months._Empty() ? _Months._C_str()
			: ":Jan:January:Feb:February:Mar:March"
				":Apr:April:May:May:Jun:June"
				":Jul:July:Aug:August:Sep:September"
				":Oct:October:Nov:November:Dec:December");
		}

	const char * _Getfalse() const
		{	
		return ("false");
		}

	const char * _Gettrue() const
		{	
		return ("true");
		}

	int  _Getdateorder() const
		{	
		return (::_Getdateorder());
		}

	_Timevec  _W_Gettnames() const
		{	
		return (_Timevec(::_W_Gettnames()));
		}

	const unsigned short * _W_Getdays() const
		{	
		const wchar_t *_Ptr = ::_W_Getdays();

		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_W_Days = _Ptr;
			free((void *)_Ptr);
			}
		return ((const unsigned short *)(!_W_Days._Empty()
			? _W_Days._C_str()
			: L":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				L":Thu:Thursday:Fri:Friday:Sat:Saturday"));
		}

	const unsigned short * _W_Getmonths() const
		{	
		const wchar_t *_Ptr = ::_W_Getmonths();

		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_W_Months = _Ptr;
			free((void *)_Ptr);
			}
		return ((const unsigned short *)(!_W_Months._Empty()
			? _W_Months._C_str()
			: L":Jan:January:Feb:February:Mar:March"
				L":Apr:April:May:May:Jun:June"
				L":Jul:July:Aug:August:Sep:September"
				L":Oct:October:Nov:November:Dec:December"));
		}

	_Locinfo(const _Locinfo&) = delete;
	_Locinfo& operator=(const _Locinfo&) = delete;

private:
 



	_Lockit _Lock;	
 

	_Yarn<char> _Days;	
	_Yarn<char> _Months;	
	_Yarn<wchar_t> _W_Days;	
	_Yarn<wchar_t> _W_Months;	
	_Yarn<char> _Oldlocname;	
	_Yarn<char> _Newlocname;	
	};

		
template<class _Elem> inline
	int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
		if (*_First1 < *_First2)
			return (-1);	
		else if (*_First2 < *_First1)
			return (+1);	
	return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
	}

template<> inline
	int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

		
template<class _Elem> inline
	size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	size_t _Count = _Last2 - _First2;
	if (_Count <= (size_t)(_Last1 - _First1))
		::memcpy_s((_First1), ((_Last1 - _First1) * sizeof (_Elem)), (_First2), (_Count * sizeof (_Elem)));
	return (_Count);
	}

template<> inline
	size_t __cdecl _LStrxfrm( 
		  char *_First1,   char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	size_t __cdecl _LStrxfrm( 
		  wchar_t *_First1,   wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)











#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 






namespace std {
	
class __declspec(dllimport) _Facet_base
	{	
public:
	virtual  ~_Facet_base() noexcept
		{	
		}

	
	virtual void  _Incref() = 0;

	
	virtual _Facet_base *  _Decref() = 0;
	};

 



void __cdecl _Facet_Register(_Facet_base *);
 
}
 
 #pragma warning(pop)
 #pragma pack(pop)



 





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4412 28197)

namespace std {
		
template<class _Dummy>
	class _Locbase
	{	
public:
	 static const int collate = ((1 << (1)) >> 1);
	 static const int ctype = ((1 << (2)) >> 1);
	 static const int monetary = ((1 << (3)) >> 1);
	 static const int numeric = ((1 << (4)) >> 1);
	 static const int time = ((1 << (5)) >> 1);
	 static const int messages = ((1 << (6)) >> 1);
	 static const int all = (((1 << ((6 + 1))) >> 1) - 1);
	 static const int none = 0;
	};

template<class _Dummy>
	const int _Locbase<_Dummy>::collate;
template<class _Dummy>
	const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
	const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
	const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
	const int _Locbase<_Dummy>::time;
template<class _Dummy>
	const int _Locbase<_Dummy>::messages;
template<class _Dummy>
	const int _Locbase<_Dummy>::all;
template<class _Dummy>
	const int _Locbase<_Dummy>::none;

		
class locale;
template<class _Facet>
	const _Facet& __cdecl use_facet(const locale&);
template<class _Elem>
	class collate;

struct __declspec(dllimport) _Crt_new_delete
	{	
  
































	};

class locale
	: public _Locbase<int>, public _Crt_new_delete
	{	
public:
	typedef int category;

			
	class __declspec(dllimport) id
		{	
	public:
		 id(size_t _Val = 0)
			: _Id(_Val)
			{	
			}

		 operator size_t()
			{	
			if (_Id == 0)
				{	
				{ ::std:: _Lockit _Lock(0);
					if (_Id == 0)
						_Id = ++_Id_cnt;
				}
				}
			return (_Id);
			}

	private:
		size_t _Id;	

		 static int _Id_cnt;

	public:
		 id(const id&) = delete;
		id&  operator=(const id&) = delete;
		};

	class _Locimp;

			
	class __declspec(dllimport) facet
		: public _Facet_base, public _Crt_new_delete
		{	
	public:
		static size_t __cdecl _Getcat(const facet ** = 0,
			const locale * = 0)
			{	
			return ((size_t)(-1));
			}

		virtual void  _Incref()
			{	
			_InterlockedIncrement(reinterpret_cast<volatile long *>(&_Myrefs));
			}

		virtual _Facet_base * _Decref()
			{	
			if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Myrefs)) == 0)
				return (this);
			else
				return (0);
			}

	private:
		_Atomic_counter_t _Myrefs;	

	protected:
		explicit  facet(size_t _Initrefs = 0)
			{	
			_Init_atomic_counter(_Myrefs, (_Atomic_integral_t)_Initrefs);
			}

		virtual  ~facet() noexcept
			{	
			}

	public:
		 facet(const facet&) = delete;
		facet&  operator=(const facet&) = delete;
		};

			
 #pragma warning(push)
 #pragma warning(disable: 4275)

	class __declspec(dllimport) _Locimp
		: public facet
		{	
	protected:
		 ~_Locimp() noexcept
		{	
		_Locimp_dtor(this);
		}

	private:
		static  _Locimp *__cdecl
			_New_Locimp(bool _Transparent = false);
		static  _Locimp *__cdecl
			_New_Locimp(const _Locimp& _Right);

		static  void __cdecl
			_Locimp_dtor(_Locimp *);
		static  void __cdecl
			_Locimp_Addfac(_Locimp *, facet *, size_t);	
		static void __cdecl
			_Locimp_ctor(_Locimp *, const _Locimp&);

		friend class locale;

		 _Locimp(bool _Transparent)
			: locale::facet(1), _Facetvec(0), _Facetcount(0),
				_Catmask(none), _Xparent(_Transparent),
					_Name("*")
			{	
			}

		 _Locimp(const _Locimp& _Right)
			: locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
				_Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
					_Name(_Right._Name.c_str())
			{	
			_Locimp_ctor(this, _Right);
			}

		void  _Addfac(facet *_Pfacet, size_t _Id)
			{	
			_Locimp_Addfac(this, _Pfacet, _Id);
			}

		static _Locimp *__cdecl _Makeloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		static void __cdecl _Makewloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

 
		static void __cdecl _Makeushloc(const _Locinfo&,
			category, _Locimp *, const locale *);	
 

		static void __cdecl _Makexloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		facet **_Facetvec;	
		size_t _Facetcount;	
		category _Catmask;	
		bool _Xparent;	
		_Yarn<char> _Name;	

		 static _Locimp *_Clocptr;

public:
		_Locimp&  operator=(const _Locimp&) = delete;
		};

 #pragma warning(pop)

	template<class _Elem,
		class _Traits,
		class _Alloc>
		bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
			const basic_string<_Elem, _Traits, _Alloc>& _Right) const
		{	
		const ::std:: collate<_Elem>& _Coll_fac =
			use_facet< ::std:: collate<_Elem> >(*this);

		return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
			_Right.c_str(), _Right.c_str() + _Right.size()) < 0);
		}

	template<class _Facet>
		locale combine(const locale& _Loc) const
		{	
		_Facet *_Facptr;

		try {
			_Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
		} catch (...) {
			_Xruntime_error("locale::combine facet missing");
		}

		_Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
		_Newimp->_Addfac(_Facptr, _Facet::id);
		_Newimp->_Catmask = none;
		_Newimp->_Name = "*";
		return (locale(_Newimp));
		}

	template<class _Facet>
		locale(const locale& _Loc, const _Facet *_Facptr)
			: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		if (_Facptr != 0)
			{	
			_Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
			_Ptr->_Catmask = none;
			_Ptr->_Name = "*";
			}
		}

	locale(_Uninitialized)
		{	
		}

 




















	locale(const locale& _Right) noexcept
		: _Ptr(_Right._Ptr)
		{	
		_Ptr->_Incref();
		}

	locale() noexcept
		: _Ptr(_Init(true))
		{	
		}

 
	locale(const locale& _Loc, const locale& _Other,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		if (_Cat != none)
			{	
			try {
				{ _Locinfo _Lobj;
					_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
					_Lobj._Addcats(_Loc._Ptr->_Catmask,
						_Loc.name().c_str());
					_Lobj._Addcats(_Other._Ptr->_Catmask,
						_Other.name().c_str());
					_Ptr->_Catmask = _Loc._Ptr->_Catmask
						| _Other._Ptr->_Catmask;
					_Ptr->_Name = _Lobj._Getname();
				}
			} catch (...) {
			delete _Ptr->_Decref();
			throw;
			}
			}
		}

private:
	void _Construct(const string &_Str,
		category _Cat)
		{	
		bool _Bad = false;
		_Init();
		if (_Cat != none)
			{	
			try {
				{ _Locinfo _Lobj(_Cat, _Str.c_str());
					if (_Badname(_Lobj))
						_Bad = true;
					else
						{	
						_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
						_Ptr->_Catmask = _Cat;
						_Ptr->_Name = _Str.c_str();
						}
				}
			} catch (...) {
			delete _Ptr->_Decref();
			throw;
			}
			}

		if (_Bad)
			{	
			delete _Ptr->_Decref();
			_Xruntime_error("bad locale name");
			}
		}

public:
	explicit locale(const char *_Locname,
		category _Cat = all)
		: _Ptr(_Locimp::_New_Locimp())
		{	
		
		
		if (_Locname == 0)
			_Xruntime_error("bad locale name");
		_Construct(_Locname, _Cat);
		}

	locale(const locale& _Loc, const char *_Locname,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		
		
		if (_Locname == 0)
			_Xruntime_error("bad locale name");
		_Construct(_Locname, _Cat);
		}

	explicit locale(const string& _Str,
		category _Cat = all)
		: _Ptr(_Locimp::_New_Locimp())
		{	
		_Construct(_Str, _Cat);
		}

	locale(const locale& _Loc, const string& _Str,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		_Construct(_Str, _Cat);
		}
 

	~locale() noexcept
		{	
		if (_Ptr != 0)
			delete _Ptr->_Decref();
		}

	locale& operator=(const locale& _Right) noexcept
		{	
		if (_Ptr != _Right._Ptr)
			{	
			delete _Ptr->_Decref();
			_Ptr = _Right._Ptr;
			_Ptr->_Incref();
			}
		return (*this);
		}
 

	string name() const
		{	
		return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
		}

	const char *c_str() const
		{	
		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
		}

	const facet *_Getfacet(size_t _Id) const
		{	
		const facet *_Facptr = _Id < _Ptr->_Facetcount
			? _Ptr->_Facetvec[_Id] : 0;	
		if (_Facptr != 0 || !_Ptr->_Xparent)
			return (_Facptr);	
		else
			{	
			locale::_Locimp *_Ptr0 = _Getgloballocale();
			return (_Id < _Ptr0->_Facetcount
				? _Ptr0->_Facetvec[_Id]	
				: 0);	
			}
		}

	bool operator==(const locale& _Loc) const
		{	
		return (_Ptr == _Loc._Ptr
			|| (name().compare("*") != 0
				&& name().compare(_Loc.name()) == 0));
		}

	bool operator!=(const locale& _Right) const
		{	
		return (!(*this == _Right));
		}

	static __declspec(dllimport) const locale& __cdecl
		classic();	

	static __declspec(dllimport) locale __cdecl
		global(const locale&);	

	static __declspec(dllimport) locale __cdecl
		empty();	

private:
	locale(_Locimp *_Ptrimp)
		: _Ptr(_Ptrimp)
		{	
		}

	static __declspec(dllimport) _Locimp *__cdecl
		_Init(bool _Do_incref = false);	
	static __declspec(dllimport) _Locimp *__cdecl
		_Getgloballocale();
	static __declspec(dllimport) void __cdecl
		_Setgloballocale(void *);

	bool _Badname(const _Locinfo& _Lobj)
		{	
		return (:: strcmp(_Lobj._Getname(), "*") == 0);
		}

	_Locimp *_Ptr;	
	};

		

 


















template<class _Facet>
	struct _Facetptr
	{	
	 static const locale::facet *_Psave;
	};

template<class _Facet>
	 const locale::facet *_Facetptr<_Facet>::
		_Psave = 0;

  

  


template<class _Facet> inline
	const _Facet& __cdecl use_facet(const locale& _Loc)

	{	
 




	{ ::std:: _Lockit _Lock(0);	
		const locale::facet *_Psave =
			_Facetptr<_Facet>::_Psave;	

		size_t _Id = _Facet::id;
		const locale::facet *_Pf = _Loc._Getfacet(_Id);

		if (_Pf != 0)
			;	
		else if (_Psave != 0)
			_Pf = _Psave;	
		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

 

			throw ::std:: bad_cast();	

 



		else
			{	
			_Pf = _Psave;
			_Facetptr<_Facet>::_Psave = _Psave;

			locale::facet *_Pfmod = (_Facet *)_Psave;
			_Pfmod->_Incref();

 



			_Facet_Register(_Pfmod);
 
			}

		return ((const _Facet&)(*_Pf));	
	}
 
	}	

		
template<class _Elem,
	class _InIt> inline
	int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
		const _Elem *_Ptr)
	{	
	for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
		if (_Ptr[_Off] == _Ptr[0])
			++_Numfields;	
	string _Str(_Numfields, '\0');	

	int _Ans = -2;	
	for (size_t _Column = 1; ; ++_Column, (void)++_First, _Ans = -1)
		{	
		bool _Prefix = false;	
		size_t _Off = 0;	
		size_t _Field = 0;	

		for (; _Field < _Numfields; ++_Field)
			{	
			for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
				;	

			if (_Str[_Field] != '\0')
				_Off += _Str[_Field];	
			else if (_Ptr[_Off += _Column] == _Ptr[0]
				|| _Ptr[_Off] == (_Elem)0)
				{	
				_Str[_Field] = (char)(_Column < 127
					? _Column : 127);	
				_Ans = (int)_Field;	
				}
			else if (_First == _Last || _Ptr[_Off] != *_First)
				_Str[_Field] = (char)(_Column < 127
					? _Column : 127);	
			else
				_Prefix = true;	
			}

		if (!_Prefix || _First == _Last)
			break;	
		}
	return (_Ans);	
	}

		



template<class _Elem> inline
	char __cdecl _Maklocbyte(_Elem _Char,
		const _Locinfo::_Cvtvec&)
	{	
	return ((char)(unsigned char)_Char);
	}

template<> inline
	char __cdecl _Maklocbyte(wchar_t _Char,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {};
	_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}

 
template<> inline
	char __cdecl _Maklocbyte(unsigned short _Char,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {};
	_Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}
 

		



template<class _Elem> inline
	_Elem __cdecl _Maklocchr(char _Byte, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	return ((_Elem)(unsigned char)_Byte);
	}

template<> inline
	wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	wchar_t _Wc = L'\0';
	mbstate_t _Mbst1 = {};
	_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}

 
template<> inline
	unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	unsigned short _Wc = (unsigned short)0;
	mbstate_t _Mbst1 = {};
	_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}
 

		



template<class _Elem> inline
	_Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	size_t _Count = :: strlen(_Ptr) + 1;

	_Elem *_Ptrdest = (_Elem *)calloc(_Count, sizeof (_Elem));

	if (!_Ptrdest)
		_Xbad_alloc();

 #pragma warning(push)
 #pragma warning(disable: 6011)	
	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;
 #pragma warning(pop)

	return (_Ptrdest);
	}

template<> inline
	wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	wchar_t _Wc;
	mbstate_t _Mbst1 = {};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			break;
	++_Wchars;	

	wchar_t *_Ptrdest = (wchar_t *)calloc(_Wchars, sizeof (wchar_t));

	if (!_Ptrdest)
		_Xbad_alloc();
	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {};

 #pragma warning(push)
 #pragma warning(disable: 6011)	
	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			break;
	*_Ptrnext = L'\0';
 #pragma warning(pop)

	return (_Ptrdest);
	}

 
template<> inline
	unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	unsigned short _Wc;
	mbstate_t _Mbst1 = {};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		if ((_Bytes =
			_Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			break;
	++_Wchars;	

	wchar_t *_Ptrdest = (wchar_t *)calloc(_Wchars, sizeof (wchar_t));

	if (!_Ptrdest)
		_Xbad_alloc();

	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {};
	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			break;
	*_Ptrnext = L'\0';
	return ((unsigned short *)_Ptrdest);
	}
 

		
 #pragma warning(push)
 #pragma warning(disable: 4275)

class __declspec(dllimport) codecvt_base
	: public locale::facet
	{	
public:
	enum
		{	
		ok, partial, error, noconv};
	typedef int result;

	 codecvt_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	bool  always_noconv() const noexcept
		{	
		return (do_always_noconv());
		}

	int  max_length() const noexcept
		{	
		return (do_max_length());
		}

	int  encoding() const noexcept
		{	
		return (do_encoding());
		}

	 ~codecvt_base() noexcept
		{	
		}

protected:
	virtual bool  do_always_noconv() const noexcept
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept
		{	
		return (1);
		}

	virtual int  do_encoding() const noexcept
		{	
		return (1);	
		}
	};

 #pragma warning(pop)

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt
		: public codecvt_base
	{	
public:
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State, _First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;	

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Locinfo());
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual bool  do_always_noconv() const noexcept
		{	
		return (is_same<_Byte, _Elem>::value);
		}

	virtual result  do_in(_Statype&,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		_Mid1 = _First1, _Mid2 = _First2;
		if (is_same<_Byte, _Elem>::value)
			return (noconv);	
		else
			{	
			for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
				*_Mid2 = (_Elem)*_Mid1;
			return (ok);
			}
		}

	virtual result  do_out(_Statype&,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		_Mid1 = _First1, _Mid2 = _First2;
		if (is_same<_Byte, _Elem>::value)
			return (noconv);	
		else
			{	
			for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
				*_Mid2 = (_Byte)*_Mid1;
			return (ok);
			}
		}

	virtual result  do_unshift(_Statype&,
		_Byte *_First2, _Byte *, _Byte *&_Mid2) const
		{	
		_Mid2 = _First2;
		return (ok);	
		}

	virtual int  do_length(_Statype&, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return ((int)(_Count < (size_t)(_Last1 - _First1)
			? _Count : _Last1 - _First1));	
		}
	};

		
template<class _Elem,
	class _Byte,
	class _Statype>
	 locale::id codecvt<_Elem, _Byte, _Statype>::id;

		
enum _Codecvt_mode {
	_Consume_header = 4,
	_Generate_header = 2
	};

		
template<>
	class __declspec(dllimport) codecvt<char16_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef codecvt<char16_t, char, _Mbstatet> _Mybase;
	typedef char16_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
		{	
		_Init(_Lobj);
		}

	 codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		unsigned short *_Pstate = (unsigned short *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
			{	
			unsigned char _By = (unsigned char)*_Mid1;
			unsigned long _Ch;
			int _Nextra, _Nskip;

			if (*_Pstate <= 1)
				;	
			else if (_By < 0x80 || 0xc0 <= _By)
				return (_Mybase::error);	
			else
				{	
				++_Mid1;
				*_Mid2++ = (_Elem)(*_Pstate | (_By & 0x3f));
				*_Pstate = 1;
				continue;
				}

			if (_By < 0x80)
				_Ch = _By, _Nextra = 0;
			else if (_By < 0xc0)
				{	
				++_Mid1;
				return (_Mybase::error);
				}
			else if (_By < 0xe0)
				_Ch = _By & 0x1f, _Nextra = 1;
			else if (_By < 0xf0)
				_Ch = _By & 0x0f, _Nextra = 2;
			else if (_By < 0xf8)
				_Ch = _By & 0x07, _Nextra = 3;
			else
				_Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

			_Nskip = _Nextra < 3 ? 0 : 1;	
			_First1 = _Mid1;	

			if (_Nextra == 0)
				++_Mid1;
			else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip)
				break;	
			else
				for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1)
					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
						return (_Mybase::error);	
					else
						_Ch = _Ch << 6 | (_By & 0x3f);
			if (0 < _Nskip)
				_Ch <<= 6;	

			if ((_Maxcode < 0x10ffff ? _Maxcode : 0x10ffff) < _Ch)
				return (_Mybase::error);	
			else if (0xffff < _Ch)
				{	
				unsigned short _Ch0 =
					(unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);

				*_Mid2++ = (_Elem)_Ch0;
				*_Pstate = (unsigned short)(0xdc00 | (_Ch & 0x03ff));
				continue;
				}

			if (_Nskip == 0)
				;
			else if (_Mid1 == _Last1)
				{	
				_Mid1 = _First1;
				break;
				}
			else if ((_By = (unsigned char)*_Mid1++) < 0x80 || 0xc0 <= _By)
				return (_Mybase::error);	
			else
				_Ch |= _By & 0x3f;	

			if (*_Pstate == 0)
				{	
				*_Pstate = 1;

				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
					{	
					result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
						_First2, _Last2, _Mid2);

					if (_Ans == _Mybase::partial)
						{	
						*_Pstate = 0;
						_Mid1 = _First1;
						}
					return (_Ans);
					}
				}

			*_Mid2++ = (_Elem)_Ch;
			}

		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		unsigned short *_Pstate = (unsigned short *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
			{	
			unsigned long _Ch;
			unsigned short _Ch1 = (unsigned short)*_Mid1;
			bool _Save = false;

			if (1 < *_Pstate)
				{	
				if (_Ch1 < 0xdc00 || 0xe000 <= _Ch1)
					return (_Mybase::error);	
				_Ch = (*_Pstate << 10) | (_Ch1 - 0xdc00);
				}
			else if (0xd800 <= _Ch1 && _Ch1 < 0xdc00)
				{	
				_Ch = (_Ch1 - 0xd800 + 0x0040) << 10;
				_Save = true;	
				}
			else
				_Ch = _Ch1;	

			_Byte _By;
			int _Nextra;

			if (_Ch < 0x0080)
				_By = (_Byte)_Ch, _Nextra = 0;
			else if (_Ch < 0x0800)
				_By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
			else if (_Ch < 0x10000)
				_By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
			else
				_By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;

			int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;

			if (_Last2 - _Mid2 < _Nput)
				break;	
			else if (*_Pstate != 0 || (_Mode & _Generate_header) == 0)
				;	
			else if (_Last2 - _Mid2 < 3 + _Nput)
				break;	
			else
				{	
				*_Mid2++ = (_Byte)(unsigned char)0xef;
				*_Mid2++ = (_Byte)(unsigned char)0xbb;
				*_Mid2++ = (_Byte)(unsigned char)0xbf;
				}

			++_Mid1;
			if (_Save || _Nextra < 3)
				{	
				*_Mid2++ = _By;
				--_Nput;
				}
			for (; 0 < _Nput; --_Nput)
				*_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);

			*_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
			}

		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
		{	
		unsigned short *_Pstate = (unsigned short *)&_State;
		_Mid2 = _First2;

		return (1 < *_Pstate
			? _Mybase::error : _Mybase::ok);	
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		size_t _Wchars = 0;
		_Statype _Mystate = _State;

		for (; _Wchars < _Count && _First1 != _Last1; )
			{	
			const _Byte *_Mid1;
			_Elem *_Mid2;
			_Elem _Ch;

			switch (do_in(_Mystate, _First1, _Last1, _Mid1,
				&_Ch, &_Ch + 1, _Mid2))
				{	
			case _Mybase::noconv:
				return ((int)(_Wchars + (_Last1 - _First1)));

			case _Mybase::ok:
				if (_Mid2 == &_Ch + 1)
					++_Wchars;	
				_First1 = _Mid1;
				break;

			default:
				return ((int)_Wchars);	
				}
			}

		return ((int)_Wchars);
		}

	virtual bool  do_always_noconv() const noexcept
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept
		{	
		return ((_Mode & _Consume_header) != 0 ? 9	
			: (_Mode & _Generate_header) != 0 ? 7	
			: 6);	
		}

	virtual int do_encoding() const noexcept
		{	
		return (0);	
		}

private:
	unsigned long _Maxcode;	
	_Codecvt_mode _Mode;	
	};

		
template<>
	class __declspec(dllimport) codecvt<char32_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef codecvt<char32_t, char, _Mbstatet> _Mybase;
	typedef char32_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
		{	
		_Init(_Lobj);
		}

	 codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		char *_Pstate = (char *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
			{	
			unsigned char _By = (unsigned char)*_Mid1;
			unsigned long _Ch;
			int _Nextra;

			if (_By < 0x80)
				_Ch = _By, _Nextra = 0;
			else if (_By < 0xc0)
				{	
				++_Mid1;
				return (_Mybase::error);
				}
			else if (_By < 0xe0)
				_Ch = _By & 0x1f, _Nextra = 1;
			else if (_By < 0xf0)
				_Ch = _By & 0x0f, _Nextra = 2;
			else if (_By < 0xf8)
				_Ch = _By & 0x07, _Nextra = 3;
			else
				_Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

			if (_Nextra == 0)
				++_Mid1;
			else if (_Last1 - _Mid1 < _Nextra + 1)
				break;	
			else
				for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1)
					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
						return (_Mybase::error);	
					else
						_Ch = _Ch << 6 | (_By & 0x3f);

			if (*_Pstate == 0)
				{	
				*_Pstate = 1;

				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
					{	
					result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
						_First2, _Last2, _Mid2);

					if (_Ans == _Mybase::partial)
						{	
						*_Pstate = 0;
						_Mid1 = _First1;
						}
					return (_Ans);
					}
				}

			if (_Maxcode < _Ch)
				return (_Mybase::error);	
			*_Mid2++ = (_Elem)_Ch;
			}

		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		char *_Pstate = (char *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
			{	
			_Byte _By;
			int _Nextra;
			unsigned long _Ch = (unsigned long)*_Mid1;

			if (_Maxcode < _Ch)
				return (_Mybase::error);

			if (_Ch < 0x0080)
				_By = (_Byte)_Ch, _Nextra = 0;
			else if (_Ch < 0x0800)
				_By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
			else if (_Ch < 0x00010000)
				_By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
			else if (_Ch < 0x00200000)
				_By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;
			else if (_Ch < 0x04000000)
				_By = (_Byte)(0xf8 | _Ch >> 24), _Nextra = 4;
			else
				_By = (_Byte)(0xfc | (_Ch >> 30 & 0x03)), _Nextra = 5;

			if (*_Pstate == 0)
				{	
				*_Pstate = 1;
				if ((_Mode & _Generate_header) == 0)
					;
				else if (_Last2 - _Mid2 < 3 + 1 + _Nextra)
					return (_Mybase::partial);	
				else
					{	
					*_Mid2++ = (_Byte)(unsigned char)0xef;
					*_Mid2++ = (_Byte)(unsigned char)0xbb;
					*_Mid2++ = (_Byte)(unsigned char)0xbf;
					}
				}

			if (_Last2 - _Mid2 < 1 + _Nextra)
				break;	

			++_Mid1;
			for (*_Mid2++ = _By; 0 < _Nextra; )
				*_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
			}
		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_unshift(_Statype&,
		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
		{	
		_Mid2 = _First2;
		return (_Mybase::ok);
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		int _Wchars = 0;
		_Statype _Mystate = _State;

		for (; (size_t)_Wchars < _Count && _First1 != _Last1; )
			{	
			const _Byte *_Mid1;
			_Elem *_Mid2;
			_Elem _Ch;

			switch (do_in(_Mystate, _First1, _Last1, _Mid1,
				&_Ch, &_Ch + 1, _Mid2))
				{	
			case _Mybase::noconv:
				return ((int)(_Wchars + (int)(_Last1 - _First1)));

			case _Mybase::ok:
				if (_Mid2 == &_Ch + 1)
					++_Wchars;	
				_First1 = _Mid1;
				break;

			default:
				return ((int)_Wchars);	
				}
			}

		return ((int)_Wchars);
		}

	virtual bool  do_always_noconv() const noexcept
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept
		{	
		return ((_Mode & (_Consume_header | _Generate_header)) != 0
			? 9 : 6);
		}

	virtual int  do_encoding() const noexcept
		{	
		return ((_Mode & (_Consume_header | _Generate_header)) != 0
			? -1 : 0);	
		}

private:
	unsigned long _Maxcode;	
	_Codecvt_mode _Mode;	
	};

		
template<>
	class __declspec(dllimport) codecvt<wchar_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef wchar_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
				&_State, &_Cvt))
			{	
			case -2:	
				_Mid1 = _Last1;
				return (_Ans);

			case -1:	
				return (error);

			case 0:	
				if (*_Mid2 == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Mid2;
				_Ans = ok;
			}
		return (_Ans);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			if ((int)5 <= _Last2 - _Mid2)
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else
					++_Mid1, _Mid2 += _Bytes;
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					break;
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, _Bytes);
					++_Mid1, _Mid2 += _Bytes;
					}
				}
		return (_Mid1 == _Last1 ? ok : partial);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			_Ans = error;	
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, _Bytes);
			_Mid2 += _Bytes;
			}
		return (_Ans);
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		;
		int _Wchars;
		const _Byte *_Mid1;
		_Statype _Mystate = _State;

		for (_Wchars = 0, _Mid1 = _First1;
			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
			{	
			int _Bytes;
			_Elem _Ch;

			switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
				&_Mystate, &_Cvt))
				{	
			case -2:	
				return (_Wchars);

			case -1:	
				return (_Wchars);

			case 0:	
				if (_Ch == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Wchars;
				}
			}
		return (_Wchars);
		}

	virtual bool  do_always_noconv() const noexcept
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept
		{	
		return (5);
		}

	virtual int  do_encoding() const noexcept
		{	
		return (0);	
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};

 
		
template<>
	class __declspec(dllimport) codecvt<unsigned short, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef unsigned short _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
				&_State, &_Cvt))
			{	
			case -2:	
				_Mid1 = _Last1;
				return (_Ans);

			case -1:	
				return (error);

			case 0:	
				if (*_Mid2 == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Mid2;
				_Ans = ok;
			}
		return (_Ans);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			if ((int)5 <= _Last2 - _Mid2)
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else
					++_Mid1, _Mid2 += _Bytes;
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					break;
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, _Bytes);
					++_Mid1, _Mid2 += _Bytes;
					}
				}
		return (_Mid1 == _Last1 ? ok : partial);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			_Ans = error;	
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, _Bytes);
			_Mid2 += _Bytes;
			}
		return (_Ans);
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		;
		int _Wchars;
		const _Byte *_Mid1;
		_Statype _Mystate = _State;

		for (_Wchars = 0, _Mid1 = _First1;
			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
			{	
			int _Bytes;
			_Elem _Ch;

			switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
				&_Mystate, &_Cvt))
				{	
			case -2:	
				return (_Wchars);

			case -1:	
				return (_Wchars);

			case 0:	
				if (_Ch == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Wchars;
				}
			}
		return (_Wchars);
		}

	virtual bool  do_always_noconv() const noexcept
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept
		{	
		return (5);
		}

	virtual int  do_encoding() const noexcept
		{	
		return (0);	
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};
 

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt_byname
		: public codecvt<_Elem, _Byte, _Statype>
	{	
public:
	explicit  codecvt_byname(const char *_Locname, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  codecvt_byname(const string& _Str, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~codecvt_byname() noexcept
		{	
		}
	};

		
 #pragma warning(push)
 #pragma warning(disable: 4275)

struct __declspec(dllimport) ctype_base
	: public locale::facet
	{	
	enum
		{	
		alnum = 0x04 | 0x02 | 0x01 | 0x100, alpha = 0x02 | 0x01 | 0x100,
		cntrl = 0x20, digit = 0x04, graph = 0x04 | 0x02 | 0x10 | 0x01 | 0x100,
		lower = 0x02, print = 0x04 | 0x02 | 0x10 | 0x40 | 0x01 | 0x100 | 0x80,
		punct = 0x10, space = 0x08 | 0x40 | 0x000, upper = 0x01,
		xdigit = 0x80, blank = 0x08 | 0x40 | 0x000 | 0x000};
	typedef short mask;	

	 ctype_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	 ~ctype_base() noexcept
		{	
		}
	};

 #pragma warning(pop)

		
template<class _Elem>
	class ctype
		: public ctype_base
	{	
public:
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype() noexcept
		{	
		if (_Ctype._Delfl)
			:: free((void *)_Ctype._Table);

		:: free(_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
			& _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
		return (_First);
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			return (_Ch);
		else
			return (widen((char)_Tolower(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				*_First = (widen((char)_Tolower(_Byte, &_Ctype)));
			}
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			return (_Ch);
		else
			return (widen((char)_Toupper(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				*_First = (widen((char)_Toupper(_Byte, &_Ctype)));
			}
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Byte;
		if (_Ch == (_Elem)0)
			return ('\0');
		else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
			return (_Dflt);
		else
			return (_Byte);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

		
template<class _Elem>
	locale::id ctype<_Elem>::id;

		
template<>
	class __declspec(dllimport) ctype<char>
	: public ctype_base
	{	
	typedef ctype<char> _Myt;

public:
	typedef char _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
		}

	const _Elem * is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Ctype._Table[(unsigned char)*_First];
		return (_First);
		}

	const _Elem * scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	const _Elem * scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const _Elem * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	_Elem  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(const mask *_Table = 0,
		bool _Deletetable = false,
		size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}

		_Tidy();	
		if (_Table != 0)
			{	
			_Ctype._Table = _Table;
			_Ctype._Delfl = _Deletetable ? -1 : 0;
			}
		else
			{	
			_Ctype._Table = classic_table();
			_Ctype._Delfl = 0;
			}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

	const mask * table() const noexcept
		{	
		return (_Ctype._Table);
		}

	static const mask *__cdecl classic_table() noexcept
		{	
		const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
		return (_Ctype_fac.table());
		}

	 static const size_t table_size =
		1 << 8;	

protected:
	virtual  ~ctype() noexcept
		{	
		_Tidy();
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		}

	void  _Tidy()
		{	
		if (0 < _Ctype._Delfl)
			:: free((void *)_Ctype._Table);
		else if (_Ctype._Delfl < 0)
			delete[] _Ctype._Table;

		:: free(_Ctype._LocaleName);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Byte);
		}

	virtual const _Elem * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		:: memcpy(_Dest, _First, _Last - _First);
		return (_Last);
		}

	virtual _Elem  do_narrow(_Elem _Ch, char) const
		{	
		return (_Ch);
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char, char *_Dest) const
		{	
		;
		:: memcpy(_Dest, _First, _Last - _First);
		return (_Last);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	};

		
template<>
	class __declspec(dllimport) ctype<wchar_t>
	: public ctype_base
	{	
	typedef ctype<wchar_t> _Myt;

public:
	typedef wchar_t _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype() noexcept
		{	
		if (_Ctype._Delfl)
			:: free((void *)_Ctype._Table);

		:: free(_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towlower(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towupper(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {};
		wchar_t _Wc;
		return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (wchar_t)((wint_t)(0xFFFF)) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Dowiden(*_First);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

 
		
template<>
	class __declspec(dllimport) ctype<unsigned short>
	: public ctype_base
	{	
	typedef ctype<unsigned short> _Myt;

public:
	typedef unsigned short _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype() noexcept
		{	
		if (_Ctype._Delfl)
			:: free((void *)_Ctype._Table);

		:: free(_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
			(const wchar_t *)_Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towlower(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towupper(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {};
		unsigned short _Wc;
		return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (unsigned short)((wint_t)(0xFFFF)) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Dowiden(*_First);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};
 

		
template<class _Elem>
	class ctype_byname
	: public ctype<_Elem>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~ctype_byname() noexcept
		{	
		}
	};

		
template<>
	class ctype_byname<char>
	: public ctype<char>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~ctype_byname() noexcept
		{	
		}
	};

 

  
template class __declspec(dllimport) codecvt<char, char, _Mbstatet>;
  
 
}
 
 #pragma warning(pop)
 #pragma pack(pop)










 

#pragma once





#pragma once











 
















 #pragma pack(push,8)
 #pragma warning(push,3)
 
 


 




namespace std {
		

enum class errc {	
	address_family_not_supported = 102,
	address_in_use = 100,
	address_not_available = 101,
	already_connected = 113,
	argument_list_too_long = 7,
	argument_out_of_domain = 33,
	bad_address = 14,
	bad_file_descriptor = 9,
	bad_message = 104,
	broken_pipe = 32,
	connection_aborted = 106,
	connection_already_in_progress = 103,
	connection_refused = 107,
	connection_reset = 108,
	cross_device_link = 18,
	destination_address_required = 109,
	device_or_resource_busy = 16,
	directory_not_empty = 41,
	executable_format_error = 8,
	file_exists = 17,
	file_too_large = 27,
	filename_too_long = 38,
	function_not_supported = 40,
	host_unreachable = 110,
	identifier_removed = 111,
	illegal_byte_sequence = 42,
	inappropriate_io_control_operation = 25,
	interrupted = 4,
	invalid_argument = 22,
	invalid_seek = 29,
	io_error = 5,
	is_a_directory = 21,
	message_size = 115,
	network_down = 116,
	network_reset = 117,
	network_unreachable = 118,
	no_buffer_space = 119,
	no_child_process = 10,
	no_link = 121,
	no_lock_available = 39,
	no_message_available = 120,
	no_message = 122,
	no_protocol_option = 123,
	no_space_on_device = 28,
	no_stream_resources = 124,
	no_such_device_or_address = 6,
	no_such_device = 19,
	no_such_file_or_directory = 2,
	no_such_process = 3,
	not_a_directory = 20,
	not_a_socket = 128,
	not_a_stream = 125,
	not_connected = 126,
	not_enough_memory = 12,
	not_supported = 129,
	operation_canceled = 105,
	operation_in_progress = 112,
	operation_not_permitted = 1,
	operation_not_supported = 130,
	operation_would_block = 140,
	owner_dead = 133,
	permission_denied = 13,
	protocol_error = 134,
	protocol_not_supported = 135,
	read_only_file_system = 30,
	resource_deadlock_would_occur = 36,
	resource_unavailable_try_again = 11,
	result_out_of_range = 34,
	state_not_recoverable = 127,
	stream_timeout = 137,
	text_file_busy = 139,
	timed_out = 138,
	too_many_files_open_in_system = 23,
	too_many_files_open = 24,
	too_many_links = 31,
	too_many_symbolic_link_levels = 114,
	value_too_large = 132,
	wrong_protocol_type = 136
	};

typedef errc _Errc;

		

enum class io_errc {	
	stream = 1
	};

typedef io_errc _Io_errc;

		
template<class _Enum>
	struct is_error_code_enum
		: public false_type
	{	
	};

template<>
	struct is_error_code_enum<_Io_errc>
		: public true_type
	{	
	};

 
template<class _Ty>
	constexpr bool is_error_code_enum_v = is_error_code_enum<_Ty>::value;
 

		
template<class _Enum>
	struct is_error_condition_enum
		: public false_type
	{	
	};

template<>
	struct is_error_condition_enum<_Errc>
		: public true_type
	{	
	};

 
template<class _Ty>
	constexpr bool is_error_condition_enum_v = is_error_condition_enum<_Ty>::value;
 

class error_code;
class error_condition;
error_code make_error_code(_Errc) noexcept;
error_code make_error_code(_Io_errc) noexcept;
error_condition make_error_condition(_Errc) noexcept;
error_condition make_error_condition(_Io_errc) noexcept;

		
class error_category;

const error_category& generic_category() noexcept;
const error_category& iostream_category() noexcept;
const error_category& system_category() noexcept;

class error_category
	{	
public:
	 error_category() noexcept	
		{	
		_Addr = reinterpret_cast<uintptr_t>(this);
		}

	virtual ~error_category() noexcept
		{	
		}

	virtual const char *name() const noexcept = 0;

	virtual string message(int _Errval) const = 0;

	virtual error_condition
		default_error_condition(int _Errval) const noexcept;

	virtual bool equivalent(int _Errval,
		const error_condition& _Cond) const noexcept;

	virtual bool equivalent(const error_code& _Code,
		int _Errval) const noexcept;

	bool operator==(const error_category& _Right) const noexcept
		{	
		return (_Addr == _Right._Addr);
		}

	bool operator!=(const error_category& _Right) const noexcept
		{	
		return (!(*this == _Right));
		}

	bool operator<(const error_category& _Right) const noexcept
		{	
		return (_Addr < _Right._Addr);
		}

	error_category(const error_category&) = delete;
	error_category& operator=(const error_category&) = delete;

protected:
	uintptr_t _Addr;

	enum : uintptr_t
		{	
		_Future_addr = 1,
		_Generic_addr = 3,
		_Iostream_addr = 5,
		_System_addr = 7
		};
	};

		
class error_code
	{	
public:
	typedef error_code _Myt;

	error_code() noexcept
		: _Myval(0),
			_Mycat(&system_category())
		{	
		}

	error_code(int _Val, const error_category& _Cat) noexcept
		: _Myval(_Val), _Mycat(&_Cat)
		{	
		}

	template<class _Enum,
		class = typename enable_if<is_error_code_enum<_Enum>::value,
			void>::type>
		error_code(_Enum _Errcode) noexcept
		: _Myval(0), _Mycat(0)
		{	
		*this = make_error_code(_Errcode);	
		}

	void assign(int _Val, const error_category& _Cat) noexcept
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum>
		typename enable_if<is_error_code_enum<_Enum>::value,
			error_code>::type& operator=(_Enum _Errcode) noexcept
		{	
		*this = make_error_code(_Errcode);	
		return (*this);
		}

	void clear() noexcept
		{	
		_Myval = 0;
		_Mycat = &system_category();
		}

	int value() const noexcept
		{	
		return (_Myval);
		}

	const error_category& category() const noexcept
		{	
		return (*_Mycat);
		}

	error_condition default_error_condition() const noexcept;

	string message() const
		{	
		return (category().message(value()));
		}

	explicit operator bool() const noexcept
		{	
		return (value() != 0);
		}

private:
	int _Myval;	
	const error_category *_Mycat;	
	};

		
class error_condition
	{	
public:
	typedef error_condition _Myt;

	error_condition() noexcept
		: _Myval(0),
			_Mycat(&generic_category())
		{	
		}

	error_condition(int _Val, const error_category& _Cat) noexcept
		: _Myval(_Val), _Mycat(&_Cat)
		{	
		}

	template<class _Enum,
		class = typename enable_if<is_error_condition_enum<_Enum>::value,
			void>::type>
		error_condition(_Enum _Errcode) noexcept
		: _Myval(0), _Mycat(0)
		{	
		*this = make_error_condition(_Errcode);	
		}

	void assign(int _Val, const error_category& _Cat) noexcept
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum>
		typename enable_if<is_error_condition_enum<_Enum>::value,
			error_condition>::type& operator=(_Enum _Errcode) noexcept
		{	
		*this = make_error_condition(_Errcode);	
		return (*this);
		}

	void clear() noexcept
		{	
		_Myval = 0;
		_Mycat = &generic_category();
		}

	int value() const noexcept
		{	
		return (_Myval);
		}

	const error_category& category() const noexcept
		{	
		return (*_Mycat);
		}

	string message() const
		{	
		return (category().message(value()));
		}

	explicit operator bool() const noexcept
		{	
		return (value() != 0);
		}

private:
	int _Myval;	
	const error_category *_Mycat;	
	};

		
inline bool operator==(
	const error_code& _Left,
	const error_code& _Right) noexcept
	{	
	return (_Left.category() == _Right.category()
		&& _Left.value() == _Right.value());
	}

inline bool operator==(
	const error_code& _Left,
	const error_condition& _Right) noexcept
	{	
	return (_Left.category().equivalent(_Left.value(), _Right)
		|| _Right.category().equivalent(_Left, _Right.value()));
	}

inline bool operator==(
	const error_condition& _Left,
	const error_code& _Right) noexcept
	{	
	return (_Right.category().equivalent(_Right.value(), _Left)
		|| _Left.category().equivalent(_Right, _Left.value()));
	}

inline bool operator==(
	const error_condition& _Left,
	const error_condition& _Right) noexcept
	{	
	return (_Left.category() == _Right.category()
		&& _Left.value() == _Right.value());
	}

		
inline bool operator!=(
	const error_code& _Left,
	const error_code& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

inline bool operator!=(
	const error_code& _Left,
	const error_condition& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

inline bool operator!=(
	const error_condition& _Left,
	const error_code& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

inline bool operator!=(
	const error_condition& _Left,
	const error_condition& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

		
inline bool operator<(
	const error_code& _Left,
	const error_code& _Right) noexcept
	{	
	return (_Left.category() < _Right.category()
		|| (_Left.category() == _Right.category()
			&& _Left.value() < _Right.value()));
	}

inline bool operator<(
	const error_condition& _Left,
	const error_condition& _Right) noexcept
	{	
	return (_Left.category() < _Right.category()
		|| (_Left.category() == _Right.category()
			&& _Left.value() < _Right.value()));
	}

		
inline error_condition
	error_category::default_error_condition(int _Errval) const noexcept
	{	
	return (error_condition(_Errval, *this));
	}

inline bool
	error_category::equivalent(int _Errval,
		const error_condition& _Cond) const noexcept
	{	
	return (default_error_condition(_Errval) == _Cond);
	}

inline bool
	error_category::equivalent(const error_code& _Code,
		int _Errval) const noexcept
	{	
	return (*this == _Code.category() && _Code.value() == _Errval);
	}

		
inline error_condition error_code::default_error_condition() const noexcept
	{	
	return (category().default_error_condition(value()));
	}

		
inline error_code make_error_code(_Errc _Errno) noexcept
	{	
	return (error_code((int)_Errno, generic_category()));
	}

inline error_code make_error_code(_Io_errc _Errno) noexcept
	{	
	return (error_code((int)_Errno, iostream_category()));
	}

		
inline error_condition make_error_condition(_Errc _Errno) noexcept
	{	
	return (error_condition((int)_Errno, generic_category()));
	}

inline error_condition make_error_condition(_Io_errc _Errno) noexcept
	{	
	return (error_condition((int)_Errno, iostream_category()));
	}

		
template<>
	struct hash<error_code>
	{	
	typedef error_code argument_type;
	typedef size_t result_type;

	size_t operator()(const argument_type& _Keyval) const
		{	
		return (hash<int>()(_Keyval.value()));
		}
	};

		
class _System_error
	: public runtime_error
	{	
private:
	static string _Makestr(error_code _Errcode, string _Message)
		{	
		if (!_Message.empty())
			_Message.append(": ");
		_Message.append(_Errcode.message());
		return (_Message);
		}

protected:
	_System_error(error_code _Errcode, const string& _Message)
		: runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode)
		{	
		}

	error_code _Mycode;	
	};

class system_error
	: public _System_error
	{	
private:
	typedef _System_error _Mybase;

public:
	system_error(error_code _Errcode)
		: _Mybase(_Errcode, "")
		{	
		}

	system_error(error_code _Errcode, const string& _Message)
		: _Mybase(_Errcode, _Message)
		{	
		}

	system_error(error_code _Errcode, const char *_Message)
		: _Mybase(_Errcode, _Message)
		{	
		}

	system_error(int _Errval, const error_category& _Errcat)
		: _Mybase(error_code(_Errval, _Errcat), "")
		{	
		}

	system_error(int _Errval, const error_category& _Errcat,
		const string& _Message)
		: _Mybase(error_code(_Errval, _Errcat), _Message)
		{	
		}

	system_error(int _Errval, const error_category& _Errcat,
		const char *_Message)
		: _Mybase(error_code(_Errval, _Errcat), _Message)
		{	
		}

	const error_code& code() const noexcept
		{	
		return (_Mycode);
		}

 

 






	};

__declspec(dllimport) const char *__cdecl _Syserror_map(int);
__declspec(dllimport) int __cdecl _Winerror_map(int);
__declspec(dllimport) unsigned long __cdecl _Winerror_message(
	unsigned long _Message_id, char *_Narrow, unsigned long _Size);

		
class _Generic_error_category
	: public error_category
	{	
public:
	_Generic_error_category() noexcept
		{	
		_Addr = _Generic_addr;
		}

	virtual const char *name() const noexcept
		{	
		return ("generic");
		}

	virtual string message(int _Errcode) const
		{	
		return (_Syserror_map(_Errcode));
		}
	};

		
class _Iostream_error_category
	: public _Generic_error_category
	{	
public:
	_Iostream_error_category() noexcept
		{	
		_Addr = _Iostream_addr;
		}

	virtual const char *name() const noexcept
		{	
		return ("iostream");
		}

	virtual string message(int _Errcode) const
		{	
		if (_Errcode == (int)io_errc::stream)
			return ("iostream stream error");
		else
			return (_Generic_error_category::message(_Errcode));
		}
	};

		
class _System_error_category
	: public error_category
	{	
public:
	_System_error_category() noexcept
		{	
		_Addr = _System_addr;
		}

	virtual const char *name() const noexcept
		{	
		return ("system");
		}

	virtual string message(int _Errcode) const
		{	
		const unsigned long _Size = 32767;
		string _Narrow(_Size, '\0');

		const unsigned long _Val = _Winerror_message(
			static_cast<unsigned long>(_Errcode), &_Narrow[0], _Size);

		if (_Val == 0)
			return ("unknown error");

		_Narrow.resize(_Val);
		_Narrow.shrink_to_fit();
		return (_Narrow);
		}

	virtual error_condition
		default_error_condition(int _Errval) const noexcept
		{	
		int _Posv = _Winerror_map(_Errval);

		if (_Posv != 0)
			return (error_condition(_Posv, generic_category()));
		else
			return (error_condition(_Errval, system_category()));
		}
	};

template<class _Ty>
	struct _Immortalizer
	{	
	_Immortalizer()
		{	
		::new (static_cast<void *>(&_Storage)) _Ty();
		}

	~_Immortalizer() noexcept
		{	
		}

	_Immortalizer(const _Immortalizer&) = delete;
	_Immortalizer& operator=(const _Immortalizer&) = delete;

	typename aligned_union<1, _Ty>::type _Storage;
	};

template<class _Ty> inline
	_Ty& _Immortalize()
	{	
	 static _Immortalizer<_Ty> _Static;
	return (*reinterpret_cast<_Ty *>(&_Static._Storage));
	}

inline const error_category& generic_category() noexcept
	{	
	return (_Immortalize<_Generic_error_category>());
	}

inline const error_category& iostream_category() noexcept
	{	
	return (_Immortalize<_Iostream_error_category>());
	}

inline const error_category& system_category() noexcept
	{	
	return (_Immortalize<_System_error_category>());
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)









 







#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4412)

 

namespace std {
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

 
 

 
 
 

		
template<class _Dummy>
	class _Iosb
	{	
public:
	enum _Dummy_enum {_Dummy_enum_val = 1};	
	enum _Fmtflags
		{	
		_Fmtmask = 0xffff, _Fmtzero = 0};

	static constexpr _Fmtflags skipws = (_Fmtflags)0x0001;
	static constexpr _Fmtflags unitbuf = (_Fmtflags)0x0002;
	static constexpr _Fmtflags uppercase = (_Fmtflags)0x0004;
	static constexpr _Fmtflags showbase = (_Fmtflags)0x0008;
	static constexpr _Fmtflags showpoint = (_Fmtflags)0x0010;
	static constexpr _Fmtflags showpos = (_Fmtflags)0x0020;
	static constexpr _Fmtflags left = (_Fmtflags)0x0040;
	static constexpr _Fmtflags right = (_Fmtflags)0x0080;
	static constexpr _Fmtflags internal = (_Fmtflags)0x0100;
	static constexpr _Fmtflags dec = (_Fmtflags)0x0200;
	static constexpr _Fmtflags oct = (_Fmtflags)0x0400;
	static constexpr _Fmtflags hex = (_Fmtflags)0x0800;
	static constexpr _Fmtflags scientific = (_Fmtflags)0x1000;
	static constexpr _Fmtflags fixed = (_Fmtflags)0x2000;

	static constexpr _Fmtflags hexfloat =
		(_Fmtflags)0x3000;	

	static constexpr _Fmtflags boolalpha = (_Fmtflags)0x4000;
	static constexpr _Fmtflags _Stdio = (_Fmtflags)0x8000;
	static constexpr _Fmtflags adjustfield = (_Fmtflags)(0x0040
		| 0x0080 | 0x0100);
	static constexpr _Fmtflags basefield = (_Fmtflags)(0x0200
		| 0x0400 | 0x0800);
	static constexpr _Fmtflags floatfield = (_Fmtflags)(0x1000
		| 0x2000);

	enum _Iostate
		{	
		_Statmask = 0x17};

	static constexpr _Iostate goodbit = (_Iostate)0x0;
	static constexpr _Iostate eofbit = (_Iostate)0x1;
	static constexpr _Iostate failbit = (_Iostate)0x2;
	static constexpr _Iostate badbit = (_Iostate)0x4;

	enum _Openmode
		{	
		_Openmask = 0xff};

	static constexpr _Openmode in = (_Openmode)0x01;
	static constexpr _Openmode out = (_Openmode)0x02;
	static constexpr _Openmode ate = (_Openmode)0x04;
	static constexpr _Openmode app = (_Openmode)0x08;
	static constexpr _Openmode trunc = (_Openmode)0x10;
	static constexpr _Openmode _Nocreate = (_Openmode)0x40;
	static constexpr _Openmode _Noreplace = (_Openmode)0x80;
	static constexpr _Openmode binary = (_Openmode)0x20;

	enum _Seekdir
		{	
		_Seekbeg,
		_Seekcur,
		_Seekend
		};

	static constexpr _Seekdir beg = _Seekbeg;
	static constexpr _Seekdir cur = _Seekcur;
	static constexpr _Seekdir end = _Seekend;

	enum
		{	
		_Openprot = 0x40};
	};

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags
		_Iosb<_Dummy>::hexfloat;	

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;

		
class __declspec(dllimport) ios_base
	: public _Iosb<int>
	{	
public:
	typedef int fmtflags;
	typedef int iostate;
	typedef int openmode;
	typedef int seekdir;

 
	typedef ::std:: streamoff streamoff;
	typedef ::std:: streampos streampos;
 

	enum event
		{	
		erase_event, imbue_event, copyfmt_event};

	typedef void (__cdecl *event_callback)(event, ios_base&, int);

 
	typedef unsigned int io_state, open_mode, seek_dir;
 

			
	class failure

		: public system_error
		{	
	public:
		explicit failure(const string &_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}

		explicit failure(const char *_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}


 

 






		};

			
	class __declspec(dllimport) Init
		{	
	public:
		 Init()
			{	
			_Init_ctor(this);
			}

		 ~Init() noexcept
			{	
			_Init_dtor(this);
			}

	private:
		static  void __cdecl _Init_ctor(Init *);
		static  void __cdecl _Init_dtor(Init *);

		 static int _Init_cnt;	

		static  int& __cdecl _Init_cnt_func();
		};

	explicit  operator bool() const
		{	
		return (!fail());
		}

	bool  operator!() const
		{	
		return (fail());
		}

	void  clear(iostate _State, bool _Reraise)
		{	
		_Mystate = (iostate)(_State & _Statmask);
		if ((_Mystate & _Except) == 0)
			;
		else if (_Reraise)
			throw;
		else if (_Mystate & _Except & badbit)
			throw failure("ios_base::badbit set");
		else if (_Mystate & _Except & failbit)
			throw failure("ios_base::failbit set");
		else
			throw failure("ios_base::eofbit set");
		}

	void  clear(iostate _State = goodbit)
		{	
		clear(_State, false);
		}

 
	void  clear(io_state _State)
		{	
		clear((iostate)_State);
		}
 

	iostate  rdstate() const
		{	
		return (_Mystate);
		}

	void  setstate(iostate _State, bool _Exreraise)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
		}

	void  setstate(iostate _State)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), false);
		}

 
	void  setstate(io_state _State)
		{	
		setstate((iostate)_State);
		}
 

	bool  good() const
		{	
		return (rdstate() == goodbit);
		}

	bool  eof() const
		{	
		return ((int)rdstate() & (int)eofbit);
		}

	bool  fail() const
		{	
		return (((int)rdstate()
			& ((int)badbit | (int)failbit)) != 0);
		}

	bool  bad() const
		{	
		return (((int)rdstate() & (int)badbit) != 0);
		}

	iostate  exceptions() const
		{	
		return (_Except);
		}

	void  exceptions(iostate _Newexcept)
		{	
		_Except = (iostate)((int)_Newexcept & (int)_Statmask);
		clear(_Mystate);
		}

 
	void  exceptions(io_state _State)
		{	
		exceptions((iostate)_State);
		}
 

	fmtflags  flags() const
		{	
		return (_Fmtfl);
		}

	fmtflags  flags(fmtflags _Newfmtflags)
		{	
		fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags)
		{	
		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)((int)_Fmtfl
			| ((int)_Newfmtflags & (int)_Fmtmask));
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags, fmtflags _Mask)
		{	
		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
			| ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
		return (_Oldfmtflags);
		}

	void  unsetf(fmtflags _Mask)
		{	
		_Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
		}

	streamsize  precision() const
		{	
		return (_Prec);
		}

	streamsize  precision(streamsize _Newprecision)
		{	
		streamsize _Oldprecision = _Prec;
		_Prec = _Newprecision;
		return (_Oldprecision);
		}

	streamsize  width() const
		{	
		return (_Wide);
		}

	streamsize  width(streamsize _Newwidth)
		{	
		streamsize _Oldwidth = _Wide;
		_Wide = _Newwidth;
		return (_Oldwidth);
		}

	locale  getloc() const
		{	
		return (*_Ploc);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = *_Ploc;
		*_Ploc = _Loc;
		_Callfns(imbue_event);
		return (_Oldlocale);
		}

	static int __cdecl xalloc()
		{	
		{ ::std:: _Lockit _Lock(2);	
			return (_Index++);
		}
		}

	long&  iword(int _Idx)
		{	
		return (_Findarr(_Idx)._Lo);
		}

	void *&  pword(int _Idx)
		{	
		return (_Findarr(_Idx)._Vp);
		}

	void  register_callback(event_callback _Pfn,
		int _Idx)
		{	
		_Calls = new _Fnarray(_Idx, _Pfn, _Calls);
		}

	ios_base&  copyfmt(const ios_base& _Other)
		{	
		if (this != &_Other)
			{	
			_Tidy();
			*_Ploc = *_Other._Ploc;
			_Fmtfl = _Other._Fmtfl;
			_Prec = _Other._Prec;
			_Wide = _Other._Wide;
			_Iosarray *_Ptr = _Other._Arr;

			for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
				if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
					{	
					iword(_Ptr->_Index) = _Ptr->_Lo;
					pword(_Ptr->_Index) = _Ptr->_Vp;
					}

			for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
				_Pfa = _Pfa->_Next)
				register_callback(_Pfa->_Pfn, _Pfa->_Index);

			_Callfns(copyfmt_event);	
			exceptions(_Other._Except);	
			}
		return (*this);
		}

	static bool __cdecl sync_with_stdio(bool _Newsync = true)
		{	
		{ ::std:: _Lockit _Lock(2);	
			const bool _Oldsync = _Sync;
			_Sync = _Newsync;
			return (_Oldsync);
		}
		}

	void  swap(ios_base& _Right)
		{	
		if (this != &_Right)
			{	
			::std:: swap(_Mystate, _Right._Mystate);
			::std:: swap(_Except, _Right._Except);
			::std:: swap(_Fmtfl, _Right._Fmtfl);
			::std:: swap(_Prec, _Right._Prec);
			::std:: swap(_Wide, _Right._Wide);

			::std:: swap(_Arr, _Right._Arr);
			::std:: swap(_Calls, _Right._Calls);
			::std:: swap(_Ploc, _Right._Ploc);
			}
		}

	virtual  ~ios_base() noexcept	
		{	
		_Ios_base_dtor(this);
		}

	static  void __cdecl
		_Addstd(ios_base *);	

	size_t _Stdstr;	

protected:
	 ios_base()
		{	
		}

	void  _Init()
		{	
		_Ploc = 0;
		_Stdstr = 0;
		_Except = goodbit;
		_Fmtfl = (fmtflags)(skipws | dec);
		_Prec = 6;
		_Wide = 0;
		_Arr = 0;
		_Calls = 0;
		clear(goodbit);
		_Ploc = new locale;
		}

private:
			
	struct _Iosarray
		: public _Crt_new_delete
		{	
	public:
		 _Iosarray(int _Idx, _Iosarray *_Link)
			: _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
			{	
			}

		_Iosarray *_Next;	
		int _Index;	
		long _Lo;	
		void *_Vp;	
		};

			
	struct _Fnarray
		: public _Crt_new_delete
		{	
		 _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
			: _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
			{	
			}

		_Fnarray *_Next;	
		int _Index;	
		event_callback _Pfn;	
		};

	void  _Callfns(event _Ev)
		{	
		for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
			(*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
		}

	_Iosarray&  _Findarr(int _Idx)
		{	
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
			if (_Ptr1->_Index == _Idx)
				return (*_Ptr1);	
			else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
				_Ptr2 = _Ptr1;	

		if (_Ptr2 != 0)
			{	
			_Ptr2->_Index = _Idx;
			return (*_Ptr2);
			}

		_Arr = new _Iosarray(_Idx, _Arr);	
		return (*_Arr);
		}

	void  _Tidy()
		{	
		_Callfns(erase_event);
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
			{	
			_Ptr2 = _Ptr1->_Next;
			delete _Ptr1;
			}
		_Arr = 0;

		_Fnarray *_Pfa1, *_Pfa2;
		for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
			{	
			_Pfa2 = _Pfa1->_Next;
			delete _Pfa1;
			}
		_Calls = 0;
		}

	iostate _Mystate;	
	iostate _Except;	
	fmtflags _Fmtfl;	
	streamsize _Prec;	
	streamsize _Wide;	
	_Iosarray *_Arr;	
	_Fnarray *_Calls;	
	locale *_Ploc;	

	 static int _Index;
	 static bool _Sync;

	static  void __cdecl
		_Ios_base_dtor(ios_base *);

public:
	ios_base(const ios_base&) = delete;
	ios_base& operator=(const ios_base&) = delete;
	};





}
 
 #pragma warning(pop)
 #pragma pack(pop)









 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4251)

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_streambuf
	{	
	typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
	 basic_streambuf()
		: _Plocale(new locale)
		{	
		_Init();
		}

	 basic_streambuf(_Uninitialized)
		{	
		}

	 basic_streambuf(const _Myt& _Right)
		: _Plocale(new locale(_Right.getloc()))
		{	
		_Init();
		setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
		setg(_Right.eback(), _Right.gptr(), _Right.egptr());
		}

	_Myt&  operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			pubimbue(_Right.getloc());
			}
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Elem *_Pfirst0 = pbase();
			_Elem *_Pnext0 = pptr();
			_Elem *_Pend = epptr();
			_Elem *_Gfirst0 = eback();
			_Elem *_Gnext0 = gptr();
			_Elem *_Gend = egptr();

			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			_Right.setp(_Pfirst0, _Pnext0, _Pend);

			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			_Right.setg(_Gfirst0, _Gnext0, _Gend);

			::std:: swap(_Plocale, _Right._Plocale);
			}
		}

public:
	typedef _Elem char_type;
	typedef _Traits traits_type;

	virtual  ~basic_streambuf() noexcept
		{	
		delete _Plocale;
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	pos_type  pubseekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekoff(_Off, _Way, _Mode));
		}

 
	pos_type  pubseekoff(off_type _Off,
		ios_base::seek_dir _Way,
		ios_base::open_mode _Mode)
		{	
		return (pubseekoff(_Off, (ios_base::seekdir)_Way,
			(ios_base::openmode)_Mode));
		}
 

	pos_type  pubseekpos(pos_type _Pos,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekpos(_Pos, _Mode));
		}

 
	pos_type  pubseekpos(pos_type _Pos,
		ios_base::open_mode _Mode)
		{	
		return (seekpos(_Pos, (ios_base::openmode)_Mode));
		}
 

	_Myt * pubsetbuf(_Elem *_Buffer,
		streamsize _Count)
		{	
		return (setbuf(_Buffer, _Count));
		}

	locale  pubimbue(const locale &_Newlocale)
		{	
		locale _Oldlocale = *_Plocale;
		imbue(_Newlocale);
		*_Plocale = _Newlocale;
		return (_Oldlocale);
		}

	locale  getloc() const
		{	
		return (*_Plocale);
		}

	streamsize  in_avail()
		{	
		streamsize _Res = _Gnavail();
		return (0 < _Res ? _Res : showmanyc());
		}

	int  pubsync()
		{	
		return (sync());
		}

	int_type  sbumpc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*_Gninc()) : uflow());
		}

	int_type  sgetc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*gptr()) : underflow());
		}

	streamsize  sgetn(_Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsgetn(_Ptr, _Count));
		}

	int_type  snextc()
		{	
		return (1 < _Gnavail()
			? _Traits::to_int_type(*_Gnpreinc())
			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
				? _Traits::eof() : sgetc());
		}

	int_type  sputbackc(_Elem _Ch)
		{	
		return (gptr() != 0 && eback() < gptr()
			&& _Traits::eq(_Ch, gptr()[-1])
			? _Traits::to_int_type(*_Gndec())
			: pbackfail(_Traits::to_int_type(_Ch)));
		}

 
	void  stossc()
		{	
		if (0 < _Gnavail())
			_Gninc();
		else
			uflow();
		}
 

	int_type  sungetc()
		{	
		return (gptr() != 0 && eback() < gptr()
			? _Traits::to_int_type(*_Gndec()) : pbackfail());
		}

	int_type  sputc(_Elem _Ch)
		{	
		return (0 < _Pnavail()
			? _Traits::to_int_type(*_Pninc() = _Ch)
			: overflow(_Traits::to_int_type(_Ch)));
		}

	streamsize  sputn(const _Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsputn(_Ptr, _Count));
		}

	virtual void  _Lock()
		{	
		}

	virtual void  _Unlock()
		{	
		}

protected:
	_Elem * eback() const
		{	
		return (*_IGfirst);
		}

	_Elem * gptr() const
		{	
		return (*_IGnext);
		}

	_Elem * pbase() const
		{	
		return (*_IPfirst);
		}

	_Elem * pptr() const
		{	
		return (*_IPnext);
		}

	_Elem * egptr() const
		{	
		return (*_IGnext + *_IGcount);
		}

	void  gbump(int _Off)
		{	
		*_IGcount -= _Off;
		*_IGnext += _Off;
		}

	void  setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IGfirst = _First;
		*_IGnext = _Next;
		*_IGcount = (int)(_Last - _Next);
		}

	_Elem * epptr() const
		{	
		return (*_IPnext + *_IPcount);
		}

	_Elem * _Gndec()
		{	
		++*_IGcount;
		return (--*_IGnext);
		}

	_Elem * _Gninc()
		{	
		--*_IGcount;
		return ((*_IGnext)++);
		}

	_Elem * _Gnpreinc()
		{	
		--*_IGcount;
		return (++(*_IGnext));
		}

	streamsize  _Gnavail() const
		{	
		return (*_IGnext != 0 ? *_IGcount : 0);
		}

	void  pbump(int _Off)
		{	
		*_IPcount -= _Off;
		*_IPnext += _Off;
		}

	void  setp(_Elem *_First, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _First;
		*_IPcount = (int)(_Last - _First);
		}

	void  setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _Next;
		*_IPcount = (int)(_Last - _Next);
		}

	_Elem * _Pninc()
		{	
		--*_IPcount;
		return ((*_IPnext)++);
		}

	streamsize  _Pnavail() const
		{	
		return (*_IPnext != 0 ? *_IPcount : 0);
		}

	void  _Init()
		{	
		_IGfirst = &_Gfirst;
		_IPfirst = &_Pfirst;
		_IGnext = &_Gnext;
		_IPnext = &_Pnext;
		_IGcount = &_Gcount;
		_IPcount = &_Pcount;
		setp(0, 0);
		setg(0, 0, 0);
		}

	void  _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
		_Elem **_Pf, _Elem **_Pn, int *_Pc)
		{	
		_IGfirst = _Gf;
		_IPfirst = _Pf;
		_IGnext = _Gn;
		_IPnext = _Pn;
		_IGcount = _Gc;
		_IPcount = _Pc;
		}

	virtual int_type  overflow(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual int_type  pbackfail(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual streamsize  showmanyc()
		{	
		return (0);
		}

	virtual int_type  underflow()
		{	
		return (_Traits::eof());
		}

	virtual int_type  uflow()
		{	
		return (_Traits::eq_int_type(_Traits::eof(), underflow())
			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
		}

	virtual streamsize  xsgetn(_Elem * _Ptr,
		streamsize _Count)
		{	
		int_type _Meta;
		streamsize _Size, _Copied;

		for (_Copied = 0; 0 < _Count; )
			if (0 < (_Size = _Gnavail()))
				{	
				if (_Count < _Size)
					_Size = _Count;
				_Traits::copy(_Ptr, gptr(), (size_t)_Size);
				_Ptr += _Size;
				_Copied += _Size;
				_Count -= _Size;
				gbump((int)_Size);
				}
			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
				break;	
			else
				{	
				*_Ptr++ = _Traits::to_char_type(_Meta);
				++_Copied;
				--_Count;
				}

		return (_Copied);
		}

	virtual streamsize  xsputn(const _Elem *_Ptr,
		streamsize _Count)
		{	
		streamsize _Size, _Copied;

		for (_Copied = 0; 0 < _Count; )
			if (0 < (_Size = _Pnavail()))
				{	
				if (_Count < _Size)
					_Size = _Count;
				_Traits::copy(pptr(), _Ptr, (size_t)_Size);
				_Ptr += _Size;
				_Copied += _Size;
				_Count -= _Size;
				pbump((int)_Size);
				}
			else if (_Traits::eq_int_type(_Traits::eof(),
				overflow(_Traits::to_int_type(*_Ptr))))
				break;	
			else
				{	
				++_Ptr;
				++_Copied;
				--_Count;
				}

		return (_Copied);
		}

	virtual pos_type  seekoff(off_type,
		ios_base::seekdir,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(_BADOFF));
		}

	virtual pos_type  seekpos(pos_type,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(_BADOFF));
		}

	virtual _Myt * setbuf(_Elem *, streamsize)
		{	
		return (this);
		}

	virtual int  sync()
		{	
		return (0);
		}

	virtual void  imbue(const locale&)
		{	
		}

private:
	_Elem *_Gfirst;	
	_Elem *_Pfirst;	
	_Elem **_IGfirst;	
	_Elem **_IPfirst;	
	_Elem *_Gnext;	
	_Elem *_Pnext;	
	_Elem **_IGnext;	
	_Elem **_IPnext;	

	int _Gcount;	
	int _Pcount;	
	int *_IGcount;	
	int *_IPcount;	

protected:
	locale *_Plocale;	
	};

 

  
template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;
  

  



 

		
template<class _Elem,
	class _Traits>
	class istreambuf_iterator
		: public iterator<input_iterator_tag,
			_Elem, typename _Traits::off_type, const _Elem *, _Elem>
	{	
	typedef istreambuf_iterator<_Elem, _Traits> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_streambuf<_Elem, _Traits> streambuf_type;
	typedef basic_istream<_Elem, _Traits> istream_type;

	typedef typename traits_type::int_type int_type;
	typedef const _Elem *pointer;

	constexpr istreambuf_iterator(streambuf_type *_Sb = 0) noexcept
		: _Strbuf(_Sb), _Got(_Sb == 0), _Val()
		{	
		}

	istreambuf_iterator(istream_type& _Istr) noexcept
		: _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
		{	
		}

	_Elem operator*() const
		{	
		if (!_Got)
			_Peek();

 




		return (_Val);
		}

	const _Elem *operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myt& operator++()
		{	
 




		_Inc();
		return (*this);
		}

	_Myt operator++(int)
		{	
		if (!_Got)
			_Peek();
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	bool equal(const _Myt& _Right) const
		{	
		if (!_Got)
			_Peek();
		if (!_Right._Got)
			_Right._Peek();
		return ((_Strbuf == 0 && _Right._Strbuf == 0)
			|| (_Strbuf != 0 && _Right._Strbuf != 0));
		}

private:
	void _Inc()
		{	
		if (_Strbuf == 0
			|| traits_type::eq_int_type(traits_type::eof(),
				_Strbuf->sbumpc()))
			_Strbuf = 0, _Got = true;
		else
			_Got = false;
		}

	_Elem _Peek() const
		{	
		int_type _Meta;
		if (_Strbuf == 0
			|| traits_type::eq_int_type(traits_type::eof(),
				_Meta = _Strbuf->sgetc()))
			_Strbuf = 0;
		else
			_Val = traits_type::to_char_type(_Meta);
		_Got = true;
		return (_Val);
		}

	mutable streambuf_type *_Strbuf;	
	mutable bool _Got;	
	mutable _Elem _Val;	
	};

template<class _Elem,
	class _Traits>
	struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
		: public true_type
	{	
	};

		
template<class _Elem,
	class _Traits> inline
	bool  operator==(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (_Left.equal(_Right));
	}

template<class _Elem,
	class _Traits> inline
	bool  operator!=(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (!(_Left == _Right));
	}

		
template<class _Elem,
	class _Traits>
	class ostreambuf_iterator
		: public _Outit
	{	
	typedef ostreambuf_iterator<_Elem, _Traits> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_streambuf<_Elem, _Traits> streambuf_type;
	typedef basic_ostream<_Elem, _Traits> ostream_type;

	ostreambuf_iterator(streambuf_type *_Sb) noexcept
		: _Failed(false), _Strbuf(_Sb)
		{	
		}

	ostreambuf_iterator(ostream_type& _Ostr) noexcept
		: _Failed(false), _Strbuf(_Ostr.rdbuf())
		{	
		}

	_Myt& operator=(_Elem _Right)
		{	
		if (_Strbuf == 0
			|| traits_type::eq_int_type(_Traits::eof(),
				_Strbuf->sputc(_Right)))
			_Failed = true;
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt& operator++(int)
		{	
		return (*this);
		}

	bool failed() const noexcept
		{	
		return (_Failed);
		}

private:
	bool _Failed;	
	streambuf_type *_Strbuf;	
	};

template<class _Elem,
	class _Traits>
	struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
		: public true_type
	{	
	};
}

 
 #pragma warning(pop)
 #pragma pack(pop)









 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189 4275)

		

 
extern "C" {
 

extern __declspec(dllimport) float __cdecl _Stofx(const char *,
	    char **,
	long, int *);
extern __declspec(dllimport) double __cdecl _Stodx(const char *,
	    char **,
	long, int *);
extern __declspec(dllimport) long double __cdecl _Stoldx(const char *,
	    char **,
	long, int *);
extern __declspec(dllimport) long __cdecl _Stolx(const char *,
	    char **,
	int, int *);
extern __declspec(dllimport) unsigned long __cdecl _Stoulx(const char *,
	    char **,
	int, int *);
extern __declspec(dllimport) long long __cdecl _Stollx(const char *,
	    char **,
	int, int *);
extern __declspec(dllimport) unsigned long long __cdecl _Stoullx(const char *,
	    char **,
	int, int *);

 
}
 

namespace std {

	
inline double _Stodx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
	{	
	int& _Errno_ref = (*_errno());	
	const int _Orig = _Errno_ref;

	_Errno_ref = 0;
	double _Val = :: strtod(_Str, _Endptr);
	*_Perr = _Errno_ref;
	_Errno_ref = _Orig;

	if (_Pten != 0)
		_Val *= :: pow(10.0, static_cast<double>(_Pten));

	return (_Val);
	}

	
inline float _Stofx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
	{	
	int& _Errno_ref = (*_errno());	
	const int _Orig = _Errno_ref;

	_Errno_ref = 0;
	float _Val = :: strtof(_Str, _Endptr);
	*_Perr = _Errno_ref;
	_Errno_ref = _Orig;

	if (_Pten != 0)
		_Val *= :: powf(10.0f, static_cast<float>(_Pten));

	return (_Val);
	}


template<class _Elem> inline
	size_t _Find_elem(_Elem *_Base, _Elem _Ch)
	{	
	_Elem *_Ptr = _Base;
	for (; *_Ptr != (_Elem)0 && *_Ptr != _Ch; ++_Ptr)
		;
	return ((size_t)(_Ptr - _Base));
	}

inline wchar_t *_Maklocwcs(const wchar_t *_Ptr)
	{	
	size_t _Count = :: wcslen(_Ptr) + 1;

	wchar_t *_Ptrdest = (wchar_t *)calloc(_Count, sizeof (wchar_t));

	if (!_Ptrdest)
		_Xbad_alloc();
	:: wmemcpy(_Ptrdest, _Ptr, _Count);
	return (_Ptrdest);
	}

		
template<class _Elem>
	class numpunct
		: public locale::facet
	{	
public:
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;
	typedef _Elem char_type;

	 __declspec(dllimport) static locale::id id;	

	_Elem decimal_point() const
		{	
		return (do_decimal_point());
		}

	_Elem thousands_sep() const
		{	
		return (do_thousands_sep());
		}

	string grouping() const
		{	
		return (do_grouping());
		}

	string_type falsename() const
		{	
		return (do_falsename());
		}

	string_type truename() const
		{	
		return (do_truename());
		}

	explicit numpunct(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
			if (_Kseparator == 0)
				_Kseparator =	
					_Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
		}
		}

	numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj, _Isdef);
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new numpunct<_Elem>(
				_Locinfo(_Ploc->c_str()), 0, true);
		return (4);
		}

protected:
	virtual  ~numpunct() noexcept
		{	
		_Tidy();
		}

	numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj, _Isdef);
		}
		}

	template<class _Elem2>
		void _Getvals(_Elem2, const lconv *_Ptr, _Locinfo::_Cvtvec _Cvt)
		{	
		_Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem2 *)0, _Cvt);
		_Kseparator = _Maklocchr(_Ptr->thousands_sep[0], (_Elem2 *)0, _Cvt);
		}

	template<>
		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)
		{	
		_Dp = (_Elem)_Ptr->_W_decimal_point[0];
		_Kseparator = (_Elem)_Ptr->_W_thousands_sep[0];
		}

	void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
		{	
		const lconv *_Ptr = _Lobj._Getlconv();
		_Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();	

		_Grouping = 0;
		_Falsename = 0;
		_Truename = 0;

		try {
		_Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt());
		_Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Cvt);
		_Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Cvt);
		} catch (...) {
		_Tidy();
		throw;
		}

		if (_Isdef)
			{	

			_Dp = _Maklocchr('.', (_Elem *)0, _Cvt);
			_Kseparator = _Maklocchr(',', (_Elem *)0, _Cvt);
			}
		else
			_Getvals((_Elem)0, _Ptr, _Cvt);
		}

	virtual _Elem  do_decimal_point() const
		{	
		return (_Dp);
		}

	virtual _Elem  do_thousands_sep() const
		{	
		return (_Kseparator);
		}

	virtual string  do_grouping() const
		{	
		return (string(_Grouping));
		}

	virtual string_type  do_falsename() const
		{	
		return (string_type(_Falsename));
		}

	virtual string_type  do_truename() const
		{	
		return (string_type(_Truename));
		}

private:
	void _Tidy()
		{	
		:: free((void *)_Grouping);
		:: free((void *)_Falsename);
		:: free((void *)_Truename);
		}

	const char *_Grouping;	
	_Elem _Dp;	
	_Elem _Kseparator;	
	const _Elem *_Falsename;	
	const _Elem *_Truename;	
	};

		
template<class _Elem>
	class numpunct_byname
		: public numpunct<_Elem>
	{	
public:
	explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
		: numpunct<_Elem>(_Locname, _Refs)
		{	
		}

	explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
		: numpunct<_Elem>(_Str.c_str(), _Refs)
		{	
		}

protected:
	virtual  ~numpunct_byname() noexcept
		{	
		}
	};

		
template<class _Elem>
	 locale::id numpunct<_Elem>::id;

		
template<class _Elem,
	class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_get
		: public locale::facet
	{	
public:
	typedef numpunct<_Elem> _Mypunct;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		_Mystr;

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new num_get<_Elem, _InIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_get() noexcept
		{	
		}

	void _Init(const _Locinfo&)
		{	
		}

public:
	explicit  num_get(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _InIt iter_type;

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			bool& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

protected:
	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			bool& _Val) const
		{	
		;
		int _Ans = -1;	

		if (_Iosbase.flags() & ios_base::boolalpha)
			{	
			typedef typename _Mystr::size_type _Mystrsize;
			const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
			_Mystr _Str((_Mystrsize)1, (char_type)0);
			_Str += _Punct_fac.falsename();
			_Str += (char_type)0;
			_Str += _Punct_fac.truename();	
			_Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
			}
		else
			{	
			char _Ac[32], *_Ep;
			int _Errno = 0;
			const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
				_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
					_Iosbase.getloc()), &_Errno);
			if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
				_Ans = _Ulo;
			}

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ans < 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans != 0;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
			_Iosbase.getloc());	
		char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;	
		const unsigned long _Ans =
			:: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ptr || _Errno != 0 || 0xffff < _Ans)
			_State |= ios_base::failbit;
		else
			_Val = (unsigned short)(_Ac[0] == '-'
				? 0 -_Ans : _Ans);	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
			_Iosbase.getloc());	
		char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;	
		const unsigned long _Ans =
			:: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ptr || _Errno != 0 || 0xffffffff < _Ans)
			_State |= ios_base::failbit;
		else
			_Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const long _Ans = :: _Stolx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const long long _Ans = :: _Stollx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const unsigned long long _Ans = :: _Stoullx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}







	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		;
		char _Ac[(8 + 768 + 16)], *_Ep;
		int _Errno = 0;
		int _Hexexp = 1000000000;
		float _Ans = _Stofx_v2(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 1000000000 && _Hexexp != 0)
			_Ans = :: ldexpf(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		;
		char _Ac[(8 + 768 + 16)], *_Ep;
		int _Errno = 0;
		int _Hexexp = 1000000000;
		double _Ans = _Stodx_v2(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 1000000000 && _Hexexp != 0)
			_Ans = :: ldexp(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		;
		char _Ac[(8 + 768 + 16)], *_Ep;
		int _Errno = 0;
		int _Hexexp = 1000000000;
		long double _Ans = _Stodx_v2(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 1000000000 && _Hexexp != 0)
			_Ans = :: ldexpl(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}



	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;

		int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
			_Iosbase.getloc());	
		const unsigned long long _Ans =
			(sizeof (void *) == sizeof (unsigned long))
				? (unsigned long long):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
				: :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = (void *)((char *)0 + _Ans);	
		return (_First);
		}

private:
	int __cdecl _Getifld(char *_Ac,
		_InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
			const locale& _Loc) const
		{	
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Grouping.size() == 0
			? (_Elem)0 : _Punct_fac.thousands_sep();

		enum {
			_NUMGET_SIGNOFF = 22,
			_NUMGET_XOFF = 24};
		static const char _Src[] = {"0123456789ABCDEFabcdef-+Xx"};	
		_Elem _Atoms[sizeof (_Src)];
		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Loc);
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		char *_Ptr = _Ac;

		if (_First == _Last)
			;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF])
			*_Ptr++ = '-', ++_First;	

		_Basefield &= ios_base::basefield;
		int _Base = _Basefield == ios_base::oct ? 8
			: _Basefield == ios_base::hex ? 16
			: _Basefield == ios_base::_Fmtzero ? 0 : 10;

		bool _Seendigit = false;	
		bool _Nonzero = false;	

		if (_First != _Last && *_First == _Atoms[0])
			{	
			_Seendigit = true, ++_First;
			if (_First != _Last && (*_First == _Atoms[_NUMGET_XOFF + 1]
					|| *_First == _Atoms[_NUMGET_XOFF])
				&& (_Base == 0 || _Base == 16))
				_Base = 16, _Seendigit = false, ++_First;
			else if (_Base == 0)
				_Base = 8;
			}

		size_t _Dlen = _Base == 0 || _Base == 10 ? 10
			: _Base == 8 ? 8 : 16 + 6;
		string _Groups((size_t)1, (char)_Seendigit);
		size_t _Group = 0;

		for (char *const _Pe = &_Ac[32 - 1];
			_First != _Last; ++_First)
			{	
			size_t _Idx = _Find_elem(_Atoms, *_First);
			if (_Idx < _Dlen)
				{	
				*_Ptr = _Src[_Idx];
				if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
					++_Ptr, _Nonzero = true;
				_Seendigit = true;
				if (_Groups[_Group] != 127)
					++_Groups[_Group];
				}
			else if (_Groups[_Group] == '\0'
				|| _Kseparator == (_Elem)0
				|| *_First != _Kseparator)
				break;	
			else
				{	
				_Groups.append((string::size_type)1, '\0');
				++_Group;
				}
			}

		if (_Group == 0)
			;	
		else if ('\0' < _Groups[_Group])
			++_Group;	
		else
			_Seendigit = false;	

		for (const char *_Pg = &_Grouping[0]; _Seendigit && 0 < _Group; )
			if (*_Pg == 127)
				break;	
			else if ((0 < --_Group && *_Pg != _Groups[_Group])
				|| (0 == _Group && *_Pg < _Groups[_Group]))
				_Seendigit = false;	
			else if ('\0' < _Pg[1])
				++_Pg;	

		if (_Seendigit && !_Nonzero)
			*_Ptr++ = '0';	
		else if (!_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Base);
		}

	int __cdecl _Getffld(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
			return (_Getffldx(_Ac, _First, _Last,
				_Iosbase, _Phexexp));	

		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		char *_Ptr = _Ac;
		bool _Bad = false;
		bool _Sticky = false;

		enum {
			_NUMGET_SIGNOFF = 10,
			_NUMGET_EOFF = 12};
		static const char _Src[] = {"0123456789-+Ee"};	
		_Elem _Atoms[sizeof (_Src)];
		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		if (_First == _Last)
			;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF])
			*_Ptr++ = '-', ++_First;	

		char *_Leading = _Ptr;	
		*_Ptr++ = '0';	

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Pten = 0;	
		size_t _Idx;

		const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

		const char *_Pg = &_Grouping[0];
		if (*_Pg == 127 || *_Pg <= '\0')
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
					_Seendigit = true, ++_First)
				if (_Max_sig_dig <= _Significant)
					{	
					++_Pten;
					if (0 < _Idx)
						_Sticky = true;
					}
				else if (_Idx == 0 && _Significant == 0)
					;	
				else
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
					{	
					_Seendigit = true;
					if (_Max_sig_dig <= _Significant)
						{	
						++_Pten;
						if (0 < _Idx)
							_Sticky = true;
						}
					else if (_Idx == 0 && _Significant == 0)
						;	
					else
						{	
						*_Ptr++ = _Src[_Idx];
						++_Significant;
						}
					if (_Groups[_Group] != 127)
						++_Groups[_Group];
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					break;	
				else
					{	
					_Groups.append((size_t)1, '\0');
					++_Group;
					}
			if (_Group == 0)
				;	
			else if ('\0' < _Groups[_Group])
				++_Group;	
			else
				_Bad = true;	

			while (!_Bad && 0 < _Group)
				if (*_Pg == 127)
					break;	
				else if ((0 < --_Group && *_Pg != _Groups[_Group])
					|| (0 == _Group && *_Pg < _Groups[_Group]))
					_Bad = true;	
				else if ('\0' < _Pg[1])
					++_Pg;	
			}

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			*_Ptr++ = localeconv()->decimal_point[0], ++_First;	

		if (*_Phexexp != 1000000000 && _Significant == 0)
			{	
			for (; _First != _Last && *_First == _Atoms[0];
				_Seendigit = true, ++_First)
				--_Pten;	
			if (_Pten < 0)
				*_Ptr++ = '0', ++_Pten;	
			}

		for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
				_Seendigit = true, ++_First)
			if (_Significant < _Max_sig_dig)
				{	
				*_Ptr++ = _Src[_Idx];
				++_Significant;
				}
			else if (0 < _Idx)
				_Sticky = true;	

		if (_Sticky)
			{	
			char *_Px = _Ptr;
			for (; --_Px != _Leading; )
				{	
				if (*_Px == localeconv()->decimal_point[0])
					;	
				else if (*_Px != '9')
					{	
					++*_Px;
					break;
					}
				else
					*_Px = '0';	
				}

			if (_Px == _Leading)
				{	
				*_Px = '1';
				++_Pten;
				}
			}

		if (_Seendigit && _First != _Last
			&& (*_First == _Atoms[_NUMGET_EOFF + 1]
				|| *_First == _Atoms[_NUMGET_EOFF]))
			{	
			*_Ptr++ = 'e', ++_First;
			_Seendigit = false, _Significant = 0;

			if (_First == _Last)
				;	
			else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
				*_Ptr++ = '+', ++_First;	
			else if (*_First == _Atoms[_NUMGET_SIGNOFF])
				*_Ptr++ = '-', ++_First;	
			for (; _First != _Last && *_First == _Atoms[0]; )
				_Seendigit = true, ++_First;	
			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
				_Seendigit = true, ++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Pten);
		}

	int __cdecl _Getffldx(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();

		enum {
			_NUMGET_SIGNOFF = 22,
			_NUMGET_XOFF = 24,
			_NUMGET_POFF = 26};
		static const char _Src[] = {"0123456789ABCDEFabcdef-+XxPp"};	
		_Elem _Atoms[sizeof (_Src)];
		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		char *_Ptr = _Ac;
		bool _Bad = false;
		size_t _Idx;

		if (_First == _Last)
			;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF])
			*_Ptr++ = '-', ++_First;	

		*_Ptr++ = '0';
		*_Ptr++ = 'x';

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Phex = 0;	

		if (_First == _Last || *_First != _Atoms[0])
			;
		else if (++_First != _Last
			&& (*_First == _Atoms[_NUMGET_XOFF + 1]
				|| *_First == _Atoms[_NUMGET_XOFF]))
			++_First;	
		else
			_Seendigit = true;	

		const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

		const char *_Pg = &_Grouping[0];
		if (*_Pg == 127 || *_Pg <= '\0')
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
					_Seendigit = true, ++_First)
				if (_Max_sig_dig <= _Significant)
					++_Phex;	
				else if (_Idx == 0 && _Significant == 0)
					;	
				else
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				if ((_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF)
					{	
					_Seendigit = true;
					if (_Max_sig_dig <= _Significant)
						++_Phex;	
					else if (_Idx == 0 && _Significant == 0)
						;	
					else
						{	
						*_Ptr++ = _Src[_Idx];
						++_Significant;
						}
					if (_Groups[_Group] != 127)
						++_Groups[_Group];
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					break;	
				else
					{	
					_Groups.append((size_t)1, '\0');
					++_Group;
					}
			if (_Group == 0)
				;	
			else if ('\0' < _Groups[_Group])
				++_Group;	
			else
				_Bad = true;	

			while (!_Bad && 0 < _Group)
				if (*_Pg == 127)
					break;	
				else if ((0 < --_Group && *_Pg != _Groups[_Group])
					|| (0 == _Group && *_Pg < _Groups[_Group]))
					_Bad = true;	
				else if ('\0' < _Pg[1])
					++_Pg;	
			}

		if (_Seendigit && _Significant == 0)
			*_Ptr++ = '0';	

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			*_Ptr++ = localeconv()->decimal_point[0], ++_First;	

		if (_Significant == 0)
			{	
			for (; _First != _Last && *_First == _Atoms[0];
				_Seendigit = true, ++_First)
				--_Phex;	
			if (_Phex < 0)
				*_Ptr++ = '0', ++_Phex;	
			}

		for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
				_Seendigit = true, ++_First)
			if (_Significant < _Max_sig_dig)
				{	
				*_Ptr++ = _Src[_Idx];
				++_Significant;
				}

		if (_Seendigit && _First != _Last
			&& (*_First == _Atoms[_NUMGET_POFF + 1]
				|| *_First == _Atoms[_NUMGET_POFF]))
			{	
			*_Ptr++ = 'p', ++_First;
			_Seendigit = false, _Significant = 0;

			if (_First == _Last)
				;	
			else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
				*_Ptr++ = '+', ++_First;	
			else if (*_First == _Atoms[_NUMGET_SIGNOFF])
				*_Ptr++ = '-', ++_First;	
			for (; _First != _Last && *_First == _Atoms[0]; )
				_Seendigit = true, ++_First;	
			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
				_Seendigit = true, ++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		*_Phexexp = _Phex;	
		return (0);	
		}



	};

		
template<class _Elem,
	class _InIt>
	 locale::id num_get<_Elem, _InIt>::id;

		
template<class _Elem,
	class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_put
		: public locale::facet
	{	
public:
	typedef numpunct<_Elem> _Mypunct;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		_Mystr;

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new num_put<_Elem, _OutIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_put() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

public:
	explicit  num_put(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _OutIt iter_type;

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, bool _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

protected:
	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, bool _Val) const
		{	
		;
		if (!(_Iosbase.flags() & ios_base::boolalpha))
			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
		else
			{	
			const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
			_Mystr _Str;
			if (_Val)
				_Str.assign(_Punct_fac.truename());
			else
				_Str.assign(_Punct_fac.falsename());

			size_t _Fillcount = _Iosbase.width() <= 0
				|| (size_t)_Iosbase.width() <= _Str.size()
					? 0 : (size_t)_Iosbase.width() - _Str.size();

			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
				{	
				_Dest = _Rep(_Dest, _Fill, _Fillcount);
				_Fillcount = 0;
				}
			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	
			_Iosbase.width(0);
			return (_Rep(_Dest, _Fill, _Fillcount));	
			}
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		string _Buf;
		char _Fmt[8];
		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
			== ios_base::fixed;
		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
			? 6 : _Iosbase.precision();	
		size_t _Bufsize = (size_t)_Precision;
		if (_Isfixed && 1e10 < :: fabs(_Val))
			{	
			int _Ptwo;
			(void):: frexp(_Val, &_Ptwo);
			_Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
			}
		_Buf.resize(_Bufsize + 50);	

		int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
			_Ffmt(_Fmt, 0, _Iosbase.flags()), (int)_Precision, _Val);

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		string _Buf;
		char _Fmt[8];
		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
			== ios_base::fixed;
		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
			? 6 : _Iosbase.precision();	
		size_t _Bufsize = (size_t)_Precision;
		if (_Isfixed && 1e10 < :: fabsl(_Val))
			{	
			int _Ptwo;
			(void):: frexpl(_Val, &_Ptwo);
			_Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
			}
		_Buf.resize(_Bufsize + 50);	

		int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
			_Ffmt(_Fmt, 'L', _Iosbase.flags()), (int)_Precision, _Val);

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		char _Buf[2 * 32];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
		}

private:
	char *__cdecl _Ffmt(char *_Fmt,
		char _Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showpoint)
			*_Ptr++ = '#';
		*_Ptr++ = '.';
		*_Ptr++ = '*';	
		if (_Spec != '\0')
			*_Ptr++ = _Spec;	

		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
		if (_Flags & ios_base::uppercase)
			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
				: _Ffl == ios_base::hexfloat ? 'A'	
				: _Ffl == ios_base::scientific ? 'E' : 'G';	
		else
			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
				: _Ffl == ios_base::hexfloat ? 'a'	
				: _Ffl == ios_base::scientific ? 'e' : 'g';	

		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Fput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
			size_t _Count) const
		{	
		;
		size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
			? 1 : 0;

		const char *_Exps;
		if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)
			_Exps = "eE";
		else
			{	
			_Exps = "pP";
			if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
				&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
				_Prefix += 2;
			}
		const size_t _Eoff =
			:: strcspn(&_Buf[0], _Exps);	
		char _Dp[2] = {"."};
		_Dp[0] = :: localeconv()->decimal_point[0];
		const size_t _Poff =
			:: strcspn(&_Buf[0], &_Dp[0]);	

		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Mystr _Groupstring(_Count, _Elem(0));	
		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Punct_fac.thousands_sep();

		if (_Poff != _Count)
			_Groupstring[_Poff] = _Punct_fac.decimal_point();

		size_t _Off = _Poff == _Count ? _Eoff : _Poff;
		const char *_Pg = &_Grouping[0];
		while (*_Pg != 127 && '\0' < *_Pg
			&& (size_t)*_Pg < _Off - _Prefix)
			{	
			_Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
			if ('\0' < _Pg[1])
				++_Pg;	
			}

		_Count = _Groupstring.size();
		size_t _Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Count
				? 0 : (size_t)_Iosbase.width() - _Count;

		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	char *__cdecl _Ifmt(char *_Fmt,
		const char *_Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showbase)
			*_Ptr++ = '#';
		if (_Spec[0] != 'L')
			*_Ptr++ = _Spec[0];	
		else

			{	
			*_Ptr++ = 'I';
			*_Ptr++ = '6';
			*_Ptr++ = '4';
			}

		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
			: _Basefield != ios_base::hex ? _Spec[1]	
			: _Flags & ios_base::uppercase ? 'X' : 'x';
		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Iput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
		{	
		;
		size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
			? 1 : 0;
		if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
			&& _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
			&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
			_Prefix += 2;

		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Mystr _Groupstring(_Count, _Elem(0));	
		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const char *_Pg = &_Grouping[0];
		if (*_Pg != 127 && '\0' < *_Pg)
			{	
			const _Elem _Kseparator = _Punct_fac.thousands_sep();
			while (*_Pg != 127 && '\0' < *_Pg
				&& (size_t)*_Pg < _Count - _Prefix)
				{	
				_Count -= *_Pg;
				_Groupstring.insert(_Count, 1, _Kseparator);
				if ('\0' < _Pg[1])
					++_Pg;	
				}
			}

		_Count = _Groupstring.size();
		size_t _Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Count
				? 0 : (size_t)_Iosbase.width() - _Count;

		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	_OutIt __cdecl _Put(_OutIt _Dest,
		const _Elem *_Ptr, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)
			*_Dest = *_Ptr;
		return (_Dest);
		}

	_OutIt __cdecl _Rep(_OutIt _Dest,
		_Elem _Ch, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, (void)++_Dest)
			*_Dest = _Ch;
		return (_Dest);
		}
	};

		
template<class _Elem,
	class _OutIt>
	 locale::id num_put<_Elem, _OutIt>::id;

 

  
template  locale::id numpunct<char>::id;
template class __declspec(dllimport) num_get<char,
	istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) num_put<char,
	ostreambuf_iterator<char, char_traits<char> > >;

template  locale::id numpunct<wchar_t>::id;
template class __declspec(dllimport) num_get<wchar_t,
	istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) num_put<wchar_t,
	ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
  

  






 
}
 
 #pragma warning(pop)
 #pragma pack(pop)










 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189)

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_ios
		: public ios_base
	{	
public:
	typedef basic_ios<_Elem, _Traits> _Myt;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ctype<_Elem> _Ctype;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_ios(_Mysb *_Strbuf)
		{	
		init(_Strbuf);
		}

	virtual  ~basic_ios() noexcept
		{	
		}

	void  clear(iostate _State = goodbit,
		bool _Reraise = false)
		{	
		ios_base::clear((iostate)(_Mystrbuf == 0
			? (int)_State | (int)badbit : (int)_State), _Reraise);
		}

 
	void  clear(io_state _State)
		{	
		clear((iostate)_State);
		}
 

	void  setstate(iostate _State,
		bool _Reraise = false)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), _Reraise);
		}

 
	void  setstate(io_state _State)
		{	
		setstate((iostate)_State);
		}
 

	_Myt&  copyfmt(const _Myt& _Right)
		{	
		_Tiestr = _Right.tie();
		_Fillch = _Right.fill();
		ios_base::copyfmt(_Right);
		return (*this);
		}

	_Myos * tie() const
		{	
		return (_Tiestr);
		}

	_Myos * tie(_Myos *_Newtie)
		{	
		_Myos *_Oldtie = _Tiestr;
		_Tiestr = _Newtie;
		return (_Oldtie);
		}

	_Mysb * rdbuf() const
		{	
		return (_Mystrbuf);
		}

	_Mysb * rdbuf(_Mysb *_Strbuf)
		{	
		_Mysb *_Oldstrbuf = _Mystrbuf;
		_Mystrbuf = _Strbuf;
		clear();
		return (_Oldstrbuf);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = ios_base::imbue(_Loc);
		if (rdbuf() != 0)
			rdbuf()->pubimbue(_Loc);
		return (_Oldlocale);
		}

	_Elem  fill() const
		{	
		return (_Fillch);
		}

	_Elem  fill(_Elem _Newfill)
		{	
		_Elem _Oldfill = _Fillch;
		_Fillch = _Newfill;
		return (_Oldfill);
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
		return (_Ctype_fac.narrow(_Ch, _Dflt));
		}

	_Elem  widen(char _Byte) const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
		return (_Ctype_fac.widen(_Byte));
		}

	void  move(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mystrbuf = 0;
			_Tiestr = 0;
			this->swap(_Right);
			}
		}

	void  move(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Mystrbuf = 0;
			_Tiestr = 0;
			this->swap(_Right);
			}
		}

	void  swap(_Myt& _Right) noexcept
		{	
		ios_base::swap(_Right);
		::std:: swap(_Fillch, _Right._Fillch);
		::std:: swap(_Tiestr, _Right._Tiestr);
		}

	void  set_rdbuf(_Mysb *_Strbuf)
		{	
		_Mystrbuf = _Strbuf;
		}

protected:
	void  init(_Mysb *_Strbuf = 0,
		bool _Isstd = false)
		{	
		_Init();	
		_Mystrbuf = _Strbuf;
		_Tiestr = 0;
		_Fillch = widen(' ');

		if (_Mystrbuf == 0)
			setstate(badbit);

		if (_Isstd)
			_Addstd(this);	
		}

	 basic_ios()
		{	
		}

private:
	_Mysb *_Mystrbuf;	
	_Myos *_Tiestr;	
	_Elem _Fillch;	

public:
	 basic_ios(const _Myt&) = delete;
	_Myt&  operator=(const _Myt&) = delete;
	};

 

  
template class __declspec(dllimport) basic_ios<char,
	char_traits<char> >;
template class __declspec(dllimport) basic_ios<wchar_t,
	char_traits<wchar_t> >;
  

  



 

		
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl dec(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::dec, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::fixed, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl hex(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::hex, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl hexfloat(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
	return (_Iosbase);
	}


namespace tr1 {	
using ::std:: hexfloat;
}	


inline ios_base& __cdecl internal(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::internal, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl left(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::left, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::uppercase);
	return (_Iosbase);
	}

inline ios_base& __cdecl oct(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::oct, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl right(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::right, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::scientific, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::uppercase);
	return (_Iosbase);
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)









 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189 4390)

namespace std {
		

 
 

 



 



 





 #pragma vtordisp(push, 2)	

		
template<class _Elem,
	class _Traits>
	class basic_ostream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_ostream<_Elem, _Traits> _Myt;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
	typedef num_put<_Elem, _Iter> _Nput;

	explicit  basic_ostream(
		basic_streambuf<_Elem, _Traits> *_Strbuf,

		bool _Isstd = false)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_ostream(_Uninitialized, bool _Addit = true)
		{	
		if (_Addit)
			this->_Addstd(this);	
		}

protected:
	 basic_ostream(_Myt&& _Right)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			_Myios::swap(_Right);
		}

public:
	 basic_ostream(const _Myt&) = delete;
	_Myt&  operator=(const _Myt&) = delete;

	virtual  ~basic_ostream() noexcept
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	class _Sentry_base
		{	
	public:
		 _Sentry_base(_Myt& _Ostr)
			: _Myostr(_Ostr)
			{	
			if (_Myostr.rdbuf() != 0)
				_Myostr.rdbuf()->_Lock();
			}

		 ~_Sentry_base() noexcept
			{	
			if (_Myostr.rdbuf() != 0)
				_Myostr.rdbuf()->_Unlock();
			}

		_Myt& _Myostr;	

	private:
		_Sentry_base& operator=(const _Sentry_base&);
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(_Myt& _Ostr)
			: _Sentry_base(_Ostr)
			{	
			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)
				_Ostr.tie()->flush();
			_Ok = _Ostr.good();	
			}

		 ~sentry() noexcept
			{	
 
			if (!::std:: uncaught_exception())
				this->_Myostr._Osfx();

 


			}

		explicit  operator bool() const
			{	
			return (_Ok);
			}

		 sentry(const sentry&) = delete;
		sentry&  operator=(const sentry&) = delete;

	private:
		bool _Ok;	
		};

	bool  opfx()
		{	
		if (this->good() && _Myios::tie() != 0 && _Myios::tie() != this)
			_Myios::tie()->flush();
		return (this->good());
		}

	void  osfx()
		{	
		_Osfx();
		}

	void  _Osfx()
		{	
		try {
		if (this->good() && this->flags() & ios_base::unitbuf)
			if (_Myios::rdbuf()->pubsync() == -1)	
				_Myios::setstate(ios_base::badbit);
		} catch (...) {
		}
		}

  





















	_Myt&  operator<<(_Myt& (__cdecl *_Pfn)(_Myt&))
		{	
		;
		return ((*_Pfn)(*this));
		}

	_Myt&  operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		;
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	_Myt&  operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		;
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

	_Myt&  operator<<(bool _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
			ios_base::fmtflags _Bfl =
				this->flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned short)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}










	_Myt&  operator<<(unsigned short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
			ios_base::fmtflags _Bfl =
				this->flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned int)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(long long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned long long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(float _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (double)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(long double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(const void *_Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(_Mysb *_Strbuf)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);

		if (_Ok && _Strbuf != 0)
			for (int_type _Meta = _Traits::eof(); ; _Copied = true)
				{	
				try {
				_Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
					? _Strbuf->sgetc() : _Strbuf->snextc();
				} catch (...) {
					_Myios::setstate(ios_base::failbit);
					throw;
				}

				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					break;	

				try {
					if (_Traits::eq_int_type(_Traits::eof(),
						_Myios::rdbuf()->sputc(
							_Traits::to_char_type(_Meta))))
						{	
						_State |= ios_base::badbit;
						break;
						}
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

		this->width(0);
		_Myios::setstate(_Strbuf == 0 ? ios_base::badbit
			: !_Copied ? _State | ios_base::failbit : _State);
		return (*this);
		}

	_Myt&  put(_Elem _Ch)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputc(_Ch)))
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  write(const _Elem *_Str,
		streamsize _Count)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else if (0 < _Count)
			{	
			;
			try {
			if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  flush()
		{	
		if (_Myios::rdbuf() != 0)
			{	
			const sentry _Ok(*this);

			if (_Ok && _Myios::rdbuf()->pubsync() == -1)
				_Myios::setstate(ios_base::badbit);	
			}
		return (*this);
		}

	_Myt&  seekp(pos_type _Pos)
		{	
		const sentry _Ok(*this);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::out) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	_Myt&  seekp(off_type _Off, ios_base::seekdir _Way)
		{	
		const sentry _Ok(*this);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::out) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	pos_type  tellp()
		{	
		const sentry _Ok(*this);

		if (!this->fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::out));
		else
			return (pos_type(_BADOFF));
		}
	};

 #pragma vtordisp(pop)	

	

  

















































 

  
template class __declspec(dllimport) basic_ostream<char,
	char_traits<char> >;
template class __declspec(dllimport) basic_ostream<wchar_t,
	char_traits<wchar_t> >;
  

  



 

		

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize):: strlen(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr,
		const char *_Val)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, char _Ch)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Elem,
	class _Traits,
	class _Ty> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>&& _Ostr, const _Ty& _Val)
	{	
	return (_Ostr << _Val);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Ostr.widen('\n'));
	_Ostr.flush();
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Elem());
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.flush();
	return (_Ostr);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
			const error_code& _Errcode)
	{	
	return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)









 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189)

namespace std {
 #pragma vtordisp(push, 2)	

		
template<class _Elem,
	class _Traits>
	class basic_istream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_istream<_Elem, _Traits> _Myt;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef istreambuf_iterator<_Elem, _Traits> _Iter;
	typedef ctype<_Elem> _Ctype;
	typedef num_get<_Elem, _Iter> _Nget;

  









	explicit  basic_istream(_Mysb *_Strbuf,
		bool _Isstd = false)

		: _Chcount(0)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_istream(_Uninitialized)
		{	
		this->_Addstd(this);
		}

protected:
	 basic_istream(_Myt&& _Right)
		: _Chcount(_Right._Chcount)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		_Right._Chcount = 0;
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		_Myios::swap(_Right);
		::std:: swap(_Chcount, _Right._Chcount);
		}

public:
	 basic_istream(const _Myt&) = delete;
	_Myt&  operator=(const _Myt&) = delete;

	virtual  ~basic_istream() noexcept
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

		
	class _Sentry_base
		{	
	public:
		 _Sentry_base(_Myt& _Istr)
			: _Myistr(_Istr)
			{	
			if (_Myistr.rdbuf() != 0)
				_Myistr.rdbuf()->_Lock();
			}

		 ~_Sentry_base() noexcept
			{	
			if (_Myistr.rdbuf() != 0)
				_Myistr.rdbuf()->_Unlock();
			}

		_Myt& _Myistr;	

	private:
		_Sentry_base& operator=(const _Sentry_base&);
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(_Myt& _Istr, bool _Noskip = false)
			: _Sentry_base(_Istr)
			{	
			_Ok = this->_Myistr._Ipfx(_Noskip);
			}

		explicit  operator bool() const
			{	
			return (_Ok);
			}

		 sentry(const sentry&) = delete;
		sentry&  operator=(const sentry&) = delete;

	private:
		bool _Ok;	
		};

	bool  _Ipfx(bool _Noskip = false)
		{	
		if (this->good())
			{	
			if (_Myios::tie() != 0)
				_Myios::tie()->flush();

			if (!_Noskip && this->flags() & ios_base::skipws)
				{	
				const _Ctype& _Ctype_fac = use_facet< _Ctype >(this->getloc());

				try {
				int_type _Meta = _Myios::rdbuf()->sgetc();

				for (; ; _Meta = _Myios::rdbuf()->snextc())
					if (_Traits::eq_int_type(_Traits::eof(), _Meta))
						{	
						_Myios::setstate(ios_base::eofbit);
						break;
						}
					else if (!_Ctype_fac.is(_Ctype::space,
						_Traits::to_char_type(_Meta)))
						break;	
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

			if (this->good())
				return (true);
			}
		_Myios::setstate(ios_base::failbit);
		return (false);
		}

	bool  ipfx(bool _Noskip = false)
		{	
		return (_Ipfx(_Noskip));
		}

	void  isfx()
		{	
		}

  





















	_Myt&  operator>>(_Myt& (__cdecl *_Pfn)(_Myt&))
		{	
		;
		return ((*_Pfn)(*this));
		}

	_Myt&  operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		;
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	_Myt&  operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		;
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

	_Myt&  operator>>(bool& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(short& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			long _Tmp = 0;
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Tmp);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }

			if (_State & ios_base::failbit
				|| _Tmp < (-32768) || 32767 < _Tmp)
				_State |= ios_base::failbit;
			else
				_Val = (short)_Tmp;
			}

		_Myios::setstate(_State);
		return (*this);
		}










	_Myt&  operator>>(unsigned short& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(int& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			long _Tmp = 0;
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Tmp);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }

			if (_State & ios_base::failbit
				|| _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
				_State |= ios_base::failbit;
			else
				_Val = _Tmp;
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned int& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(long long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned long long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(float& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(double& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(long double& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(void *& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(_Mysb *_Strbuf)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);

		if (_Ok && _Strbuf != 0)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					try {
						if (_Traits::eq_int_type(_Traits::eof(),
							_Strbuf->sputc(_Traits::to_char_type(_Meta))))
							break;
					} catch (...) {
						break;
					}
					_Copied = true;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
		return (*this);
		}

	int_type  get()
		{	
		int_type _Meta = 0;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			_Meta = _Myios::rdbuf()->sgetc();

			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				_State |= ios_base::eofbit | ios_base::failbit;	
			else
				{	
				_Myios::rdbuf()->sbumpc();
				++_Chcount;
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	_Myt&  get(_Elem *_Str, streamsize _Count)
		{	
		return (get(_Str, _Count, _Myios::widen('\n')));
		}

	_Myt&  get(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Traits::to_char_type(_Meta) == _Delim)
					break;	
				else
					{	
					;
					*_Str++ = _Traits::to_char_type(_Meta);
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_Chcount == 0
			? _State | ios_base::failbit : _State);
		*_Str = _Elem();	
		return (*this);
		}

	_Myt&  get(_Elem& _Ch)
		{	
		int_type _Meta = get();
		if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
			_Ch = _Traits::to_char_type(_Meta);
		return (*this);
		}

	_Myt&  get(_Mysb& _Strbuf)
		{	
		return (get(_Strbuf, _Myios::widen('\n')));
		}

	_Myt&  get(_Mysb& _Strbuf, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					try {
						_Elem _Ch = _Traits::to_char_type(_Meta);
						if (_Ch == _Delim
							|| _Traits::eq_int_type(_Traits::eof(),
								_Strbuf.sputc(_Ch)))
							break;
					} catch (...) {
						break;
					}
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		if (_Chcount == 0)
			_State |= ios_base::failbit;
		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  getline(_Elem *_Str, streamsize _Count)
		{	
		return (getline(_Str, _Count, _Myios::widen('\n')));
		}

	_Myt&  getline(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			int_type _Metadelim = _Traits::to_int_type(_Delim);

			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Meta == _Metadelim)
					{	
					++_Chcount;
					_Myios::rdbuf()->sbumpc();
					break;
					}
				else if (--_Count <= 0)
					{	
					_State |= ios_base::failbit;
					break;
					}
				else
					{	
					;
					*_Str++ = _Traits::to_char_type(_Meta);
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		*_Str = _Elem();	
		_Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
		return (*this);
		}

	_Myt&  ignore(streamsize _Count = 1,
		int_type _Metadelim = _Traits::eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			for (; ; )
				{	
				int_type _Meta;
				if (_Count != (numeric_limits<streamsize>::max)()
					&& --_Count < 0)
					break;	
				else if (_Traits::eq_int_type(_Traits::eof(),
					_Meta = _Myios::rdbuf()->sbumpc()))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					++_Chcount;
					if (_Meta == _Metadelim)
						break;	
					}
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  read(_Elem *_Str, streamsize _Count)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			;
			const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
			_Chcount += _Num;
			if (_Num != _Count)
				_State |= ios_base::eofbit | ios_base::failbit;	
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	streamsize  readsome(_Elem *_Str,
		streamsize _Count)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		streamsize _Num;

		if (!_Ok)
			_State |= ios_base::failbit;	
		else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
			_State |= ios_base::eofbit;	
		else if (0 < _Count && 0 < _Num)
			{	
			;
			read(_Str, _Num < _Count ? _Num : _Count);	
			}

		_Myios::setstate(_State);
		return (gcount());
		}

	int_type  peek()
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		int_type _Meta = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Meta = _Myios::rdbuf()->sgetc()))
				_State |= ios_base::eofbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	_Myt&  putback(_Elem _Ch)
		{	
		_Chcount = 0;
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputbackc(_Ch)))
				_State |= ios_base::badbit | _Oldstate;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  unget()
		{	
		_Chcount = 0;
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sungetc()))
				_State |= ios_base::badbit | _Oldstate;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	streamsize  gcount() const
		{	
		return (_Chcount);
		}

	int  sync()
		{	
		const sentry _Ok(*this, true);

		if (_Myios::rdbuf() == 0)
			return (-1);
		else if (_Myios::rdbuf()->pubsync() == -1)
			{	
			_Myios::setstate(ios_base::badbit);
			return (-1);
			}
		else
			return (0);
		}

	_Myt&  seekg(pos_type _Pos)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::in) == _BADOFF)
			_Myios::setstate(_State | ios_base::failbit);
		return (*this);
		}

	_Myt&  seekg(off_type _Off, ios_base::seekdir _Way)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::in) == _BADOFF)
			_Myios::setstate(_State | ios_base::failbit);
		return (*this);
		}

	pos_type  tellg()
		{	
		const sentry _Ok(*this, true);

		if (!this->fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::in));
		else
			return (pos_type(_BADOFF));
		}

private:
	streamsize _Chcount;	
	};

	

 #pragma vtordisp(pop)	

  






















 

  
template class __declspec(dllimport) basic_istream<char, char_traits<char> >;
template class __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >;
  

  



 

		
template<class _Elem,
	class _Traits>
	class basic_iostream
	: public basic_istream<_Elem, _Traits>,
		public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_iostream<_Elem, _Traits> _Myt;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
		: _Myis(_Strbuf, false),
			_Myos(_Noinit, false)
		{	
		}

protected:
	 basic_iostream(_Myt&& _Right)
		: _Myis(_Right.rdbuf(), false),
			_Myos(_Noinit, false)
		{	
		_Myios::init();
		_Myios::move(::std:: forward<_Myt>(_Right));
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			_Myios::swap(_Right);
		}

public:
	 basic_iostream(const _Myt&) = delete;
	_Myt&  operator=(const _Myt&) = delete;

	virtual  ~basic_iostream() noexcept
		{	
		}
	};

	

 

  
template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;
  

  



 

		

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
	{	
	;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef ctype<_Elem> _Ctype;
	ios_base::iostate _State = ios_base::goodbit;
	_Elem *_Str0 = _Str;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

		try {
		streamsize _Count = 0 < _Istr.width() ? _Istr.width()
			: (numeric_limits<streamsize>::max)();
		typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
		_Elem _Ch;
		for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Ch = _Traits::to_char_type(_Meta))
					|| _Ch == _Elem())
				break;	
			else
				*_Str++ = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	*_Str = _Elem();	
	_Istr.width(0);
	_Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	typename _Myis::int_type _Meta;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		try {
		_Meta = _Istr.rdbuf()->sbumpc();
		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			_State |= ios_base::eofbit | ios_base::failbit;	
		else
			_Ch = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Elem,
	class _Traits,
	class _Ty> inline
	basic_istream<_Elem, _Traits>&
		operator>>(basic_istream<_Elem, _Traits>&& _Istr, _Ty& _Val)
	{	
	return (_Istr >> _Val);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>&
		__cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef ctype<_Elem> _Ctype;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const typename _Myis::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

			try {
			for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(_Ctype::space,
					_Traits::to_char_type(_Meta)))
					break;	
			} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)










 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
namespace std {
  











		
 extern __declspec(dllimport) istream cin, *_Ptr_cin;
 extern __declspec(dllimport) ostream cout, *_Ptr_cout;
 extern __declspec(dllimport) ostream cerr, *_Ptr_cerr;
 extern __declspec(dllimport) ostream clog, *_Ptr_clog;

 extern __declspec(dllimport) wistream wcin, *_Ptr_wcin;
 extern __declspec(dllimport) wostream wcout, *_Ptr_wcout;
 extern __declspec(dllimport) wostream wcerr, *_Ptr_wcerr;
 extern __declspec(dllimport) wostream wclog, *_Ptr_wclog;

		
class __declspec(dllimport) _Winit {
public:
	__thiscall _Winit();
	__thiscall ~_Winit() noexcept;
private:
	 static int _Init_cnt;
	};
  
}
 
 #pragma warning(pop)
 #pragma pack(pop)










#pragma once









#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4275)

namespace std {
		
struct money_base
	: public locale::facet
	{	
	enum
		{	
		symbol = '$', sign = '+', space = ' ', value = 'v', none = 'x'};
	typedef int part;

	struct pattern
		{	
		char field[4];
		};

	money_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}
	};

		
template<class _Elem>
	class _Mpunct
		: public money_base
	{	
public:
	typedef _Elem char_type;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;

	_Elem decimal_point() const
		{	
		return (do_decimal_point());
		}

	_Elem thousands_sep() const
		{	
		return (do_thousands_sep());
		}

	string grouping() const
		{	
		return (do_grouping());
		}

	string_type curr_symbol() const
		{	
		return (do_curr_symbol());
		}

	string_type positive_sign() const
		{	
		return (do_positive_sign());
		}

	string_type negative_sign() const
		{	
		return (do_negative_sign());
		}

	int frac_digits() const
		{	
		return (do_frac_digits());
		}

	pattern pos_format() const
		{	
		return (do_pos_format());
		}

	pattern neg_format() const
		{	
		return (do_neg_format());
		}

	explicit _Mpunct(size_t _Refs, bool _Intl)
		: money_base(_Refs), _International(_Intl)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	_Mpunct(const _Locinfo& _Lobj, size_t _Refs, bool _Intl,
		bool _Isdef = false)
		: money_base(_Refs), _International(_Intl)
		{	
		_Init(_Lobj, _Isdef);
		}

protected:
	_Mpunct(const char *_Locname, size_t _Refs,
		bool _Intl, bool _Isdef = false)
		: money_base(_Refs), _International(_Intl)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj, _Isdef);
		}
		}

	virtual  ~_Mpunct() noexcept
		{	
		_Tidy();
		}

	template<class _Elem2>
		void _Getvals(_Elem2, const lconv *_Ptr)
		{	
		_Currencysign = _Maklocstr(_International ? _Ptr->int_curr_symbol : _Ptr->currency_symbol, (_Elem2 *)0, _Cvt);
		_Plussign = _Maklocstr(4 < (unsigned int)_Ptr->p_sign_posn ? "" : _Ptr->positive_sign, (_Elem2 *)0, _Cvt);
		_Minussign = _Maklocstr(4 < (unsigned int)_Ptr->n_sign_posn ? "-" : _Ptr->negative_sign, (_Elem2 *)0, _Cvt);
		_Decimalpoint = _Maklocchr(_Ptr->mon_decimal_point[0], (_Elem2 *)0, _Cvt);
		_Kseparator = _Maklocchr(_Ptr->mon_thousands_sep[0], (_Elem2 *)0, _Cvt);
		}

	template<>
		void _Getvals(wchar_t, const lconv *_Ptr)
		{	
		_Currencysign = (const _Elem *)_Maklocwcs(_International
			? _Ptr->_W_int_curr_symbol : _Ptr->_W_currency_symbol);
		_Plussign = (const _Elem *)_Maklocwcs(
			4 < (unsigned int)_Ptr->p_sign_posn
				? L"" : _Ptr->_W_positive_sign);
		_Minussign = (const _Elem *)_Maklocwcs(
			4 < (unsigned int)_Ptr->n_sign_posn
				? L"-" : _Ptr->_W_negative_sign);
		_Decimalpoint = (_Elem)_Ptr->_W_mon_decimal_point[0];
		_Kseparator = (_Elem)_Ptr->_W_mon_thousands_sep[0];
		}

	void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
		{	
		_Cvt = _Lobj._Getcvt();
		const lconv *_Ptr = _Lobj._Getlconv();

		_Grouping = 0;
		_Currencysign = 0;
		_Plussign = 0;
		_Minussign = 0;

		try {
		_Grouping = _Maklocstr(_Ptr->mon_grouping, (char *)0, _Cvt);
		_Getvals((_Elem)0, _Ptr);
		} catch (...) {
		_Tidy();
		throw;
		}

		_Fracdigits = _International ? _Ptr->int_frac_digits
			: _Ptr->frac_digits;
		if (_Fracdigits < 0 || 127 <= _Fracdigits)
			_Fracdigits = 0;

		_Makpat(_Plusformat, _Ptr->p_sep_by_space,
			_Ptr->p_cs_precedes, _Ptr->p_sign_posn);
		_Makpat(_Minusformat, _Ptr->n_sep_by_space,
			_Ptr->n_cs_precedes, _Ptr->n_sign_posn);

		if (_Isdef)
			{	
			:: memcpy(&_Plusformat, "$+xv", 4);
			:: memcpy(&_Minusformat, "$+xv", 4);
			}
		}

	virtual _Elem  do_decimal_point() const
		{	
		return (_Decimalpoint);
		}

	virtual _Elem  do_thousands_sep() const
		{	
		return (_Kseparator);
		}

	virtual string  do_grouping() const
		{	
		return (string(_Grouping));
		}

	virtual string_type  do_curr_symbol() const
		{	
		return (string_type(_Currencysign));
		}

	virtual string_type  do_positive_sign() const
		{	
		return (string_type(_Plussign));
		}

	virtual string_type  do_negative_sign() const
		{	
		return (string_type(_Minussign));
		}

	virtual int  do_frac_digits() const
		{	
		return (_Fracdigits);
		}

	virtual pattern  do_pos_format() const
		{	
		return (_Plusformat);
		}

	virtual pattern  do_neg_format() const
		{	
		return (_Minusformat);
		}

private:
	void _Makpat(pattern& _Pattern, unsigned int _Sepbyspace,
		unsigned int _Symbolprecedes, unsigned int _Signposition)
		{	
		const char *_Ptr = _International || 2 < _Sepbyspace
			|| 1 < _Symbolprecedes || 4 < _Signposition
				? "$+xv"	
				: &(
				"+v$x" "+v$x" "v$+x" "v+$x" "v$+x"
				"+$vx" "+$vx" "$v+x" "+$vx" "$+vx"
				"+v $" "+v $" "v $+" "v +$" "v $+"
				"+$ v" "+$ v" "$ v+" "+$ v" "$+ v"
				"+xv$" "+ v$" "v$ +" "v+ $" "v$ +"
				"+x$v" "+ $v" "$v +" "+ $v" "$ +v")
					[_Signposition * 4	
					+ _Symbolprecedes * 20	
					+ _Sepbyspace * 40];	

		::memcpy_s((_Pattern.field), (sizeof (_Pattern.field)), (_Ptr), (4));
		}

	void _Tidy()
		{	
		:: free((void *)_Grouping);
		:: free((void *)_Currencysign);
		:: free((void *)_Plussign);
		:: free((void *)_Minussign);
		}

	const char *_Grouping;	
	_Elem _Decimalpoint;	
	_Elem _Kseparator;	
	const _Elem *_Currencysign;	
	const _Elem *_Plussign;	
	const _Elem *_Minussign;	
	int _Fracdigits;	
	pattern _Plusformat;	
	pattern _Minusformat;	
	bool _International;	

	_Locinfo::_Cvtvec _Cvt;		
	};

		
template<class _Elem,
	bool _Intl = false>
	class moneypunct
		: public _Mpunct<_Elem>
	{	
public:
	 __declspec(dllimport) static const bool intl;	
	 __declspec(dllimport) static locale::id id;	

	explicit moneypunct(size_t _Refs = 0)
		: _Mpunct<_Elem>(_Refs, _Intl)
		{	
		}

	moneypunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
		: _Mpunct<_Elem>(_Lobj, _Refs, _Intl, _Isdef)
		{	
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new moneypunct<_Elem, _Intl>(
				_Locinfo(_Ploc->c_str()), 0, true);
		return (3);
		}

protected:
	moneypunct(const char *_Locname, size_t _Refs = 0)
		: _Mpunct<_Elem>(_Locname, _Refs, _Intl)
		{	
		}

	virtual  ~moneypunct() noexcept
		{	
		}
	};

		
template<class _Elem,
	bool _Intl>
	 const bool moneypunct<_Elem, _Intl>::intl = _Intl;

		
template<class _Elem,
	bool _Intl>
	 locale::id moneypunct<_Elem, _Intl>::id;

		
template<class _Elem,
	bool _Intl = false>
	class moneypunct_byname
		: public moneypunct<_Elem, _Intl>
	{	
public:
	explicit moneypunct_byname(const char *_Locname, size_t _Refs = 0)
		: moneypunct<_Elem, _Intl>(_Locname, _Refs)
		{	
		}

	explicit moneypunct_byname(const string& _Str, size_t _Refs = 0)
		: moneypunct<_Elem, _Intl>(_Str.c_str(), _Refs)
		{	
		}

protected:
	virtual  ~moneypunct_byname() noexcept
		{	
		}
	};

		
template<class _Elem,
	class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
	class money_get
		: public locale::facet
	{	
	typedef moneypunct<_Elem, false> _Mypunct0;
	typedef moneypunct<_Elem, true> _Mypunct1;

public:
	typedef _Elem char_type;
	typedef _InIt iter_type;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;

	_InIt get(_InIt _First, _InIt _Last,
		bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		return (do_get(_First, _Last, _Intl, _Iosbase, _State, _Val));
		}

	_InIt get(_InIt _First, _InIt _Last,
		bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
			string_type& _Val) const
		{	
		return (do_get(_First, _Last, _Intl, _Iosbase, _State, _Val));
		}

	 __declspec(dllimport) static locale::id id;	

	explicit money_get(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	money_get(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new money_get<_Elem, _InIt>(
				_Locinfo(_Ploc->c_str()));
		return (3);
		}

protected:
	virtual  ~money_get() noexcept
		{	
		}

	void _Init(const _Locinfo&)
		{	
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		_Elem _Atoms[sizeof ("0123456789-")];
		string _Str = _Getmfld(_First, _Last, _Intl, _Iosbase, _Atoms);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Str.size() == 0)
			_State |= ios_base::failbit;	
		else
			{	
			const char *_Eb = _Str.c_str();
			char *_Ep;
			int _Errno = 0;
			const long double _Ans =
				_Stodx_v2(_Eb, &_Ep, 0, &_Errno);	

			if (_Ep == _Eb || _Errno != 0)
				_State |= ios_base::failbit;
			else
				_Val = _Ans;	
			}
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
			string_type& _Val) const
		{	
		_Elem _Atoms[sizeof ("0123456789-")];
		string _Str = _Getmfld(_First, _Last, _Intl, _Iosbase, _Atoms);
		size_t _Len = _Str.size();

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Len == 0)
			_State |= ios_base::failbit;	
		else
			{	
			size_t _Idx = 0;
			_Val.resize(_Len);
			if (_Str[0] == '-')
				_Val[_Idx++] = _Atoms[10];
			for (; _Idx < _Len; ++_Idx)
				_Val[_Idx] = _Atoms[_Str[_Idx] - '0'];	
			}
		return (_First);
		}

private:
	string _Getmfld(_InIt& _First, _InIt& _Last,
		bool _Intl, ios_base& _Iosbase, _Elem *_Atoms) const
		{	
		;
		const _Mpunct<_Elem> *_Ppunct_fac;
		if (_Intl)
			_Ppunct_fac =
				&use_facet< _Mypunct1 >(_Iosbase.getloc());	
		else
			_Ppunct_fac =
				&use_facet< _Mypunct0 >(_Iosbase.getloc());	

		bool _Bad = false, _Neg = false;
		string_type _Sign;
		const money_base::pattern _Pattern = _Ppunct_fac->neg_format();
		string _Val;
		size_t _Idx;
		static const char _Src[] = {"0123456789-"};	
		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		for (size_t _Off = 0; !_Bad && _Off < 4; ++_Off)
			switch (_Pattern.field[_Off])
				{	
			case money_base::symbol:
				{	
				string_type _Symbol = _Ppunct_fac->curr_symbol();
				typename string_type::const_iterator _Source;

				if (!(_Iosbase.flags() & ios_base::showbase)
					&& _First != _Last && *_First != *_Symbol.c_str())
					_Symbol.erase();	
				else if (_Off == 3 && _Sign.size() <= 1
					&& (_First == _Last || *_First != *_Symbol.c_str()))
					_Symbol.erase();	

				for (_Source = _Symbol.begin();
					_First != _Last && _Source != _Symbol.end()
						&& *_First == *_Source; ++_Source, (void)++_First)
					;	

				if (_Source != _Symbol.end())
					_Bad = true;	
				break;
				}

			case money_base::sign:	
				if (_First == _Last)
					;	
				else if (0 < (_Ppunct_fac->positive_sign()).size()
					&& _Ppunct_fac->positive_sign()[0] == *_First)
					{	
					++_First;
					_Sign = _Ppunct_fac->positive_sign();
					}
				else if (0 < (_Ppunct_fac->negative_sign()).size()
					&& _Ppunct_fac->negative_sign()[0] == *_First)
					{	
					++_First;
					_Sign = _Ppunct_fac->negative_sign();
					_Neg = true;
					}
				else if (0 == (_Ppunct_fac->positive_sign()).size())
					;
				else if (0 == (_Ppunct_fac->negative_sign()).size())
					_Neg = true;
				break;	

			case money_base::value:
				{	
				int _Fracdigseen = 0;
				int _Fracdigits = _Ppunct_fac->frac_digits();
				const string _Grouping = _Ppunct_fac->grouping();
				const _Elem _Kseparator = _Grouping.size() == 0
					? (_Elem)0 : _Ppunct_fac->thousands_sep();

				if (_Kseparator == (_Elem)0
					|| 127 <= (unsigned char)*_Grouping.c_str())
					for (; _First != _Last
						&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
						++_First)
					_Val += _Src[_Idx];	
				else
					{	
					string _Groups((size_t)1, '\0');
					size_t _Group = 0;

					for (; _First != _Last; ++_First)
						if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
							{	
							_Val += _Src[_Idx];
							if (_Groups[_Group] != 127)
								++_Groups[_Group];
							}
						else if (_Groups[_Group] == '\0'
							|| *_First != _Kseparator)
							break;	
						else
							{	
							_Groups.append((size_t)1, '\0');
							++_Group;
							}

					if (_Group == 0)
						;	
					else if ('\0' < _Groups[_Group])
						++_Group;	
					else
						_Bad = true;	

					for (const char *_Pg = _Grouping.c_str();
						!_Bad && 0 < _Group; )
						if (*_Pg == 127)
							break;	
						else if ((0 < --_Group && *_Pg != _Groups[_Group])
							|| (0 == _Group && *_Pg < _Groups[_Group]))
							_Bad = true;	
						else if ('\0' < _Pg[1])
							++_Pg;	
					if (_Bad)
						break;	
					}

				const _Elem _Point = _Ppunct_fac->decimal_point();
				if (_First != _Last
					&& _Point != (_Elem)0
					&& *_First == _Point)
					{	
					while (++_First != _Last
						&& _Fracdigseen < _Fracdigits
						&& (_Idx = _Find_elem(_Atoms, *_First)) < 10)
						_Val += _Src[_Idx], ++_Fracdigseen;

					if (_Fracdigseen < _Fracdigits)
						_Bad = true;	
					}

				if (_Val.size() == 0)
					_Bad = true;	
				else
					for (; _Fracdigseen < _Fracdigits; ++_Fracdigseen)
						_Val += '0';	
				break;
				}

			case money_base::space:
			case money_base::none:
				{	
				if (_Off == 3)
					break;	

				bool _Seen = false;

				for (; _First != _Last
					&& _Ctype_fac.is(ctype_base::space, *_First); ++_First)
					_Seen = true;	
				if (_Pattern.field[_Off] == money_base::space && !_Seen)
					_Bad = true;	
				}
				}

		if (!_Bad && 1 < _Sign.size())
			{	
			typename string_type::const_iterator _Source;

			for (_Source = _Sign.begin(); ++_Source != _Sign.end()
				&& _First != _Last && *_First == *_Source; ++_First)
				;
			if (_Source != _Sign.end())
				_Bad = true;	
			}

		if (_Bad)
			_Val.erase();	
		else if (_Neg)
			_Val.insert((size_t)0, (size_t)1, '-');	
		return (_Val);
		}
	};

		
template<class _Elem,
	class _InIt>
	 locale::id money_get<_Elem, _InIt>::id;

		
template<class _Elem,
	class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
	class money_put
		: public locale::facet
	{	
	typedef moneypunct<_Elem, false> _Mypunct0;
	typedef moneypunct<_Elem, true> _Mypunct1;

public:
	typedef _Elem char_type;
	typedef _OutIt iter_type;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;

	_OutIt put(_OutIt _Dest,
		bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			long double _Val) const
		{	
		return (do_put(_Dest, _Intl, _Iosbase, _Fill, _Val));
		}

	_OutIt put(_OutIt _Dest,
		bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			const string_type& _Val) const
		{	
		return (do_put(_Dest, _Intl, _Iosbase, _Fill, _Val));
		}

	 __declspec(dllimport) static locale::id id;	

	explicit money_put(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	money_put(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new money_put<_Elem, _OutIt>(
				_Locinfo(_Ploc->c_str()));
		return (3);
		}

protected:
	virtual  ~money_put() noexcept
		{	
		}

	void _Init(const _Locinfo&)
		{	
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			long double _Val) const
		{	
		bool _Negative = false;
		if (_Val < 0)
			_Negative = true, _Val = -_Val;

		size_t _Exp;
		for (_Exp = 0; 1e35 <= _Val && _Exp < 5000; _Exp += 10)
			_Val /= 1e10;	

		char _Buf[40];

		int _Count = :: sprintf_s(_Buf, sizeof (_Buf), "%.0Lf",
			_Val);	

		if (_Count < 0)
			return (_Dest);	

		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		const _Elem _E0 = _Ctype_fac.widen('0');

		string_type _Val2(_Count, (_Elem)0);
		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Val2[0]);
		_Val2.append(_Exp, _E0);	
		return (_Putmfld(_Dest, _Intl, _Iosbase, _Fill,
			_Negative, _Val2, _E0));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			const string_type& _Val) const
		{	
		static const char _Src[] = {"0123456789-"};	
		_Elem _Atoms[sizeof (_Src)];
		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		bool _Negative = false;
		size_t _Idx0 = 0;
		if (!_Val.empty() && _Val[0] == _Atoms[10])
			_Negative = true, ++_Idx0;	

		size_t _Size = _Val.size();
		size_t _Idx = _Idx0;
		for (; _Idx < _Size && _Find_elem(_Atoms, _Val[_Idx]) < 10; ++_Idx)
			;	
		string_type _Val2(&_Val[_Idx0], (size_t)(_Idx - _Idx0));
		if (_Val2.empty())	
			_Val2.append((size_t)1, _Atoms[0]);

		return (_Putmfld(_Dest, _Intl, _Iosbase, _Fill,
			_Negative, _Val2, _Atoms[0]));
		}

private:
	_OutIt _Putmfld(_OutIt _Dest,
		bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			bool _Neg, string_type _Val, _Elem _E0) const
		{	
		;
		const _Mpunct<_Elem> *_Ppunct_fac;
		if (_Intl)
			_Ppunct_fac =
				&use_facet< _Mypunct1 >(_Iosbase.getloc());	
		else
			_Ppunct_fac =
				&use_facet< _Mypunct0 >(_Iosbase.getloc());	

		const string _Grouping = _Ppunct_fac->grouping();
		int _Ifracdigits = _Ppunct_fac->frac_digits();
		unsigned int _Fracdigits = _Ifracdigits < 0 ? -_Ifracdigits
			: _Ifracdigits;

		if (_Val.size() <= _Fracdigits)
			_Val.insert((size_t)0, _Fracdigits - _Val.size() + 1, _E0);
		else if (*_Grouping.c_str() != 127 && '\0' < *_Grouping.c_str())
			{	
			const _Elem _Kseparator = _Ppunct_fac->thousands_sep();
			const char *_Pg = _Grouping.c_str();
			size_t _Off = _Val.size() - _Fracdigits;	

			while (*_Pg != 127 && '\0' < *_Pg
				&& (size_t)*_Pg < _Off)
				{	
				_Val.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
				if ('\0' < _Pg[1])
					++_Pg;	
				}
			}

		money_base::pattern _Pattern;
		string_type _Sign;
		if (_Neg)
			{	
			_Pattern = _Ppunct_fac->neg_format();
			_Sign = _Ppunct_fac->negative_sign();
			}
		else
			{	
			_Pattern = _Ppunct_fac->pos_format();
			_Sign = _Ppunct_fac->positive_sign();
			}

		string_type _Symbol;
		if (_Iosbase.flags() & ios_base::showbase)
			_Symbol = _Ppunct_fac->curr_symbol();	

		bool _Intern = false;
		size_t _Fillcount, _Off;
		for (_Fillcount = 0, _Off = 0; _Off < 4; ++_Off)
			switch (_Pattern.field[_Off])
			{	
			case money_base::symbol:	
				_Fillcount += _Symbol.size();
				break;

			case money_base::sign:	
				_Fillcount += _Sign.size();
				break;

			case money_base::value:	
				_Fillcount += _Val.size() + (0 < _Fracdigits ? 1 : 0)
					+ (_Val.size() <= _Fracdigits
						? _Fracdigits - _Val.size() + 1 : 0);
				break;

			case money_base::space:	
				++_Fillcount;	
				

			case money_base::none:	
				if (_Off != 3)
					_Intern = true;	
				break;
			}

		_Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Fillcount
				? 0 : (size_t)_Iosbase.width() - _Fillcount;

		ios_base::fmtflags _Afl =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Afl != ios_base::left
			&& (_Afl != ios_base::internal || !_Intern))
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}

		for (_Off = 0; _Off < 4; ++_Off)
			switch (_Pattern.field[_Off])
				{	
			case money_base::symbol:	
				_Dest = _Put(_Dest, _Symbol.begin(), _Symbol.size());
				break;

			case money_base::sign:	
				if (0 < _Sign.size())
					_Dest = _Put(_Dest, _Sign.begin(), 1);
				break;

			case money_base::value:	
				if (_Fracdigits == 0)
					_Dest = _Put(_Dest, _Val.begin(),
						_Val.size());	
				else if (_Val.size() <= _Fracdigits)
					{	
					*_Dest++ = _E0;
					*_Dest++ = _Ppunct_fac->decimal_point();
					_Dest = _Rep(_Dest, _E0,
						_Fracdigits - _Val.size());	
					_Dest = _Put(_Dest, _Val.begin(), _Val.size());
					}
				else
					{	
					_Dest = _Put(_Dest, _Val.begin(),
						_Val.size() - _Fracdigits);	
					*_Dest++ = _Ppunct_fac->decimal_point();
					_Dest = _Put(_Dest, _Val.end() - _Fracdigits,
						_Fracdigits);	
					}
				break;

			case money_base::space:	
				_Dest = _Rep(_Dest, _Fill, 1);
				

			case money_base::none:	
				if (_Afl == ios_base::internal)
					{	
					_Dest = _Rep(_Dest, _Fill, _Fillcount);
					_Fillcount = 0;
					}
				}

		if (1 < _Sign.size())
			_Dest = _Put(_Dest, _Sign.begin() + 1,
				_Sign.size() - 1);	
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	static _OutIt _Put(_OutIt _Dest,
		typename string_type::const_iterator _Source, size_t _Count)
		{	
		for (; 0 < _Count; --_Count, (void)++_Dest, ++_Source)
			*_Dest = *_Source;
		return (_Dest);
		}

	static _OutIt _Rep(_OutIt _Dest,
		_Elem _Ch, size_t _Count)
		{	
		for (; 0 < _Count; --_Count, (void)++_Dest)
			*_Dest = _Ch;
		return (_Dest);
		}
	};

		
template<class _Elem,
	class _OutIt>
	 locale::id money_put<_Elem, _OutIt>::id;

 

  
template  const bool moneypunct<char, true>::intl;
template  const bool moneypunct<char, false>::intl;
template  locale::id
	moneypunct<char, true>::id;
template  locale::id
	moneypunct<char, false>::id;
template  locale::id
	money_get<char, istreambuf_iterator<char,
		char_traits<char> > >::id;
template  locale::id
	money_put<char, ostreambuf_iterator<char,
		char_traits<char> > >::id;

template  const bool moneypunct<wchar_t, true>::intl;
template  const bool moneypunct<wchar_t, false>::intl;
template  locale::id
	moneypunct<wchar_t, true>::id;
template  locale::id
	moneypunct<wchar_t, false>::id;
template  locale::id
	money_get<wchar_t, istreambuf_iterator<wchar_t,
		char_traits<wchar_t> > >::id;
template  locale::id
	money_put<wchar_t, ostreambuf_iterator<wchar_t,
		char_traits<wchar_t> > >::id;
  

  













 
}

 
 #pragma warning(pop)
 #pragma pack(pop)











#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4275)

namespace std {
		
struct __declspec(dllimport) time_base
	: public locale::facet
	{	
	enum dateorder
		{	
		no_order, dmy, mdy, ymd, ydm};

	 time_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	 ~time_base() noexcept
		{	
		}
	};

		
template<class _Elem,
	class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
	class time_get
		: public time_base
	{	
public:
	typedef _Elem char_type;
	typedef _InIt iter_type;
	typedef ctype<_Elem> _Ctype;

	 static locale::id id;	

	dateorder  date_order() const
		{	
		return (do_date_order());
		}

	_InIt  get_time(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		return (do_get_time(_First, _Last, _Iosbase, _State, _Pt));
		}

	_InIt  get_date(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		return (do_get_date(_First, _Last, _Iosbase, _State, _Pt));
		}

	_InIt  get_weekday(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		return (do_get_weekday(_First, _Last, _Iosbase, _State, _Pt));
		}

	_InIt  get_monthname(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		return (do_get_monthname(_First, _Last, _Iosbase, _State, _Pt));
		}

	_InIt  get_year(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		return (do_get_year(_First, _Last, _Iosbase, _State, _Pt));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
			char _Specifier, char _Modifier = '\0') const
		{	
		;
		;
		return (do_get(_First, _Last, _Iosbase, _State, _Pt,
			_Specifier, _Modifier));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
			const _Elem *_Fmtfirst, const _Elem *_Fmtlast) const
		{	
		;
		;
		;
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		_State = ios_base::goodbit;

		for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst)
			if (_Ctype_fac.narrow(*_Fmtfirst) != '%')
				{	
				if (_Ctype_fac.is(_Ctype::space, *_Fmtfirst))
					for (; _First != _Last
						&& _Ctype_fac.is(_Ctype::space, *_First); ++_First)
						;
				else if (*_First != *_Fmtfirst)
					{	
					_State |= ios_base::failbit;
					break;
					}
				else
					++_First;
				}
			else if (++_Fmtfirst == _Fmtlast)
				{	
				if (*_First != _Fmtfirst[-1])
					_State |= ios_base::failbit;
				else
					++_First;
				break;
				}
			else
				{	
				char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
				char _Modifier = '\0';
				_Elem _Percent = _Fmtfirst[-1];

				if (_Specifier != 'E' && _Specifier != 'O'
					&& _Specifier != 'Q' && _Specifier != '#')
					;	
				else if (++_Fmtfirst == _Fmtlast)
					{	
					if (*_First != _Percent
						|| ++_First == _Last
						|| _Ctype_fac.narrow(*_First) != _Specifier)
						_State |= ios_base::failbit;
					else
						++_First;
					break;
					}
				else
					{	
					_Modifier = _Specifier;
					_Specifier = _Ctype_fac.narrow(*_Fmtfirst);
					}

				_First = do_get(_First, _Last, _Iosbase, _State, _Pt,
					_Specifier, _Modifier);	
				}
		if (_First == _Last)
			_State |= ios_base::eofbit;
		return (_First);
		}

	explicit  time_get(size_t _Refs = 0)
		: time_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 time_get(const _Locinfo& _Lobj, size_t _Refs = 0)
		: time_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new time_get<_Elem, _InIt>(
				_Locinfo(_Ploc->c_str()));
		return (5);
		}

protected:
	virtual  ~time_get() noexcept
		{	
		_Tidy();
		}

	 time_get(const char *_Locname, size_t _Refs = 0)
		: time_base(_Refs)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj);
		}
		}

	template<class _Elem2>
		void _Getvals(_Elem2, const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		_Days = _Maklocstr(_Lobj._Getdays(), (_Elem *)0, _Cvt);
		_Months = _Maklocstr(_Lobj._Getmonths(), (_Elem *)0, _Cvt);
		_Ampm = _Maklocstr(":AM:am:PM:pm", (_Elem *)0, _Cvt);
		}

	template<>
		void _Getvals(wchar_t, const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		_Days = (const _Elem *)_Maklocwcs(
			(const wchar_t *)_Lobj._W_Getdays());
		_Months = (const _Elem *)_Maklocwcs(
			(const wchar_t *)_Lobj._W_Getmonths());
		_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Days = 0;
		_Months = 0;
		_Ampm = 0;

		try {
		_Getvals((_Elem)0, _Lobj);

		_Dateorder = (dateorder)_Lobj._Getdateorder();

		} catch (...) {
		_Tidy();
		throw;
		}
		}

	virtual dateorder  do_date_order() const
		{	
		return (_Dateorder);
		}

	virtual _InIt  do_get_time(
		_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		;
		;
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		_State |= _Getint(_First, _Last, 0, 23,
			_Pt->tm_hour, _Ctype_fac);

		if (_State != ios_base::goodbit || _Ctype_fac.narrow(*_First) != ':')
			_State |= ios_base::failbit;	
		else
			_State |= _Getint(++_First, _Last, 0, 59,
				_Pt->tm_min, _Ctype_fac);

		if (_State != ios_base::goodbit || _Ctype_fac.narrow(*_First) != ':')
			_State |= ios_base::failbit;	
		else
			_State |= _Getint(++_First, _Last, 0, 59,
				_Pt->tm_sec, _Ctype_fac);
		return (_First);
		}

	virtual _InIt  do_get_date(
		_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		;
		;
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		dateorder _Dorder = date_order();
		if (_Dorder == no_order)
			_Dorder = mdy;

		if (_First == _Last)
			;
		else if (!_Ctype_fac.is(_Ctype::digit, *_First))
			{	
			_First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
			_Dorder = mdy;
			}
		else if (_Dorder == mdy)
			{	
			_State |= _Getint(_First, _Last, 1, 12,
				_Pt->tm_mon, _Ctype_fac);
			--_Pt->tm_mon;
			}
		else if (_Dorder == dmy)
			_State |= _Getint(_First, _Last, 1, 31,
				_Pt->tm_mday, _Ctype_fac);
		else	
			_First = get_year(_First, _Last, _Iosbase, _State, _Pt);

		while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
			++_First;	

		if (_First != _Last)
			{	
			char _Ch = _Ctype_fac.narrow(*_First);
			if (_Ch == ':' || _Ch == ',' || _Ch == '/')
				++_First;
			}
		while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
			++_First;	

		if (_First == _Last)
			;
		else if (!_Ctype_fac.is(_Ctype::digit, *_First))
			if (_Dorder == mdy)
				_State |= ios_base::failbit;	
			else
				{	
				_First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
				if (_Dorder == ydm)
					_Dorder = ymd;
				}
		else if (_Dorder == dmy || _Dorder == ymd)
			{	
			_State |= _Getint(_First, _Last, 1, 12,
				_Pt->tm_mon, _Ctype_fac);
			--_Pt->tm_mon;
			}
		else
			_State |= _Getint(_First, _Last, 1, 31,
				_Pt->tm_mday, _Ctype_fac);

		while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
			++_First;	
		if (_First != _Last)
			{	
			char _Ch = _Ctype_fac.narrow(*_First);
			if (_Ch == ':' || _Ch == ',' || _Ch == '/')
				++_First;
			}
		while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
			++_First;	

		if (_First == _Last)
			_State |= ios_base::failbit;	
		else if (!_Ctype_fac.is(_Ctype::digit, *_First))
			if (_Dorder != ydm)
				_State |= ios_base::failbit;	
			else
				_First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
		else if (_Dorder == ydm)
			{	
			_State |= _Getint(_First, _Last, 1, 12,
				_Pt->tm_mon, _Ctype_fac);
			--_Pt->tm_mon;
			}
		else if (_Dorder == ymd)
			_State |= _Getint(_First, _Last, 1, 31,
				_Pt->tm_mday, _Ctype_fac);
		else	
			_First = get_year(_First, _Last, _Iosbase, _State, _Pt);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		return (_First);
		}

	virtual _InIt  do_get_weekday(
		_InIt _First, _InIt _Last,
		ios_base&, ios_base::iostate& _State, tm *_Pt) const
		{	
		;
		;
		int _Num = _Getloctxt(_First, _Last, (size_t)0, _Days);

		if (_Num < 0)
			_State |= ios_base::failbit;
		else
			_Pt->tm_wday = _Num >> 1;	
		return (_First);
		}

	virtual _InIt  do_get_monthname(
		_InIt _First, _InIt _Last,
		ios_base&, ios_base::iostate& _State, tm *_Pt) const
		{	
		;
		;
		int _Num = _Getloctxt(_First, _Last, (size_t)0, _Months);

		if (_Num < 0)
			_State |= ios_base::failbit;
		else
			_Pt->tm_mon = _Num >> 1;	
		return (_First);
		}

	virtual _InIt  do_get_year(
		_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		;
		;
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		int _Ans = 0;
		ios_base::iostate _Res = _Getint(_First, _Last, 0, 9999,
			_Ans, _Ctype_fac);

		_State |= _Res;	
		if (_Res & ios_base::failbit)
			;	
		else if (_Ans < 69)
			_Pt->tm_year = _Ans + 100;	
		else if (_Ans < 100)
			_Pt->tm_year = _Ans;		
		else
			_Pt->tm_year = _Ans - 1900;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
		char _Specifier, char = 0) const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());
		int _Ans = 0;

		_State = ios_base::goodbit;

		switch (_Specifier)
			{	
		case 'a':
		case 'A':
			_First = get_weekday(_First, _Last, _Iosbase, _State, _Pt);
			break;

		case 'b':
		case 'B':
		case 'h':
			_First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
			break;

		case 'c':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				"%b %d %H : %M : %S %Y");
			break;

		case 'C':
			_State |= _Getint(_First, _Last, 0, 99,
				_Ans, _Ctype_fac);
			if (!(_State & ios_base::failbit))
				_Pt->tm_year = _Ans * 100 - 1900;	
			break;

		case 'd':
		case 'e':
			_State |= _Getint(_First, _Last, 1, 31,
				_Pt->tm_mday, _Ctype_fac);
			break;

		case 'D':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				"%m / %d / %y");
			break;

		case 'H':
			_State |= _Getint(_First, _Last, 0, 23,
				_Pt->tm_hour, _Ctype_fac);
			break;

		case 'I':
			_State |= _Getint(_First, _Last, 1, 12,
				_Ans, _Ctype_fac);
			if (!(_State & ios_base::failbit))
				_Pt->tm_hour = _Ans == 12 ? 0 : _Ans;
			break;

		case 'j':
			_State |= _Getint(_First, _Last, 1, 366,
				_Pt->tm_yday, _Ctype_fac);
			break;

		case 'm':
			_State |= _Getint(_First, _Last, 1, 12,
				_Ans, _Ctype_fac);
			if (!(_State & ios_base::failbit))
				_Pt->tm_mon = _Ans - 1;
			break;

		case 'M':
			_State |= _Getint(_First, _Last, 0, 59,
				_Pt->tm_min, _Ctype_fac);
			break;

		case 'n':
		case 't':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				" ");
			break;

		case 'p':
			_Ans = _Getloctxt(_First, _Last, (size_t)0, ":AM:am:PM:pm");
			if (_Ans < 0)
				_State |= ios_base::failbit;
			else if (1 < _Ans)
				_Pt->tm_hour += 12;
			break;

		case 'r':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				"%I : %M : %S %p");
			break;

		case 'R':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				"%H : %M");
			break;

		case 'S':
			_State |= _Getint(_First, _Last, 0, 60,
				_Pt->tm_sec, _Ctype_fac);
			break;

		case 'T':
		case 'X':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				"%H : %M : %S");
			break;

		case 'U':
			_State |= _Getint(_First, _Last, 0, 53,
				_Pt->tm_yday, _Ctype_fac);
			break;

		case 'w':
			_State |= _Getint(_First, _Last, 0, 6,
				_Pt->tm_wday, _Ctype_fac);
			break;

		case 'W':
			_State |= _Getint(_First, _Last, 0, 53,
				_Pt->tm_yday, _Ctype_fac);
			break;

		case 'x':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				"%d / %m / %y");
			break;

		case 'y':
			_State |= _Getint(_First, _Last, 0, 99,
				_Ans, _Ctype_fac);
			if (!(_State & ios_base::failbit))
				_Pt->tm_year = _Ans < 69 ? _Ans + 100 : _Ans;
			break;

		case 'Y':
			_First = get_year(_First, _Last, _Iosbase, _State, _Pt);
			break;

		default:
			_State |= ios_base::failbit;	
			}

		if (_First == _Last)
			_State |= ios_base::eofbit;
		return (_First);
		}

	_InIt  _Getfmt(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
			const char *_Fmtfirst) const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		for (; *_Fmtfirst != '\0'; ++_Fmtfirst)
			if (*_Fmtfirst == '%')
				_First = do_get(_First, _Last, _Iosbase, _State, _Pt,
					*++_Fmtfirst);	
			else if (*_Fmtfirst == ' ')
				for (; _First != _Last
					&& _Ctype_fac.is(_Ctype::space, *_First); ++_First)
					;
			else if (_Ctype_fac.narrow(*_First) != *_Fmtfirst)
				{	
				_State |= ios_base::failbit;
				break;
				}
			else
				++_First;
		if (_First == _Last)
			_State |= ios_base::eofbit;
		return (_First);
		}

private:
	ios_base::iostate __cdecl _Getint(
		_InIt& _First, _InIt& _Last,
		int _Lo, int _Hi, int& _Val,
		const _Ctype& _Ctype_fac) const
		{	
		char _Ac[32], *_Ep;
		char *_Ptr = _Ac;
		char _Ch;

		if (_First == _Last)
			;
		else if ((_Ch = _Ctype_fac.narrow(*_First)) == '+')
			*_Ptr++ = '+', ++_First;	
		else if (_Ch == '-')
			*_Ptr++ = '-', ++_First;	

		bool _Seendigit = false;
		while (_First != _Last && _Ctype_fac.narrow(*_First) == '0')
			_Seendigit = true, ++_First;	
		if (_Seendigit)
			*_Ptr++ = '0';	

		for (char *const _Pe = &_Ac[32 - 1]; _First != _Last
			&& '0' <= (_Ch = _Ctype_fac.narrow(*_First)) && _Ch <= '9';
			_Seendigit = true, ++_First)
			{	
			*_Ptr = _Ch;
			if (_Ptr < _Pe)
				++_Ptr;	
			}

		if (!_Seendigit)
			_Ptr = _Ac;
		*_Ptr = '\0';
		int _Errno = 0;
		const long _Ans = :: _Stolx(_Ac, &_Ep, 10, &_Errno);
		ios_base::iostate _State = ios_base::goodbit;

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0 || _Ans < _Lo || _Hi < _Ans)
			_State |= ios_base::failbit;	
		else
			_Val = _Ans;	
		return (_State);
		}

	void  _Tidy()
		{	
		:: free((void *)_Days);
		:: free((void *)_Months);
		:: free((void *)_Ampm);
		}

	const _Elem *_Days;	
	const _Elem *_Months;	
	const _Elem *_Ampm;	
	dateorder _Dateorder;
	_Locinfo::_Cvtvec _Cvt;		
	};

		
template<class _Elem,
	class _InIt>
	 locale::id time_get<_Elem, _InIt>::id;

		
template<class _Elem,
	class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
	class time_get_byname
		: public time_get<_Elem, _InIt>
	{	
public:
	explicit time_get_byname(const char *_Locname, size_t _Refs = 0)
		: time_get<_Elem, _InIt>(_Locname, _Refs)
		{	
		}

	explicit time_get_byname(const string& _Str, size_t _Refs = 0)
		: time_get<_Elem, _InIt>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~time_get_byname() noexcept
		{	
		}
	};

		
template<class _Elem,
	class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
	class time_put
		: public locale::facet
	{	
public:
	typedef _Elem char_type;
	typedef _OutIt iter_type;
	typedef ctype<_Elem> _Ctype;

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
			const _Elem *_Fmtfirst, const _Elem *_Fmtlast) const
		{	
		;
		;
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst)
			if (_Ctype_fac.narrow(*_Fmtfirst) != '%')
				*_Dest++ = *_Fmtfirst;	
			else if (++_Fmtfirst == _Fmtlast)
				{	
				*_Dest++ = _Fmtfirst[-1];
				break;
				}
			else
				{	
				char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
				char _Modifier = '\0';
				_Elem _Percent = _Fmtfirst[-1];

				if (_Specifier != 'E' && _Specifier != 'O'
					&& _Specifier != 'Q' && _Specifier != '#')
					;	
				else if (++_Fmtfirst == _Fmtlast)
					{	
					*_Dest++ = _Percent;
					*_Dest++ = _Specifier;
					break;
					}
				else
					{	
					_Modifier = _Specifier;
					_Specifier = _Ctype_fac.narrow(*_Fmtfirst);
					}

				_Dest = do_put(_Dest, _Iosbase, _Fill, _Pt,
					_Specifier, _Modifier);	
				}
		return (_Dest);
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
		char _Specifier, char _Modifier = '\0') const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier));
		}

	 static locale::id id;	

	explicit  time_put(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 time_put(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new time_put<_Elem, _OutIt>(
				_Locinfo(_Ploc->c_str()));
		return (5);
		}

protected:
	virtual  ~time_put() noexcept
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Tnames = _Lobj._Gettnames();
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base&, _Elem, const tm *_Pt,
			char _Specifier, char _Modifier = '\0') const
		{	
		;
		;

		char _Fmt[5] = "!%x\0";	
		size_t _Count, _Num;
		string _Str;

		if (_Modifier == '\0')
			_Fmt[2] = _Specifier;
		else
			{	
			_Fmt[2] = _Modifier;
			_Fmt[3] = _Specifier;
			}

		for (_Num = 16; ; _Num *= 2)
			{	
			_Str.append(_Num, '\0');
			if (0 < (_Count = _Strftime(&*_Str.begin(), _Str.size(),
				_Fmt, _Pt, _Tnames._Getptr())))
				break;
			}
		return (::std:: copy(&_Str[1], &_Str[_Count], _Dest));
		}

private:
	_Locinfo::_Timevec _Tnames;	
	};

		
template<class _Elem,
	class _OutIt>
	 locale::id time_put<_Elem, _OutIt>::id;

		

template<class _OutIt>
	class __declspec(dllimport) time_put<wchar_t, _OutIt>
		: public locale::facet
	{	
public:
	typedef wchar_t _Elem;
	typedef _Elem char_type;
	typedef _OutIt iter_type;
	typedef ctype<_Elem> _Ctype;

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
			const _Elem *_Fmtfirst, const _Elem *_Fmtlast) const
		{	
		;
		;
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst)
			if (_Ctype_fac.narrow(*_Fmtfirst) != '%')
				*_Dest++ = *_Fmtfirst;	
			else if (++_Fmtfirst == _Fmtlast)
				{	
				*_Dest++ = _Fmtfirst[-1];
				break;
				}
			else
				{	
				char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
				char _Modifier = '\0';
				_Elem _Percent = _Fmtfirst[-1];

				if (_Specifier != 'E' && _Specifier != 'O'
					&& _Specifier != 'Q' && _Specifier != '#')
					;	
				else if (++_Fmtfirst == _Fmtlast)
					{	
					*_Dest++ = _Percent;
					*_Dest++ = _Specifier;
					break;
					}
				else
					{	
					_Modifier = _Specifier;
					_Specifier = _Ctype_fac.narrow(*_Fmtfirst);
					}

				_Dest = do_put(_Dest, _Iosbase, _Fill, _Pt,
					_Specifier, _Modifier);	
				}
		return (_Dest);
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
		char _Specifier, char _Modifier = '\0') const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier));
		}

	 static locale::id id;	

	explicit  time_put(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 time_put(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new time_put<_Elem, _OutIt>(
				_Locinfo(_Ploc->c_str()));
		return (5);
		}

protected:
	virtual  ~time_put() noexcept
		{	
		}

	 time_put(const char *_Locname, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj);
		}
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Tnames = _Lobj._W_Gettnames();
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base&, _Elem, const tm *_Pt,
			char _Specifier, char _Modifier = '\0') const
		{	
		;
		;

		wchar_t _Fmt[5] = L"!%x\0";	
		size_t _Count, _Num;
		wstring _Str;

		if (_Modifier == '\0')
			_Fmt[2] = (_Elem)_Specifier;	
		else
			{	
			_Fmt[2] = (_Elem)_Modifier;
			_Fmt[3] = (_Elem)_Specifier;
			}

		for (_Num = 16; ; _Num *= 2)
			{	
			_Str.append(_Num, '\0');
			if (0 < (_Count = _Wcsftime(&*_Str.begin(), _Str.size(),
				_Fmt, _Pt, _Tnames._Getptr())))
				break;
			}
		return (::std:: copy(&_Str[1], &_Str[_Count], _Dest));
		}

private:
	_Locinfo::_Timevec _Tnames;	
	};

		
template<class _OutIt>
	 locale::id time_put<wchar_t, _OutIt>::id;

 














































































































































		
template<class _Elem,
	class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
	class time_put_byname
		: public time_put<_Elem, _OutIt>
	{	
public:
	explicit time_put_byname(const char *_Locname, size_t _Refs = 0)
		: time_put<_Elem, _OutIt>(_Locname, _Refs)
		{	
		}

	explicit time_put_byname(const string& _Str, size_t _Refs = 0)
		: time_put<_Elem, _OutIt>(_Str.c_str(), _Refs)
		{	
		}

protected:
	virtual  ~time_put_byname() noexcept
		{	
		}
	};

 

  
template class __declspec(dllimport) time_get<char,
	istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) time_put<char,
	ostreambuf_iterator<char, char_traits<char> > >;

template class __declspec(dllimport) time_get<wchar_t,
	istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) time_put<wchar_t,
	ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
  

  





 
}

 
 #pragma warning(pop)
 #pragma pack(pop)










 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		
template<class _Elem>
	struct _Fillobj
	{	
	_Fillobj(_Elem _Ch)
		: _Fill(_Ch)
		{	
		}

	_Elem _Fill;	
	};

		
template<class _Elem> inline
	_Fillobj<_Elem> setfill(_Elem _Ch)
	{	
	return (_Fillobj<_Elem>(_Ch));
	}

template<class _Elem,
	class _Traits,
	class _Elem2> inline
	basic_istream<_Elem, _Traits>&
		operator>>(basic_istream<_Elem, _Traits>& _Istr,
			const _Fillobj<_Elem2>& _Manip)
	{	
	static_assert(is_same<_Elem, _Elem2>::value,
		"wrong character type for setfill");

	_Istr.fill(_Manip._Fill);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Elem2> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
			const _Fillobj<_Elem2>& _Manip)
	{	
	static_assert(is_same<_Elem, _Elem2>::value,
		"wrong character type for setfill");

	_Ostr.fill(_Manip._Fill);
	return (_Ostr);
	}

		
template<class _Money>
	struct _Monobj
	{	
	_Monobj(_Money& _Val_arg, bool _Intl_arg)
		: _Val(_Val_arg), _Intl(_Intl_arg)
		{	
		}

	_Money& _Val;	
	bool _Intl;		

	private:
		_Monobj& operator=(const _Monobj&);
	};

		
template<class _Money> inline
	_Monobj<_Money> get_money(_Money& _Val_arg,
		bool _Intl_arg = false)
	{	
	return (_Monobj<_Money>(_Val_arg, _Intl_arg));
	}

template<class _Elem,
	class _Traits,
	class _Money> inline
	basic_istream<_Elem, _Traits>&
		operator>>(basic_istream<_Elem, _Traits>& _Istr,
			const _Monobj<_Money>& _Manip)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef istreambuf_iterator<_Elem, _Traits> _Iter;
	typedef money_get<_Elem, _Iter> _Mymget;

	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Mymget& _Mget_fac = use_facet< _Mymget >(_Istr.getloc());
		try {
		_Mget_fac.get(_Iter(_Istr.rdbuf()), _Iter(0), _Manip._Intl,
			_Istr, _State, _Manip._Val);
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.setstate(_State);
	return (_Istr);
	}

		
template<class _Money> inline
	_Monobj<const _Money>
		put_money(const _Money& _Val_arg,
			bool _Intl_arg = false)
	{	
	return (_Monobj<const _Money>(_Val_arg, _Intl_arg));
	}

template<class _Elem,
	class _Traits,
	class _Money> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
			const _Monobj<_Money>& _Manip)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
	typedef money_put<_Elem, _Iter> _Mymput;

	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		const _Mymput& _Mput_fac = use_facet< _Mymput >(_Ostr.getloc());
		try {
		if (_Mput_fac.put(_Iter(_Ostr.rdbuf()), _Manip._Intl,
			_Ostr, _Ostr.fill(), _Manip._Val).failed())
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

		
template<class _Elem,
	class _Ptr>
	struct _Timeobj
	{	
	_Timeobj(_Ptr _Tptr_arg, const _Elem *_Fmt_arg)
		: _Tptr(_Tptr_arg), _Fmtfirst(_Fmt_arg)
		{	
		for (_Fmtlast = _Fmtfirst; *_Fmtlast != 0; ++_Fmtlast)
			;	
		}

	_Ptr _Tptr;	
	const _Elem *_Fmtfirst;	
	const _Elem *_Fmtlast;	
	};

		
template<class _Elem> inline
	_Timeobj<_Elem, struct tm *>
		get_time(struct tm *_Tptr_arg, const _Elem *_Fmt_arg)
	{	
	return (_Timeobj<_Elem, struct tm *>(_Tptr_arg, _Fmt_arg));
	}

template<class _Elem,
	class _Traits,
	class _Elem2> inline
	basic_istream<_Elem, _Traits>&
		operator>>(basic_istream<_Elem, _Traits>& _Istr,
			const _Timeobj<_Elem2, struct tm *>& _Manip)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef istreambuf_iterator<_Elem, _Traits> _Iter;
	typedef time_get<_Elem2, _Iter> _Mytget;

	static_assert(is_same<_Elem, _Elem2>::value,
		"wrong character type for get_time");

	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Mytget& _Tget_fac = use_facet< _Mytget >(_Istr.getloc());
		try {
		_Tget_fac.get(_Iter(_Istr.rdbuf()), _Iter(0), _Istr, _State,
			_Manip._Tptr, _Manip._Fmtfirst, _Manip._Fmtlast);
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.setstate(_State);
	return (_Istr);
	}

		
template<class _Elem> inline
	_Timeobj<_Elem, const struct tm *>
		put_time(const struct tm *_Tptr_arg, const _Elem *_Fmt_arg)
	{	
	return (_Timeobj<_Elem, const struct tm *>(_Tptr_arg, _Fmt_arg));
	}

template<class _Elem,
	class _Traits,
	class _Elem2> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
			const _Timeobj<_Elem2, const struct tm *>& _Manip)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
	typedef time_put<_Elem2, _Iter> _Mytput;

	static_assert(is_same<_Elem, _Elem2>::value,
		"wrong character type for put_time");

	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		const _Mytput& _Tput_fac = use_facet< _Mytput >(_Ostr.getloc());
		try {
		if (_Tput_fac.put(_Iter(_Ostr.rdbuf()), _Ostr, _Ostr.fill(),
			_Manip._Tptr, _Manip._Fmtfirst, _Manip._Fmtlast).failed())
			_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}
		
template<class _Elem,
	class _Traits,
	class _Alloc>
	struct _Quote_in
	{	
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	_Quote_in(_Mystr& _Str_obj,
		_Elem _Delim_obj, _Elem _Escape_obj)
		: _Str(_Str_obj),
			_Delim(_Delim_obj), _Escape(_Escape_obj)
		{	
		}

	_Mystr& _Str;	
	_Elem _Delim;	
	_Elem _Escape;	

	_Quote_in& operator=(const _Quote_in&) = delete;
	};

		
template<class _Elem,
	class _Traits,
	class _Sizet>
	struct _Quote_out
	{	
	_Quote_out(const _Elem *_Ptr_obj, _Sizet _Size_obj,
		_Elem _Delim_obj, _Elem _Escape_obj)
		: _Ptr(_Ptr_obj), _Size(_Size_obj),
			_Delim(_Delim_obj), _Escape(_Escape_obj)
		{	
		}

	const _Elem *_Ptr;	
	_Sizet _Size;	
	_Elem _Delim;	
	_Elem _Escape;	

	_Quote_out& operator=(const _Quote_out&) = delete;
	};

		
template<class _Elem> inline
	_Quote_out<_Elem, void, size_t>
		quoted(const _Elem *_Ptr,
			_Elem _Delim = _Elem('"'),
			_Elem _Escape = _Elem('\\'))
	{	
	size_t _Size = 0;
	for (; _Ptr[_Size] != _Elem(0); ++_Size)
		;
	return (_Quote_out<_Elem, void, size_t>(_Ptr, _Size, _Delim, _Escape));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	_Quote_out<_Elem, _Traits,
		typename basic_string<_Elem, _Traits, _Alloc>::size_type>
		quoted(const basic_string<_Elem, _Traits, _Alloc>& _Str,
			_Elem _Delim = _Elem('"'),
			_Elem _Escape = _Elem('\\'))
	{	
	typedef _Quote_out<_Elem, _Traits,
		typename basic_string<_Elem, _Traits, _Alloc>::size_type> _Qobj;
	return (_Qobj(_Str.c_str(), _Str.size(), _Delim, _Escape));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	_Quote_in<_Elem, _Traits, _Alloc>
		quoted(basic_string<_Elem, _Traits, _Alloc>& _Str,
			_Elem _Delim = _Elem('"'),
			_Elem _Escape = _Elem('\\'))
	{	
	return (_Quote_in<_Elem, _Traits, _Alloc>(_Str, _Delim, _Escape));
	}

	
template<class _Elem,
	class _Traits,
	class _QuTraits,
	class _Sizet> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
			const _Quote_out<_Elem, _QuTraits, _Sizet>& _Manip)
	{	
	static_assert(is_void<_QuTraits>::value
		|| is_same<_QuTraits, _Traits>::value,
		"quoted() traits must match basic_ostream traits");

	typedef basic_ostream<_Elem, _Traits> _Myos;

	const _Elem *const _Last = _Manip._Ptr + _Manip._Size;

	_Sizet _Size = _Manip._Size + 2;	
	for (const _Elem *_Ptr = _Manip._Ptr; _Ptr != _Last; ++_Ptr)
		if (_Traits::eq(*_Ptr, _Manip._Delim)
			|| _Traits::eq(*_Ptr, _Manip._Escape))
			++_Size;	

	ios_base::iostate _State = ios_base::goodbit;
	_Sizet _Pad = _Ostr.width() <= 0 || (_Sizet)_Ostr.width() <= _Size
		? 0 : (_Sizet)_Ostr.width() - _Size;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
	try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Manip._Delim)))	
			_State |= ios_base::badbit;

		for (const _Elem *_Ptr = _Manip._Ptr; _Ptr != _Last; ++_Ptr)
			{	
			if ((_Traits::eq(*_Ptr, _Manip._Delim)
				|| _Traits::eq(*_Ptr, _Manip._Escape))
				&& _State == ios_base::goodbit
				&& _Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Manip._Escape)))	
				{	
				_State |= ios_base::badbit;
				break;
				}
			if (_State == ios_base::goodbit
				&& _Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(*_Ptr)))	
				{	
				_State |= ios_base::badbit;
				break;
				}
			}
		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Manip._Delim)))	
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
		const _Quote_in<_Elem, _Traits, _Alloc>& _Manip)
	{	
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	const _Mystr& _Ref = _Manip._Str;
	return (_Ostr << ::std:: quoted(_Ref, _Manip._Delim, _Manip._Escape));
	}

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		const _Quote_in<_Elem, _Traits, _Alloc>& _Manip)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Sizet;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr);

	while (_Ok)
		{	
		try {
		_Sizet _Size = 0 < _Istr.width()
			&& (_Sizet)_Istr.width() < _Manip._Str.max_size()
				? (_Sizet)_Istr.width() : _Manip._Str.max_size();
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();
		typename _Traits::int_type _Delim =
			_Traits::to_int_type(_Manip._Delim);
		typename _Traits::int_type _Escape =
			_Traits::to_int_type(_Manip._Escape);

		if (!_Traits::eq_int_type(_Meta, _Delim))	
			return (_Istr >> _Manip._Str);
		_Manip._Str.clear();
		_Meta = _Istr.rdbuf()->snextc();	

		for (; !_Traits::eq_int_type(_Meta, _Delim) && 0 < _Size;
			_Meta = _Istr.rdbuf()->snextc(), --_Size)
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (!_Traits::eq_int_type(_Meta, _Escape))
				_Manip._Str.append(1,
					_Traits::to_char_type(_Meta));	
			else if (_Traits::eq_int_type(_Traits::eof(),
				_Meta = _Istr.rdbuf()->snextc()))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else
				_Manip._Str.append(1,
					_Traits::to_char_type(_Meta));	

		if (!_Traits::eq_int_type(_Meta, _Delim))
			_State |= ios_base::failbit;	
		else
			{	
			_Changed = true;
			_Istr.rdbuf()->snextc();
			}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		break;
		}

	_Istr.width(0);
	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

		
template<class _Arg>
	struct _Smanip
	{	
	_Smanip(void (__cdecl *_Left)(ios_base&, _Arg), _Arg _Val)
		: _Pfun(_Left), _Manarg(_Val)
		{	
		}

	void (__cdecl *_Pfun)(ios_base&, _Arg);	
	_Arg _Manarg;	
	};

template<class _Elem,
	class _Traits,
	class _Arg> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, const _Smanip<_Arg>& _Manip)
	{	
	(*_Manip._Pfun)(_Istr, _Manip._Manarg);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Arg> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const _Smanip<_Arg>& _Manip)
	{	
	(*_Manip._Pfun)(_Ostr, _Manip._Manarg);
	return (_Ostr);
	}

		
__declspec(dllimport) _Smanip<ios_base::fmtflags> __cdecl resetiosflags(ios_base::fmtflags);
__declspec(dllimport) _Smanip<ios_base::fmtflags> __cdecl setiosflags(ios_base::fmtflags);
__declspec(dllimport) _Smanip<int> __cdecl setbase(int);
__declspec(dllimport) _Smanip<streamsize> __cdecl setprecision(streamsize);
__declspec(dllimport) _Smanip<streamsize> __cdecl setw(streamsize);
}
 
 #pragma warning(pop)
 #pragma pack(pop)










#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
 #pragma warning(disable: 4127)

extern __declspec(dllimport) FILE *__cdecl _Fiopen(
	const char *,
	ios_base::openmode, int);
extern __declspec(dllimport) FILE *__cdecl _Fiopen(
	const wchar_t *,
	ios_base::openmode, int);

 
extern __declspec(dllimport) FILE *__cdecl _Fiopen(
	const unsigned short *,
	ios_base::openmode, int);
 

		
template<class _Elem> inline
	bool _Fgetc(_Elem& _Ch, FILE *_File)
	{	
	return (fread(&_Ch, sizeof (_Elem), 1, _File) == 1);
	}

template<> inline bool _Fgetc(char& _Byte, FILE *_File)
	{	
	int _Meta;
	if ((_Meta = fgetc(_File)) == (-1))
		return (false);
	else
		{	
		_Byte = (char)_Meta;
		return (true);
		}
	}

template<> inline bool _Fgetc(wchar_t& _Wchar, FILE *_File)
	{	
	wint_t _Meta;
	if ((_Meta = :: fgetwc(_File)) == ((wint_t)(0xFFFF)))
		return (false);
	else
		{	
		_Wchar = (wchar_t)_Meta;
		return (true);
		}
	}

 
template<> inline bool _Fgetc(unsigned short& _Wchar, FILE *_File)
	{	
	wint_t _Meta;
	if ((_Meta = :: fgetwc(_File)) == ((wint_t)(0xFFFF)))
		return (false);
	else
		{	
		_Wchar = (unsigned short)_Meta;
		return (true);
		}
	}
 

		
template<class _Elem> inline
	bool _Fputc(_Elem _Ch, FILE *_File)
	{	
	return (fwrite(&_Ch, 1, sizeof (_Elem), _File) == sizeof (_Elem));
	}

template<> inline bool _Fputc(char _Byte, FILE *_File)
	{	
	return (fputc(_Byte, _File) != (-1));
	}

template<> inline bool _Fputc(wchar_t _Wchar, FILE *_File)
	{	
	return (:: fputwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
	}

 
template<> inline bool _Fputc(unsigned short _Wchar, FILE *_File)
	{	
	return (:: fputwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
	}
 

		
template<class _Elem> inline
	bool _Ungetc(const _Elem& _Ch, FILE *_File)
	{	
	return (false);
	}

template<> inline bool _Ungetc(const char& _Byte, FILE *_File)
	{	
	return (ungetc((unsigned char)_Byte, _File) != (-1));
	}

template<> inline bool _Ungetc(const signed char& _Byte, FILE *_File)
	{	
	return (ungetc((unsigned char)_Byte, _File) != (-1));
	}

template<> inline bool _Ungetc(const unsigned char& _Byte, FILE *_File)
	{	
	return (ungetc(_Byte, _File) != (-1));
	}

template<> inline bool _Ungetc(const wchar_t& _Wchar, FILE *_File)
	{	
	return (:: ungetwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
	}

 
template<> inline bool _Ungetc(const unsigned short& _Wchar, FILE *_File)
	{	
	return (:: ungetwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
	}
 

		
template<class _Elem,
	class _Traits>
	class basic_filebuf
		: public basic_streambuf<_Elem, _Traits>
	{	
public:
	typedef basic_filebuf<_Elem, _Traits> _Myt;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef typename _Traits::state_type _Myst;
	typedef codecvt<_Elem, char, typename _Traits::state_type> _Cvt;

	basic_filebuf(FILE *_File = 0)
		: _Mysb()
		{	
		_Init(_File, _Newfl);
		}

	virtual  ~basic_filebuf() noexcept
		{	
		if (_Myfile != 0)
			_Reset_back();	
		if (_Closef)
			close();
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	basic_filebuf(_Uninitialized)
		: _Mysb(_Noinit)
		{	
		}

	basic_filebuf(_Myt&& _Right)
		{	
		_Init(_Right._Myfile, _Newfl);	
		_Init((FILE *)0, _Closefl);	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			close();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			
			FILE *_Myfile_sav = _Myfile;
			const _Cvt *_Pcvt_sav = _Pcvt;
			typename _Traits::state_type _State_sav = _State;
			bool _Wrotesome_sav = _Wrotesome;
			bool _Closef_sav = _Closef;
			bool _Set_eback_sav = _Mysb::eback() == &_Mychar;
			bool _Set_eback_live = _Mysb::gptr() == &_Mychar;

			_Elem *_Pfirst0 = _Mysb::pbase();
			_Elem *_Pnext0 = _Mysb::pptr();
			_Elem *_Pend = _Mysb::epptr();
			_Elem *_Gfirst0 = _Mysb::eback();
			_Elem *_Gnext0 = _Mysb::gptr();
			_Elem *_Gend = _Mysb::egptr();

			
			_Init(_Right._Myfile, _Right._Myfile != 0 ? _Openfl : _Newfl);
			_Mysb::setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			if (_Right.eback() != &_Right._Mychar)
				_Mysb::setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			else if (_Right.gptr() != &_Right._Mychar)
				_Mysb::setg(&_Mychar, &_Mychar + 1, &_Mychar + 1);
			else
				_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

			_Pcvt = _Right._Pcvt;
			_State = _Right._State;
			_Wrotesome = _Right._Wrotesome;
			_Closef = _Right._Closef;

			
			_Right._Init(_Myfile_sav, _Myfile_sav != 0 ? _Openfl : _Newfl);
			_Right.setp(_Pfirst0, _Pnext0, _Pend);
			if (!_Set_eback_sav)
				_Right.setg(_Gfirst0, _Gnext0, _Gend);
			else if (!_Set_eback_live)
				_Right.setg(&_Right._Mychar, &_Right._Mychar + 1,
					&_Right._Mychar + 1);
			else
				_Right.setg(&_Right._Mychar, &_Right._Mychar,
					&_Right._Mychar + 1);

			_Right._Pcvt = _Pcvt_sav;
			_Right._State = _State_sav;
			_Right._Wrotesome = _Wrotesome_sav;
			_Right._Closef = _Closef_sav;

			
			::std:: swap(_Set_eback, _Right._Set_eback);
			::std:: swap(_Set_egptr, _Right._Set_egptr);

			::std:: swap(_Mychar, _Right._Mychar);
			::std:: swap(_Mysb::_Plocale, _Right._Plocale);
			}
		}

	basic_filebuf(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	enum _Initfl
		{	
		_Newfl, _Openfl, _Closefl};

	bool is_open() const
		{	
		return (_Myfile != 0);
		}

	_Myt *open(const char *_Filename,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		FILE *_File;
		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
			return (0);	

		_Init(_File, _Openfl);
		_Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
		return (this);	
		}

	_Myt *open(const string& _Str,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		return (open(_Str.c_str(), _Mode, _Prot));
		}

 
	_Myt *open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		return (open(_Filename, (ios_base::openmode)_Mode));
		}
 

	_Myt *open(const wchar_t *_Filename,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		FILE *_File;
		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
			return (0);	

		_Init(_File, _Openfl);
		_Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
		return (this);	
		}

	_Myt *open(const wstring& _Str,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		return (open(_Str.c_str(), _Mode, _Prot));
		}

 
	_Myt *open(const wchar_t *_Filename,
		ios_base::open_mode _Mode)
		{	
		return (open(_Filename, (ios_base::openmode)_Mode));
		}
 

 
	_Myt *open(const unsigned short *_Filename,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		FILE *_File;
		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
			return (0);	

		_Init(_File, _Openfl);
		_Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
		return (this);	
		}

 
	_Myt *open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		return (open(_Filename, (ios_base::openmode)_Mode));
		}
 
 

	_Myt *close()
		{	
		_Myt *_Ans = this;
		if (_Myfile == 0)
			_Ans = 0;
		else
			{	
			if (!_Endwrite())
				_Ans = 0;
			if (fclose(_Myfile) != 0)
				_Ans = 0;
			}
		_Init(0, _Closefl);
		return (_Ans);
		}

	virtual void  _Lock()
		{	
		if (_Myfile)
			:: _lock_file(_Myfile);
		}

	virtual void  _Unlock()
		{	
		if (_Myfile)
			:: _unlock_file(_Myfile);
		}

protected:
	virtual int_type  overflow(int_type _Meta =
		_Traits::eof())
		{	
		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			return (_Traits::not_eof(_Meta));	
		else if (_Mysb::pptr() != 0
			&& _Mysb::pptr() < _Mysb::epptr())
			{	
			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			return (_Meta);
			}
		else if (_Myfile == 0)
			return (_Traits::eof());	
		_Reset_back();	
		if (_Pcvt == 0)
			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
				? _Meta : _Traits::eof());	
		else
			{	
			const int _STRING_INC = 8;
			const _Elem _Ch = _Traits::to_char_type(_Meta);
			const _Elem *_Src;
			char *_Dest;

			string _Str(_STRING_INC, '\0');
			for (; ; )
				switch (_Pcvt->out(_State,
					&_Ch, &_Ch + 1, _Src,
					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
				{	
				case codecvt_base::partial:
				case codecvt_base::ok:
					{	
					size_t _Count = _Dest - &*_Str.begin();
					if (0 < _Count && _Count !=
						fwrite(&*_Str.begin(), 1, _Count, _Myfile))
						return (_Traits::eof());	

					_Wrotesome = true;	
					if (_Src != &_Ch)
						return (_Meta);	

					if (0 < _Count)
						;
					else if (_Str.size() < 4 * _STRING_INC)
						_Str.append(_STRING_INC, '\0');	
					else
						return (_Traits::eof());	
					break;
					}

				case codecvt_base::noconv:
					return (_Fputc(_Ch, _Myfile) ? _Meta
						: _Traits::eof());	

				default:
					return (_Traits::eof());	
				}
			}
	}

	virtual int_type  pbackfail(int_type _Meta =
		_Traits::eof())
		{	
		if (_Mysb::gptr() != 0
			&& _Mysb::eback() < _Mysb::gptr()
			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)
			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
				_Meta)))
			{	
			_Mysb::_Gndec();
			return (_Traits::not_eof(_Meta));
			}
		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))
			return (_Traits::eof());	
		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))
			return (_Meta);	
		else if (_Mysb::gptr() != &_Mychar)
			{	
			_Mychar = _Traits::to_char_type(_Meta);
			_Set_back();	
			return (_Meta);
			}
		else
			return (_Traits::eof());	
	}

	virtual int_type  underflow()
		{	
		int_type _Meta;
		if (_Mysb::gptr() != 0
			&& _Mysb::gptr() < _Mysb::egptr())
			return (_Traits::to_int_type(*_Mysb::gptr()));	
		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
			return (_Meta);	
		else
			{	
			pbackfail(_Meta);
			return (_Meta);
			}
		}

	virtual int_type  uflow()
		{	
		if (_Mysb::gptr() != 0
			&& _Mysb::gptr() < _Mysb::egptr())
			return (_Traits::to_int_type(
				*_Mysb::_Gninc()));	
		else if (_Myfile == 0)
			return (_Traits::eof());	
		_Reset_back();	
		if (_Pcvt == 0)
			{	
			_Elem _Ch = 0;
			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)
				: _Traits::eof());
			}
		else
			{	
			string _Str;

			for (; ; )
				{	
				_Elem _Ch, *_Dest;
				const char *_Src;
				int _Nleft;
				int _Meta = fgetc(_Myfile);

				if (_Meta == (-1))
					return (_Traits::eof());	

				_Str.append(1, (char)_Meta);	
				switch (_Pcvt->in(_State,
					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
					&_Ch, &_Ch + 1, _Dest))
					{	
				case codecvt_base::partial:
				case codecvt_base::ok:
					if (_Dest != &_Ch)
						{	
						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);
						for (; 0 < _Nleft; )
							ungetc(_Src[--_Nleft], _Myfile);
						return (_Traits::to_int_type(_Ch));
						}
					else
						_Str.erase((size_t)0,	
							(size_t)(_Src - &*_Str.begin()));
					break;

				case codecvt_base::noconv:
					if (_Str.size() < sizeof (_Elem))
						break;	

					::memcpy_s((&_Ch), (sizeof (_Elem)), (&*_Str.begin()), (sizeof (_Elem)));	

					return (_Traits::to_int_type(_Ch));	

				default:
					return (_Traits::eof());	
					}
				}
			}
		}

	virtual pos_type  seekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode =
			(ios_base::openmode)(ios_base::in | ios_base::out))
		{	
		fpos_t _Fileposition;

		if (_Mysb::gptr() == &_Mychar	
			&& _Way == ios_base::cur	
			&& _Pcvt == 0)	
			_Off -= (off_type)sizeof (_Elem);	

		if (_Myfile == 0 || !_Endwrite()
			|| ((_Off != 0 || _Way != ios_base::cur)
				&& _fseeki64(_Myfile, _Off, _Way) != 0)
			|| fgetpos(_Myfile, &_Fileposition) != 0)
			return (pos_type(_BADOFF));	

		_Reset_back();	
		return (pos_type(_State, _Fileposition));	
		}

	virtual pos_type  seekpos(pos_type _Pos,
		ios_base::openmode =
			(ios_base::openmode)(ios_base::in | ios_base::out))
		{	
		fpos_t _Fileposition = _Pos.seekpos();
		off_type _Off = (off_type)_Pos - (off_type)((long long)(_Fileposition));

		if (_Myfile == 0 || !_Endwrite()
			|| fsetpos(_Myfile, &_Fileposition) != 0
			|| (_Off != 0 && _fseeki64(_Myfile, _Off, 1) != 0)
			|| fgetpos(_Myfile, &_Fileposition) != 0)
			return (pos_type(_BADOFF));	

		_State = _Pos.state();

		_Reset_back();	
		return (pos_type(_State, _Fileposition));	
		}

	virtual _Mysb * setbuf(_Elem *_Buffer, streamsize _Count)
		{	
		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
			_Buffer == 0 && _Count == 0 ? 0x0004 : 0x0000,
			(size_t)_Count * sizeof (_Elem)) != 0)
			return (0);	
		else
			{	
			_Init(_Myfile, _Openfl);
			return (this);
			}
		}

	virtual int  sync()
		{	
		return (_Myfile == 0
			|| _Traits::eq_int_type(_Traits::eof(), overflow())
			|| 0 <= fflush(_Myfile) ? 0 : -1);
		}

	virtual void  imbue(const locale& _Loc)
		{	
		_Initcvt(&use_facet< _Cvt >(_Loc));
		}

	void _Init(FILE *_File, _Initfl _Which)
		{	
		 static _Myst _Stinit;	

		_Closef = _Which == _Openfl;
		_Wrotesome = false;

		_Mysb::_Init();	

 
  
  
 

  #pragma warning(push)
  #pragma warning(disable: 6240)	
		if (_File != 0 && sizeof (_Elem) == 1)
  #pragma warning(pop)

			{	
			_Elem **_Pb = 0;
			_Elem **_Pn = 0;
			int *_Nr = 0;

			::_get_stream_buffer_pointers(
				_File,
				reinterpret_cast<char***>(&_Pb),
				reinterpret_cast<char***>(&_Pn),
				&_Nr);
			int *_Nw = _Nr;

			_Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);
			}

		_Myfile = _File;
		_State = _Stinit;
		_Pcvt = 0;	
		}

	bool _Endwrite()
		{	
		if (_Pcvt == 0 || !_Wrotesome)
			return (true);
		else
			{	
			const int _STRING_INC = 8;
			char *_Dest;
			if (_Traits::eq_int_type(_Traits::eof(), overflow()))
				return (false);

			string _Str(_STRING_INC, '\0');
			for (; ; )
				switch (_Pcvt->unshift(_State,
					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
				{	
				case codecvt_base::ok:
					_Wrotesome = false;	

				case codecvt_base::partial:	
					{	
					size_t _Count = _Dest - &*_Str.begin();
					if (0 < _Count && _Count !=
						fwrite(&*_Str.begin(), 1, _Count, _Myfile))
						return (false);	
					if (!_Wrotesome)
						return (true);
					if (_Count == 0)
						_Str.append(_STRING_INC, '\0');	
					break;
					}

				case codecvt_base::noconv:
					return (true);	

				default:
					return (false);	
				}
			}
		}

	void _Initcvt(const _Cvt *_Newpcvt)
		{	
		if (_Newpcvt->always_noconv())
			_Pcvt = 0;	
		else
			{	
			_Pcvt = _Newpcvt;
			_Mysb::_Init();	
			}
		}

private:
	const _Cvt *_Pcvt;	
	_Elem _Mychar;	
	bool _Wrotesome;	
	typename _Traits::state_type _State;	
	bool _Closef;	
	FILE *_Myfile;	

	void _Reset_back()
		{	
		if (_Mysb::eback() == &_Mychar)
			_Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);
		}

	void _Set_back()
		{	
		if (_Mysb::eback() != &_Mychar)
			{	
			_Set_eback = _Mysb::eback();
			_Set_egptr = _Mysb::egptr();
			}
		_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);
		}

	_Elem *_Set_eback;	
	_Elem *_Set_egptr;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_filebuf<_Elem, _Traits>& _Left,
		basic_filebuf<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits>
	class basic_ifstream
		: public basic_istream<_Elem, _Traits>
	{	
public:
	typedef basic_ifstream<_Elem, _Traits> _Myt;
	typedef basic_istream<_Elem, _Traits> _Mybase;
	typedef basic_filebuf<_Elem, _Traits> _Myfb;
	typedef basic_ios<_Elem, _Traits> _Myios;

	basic_ifstream()
		: _Mybase(&_Filebuffer)
		{	
		}

	explicit basic_ifstream(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ifstream(const string& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ifstream(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ifstream(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

 
	explicit basic_ifstream(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 

	explicit basic_ifstream(FILE *_File)
		: _Mybase(&_Filebuffer),
			_Filebuffer(_File)
		{	
		}

	basic_ifstream(_Myt&& _Right)
		: _Mybase(&_Filebuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Filebuffer.close();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Filebuffer.swap(_Right._Filebuffer);
			}
		}

	basic_ifstream(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	void open(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 

 
	void open(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 
 

	virtual  ~basic_ifstream() noexcept
		{	
		}

	_Myfb *rdbuf() const
		{	
		return ((_Myfb *)&_Filebuffer);
		}

	bool is_open() const
		{	
		return (_Filebuffer.is_open());
		}

	void open(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const string& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 

	void close()
		{	
		if (_Filebuffer.close() == 0)
			_Myios::setstate(ios_base::failbit);
		}

private:
	_Myfb _Filebuffer;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_ifstream<_Elem, _Traits>& _Left,
		basic_ifstream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits>
	class basic_ofstream
		: public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_ofstream<_Elem, _Traits> _Myt;
	typedef basic_ostream<_Elem, _Traits> _Mybase;
	typedef basic_filebuf<_Elem, _Traits> _Myfb;
	typedef basic_ios<_Elem, _Traits> _Myios;

	basic_ofstream()
		: _Mybase(&_Filebuffer)
		{	
		}

	explicit basic_ofstream(const char *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ofstream(const string& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ofstream(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ofstream(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

 
	explicit basic_ofstream(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 

	explicit basic_ofstream(FILE *_File)
		: _Mybase(&_Filebuffer),
			_Filebuffer(_File)
		{	
		}

	basic_ofstream(_Myt&& _Right)
		: _Mybase(&_Filebuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Filebuffer.close();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Filebuffer.swap(_Right._Filebuffer);
			}
		}

	basic_ofstream(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	void open(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 

 
	void open(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 
 

	virtual  ~basic_ofstream() noexcept
		{	
		}

	_Myfb *rdbuf() const
		{	
		return ((_Myfb *)&_Filebuffer);
		}

	bool is_open() const
		{	
		return (_Filebuffer.is_open());
		}

	void open(const char *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const string& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 

	void close()
		{	
		if (_Filebuffer.close() == 0)
			_Myios::setstate(ios_base::failbit);
		}

private:
	_Myfb _Filebuffer;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_ofstream<_Elem, _Traits>& _Left,
		basic_ofstream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits>
	class basic_fstream
		: public basic_iostream<_Elem, _Traits>
	{	
public:
	typedef basic_fstream<_Elem, _Traits> _Myt;
	typedef basic_iostream<_Elem, _Traits> _Mybase;
	typedef basic_filebuf<_Elem, _Traits> _Myfb;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	basic_fstream()
		: _Mybase(&_Filebuffer)
		{	
		}

	explicit basic_fstream(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_fstream(const string& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_fstream(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_fstream(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

 
	explicit basic_fstream(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 

	explicit basic_fstream(FILE *_File)
		: _Mybase(&_Filebuffer),
			_Filebuffer(_File)
		{	
		}

	basic_fstream(_Myt&& _Right)
		: _Mybase(&_Filebuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Filebuffer.close();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Filebuffer.swap(_Right._Filebuffer);
			}
		}

	basic_fstream(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	void open(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 

 
	void open(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 
 

	virtual  ~basic_fstream() noexcept
		{	
		}

	_Myfb *rdbuf() const
		{	
		return ((_Myfb *)&_Filebuffer);
		}

	bool is_open() const
		{	
		return (_Filebuffer.is_open());
		}

	void open(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const string& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 

	void close()
		{	
		if (_Filebuffer.close() == 0)
			_Myios::setstate(ios_base::failbit);
	}

private:
	_Myfb _Filebuffer;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_fstream<_Elem, _Traits>& _Left,
		basic_fstream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)












using std::istream;
using std::ostream;
using std::ofstream;
using std::ifstream;
using std::fstream;
using std::filebuf;
using std::streambuf;
using std::streampos;
using std::ios;
using std::cout;
using std::cerr;
using std::cin;
using std::endl;
using std::ends;
using std::flush;
using std::setw;
using std::setprecision;
using std::hex;
using std::dec;




typedef std::ostream Standard_OStream;















inline Standard_ExtCharacter ToExtCharacter(const Standard_Character achar)
{

    return (Standard_ExtCharacter)( (unsigned char)achar & 0x00ff );
}




inline Standard_Character ToCharacter(const Standard_ExtCharacter achar)
{

    return (Standard_Character)(unsigned char)(achar & 0x00ff);
}




inline Standard_Boolean IsAnAscii(const Standard_ExtCharacter achar)
{
    return ! ( achar & 0xff00 );
}




inline Standard_Boolean IsEqual(const Standard_ExtCharacter One,
				const Standard_ExtCharacter Two)
{ return One == Two; }






































__declspec( dllimport ) extern Standard_Integer HashCode (const Standard_CString,
                           const Standard_Integer);
inline Standard_Integer HashCode (const Standard_CString,
                                  const Standard_Integer,
                                  const Standard_Integer);
inline Standard_Integer HashCode (const Standard_CString,
                                  const Standard_Integer ,
                                  const Standard_Integer ,
                                  Standard_Integer& );
__declspec( dllimport ) extern Standard_Integer HashCodes (const Standard_CString,
                                           const Standard_Integer);


__declspec( dllimport ) extern double Atof    (const char* theStr);
__declspec( dllimport ) extern double Strtod  (const char* theStr, char** theNextPtr);
__declspec( dllimport ) extern int    Printf  (const char* theFormat, ...);
__declspec( dllimport ) extern int    Fprintf (FILE* theFile, const char* theFormat, ...);
__declspec( dllimport ) extern int    Sprintf (char* theBuffer, const char* theFormat, ...);




inline Standard_Boolean IsEqual(const Standard_CString One
				 ,const Standard_CString Two)
{
  return (strcmp(One,Two) == 0);
}





inline Standard_Integer HashCode (const Standard_CString Value,
                                  const Standard_Integer Len ,
			          const Standard_Integer Upper ,
                                  Standard_Integer& aHashCode )
{
  aHashCode = HashCodes( Value , Len );

  return HashCode( (Standard_Integer)aHashCode , Upper ) ;
}





inline Standard_Integer HashCode (const Standard_CString Value,
                                  const Standard_Integer Len ,
			          const Standard_Integer Upper )
{

  return HashCode( (Standard_Integer) HashCodes( Value , Len ) , Upper ) ;
}

































__declspec( dllimport ) extern Standard_Integer HashCode (const Standard_ExtString, const Standard_Integer);








class Standard_Type;

namespace opencascade {
  template <class T> class handle;
}




class Standard_Transient
{
public:
  
  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

public:

  
  Standard_Transient() : count(0) {}

  
  Standard_Transient (const Standard_Transient&) : count(0) {}

  
  Standard_Transient& operator= (const Standard_Transient&) { return *this; }

  
  virtual ~Standard_Transient() {}

  
  __declspec( dllexport ) virtual void Delete() const;

public: 
  

  typedef void base_type;

  static const char* get_type_name () { return "Standard_Transient"; }

  
  __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor ();

  
  __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const;

  
  __declspec( dllexport ) Standard_Boolean IsInstance(const opencascade::handle<Standard_Type>& theType) const;  

  
  __declspec( dllexport ) Standard_Boolean IsInstance(const Standard_CString theTypeName) const;  

  
  
  
  __declspec( dllexport ) Standard_Boolean IsKind(const opencascade::handle<Standard_Type>& theType) const;

  
  
  
  __declspec( dllexport ) Standard_Boolean IsKind(const Standard_CString theTypeName) const;

  
  
  
  
  __declspec( dllexport ) Standard_Transient* This() const;

public:
  

  
  Standard_Integer GetRefCount() const { return count; }

  
  __declspec( dllexport ) void IncrementRefCounter() const;

  
  
  __declspec( dllexport ) Standard_Integer DecrementRefCounter() const;

private:

  
  mutable volatile Standard_Integer count;
};


inline Standard_Integer HashCode (const Standard_Transient* theObject, const Standard_Integer theUpper)
{
  return ::HashCode ((Standard_Address*)theObject, theUpper);
}


typedef opencascade::handle<Standard_Transient> Handle_Standard_Transient;






























class Standard_Transient;

namespace opencascade {

  
  template <class T1, class T2, class Dummy = void>
  struct is_base_but_not_same : std::is_base_of <T1, T2> {};

  
  
  template <class T1, class T2>
  struct is_base_but_not_same <T1, T2, typename std::enable_if <std::is_same <T1, T2>::value>::type> : std::false_type {};

  
  
  
  
  
  
  
  
  
  
  
  
  template <class T>
  class handle
  {
  public:
    
    typedef T element_type;

  public:
  
    
    handle () : entity(0) {}

    
    handle (const T *thePtr) : entity(const_cast<T*>(thePtr))
    {
      BeginScope();
    }

    
    handle (const handle& theHandle) : entity(theHandle.entity)
    {
      BeginScope();
    }

    
    handle (handle&& theHandle) : entity(theHandle.entity)
    {
      theHandle.entity = 0;
    }

    
    ~handle ()
    {
      EndScope();
    }

    
    void Nullify()
    {
      EndScope();
    }

    
    bool IsNull() const { return entity == 0; } 

    
    void reset (T* thePtr)
    {
      Assign (thePtr);
    }

    
    handle& operator= (const handle& theHandle)
    {
      Assign (theHandle.entity);
      return *this;
    }

    
    handle& operator= (const T* thePtr)
    {
      Assign (const_cast<T*>(thePtr));
      return *this;
    }

    
    handle& operator= (handle&& theHandle)
    {
      std::swap (this->entity, theHandle.entity);
      return *this;
    }

    
    
    T* get() const { return static_cast<T*>(this->entity); }

    
    T* operator-> () const { return static_cast<T*>(this->entity); }

    
    T& operator* () const { return *get(); }

    
    template <class T2>
    bool operator== (const handle<T2>& theHandle) const
    { 
      return get() == theHandle.get();
    }

    
    template <class T2>
    bool operator== (const T2 *thePtr) const
    { 
      return get() == thePtr;
    }

    
    template <class T2>
    friend bool operator== (const T2 *left, const handle& right)
    {
      return left == right.get();
    }

    
    template <class T2>
    bool operator!= (const handle<T2>& theHandle) const
    {
      return get() != theHandle.get();
    }

    
    template <class T2>
    bool operator!= (const T2 *thePtr) const
    {
      return get() != thePtr;
    }

    
    template <class T2>
    friend bool operator!= (const T2 *left, const handle& right)
    {
      return left != right.get();
    }

    
    template <class T2>
    bool operator< (const handle<T2>& theHandle) const
    { 
      return get() < theHandle.get();
    }

    
    template <class T2>
    static typename std::enable_if<is_base_but_not_same<T2, T>::value, handle>::type
      DownCast (const handle<T2>& theObject)
    {
      return handle (dynamic_cast<T*>(const_cast<T2*>(theObject.get())));
    }

    
    template <class T2>
    static typename std::enable_if<is_base_but_not_same<T2, T>::value, handle>::type 
      DownCast (const T2* thePtr)
    {
      return handle (dynamic_cast<T*>(const_cast<T2*>(thePtr)));
    }

    
    template <class T2>
    __declspec(deprecated("down-casting from object of the same or unrelated type is meaningless"))
    static handle DownCast (const handle<T2>& theObject, typename std::enable_if<!is_base_but_not_same<T2, T>::value, void*>::type = 0)
    {
      return handle (dynamic_cast<T*>(const_cast<T2*>(theObject.get())));
    }

    
    template <class T2>
    __declspec(deprecated("down-casting from object of the same or unrelated type is meaningless"))
    static handle DownCast (const T2* thePtr, typename std::enable_if<!is_base_but_not_same<T2, T>::value, void*>::type = 0)
    {
      return handle (dynamic_cast<T*>(const_cast<T2*>(thePtr)));
    }



    
    explicit operator bool () const
    { 
      return entity != nullptr;
    }











    
    
    







































    
    template <class T2, typename = typename std::enable_if<is_base_but_not_same<T2, T>::value>::type>
    operator const handle<T2>& () const
    {
      return reinterpret_cast<const handle<T2>&>(*this);
    }

    
    
    template <class T2, typename = typename std::enable_if<is_base_but_not_same<T2, T>::value>::type>
    operator handle<T2>& ()
    {
      return reinterpret_cast<handle<T2>&>(*this);
    }









































































  private:

    
    void Assign (Standard_Transient *thePtr)
    {
      if (thePtr == entity)
        return;
      EndScope();
      entity = thePtr;
      BeginScope();
    }
  
    
    void BeginScope()
    {
      if (entity != 0)
        entity->IncrementRefCounter();
    }

    
    void EndScope()
    {
      if (entity != 0 && entity->DecrementRefCounter() == 0)
        entity->Delete();
      entity = 0;
    }

    template <class T2> friend class handle;

  private:
    Standard_Transient* entity;
  };

} 





template <class T>
inline Standard_Integer HashCode (const opencascade::handle<T>& theHandle, const Standard_Integer theUpper)
{
  return ::HashCode (const_cast<Standard_Address>(static_cast<const void*>(theHandle.get())), theUpper);
}



















































class Standard_ConstructionError;
class Standard_OutOfRange;
class gp_Mat;









class gp_XYZ 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_XYZ();
  
  
    gp_XYZ(const Standard_Real X, const Standard_Real Y, const Standard_Real Z);
  
  
  
    void SetCoord (const Standard_Real X, const Standard_Real Y, const Standard_Real Z);
  

  
  
  
  
  
    void SetCoord (const Standard_Integer Index, const Standard_Real Xi);
  
  
    void SetX (const Standard_Real X);
  
  
    void SetY (const Standard_Real Y);
  
  
    void SetZ (const Standard_Real Z);
  

  
  
  
  
  
  
    Standard_Real Coord (const Standard_Integer Index) const;
  
    Standard_Real& ChangeCoord (const Standard_Integer theIndex);
  
    void Coord (Standard_Real& X, Standard_Real& Y, Standard_Real& Z) const;

    
    
    
    inline const Standard_Real* GetData() const { return (&x); }

    
    
    
    inline Standard_Real* ChangeData() { return (&x); }
  
  
    Standard_Real X() const;
  
  
    Standard_Real Y() const;
  
  
    Standard_Real Z() const;
  
  
    Standard_Real Modulus() const;
  
  
    Standard_Real SquareModulus() const;
  

  
  
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsEqual (const gp_XYZ& Other, const Standard_Real Tolerance) const;
  

  
  
  
    void Add (const gp_XYZ& Other);
  void operator += (const gp_XYZ& Other)
{
  Add(Other);
}
  

  
  
  
    gp_XYZ Added (const gp_XYZ& Other) const;
  gp_XYZ operator + (const gp_XYZ& Other) const
{
  return Added(Other);
}
  

  
  
  
    void Cross (const gp_XYZ& Right);
  void operator ^= (const gp_XYZ& Right)
{
  Cross(Right);
}
  

  
  
  
    gp_XYZ Crossed (const gp_XYZ& Right) const;
  gp_XYZ operator ^ (const gp_XYZ& Right) const
{
  return Crossed(Right);
}
  

  
  
    Standard_Real CrossMagnitude (const gp_XYZ& Right) const;
  

  
  
    Standard_Real CrossSquareMagnitude (const gp_XYZ& Right) const;
  
  
  
    void CrossCross (const gp_XYZ& Coord1, const gp_XYZ& Coord2);
  
  
  
    gp_XYZ CrossCrossed (const gp_XYZ& Coord1, const gp_XYZ& Coord2) const;
  
  
    void Divide (const Standard_Real Scalar);
  void operator /= (const Standard_Real Scalar)
{
  Divide(Scalar);
}
  
  
    gp_XYZ Divided (const Standard_Real Scalar) const;
  gp_XYZ operator / (const Standard_Real Scalar) const
{
  return Divided(Scalar);
}
  
  
    Standard_Real Dot (const gp_XYZ& Other) const;
  Standard_Real operator * (const gp_XYZ& Other) const
{
  return Dot(Other);
}
  
  
    Standard_Real DotCross (const gp_XYZ& Coord1, const gp_XYZ& Coord2) const;
  

  
  
  
    void Multiply (const Standard_Real Scalar);
  void operator *= (const Standard_Real Scalar)
{
  Multiply(Scalar);
}
  

  
  
  
    void Multiply (const gp_XYZ& Other);
  void operator *= (const gp_XYZ& Other)
{
  Multiply(Other);
}
  
  
    void Multiply (const gp_Mat& Matrix);
  void operator *= (const gp_Mat& Matrix)
{
  Multiply(Matrix);
}
  

  
  
  
    gp_XYZ Multiplied (const Standard_Real Scalar) const;
  gp_XYZ operator * (const Standard_Real Scalar) const
{
  return Multiplied(Scalar);
}
  

  
  
  
    gp_XYZ Multiplied (const gp_XYZ& Other) const;
  
  
    gp_XYZ Multiplied (const gp_Mat& Matrix) const;
  gp_XYZ operator * (const gp_Mat& Matrix) const
{
  return Multiplied(Matrix);
}
  

  
  
  
  
    void Normalize();
  

  
  
  
  
    gp_XYZ Normalized() const;
  

  
  
  
    void Reverse();
  

  
  
  
    gp_XYZ Reversed() const;
  

  
  
  
    void Subtract (const gp_XYZ& Right);
  void operator -= (const gp_XYZ& Right)
{
  Subtract(Right);
}
  

  
  
  
    gp_XYZ Subtracted (const gp_XYZ& Right) const;
  gp_XYZ operator - (const gp_XYZ& Right) const
{
  return Subtracted(Right);
}
  

  
  
    void SetLinearForm (const Standard_Real A1, const gp_XYZ& XYZ1, const Standard_Real A2, const gp_XYZ& XYZ2, const Standard_Real A3, const gp_XYZ& XYZ3, const gp_XYZ& XYZ4);
  

  
  
    void SetLinearForm (const Standard_Real A1, const gp_XYZ& XYZ1, const Standard_Real A2, const gp_XYZ& XYZ2, const Standard_Real A3, const gp_XYZ& XYZ3);
  

  
  
    void SetLinearForm (const Standard_Real A1, const gp_XYZ& XYZ1, const Standard_Real A2, const gp_XYZ& XYZ2, const gp_XYZ& XYZ3);
  

  
  
    void SetLinearForm (const Standard_Real A1, const gp_XYZ& XYZ1, const Standard_Real A2, const gp_XYZ& XYZ2);
  

  
  
    void SetLinearForm (const Standard_Real A1, const gp_XYZ& XYZ1, const gp_XYZ& XYZ2);
  

  
  
    void SetLinearForm (const gp_XYZ& XYZ1, const gp_XYZ& XYZ2);




protected:





private:



  Standard_Real x;
  Standard_Real y;
  Standard_Real z;


};












































class gp_Pnt;
class gp_Dir;
class gp_Ax1;
class gp_Ax2;
class gp_Pnt2d;
class gp_Dir2d;
class gp_Ax2d;
class gp_XYZ;
class gp_Mat;
class gp_Quaternion;
class gp_Trsf;
class gp_GTrsf;
class gp_Pnt;
class gp_Vec;
class gp_Dir;
class gp_Ax1;
class gp_Ax2;
class gp_Ax3;
class gp_Lin;
class gp_Circ;
class gp_Elips;
class gp_Hypr;
class gp_Parab;
class gp_Pln;
class gp_Cylinder;
class gp_Sphere;
class gp_Torus;
class gp_Cone;
class gp_XY;
class gp_Mat2d;
class gp_Trsf2d;
class gp_GTrsf2d;
class gp_Pnt2d;
class gp_Vec2d;
class gp_Dir2d;
class gp_Ax2d;
class gp_Ax22d;
class gp_Lin2d;
class gp_Circ2d;
class gp_Elips2d;
class gp_Hypr2d;
class gp_Parab2d;












class gp 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
  
  
  
  
  
  
    static Standard_Real Resolution();
  
  
  __declspec( dllexport ) static const gp_Pnt& Origin();
  
  
  __declspec( dllexport ) static const gp_Dir& DX();
  
  
  __declspec( dllexport ) static const gp_Dir& DY();
  
  
  __declspec( dllexport ) static const gp_Dir& DZ();
  
  
  
  __declspec( dllexport ) static const gp_Ax1& OX();
  
  
  
  __declspec( dllexport ) static const gp_Ax1& OY();
  
  
  
  __declspec( dllexport ) static const gp_Ax1& OZ();
  
  
  
  
  __declspec( dllexport ) static const gp_Ax2& XOY();
  
  
  
  
  __declspec( dllexport ) static const gp_Ax2& ZOX();
  
  
  
  
  
  __declspec( dllexport ) static const gp_Ax2& YOZ();
  
  
  __declspec( dllexport ) static const gp_Pnt2d& Origin2d();
  
  
  __declspec( dllexport ) static const gp_Dir2d& DX2d();
  
  
  __declspec( dllexport ) static const gp_Dir2d& DY2d();
  
  
  
  __declspec( dllexport ) static const gp_Ax2d& OX2d();
  
  
  
  __declspec( dllexport ) static const gp_Ax2d& OY2d();




protected:





private:




friend class gp_XYZ;
friend class gp_Mat;
friend class gp_Quaternion;
friend class gp_Trsf;
friend class gp_GTrsf;
friend class gp_Pnt;
friend class gp_Vec;
friend class gp_Dir;
friend class gp_Ax1;
friend class gp_Ax2;
friend class gp_Ax3;
friend class gp_Lin;
friend class gp_Circ;
friend class gp_Elips;
friend class gp_Hypr;
friend class gp_Parab;
friend class gp_Pln;
friend class gp_Cylinder;
friend class gp_Sphere;
friend class gp_Torus;
friend class gp_Cone;
friend class gp_XY;
friend class gp_Mat2d;
friend class gp_Trsf2d;
friend class gp_GTrsf2d;
friend class gp_Pnt2d;
friend class gp_Vec2d;
friend class gp_Dir2d;
friend class gp_Ax2d;
friend class gp_Ax22d;
friend class gp_Lin2d;
friend class gp_Circ2d;
friend class gp_Elips2d;
friend class gp_Hypr2d;
friend class gp_Parab2d;

};


















inline Standard_Real gp::Resolution  () 
{ 
  return RealSmall(); 
}

































class Standard_ConstructionError;
class Standard_OutOfRange;
class gp_XYZ;
class gp_Trsf;
class gp_GTrsf;





class gp_Mat 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Mat();
  
    gp_Mat(const Standard_Real a11, const Standard_Real a12, const Standard_Real a13, const Standard_Real a21, const Standard_Real a22, const Standard_Real a23, const Standard_Real a31, const Standard_Real a32, const Standard_Real a33);
  
  
  
  __declspec( dllexport ) gp_Mat(const gp_XYZ& Col1, const gp_XYZ& Col2, const gp_XYZ& Col3);
  
  
  
  
  __declspec( dllexport ) void SetCol (const Standard_Integer Col, const gp_XYZ& Value);
  
  
  
  __declspec( dllexport ) void SetCols (const gp_XYZ& Col1, const gp_XYZ& Col2, const gp_XYZ& Col3);
  

  
  
  
  
  
  
  
  
  __declspec( dllexport ) void SetCross (const gp_XYZ& Ref);
  

  
  
  
  
  
    void SetDiagonal (const Standard_Real X1, const Standard_Real X2, const Standard_Real X3);
  

  
  
  
  
  
  __declspec( dllexport ) void SetDot (const gp_XYZ& Ref);
  
  
    void SetIdentity();
  

  
  
  
  
  __declspec( dllexport ) void SetRotation (const gp_XYZ& Axis, const Standard_Real Ang);
  
  
  
  __declspec( dllexport ) void SetRow (const Standard_Integer Row, const gp_XYZ& Value);
  
  
  
  __declspec( dllexport ) void SetRows (const gp_XYZ& Row1, const gp_XYZ& Row2, const gp_XYZ& Row3);
  

  
  
  
  
  
    void SetScale (const Standard_Real S);
  
  
  
    void SetValue (const Standard_Integer Row, const Standard_Integer Col, const Standard_Real Value);
  
  
  
  __declspec( dllexport ) gp_XYZ Column (const Standard_Integer Col) const;
  
  
    Standard_Real Determinant() const;
  
  
  __declspec( dllexport ) gp_XYZ Diagonal() const;
  
  
  
  __declspec( dllexport ) gp_XYZ Row (const Standard_Integer Row) const;
  
  
  
    const Standard_Real& Value (const Standard_Integer Row, const Standard_Integer Col) const;
  const Standard_Real& operator() (const Standard_Integer Row, const Standard_Integer Col) const
{
  return Value(Row,Col);
}
  
  
  
    Standard_Real& ChangeValue (const Standard_Integer Row, const Standard_Integer Col);
  Standard_Real& operator() (const Standard_Integer Row, const Standard_Integer Col)
{
  return ChangeValue(Row,Col);
}
  

  
  
  
    Standard_Boolean IsSingular() const;
  
    void Add (const gp_Mat& Other);
  void operator += (const gp_Mat& Other)
{
  Add(Other);
}
  
  
  
  
    gp_Mat Added (const gp_Mat& Other) const;
  gp_Mat operator + (const gp_Mat& Other) const
{
  return Added(Other);
}
  
    void Divide (const Standard_Real Scalar);
  void operator /= (const Standard_Real Scalar)
{
  Divide(Scalar);
}
  
  
    gp_Mat Divided (const Standard_Real Scalar) const;
  gp_Mat operator / (const Standard_Real Scalar) const
{
  return Divided(Scalar);
}
  
  __declspec( dllexport ) void Invert();
  

  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) gp_Mat Inverted() const;
  

  
    gp_Mat Multiplied (const gp_Mat& Other) const;
  gp_Mat operator * (const gp_Mat& Other) const
{
  return Multiplied(Other);
}
  
  
    void Multiply (const gp_Mat& Other);
  void operator *= (const gp_Mat& Other)
{
  Multiply(Other);
}
  
    void PreMultiply (const gp_Mat& Other);
  
    gp_Mat Multiplied (const Standard_Real Scalar) const;
  gp_Mat operator * (const Standard_Real Scalar) const
{
  return Multiplied(Scalar);
}
  

  
    void Multiply (const Standard_Real Scalar);
  void operator *= (const Standard_Real Scalar)
{
  Multiply(Scalar);
}
  
  __declspec( dllexport ) void Power (const Standard_Integer N);
  

  
  
  
  
  
    gp_Mat Powered (const Standard_Integer N) const;
  
    void Subtract (const gp_Mat& Other);
  void operator -= (const gp_Mat& Other)
{
  Subtract(Other);
}
  

  
  
    gp_Mat Subtracted (const gp_Mat& Other) const;
  gp_Mat operator - (const gp_Mat& Other) const
{
  return Subtracted(Other);
}
  
    void Transpose();
  

  
    gp_Mat Transposed() const;


friend class gp_XYZ;
friend class gp_Trsf;
friend class gp_GTrsf;


protected:





private:



  Standard_Real matrix[3][3];


};
































































































namespace opencascade {
  template <typename T>
  class type_instance;
}
























class Standard_Type : public Standard_Transient
{
public:

  
  Standard_CString SystemName() const { return mySystemName; }
  
  
  Standard_CString Name() const { return myName; }
  
  
  Standard_Size Size() const { return mySize; }

  
  const opencascade::handle<Standard_Type>& Parent () const { return myParent; }
  
  
  
  __declspec( dllexport ) Standard_Boolean SubType (const opencascade::handle<Standard_Type>& theOther) const;

  
  
  __declspec( dllexport ) Standard_Boolean SubType (const Standard_CString theOther) const;

  
  __declspec( dllexport ) void Print (Standard_OStream& theStream) const;

  
  
  
  
  
  template <class T>
  static const opencascade::handle<Standard_Type>& Instance()
  {
    return opencascade::type_instance<T>::get();
  }

  
  
  
  
  
  
  
  
  __declspec( dllexport ) static 
    Standard_Type* Register (const char* theSystemName, const char* theName,
                             Standard_Size theSize, const opencascade::handle<Standard_Type>& theParent);

  
  __declspec( dllexport ) ~Standard_Type ();

  
  public: typedef Standard_Transient base_type; static const char* get_type_name () { return "Standard_Type"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

private:

  
  Standard_Type (const char* theSystemName, const char* theName,
                 Standard_Size theSize, const opencascade::handle<Standard_Type>& theParent);

private:
  Standard_CString mySystemName;  
  Standard_CString myName;        
  Standard_Size mySize;           
  opencascade::handle<Standard_Type> myParent; 
};

namespace opencascade {

  
  
  
  
  
  
  
  
  
  template <typename T>
  class type_instance
  {
    static opencascade::handle<Standard_Type> myInstance;
  public:
    static const opencascade::handle<Standard_Type>& get ();
  };

  
  template <>
  class type_instance<void>
  {
  public:
    static opencascade::handle<Standard_Type> get () { return 0; }
  };

  
  
  template <typename T>
  const opencascade::handle<Standard_Type>& type_instance<T>::get ()
  {





    
    
    static opencascade::handle<Standard_Type> anInstance =
      Standard_Type::Register (typeid(T).name(), T::get_type_name(), sizeof(T), 
                               type_instance<typename T::base_type>::get());
    return anInstance;
  }

  
  
  
  
  
  
  
  






}


inline Standard_OStream& operator << (Standard_OStream& theStream, const opencascade::handle<Standard_Type>& theType) 
{
  theType->Print (theStream);
  return theStream;
}


class Standard_Type; class Handle_Standard_Type : public opencascade::handle<Standard_Type> { public: Handle_Standard_Type() {} Handle_Standard_Type(opencascade::handle<Standard_Type>&& theHandle) : opencascade::handle<Standard_Type>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_Type,T2>::value>::type> inline Handle_Standard_Type(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_Type>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_Type,T2>::value>::type> inline Handle_Standard_Type(const T2* theOther) : opencascade::handle<Standard_Type>(theOther) {} template<typename T> inline Handle_Standard_Type& operator=(T theOther) { opencascade::handle<Standard_Type>::operator=(theOther); return *this; } };













































































#pragma once





#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189)
 #pragma warning(disable: 4172)
 #pragma warning(disable: 4455)

namespace std {
		
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	typedef ctype<_Elem> _Ctype;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());
		_Str.erase();

		try {
		_Mysizt _Size = 0 < _Istr.width()
			&& (_Mysizt)_Istr.width() < _Str.max_size()
				? (_Mysizt)_Istr.width() : _Str.max_size();
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Traits::to_char_type(_Meta)))
				break;	
			else
				{	
				_Str.append(1, _Traits::to_char_type(_Meta));
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.width(0);
	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr, true);

	if (_Ok)
		{	
		try {
		_Str.erase();
		const typename _Traits::int_type _Metadelim =
			_Traits::to_int_type(_Delim);
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; ; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Traits::eq_int_type(_Meta, _Metadelim))
				{	
				_Changed = true;
				_Istr.rdbuf()->sbumpc();
				break;
				}
			else if (_Str.max_size() <= _Str.size())
				{	
				_State |= ios_base::failbit;
				break;
				}
			else
				{	
				_Str += _Traits::to_char_type(_Meta);
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(_Istr, _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (::std:: move(_Istr) >> _Str);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	return (getline(::std:: move(_Istr), _Str, _Delim));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;

	ios_base::iostate _State = ios_base::goodbit;
	_Mysizt _Size = _Str.size();
	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
		? 0 : (_Mysizt)_Ostr.width() - _Size;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
	try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Str.c_str(), (streamsize)_Size)
				!= (streamsize)_Size)
				_State |= ios_base::badbit;
		else
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

		

inline int stoi(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoi argument");
	if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
		_Xout_of_range("stoi argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return ((int)_Ans);
	}

inline long stol(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stol argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stol argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long stoul(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	unsigned long _Ans = :: strtoul(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoul argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoul argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long long stoll(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	long long _Ans = :: strtoll(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoll argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoll argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long long stoull(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	unsigned long long _Ans = :: strtoull(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoull argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoull argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline float stof(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	float _Ans = :: strtof(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stof argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stof argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline double stod(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	double _Ans = :: strtod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stod argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stod argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long double stold(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	long double _Ans = :: strtold(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stold argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stold argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

		
inline int stoi(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoi argument");
	if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
		_Xout_of_range("stoi argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return ((int)_Ans);
	}

inline long stol(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stol argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stol argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	unsigned long _Ans = :: wcstoul(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoul argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoul argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long long stoll(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	long long _Ans = :: wcstoll(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoll argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoll argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long long stoull(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	unsigned long long _Ans = :: wcstoull(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoull argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoull argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline float stof(const wstring& _Str, size_t *_Idx = 0)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	float _Ans = :: wcstof(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stof argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stof argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline double stod(const wstring& _Str, size_t *_Idx = 0)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	double _Ans = :: wcstod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stod argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stod argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long double stold(const wstring& _Str, size_t *_Idx = 0)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	long double _Ans = :: wcstold(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stold argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stold argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

		
 #pragma warning(push)
 #pragma warning(disable: 4127) 
template<class _Elem,
	class _UTy> inline
	_Elem* _UIntegral_to_buff(_Elem* _RNext, _UTy _UVal)
	{	
	static_assert(is_unsigned<_UTy>::value, "_UTy must be unsigned");


	auto _UVal_trunc = _UVal;



















	do
		{
		*--_RNext = '0' + _UVal_trunc % 10;
		_UVal_trunc /= 10;
		}
	while (_UVal_trunc != 0);
	return (_RNext);
	}
 #pragma warning(pop)

template<class _Elem,
	class _Ty> inline
	basic_string<_Elem> _Integral_to_string(const _Ty _Val)
	{	
	static_assert(is_integral<_Ty>::value, "_Ty must be integral");
	using _UTy = make_unsigned_t<_Ty>;
	_Elem _Buff[21]; 
	_Elem* const _Buff_end = ::std:: end(_Buff);
	_Elem* _RNext = _Buff_end;
	auto _UVal = static_cast<_UTy>(_Val);
	if (_Val < 0)
		{
		_RNext = _UIntegral_to_buff(_RNext, 0 - _UVal);
		*--_RNext = '-';
		}
	else
		_RNext = _UIntegral_to_buff(_RNext, _UVal);

	return (basic_string<_Elem>(_RNext, _Buff_end));
	}

template<class _Ty> inline
	string _Floating_to_string(const char *_Fmt, _Ty _Val)
	{	
	static_assert(is_floating_point<_Ty>::value,
		"_Ty must be floating point");

	int _Len = :: _scprintf(_Fmt, _Val);
	string _Str(_Len + 1, '\0');
	:: sprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
	_Str.resize(_Len);
	return (_Str);
	}

template<class _Ty> inline
	wstring _Floating_to_wstring(const wchar_t *_Fmt, _Ty _Val)
	{	
	static_assert(is_floating_point<_Ty>::value,
		"_Ty must be floating point");

	int _Len = :: _scwprintf(_Fmt, _Val);
	wstring _Str(_Len + 1, L'\0');
	:: swprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
	_Str.resize(_Len);
	return (_Str);
	}



		
inline string to_string(int _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

inline string to_string(unsigned int _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

inline string to_string(long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

inline string to_string(unsigned long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

inline string to_string(long long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

inline string to_string(unsigned long long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

inline string to_string(float _Val)
	{	
	return (_Floating_to_string("%f", _Val));
	}

inline string to_string(double _Val)
	{	
	return (_Floating_to_string("%f", _Val));
	}

inline string to_string(long double _Val)
	{	
	return (_Floating_to_string("%Lf", _Val));
	}

		
inline wstring to_wstring(int _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

inline wstring to_wstring(unsigned int _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

inline wstring to_wstring(long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

inline wstring to_wstring(unsigned long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

inline wstring to_wstring(long long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

inline wstring to_wstring(unsigned long long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

inline wstring to_wstring(float _Val)
	{	
	return (_Floating_to_wstring(L"%f", _Val));
	}

inline wstring to_wstring(double _Val)
	{	
	return (_Floating_to_wstring(L"%f", _Val));
	}

inline wstring to_wstring(long double _Val)
	{	
	return (_Floating_to_wstring(L"%Lf", _Val));
	}

	





inline namespace literals {
inline namespace string_literals {
inline string operator "" s(const char *_Str, size_t _Len)
	{	
	return (string(_Str, _Len));
	}

inline wstring operator "" s(const wchar_t *_Str, size_t _Len)
	{	
	return (wstring(_Str, _Len));
	}

inline u16string operator "" s(const char16_t *_Str, size_t _Len)
	{	
	return (u16string(_Str, _Len));
	}

inline u32string operator "" s(const char32_t *_Str, size_t _Len)
	{	
	return (u32string(_Str, _Len));
	}
}	
}	





}

 
 #pragma warning(pop)
 #pragma pack(pop)









 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
namespace std {
 #pragma warning(disable: 4251)

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_stringbuf
		: public basic_streambuf<_Elem, _Traits>
	{	
public:
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Myt;
	typedef _Alloc allocator_type;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_stringbuf(ios_base::openmode _Mode =
		ios_base::in | ios_base::out)
		{	
		_Init(0, 0, _Getstate(_Mode));
		}

	explicit basic_stringbuf(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		_Init(_Str.c_str(), _Str.size(), _Getstate(_Mode));
		}

	basic_stringbuf(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Tidy();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mysb::swap(_Right);
			::std:: swap(_Seekhigh, _Right._Seekhigh);
			::std:: swap(_Mystate, _Right._Mystate);
			_Swap_adl(_Al, _Right._Al);
			}
		}

	basic_stringbuf(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	virtual ~basic_stringbuf() noexcept
		{	
		_Tidy();
		}

	enum
		{	
		_Allocated = 1,	
		_Constant = 2,	
		_Noread = 4,	
		_Append = 8,	
		_Atend = 16};	
	typedef int _Strstate;

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	_Mystr str() const
		{	
		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)
			{	
			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
			return (_Str);
			}
		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)
			{	
			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());
			return (_Str);
			}
		else
			{	
			_Mystr _Nul;
			return (_Nul);
			}
		}

	void str(const _Mystr& _Newstr)
		{	
		_Tidy();
		_Init(_Newstr.c_str(), _Newstr.size(), _Mystate);
		}

protected:
	virtual int_type overflow(int_type _Meta = _Traits::eof())
		{	
		if (_Mystate & _Constant)
			return (_Traits::eof());	
		else if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			return (_Traits::not_eof(_Meta));	

		if (_Mystate & _Append
			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)
			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

		if (_Mysb::pptr() != 0
			&& _Mysb::pptr() < _Mysb::epptr())
			{	
			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			return (_Meta);
			}
		else
			{	
			size_t _Oldsize = _Mysb::pptr() == 0
				? 0 : _Mysb::epptr() - _Mysb::eback();
			size_t _Newsize = _Oldsize;
			size_t _Inc = _Newsize / 2 < _MINSIZE
				? _MINSIZE : _Newsize / 2;	

			while (0 < _Inc && 2147483647 - _Inc < _Newsize)
				_Inc /= 2;	
			if (_Inc == 0)
				return (_Traits::eof());	

			_Newsize += _Inc;

			_Elem *_Newptr = _Al.allocate(_Newsize);
			_Elem *_Oldptr = _Mysb::eback();

			if (0 < _Oldsize)
				_Traits::copy(_Newptr, _Oldptr, _Oldsize);

			if (_Oldsize == 0)
				{	
				_Seekhigh = _Newptr;
				_Mysb::setp(_Newptr, _Newptr + _Newsize);
				if (_Mystate & _Noread)
					_Mysb::setg(_Newptr, 0, _Newptr);
				else
					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);
				}
			else
				{	
				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);
				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
					_Newptr + (_Mysb::pptr() - _Oldptr),
					_Newptr + _Newsize);
				if (_Mystate & _Noread)
					_Mysb::setg(_Newptr, 0, _Newptr);
				else
					_Mysb::setg(_Newptr,
						_Newptr + (_Mysb::gptr() - _Oldptr),
						_Mysb::pptr() + 1);
				}

			if (_Mystate & _Allocated)
				_Al.deallocate(_Oldptr, _Oldsize);
			_Mystate |= _Allocated;

			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			return (_Meta);
			}
		}

	virtual int_type pbackfail(int_type _Meta = _Traits::eof())
		{	
		if (_Mysb::gptr() == 0
			|| _Mysb::gptr() <= _Mysb::eback()
			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)
			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
			&& _Mystate & _Constant))
			return (_Traits::eof());	
		else
			{	
			_Mysb::gbump(-1);
			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
				*_Mysb::gptr() = _Traits::to_char_type(_Meta);
			return (_Traits::not_eof(_Meta));
			}
		}

	virtual int_type underflow()
		{	
		if (_Mysb::gptr() == 0)
			return (_Traits::eof());	
		else if (_Mysb::gptr() < _Mysb::egptr())
			return (_Traits::to_int_type(*_Mysb::gptr()));	
		else if (_Mystate & _Noread || _Mysb::pptr() == 0
			|| (_Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr()))
			return (_Traits::eof());	
		else
			{	
			if (_Seekhigh < _Mysb::pptr())
				_Seekhigh = _Mysb::pptr();
			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);
			return (_Traits::to_int_type(*_Mysb::gptr()));
			}
		}

	virtual pos_type seekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode _Which = ios_base::in | ios_base::out)
		{	
		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
			_Seekhigh = _Mysb::pptr();	

		if (_Which & ios_base::in && _Mysb::gptr() != 0)
			{	
			if (_Way == ios_base::end)
				_Off += (off_type)(_Seekhigh - _Mysb::eback());
			else if (_Way == ios_base::cur
				&& (_Which & ios_base::out) == 0)
				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());
			else if (_Way != ios_base::beg)
				_Off = _BADOFF;

			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				{	
				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
				if (_Which & ios_base::out && _Mysb::pptr() != 0)
					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
						_Mysb::epptr());	
				}
			else
				_Off = _BADOFF;
			}
		else if (_Which & ios_base::out && _Mysb::pptr() != 0)
			{	
			if (_Way == ios_base::end)
				_Off += (off_type)(_Seekhigh - _Mysb::eback());
			else if (_Way == ios_base::cur)
				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());
			else if (_Way != ios_base::beg)
				_Off = _BADOFF;

			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				_Mysb::pbump((int)(_Mysb::eback()
					- _Mysb::pptr() + _Off));	
			else
				_Off = _BADOFF;
			}

		else if (_Off != 0)


			_Off = _BADOFF;	
		return (pos_type(_Off));
		}

	virtual pos_type seekpos(pos_type _Ptr,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		streamoff _Off = (streamoff)_Ptr;
		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
			_Seekhigh = _Mysb::pptr();	

		if (_Off == _BADOFF)
			;
		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)
			{	
			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				{	
				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
				if (_Mode & ios_base::out && _Mysb::pptr() != 0)
					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
						_Mysb::epptr());	
				}
			else
				_Off = _BADOFF;
			}
		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)
			{	
			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				_Mysb::pbump((int)(_Mysb::eback()
					- _Mysb::pptr() + _Off));	
			else
				_Off = _BADOFF;
			}
		else
			_Off = _BADOFF;	
		return (streampos(_Off));
		}

	void _Init(const _Elem *_Ptr,
		size_t _Count, _Strstate _State)
		{	
		_Seekhigh = 0;
		_Mystate = _State;

		if (_Count != 0
			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))
			{	
			_Elem *_Pnew = _Al.allocate(_Count);
			_Traits::copy(_Pnew, _Ptr, _Count);
			_Seekhigh = _Pnew + _Count;

			if (!(_Mystate & _Noread))
				_Mysb::setg(_Pnew, _Pnew,
					_Pnew + _Count);	
			if (!(_Mystate & _Constant))
				{	
				_Mysb::setp(_Pnew,
					(_Mystate & (_Atend | _Append)) ? _Pnew + _Count : _Pnew,
					_Pnew + _Count);
				if (_Mysb::gptr() == 0)
					_Mysb::setg(_Pnew, 0, _Pnew);
				}
			_Mystate |= _Allocated;
			}
		}

	void _Tidy()
		{	
		if (_Mystate & _Allocated)
			_Al.deallocate(_Mysb::eback(),
				(_Mysb::pptr() != 0 ? _Mysb::epptr()
					: _Mysb::egptr()) - _Mysb::eback());
		_Mysb::setg(0, 0, 0);
		_Mysb::setp(0, 0);
		_Seekhigh = 0;
		_Mystate &= ~_Allocated;
		}

private:
	enum
		{	
		_MINSIZE = 32};

	_Strstate _Getstate(ios_base::openmode _Mode)
		{	
		_Strstate _State = (_Strstate)0;
		if (!(_Mode & ios_base::in))
			_State |= _Noread;
		if (!(_Mode & ios_base::out))
			_State |= _Constant;
		if (_Mode & ios_base::app)
			_State |= _Append;
		if (_Mode & ios_base::ate)
			_State |= _Atend;
		return (_State);
		}

	_Elem *_Seekhigh;	
	_Strstate _Mystate;	
	allocator_type _Al;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringbuf<_Elem, _Traits, _Alloc>& _Left,
		basic_stringbuf<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_istringstream
		: public basic_istream<_Elem, _Traits>
	{	
public:
	typedef basic_istringstream<_Elem, _Traits, _Alloc> _Myt;
	typedef basic_istream<_Elem, _Traits> _Mybase;
	typedef _Alloc allocator_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_istringstream(ios_base::openmode _Mode = ios_base::in)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode | ios_base::in)
		{	
		}

	explicit basic_istringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode | ios_base::in)
		{	
		}

	basic_istringstream(_Myt&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

	basic_istringstream(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	virtual ~basic_istringstream() noexcept
		{	
		}

	_Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	_Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_istringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_istringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_ostringstream
		: public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_ostringstream<_Elem, _Traits, _Alloc> _Myt;
	typedef basic_ostream<_Elem, _Traits> _Mybase;
	typedef _Alloc allocator_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_ostringstream(ios_base::openmode _Mode = ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode | ios_base::out)
		{	
		}

	explicit basic_ostringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode | ios_base::out)
		{	
		}

	basic_ostringstream(_Myt&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

	basic_ostringstream(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	virtual ~basic_ostringstream() noexcept
		{	
		}

	_Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	_Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_ostringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_ostringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_stringstream
		: public basic_iostream<_Elem, _Traits>
	{	
public:
	typedef basic_stringstream<_Elem, _Traits, _Alloc> _Myt;
	typedef basic_iostream<_Elem, _Traits> _Mybase;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef _Alloc allocator_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_stringstream(ios_base::openmode _Mode =
		ios_base::in | ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode)
		{	
		}

	explicit basic_stringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode)
		{	
		}

	basic_stringstream(_Myt&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

	basic_stringstream(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;

	virtual ~basic_stringstream() noexcept
		{	
		}

	_Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	_Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_stringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)










typedef std::stringstream Standard_SStream;












































































class Standard_NoSuchObject;


class Standard_Failure;
class Standard_Failure; class Handle_Standard_Failure : public opencascade::handle<Standard_Failure> { public: Handle_Standard_Failure() {} Handle_Standard_Failure(opencascade::handle<Standard_Failure>&& theHandle) : opencascade::handle<Standard_Failure>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_Failure,T2>::value>::type> inline Handle_Standard_Failure(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_Failure>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_Failure,T2>::value>::type> inline Handle_Standard_Failure(const T2* theOther) : opencascade::handle<Standard_Failure>(theOther) {} template<typename T> inline Handle_Standard_Failure& operator=(T theOther) { opencascade::handle<Standard_Failure>::operator=(theOther); return *this; } };



class Standard_Failure : public Standard_Transient
{

public:

  

  
  __declspec( dllexport ) Standard_Failure();

  
  __declspec( dllexport ) Standard_Failure (const Standard_Failure& f);

  
  __declspec( dllexport ) Standard_Failure(const Standard_CString aString);

  
  __declspec( dllexport ) Standard_Failure& operator= (const Standard_Failure& f);
  
  
  __declspec( dllexport ) ~Standard_Failure();

  
  
  
  
  
  
  
  __declspec( dllexport ) void Print (Standard_OStream& s) const;
  
  
  __declspec( dllexport ) virtual Standard_CString GetMessageString() const;
  
  
  __declspec( dllexport ) virtual void SetMessageString (const Standard_CString aMessage);
  
  __declspec( dllexport ) void Reraise();
  
  __declspec( dllexport ) void Reraise (const Standard_CString aMessage);
  
  
  __declspec( dllexport ) void Reraise (const Standard_SStream& aReason);
  
  
  
  
  __declspec( dllexport ) static void Raise (const Standard_CString aMessage = "");
  
  
  
  
  __declspec( dllexport ) static void Raise (const Standard_SStream& aReason);
  
  
  
  
  
  
  __declspec( dllexport ) static opencascade::handle<Standard_Failure> NewInstance (const Standard_CString aMessage);
  
  
  
  
  
  
  __declspec( dllexport ) void Jump();
  
  
  
  
  __declspec( dllexport ) static opencascade::handle<Standard_Failure> Caught();



  public: typedef Standard_Transient base_type; static const char* get_type_name () { return "Standard_Failure"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:

  
  
  
  
  
  __declspec( dllexport ) virtual void Throw() const;



private:


  Standard_CString myMessage;


};

inline Standard_OStream& operator << (Standard_OStream& AStream,
                                      const opencascade::handle<Standard_Failure>& AFailure)
{
  AFailure->Print(AStream);
  return AStream;
}




class Standard_DomainError;
class Standard_DomainError; class Handle_Standard_DomainError : public opencascade::handle<Standard_DomainError> { public: Handle_Standard_DomainError() {} Handle_Standard_DomainError(opencascade::handle<Standard_DomainError>&& theHandle) : opencascade::handle<Standard_DomainError>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_DomainError,T2>::value>::type> inline Handle_Standard_DomainError(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_DomainError>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_DomainError,T2>::value>::type> inline Handle_Standard_DomainError(const T2* theOther) : opencascade::handle<Standard_DomainError>(theOther) {} template<typename T> inline Handle_Standard_DomainError& operator=(T theOther) { opencascade::handle<Standard_DomainError>::operator=(theOther); return *this; } };


  





class Standard_DomainError : public Standard_Failure { void Throw () const override { throw *this; } public: Standard_DomainError() : Standard_Failure() {} Standard_DomainError(const Standard_CString theMessage) : Standard_Failure(theMessage) {} static void Raise(const Standard_CString theMessage = "") { opencascade::handle<Standard_DomainError> _E = new Standard_DomainError; _E->Reraise(theMessage); } static void Raise(Standard_SStream& theMessage) { opencascade::handle<Standard_DomainError> _E = new Standard_DomainError; _E->Reraise (theMessage); } static opencascade::handle<Standard_DomainError> NewInstance(const Standard_CString theMessage = "") { return new Standard_DomainError(theMessage); } public: typedef Standard_Failure base_type; static const char* get_type_name () { return "Standard_DomainError"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<Standard_DomainError>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return Standard_DomainError::get_type_descriptor(); } };




class Standard_RangeError;
class Standard_RangeError; class Handle_Standard_RangeError : public opencascade::handle<Standard_RangeError> { public: Handle_Standard_RangeError() {} Handle_Standard_RangeError(opencascade::handle<Standard_RangeError>&& theHandle) : opencascade::handle<Standard_RangeError>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_RangeError,T2>::value>::type> inline Handle_Standard_RangeError(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_RangeError>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_RangeError,T2>::value>::type> inline Handle_Standard_RangeError(const T2* theOther) : opencascade::handle<Standard_RangeError>(theOther) {} template<typename T> inline Handle_Standard_RangeError& operator=(T theOther) { opencascade::handle<Standard_RangeError>::operator=(theOther); return *this; } };


  





class Standard_RangeError : public Standard_DomainError { void Throw () const override { throw *this; } public: Standard_RangeError() : Standard_DomainError() {} Standard_RangeError(const Standard_CString theMessage) : Standard_DomainError(theMessage) {} static void Raise(const Standard_CString theMessage = "") { opencascade::handle<Standard_RangeError> _E = new Standard_RangeError; _E->Reraise(theMessage); } static void Raise(Standard_SStream& theMessage) { opencascade::handle<Standard_RangeError> _E = new Standard_RangeError; _E->Reraise (theMessage); } static opencascade::handle<Standard_RangeError> NewInstance(const Standard_CString theMessage = "") { return new Standard_RangeError(theMessage); } public: typedef Standard_DomainError base_type; static const char* get_type_name () { return "Standard_RangeError"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<Standard_RangeError>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return Standard_RangeError::get_type_descriptor(); } };




class Standard_OutOfRange;
class Standard_OutOfRange; class Handle_Standard_OutOfRange : public opencascade::handle<Standard_OutOfRange> { public: Handle_Standard_OutOfRange() {} Handle_Standard_OutOfRange(opencascade::handle<Standard_OutOfRange>&& theHandle) : opencascade::handle<Standard_OutOfRange>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_OutOfRange,T2>::value>::type> inline Handle_Standard_OutOfRange(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_OutOfRange>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_OutOfRange,T2>::value>::type> inline Handle_Standard_OutOfRange(const T2* theOther) : opencascade::handle<Standard_OutOfRange>(theOther) {} template<typename T> inline Handle_Standard_OutOfRange& operator=(T theOther) { opencascade::handle<Standard_OutOfRange>::operator=(theOther); return *this; } };


  





class Standard_OutOfRange : public Standard_RangeError { void Throw () const override { throw *this; } public: Standard_OutOfRange() : Standard_RangeError() {} Standard_OutOfRange(const Standard_CString theMessage) : Standard_RangeError(theMessage) {} static void Raise(const Standard_CString theMessage = "") { opencascade::handle<Standard_OutOfRange> _E = new Standard_OutOfRange; _E->Reraise(theMessage); } static void Raise(Standard_SStream& theMessage) { opencascade::handle<Standard_OutOfRange> _E = new Standard_OutOfRange; _E->Reraise (theMessage); } static opencascade::handle<Standard_OutOfRange> NewInstance(const Standard_CString theMessage = "") { return new Standard_OutOfRange(theMessage); } public: typedef Standard_RangeError base_type; static const char* get_type_name () { return "Standard_OutOfRange"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<Standard_OutOfRange>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return Standard_OutOfRange::get_type_descriptor(); } };




























class Standard_ConstructionError;
class Standard_ConstructionError; class Handle_Standard_ConstructionError : public opencascade::handle<Standard_ConstructionError> { public: Handle_Standard_ConstructionError() {} Handle_Standard_ConstructionError(opencascade::handle<Standard_ConstructionError>&& theHandle) : opencascade::handle<Standard_ConstructionError>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_ConstructionError,T2>::value>::type> inline Handle_Standard_ConstructionError(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_ConstructionError>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_ConstructionError,T2>::value>::type> inline Handle_Standard_ConstructionError(const T2* theOther) : opencascade::handle<Standard_ConstructionError>(theOther) {} template<typename T> inline Handle_Standard_ConstructionError& operator=(T theOther) { opencascade::handle<Standard_ConstructionError>::operator=(theOther); return *this; } };


  





class Standard_ConstructionError : public Standard_DomainError { void Throw () const override { throw *this; } public: Standard_ConstructionError() : Standard_DomainError() {} Standard_ConstructionError(const Standard_CString theMessage) : Standard_DomainError(theMessage) {} static void Raise(const Standard_CString theMessage = "") { opencascade::handle<Standard_ConstructionError> _E = new Standard_ConstructionError; _E->Reraise(theMessage); } static void Raise(Standard_SStream& theMessage) { opencascade::handle<Standard_ConstructionError> _E = new Standard_ConstructionError; _E->Reraise (theMessage); } static opencascade::handle<Standard_ConstructionError> NewInstance(const Standard_CString theMessage = "") { return new Standard_ConstructionError(theMessage); } public: typedef Standard_DomainError base_type; static const char* get_type_name () { return "Standard_ConstructionError"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<Standard_ConstructionError>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return Standard_ConstructionError::get_type_descriptor(); } };


































inline gp_Mat::gp_Mat () {
  matrix[0][0] =
    matrix[0][1] =
      matrix[0][2] =
	matrix[1][0] =
	  matrix[1][1] =
	    matrix[1][2] =
	      matrix[2][0] =
		matrix[2][1] =
		  matrix[2][2] = 0.0;
}

inline gp_Mat::gp_Mat (const Standard_Real a11,
		       const Standard_Real a12,
		       const Standard_Real a13,
		       const Standard_Real a21,
		       const Standard_Real a22,
		       const Standard_Real a23,
		       const Standard_Real a31,
		       const Standard_Real a32,
		       const Standard_Real a33) {

  matrix[0][0] = a11;
  matrix[0][1] = a12;
  matrix[0][2] = a13;
  matrix[1][0] = a21;
  matrix[1][1] = a22;
  matrix[1][2] = a23;
  matrix[2][0] = a31;
  matrix[2][1] = a32;
  matrix[2][2] = a33;
}

inline void gp_Mat::SetDiagonal (const Standard_Real X1,
				 const Standard_Real X2,
				 const Standard_Real X3)
{
  matrix[0][0] = X1;   matrix[1][1] = X2;   matrix[2][2] = X3;
}

inline void gp_Mat::SetIdentity ()
{
  matrix[0][0] = matrix[1][1] = matrix[2][2] = 1.0;
  matrix[0][1] = matrix[0][2] = matrix[1][0]  = matrix[1][2] = matrix[2][0] = matrix[2][1] = 0.0;
 }

inline void gp_Mat::SetScale (const Standard_Real S)
{
  matrix[0][0] = matrix[1][1] =  matrix[2][2] = S;
  matrix[0][1] = matrix[0][2] = matrix[1][0] = matrix[1][2] = matrix[2][0] = matrix[2][1] = 0.0;
}

inline void gp_Mat::SetValue (const Standard_Integer Row, 
			      const Standard_Integer Col, 
			      const Standard_Real Value)
{
  if (Row < 1 || Row > 3 || Col < 1 || Col > 3) Standard_OutOfRange::Raise(" ");;
  matrix[Row-1][Col-1] = Value;
}

inline Standard_Real gp_Mat::Determinant () const
{
  return
    matrix[0][0] * (matrix[1][1] * matrix[2][2] - matrix[2][1] * matrix[1][2]) -
      matrix[0][1] * (matrix[1][0] * matrix[2][2] - matrix[2][0] * matrix[1][2]) +
	matrix[0][2] * (matrix[1][0] * matrix[2][1] - matrix[2][0] * matrix[1][1]);
}

inline const Standard_Real& gp_Mat::Value (const Standard_Integer Row, 
					   const Standard_Integer Col) const
{
  if (Row < 1 || Row > 3 || Col < 1 || Col > 3) Standard_OutOfRange::Raise(" ");;
  return matrix[Row-1][Col-1];
}

inline Standard_Real& gp_Mat::ChangeValue (const Standard_Integer Row, 
					   const Standard_Integer Col)
{
  if (Row < 1 || Row > 3 || Col < 1 || Col > 3) Standard_OutOfRange::Raise(" ");;
  return matrix[Row-1][Col-1];
}

inline Standard_Boolean gp_Mat::IsSingular () const
{
  
  Standard_Real val = Determinant();
  if (val < 0) val = - val;
  return val <= gp::Resolution();
}

inline void gp_Mat::Add (const gp_Mat& Other)
{
  matrix[0][0] = matrix[0][0] + Other.matrix[0][0];
  matrix[0][1] = matrix[0][1] + Other.matrix[0][1];
  matrix[0][2] = matrix[0][2] + Other.matrix[0][2];
  matrix[1][0] = matrix[1][0] + Other.matrix[1][0];
  matrix[1][1] = matrix[1][1] + Other.matrix[1][1];
  matrix[1][2] = matrix[1][2] + Other.matrix[1][2];
  matrix[2][0] = matrix[2][0] + Other.matrix[2][0];
  matrix[2][1] = matrix[2][1] + Other.matrix[2][1];
  matrix[2][2] = matrix[2][2] + Other.matrix[2][2];
}

inline gp_Mat gp_Mat::Added (const gp_Mat& Other) const
{
  gp_Mat NewMat;
  NewMat.matrix[0][0] = matrix[0][0] + Other.matrix[0][0];
  NewMat.matrix[0][1] = matrix[0][1] + Other.matrix[0][1];
  NewMat.matrix[0][2] = matrix[0][2] + Other.matrix[0][2];
  NewMat.matrix[1][0] = matrix[1][0] + Other.matrix[1][0];
  NewMat.matrix[1][1] = matrix[1][1] + Other.matrix[1][1];
  NewMat.matrix[1][2] = matrix[1][2] + Other.matrix[1][2];
  NewMat.matrix[2][0] = matrix[2][0] + Other.matrix[2][0];
  NewMat.matrix[2][1] = matrix[2][1] + Other.matrix[2][1];
  NewMat.matrix[2][2] = matrix[2][2] + Other.matrix[2][2];
  return NewMat;
}

inline void gp_Mat::Divide (const Standard_Real Scalar)
{
  Standard_Real val = Scalar;
  if (val < 0) val = - val;
  if (val <= gp::Resolution()) Standard_ConstructionError::Raise("gp_Mat : Divide by 0");;
  Standard_Real UnSurScalar = 1.0 / Scalar;
  matrix[0][0] *= UnSurScalar;
  matrix[0][1] *= UnSurScalar; 
  matrix[0][2] *= UnSurScalar; 
  matrix[1][0] *= UnSurScalar; 
  matrix[1][1] *= UnSurScalar; 
  matrix[1][2] *= UnSurScalar; 
  matrix[2][0] *= UnSurScalar; 
  matrix[2][1] *= UnSurScalar; 
  matrix[2][2] *= UnSurScalar; 
}

inline gp_Mat gp_Mat::Divided (const Standard_Real Scalar) const
{
  Standard_Real val = Scalar;
  if (val < 0) val = - val;
  if (val <= gp::Resolution()) Standard_ConstructionError::Raise("gp_Mat : Divide by 0");;
  gp_Mat NewMat;
  Standard_Real UnSurScalar = 1.0 / Scalar;
  NewMat.matrix[0][0] = matrix[0][0] * UnSurScalar;
  NewMat.matrix[0][1] = matrix[0][1] * UnSurScalar; 
  NewMat.matrix[0][2] = matrix[0][2] * UnSurScalar; 
  NewMat.matrix[1][0] = matrix[1][0] * UnSurScalar; 
  NewMat.matrix[1][1] = matrix[1][1] * UnSurScalar; 
  NewMat.matrix[1][2] = matrix[1][2] * UnSurScalar; 
  NewMat.matrix[2][0] = matrix[2][0] * UnSurScalar; 
  NewMat.matrix[2][1] = matrix[2][1] * UnSurScalar; 
  NewMat.matrix[2][2] = matrix[2][2] * UnSurScalar; 
  return NewMat;
}

inline gp_Mat gp_Mat::Multiplied (const gp_Mat& Other) const
{
  gp_Mat NewMat = *this;
  NewMat.Multiply(Other);
  return NewMat;
}

inline void gp_Mat::Multiply (const gp_Mat& Other)
{
  Standard_Real T00,T01,T02,T10,T11,T12,T20,T21,T22;
  T00 = matrix[0][0] * Other.matrix[0][0] + matrix[0][1] * Other.matrix[1][0] + matrix[0][2] * Other.matrix[2][0];
  T01 = matrix[0][0] * Other.matrix[0][1] + matrix[0][1] * Other.matrix[1][1] + matrix[0][2] * Other.matrix[2][1];
  T02 = matrix[0][0] * Other.matrix[0][2] + matrix[0][1] * Other.matrix[1][2] + matrix[0][2] * Other.matrix[2][2];
  T10 = matrix[1][0] * Other.matrix[0][0] + matrix[1][1] * Other.matrix[1][0] + matrix[1][2] * Other.matrix[2][0];
  T11 = matrix[1][0] * Other.matrix[0][1] + matrix[1][1] * Other.matrix[1][1] + matrix[1][2] * Other.matrix[2][1];
  T12 = matrix[1][0] * Other.matrix[0][2] + matrix[1][1] * Other.matrix[1][2] + matrix[1][2] * Other.matrix[2][2];
  T20 = matrix[2][0] * Other.matrix[0][0] + matrix[2][1] * Other.matrix[1][0] + matrix[2][2] * Other.matrix[2][0];
  T21 = matrix[2][0] * Other.matrix[0][1] + matrix[2][1] * Other.matrix[1][1] + matrix[2][2] * Other.matrix[2][1];
  T22 = matrix[2][0] * Other.matrix[0][2] + matrix[2][1] * Other.matrix[1][2] + matrix[2][2] * Other.matrix[2][2];
  matrix[0][0] = T00; 
  matrix[0][1] = T01; 
  matrix[0][2] = T02; 
  matrix[1][0] = T10; 
  matrix[1][1] = T11; 
  matrix[1][2] = T12; 
  matrix[2][0] = T20; 
  matrix[2][1] = T21; 
  matrix[2][2] = T22; 
}

inline void gp_Mat::PreMultiply (const gp_Mat& Other)
{
  Standard_Real T00,T01,T02,T10,T11,T12,T20,T21,T22;
  T00 = Other.matrix[0][0] * matrix[0][0] + Other.matrix[0][1] * matrix[1][0] + Other.matrix[0][2] * matrix[2][0];
  T01 = Other.matrix[0][0] * matrix[0][1] + Other.matrix[0][1] * matrix[1][1] + Other.matrix[0][2] * matrix[2][1];
  T02 = Other.matrix[0][0] * matrix[0][2] + Other.matrix[0][1] * matrix[1][2] + Other.matrix[0][2] * matrix[2][2];    
  T10 = Other.matrix[1][0] * matrix[0][0] + Other.matrix[1][1] * matrix[1][0] + Other.matrix[1][2] * matrix[2][0];
  T11 = Other.matrix[1][0] * matrix[0][1] + Other.matrix[1][1] * matrix[1][1] + Other.matrix[1][2] * matrix[2][1];
  T12 = Other.matrix[1][0] * matrix[0][2] + Other.matrix[1][1] * matrix[1][2] + Other.matrix[1][2] * matrix[2][2];    
  T20 = Other.matrix[2][0] * matrix[0][0] + Other.matrix[2][1] * matrix[1][0] + Other.matrix[2][2] * matrix[2][0];
  T21 = Other.matrix[2][0] * matrix[0][1] + Other.matrix[2][1] * matrix[1][1] + Other.matrix[2][2] * matrix[2][1];
  T22 = Other.matrix[2][0] * matrix[0][2] + Other.matrix[2][1] * matrix[1][2] + Other.matrix[2][2] * matrix[2][2];    
  matrix[0][0] = T00; 
  matrix[0][1] = T01; 
  matrix[0][2] = T02; 
  matrix[1][0] = T10; 
  matrix[1][1] = T11; 
  matrix[1][2] = T12; 
  matrix[2][0] = T20; 
  matrix[2][1] = T21; 
  matrix[2][2] = T22; 
}

inline gp_Mat gp_Mat::Multiplied (const Standard_Real Scalar) const
{
  gp_Mat NewMat;
  NewMat.matrix[0][0] = Scalar * matrix[0][0];
  NewMat.matrix[0][1] = Scalar * matrix[0][1];
  NewMat.matrix[0][2] = Scalar * matrix[0][2];
  NewMat.matrix[1][0] = Scalar * matrix[1][0];
  NewMat.matrix[1][1] = Scalar * matrix[1][1];
  NewMat.matrix[1][2] = Scalar * matrix[1][2];
  NewMat.matrix[2][0] = Scalar * matrix[2][0];
  NewMat.matrix[2][1] = Scalar * matrix[2][1];
  NewMat.matrix[2][2] = Scalar * matrix[2][2];
  return NewMat;
}

inline void gp_Mat::Multiply (const Standard_Real Scalar)
{
  matrix[0][0] *= Scalar; 
  matrix[0][1] *= Scalar; 
  matrix[0][2] *= Scalar; 
  matrix[1][0] *= Scalar; 
  matrix[1][1] *= Scalar; 
  matrix[1][2] *= Scalar; 
  matrix[2][0] *= Scalar; 
  matrix[2][1] *= Scalar; 
  matrix[2][2] *= Scalar; 
}

inline gp_Mat gp_Mat::Powered (const Standard_Integer N) const
{
   gp_Mat MatN = *this;
   MatN.Power (N);
   return MatN;
}

inline void gp_Mat::Subtract (const gp_Mat& Other)
{
  matrix[0][0] -= Other.matrix[0][0];
  matrix[0][1] -= Other.matrix[0][1];
  matrix[0][2] -= Other.matrix[0][2];
  matrix[1][0] -= Other.matrix[1][0];
  matrix[1][1] -= Other.matrix[1][1];
  matrix[1][2] -= Other.matrix[1][2];
  matrix[2][0] -= Other.matrix[2][0];
  matrix[2][1] -= Other.matrix[2][1];
  matrix[2][2] -= Other.matrix[2][2];
}

inline gp_Mat gp_Mat::Subtracted (const gp_Mat& Other) const
{
  gp_Mat NewMat;
  NewMat.matrix[0][0] = matrix[0][0] - Other.matrix[0][0];
  NewMat.matrix[0][1] = matrix[0][1] - Other.matrix[0][1];
  NewMat.matrix[0][2] = matrix[0][2] - Other.matrix[0][2];
  NewMat.matrix[1][0] = matrix[1][0] - Other.matrix[1][0];
  NewMat.matrix[1][1] = matrix[1][1] - Other.matrix[1][1];
  NewMat.matrix[1][2] = matrix[1][2] - Other.matrix[1][2];
  NewMat.matrix[2][0] = matrix[2][0] - Other.matrix[2][0];
  NewMat.matrix[2][1] = matrix[2][1] - Other.matrix[2][1];
  NewMat.matrix[2][2] = matrix[2][2] - Other.matrix[2][2];
  return NewMat;
}

inline void gp_Mat::Transpose ()
{
  Standard_Real Temp;
  Temp   = matrix[0][1];
  matrix[0][1]  = matrix[1][0];
  matrix[1][0]  = Temp;
  Temp   = matrix[0][2];
  matrix[0][2]  = matrix[2][0];
  matrix[2][0]  = Temp;
  Temp   = matrix[1][2];
  matrix[1][2]  = matrix[2][1];
  matrix[2][1]  = Temp;
}

inline gp_Mat gp_Mat::Transposed () const
{
  gp_Mat NewMat = *this;
  NewMat.Transpose();
  return NewMat; 
}

inline gp_Mat operator* (const Standard_Real Scalar, const gp_Mat& Mat3D)
{ return Mat3D.Multiplied (Scalar); }












inline gp_XYZ::gp_XYZ () : x(0.), y(0.), z(0.) { }

inline gp_XYZ::gp_XYZ (const Standard_Real X,
		       const Standard_Real Y,
		       const Standard_Real Z) : x(X),y(Y),z(Z) { }

inline void gp_XYZ::SetCoord (const Standard_Real X,
			      const Standard_Real Y,
			      const Standard_Real Z)
{ x = X;  y = Y;  z = Z; }

inline void gp_XYZ::SetCoord (const Standard_Integer i,
			      const Standard_Real X) {
  if (i < 1 || i > 3) Standard_OutOfRange::Raise(0);;
  (&x)[i-1] = X;
}

inline void gp_XYZ::SetX (const Standard_Real X)
{ x = X; }

inline void gp_XYZ::SetY (const Standard_Real Y)
{ y = Y; }

inline void gp_XYZ::SetZ (const Standard_Real Z) 
{ z = Z; }

inline Standard_Real gp_XYZ::Coord (const Standard_Integer i) const {
  if (i < 1 || i > 3) Standard_OutOfRange::Raise(0);;
  return (&x)[i-1];
}

inline Standard_Real& gp_XYZ::ChangeCoord(const Standard_Integer theIndex)
{
  if (theIndex < 1 || theIndex > 3) Standard_OutOfRange::Raise(0);;
  return (&x)[theIndex - 1];
}

inline void gp_XYZ::Coord (Standard_Real& X,
			   Standard_Real& Y,
			   Standard_Real& Z) const
{ X = x; Y = y; Z = z; }

inline Standard_Real gp_XYZ::X () const
{ return x; }

inline Standard_Real gp_XYZ::Y () const
{ return y; }

inline Standard_Real gp_XYZ::Z () const
{ return z; }

inline Standard_Real gp_XYZ::Modulus () const { 
  return sqrt (x * x + y * y + z * z);
}

inline Standard_Real gp_XYZ::SquareModulus () const {
  return (x * x + y * y + z * z);
}

inline void gp_XYZ::Add (const gp_XYZ& Other)
{
  x += Other.x;
  y += Other.y;
  z += Other.z;
}

inline gp_XYZ gp_XYZ::Added (const gp_XYZ& Other) const {
  return gp_XYZ(x + Other.x,y + Other.y,z + Other.z);
}

inline void gp_XYZ::Cross (const gp_XYZ& Right)
{
  Standard_Real Xresult = y * Right.z - z * Right.y;
  Standard_Real Yresult = z * Right.x - x * Right.z;
  z                     = x * Right.y - y * Right.x;
  x = Xresult;
  y = Yresult;
}

inline gp_XYZ gp_XYZ::Crossed (const gp_XYZ& Right) const
{
  return gp_XYZ (y * Right.z - z * Right.y,
		 z * Right.x - x * Right.z,
		 x * Right.y - y * Right.x);
}

inline Standard_Real gp_XYZ::CrossMagnitude (const gp_XYZ& Right) const
{
  Standard_Real Xresult = y * Right.z - z * Right.y;
  Standard_Real Yresult = z * Right.x - x * Right.z;
  Standard_Real Zresult = x * Right.y - y * Right.x;
  return sqrt(Xresult * Xresult + Yresult * Yresult + Zresult * Zresult);
}

inline Standard_Real gp_XYZ::CrossSquareMagnitude (const gp_XYZ& Right) const
{
  Standard_Real Xresult = y * Right.z - z * Right.y;
  Standard_Real Yresult = z * Right.x - x * Right.z;
  Standard_Real Zresult = x * Right.y - y * Right.x;
  return Xresult * Xresult + Yresult * Yresult + Zresult * Zresult;
}

inline void gp_XYZ::CrossCross (const gp_XYZ& Coord1,
				const gp_XYZ& Coord2)
{
  Standard_Real Xresult = 
    y * (Coord1.x * Coord2.y - Coord1.y * Coord2.x) -
      z * (Coord1.z * Coord2.x - Coord1.x * Coord2.z);
  Standard_Real Yresult  = 
    z * (Coord1.y * Coord2.z - Coord1.z * Coord2.y) -
      x * (Coord1.x * Coord2.y - Coord1.y * Coord2.x);
  z = 
    x * (Coord1.z * Coord2.x - Coord1.x * Coord2.z) -
      y * (Coord1.y * Coord2.z - Coord1.z * Coord2.y);
  x = Xresult;
  y = Yresult;
}

inline gp_XYZ gp_XYZ::CrossCrossed (const gp_XYZ& Coord1,
				    const gp_XYZ& Coord2) const
{
  gp_XYZ Coord0 = *this;
  Coord0.CrossCross (Coord1, Coord2);
  return Coord0;
}

inline void gp_XYZ::Divide (const Standard_Real Scalar)
{
  x /= Scalar;
  y /= Scalar;
  z /= Scalar;
}

inline gp_XYZ gp_XYZ::Divided (const Standard_Real Scalar) const {
  return gp_XYZ(x / Scalar,y / Scalar,z / Scalar);
}

inline Standard_Real gp_XYZ::Dot (const gp_XYZ& Other) const {
  return(x * Other.x + y * Other.y + z * Other.z);
}

inline Standard_Real gp_XYZ::DotCross (const gp_XYZ& Coord1,
				       const gp_XYZ& Coord2) const
{
  Standard_Real Xresult = Coord1.y * Coord2.z - Coord1.z * Coord2.y;
  Standard_Real Yresult = Coord1.z * Coord2.x - Coord1.x * Coord2.z;
  Standard_Real Zresult = Coord1.x * Coord2.y - Coord1.y * Coord2.x;
  return ( x * Xresult + y * Yresult + z * Zresult);
}

inline void gp_XYZ::Multiply (const Standard_Real Scalar)
{
  x *= Scalar;
  y *= Scalar;
  z *= Scalar;
}

inline void gp_XYZ::Multiply (const gp_XYZ& Other)
{
  x *= Other.x;
  y *= Other.y;
  z *= Other.z;
}

inline void gp_XYZ::Multiply (const gp_Mat& Matrix)
{
  Standard_Real Xresult = Matrix.matrix[0][0] * x + Matrix.matrix[0][1] * y + Matrix.matrix[0][2] * z;
  Standard_Real Yresult = Matrix.matrix[1][0] * x + Matrix.matrix[1][1] * y + Matrix.matrix[1][2] * z;
  z                     = Matrix.matrix[2][0] * x + Matrix.matrix[2][1] * y + Matrix.matrix[2][2] * z;
  x                     = Xresult;
  y                     = Yresult;
}

inline gp_XYZ gp_XYZ::Multiplied (const Standard_Real Scalar) const {
  return gp_XYZ(x * Scalar,y * Scalar,z * Scalar);
}

inline gp_XYZ gp_XYZ::Multiplied (const gp_XYZ& Other) const {
  return gp_XYZ(x * Other.x, y * Other.y, z * Other.z);
}

inline gp_XYZ gp_XYZ::Multiplied (const gp_Mat& Matrix) const
{
  return gp_XYZ (Matrix.matrix[0][0] * x + Matrix.matrix[0][1] * y + Matrix.matrix[0][2] * z,
		 Matrix.matrix[1][0] * x + Matrix.matrix[1][1] * y + Matrix.matrix[1][2] * z,
		 Matrix.matrix[2][0] * x + Matrix.matrix[2][1] * y + Matrix.matrix[2][2] * z);
}

inline void gp_XYZ::Normalize ()
{
  Standard_Real D = Modulus();
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  x = x / D;  y = y / D;  z = z / D;
}

inline gp_XYZ gp_XYZ::Normalized () const
{
  Standard_Real D = Modulus();
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  return gp_XYZ (x / D, y / D, z / D);
}

inline void gp_XYZ::Reverse ()
{
  x = - x;
  y = - y;
  z = - z;
}

inline gp_XYZ gp_XYZ::Reversed () const
{
  return gp_XYZ(-x, -y,	-z);
}

inline void gp_XYZ::Subtract (const gp_XYZ& Right)
{
  x-=Right.x;
  y-=Right.y;
  z-=Right.z;
}

inline gp_XYZ gp_XYZ::Subtracted (const gp_XYZ& Right) const
{
  return gp_XYZ(x - Right.x, y - Right.y, z - Right.z);
}

inline void gp_XYZ::SetLinearForm (const Standard_Real L, 
				   const gp_XYZ& Left,
				   const Standard_Real R, 
				   const gp_XYZ& Right) {
  
  x = L * Left.x + R * Right.x;
  y = L * Left.y + R * Right.y;
  z = L * Left.z + R * Right.z; 
}

inline void gp_XYZ::SetLinearForm(const Standard_Real L, 
				  const gp_XYZ& Left,
				  const gp_XYZ& Right) {
  x = L * Left.x + Right.x;
  y = L * Left.y + Right.y;
  z = L * Left.z + Right.z;
}

inline void gp_XYZ::SetLinearForm (const gp_XYZ& Left, const gp_XYZ& Right) {
  x = Left.x + Right.x;
  y = Left.y + Right.y;
  z = Left.z + Right.z;
}

inline void gp_XYZ::SetLinearForm (const Standard_Real A1, const gp_XYZ& XYZ1,
				   const Standard_Real A2, const gp_XYZ& XYZ2, 
				   const Standard_Real A3, const gp_XYZ& XYZ3) {
  
  x = A1 * XYZ1.x + A2 * XYZ2.x + A3 * XYZ3.x;
  y = A1 * XYZ1.y + A2 * XYZ2.y + A3 * XYZ3.y;
  z = A1 * XYZ1.z + A2 * XYZ2.z + A3 * XYZ3.z;  
}

inline void gp_XYZ::SetLinearForm (const Standard_Real A1, const gp_XYZ& XYZ1,
				   const Standard_Real A2, const gp_XYZ& XYZ2, 
				   const gp_XYZ& XYZ3) {
  x = A1 * XYZ1.x + A2 * XYZ2.x + XYZ3.x;
  y = A1 * XYZ1.y + A2 * XYZ2.y + XYZ3.y;
  z = A1 * XYZ1.z + A2 * XYZ2.z + XYZ3.z;
}

inline void gp_XYZ::SetLinearForm (const Standard_Real A1, const gp_XYZ& XYZ1,
				   const Standard_Real A2, const gp_XYZ& XYZ2, 
				   const Standard_Real A3, const gp_XYZ& XYZ3,
				   const gp_XYZ& XYZ4) {
  x = A1 * XYZ1.x + A2 * XYZ2.x + A3 * XYZ3.x + XYZ4.x;
  y = A1 * XYZ1.y + A2 * XYZ2.y + A3 * XYZ3.y + XYZ4.y;
  z = A1 * XYZ1.z + A2 * XYZ2.z + A3 * XYZ3.z + XYZ4.z;
  
}

inline gp_XYZ operator* (const gp_Mat& Matrix, const gp_XYZ& Coord1) {
  return Coord1.Multiplied (Matrix);
}

inline gp_XYZ operator* (const Standard_Real Scalar, const gp_XYZ& Coord1) {
  return Coord1.Multiplied (Scalar);
}

















class Standard_OutOfRange;
class gp_XYZ;
class gp_Ax1;
class gp_Ax2;
class gp_Trsf;
class gp_Vec;



class gp_Pnt 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Pnt();
  
  
    gp_Pnt(const gp_XYZ& Coord);
  

  
    gp_Pnt(const Standard_Real Xp, const Standard_Real Yp, const Standard_Real Zp);
  

  
  
  
  
  
    void SetCoord (const Standard_Integer Index, const Standard_Real Xi);
  
  
    void SetCoord (const Standard_Real Xp, const Standard_Real Yp, const Standard_Real Zp);
  
  
    void SetX (const Standard_Real X);
  
  
    void SetY (const Standard_Real Y);
  
  
    void SetZ (const Standard_Real Z);
  
  
    void SetXYZ (const gp_XYZ& Coord);
  

  
  
  
  
  
  
    Standard_Real Coord (const Standard_Integer Index) const;
  
  
    void Coord (Standard_Real& Xp, Standard_Real& Yp, Standard_Real& Zp) const;
  
  
    Standard_Real X() const;
  
  
    Standard_Real Y() const;
  
  
    Standard_Real Z() const;
  
  
    const gp_XYZ& XYZ() const;
  
  
    const gp_XYZ& Coord() const;
  

  
  
    gp_XYZ& ChangeCoord();
  
  
  
    void BaryCenter (const Standard_Real Alpha, const gp_Pnt& P, const Standard_Real Beta);
  
  
  
  
    Standard_Boolean IsEqual (const gp_Pnt& Other, const Standard_Real LinearTolerance) const;
  
  
    Standard_Real Distance (const gp_Pnt& Other) const;
  
  
    Standard_Real SquareDistance (const gp_Pnt& Other) const;
  

  
  
  
  __declspec( dllexport ) void Mirror (const gp_Pnt& P);
  

  
  
  
  __declspec( dllexport ) gp_Pnt Mirrored (const gp_Pnt& P) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax1& A1);
  

  
  
  
  __declspec( dllexport ) gp_Pnt Mirrored (const gp_Ax1& A1) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax2& A2);
  

  
  
  __declspec( dllexport ) gp_Pnt Mirrored (const gp_Ax2& A2) const;
  
    void Rotate (const gp_Ax1& A1, const Standard_Real Ang);
  
  
    gp_Pnt Rotated (const gp_Ax1& A1, const Standard_Real Ang) const;
  
    void Scale (const gp_Pnt& P, const Standard_Real S);
  
  
    gp_Pnt Scaled (const gp_Pnt& P, const Standard_Real S) const;
  
  __declspec( dllexport ) void Transform (const gp_Trsf& T);
  

  
  
    gp_Pnt Transformed (const gp_Trsf& T) const;
  
    void Translate (const gp_Vec& V);
  

  
    gp_Pnt Translated (const gp_Vec& V) const;
  
    void Translate (const gp_Pnt& P1, const gp_Pnt& P2);
  
    gp_Pnt Translated (const gp_Pnt& P1, const gp_Pnt& P2) const;




protected:





private:



  gp_XYZ coord;


};




























































enum gp_TrsfForm
{
  gp_Identity,     
  gp_Rotation,     
  gp_Translation,  
  gp_PntMirror,    
  gp_Ax1Mirror,    
  gp_Ax2Mirror,    
  gp_Scale,        
  gp_CompoundTrsf, 
  gp_Other         
};


























































































template<typename Element_t>
class NCollection_Vec2
{

public:

  
  static int Length()
  {
    return 2;
  }

  
  NCollection_Vec2()
  {
    v[0] = v[1] = Element_t(0);
  }

  
  explicit NCollection_Vec2 (const Element_t theXY)
  {
    v[0] = v[1] = theXY;
  }

  
  explicit NCollection_Vec2 (const Element_t theX,
                             const Element_t theY)
  {
    v[0] = theX;
    v[1] = theY;
  }

  
  Element_t x() const { return v[0]; }

  
  Element_t y() const { return v[1]; }

  
  const NCollection_Vec2<Element_t> xy() const { return NCollection_Vec2<Element_t>(x(), y()); } const NCollection_Vec2<Element_t> yx() const { return NCollection_Vec2<Element_t>(y(), x()); }

  
  Element_t& x() { return v[0]; }

  
  Element_t& y() { return v[1]; }

  
  const Element_t* GetData()    const { return v; }
        Element_t* ChangeData()       { return v; }
  operator const   Element_t*() const { return v; }
  operator         Element_t*()       { return v; }

  
  NCollection_Vec2& operator+= (const NCollection_Vec2& theAdd)
  {
    v[0] += theAdd.v[0];
    v[1] += theAdd.v[1];
    return *this;
  }

  
  friend NCollection_Vec2 operator+ (const NCollection_Vec2& theLeft,
                                     const NCollection_Vec2& theRight)
  {
    return NCollection_Vec2 (theLeft.v[0] + theRight.v[0],
                             theLeft.v[1] + theRight.v[1]);
  }

  
  NCollection_Vec2& operator-= (const NCollection_Vec2& theDec)
  {
    v[0] -= theDec.v[0];
    v[1] -= theDec.v[1];
    return *this;
  }

  
  friend NCollection_Vec2 operator- (const NCollection_Vec2& theLeft,
                                     const NCollection_Vec2& theRight)
  {
    return NCollection_Vec2 (theLeft.v[0] - theRight.v[0],
                             theLeft.v[1] - theRight.v[1]);
  }

  
  NCollection_Vec2 operator-() const
  {
    return NCollection_Vec2 (-x(), -y());
  }

  
  NCollection_Vec2& operator*= (const NCollection_Vec2& theRight)
  {
    v[0] *= theRight.v[0];
    v[1] *= theRight.v[1];
    return *this;
  }

  
  friend NCollection_Vec2 operator* (const NCollection_Vec2& theLeft,
                                     const NCollection_Vec2& theRight)
  {
    return NCollection_Vec2 (theLeft.v[0] * theRight.v[0],
                             theLeft.v[1] * theRight.v[1]);
  }

  
  void Multiply (const Element_t theFactor)
  {
    v[0] *= theFactor;
    v[1] *= theFactor;
  }

  
  NCollection_Vec2 Multiplied (const Element_t theFactor) const
  {
    return NCollection_Vec2 (v[0] * theFactor,
                             v[1] * theFactor);
  }

  
  NCollection_Vec2 cwiseMin (const NCollection_Vec2& theVec) const
  {
    return NCollection_Vec2 (v[0] < theVec.v[0] ? v[0] : theVec.v[0],
                             v[1] < theVec.v[1] ? v[1] : theVec.v[1]);
  }

  
  NCollection_Vec2 cwiseMax (const NCollection_Vec2& theVec) const
  {
    return NCollection_Vec2 (v[0] > theVec.v[0] ? v[0] : theVec.v[0],
                             v[1] > theVec.v[1] ? v[1] : theVec.v[1]);
  }

  
  NCollection_Vec2 cwiseAbs() const
  {
    return NCollection_Vec2 (std::abs (v[0]),
                             std::abs (v[1]));
  }

  
  Element_t maxComp() const
  {
    return v[0] > v[1] ? v[0] : v[1];
  }

  
  Element_t minComp() const
  {
    return v[0] < v[1] ? v[0] : v[1];
  }

  
  NCollection_Vec2& operator*= (const Element_t theFactor)
  {
    Multiply (theFactor);
    return *this;
  }

  
  NCollection_Vec2& operator/= (const Element_t theInvFactor)
  {
    v[0] /= theInvFactor;
    v[1] /= theInvFactor;
    return *this;
  }

  
  NCollection_Vec2 operator* (const Element_t theFactor) const
  {
    return Multiplied (theFactor);
  }

  
  NCollection_Vec2 operator/ (const Element_t theInvFactor) const
  {
    return NCollection_Vec2(v[0] / theInvFactor,
            v[1] / theInvFactor);
  }

  
  Element_t Dot (const NCollection_Vec2& theOther) const
  {
    return x() * theOther.x() + y() * theOther.y();
  }

  
  Element_t Modulus() const
  {
    return std::sqrt (x() * x() + y() * y());
  }

  
  
  Element_t SquareModulus() const
  {
    return x() * x() + y() * y();
  }

  
  static NCollection_Vec2 DX()
  {
    return NCollection_Vec2 (Element_t(1), Element_t(0));
  }

  
  static NCollection_Vec2 DY()
  {
    return NCollection_Vec2 (Element_t(0), Element_t(1));
  }

private:

  Element_t v[2];

};
















template<typename Element_t>
class NCollection_Vec3
{

public:

  
  static int Length()
  {
    return 3;
  }

  
  NCollection_Vec3()
  {
    std::memset (this, 0, sizeof(NCollection_Vec3));
  }

  
  explicit NCollection_Vec3 (Element_t theValue)
  {
    v[0] = v[1] = v[2] = theValue;
  }

  
  explicit NCollection_Vec3 (const Element_t theX,
                             const Element_t theY,
                             const Element_t theZ)
  {
    v[0] = theX;
    v[1] = theY;
    v[2] = theZ;
  }

  
  explicit NCollection_Vec3 (const NCollection_Vec2<Element_t>& theVec2)
  {
    v[0] = theVec2[0];
    v[1] = theVec2[1];
    v[2] = Element_t(0);
  }

  
  Element_t x() const { return v[0]; }

  
  Element_t r() const { return v[0]; }

  
  Element_t y() const { return v[1]; }

  
  Element_t g() const { return v[1]; }

  
  Element_t z() const { return v[2]; }

  
  Element_t b() const { return v[2]; }

  
  const NCollection_Vec2<Element_t> xy() const { return NCollection_Vec2<Element_t>(x(), y()); } const NCollection_Vec2<Element_t> yx() const { return NCollection_Vec2<Element_t>(y(), x()); }
  const NCollection_Vec2<Element_t> xz() const { return NCollection_Vec2<Element_t>(x(), z()); } const NCollection_Vec2<Element_t> zx() const { return NCollection_Vec2<Element_t>(z(), x()); }
  const NCollection_Vec2<Element_t> yz() const { return NCollection_Vec2<Element_t>(y(), z()); } const NCollection_Vec2<Element_t> zy() const { return NCollection_Vec2<Element_t>(z(), y()); }

  
  const NCollection_Vec3<Element_t> xyz() const { return NCollection_Vec3<Element_t>(x(), y(), z()); } const NCollection_Vec3<Element_t> xzy() const { return NCollection_Vec3<Element_t>(x(), z(), y()); } const NCollection_Vec3<Element_t> yxz() const { return NCollection_Vec3<Element_t>(y(), x(), z()); } const NCollection_Vec3<Element_t> yzx() const { return NCollection_Vec3<Element_t>(y(), z(), x()); } const NCollection_Vec3<Element_t> zyx() const { return NCollection_Vec3<Element_t>(z(), y(), x()); } const NCollection_Vec3<Element_t> zxy() const { return NCollection_Vec3<Element_t>(z(), x(), y()); }

  
  Element_t& x() { return v[0]; }

  
  Element_t& r() { return v[0]; }

  
  Element_t& y() { return v[1]; }

  
  Element_t& g() { return v[1]; }

  
  Element_t& z() { return v[2]; }

  
  Element_t& b() { return v[2]; }

  
  NCollection_Vec2<Element_t>& xy()
  {
    return *((NCollection_Vec2<Element_t>* )&v[0]);
  }

  
  NCollection_Vec2<Element_t>& yz()
  {
    return *((NCollection_Vec2<Element_t>* )&v[1]);
  }

  
  const Element_t* GetData()    const { return v; }
        Element_t* ChangeData()       { return v; }
  operator const   Element_t*() const { return v; }
  operator         Element_t*()       { return v; }

  
  NCollection_Vec3& operator+= (const NCollection_Vec3& theAdd)
  {
    v[0] += theAdd.v[0];
    v[1] += theAdd.v[1];
    v[2] += theAdd.v[2];
    return *this;
  }

  
  friend NCollection_Vec3 operator+ (const NCollection_Vec3& theLeft,
                                     const NCollection_Vec3& theRight)
  {
    NCollection_Vec3 aSumm = NCollection_Vec3 (theLeft);
    return aSumm += theRight;
  }

  
  NCollection_Vec3 operator-() const
  {
    return NCollection_Vec3 (-x(), -y(), -z());
  }

  
  NCollection_Vec3& operator-= (const NCollection_Vec3& theDec)
  {
    v[0] -= theDec.v[0];
    v[1] -= theDec.v[1];
    v[2] -= theDec.v[2];
    return *this;
  }

  
  friend NCollection_Vec3 operator- (const NCollection_Vec3& theLeft,
                                     const NCollection_Vec3& theRight)
  {
    NCollection_Vec3 aSumm = NCollection_Vec3 (theLeft);
    return aSumm -= theRight;
  }

  
  void Multiply (const Element_t theFactor)
  {
    v[0] *= theFactor;
    v[1] *= theFactor;
    v[2] *= theFactor;
  }

  
  NCollection_Vec3& operator*= (const NCollection_Vec3& theRight)
  {
    v[0] *= theRight.v[0];
    v[1] *= theRight.v[1];
    v[2] *= theRight.v[2];
    return *this;
  }

  
  friend NCollection_Vec3 operator* (const NCollection_Vec3& theLeft,
                                     const NCollection_Vec3& theRight)
  {
    NCollection_Vec3 aResult = NCollection_Vec3 (theLeft);
    return aResult *= theRight;
  }

  
  NCollection_Vec3& operator*= (const Element_t theFactor)
  {
    Multiply (theFactor);
    return *this;
  }

  
  NCollection_Vec3 operator* (const Element_t theFactor) const
  {
    return Multiplied (theFactor);
  }

  
  NCollection_Vec3 Multiplied (const Element_t theFactor) const
  {
    NCollection_Vec3 aCopyVec3 (*this);
    aCopyVec3 *= theFactor;
    return aCopyVec3;
  }

  
  NCollection_Vec3 cwiseMin (const NCollection_Vec3& theVec) const
  {
    return NCollection_Vec3 (v[0] < theVec.v[0] ? v[0] : theVec.v[0],
                             v[1] < theVec.v[1] ? v[1] : theVec.v[1],
                             v[2] < theVec.v[2] ? v[2] : theVec.v[2]);
  }

  
  NCollection_Vec3 cwiseMax (const NCollection_Vec3& theVec) const
  {
    return NCollection_Vec3 (v[0] > theVec.v[0] ? v[0] : theVec.v[0],
                             v[1] > theVec.v[1] ? v[1] : theVec.v[1],
                             v[2] > theVec.v[2] ? v[2] : theVec.v[2]);
  }

  
  NCollection_Vec3 cwiseAbs() const
  {
    return NCollection_Vec3 (std::abs (v[0]),
                             std::abs (v[1]),
                             std::abs (v[2]));
  }

  
  Element_t maxComp() const
  {
    return v[0] > v[1] ? (v[0] > v[2] ? v[0] : v[2])
                       : (v[1] > v[2] ? v[1] : v[2]);
  }

  
  Element_t minComp() const
  {
    return v[0] < v[1] ? (v[0] < v[2] ? v[0] : v[2])
                       : (v[1] < v[2] ? v[1] : v[2]);
  }

  
  NCollection_Vec3& operator/= (const Element_t theInvFactor)
  {
    v[0] /= theInvFactor;
    v[1] /= theInvFactor;
    v[2] /= theInvFactor;
    return *this;
  }

  
  NCollection_Vec3 operator/ (const Element_t theInvFactor)
  {
    NCollection_Vec3 aResult (*this);
    return aResult /= theInvFactor;
  }

  
  Element_t Dot (const NCollection_Vec3& theOther) const
  {
    return x() * theOther.x() + y() * theOther.y() + z() * theOther.z();
  }

  
  Element_t Modulus() const
  {
    return std::sqrt (x() * x() + y() * y() + z() * z());
  }

  
  
  Element_t SquareModulus() const
  {
    return x() * x() + y() * y() + z() * z();
  }

  
  void Normalize()
  {
    Element_t aModulus = Modulus();
    if (aModulus != Element_t(0)) 
    {
      x() = x() / aModulus;
      y() = y() / aModulus;
      z() = z() / aModulus;
    }
  }

  
  NCollection_Vec3 Normalized() const
  {
    NCollection_Vec3 aCopy (*this);
    aCopy.Normalize();
    return aCopy;
  }

  
  static NCollection_Vec3 Cross (const NCollection_Vec3& theVec1,
                                 const NCollection_Vec3& theVec2)
  {
    return NCollection_Vec3(theVec1.y() * theVec2.z() - theVec1.z() * theVec2.y(),
            theVec1.z() * theVec2.x() - theVec1.x() * theVec2.z(),
            theVec1.x() * theVec2.y() - theVec1.y() * theVec2.x());
  }

  
  
  
  static NCollection_Vec3 GetLERP (const NCollection_Vec3& theFrom,
                                   const NCollection_Vec3& theTo,
                                   const Element_t         theT)
  {
    return theFrom * (Element_t(1) - theT) + theTo * theT;
  }

  
  static NCollection_Vec3 DX()
  {
    return NCollection_Vec3 (Element_t(1), Element_t(0), Element_t(0));
  }

  
  static NCollection_Vec3 DY()
  {
    return NCollection_Vec3 (Element_t(0), Element_t(1), Element_t(0));
  }

  
  static NCollection_Vec3 DZ()
  {
    return NCollection_Vec3 (Element_t(0), Element_t(0), Element_t(1));
  }

private:

  Element_t v[3]; 

};


template<> inline NCollection_Vec3<float>& NCollection_Vec3<float>::operator/= (const float theInvFactor)
{
  Multiply (1.0f / theInvFactor);
  return *this;
}


template<> inline NCollection_Vec3<double>& NCollection_Vec3<double>::operator/= (const double theInvFactor)
{
  Multiply (1.0 / theInvFactor);
  return *this;
}









template<typename Element_t>
class NCollection_Vec4
{

public:

  
  static int Length()
  {
    return 4;
  }

  
  NCollection_Vec4()
  {
    std::memset (this, 0, sizeof(NCollection_Vec4));
  }

  
  explicit NCollection_Vec4 (const Element_t theValue)
  {
    v[0] = v[1] = v[2] = v[3] = theValue;
  }

  
  explicit NCollection_Vec4 (const Element_t theX,
                             const Element_t theY,
                             const Element_t theZ,
                             const Element_t theW)
  {
    v[0] = theX;
    v[1] = theY;
    v[2] = theZ;
    v[3] = theW;
  }

  
  explicit NCollection_Vec4 (const NCollection_Vec2<Element_t>& theVec2)
  {
    v[0] = theVec2[0];
    v[1] = theVec2[1];
    v[2] = v[3] = Element_t (0);
  }

  
  explicit NCollection_Vec4(const NCollection_Vec3<Element_t>& theVec3)
  {
    std::memcpy (this, &theVec3, sizeof(NCollection_Vec3<Element_t>));
    v[3] = Element_t (0);
  }

  
  explicit NCollection_Vec4(const NCollection_Vec3<Element_t>& theVec3,
                            const Element_t                    theAlpha) {
    std::memcpy (this, &theVec3, sizeof(NCollection_Vec3<Element_t>));
    v[3] = theAlpha;
  }

  
  Element_t x() const { return v[0]; }

  
  Element_t r() const { return v[0]; }

  
  Element_t y() const { return v[1]; }

  
  Element_t g() const { return v[1]; }

  
  Element_t z() const { return v[2]; }

  
  Element_t b() const { return v[2]; }

  
  Element_t w() const { return v[3]; }

  
  Element_t a() const { return v[3]; }

  
  const NCollection_Vec2<Element_t> xy() const { return NCollection_Vec2<Element_t>(x(), y()); } const NCollection_Vec2<Element_t> yx() const { return NCollection_Vec2<Element_t>(y(), x()); }
  const NCollection_Vec2<Element_t> xz() const { return NCollection_Vec2<Element_t>(x(), z()); } const NCollection_Vec2<Element_t> zx() const { return NCollection_Vec2<Element_t>(z(), x()); }
  const NCollection_Vec2<Element_t> xw() const { return NCollection_Vec2<Element_t>(x(), w()); } const NCollection_Vec2<Element_t> wx() const { return NCollection_Vec2<Element_t>(w(), x()); }
  const NCollection_Vec2<Element_t> yz() const { return NCollection_Vec2<Element_t>(y(), z()); } const NCollection_Vec2<Element_t> zy() const { return NCollection_Vec2<Element_t>(z(), y()); }
  const NCollection_Vec2<Element_t> yw() const { return NCollection_Vec2<Element_t>(y(), w()); } const NCollection_Vec2<Element_t> wy() const { return NCollection_Vec2<Element_t>(w(), y()); }
  const NCollection_Vec2<Element_t> zw() const { return NCollection_Vec2<Element_t>(z(), w()); } const NCollection_Vec2<Element_t> wz() const { return NCollection_Vec2<Element_t>(w(), z()); }

  
  const NCollection_Vec3<Element_t> xyz() const { return NCollection_Vec3<Element_t>(x(), y(), z()); } const NCollection_Vec3<Element_t> xzy() const { return NCollection_Vec3<Element_t>(x(), z(), y()); } const NCollection_Vec3<Element_t> yxz() const { return NCollection_Vec3<Element_t>(y(), x(), z()); } const NCollection_Vec3<Element_t> yzx() const { return NCollection_Vec3<Element_t>(y(), z(), x()); } const NCollection_Vec3<Element_t> zyx() const { return NCollection_Vec3<Element_t>(z(), y(), x()); } const NCollection_Vec3<Element_t> zxy() const { return NCollection_Vec3<Element_t>(z(), x(), y()); }
  const NCollection_Vec3<Element_t> xyw() const { return NCollection_Vec3<Element_t>(x(), y(), w()); } const NCollection_Vec3<Element_t> xwy() const { return NCollection_Vec3<Element_t>(x(), w(), y()); } const NCollection_Vec3<Element_t> yxw() const { return NCollection_Vec3<Element_t>(y(), x(), w()); } const NCollection_Vec3<Element_t> ywx() const { return NCollection_Vec3<Element_t>(y(), w(), x()); } const NCollection_Vec3<Element_t> wyx() const { return NCollection_Vec3<Element_t>(w(), y(), x()); } const NCollection_Vec3<Element_t> wxy() const { return NCollection_Vec3<Element_t>(w(), x(), y()); }
  const NCollection_Vec3<Element_t> xzw() const { return NCollection_Vec3<Element_t>(x(), z(), w()); } const NCollection_Vec3<Element_t> xwz() const { return NCollection_Vec3<Element_t>(x(), w(), z()); } const NCollection_Vec3<Element_t> zxw() const { return NCollection_Vec3<Element_t>(z(), x(), w()); } const NCollection_Vec3<Element_t> zwx() const { return NCollection_Vec3<Element_t>(z(), w(), x()); } const NCollection_Vec3<Element_t> wzx() const { return NCollection_Vec3<Element_t>(w(), z(), x()); } const NCollection_Vec3<Element_t> wxz() const { return NCollection_Vec3<Element_t>(w(), x(), z()); }
  const NCollection_Vec3<Element_t> yzw() const { return NCollection_Vec3<Element_t>(y(), z(), w()); } const NCollection_Vec3<Element_t> ywz() const { return NCollection_Vec3<Element_t>(y(), w(), z()); } const NCollection_Vec3<Element_t> zyw() const { return NCollection_Vec3<Element_t>(z(), y(), w()); } const NCollection_Vec3<Element_t> zwy() const { return NCollection_Vec3<Element_t>(z(), w(), y()); } const NCollection_Vec3<Element_t> wzy() const { return NCollection_Vec3<Element_t>(w(), z(), y()); } const NCollection_Vec3<Element_t> wyz() const { return NCollection_Vec3<Element_t>(w(), y(), z()); }

  
  const NCollection_Vec3<Element_t> rgb() const { return NCollection_Vec3<Element_t>(r(), g(), b()); } const NCollection_Vec3<Element_t> rbg() const { return NCollection_Vec3<Element_t>(r(), b(), g()); } const NCollection_Vec3<Element_t> grb() const { return NCollection_Vec3<Element_t>(g(), r(), b()); } const NCollection_Vec3<Element_t> gbr() const { return NCollection_Vec3<Element_t>(g(), b(), r()); } const NCollection_Vec3<Element_t> bgr() const { return NCollection_Vec3<Element_t>(b(), g(), r()); } const NCollection_Vec3<Element_t> brg() const { return NCollection_Vec3<Element_t>(b(), r(), g()); }

  
  Element_t& x() { return v[0]; }

  
  Element_t& r() { return v[0]; }

  
  Element_t& y() { return v[1]; }

  
  Element_t& g() { return v[1]; } 

  
  Element_t& z() { return v[2]; }

  
  Element_t& b() { return v[2]; }

  
  Element_t& w() { return v[3]; }

  
  Element_t& a() { return v[3]; }

  
  NCollection_Vec2<Element_t>& xy()
  {
    return *((NCollection_Vec2<Element_t>* )&v[0]);
  }

  
  NCollection_Vec2<Element_t>& yz()
  {
    return *((NCollection_Vec2<Element_t>* )&v[1]);
  }

  
  NCollection_Vec2<Element_t>& zw()
  {
    return *((NCollection_Vec2<Element_t>* )&v[2]);
  }

  
  NCollection_Vec3<Element_t>& xyz()
  {
    return *((NCollection_Vec3<Element_t>* )&v[0]);
  }

  
  NCollection_Vec3<Element_t>& yzw()
  {
    return *((NCollection_Vec3<Element_t>* )&v[1]);
  }

  
  const Element_t* GetData()    const { return v; }
        Element_t* ChangeData()       { return v; }
  operator const   Element_t*() const { return v; }
  operator         Element_t*()       { return v; }

  
  NCollection_Vec4& operator+= (const NCollection_Vec4& theAdd)
  {
    v[0] += theAdd.v[0];
    v[1] += theAdd.v[1];
    v[2] += theAdd.v[2];
    v[3] += theAdd.v[3];
    return *this;
  }

  
  friend NCollection_Vec4 operator+ (const NCollection_Vec4& theLeft,
                                     const NCollection_Vec4& theRight)
  {
    NCollection_Vec4 aSumm = NCollection_Vec4 (theLeft);
    return aSumm += theRight;
  }

  
  NCollection_Vec4 operator-() const
  {
    return NCollection_Vec4 (-x(), -y(), -z(), -w());
  }

  
  NCollection_Vec4& operator-= (const NCollection_Vec4& theDec)
  {
    v[0] -= theDec.v[0];
    v[1] -= theDec.v[1];
    v[2] -= theDec.v[2];
    v[3] -= theDec.v[3];
    return *this;
  }

  
  friend NCollection_Vec4 operator- (const NCollection_Vec4& theLeft,
                                     const NCollection_Vec4& theRight)
  {
    NCollection_Vec4 aSumm = NCollection_Vec4 (theLeft);
    return aSumm -= theRight;
  }

  
  NCollection_Vec4& operator*= (const NCollection_Vec4& theRight)
  {
    v[0] *= theRight.v[0];
    v[1] *= theRight.v[1];
    v[2] *= theRight.v[2];
    v[3] *= theRight.v[3];
    return *this;
  }

  
  friend NCollection_Vec4 operator* (const NCollection_Vec4& theLeft,
                                     const NCollection_Vec4& theRight)
  {
    NCollection_Vec4 aResult = NCollection_Vec4 (theLeft);
    return aResult *= theRight;
  }

  
  void Multiply (const Element_t theFactor)
  {
    v[0] *= theFactor;
    v[1] *= theFactor;
    v[2] *= theFactor;
    v[3] *= theFactor;
  }

  
  NCollection_Vec4& operator*=(const Element_t theFactor)
  {
    Multiply (theFactor);
    return *this;
  }

  
  NCollection_Vec4 operator* (const Element_t theFactor) const
  {
    return Multiplied (theFactor);
  }

  
  NCollection_Vec4 Multiplied (const Element_t theFactor) const
  {
    NCollection_Vec4 aCopyVec4 (*this);
    aCopyVec4 *= theFactor;
    return aCopyVec4;
  }

  
  NCollection_Vec4 cwiseMin (const NCollection_Vec4& theVec) const
  {
    return NCollection_Vec4 (v[0] < theVec.v[0] ? v[0] : theVec.v[0],
                             v[1] < theVec.v[1] ? v[1] : theVec.v[1],
                             v[2] < theVec.v[2] ? v[2] : theVec.v[2],
                             v[3] < theVec.v[3] ? v[3] : theVec.v[3]);
  }

  
  NCollection_Vec4 cwiseMax (const NCollection_Vec4& theVec) const
  {
    return NCollection_Vec4 (v[0] > theVec.v[0] ? v[0] : theVec.v[0],
                             v[1] > theVec.v[1] ? v[1] : theVec.v[1],
                             v[2] > theVec.v[2] ? v[2] : theVec.v[2],
                             v[3] > theVec.v[3] ? v[3] : theVec.v[3]);
  }

  
  NCollection_Vec4 cwiseAbs() const
  {
    return NCollection_Vec4 (std::abs (v[0]),
                             std::abs (v[1]),
                             std::abs (v[2]),
                             std::abs (v[3]));
  }

  
  Element_t maxComp() const
  {
    const Element_t aMax1 = v[0] > v[1] ? v[0] : v[1];
    const Element_t aMax2 = v[2] > v[3] ? v[2] : v[3];

    return aMax1 > aMax2 ? aMax1 : aMax2;
  }

  
  Element_t minComp() const
  {
    const Element_t aMin1 = v[0] < v[1] ? v[0] : v[1];
    const Element_t aMin2 = v[2] < v[3] ? v[2] : v[3];

    return aMin1 < aMin2 ? aMin1 : aMin2;
  }

  
  Element_t Dot (const NCollection_Vec4& theOther) const
  {
    return x() * theOther.x() +
           y() * theOther.y() +
           z() * theOther.z() +
           w() * theOther.w();
  }

  
  NCollection_Vec4& operator/= (const Element_t theInvFactor)
  {
    v[0] /= theInvFactor;
    v[1] /= theInvFactor;
    v[2] /= theInvFactor;
    v[3] /= theInvFactor;
    return *this;
  }

  
  NCollection_Vec4 operator/ (const Element_t theInvFactor)
  {
    NCollection_Vec4 aResult(*this);
    return aResult /= theInvFactor;
  }

private:

  Element_t v[4]; 

};


template<> inline NCollection_Vec4<float>& NCollection_Vec4<float>::operator/= (const float theInvFactor)
{
  Multiply (1.0f / theInvFactor);
  return *this;
}


template<> inline NCollection_Vec4<double>& NCollection_Vec4<double>::operator/= (const double theInvFactor)
{
  Multiply (1.0 / theInvFactor);
  return *this;
}








template<typename Element_t>
class NCollection_Mat4
{

public:

  
  
  static size_t Rows()
  {
    return 4;
  }

  
  
  static size_t Cols()
  {
    return 4;
  }

  
  
  NCollection_Mat4()
  {
    InitIdentity();
  }

  
  
  
  
  Element_t GetValue (const size_t theRow, const size_t theCol) const
  {
    return myMat[theCol * 4 + theRow];
  }

  
  
  
  
  Element_t& ChangeValue (const size_t theRow, const size_t theCol)
  {
    return myMat[theCol * 4 + theRow];
  }

  
  
  
  
  void SetValue (const size_t    theRow,
                 const size_t    theCol,
                 const Element_t theValue)
  {
    myMat[theCol * 4 + theRow] = theValue;
  }

  
  
  
  NCollection_Vec4<Element_t> GetRow (const size_t theRow) const
  {
    return NCollection_Vec4<Element_t> (GetValue (theRow, 0),
                                        GetValue (theRow, 1),
                                        GetValue (theRow, 2),
                                        GetValue (theRow, 3));
  }

  
  
  
  void SetRow (const size_t theRow, const NCollection_Vec3<Element_t>& theVec)
  {
    SetValue (theRow, 0, theVec.x());
    SetValue (theRow, 1, theVec.y());
    SetValue (theRow, 2, theVec.z());
  }

  
  
  
  void SetRow (const size_t theRow, const NCollection_Vec4<Element_t>& theVec)
  {
    SetValue (theRow, 0, theVec.x());
    SetValue (theRow, 1, theVec.y());
    SetValue (theRow, 2, theVec.z());
    SetValue (theRow, 3, theVec.w());
  }

  
  
  
  NCollection_Vec4<Element_t> GetColumn (const size_t theCol) const
  {
    return NCollection_Vec4<Element_t> (GetValue (0, theCol),
                                        GetValue (1, theCol),
                                        GetValue (2, theCol),
                                        GetValue (3, theCol));
  }

  
  
  
  void SetColumn (const size_t theCol,
                  const NCollection_Vec3<Element_t>& theVec)
  {
    SetValue (0, theCol, theVec.x());
    SetValue (1, theCol, theVec.y());
    SetValue (2, theCol, theVec.z());
  }

  
  
  
  void SetColumn (const size_t theCol,
                  const NCollection_Vec4<Element_t>& theVec)
  {
    SetValue (0, theCol, theVec.x());
    SetValue (1, theCol, theVec.y());
    SetValue (2, theCol, theVec.z());
    SetValue (3, theCol, theVec.w());
  }

  
  
  NCollection_Vec4<Element_t> GetDiagonal() const
  {
    return NCollection_Vec4<Element_t> (GetValue (0, 0),
                                        GetValue (1, 1),
                                        GetValue (2, 2),
                                        GetValue (3, 3));
  }

  
  
  void SetDiagonal (const NCollection_Vec3<Element_t>& theVec)
  {
    SetValue (0, 0, theVec.x());
    SetValue (1, 1, theVec.y());
    SetValue (2, 2, theVec.z());
  }

  
  
  void SetDiagonal (const NCollection_Vec4<Element_t>& theVec)
  {
    SetValue (0, 0, theVec.x());
    SetValue (1, 1, theVec.y());
    SetValue (2, 2, theVec.z());
    SetValue (3, 3, theVec.w());
  }

  
  void InitIdentity()
  {
    std::memcpy (this, myIdentityArray, sizeof (NCollection_Mat4));
  }

  
  bool IsIdentity() const
  {
    return std::memcmp (this, myIdentityArray, sizeof (NCollection_Mat4)) == 0;
  }

  
  const Element_t* GetData()    const { return myMat; }
  Element_t*       ChangeData()       { return myMat; }
  operator const   Element_t*() const { return myMat; }
  operator         Element_t*()       { return myMat; }

  
  
  NCollection_Vec4<Element_t> operator* (const NCollection_Vec4<Element_t>& theVec) const
  {
    return NCollection_Vec4<Element_t> (
      GetValue (0, 0) * theVec.x() + GetValue (0, 1) * theVec.y() + GetValue (0, 2) * theVec.z() + GetValue (0, 3) * theVec.w(),
      GetValue (1, 0) * theVec.x() + GetValue (1, 1) * theVec.y() + GetValue (1, 2) * theVec.z() + GetValue (1, 3) * theVec.w(),
      GetValue (2, 0) * theVec.x() + GetValue (2, 1) * theVec.y() + GetValue (2, 2) * theVec.z() + GetValue (2, 3) * theVec.w(),
      GetValue (3, 0) * theVec.x() + GetValue (3, 1) * theVec.y() + GetValue (3, 2) * theVec.z() + GetValue (3, 3) * theVec.w());
  }

  
  
  
  NCollection_Mat4 Multiply (const NCollection_Mat4& theMatA,
                             const NCollection_Mat4& theMatB)
  {
    NCollection_Mat4 aMatRes;

    size_t aInputElem;
    for (size_t aResElem = 0; aResElem < 16; ++aResElem)
    {
      aMatRes[aResElem] = (Element_t )0;
      for (aInputElem = 0; aInputElem < 4; ++aInputElem)
      {
        aMatRes[aResElem] += theMatA.GetValue(aResElem % 4, aInputElem)
                           * theMatB.GetValue(aInputElem, aResElem / 4);
      }
    }

    return aMatRes;
  }

  
  
  void Multiply (const NCollection_Mat4& theMat)
  {
    *this = Multiply(*this, theMat);
  }

  
  
  NCollection_Mat4& operator*= (const NCollection_Mat4& theMat)
  {
    Multiply (theMat);
    return *this;
  }

  
  
  
  NCollection_Mat4 operator* (const NCollection_Mat4& theMat) const
  {
    return Multiplied (theMat);
  }

  
  
  
  NCollection_Mat4 Multiplied (const NCollection_Mat4& theMat) const
  {
    NCollection_Mat4 aTempMat (*this);
    aTempMat *= theMat;
    return aTempMat;
  }

  
  
  void Multiply (const Element_t theFactor)
  {
    for (size_t i = 0; i < 16; ++i)
    {
      myMat[i] *= theFactor;
    }
  }

  
  
  NCollection_Mat4& operator*=(const Element_t theFactor)
  {
    Multiply (theFactor);
    return *this;
  }

  
  
  
  NCollection_Mat4 operator* (const Element_t theFactor) const
  {
    return Multiplied (theFactor);
  }

  
  
  
  NCollection_Mat4 Multiplied (const Element_t theFactor) const
  {
    NCollection_Mat4 aTempMat (*this);
    aTempMat *= theFactor;
    return aTempMat;
  }

  
  
  void Translate (const NCollection_Vec3<Element_t>& theVec)
  {
    NCollection_Mat4 aTempMat;
    aTempMat.SetColumn (3, theVec);
    this->Multiply (aTempMat);
  }

  
  
  NCollection_Mat4 Transposed() const
  {
    NCollection_Mat4 aTempMat;
    aTempMat.SetRow (0, GetColumn (0));
    aTempMat.SetRow (1, GetColumn (1));
    aTempMat.SetRow (2, GetColumn (2));
    aTempMat.SetRow (3, GetColumn (3));
    return aTempMat;
  }

  
  void Transpose()
  {
    *this = Transposed();
  }

  
  
  
  bool Inverted (NCollection_Mat4<Element_t>& theOutMx) const
  {
    Element_t* inv = theOutMx.myMat;

    
    const Element_t* m = myMat;

    inv[ 0] = m[ 5] * (m[10] * m[15] - m[11] * m[14]) -
              m[ 9] * (m[ 6] * m[15] - m[ 7] * m[14]) -
              m[13] * (m[ 7] * m[10] - m[ 6] * m[11]);

    inv[ 1] = m[ 1] * (m[11] * m[14] - m[10] * m[15]) -
              m[ 9] * (m[ 3] * m[14] - m[ 2] * m[15]) -
              m[13] * (m[ 2] * m[11] - m[ 3] * m[10]);

    inv[ 2] = m[ 1] * (m[ 6] * m[15] - m[ 7] * m[14]) -
              m[ 5] * (m[ 2] * m[15] - m[ 3] * m[14]) -
              m[13] * (m[ 3] * m[ 6] - m[ 2] * m[ 7]);

    inv[ 3] = m[ 1] * (m[ 7] * m[10] - m[ 6] * m[11]) -
              m[ 5] * (m[ 3] * m[10] - m[ 2] * m[11]) -
              m[ 9] * (m[ 2] * m[ 7] - m[ 3] * m[ 6]);

    inv[ 4] = m[ 4] * (m[11] * m[14] - m[10] * m[15]) -
              m[ 8] * (m[ 7] * m[14] - m[ 6] * m[15]) -
              m[12] * (m[ 6] * m[11] - m[ 7] * m[10]);

    inv[ 5] = m[ 0] * (m[10] * m[15] - m[11] * m[14]) -
              m[ 8] * (m[ 2] * m[15] - m[ 3] * m[14]) -
              m[12] * (m[ 3] * m[10] - m[ 2] * m[11]);

    inv[ 6] = m[ 0] * (m[ 7] * m[14] - m[ 6] * m[15]) -
              m[ 4] * (m[ 3] * m[14] - m[ 2] * m[15]) -
              m[12] * (m[ 2] * m[ 7] - m[ 3] * m[ 6]);

    inv[ 7] = m[ 0] * (m[ 6] * m[11] - m[ 7] * m[10]) -
              m[ 4] * (m[ 2] * m[11] - m[ 3] * m[10]) -
              m[ 8] * (m[ 3] * m[ 6] - m[ 2] * m[ 7]);

    inv[ 8] = m[ 4] * (m[ 9] * m[15] - m[11] * m[13]) -
              m[ 8] * (m[ 5] * m[15] - m[ 7] * m[13]) -
              m[12] * (m[ 7] * m[ 9] - m[ 5] * m[11]);

    inv[ 9] = m[ 0] * (m[11] * m[13] - m[ 9] * m[15]) -
              m[ 8] * (m[ 3] * m[13] - m[ 1] * m[15]) -
              m[12] * (m[ 1] * m[11] - m[ 3] * m[ 9]);

    inv[10] = m[ 0] * (m[ 5] * m[15] - m[ 7] * m[13]) -
              m[ 4] * (m[ 1] * m[15] - m[ 3] * m[13]) -
              m[12] * (m[ 3] * m[ 5] - m[ 1] * m[ 7]);

    inv[11] = m[ 0] * (m[ 7] * m[ 9] - m[ 5] * m[11]) -
              m[ 4] * (m[ 3] * m[ 9] - m[ 1] * m[11]) -
              m[ 8] * (m[ 1] * m[ 7] - m[ 3] * m[ 5]);

    inv[12] = m[ 4] * (m[10] * m[13] - m[ 9] * m[14]) -
              m[ 8] * (m[ 6] * m[13] - m[ 5] * m[14]) -
              m[12] * (m[ 5] * m[10] - m[ 6] * m[ 9]);

    inv[13] = m[ 0] * (m[ 9] * m[14] - m[10] * m[13]) -
              m[ 8] * (m[ 1] * m[14] - m[ 2] * m[13]) -
              m[12] * (m[ 2] * m[ 9] - m[ 1] * m[10]);

    inv[14] = m[ 0] * (m[ 6] * m[13] - m[ 5] * m[14]) -
              m[ 4] * (m[ 2] * m[13] - m[ 1] * m[14]) -
              m[12] * (m[ 1] * m[ 6] - m[ 2] * m[ 5]);

    inv[15] = m[ 0] * (m[ 5] * m[10] - m[ 6] * m[ 9]) -
              m[ 4] * (m[ 1] * m[10] - m[ 2] * m[ 9]) -
              m[ 8] * (m[ 2] * m[ 5] - m[ 1] * m[ 6]);

    Element_t aDet = m[0] * inv[ 0] +
                     m[1] * inv[ 4] +
                     m[2] * inv[ 8] +
                     m[3] * inv[12];

    if (aDet == 0)
      return false;

    aDet = (Element_t) 1. / aDet;

    for (int i = 0; i < 16; ++i)
      inv[i] *= aDet;

    return true;
  }

  
  template <typename Other_t>
  void ConvertFrom (const NCollection_Mat4<Other_t>& theFrom)
  {
    for (int anIdx = 0; anIdx < 16; ++anIdx)
    {
      myMat[anIdx] = static_cast<Element_t> (theFrom.myMat[anIdx]);
    }
  }

  
  template <typename Other_t>
  void Convert (const NCollection_Mat4<Other_t>& theFrom) { ConvertFrom (theFrom); }

  
  static NCollection_Mat4<Element_t>& Map (Element_t* theData)
  {
    return *reinterpret_cast<NCollection_Mat4<Element_t>*> (theData);
  }

  
  static const NCollection_Mat4<Element_t>& Map (const Element_t* theData)
  {
    return *reinterpret_cast<const NCollection_Mat4<Element_t>*> (theData);
  }

private:

  Element_t myMat[16];

private:

  static Element_t myIdentityArray[16];

  
  template<class OtherType> friend class NCollection_Mat4;

};

template<typename Element_t>
Element_t NCollection_Mat4<Element_t>::myIdentityArray[] =
  {1, 0, 0, 0,
   0, 1, 0, 0,
   0, 0, 1, 0,
   0, 0, 0, 1};










class Standard_ConstructionError;
class Standard_OutOfRange;
class gp_Pnt;
class gp_Ax1;
class gp_Ax2;
class gp_Quaternion;
class gp_Ax3;
class gp_Vec;




















class gp_Trsf 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Trsf();
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) gp_Trsf(const gp_Trsf2d& T);
  

  
  
    void SetMirror (const gp_Pnt& P);
  

  
  
  __declspec( dllexport ) void SetMirror (const gp_Ax1& A1);
  

  
  
  
  
  __declspec( dllexport ) void SetMirror (const gp_Ax2& A2);
  

  
  
  
  __declspec( dllexport ) void SetRotation (const gp_Ax1& A1, const Standard_Real Ang);
  

  
  
  
  __declspec( dllexport ) void SetRotation (const gp_Quaternion& R);
  

  
  
  
  __declspec( dllexport ) void SetScale (const gp_Pnt& P, const Standard_Real S);
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void SetDisplacement (const gp_Ax3& FromSystem1, const gp_Ax3& ToSystem2);
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void SetTransformation (const gp_Ax3& FromSystem1, const gp_Ax3& ToSystem2);
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void SetTransformation (const gp_Ax3& ToSystem);
  

  
  __declspec( dllexport ) void SetTransformation (const gp_Quaternion& R, const gp_Vec& T);
  

  
  
    void SetTranslation (const gp_Vec& V);
  

  
  
    void SetTranslation (const gp_Pnt& P1, const gp_Pnt& P2);
  
  
  __declspec( dllexport ) void SetTranslationPart (const gp_Vec& V);
  
  
  
  __declspec( dllexport ) void SetScaleFactor (const Standard_Real S);
  
  void SetForm (const gp_TrsfForm P);
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void SetValues (const Standard_Real a11, const Standard_Real a12, const Standard_Real a13, const Standard_Real a14, const Standard_Real a21, const Standard_Real a22, const Standard_Real a23, const Standard_Real a24, const Standard_Real a31, const Standard_Real a32, const Standard_Real a33, const Standard_Real a34);
  
  
  
    Standard_Boolean IsNegative() const;
  

  
  
  
  
    gp_TrsfForm Form() const;
  
  
    Standard_Real ScaleFactor() const;
  

  
    const gp_XYZ& TranslationPart() const;
  

  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Boolean GetRotation (gp_XYZ& theAxis, Standard_Real& theAngle) const;
  

  
  __declspec( dllexport ) gp_Quaternion GetRotation() const;
  

  
  
  __declspec( dllexport ) gp_Mat VectorialPart() const;
  

  
  
  
  
  
  
    const gp_Mat& HVectorialPart() const;
  

  
  
  
  
    Standard_Real Value (const Standard_Integer Row, const Standard_Integer Col) const;
  
  __declspec( dllexport ) void Invert();
  

  
  
  
  
  
  
  
  
  
  
  
  
  
    gp_Trsf Inverted() const;
  
    gp_Trsf Multiplied (const gp_Trsf& T) const;
  gp_Trsf operator * (const gp_Trsf& T) const
{
  return Multiplied(T);
}
  

  
  
  __declspec( dllexport ) void Multiply (const gp_Trsf& T);
void operator *= (const gp_Trsf& T)
{
  Multiply(T);
}
  

  
  
  __declspec( dllexport ) void PreMultiply (const gp_Trsf& T);
  
  __declspec( dllexport ) void Power (const Standard_Integer N);
  

  
  
  
  
  
  
  
    gp_Trsf Powered (const Standard_Integer N) const;
  
    void Transforms (Standard_Real& X, Standard_Real& Y, Standard_Real& Z) const;
  
  
    void Transforms (gp_XYZ& Coord) const;

  
  template<class T>
  void GetMat4 (NCollection_Mat4<T>& theMat) const
  {
    if (shape == gp_Identity)
    {
      theMat.InitIdentity();
      return;
    }

    theMat.SetValue (0, 0, static_cast<T> (Value (1, 1)));
    theMat.SetValue (0, 1, static_cast<T> (Value (1, 2)));
    theMat.SetValue (0, 2, static_cast<T> (Value (1, 3)));
    theMat.SetValue (0, 3, static_cast<T> (Value (1, 4)));
    theMat.SetValue (1, 0, static_cast<T> (Value (2, 1)));
    theMat.SetValue (1, 1, static_cast<T> (Value (2, 2)));
    theMat.SetValue (1, 2, static_cast<T> (Value (2, 3)));
    theMat.SetValue (1, 3, static_cast<T> (Value (2, 4)));
    theMat.SetValue (2, 0, static_cast<T> (Value (3, 1)));
    theMat.SetValue (2, 1, static_cast<T> (Value (3, 2)));
    theMat.SetValue (2, 2, static_cast<T> (Value (3, 3)));
    theMat.SetValue (2, 3, static_cast<T> (Value (3, 4)));
    theMat.SetValue (3, 0, static_cast<T> (0));
    theMat.SetValue (3, 1, static_cast<T> (0));
    theMat.SetValue (3, 2, static_cast<T> (0));
    theMat.SetValue (3, 3, static_cast<T> (1));
  }

friend class gp_GTrsf;

protected:

  
  __declspec( dllexport ) void Orthogonalize();

private:

  Standard_Real scale;
  gp_TrsfForm shape;
  gp_Mat matrix;
  gp_XYZ loc;

};






































































class Standard_ConstructionError;
class Standard_OutOfRange;
class gp_Trsf2d;
class gp_GTrsf2d;
class gp_XY;





class gp_Mat2d 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Mat2d();
  

  
  __declspec( dllexport ) gp_Mat2d(const gp_XY& Col1, const gp_XY& Col2);
  
  
  
  
  __declspec( dllexport ) void SetCol (const Standard_Integer Col, const gp_XY& Value);
  
  
  __declspec( dllexport ) void SetCols (const gp_XY& Col1, const gp_XY& Col2);
  

  
  
  
  
    void SetDiagonal (const Standard_Real X1, const Standard_Real X2);
  
  
    void SetIdentity();
  

  
  
    void SetRotation (const Standard_Real Ang);
  
  
  
  __declspec( dllexport ) void SetRow (const Standard_Integer Row, const gp_XY& Value);
  
  
  __declspec( dllexport ) void SetRows (const gp_XY& Row1, const gp_XY& Row2);
  

  
  
  
  
    void SetScale (const Standard_Real S);
  
  
  
    void SetValue (const Standard_Integer Row, const Standard_Integer Col, const Standard_Real Value);
  
  
  
  __declspec( dllexport ) gp_XY Column (const Standard_Integer Col) const;
  
  
    Standard_Real Determinant() const;
  
  
  __declspec( dllexport ) gp_XY Diagonal() const;
  
  
  
  __declspec( dllexport ) gp_XY Row (const Standard_Integer Row) const;
  
  
  
  
    const Standard_Real& Value (const Standard_Integer Row, const Standard_Integer Col) const;
  const Standard_Real& operator() (const Standard_Integer Row, const Standard_Integer Col) const
{
  return Value(Row,Col);
}
  
  
  
  
    Standard_Real& ChangeValue (const Standard_Integer Row, const Standard_Integer Col);
  Standard_Real& operator() (const Standard_Integer Row, const Standard_Integer Col)
{
  return ChangeValue(Row,Col);
}
  

  
  
  
  
    Standard_Boolean IsSingular() const;
  
    void Add (const gp_Mat2d& Other);
  void operator += (const gp_Mat2d& Other)
{
  Add(Other);
}
  

  
  
  
  
  
  
    gp_Mat2d Added (const gp_Mat2d& Other) const;
  gp_Mat2d operator + (const gp_Mat2d& Other) const
{
  return Added(Other);
}
  
    void Divide (const Standard_Real Scalar);
  void operator /= (const Standard_Real Scalar)
{
  Divide(Scalar);
}
  

  
    gp_Mat2d Divided (const Standard_Real Scalar) const;
  gp_Mat2d operator / (const Standard_Real Scalar) const
{
  return Divided(Scalar);
}
  
  __declspec( dllexport ) void Invert();
  

  
  
    gp_Mat2d Inverted() const;
  
    gp_Mat2d Multiplied (const gp_Mat2d& Other) const;
  gp_Mat2d operator * (const gp_Mat2d& Other) const
{
  return Multiplied(Other);
}
  

  
    void Multiply (const gp_Mat2d& Other);
  
  
  
    void PreMultiply (const gp_Mat2d& Other);
  
    gp_Mat2d Multiplied (const Standard_Real Scalar) const;
  gp_Mat2d operator * (const Standard_Real Scalar) const
{
  return Multiplied(Scalar);
}
  

  
    void Multiply (const Standard_Real Scalar);
  void operator *= (const Standard_Real Scalar)
{
  Multiply(Scalar);
}
  
  __declspec( dllexport ) void Power (const Standard_Integer N);
  

  
  
  
  
  
    gp_Mat2d Powered (const Standard_Integer N) const;
  
    void Subtract (const gp_Mat2d& Other);
  void operator -= (const gp_Mat2d& Other)
{
  Subtract(Other);
}
  

  
  
    gp_Mat2d Subtracted (const gp_Mat2d& Other) const;
  gp_Mat2d operator - (const gp_Mat2d& Other) const
{
  return Subtracted(Other);
}
  
    void Transpose();
  

  
    gp_Mat2d Transposed() const;


friend class gp_Trsf2d;
friend class gp_GTrsf2d;
friend class gp_XY;


protected:





private:



  Standard_Real matrix[2][2];


};



































inline gp_Mat2d::gp_Mat2d ()
{
  const Standard_Address M = (Standard_Address)&(matrix[0][0]);
  ((Standard_Real*)M)[0] = ((Standard_Real*)M)[1] = ((Standard_Real*)M)[2] = ((Standard_Real*)M)[3] = 0.0;
}

inline void gp_Mat2d::SetDiagonal (const Standard_Real X1,
			    const Standard_Real X2)
{
  const Standard_Address M = (Standard_Address)&(matrix[0][0]);
  ((Standard_Real*)M)[0] = X1; ((Standard_Real*)M)[3] = X2;
}

inline void gp_Mat2d::SetIdentity ()
{
  const Standard_Address M = (Standard_Address)&(matrix[0][0]);
  ((Standard_Real*)M)[0] = ((Standard_Real*)M)[3] = 1.0;
  ((Standard_Real*)M)[1] = ((Standard_Real*)M)[2] = 0.0;
}

inline void gp_Mat2d::SetRotation (const Standard_Real Ang)
{
  const Standard_Address M = (Standard_Address)&(matrix[0][0]);
  Standard_Real SinA = sin(Ang);
  Standard_Real CosA = cos(Ang);
  ((Standard_Real*)M)[0] = ((Standard_Real*)M)[3] = CosA;
  ((Standard_Real*)M)[1] = -SinA;
  ((Standard_Real*)M)[2] =  SinA;
}

inline void gp_Mat2d::SetScale (const Standard_Real S)
{
  const Standard_Address M = (Standard_Address)&(matrix[0][0]);
  ((Standard_Real*)M)[0] = ((Standard_Real*)M)[3] = S;
  ((Standard_Real*)M)[1] = ((Standard_Real*)M)[2] = 0.0;
}

inline void gp_Mat2d::SetValue (const Standard_Integer Row, 
				const Standard_Integer Col, 
				const Standard_Real Value)
{
  if (Row < 1 || Row > 2 || Col < 1 || Col > 2) Standard_OutOfRange::Raise(" ");;
  matrix[Row-1][Col-1] = Value;
}

inline Standard_Real gp_Mat2d::Determinant () const
{
  const Standard_Address M = (Standard_Address)&(matrix[0][0]);
  return  ((Standard_Real*)M)[0] * ((Standard_Real*)M)[3] - ((Standard_Real*)M)[2] * ((Standard_Real*)M)[1];
}

inline const Standard_Real& gp_Mat2d::Value (const Standard_Integer Row, 
					     const Standard_Integer Col) const
{
  if (Row < 1 || Row > 2 || Col < 1 || Col > 2) Standard_OutOfRange::Raise(" ");;
  return matrix[Row-1][Col-1];
}

inline  Standard_Real& 
gp_Mat2d::ChangeValue (const Standard_Integer Row, 
		       const Standard_Integer Col)
{
  if (Row < 1 || Row > 2 || Col < 1 || Col > 2) Standard_OutOfRange::Raise(" ");;
  return matrix[Row-1][Col-1];
}

inline Standard_Boolean gp_Mat2d::IsSingular () const
{
  Standard_Real det = Determinant();
  if (det < 0) det = - det;
  return det <= gp::Resolution();
}

inline void gp_Mat2d::Add (const gp_Mat2d& Other)
{
  const Standard_Address M = (Standard_Address)&(      matrix[0][0]);
  const Standard_Address O = (Standard_Address)&(Other.matrix[0][0]);
  ((Standard_Real*)M)[0] += ((Standard_Real*)O)[0];
  ((Standard_Real*)M)[1] += ((Standard_Real*)O)[1];
  ((Standard_Real*)M)[2] += ((Standard_Real*)O)[2];
  ((Standard_Real*)M)[3] += ((Standard_Real*)O)[3];
}

inline gp_Mat2d gp_Mat2d::Added (const gp_Mat2d& Other) const
{
  gp_Mat2d NewMat2d;
  const Standard_Address M = (Standard_Address)&(         matrix[0][0]);
  const Standard_Address N = (Standard_Address)&(NewMat2d.matrix[0][0]);
  const Standard_Address O = (Standard_Address)&(Other   .matrix[0][0]);
  ((Standard_Real*)N)[0] = ((Standard_Real*)M)[0] + ((Standard_Real*)O)[0];
  ((Standard_Real*)N)[1] = ((Standard_Real*)M)[1] + ((Standard_Real*)O)[1];
  ((Standard_Real*)N)[2] = ((Standard_Real*)M)[2] + ((Standard_Real*)O)[2];
  ((Standard_Real*)N)[3] = ((Standard_Real*)M)[3] + ((Standard_Real*)O)[3];
  return NewMat2d;
}

inline void gp_Mat2d::Divide (const Standard_Real Scalar)
{
  const Standard_Address M = (Standard_Address)&(matrix[0][0]);
  ((Standard_Real*)M)[0] /= Scalar;
  ((Standard_Real*)M)[1] /= Scalar;
  ((Standard_Real*)M)[2] /= Scalar;
  ((Standard_Real*)M)[3] /= Scalar;
}

inline gp_Mat2d gp_Mat2d::Divided (const Standard_Real Scalar) const
{
  gp_Mat2d NewMat2d;
  const Standard_Address M = (Standard_Address)&(         matrix[0][0]);
  const Standard_Address N = (Standard_Address)&(NewMat2d.matrix[0][0]);
  ((Standard_Real*)N)[0] = ((Standard_Real*)M)[0] / Scalar;
  ((Standard_Real*)N)[1] = ((Standard_Real*)M)[1] / Scalar;
  ((Standard_Real*)N)[2] = ((Standard_Real*)M)[2] / Scalar;
  ((Standard_Real*)N)[3] = ((Standard_Real*)M)[3] / Scalar;
  return NewMat2d;
}

inline gp_Mat2d gp_Mat2d::Inverted () const
{
  gp_Mat2d NewMat = *this;
  NewMat.Invert();
  return NewMat;
}

inline gp_Mat2d gp_Mat2d::Multiplied (const gp_Mat2d& Other) const
{
  gp_Mat2d NewMat2d = *this;
  NewMat2d.Multiply(Other);
  return NewMat2d;
}

inline void gp_Mat2d::Multiply (const gp_Mat2d& Other)
{
  Standard_Real T00,T10;
  const Standard_Address M = (Standard_Address)&(      matrix[0][0]);
  const Standard_Address O = (Standard_Address)&(Other.matrix[0][0]);
  T00     = ((Standard_Real*)M)[0] * ((Standard_Real*)O)[0] + ((Standard_Real*)M)[1] * ((Standard_Real*)O)[2];
  T10     = ((Standard_Real*)M)[2] * ((Standard_Real*)O)[0] + ((Standard_Real*)M)[3] * ((Standard_Real*)O)[2];
  ((Standard_Real*)M)[1] = ((Standard_Real*)M)[0] * ((Standard_Real*)O)[1] + ((Standard_Real*)M)[1] * ((Standard_Real*)O)[3];
  ((Standard_Real*)M)[3] = ((Standard_Real*)M)[2] * ((Standard_Real*)O)[1] + ((Standard_Real*)M)[3] * ((Standard_Real*)O)[3];
  ((Standard_Real*)M)[0] = T00;
  ((Standard_Real*)M)[2] = T10;
}

inline void gp_Mat2d::PreMultiply (const gp_Mat2d& Other)
{
  Standard_Real T00,T01;
  const Standard_Address M = (Standard_Address)&(      matrix[0][0]);
  const Standard_Address O = (Standard_Address)&(Other.matrix[0][0]);
  T00     = ((Standard_Real*)O)[0] * ((Standard_Real*)M)[0] + ((Standard_Real*)O)[1] * ((Standard_Real*)M)[2];
  ((Standard_Real*)M)[2] = ((Standard_Real*)O)[2] * ((Standard_Real*)M)[0] + ((Standard_Real*)O)[3] * ((Standard_Real*)M)[2];
  T01     = ((Standard_Real*)O)[0] * ((Standard_Real*)M)[1] + ((Standard_Real*)O)[1] * ((Standard_Real*)M)[3];
  ((Standard_Real*)M)[3] = ((Standard_Real*)O)[2] * ((Standard_Real*)M)[1] + ((Standard_Real*)O)[3] * ((Standard_Real*)M)[3];
  ((Standard_Real*)M)[0] = T00;
  ((Standard_Real*)M)[1] = T01;
}

inline gp_Mat2d gp_Mat2d::Multiplied (const Standard_Real Scalar) const
{
  gp_Mat2d NewMat2d;
  const Standard_Address M = (Standard_Address)&(         matrix[0][0]);
  const Standard_Address N = (Standard_Address)&(NewMat2d.matrix[0][0]);
  ((Standard_Real*)N)[0] = ((Standard_Real*)M)[0] * Scalar;
  ((Standard_Real*)N)[1] = ((Standard_Real*)M)[1] * Scalar;
  ((Standard_Real*)N)[2] = ((Standard_Real*)M)[2] * Scalar;
  ((Standard_Real*)N)[3] = ((Standard_Real*)M)[3] * Scalar;
  return NewMat2d;
}

inline void gp_Mat2d::Multiply (const Standard_Real Scalar)
{
  const Standard_Address M = (Standard_Address)&(matrix[0][0]);
  ((Standard_Real*)M)[0] *= Scalar;
  ((Standard_Real*)M)[1] *= Scalar;
  ((Standard_Real*)M)[2] *= Scalar;
  ((Standard_Real*)M)[3] *= Scalar;
}

inline gp_Mat2d gp_Mat2d::Powered (const Standard_Integer N) const
{
  gp_Mat2d Mat2dN = *this;
  Mat2dN.Power (N);
  return Mat2dN;
}

inline void gp_Mat2d::Subtract (const gp_Mat2d& Other)
{
  const Standard_Address M = (Standard_Address)&(      matrix[0][0]);
  const Standard_Address O = (Standard_Address)&(Other.matrix[0][0]);
  ((Standard_Real*)M)[0] -= ((Standard_Real*)O)[0];
  ((Standard_Real*)M)[1] -= ((Standard_Real*)O)[1];
  ((Standard_Real*)M)[2] -= ((Standard_Real*)O)[2];
  ((Standard_Real*)M)[3] -= ((Standard_Real*)O)[3];
}

inline gp_Mat2d gp_Mat2d::Subtracted (const gp_Mat2d& Other) const
{
  gp_Mat2d NewMat2d;
  const Standard_Address M = (Standard_Address)&(         matrix[0][0]);
  const Standard_Address N = (Standard_Address)&(NewMat2d.matrix[0][0]);
  const Standard_Address O = (Standard_Address)&(Other   .matrix[0][0]);
  ((Standard_Real*)N)[0] = ((Standard_Real*)M)[0] - ((Standard_Real*)O)[0];
  ((Standard_Real*)N)[1] = ((Standard_Real*)M)[1] - ((Standard_Real*)O)[1];
  ((Standard_Real*)N)[2] = ((Standard_Real*)M)[2] - ((Standard_Real*)O)[2];
  ((Standard_Real*)N)[3] = ((Standard_Real*)M)[3] - ((Standard_Real*)O)[3];
  return NewMat2d;
}

inline void gp_Mat2d::Transpose ()
{
  const Standard_Address M = (Standard_Address)&(matrix[0][0]);
  Standard_Real Temp;
  Temp     = ((Standard_Real*)M)[1];
  ((Standard_Real*)M)[1]  = ((Standard_Real*)M)[2];
  ((Standard_Real*)M)[2]  = Temp;
}

inline gp_Mat2d gp_Mat2d::Transposed () const
{
  gp_Mat2d NewMat2d;
  const Standard_Address M = (Standard_Address)&(         matrix[0][0]);
  const Standard_Address N = (Standard_Address)&(NewMat2d.matrix[0][0]);
  ((Standard_Real*)N)[2] = ((Standard_Real*)M)[1];
  ((Standard_Real*)N)[1] = ((Standard_Real*)M)[2];
  ((Standard_Real*)N)[0] = ((Standard_Real*)M)[0];
  ((Standard_Real*)N)[3] = ((Standard_Real*)M)[3];
  return NewMat2d; 
}

inline gp_Mat2d operator* (const Standard_Real Scalar,
			   const gp_Mat2d& Mat2D)
{ return Mat2D.Multiplied (Scalar); }


































class Standard_ConstructionError;
class Standard_OutOfRange;
class gp_Mat2d;









class gp_XY 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_XY();
  
  
    gp_XY(const Standard_Real X, const Standard_Real Y);
  

  
  
  
  
    void SetCoord (const Standard_Integer Index, const Standard_Real Xi);
  
  
  
    void SetCoord (const Standard_Real X, const Standard_Real Y);
  
  
    void SetX (const Standard_Real X);
  
  
    void SetY (const Standard_Real Y);
  

  
  
  
  
    Standard_Real Coord (const Standard_Integer Index) const;
  
    Standard_Real& ChangeCoord (const Standard_Integer theIndex);
  
  
    void Coord (Standard_Real& X, Standard_Real& Y) const;
  
  
    Standard_Real X() const;
  
  
    Standard_Real Y() const;
  
  
    Standard_Real Modulus() const;
  
  
    Standard_Real SquareModulus() const;
  

  
  
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsEqual (const gp_XY& Other, const Standard_Real Tolerance) const;
  
  
  
  
    void Add (const gp_XY& Other);
  void operator += (const gp_XY& Other)
{
  Add(Other);
}
  
  
  
  
    gp_XY Added (const gp_XY& Other) const;
  gp_XY operator + (const gp_XY& Other) const
{
  return Added(Other);
}
  

  
    Standard_Real Crossed (const gp_XY& Right) const;
  Standard_Real operator ^ (const gp_XY& Right) const
{
  return Crossed(Right);
}
  

  
  
    Standard_Real CrossMagnitude (const gp_XY& Right) const;
  

  
  
    Standard_Real CrossSquareMagnitude (const gp_XY& Right) const;
  
  
    void Divide (const Standard_Real Scalar);
  void operator /= (const Standard_Real Scalar)
{
  Divide(Scalar);
}
  
  
    gp_XY Divided (const Standard_Real Scalar) const;
  gp_XY operator / (const Standard_Real Scalar) const
{
  return Divided(Scalar);
}
  
  
    Standard_Real Dot (const gp_XY& Other) const;
  Standard_Real operator * (const gp_XY& Other) const
{
  return Dot(Other);
}
  

  
  
    void Multiply (const Standard_Real Scalar);
  void operator *= (const Standard_Real Scalar)
{
  Multiply(Scalar);
}
  

  
  
    void Multiply (const gp_XY& Other);
  void operator *= (const gp_XY& Other)
{
  Multiply(Other);
}
  
  
    void Multiply (const gp_Mat2d& Matrix);
  void operator *= (const gp_Mat2d& Matrix)
{
  Multiply(Matrix);
}
  

  
  
    gp_XY Multiplied (const Standard_Real Scalar) const;
  gp_XY operator * (const Standard_Real Scalar) const
{
  return Multiplied(Scalar);
}
  

  
  
    gp_XY Multiplied (const gp_XY& Other) const;
  
  
    gp_XY Multiplied (const gp_Mat2d& Matrix) const;
  gp_XY operator * (const gp_Mat2d& Matrix) const
{
  return Multiplied(Matrix);
}
  

  
  
  
    void Normalize();
  

  
  
  
    gp_XY Normalized() const;
  

  
  
    void Reverse();
  

  
  
    gp_XY Reversed() const;
  gp_XY operator -() const
{
  return Reversed();
}
  

  
  
  
    void SetLinearForm (const Standard_Real A1, const gp_XY& XY1, const Standard_Real A2, const gp_XY& XY2);
  

  
  
  
    void SetLinearForm (const Standard_Real A1, const gp_XY& XY1, const Standard_Real A2, const gp_XY& XY2, const gp_XY& XY3);
  

  
  
  
    void SetLinearForm (const Standard_Real A1, const gp_XY& XY1, const gp_XY& XY2);
  

  
  
  
    void SetLinearForm (const gp_XY& XY1, const gp_XY& XY2);
  

  
  
    void Subtract (const gp_XY& Right);
  void operator -= (const gp_XY& Right)
{
  Subtract(Right);
}
  

  
  
    gp_XY Subtracted (const gp_XY& Right) const;
  gp_XY operator - (const gp_XY& Right) const
{
  return Subtracted(Right);
}




protected:





private:



  Standard_Real x;
  Standard_Real y;


};
























inline gp_XY::gp_XY () : x(0.), y(0.) { } 

inline gp_XY::gp_XY (const Standard_Real X,
		     const Standard_Real Y) :  x (X),  y (Y) { }

inline void gp_XY::SetCoord (const Standard_Integer i,
			     const Standard_Real X)
{
  if (i < 1 || i > 2) Standard_OutOfRange::Raise(0);;
  (&x)[i-1] = X;
}

inline void gp_XY::SetCoord (const Standard_Real X,
			     const Standard_Real Y)
{ x = X;  y = Y; }

inline void gp_XY::SetX (const Standard_Real X)
{ x = X; }

inline void gp_XY::SetY (const Standard_Real Y)
{ y = Y; }

inline Standard_Real gp_XY::Coord (const Standard_Integer i) const
{
  if (i < 1 || i > 2) Standard_OutOfRange::Raise(0);;
  return (&x)[i-1];
}

inline Standard_Real& gp_XY::ChangeCoord (const Standard_Integer theIndex)
{
  if (theIndex < 1 || theIndex > 2) Standard_OutOfRange::Raise(0);;
  return (&x)[theIndex - 1];
}

inline void gp_XY::Coord (Standard_Real& X,
			  Standard_Real& Y) const
{ X = x;  Y = y; }

inline Standard_Real gp_XY::X () const
{ return x; }

inline Standard_Real gp_XY::Y () const
{ return y; }

inline Standard_Real gp_XY::Modulus () const
{ 
  return sqrt (x * x + y * y);
}

inline Standard_Real gp_XY::SquareModulus () const
{
  return x * x + y * y;
}

inline void gp_XY::Add (const gp_XY& Other) {
  x += Other.x;
  y += Other.y;
}

inline gp_XY gp_XY::Added (const gp_XY& Other) const {
  return gp_XY(x + Other.X(),y + Other.Y());
}

inline Standard_Real gp_XY::Crossed (const gp_XY& Right) const {
  return x * Right.y - y * Right.x;
}

inline Standard_Real gp_XY::CrossMagnitude (const gp_XY& Right) const
{
  Standard_Real val = x * Right.y - y * Right.x;
  if (val < 0) val = - val;
  return val;
}

inline Standard_Real gp_XY::CrossSquareMagnitude (const gp_XY& Right) const {
  Standard_Real Zresult =  x * Right.y - y * Right.x;
  return Zresult * Zresult;
}

inline void gp_XY::Divide (const Standard_Real Scalar)
{
  x /= Scalar;
  y /= Scalar;
}

inline gp_XY gp_XY::Divided (const Standard_Real Scalar) const {
  return gp_XY(x / Scalar,y / Scalar);
}

inline Standard_Real gp_XY::Dot (const gp_XY& Other) const
{
  return x * Other.x + y * Other.y;
}

inline void gp_XY::Multiply (const Standard_Real Scalar)
{
  x *= Scalar;
  y *= Scalar;
}

inline void gp_XY::Multiply (const gp_XY& Other)
{
  x *= Other.x;
  y *= Other.y;
}

inline void gp_XY::Multiply (const gp_Mat2d& Matrix)
{
  const Standard_Address M = (Standard_Address)&(Matrix.matrix[0][0]);
  Standard_Real Xresult = ((Standard_Real*)M)[0] * x + ((Standard_Real*)M)[1] * y;
  y                     = ((Standard_Real*)M)[2] * x + ((Standard_Real*)M)[3] * y;
  x                     = Xresult;
}

inline gp_XY gp_XY::Multiplied (const Standard_Real Scalar) const {
  return gp_XY(x * Scalar,y * Scalar);
}

inline gp_XY gp_XY::Multiplied (const gp_XY& Other) const {
  return(gp_XY(x * Other.X(),y * Other.Y()));
}

inline gp_XY gp_XY::Multiplied (const gp_Mat2d& Matrix) const
{
  const Standard_Address M = (Standard_Address)&(Matrix.matrix[0][0]);
  return gp_XY (((Standard_Real*)M)[0] * x + ((Standard_Real*)M)[1] * y,
		((Standard_Real*)M)[2] * x + ((Standard_Real*)M)[3] * y);
}

inline void gp_XY::Normalize ()
{
  Standard_Real D = Modulus();
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  x = x / D;   y = y / D;
}

inline gp_XY gp_XY::Normalized () const
{
  Standard_Real D = Modulus();
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  return gp_XY (x / D, y / D);
}

inline void gp_XY::Reverse ()
{  x = - x;    y = - y;  }

inline gp_XY gp_XY::Reversed () const
{
  gp_XY Coord2D = *this;
  Coord2D.Reverse();
  return Coord2D;
}

inline void gp_XY::SetLinearForm (const Standard_Real L,
				  const gp_XY& Left,
				  const Standard_Real R,
				  const gp_XY& Right) {
  x = L * Left.x + R * Right.x;
  y = L * Left.y + R * Right.y;
}

inline void gp_XY::SetLinearForm (const Standard_Real L,
				  const gp_XY& Left,
				  const gp_XY& Right) {
  x = L * Left.x + Right.x;
  y = L * Left.y + Right.y;
}

inline void gp_XY::SetLinearForm (const gp_XY& Left,
				  const gp_XY& Right) {
  x = Left.x + Right.x;
  y = Left.y + Right.y;
}

inline void gp_XY::SetLinearForm (const Standard_Real A1,
				  const gp_XY& XY1,
				  const Standard_Real A2,
				  const gp_XY& XY2,
				  const gp_XY& XY3) {
  x = A1 * XY1.x + A2 * XY2.x + XY3.x;
  y = A1 * XY1.y + A2 * XY2.y + XY3.y;
}

inline void gp_XY::Subtract (const gp_XY& Right)
{
  x -= Right.x;
  y -= Right.y;
}

inline gp_XY gp_XY::Subtracted (const gp_XY& Right) const
{
  gp_XY Coord2D = *this;
  Coord2D.Subtract(Right);
  return Coord2D;
}

inline gp_XY operator* (const gp_Mat2d& Matrix,
			const gp_XY& Coord1) {
  return Coord1.Multiplied(Matrix);
}

inline gp_XY operator* (const Standard_Real Scalar,
			const gp_XY& Coord1) {
  return Coord1.Multiplied(Scalar);
}











class Standard_ConstructionError;
class Standard_OutOfRange;
class gp_GTrsf2d;
class gp_Trsf;
class gp_Pnt2d;
class gp_Ax2d;
class gp_Vec2d;
class gp_XY;
class gp_Mat2d;



















class gp_Trsf2d 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Trsf2d();
  
  
  
    gp_Trsf2d(const gp_Trsf& T);
  

  
  
    void SetMirror (const gp_Pnt2d& P);
  

  
  
  __declspec( dllexport ) void SetMirror (const gp_Ax2d& A);
  

  
  
  
    void SetRotation (const gp_Pnt2d& P, const Standard_Real Ang);
  

  
  
    void SetScale (const gp_Pnt2d& P, const Standard_Real S);
  

  
  
  __declspec( dllexport ) void SetTransformation (const gp_Ax2d& FromSystem1, const gp_Ax2d& ToSystem2);
  

  
  
  
  
  __declspec( dllexport ) void SetTransformation (const gp_Ax2d& ToSystem);
  

  
  
    void SetTranslation (const gp_Vec2d& V);
  

  
  
    void SetTranslation (const gp_Pnt2d& P1, const gp_Pnt2d& P2);
  
  
  __declspec( dllexport ) void SetTranslationPart (const gp_Vec2d& V);
  
  
  __declspec( dllexport ) void SetScaleFactor (const Standard_Real S);
  
  
  
    Standard_Boolean IsNegative() const;
  

  
  
  
  
    gp_TrsfForm Form() const;
  
  
    Standard_Real ScaleFactor() const;
  

  
    const gp_XY& TranslationPart() const;
  

  
  
  __declspec( dllexport ) gp_Mat2d VectorialPart() const;
  

  
  
  
  
    const gp_Mat2d& HVectorialPart() const;
  

  
  
  __declspec( dllexport ) Standard_Real RotationPart() const;
  

  
  
  
    Standard_Real Value (const Standard_Integer Row, const Standard_Integer Col) const;
  
  __declspec( dllexport ) void Invert();
  

  
  
  
  
    gp_Trsf2d Inverted() const;
  
    gp_Trsf2d Multiplied (const gp_Trsf2d& T) const;
  gp_Trsf2d operator * (const gp_Trsf2d& T) const
{
  return Multiplied(T);
}
  

  
  
  __declspec( dllexport ) void Multiply (const gp_Trsf2d& T);
void operator *= (const gp_Trsf2d& T)
{
  Multiply(T);
}
  

  
  
  __declspec( dllexport ) void PreMultiply (const gp_Trsf2d& T);
  
  __declspec( dllexport ) void Power (const Standard_Integer N);
  

  
  
  
  
  
  
  
    gp_Trsf2d Powered (const Standard_Integer N);
  
    void Transforms (Standard_Real& X, Standard_Real& Y) const;
  
  
    void Transforms (gp_XY& Coord) const;
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void SetValues (const Standard_Real a11, const Standard_Real a12, const Standard_Real a13, const Standard_Real a21, const Standard_Real a22, const Standard_Real a23);


friend class gp_GTrsf2d;


protected:

  
  
  __declspec( dllexport ) void Orthogonalize();




private:



  Standard_Real scale;
  gp_TrsfForm shape;
  gp_Mat2d matrix;
  gp_XY loc;


};


























































































































































































































































































































































































































class Standard_OutOfRange;
class gp_XY;
class gp_Ax2d;
class gp_Trsf2d;
class gp_Vec2d;



class gp_Pnt2d 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Pnt2d();
  
  
    gp_Pnt2d(const gp_XY& Coord);
  

  
    gp_Pnt2d(const Standard_Real Xp, const Standard_Real Yp);
  

  
  
  
  
    void SetCoord (const Standard_Integer Index, const Standard_Real Xi);
  
  
    void SetCoord (const Standard_Real Xp, const Standard_Real Yp);
  
  
    void SetX (const Standard_Real X);
  
  
    void SetY (const Standard_Real Y);
  
  
    void SetXY (const gp_XY& Coord);
  

  
  
  
  
  Standard_Real Coord (const Standard_Integer Index) const;
  
  
    void Coord (Standard_Real& Xp, Standard_Real& Yp) const;
  
  
    Standard_Real X() const;
  
  
    Standard_Real Y() const;
  
  
    const gp_XY& XY() const;
  
  
    const gp_XY& Coord() const;
  

  
  
    gp_XY& ChangeCoord();
  
  
  
  
    Standard_Boolean IsEqual (const gp_Pnt2d& Other, const Standard_Real LinearTolerance) const;
  
  
    Standard_Real Distance (const gp_Pnt2d& Other) const;
  
  
    Standard_Real SquareDistance (const gp_Pnt2d& Other) const;
  

  
  
  
  __declspec( dllexport ) void Mirror (const gp_Pnt2d& P);
  

  
  
  __declspec( dllexport ) gp_Pnt2d Mirrored (const gp_Pnt2d& P) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax2d& A);
  

  
  
  __declspec( dllexport ) gp_Pnt2d Mirrored (const gp_Ax2d& A) const;
  
    void Rotate (const gp_Pnt2d& P, const Standard_Real Ang);
  
  
    gp_Pnt2d Rotated (const gp_Pnt2d& P, const Standard_Real Ang) const;
  
    void Scale (const gp_Pnt2d& P, const Standard_Real S);
  
  
    gp_Pnt2d Scaled (const gp_Pnt2d& P, const Standard_Real S) const;
  
  __declspec( dllexport ) void Transform (const gp_Trsf2d& T);
  

  
  
    gp_Pnt2d Transformed (const gp_Trsf2d& T) const;
  
    void Translate (const gp_Vec2d& V);
  

  
    gp_Pnt2d Translated (const gp_Vec2d& V) const;
  
    void Translate (const gp_Pnt2d& P1, const gp_Pnt2d& P2);
  
    gp_Pnt2d Translated (const gp_Pnt2d& P1, const gp_Pnt2d& P2) const;




protected:





private:



  gp_XY coord;


};















































class Standard_ConstructionError;
class Standard_OutOfRange;
class gp_VectorWithNullMagnitude;
class gp_Dir2d;
class gp_XY;
class gp_Pnt2d;
class gp_Ax2d;
class gp_Trsf2d;




class gp_Vec2d 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Vec2d();
  
  
    gp_Vec2d(const gp_Dir2d& V);
  
  
    gp_Vec2d(const gp_XY& Coord);
  
  
    gp_Vec2d(const Standard_Real Xv, const Standard_Real Yv);
  

  
  
    gp_Vec2d(const gp_Pnt2d& P1, const gp_Pnt2d& P2);
  
  
  
  
  
    void SetCoord (const Standard_Integer Index, const Standard_Real Xi);
  
  
  
    void SetCoord (const Standard_Real Xv, const Standard_Real Yv);
  
  
    void SetX (const Standard_Real X);
  
  
    void SetY (const Standard_Real Y);
  
  
    void SetXY (const gp_XY& Coord);
  

  
  
  
  
    Standard_Real Coord (const Standard_Integer Index) const;
  
  
    void Coord (Standard_Real& Xv, Standard_Real& Yv) const;
  
  
    Standard_Real X() const;
  
  
    Standard_Real Y() const;
  
  
    const gp_XY& XY() const;
  

  
  
  
  __declspec( dllexport ) Standard_Boolean IsEqual (const gp_Vec2d& Other, const Standard_Real LinearTolerance, const Standard_Real AngularTolerance) const;
  

  
  
  
  
    Standard_Boolean IsNormal (const gp_Vec2d& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
  Standard_Boolean IsOpposite (const gp_Vec2d& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
  
  
  Standard_Boolean IsParallel (const gp_Vec2d& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Real Angle (const gp_Vec2d& Other) const;
  
  
    Standard_Real Magnitude() const;
  
  
    Standard_Real SquareMagnitude() const;
  
    void Add (const gp_Vec2d& Other);
    void operator += (const gp_Vec2d& Other)
    {
      Add(Other);
    }
  
  
    gp_Vec2d Added (const gp_Vec2d& Other) const;
    gp_Vec2d operator + (const gp_Vec2d& Other) const
    {
      return Added(Other);
    }
  
  
    Standard_Real Crossed (const gp_Vec2d& Right) const;
    Standard_Real operator ^ (const gp_Vec2d& Right) const
    {
      return Crossed(Right);
    }
  

  
  
    Standard_Real CrossMagnitude (const gp_Vec2d& Right) const;
  

  
  
    Standard_Real CrossSquareMagnitude (const gp_Vec2d& Right) const;
  
    void Divide (const Standard_Real Scalar);
    void operator /= (const Standard_Real Scalar)
    {
      Divide(Scalar);
    }
  
  
    gp_Vec2d Divided (const Standard_Real Scalar) const;
    gp_Vec2d operator / (const Standard_Real Scalar) const
    {
      return Divided(Scalar);
    }
  
  
    Standard_Real Dot (const gp_Vec2d& Other) const;
    Standard_Real operator * (const gp_Vec2d& Other) const
    {
      return Dot(Other);
    }

    gp_Vec2d GetNormal() const;
  
    void Multiply (const Standard_Real Scalar);
    void operator *= (const Standard_Real Scalar)
    {
      Multiply(Scalar);
    }
  
  
  
  
    gp_Vec2d Multiplied (const Standard_Real Scalar) const;
    gp_Vec2d operator * (const Standard_Real Scalar) const
    {
      return Multiplied(Scalar);
    }
  
    void Normalize();
  
  
  
  
  
    gp_Vec2d Normalized() const;
  
    void Reverse();
  
  
    gp_Vec2d Reversed() const;
    gp_Vec2d operator -() const
    {
      return Reversed();
    }
  
  
    void Subtract (const gp_Vec2d& Right);
    void operator -= (const gp_Vec2d& Right)
    {
      Subtract(Right);
    }
  
  
    gp_Vec2d Subtracted (const gp_Vec2d& Right) const;
    gp_Vec2d operator - (const gp_Vec2d& Right) const
    {
      return Subtracted(Right);
    }
  

  
  
    void SetLinearForm (const Standard_Real A1, const gp_Vec2d& V1, const Standard_Real A2, const gp_Vec2d& V2, const gp_Vec2d& V3);
  

  
    void SetLinearForm (const Standard_Real A1, const gp_Vec2d& V1, const Standard_Real A2, const gp_Vec2d& V2);
  

  
    void SetLinearForm (const Standard_Real A1, const gp_Vec2d& V1, const gp_Vec2d& V2);
  

  
    void SetLinearForm (const gp_Vec2d& Left, const gp_Vec2d& Right);
  

  
  
  
  __declspec( dllexport ) void Mirror (const gp_Vec2d& V);
  

  
  
  
  __declspec( dllexport ) gp_Vec2d Mirrored (const gp_Vec2d& V) const;
  

  
  
  
  __declspec( dllexport ) void Mirror (const gp_Ax2d& A1);
  

  
  
  
  __declspec( dllexport ) gp_Vec2d Mirrored (const gp_Ax2d& A1) const;
  
    void Rotate (const Standard_Real Ang);
  

  
  
    gp_Vec2d Rotated (const Standard_Real Ang) const;
  
    void Scale (const Standard_Real S);
  
  
    gp_Vec2d Scaled (const Standard_Real S) const;
  
  __declspec( dllexport ) void Transform (const gp_Trsf2d& T);
  
  
    gp_Vec2d Transformed (const gp_Trsf2d& T) const;




protected:





private:



  gp_XY coord;


};














































class Standard_ConstructionError;
class Standard_DomainError;
class Standard_OutOfRange;
class gp_Vec2d;
class gp_XY;
class gp_Ax2d;
class gp_Trsf2d;










class gp_Dir2d 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Dir2d();
  
  
    gp_Dir2d(const gp_Vec2d& V);
  
  
    gp_Dir2d(const gp_XY& Coord);
  
  
    gp_Dir2d(const Standard_Real Xv, const Standard_Real Yv);
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    void SetCoord (const Standard_Integer Index, const Standard_Real Xi);
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
    void SetCoord (const Standard_Real Xv, const Standard_Real Yv);
  

  
  
  
  
  
  
  
  
  
  
  
  
    void SetX (const Standard_Real X);
  

  
  
  
  
  
  
  
  
  
  
  
  
    void SetY (const Standard_Real Y);
  

  
  
  
  
  
  
  
  
  
  
  
  
  
    void SetXY (const gp_XY& Coord);
  

  
  
  
  
    Standard_Real Coord (const Standard_Integer Index) const;
  
  
  
    void Coord (Standard_Real& Xv, Standard_Real& Yv) const;
  
  
    Standard_Real X() const;
  
  
    Standard_Real Y() const;
  
  
  
  
    const gp_XY& XY() const;
  

  
  
  
    Standard_Boolean IsEqual (const gp_Dir2d& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
    Standard_Boolean IsNormal (const gp_Dir2d& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
    Standard_Boolean IsOpposite (const gp_Dir2d& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
  
    Standard_Boolean IsParallel (const gp_Dir2d& Other, const Standard_Real AngularTolerance) const;
  

  
  
  __declspec( dllexport ) Standard_Real Angle (const gp_Dir2d& Other) const;
  

  
    Standard_Real Crossed (const gp_Dir2d& Right) const;
  Standard_Real operator ^ (const gp_Dir2d& Right) const
{
  return Crossed(Right);
}
  
  
    Standard_Real Dot (const gp_Dir2d& Other) const;
  Standard_Real operator * (const gp_Dir2d& Other) const
{
  return Dot(Other);
}
  
    void Reverse();
  
  
    gp_Dir2d Reversed() const;
  gp_Dir2d operator -() const
{
  return Reversed();
}
  
  __declspec( dllexport ) void Mirror (const gp_Dir2d& V);
  

  
  
  
  __declspec( dllexport ) gp_Dir2d Mirrored (const gp_Dir2d& V) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax2d& A);
  

  
  
  
  __declspec( dllexport ) gp_Dir2d Mirrored (const gp_Ax2d& A) const;
  
    void Rotate (const Standard_Real Ang);
  

  
  
    gp_Dir2d Rotated (const Standard_Real Ang) const;
  
  __declspec( dllexport ) void Transform (const gp_Trsf2d& T);
  

  
  
  
  
    gp_Dir2d Transformed (const gp_Trsf2d& T) const;




protected:





private:



  gp_XY coord;


};

























































































































































































































































































































































































































































































































class gp_Pnt2d;
class gp_Dir2d;
class gp_Trsf2d;
class gp_Vec2d;





















class gp_Ax2d 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
    gp_Ax2d();
  

  
  
  
    gp_Ax2d(const gp_Pnt2d& P, const gp_Dir2d& V);
  
  
    void SetLocation (const gp_Pnt2d& Locat);
  
  
    void SetDirection (const gp_Dir2d& V);
  
  
    const gp_Pnt2d& Location() const;
  
  
    const gp_Dir2d& Direction() const;
  

  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsCoaxial (const gp_Ax2d& Other, const Standard_Real AngularTolerance, const Standard_Real LinearTolerance) const;
  
  
  
  
    Standard_Boolean IsNormal (const gp_Ax2d& Other, const Standard_Real AngularTolerance) const;
  
  
  
  
  
    Standard_Boolean IsOpposite (const gp_Ax2d& Other, const Standard_Real AngularTolerance) const;
  
  
  
  
  
    Standard_Boolean IsParallel (const gp_Ax2d& Other, const Standard_Real AngularTolerance) const;
  

  
  
    Standard_Real Angle (const gp_Ax2d& Other) const;
  
  
    void Reverse();
  

  
  
    gp_Ax2d Reversed() const;
  
  __declspec( dllexport ) void Mirror (const gp_Pnt2d& P);
  

  
  
  
  __declspec( dllexport ) gp_Ax2d Mirrored (const gp_Pnt2d& P) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax2d& A);
  

  
  
  
  __declspec( dllexport ) gp_Ax2d Mirrored (const gp_Ax2d& A) const;
  
    void Rotate (const gp_Pnt2d& P, const Standard_Real Ang);
  

  
  
  
    gp_Ax2d Rotated (const gp_Pnt2d& P, const Standard_Real Ang) const;
  
  __declspec( dllexport ) void Scale (const gp_Pnt2d& P, const Standard_Real S);
  

  
  
  
    gp_Ax2d Scaled (const gp_Pnt2d& P, const Standard_Real S) const;
  
    void Transform (const gp_Trsf2d& T);
  
  
    gp_Ax2d Transformed (const gp_Trsf2d& T) const;
  
    void Translate (const gp_Vec2d& V);
  

  
  
    gp_Ax2d Translated (const gp_Vec2d& V) const;
  
    void Translate (const gp_Pnt2d& P1, const gp_Pnt2d& P2);
  

  
  
    gp_Ax2d Translated (const gp_Pnt2d& P1, const gp_Pnt2d& P2) const;




protected:





private:



  gp_Pnt2d loc;
  gp_Dir2d vdir;


};




























































































































































































































inline gp_Ax2d::gp_Ax2d() : loc(0.,0.), vdir(1.,0.)
{ }

inline gp_Ax2d::gp_Ax2d (const gp_Pnt2d& P,
			 const gp_Dir2d& V) : loc(P), vdir(V)
{ }

inline void gp_Ax2d::SetLocation(const gp_Pnt2d& P)
{ loc = P; }

inline void gp_Ax2d::SetDirection(const gp_Dir2d& V)
{ vdir = V; }

inline const gp_Pnt2d& gp_Ax2d::Location () const
{ return loc; }

inline const gp_Dir2d& gp_Ax2d::Direction () const
{ return vdir; }

inline Standard_Boolean gp_Ax2d::IsNormal
(const gp_Ax2d& Other,
 const Standard_Real AngularTolerance) const
{ return vdir.IsNormal(Other.vdir, AngularTolerance); }

inline Standard_Boolean gp_Ax2d::IsOpposite
(const gp_Ax2d& Other,
 const Standard_Real AngularTolerance) const
{ return vdir.IsOpposite (Other.vdir, AngularTolerance); }

inline Standard_Boolean gp_Ax2d::IsParallel
(const gp_Ax2d& Other,
 const Standard_Real AngularTolerance) const
{ return vdir.IsParallel(Other.vdir, AngularTolerance); }

inline   Standard_Real gp_Ax2d::Angle (const gp_Ax2d& Other) const
{ return vdir.Angle (Other.vdir); }

inline void gp_Ax2d::Reverse()
{ vdir.Reverse(); }

inline gp_Ax2d gp_Ax2d::Reversed() const
{ 
  gp_Ax2d Temp = *this;
  Temp.Reverse ();
  return Temp;
}

inline void gp_Ax2d::Rotate (const gp_Pnt2d& P,
			     const Standard_Real Ang)
{
  loc.Rotate (P, Ang);
  vdir.Rotate (Ang);
}

inline gp_Ax2d gp_Ax2d::Rotated (const gp_Pnt2d& P,
				 const Standard_Real Ang) const
{
  gp_Ax2d A = *this;
  A.Rotate (P, Ang);
  return A;
}

inline gp_Ax2d gp_Ax2d::Scaled (const gp_Pnt2d& P,
				const Standard_Real S) const
{
  gp_Ax2d A = *this;
  A.Scale (P, S);
  return A;
}

inline void gp_Ax2d::Transform (const gp_Trsf2d& T)
{
  loc.Transform  (T);
  vdir.Transform (T);
}

inline gp_Ax2d gp_Ax2d::Transformed (const gp_Trsf2d& T) const
{
  gp_Ax2d A = *this;
  A.Transform (T);
  return A;
}

inline void gp_Ax2d::Translate (const gp_Vec2d& V)
{ loc.Translate (V); }

inline gp_Ax2d gp_Ax2d::Translated (const gp_Vec2d& V) const
{
  gp_Ax2d A = *this;
  (A.loc).Translate (V); 
  return A;
}

inline void gp_Ax2d::Translate (const gp_Pnt2d& P1,
				const gp_Pnt2d& P2)
{ loc.Translate (P1,P2); }

inline gp_Ax2d gp_Ax2d::Translated (const gp_Pnt2d& P1,
				    const gp_Pnt2d& P2) const
{
  gp_Ax2d A = *this;
  (A.loc).Translate( gp_Vec2d (P1, P2));
  return A;
}






































































































































































































































































inline gp_Dir2d::gp_Dir2d() : coord (1.,0.) 
{
}

inline gp_Dir2d::gp_Dir2d (const gp_Vec2d& V)
{
  const gp_XY& XY = V.XY();
  Standard_Real X = XY.X();
  Standard_Real Y = XY.Y();
  Standard_Real D = sqrt(X * X + Y * Y);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(X / D);
  coord.SetY(Y / D);
}

inline gp_Dir2d::gp_Dir2d (const gp_XY& XY)
{
  Standard_Real X = XY.X();
  Standard_Real Y = XY.Y();
  Standard_Real D = sqrt(X * X + Y * Y);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(X / D);
  coord.SetY(Y / D);
}

inline gp_Dir2d::gp_Dir2d (const Standard_Real Xv,
			   const Standard_Real Yv)
{
  Standard_Real D = sqrt (Xv * Xv + Yv * Yv);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(Xv / D);
  coord.SetY(Yv / D);
}

inline void gp_Dir2d::SetCoord (const Standard_Integer Index,
				const Standard_Real Xi)
{
  Standard_Real X = coord.X();
  Standard_Real Y = coord.Y();
  if (Index < 1 || Index > 2) Standard_OutOfRange::Raise(" ");;
  if      (Index == 1) X = Xi;
  else                 Y = Xi;
  Standard_Real D = sqrt (X * X + Y * Y);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(X / D);
  coord.SetY(Y / D);
}

inline void gp_Dir2d::SetCoord (const Standard_Real Xv,
				const Standard_Real Yv)
{
  Standard_Real D = sqrt (Xv * Xv + Yv * Yv);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(Xv / D);
  coord.SetY(Yv / D);
}

inline void gp_Dir2d::SetX (const Standard_Real X)
{
  Standard_Real Y = coord.Y();
  Standard_Real D = sqrt (X * X + Y * Y);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(X / D);
  coord.SetY(Y / D);
}

inline void gp_Dir2d::SetY (const Standard_Real Y)
{
  Standard_Real X = coord.X();
  Standard_Real D = sqrt (X * X + Y * Y);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(X / D);
  coord.SetY(Y / D);
}

inline void gp_Dir2d::SetXY (const gp_XY& XY)
{
  Standard_Real X = XY.X();
  Standard_Real Y = XY.Y();
  Standard_Real D = sqrt(X * X + Y * Y);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(X / D);
  coord.SetY(Y / D);
}

inline Standard_Real gp_Dir2d::Coord (const Standard_Integer Index) const
{ return coord.Coord(Index); }

inline void gp_Dir2d::Coord(Standard_Real& Xv, Standard_Real& Yv) const
{ coord.Coord (Xv, Yv); }

inline Standard_Real gp_Dir2d::X() const
{ return coord.X() ; }    

inline Standard_Real gp_Dir2d::Y() const
{ return coord.Y() ; }

inline const gp_XY& gp_Dir2d::XY () const
{ return coord; }

inline Standard_Boolean gp_Dir2d::IsEqual
(const gp_Dir2d& Other,
 const Standard_Real AngularTolerance) const
{
  Standard_Real Ang = Angle(Other);
  if (Ang < 0) Ang = - Ang;
  return   Ang <= AngularTolerance;
}    

inline Standard_Boolean gp_Dir2d::IsNormal
(const gp_Dir2d& Other,
 const Standard_Real AngularTolerance) const
{
  Standard_Real Ang = Angle(Other);
  if (Ang < 0) Ang = - Ang;
  Ang = 3.14159265358979323846 / 2.0 - Ang;
  if (Ang < 0) Ang = - Ang;
  return   Ang <= AngularTolerance;
}    

inline Standard_Boolean gp_Dir2d::IsOpposite
(const gp_Dir2d& Other,
 const Standard_Real AngularTolerance) const
{ 
  Standard_Real Ang = Angle(Other);
  if (Ang < 0) Ang = - Ang;
  return 3.14159265358979323846 - Ang <= AngularTolerance;
}    

inline Standard_Boolean gp_Dir2d::IsParallel
(const gp_Dir2d& Other,
 const Standard_Real AngularTolerance) const
{
  Standard_Real Ang = Angle(Other);
  if (Ang < 0) Ang = - Ang;
  return   Ang <= AngularTolerance || 3.14159265358979323846 - Ang <= AngularTolerance;
}    

inline Standard_Real gp_Dir2d::Crossed (const gp_Dir2d& Right) const
{ return coord.Crossed (Right.coord); }

inline Standard_Real gp_Dir2d::Dot (const gp_Dir2d& Other) const
{ return coord.Dot (Other.coord); }

inline void gp_Dir2d::Reverse()
{ coord.Reverse(); }

inline gp_Dir2d gp_Dir2d::Reversed() const
{ 
  gp_Dir2d V = *this;
  V.coord.Reverse ();
  return V;
}

inline void gp_Dir2d::Rotate (const Standard_Real Ang)
{
  gp_Trsf2d T;
  T.SetRotation (gp_Pnt2d (0.0, 0.0), Ang);
  coord.Multiply (T.HVectorialPart());
}

inline gp_Dir2d gp_Dir2d::Rotated (const Standard_Real Ang) const
{
  gp_Dir2d V = *this;
  V.Rotate (Ang);
  return V;
}

inline gp_Dir2d gp_Dir2d::Transformed (const gp_Trsf2d& T) const
{
  gp_Dir2d V = *this;
  V.Transform (T);
  return V;
} 












inline gp_Vec2d::gp_Vec2d()
{}

inline gp_Vec2d::gp_Vec2d (const gp_Dir2d& V)
{ coord = V.XY(); }

inline gp_Vec2d::gp_Vec2d (const gp_XY& Coord) : coord(Coord)
{}

inline gp_Vec2d::gp_Vec2d (const Standard_Real Xv,
			   const Standard_Real Yv) : coord (Xv, Yv)
{ }

inline gp_Vec2d::gp_Vec2d (const gp_Pnt2d& P1,
			   const gp_Pnt2d& P2)
{ coord = P2.XY().Subtracted (P1.XY()); }

inline void gp_Vec2d::SetCoord (const Standard_Integer Index,
				const Standard_Real Xi)
{ coord.SetCoord (Index, Xi); }

inline void gp_Vec2d::SetCoord (const Standard_Real Xv,
				const Standard_Real Yv)
{ coord.SetCoord (Xv, Yv); }

inline void gp_Vec2d::SetX (const Standard_Real X)
{ coord.SetX (X); }

inline void gp_Vec2d::SetY (const Standard_Real Y)
{ coord.SetY (Y); }

inline void gp_Vec2d::SetXY (const gp_XY& Coord)
{ coord = Coord; }

inline Standard_Real gp_Vec2d::Coord (const Standard_Integer Index) const
{ return coord.Coord(Index); }

inline void gp_Vec2d::Coord(Standard_Real& Xv,
			    Standard_Real& Yv) const
{ coord.Coord(Xv, Yv); }

inline Standard_Real gp_Vec2d::X() const
{ return coord.X(); }
     
inline Standard_Real gp_Vec2d::Y() const
{ return coord.Y(); }

inline  const gp_XY& gp_Vec2d::XY () const
{ return coord; }

inline Standard_Boolean gp_Vec2d::IsNormal
(const gp_Vec2d& theOther, 
 const Standard_Real theAngularTolerance) const
{
  const Standard_Real anAng = Abs(1.57079632679489661923 - Abs(Angle(theOther)));
  return !(anAng > theAngularTolerance);
}    

inline Standard_Boolean gp_Vec2d::IsOpposite
(const gp_Vec2d& Other,
 const Standard_Real AngularTolerance) const
{
  Standard_Real Ang = Angle(Other);
  if (Ang < 0) Ang = - Ang;
  return 3.14159265358979323846 - Ang <= AngularTolerance;
}    

inline Standard_Boolean gp_Vec2d::IsParallel
(const gp_Vec2d& Other,
 const Standard_Real AngularTolerance) const
{
  Standard_Real Ang = Angle(Other);
  if (Ang < 0) Ang = - Ang;
  return   Ang <= AngularTolerance || 3.14159265358979323846 - Ang <= AngularTolerance;
}    

inline Standard_Real gp_Vec2d::Magnitude() const
{ return coord.Modulus(); }

inline Standard_Real gp_Vec2d::SquareMagnitude() const
{ return coord.SquareModulus(); }

inline void gp_Vec2d::Add (const gp_Vec2d& Other)
{ coord.Add (Other.coord); }

inline gp_Vec2d gp_Vec2d::Added (const gp_Vec2d& Other) const
{
  gp_Vec2d V = *this;
  V.coord.Add (Other.coord);
  return V;
}

inline Standard_Real gp_Vec2d::Crossed (const gp_Vec2d& Right) const
{ return coord.Crossed (Right.coord); }

inline Standard_Real gp_Vec2d::CrossMagnitude (const gp_Vec2d& Right) const
{ return coord.CrossMagnitude (Right.coord); }

inline Standard_Real gp_Vec2d::CrossSquareMagnitude
(const gp_Vec2d& Right) const
{ return coord.CrossSquareMagnitude (Right.coord); }

inline void gp_Vec2d::Divide (const Standard_Real Scalar)
{ coord.Divide (Scalar); }

inline gp_Vec2d gp_Vec2d::Divided (const Standard_Real Scalar) const
{
  gp_Vec2d V = *this;
  V.coord.Divide(Scalar);
  return V;
}

inline Standard_Real gp_Vec2d::Dot (const gp_Vec2d& Other) const
{ return coord.Dot (Other.coord); }

inline void gp_Vec2d::Multiply (const Standard_Real Scalar)
{ coord.Multiply (Scalar); }

inline gp_Vec2d gp_Vec2d::Multiplied (const Standard_Real Scalar) const
{
  gp_Vec2d V = *this;
  V.coord.Multiply(Scalar);
  return V;
}

inline void gp_Vec2d::Normalize()
{ 
  Standard_Real D = coord.Modulus();
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.Divide (D);
}

inline gp_Vec2d gp_Vec2d::Normalized() const
{ 
  Standard_Real D = coord.Modulus();
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  gp_Vec2d V = *this;
  V.coord.Divide (D);
  return V; 
}

inline void gp_Vec2d::Reverse()
{ coord.Reverse(); }

inline gp_Vec2d gp_Vec2d::Reversed() const
{
  gp_Vec2d V = *this;
  V.coord.Reverse();
  return V;
}

inline void gp_Vec2d::Subtract (const gp_Vec2d& Right)
{ coord.Subtract (Right.coord); }

inline gp_Vec2d gp_Vec2d::Subtracted (const gp_Vec2d& Right) const
{
  gp_Vec2d V = *this;
  V.coord.Subtract (Right.coord);
  return V;
}

inline void gp_Vec2d::SetLinearForm (const Standard_Real L, 
				     const gp_Vec2d& Left,
				     const Standard_Real R,
				     const gp_Vec2d& Right)
{ coord.SetLinearForm (L, Left.coord, R, Right.coord); }

inline void gp_Vec2d::SetLinearForm (const Standard_Real L, 
				     const gp_Vec2d& Left,
				     const gp_Vec2d& Right)
{ coord.SetLinearForm (L, Left.coord, Right.coord); }

inline void gp_Vec2d::SetLinearForm (const gp_Vec2d& Left,
				     const gp_Vec2d& Right)
{ coord.SetLinearForm (Left.coord,  Right.coord); }

inline void gp_Vec2d::SetLinearForm (const Standard_Real A1, 
				     const gp_Vec2d& V1,
				     const Standard_Real A2, 
				     const gp_Vec2d& V2, 
				     const gp_Vec2d& V3)
{ coord.SetLinearForm (A1, V1.coord, A2, V2.coord, V3.coord); }

inline void gp_Vec2d::Rotate (const Standard_Real Ang)
{
  gp_Trsf2d T;
  T.SetRotation  (gp_Pnt2d (0.0, 0.0), Ang);
  coord.Multiply (T.VectorialPart ());
}

inline gp_Vec2d gp_Vec2d::Rotated (const Standard_Real Ang) const
{
  gp_Vec2d V = *this;
  V.Rotate (Ang);
  return V;
}

inline void gp_Vec2d::Scale (const Standard_Real S)
{ coord.Multiply (S); }

inline gp_Vec2d gp_Vec2d::Scaled (const Standard_Real S) const
{
  gp_Vec2d V = *this;
  V.coord.Multiply (S);
  return V;
}

inline gp_Vec2d gp_Vec2d::Transformed (const gp_Trsf2d& T) const
{
  gp_Vec2d V = *this;
  V.Transform(T);
  return V;
} 

inline gp_Vec2d operator* (const Standard_Real Scalar,
			   const gp_Vec2d& V)
{ return V.Multiplied(Scalar); }

inline gp_Vec2d gp_Vec2d::GetNormal() const
{
  return gp_Vec2d(this->Y(), (-1)*this->X());
}












inline gp_Pnt2d::gp_Pnt2d (const gp_XY& Coordinates) : coord (Coordinates)
{ }

inline gp_Pnt2d::gp_Pnt2d (const Standard_Real Xp,
			   const Standard_Real Yp) : coord (Xp, Yp)
{ }

inline gp_Pnt2d::gp_Pnt2d() { }

inline Standard_Real gp_Pnt2d::Coord(const Standard_Integer Index) const { return coord.Coord(Index); }

inline void gp_Pnt2d::SetX  (const Standard_Real X)
{   coord.SetX (X); }

inline void gp_Pnt2d::SetY  (const Standard_Real Y)
{   coord.SetY (Y); }

inline void gp_Pnt2d::SetXY (const gp_XY& Coordinates)
{   coord = Coordinates; }

inline void gp_Pnt2d::SetCoord (const Standard_Real Xp,
				const Standard_Real Yp)
{  coord.SetCoord (Xp, Yp);}

inline void gp_Pnt2d::SetCoord (const Standard_Integer Index,
				const Standard_Real Xi)
{ coord.SetCoord (Index, Xi); }

inline void gp_Pnt2d::Coord (Standard_Real& Xp,
			     Standard_Real& Yp) const
{ coord.Coord (Xp, Yp); }

inline Standard_Real gp_Pnt2d::X() const
{ return coord.X(); }

inline Standard_Real gp_Pnt2d::Y() const
{ return coord.Y(); }

inline const gp_XY& gp_Pnt2d::XY () const
{ return coord; }

inline const gp_XY& gp_Pnt2d::Coord () const
{ return coord; }

inline  gp_XY& gp_Pnt2d::ChangeCoord ()
{ return coord; }

inline Standard_Boolean gp_Pnt2d::IsEqual
(const gp_Pnt2d& Other,
 const Standard_Real LinearTolerance) const
{ return Distance (Other) <= LinearTolerance; }

inline Standard_Real gp_Pnt2d::Distance (const gp_Pnt2d& Other) const
{
  const gp_XY& XY = Other.coord;
  Standard_Real X = coord.X() - XY.X();
  Standard_Real Y = coord.Y() - XY.Y();
  return sqrt (X * X + Y * Y);
}

inline Standard_Real gp_Pnt2d::SquareDistance (const gp_Pnt2d& Other) const
{
  const gp_XY& XY = Other.coord;
  Standard_Real X = coord.X() - XY.X();
  Standard_Real Y = coord.Y() - XY.Y();
  return (X * X + Y * Y);
}

inline void gp_Pnt2d::Rotate (const gp_Pnt2d& P,
			      const Standard_Real Ang)
{       
  gp_Trsf2d T;
  T.SetRotation (P, Ang);
  T.Transforms  (coord);
}

inline gp_Pnt2d gp_Pnt2d::Rotated (const gp_Pnt2d& P,
				   const Standard_Real Ang) const
{
  gp_Pnt2d Pres = *this;
  Pres.Rotate (P, Ang);
  return Pres;
}

inline void gp_Pnt2d::Scale (const gp_Pnt2d& P,
			     const Standard_Real S)
{
  gp_XY XY = P.coord;
  XY.Multiply (1.0 - S);
  coord.Multiply (S);
  coord.Add      (XY);
}

inline gp_Pnt2d gp_Pnt2d::Scaled (const gp_Pnt2d& P,
				  const Standard_Real S)  const
{
  gp_Pnt2d Pres = *this;
  Pres.Scale (P, S);
  return Pres;
}

inline gp_Pnt2d gp_Pnt2d::Transformed (const gp_Trsf2d& T) const
{
  gp_Pnt2d Pres = *this;
  Pres.Transform (T);
  return Pres;
}

inline void gp_Pnt2d::Translate (const gp_Vec2d& V)
{ coord.Add (V.XY()); }

inline gp_Pnt2d gp_Pnt2d::Translated (const gp_Vec2d& V) const
{
  gp_Pnt2d P = *this;
  P.coord.Add (V.XY ());
  return P;
}

inline void gp_Pnt2d::Translate (const gp_Pnt2d& P1,
				 const gp_Pnt2d& P2)
{
  coord.Add      (P2.coord);
  coord.Subtract (P1.coord);
}               

inline gp_Pnt2d gp_Pnt2d::Translated (const gp_Pnt2d& P1,
				      const gp_Pnt2d& P2) const
{
  gp_Pnt2d P = *this;
  P.Translate (P1, P2);
  return P;
}               










inline gp_Trsf2d::gp_Trsf2d () {
  shape = gp_Identity;
  scale = 1.0;
  matrix.SetIdentity ();
  loc.SetCoord (0.0, 0.0);
}

inline gp_Trsf2d::gp_Trsf2d (const gp_Trsf& T) :
scale(T.ScaleFactor()),
shape(T.Form()),
loc(T.TranslationPart().X(),T.TranslationPart().Y())
{
  const gp_Mat& M = T.HVectorialPart();
  matrix(1,1) = M(1,1);
  matrix(1,2) = M(1,2);
  matrix(2,1) = M(2,1);
  matrix(2,2) = M(2,2);
}

inline void gp_Trsf2d::SetMirror(const gp_Pnt2d& P)
{   
  shape = gp_PntMirror;
  scale = -1.0;
  matrix.SetIdentity ();
  loc = P.XY();
  loc.Multiply (2.0);
}

inline void gp_Trsf2d::SetRotation (const gp_Pnt2d& P,
				    const Standard_Real Ang)
{
  shape = gp_Rotation;
  scale = 1.0;
  loc = P.XY ();
  loc.Reverse ();
  matrix.SetRotation (Ang);
  loc.Multiply (matrix);
  loc.Add (P.XY());
}

inline void gp_Trsf2d::SetScale (const gp_Pnt2d& P,
				 const Standard_Real S)
{
  shape = gp_Scale;
  scale = S;
  matrix.SetIdentity ();
  loc = P.XY ();
  loc.Multiply (1.0 - S);
}

inline void gp_Trsf2d::SetTranslation(const gp_Vec2d& V)
{
  shape = gp_Translation;
  scale = 1.0;
  matrix.SetIdentity ();
  loc = V.XY ();
}

inline void gp_Trsf2d::SetTranslation (const gp_Pnt2d& P1,
				       const gp_Pnt2d& P2)
{
  shape = gp_Translation;
  scale = 1.0;
  matrix.SetIdentity ();
  loc = (P2.XY()).Subtracted (P1.XY());
}

inline Standard_Boolean gp_Trsf2d::IsNegative() const
{ return (matrix.Determinant() < 0.0); }

inline const gp_XY& gp_Trsf2d::TranslationPart () const
{ return loc; }

inline const gp_Mat2d& gp_Trsf2d::HVectorialPart () const
{ return matrix; }

inline Standard_Real gp_Trsf2d::Value (const Standard_Integer Row,
				       const Standard_Integer Col) const
{
  if (Row < 1 || Row > 2 || Col < 1 || Col > 3) Standard_OutOfRange::Raise(" ");;
  if (Col < 3) return scale * matrix.Value (Row, Col);
  else         return loc.Coord (Row);
}

inline gp_TrsfForm gp_Trsf2d::Form() const
{ return shape; }

inline Standard_Real gp_Trsf2d::ScaleFactor() const
{ return scale; }

inline gp_Trsf2d gp_Trsf2d::Inverted() const
{ 
  gp_Trsf2d T = *this;
  T.Invert();
  return T;
}

inline gp_Trsf2d gp_Trsf2d::Multiplied (const gp_Trsf2d& T) const {
  gp_Trsf2d Tresult(*this);
  Tresult.Multiply(T);
  return Tresult;
}

inline gp_Trsf2d gp_Trsf2d::Powered (const Standard_Integer N)
{
  gp_Trsf2d T = *this;
  T.Power (N);
  return T;
}

inline void gp_Trsf2d::Transforms (Standard_Real& X,
				   Standard_Real& Y) const
{
  gp_XY Doublet (X, Y);
  Doublet.Multiply (matrix);
  if (scale != 1.0) Doublet.Multiply (scale);
  Doublet.Add(loc);
  Doublet.Coord (X, Y);
}

inline void gp_Trsf2d::Transforms (gp_XY& Coord) const
{
  Coord.Multiply (matrix);
  if (scale != 1.0) Coord.Multiply (scale);
  Coord.Add(loc);
}



































class Standard_ConstructionError;
class Standard_DomainError;
class Standard_OutOfRange;
class gp_VectorWithNullMagnitude;
class gp_Dir;
class gp_XYZ;
class gp_Pnt;
class gp_Ax1;
class gp_Ax2;
class gp_Trsf;




class gp_Vec 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Vec();
  
  
    gp_Vec(const gp_Dir& V);
  
  
    gp_Vec(const gp_XYZ& Coord);
  
  
    gp_Vec(const Standard_Real Xv, const Standard_Real Yv, const Standard_Real Zv);
  

  
  
    gp_Vec(const gp_Pnt& P1, const gp_Pnt& P2);
  
  
  
  
  
  
    void SetCoord (const Standard_Integer Index, const Standard_Real Xi);
  
  
  
    void SetCoord (const Standard_Real Xv, const Standard_Real Yv, const Standard_Real Zv);
  
  
    void SetX (const Standard_Real X);
  
  
    void SetY (const Standard_Real Y);
  
  
    void SetZ (const Standard_Real Z);
  
  
    void SetXYZ (const gp_XYZ& Coord);
  

  
  
  
  
  
    Standard_Real Coord (const Standard_Integer Index) const;
  
  
    void Coord (Standard_Real& Xv, Standard_Real& Yv, Standard_Real& Zv) const;
  
  
    Standard_Real X() const;
  
  
    Standard_Real Y() const;
  
  
    Standard_Real Z() const;
  
  
  
    const gp_XYZ& XYZ() const;
  

  
  
  
  __declspec( dllexport ) Standard_Boolean IsEqual (const gp_Vec& Other, const Standard_Real LinearTolerance, const Standard_Real AngularTolerance) const;
  

  
  
  
    Standard_Boolean IsNormal (const gp_Vec& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
    Standard_Boolean IsOpposite (const gp_Vec& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
  
  
  
    Standard_Boolean IsParallel (const gp_Vec& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
  
  
    Standard_Real Angle (const gp_Vec& Other) const;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    Standard_Real AngleWithRef (const gp_Vec& Other, const gp_Vec& VRef) const;
  
  
    Standard_Real Magnitude() const;
  
  
    Standard_Real SquareMagnitude() const;
  
  
    void Add (const gp_Vec& Other);
  void operator += (const gp_Vec& Other)
{
  Add(Other);
}
  
  
    gp_Vec Added (const gp_Vec& Other) const;
  gp_Vec operator + (const gp_Vec& Other) const
{
  return Added(Other);
}
  
  
    void Subtract (const gp_Vec& Right);
  void operator -= (const gp_Vec& Right)
{
  Subtract(Right);
}
  
  
    gp_Vec Subtracted (const gp_Vec& Right) const;
  gp_Vec operator - (const gp_Vec& Right) const
{
  return Subtracted(Right);
}
  
  
    void Multiply (const Standard_Real Scalar);
  void operator *= (const Standard_Real Scalar)
{
  Multiply(Scalar);
}
  
  
    gp_Vec Multiplied (const Standard_Real Scalar) const;
  gp_Vec operator * (const Standard_Real Scalar) const
{
  return Multiplied(Scalar);
}
  
  
    void Divide (const Standard_Real Scalar);
  void operator /= (const Standard_Real Scalar)
{
  Divide(Scalar);
}
  
  
    gp_Vec Divided (const Standard_Real Scalar) const;
  gp_Vec operator / (const Standard_Real Scalar) const
{
  return Divided(Scalar);
}
  
  
    void Cross (const gp_Vec& Right);
  void operator ^= (const gp_Vec& Right)
{
  Cross(Right);
}
  
  
    gp_Vec Crossed (const gp_Vec& Right) const;
  gp_Vec operator ^ (const gp_Vec& Right) const
{
  return Crossed(Right);
}
  

  
  
  
    Standard_Real CrossMagnitude (const gp_Vec& Right) const;
  

  
  
  
    Standard_Real CrossSquareMagnitude (const gp_Vec& Right) const;
  
  
  
    void CrossCross (const gp_Vec& V1, const gp_Vec& V2);
  
  
  
    gp_Vec CrossCrossed (const gp_Vec& V1, const gp_Vec& V2) const;
  
  
    Standard_Real Dot (const gp_Vec& Other) const;
  Standard_Real operator * (const gp_Vec& Other) const
{
  return Dot(Other);
}
  
  
    Standard_Real DotCross (const gp_Vec& V1, const gp_Vec& V2) const;
  
  
  
  
    void Normalize();
  
  
  
  
    gp_Vec Normalized() const;
  
  
    void Reverse();
  
  
    gp_Vec Reversed() const;
  gp_Vec operator -() const
{
  return Reversed();
}
  

  
  
    void SetLinearForm (const Standard_Real A1, const gp_Vec& V1, const Standard_Real A2, const gp_Vec& V2, const Standard_Real A3, const gp_Vec& V3, const gp_Vec& V4);
  

  
  
    void SetLinearForm (const Standard_Real A1, const gp_Vec& V1, const Standard_Real A2, const gp_Vec& V2, const Standard_Real A3, const gp_Vec& V3);
  

  
  
    void SetLinearForm (const Standard_Real A1, const gp_Vec& V1, const Standard_Real A2, const gp_Vec& V2, const gp_Vec& V3);
  

  
  
    void SetLinearForm (const Standard_Real A1, const gp_Vec& V1, const Standard_Real A2, const gp_Vec& V2);
  

  
    void SetLinearForm (const Standard_Real A1, const gp_Vec& V1, const gp_Vec& V2);
  

  
    void SetLinearForm (const gp_Vec& V1, const gp_Vec& V2);
  
  __declspec( dllexport ) void Mirror (const gp_Vec& V);
  

  
  
  
  __declspec( dllexport ) gp_Vec Mirrored (const gp_Vec& V) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax1& A1);
  

  
  
  
  __declspec( dllexport ) gp_Vec Mirrored (const gp_Ax1& A1) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax2& A2);
  

  
  
  
  __declspec( dllexport ) gp_Vec Mirrored (const gp_Ax2& A2) const;
  
    void Rotate (const gp_Ax1& A1, const Standard_Real Ang);
  

  
  
    gp_Vec Rotated (const gp_Ax1& A1, const Standard_Real Ang) const;
  
    void Scale (const Standard_Real S);
  
  
    gp_Vec Scaled (const Standard_Real S) const;
  
  
  __declspec( dllexport ) void Transform (const gp_Trsf& T);
  
  
    gp_Vec Transformed (const gp_Trsf& T) const;




protected:





private:



  gp_XYZ coord;


};















































class Standard_ConstructionError;
class Standard_DomainError;
class Standard_OutOfRange;
class gp_Vec;
class gp_XYZ;
class gp_Ax1;
class gp_Ax2;
class gp_Trsf;










class gp_Dir 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Dir();
  
  
    gp_Dir(const gp_Vec& V);
  
  
    gp_Dir(const gp_XYZ& Coord);
  
  
  
  
  
  
  
    gp_Dir(const Standard_Real Xv, const Standard_Real Yv, const Standard_Real Zv);
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    void SetCoord (const Standard_Integer Index, const Standard_Real Xi);
  
  
  
  
    void SetCoord (const Standard_Real Xv, const Standard_Real Yv, const Standard_Real Zv);
  
  
    void SetX (const Standard_Real X);
  
  
    void SetY (const Standard_Real Y);
  
  
    void SetZ (const Standard_Real Z);
  
  
    void SetXYZ (const gp_XYZ& Coord);
  

  
  
  
  
  
  
    Standard_Real Coord (const Standard_Integer Index) const;
  
  
    void Coord (Standard_Real& Xv, Standard_Real& Yv, Standard_Real& Zv) const;
  
  
    Standard_Real X() const;
  
  
    Standard_Real Y() const;
  
  
    Standard_Real Z() const;
  
  
    const gp_XYZ& XYZ() const;
  

  
  
    Standard_Boolean IsEqual (const gp_Dir& Other, const Standard_Real AngularTolerance) const;
  

  
    Standard_Boolean IsNormal (const gp_Dir& Other, const Standard_Real AngularTolerance) const;
  

  
    Standard_Boolean IsOpposite (const gp_Dir& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
    Standard_Boolean IsParallel (const gp_Dir& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
  __declspec( dllexport ) Standard_Real Angle (const gp_Dir& Other) const;
  

  
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Real AngleWithRef (const gp_Dir& Other, const gp_Dir& VRef) const;
  
  
  
  
  
    void Cross (const gp_Dir& Right);
  void operator ^= (const gp_Dir& Right)
{
  Cross(Right);
}
  
  
  
  
  
  
    gp_Dir Crossed (const gp_Dir& Right) const;
  gp_Dir operator ^ (const gp_Dir& Right) const
{
  return Crossed(Right);
}
  
    void CrossCross (const gp_Dir& V1, const gp_Dir& V2);
  
  
  
  
  
  
  
  
  
    gp_Dir CrossCrossed (const gp_Dir& V1, const gp_Dir& V2) const;
  
  
    Standard_Real Dot (const gp_Dir& Other) const;
  Standard_Real operator * (const gp_Dir& Other) const
{
  return Dot(Other);
}
  

  
  
  
  
  
    Standard_Real DotCross (const gp_Dir& V1, const gp_Dir& V2) const;
  
    void Reverse();
  
  
  
  
  
  
    gp_Dir Reversed() const;
  gp_Dir operator -() const
{
  return Reversed();
}
  
  __declspec( dllexport ) void Mirror (const gp_Dir& V);
  

  
  
  
  __declspec( dllexport ) gp_Dir Mirrored (const gp_Dir& V) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax1& A1);
  

  
  
  
  __declspec( dllexport ) gp_Dir Mirrored (const gp_Ax1& A1) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax2& A2);
  

  
  
  
  __declspec( dllexport ) gp_Dir Mirrored (const gp_Ax2& A2) const;
  
    void Rotate (const gp_Ax1& A1, const Standard_Real Ang);
  

  
  
    gp_Dir Rotated (const gp_Ax1& A1, const Standard_Real Ang) const;
  
  __declspec( dllexport ) void Transform (const gp_Trsf& T);
  

  
  
  
  
    gp_Dir Transformed (const gp_Trsf& T) const;




protected:





private:



  gp_XYZ coord;


};






















































































































































































































































































































































































































inline gp_Dir::gp_Dir () : coord(1.,0.,0.)
{ 
}

inline gp_Dir::gp_Dir (const gp_Vec& V)
{
  const gp_XYZ& XYZ = V.XYZ();
  Standard_Real X = XYZ.X();
  Standard_Real Y = XYZ.Y();
  Standard_Real Z = XYZ.Z();
  Standard_Real D = sqrt(X * X + Y * Y + Z * Z);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(X / D);
  coord.SetY(Y / D);
  coord.SetZ(Z / D);
}

inline gp_Dir::gp_Dir (const gp_XYZ& XYZ)
{
  Standard_Real X = XYZ.X();
  Standard_Real Y = XYZ.Y();
  Standard_Real Z = XYZ.Z();
  Standard_Real D = sqrt(X * X + Y * Y + Z * Z);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(X / D);
  coord.SetY(Y / D);
  coord.SetZ(Z / D);
}

inline gp_Dir::gp_Dir (const Standard_Real Xv,
		       const Standard_Real Yv,
		       const Standard_Real Zv)
{
  Standard_Real D = sqrt (Xv * Xv + Yv * Yv + Zv * Zv);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(Xv / D);
  coord.SetY(Yv / D);
  coord.SetZ(Zv / D);
}

inline void gp_Dir::SetCoord (const Standard_Integer Index,
			      const Standard_Real Xi)
{
  Standard_Real X = coord.X();
  Standard_Real Y = coord.Y();
  Standard_Real Z = coord.Z();
  if (Index < 1 || Index > 3) Standard_OutOfRange::Raise(" ");;
  if      (Index == 1)  X = Xi;
  else if (Index == 2)  Y = Xi;
  else                  Z = Xi;
  Standard_Real D = sqrt (X * X + Y * Y + Z * Z);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(X / D);
  coord.SetY(Y / D);
  coord.SetZ(Z / D);
}

inline void gp_Dir::SetCoord (const Standard_Real Xv,
			      const Standard_Real Yv,
			      const Standard_Real Zv) {
  Standard_Real D = sqrt(Xv * Xv + Yv * Yv + Zv * Zv);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(Xv / D);
  coord.SetY(Yv / D);
  coord.SetZ(Zv / D);
}

inline void gp_Dir::SetX (const Standard_Real X)
{
  Standard_Real Y = coord.Y();
  Standard_Real Z = coord.Z();
  Standard_Real D = sqrt (X * X + Y * Y + Z * Z);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(X / D);
  coord.SetY(Y / D);
  coord.SetZ(Z / D);
}

inline void gp_Dir::SetY (const Standard_Real Y)
{
  Standard_Real Z = coord.Z();
  Standard_Real X = coord.X();
  Standard_Real D = sqrt (X * X + Y * Y + Z * Z);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(X / D);
  coord.SetY(Y / D);
  coord.SetZ(Z / D);
}

inline void gp_Dir::SetZ (const Standard_Real Z)
{
  Standard_Real X = coord.X();
  Standard_Real Y = coord.Y();
  Standard_Real D = sqrt (X * X + Y * Y + Z * Z);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(X / D);
  coord.SetY(Y / D);
  coord.SetZ(Z / D);
}

inline void gp_Dir::SetXYZ (const gp_XYZ& XYZ)
{
  Standard_Real X = XYZ.X();
  Standard_Real Y = XYZ.Y();
  Standard_Real Z = XYZ.Z();
  Standard_Real D = sqrt(X * X + Y * Y + Z * Z);
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.SetX(X / D);
  coord.SetY(Y / D);
  coord.SetZ(Z / D);
}

inline Standard_Real gp_Dir::Coord (const Standard_Integer Index) const
{ return coord.Coord (Index);}

inline  void gp_Dir::Coord (Standard_Real& Xv,
			    Standard_Real& Yv,
			    Standard_Real& Zv) const
{ coord.Coord (Xv, Yv, Zv); }

inline  Standard_Real gp_Dir::X() const
{ return coord.X() ; }

inline  Standard_Real gp_Dir::Y() const
{ return coord.Y() ; }

inline  Standard_Real gp_Dir::Z() const
{ return coord.Z() ; }

inline  const gp_XYZ& gp_Dir::XYZ () const
{ return coord; }

inline Standard_Boolean gp_Dir::IsEqual
(const gp_Dir& Other, 
 const Standard_Real AngularTolerance) const
{ return   Angle (Other) <= AngularTolerance; }    

inline Standard_Boolean gp_Dir::IsNormal
(const gp_Dir& Other,
 const Standard_Real AngularTolerance) const
{
  Standard_Real Ang = 3.14159265358979323846 / 2.0 - Angle (Other);
  if (Ang < 0) Ang = - Ang;
  return   Ang <= AngularTolerance;
}    

inline Standard_Boolean gp_Dir::IsOpposite
(const gp_Dir& Other,
 const Standard_Real AngularTolerance) const
{ return 3.14159265358979323846 - Angle (Other) <= AngularTolerance; }    

inline Standard_Boolean gp_Dir::IsParallel
(const gp_Dir& Other, 
 const Standard_Real AngularTolerance) const
{
  Standard_Real Ang = Angle (Other);
  return Ang <= AngularTolerance || 3.14159265358979323846 - Ang <= AngularTolerance;
}    

inline void gp_Dir::Cross (const gp_Dir& Right)
{ 
  coord.Cross (Right.coord); 
  Standard_Real D = coord.Modulus ();
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.Divide (D);
}

inline gp_Dir gp_Dir::Crossed (const gp_Dir& Right) const
{
  gp_Dir V = *this;
  V.coord.Cross (Right.coord);
  Standard_Real D = V.coord.Modulus();
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  V.coord.Divide (D);
  return V;
}

inline void gp_Dir::CrossCross (const gp_Dir& V1,
				const gp_Dir& V2)
{ 
  coord.CrossCross (V1.coord, V2.coord);
  Standard_Real D = coord.Modulus();
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.Divide(D);
}

inline gp_Dir gp_Dir::CrossCrossed (const gp_Dir& V1,
				    const gp_Dir& V2) const
{
  gp_Dir V = *this;
  (V.coord).CrossCross (V1.coord, V2.coord);
  Standard_Real D = V.coord.Modulus();
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  V.coord.Divide(D);
  return V;
}

inline Standard_Real gp_Dir::Dot (const gp_Dir& Other) const
{ return coord.Dot (Other.coord); }

inline Standard_Real gp_Dir::DotCross (const gp_Dir& V1,
				       const gp_Dir& V2)  const
{ return coord.Dot (V1.coord.Crossed (V2.coord)); } 

inline void gp_Dir::Reverse ()
{ coord.Reverse(); }

inline gp_Dir gp_Dir::Reversed () const { 
  gp_Dir V = *this;
  V.coord.Reverse ();
  return V;
}

inline void gp_Dir::Rotate (const gp_Ax1& A1, const Standard_Real Ang)
{
  gp_Trsf T;
  T.SetRotation (A1, Ang);
  coord.Multiply (T.HVectorialPart ());
}

inline gp_Dir gp_Dir::Rotated (const gp_Ax1& A1,
			       const Standard_Real Ang) const
{
  gp_Dir V = *this;
  V.Rotate (A1, Ang);
  return V;
}

inline gp_Dir gp_Dir::Transformed (const gp_Trsf& T) const
{
  gp_Dir V = *this;
  V.Transform (T);
  return V;
} 














































































































































































































































class gp_VectorWithNullMagnitude;
class gp_VectorWithNullMagnitude; class Handle_gp_VectorWithNullMagnitude : public opencascade::handle<gp_VectorWithNullMagnitude> { public: Handle_gp_VectorWithNullMagnitude() {} Handle_gp_VectorWithNullMagnitude(opencascade::handle<gp_VectorWithNullMagnitude>&& theHandle) : opencascade::handle<gp_VectorWithNullMagnitude>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <gp_VectorWithNullMagnitude,T2>::value>::type> inline Handle_gp_VectorWithNullMagnitude(const opencascade::handle<T2>& theOther) : opencascade::handle<gp_VectorWithNullMagnitude>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <gp_VectorWithNullMagnitude,T2>::value>::type> inline Handle_gp_VectorWithNullMagnitude(const T2* theOther) : opencascade::handle<gp_VectorWithNullMagnitude>(theOther) {} template<typename T> inline Handle_gp_VectorWithNullMagnitude& operator=(T theOther) { opencascade::handle<gp_VectorWithNullMagnitude>::operator=(theOther); return *this; } };


  





class gp_VectorWithNullMagnitude : public Standard_DomainError { void Throw () const override { throw *this; } public: gp_VectorWithNullMagnitude() : Standard_DomainError() {} gp_VectorWithNullMagnitude(const Standard_CString theMessage) : Standard_DomainError(theMessage) {} static void Raise(const Standard_CString theMessage = "") { opencascade::handle<gp_VectorWithNullMagnitude> _E = new gp_VectorWithNullMagnitude; _E->Reraise(theMessage); } static void Raise(Standard_SStream& theMessage) { opencascade::handle<gp_VectorWithNullMagnitude> _E = new gp_VectorWithNullMagnitude; _E->Reraise (theMessage); } static opencascade::handle<gp_VectorWithNullMagnitude> NewInstance(const Standard_CString theMessage = "") { return new gp_VectorWithNullMagnitude(theMessage); } public: typedef Standard_DomainError base_type; static const char* get_type_name () { return "gp_VectorWithNullMagnitude"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<gp_VectorWithNullMagnitude>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return gp_VectorWithNullMagnitude::get_type_descriptor(); } };





inline gp_Vec::gp_Vec() { }

inline gp_Vec::gp_Vec (const gp_Dir& V) { coord = V.XYZ(); }

inline gp_Vec::gp_Vec (const gp_XYZ& Coord) : coord(Coord) { }

inline gp_Vec::gp_Vec (const Standard_Real Xv,
		       const Standard_Real Yv,
		       const Standard_Real Zv)
               : coord (Xv, Yv, Zv)   { }

inline gp_Vec::gp_Vec (const gp_Pnt& P1,
		       const gp_Pnt& P2)
{ coord = P2.XYZ().Subtracted(P1.XYZ()); }

inline void gp_Vec::SetCoord (const Standard_Integer Index,
			      const Standard_Real Xi)
{ coord.SetCoord (Index, Xi); }

inline void gp_Vec::SetCoord (const Standard_Real Xv,
			      const Standard_Real Yv,
			      const Standard_Real Zv)
{
  coord.SetX(Xv);
  coord.SetY(Yv);
  coord.SetZ(Zv);
}

inline void gp_Vec::SetX (const Standard_Real X)
{ coord.SetX (X); }

inline void gp_Vec::SetY (const Standard_Real Y)
{ coord.SetY (Y); }

inline void gp_Vec::SetZ (const Standard_Real Z)
{ coord.SetZ (Z); }

inline void gp_Vec::SetXYZ (const gp_XYZ& Coord)
{ coord = Coord; }

inline Standard_Real gp_Vec::Coord (const Standard_Integer Index) const
{ return coord.Coord (Index); }

inline void gp_Vec::Coord(Standard_Real& Xv, 
			  Standard_Real& Yv,
			  Standard_Real& Zv) const
{
  Xv = coord.X();
  Yv = coord.Y();
  Zv = coord.Z();
}

inline Standard_Real gp_Vec::X() const
{ return coord.X(); }
     
inline Standard_Real gp_Vec::Y() const
{ return coord.Y(); }

inline Standard_Real gp_Vec::Z() const
{ return coord.Z(); }
     
inline const gp_XYZ& gp_Vec::XYZ () const
{ return coord; }

inline Standard_Boolean gp_Vec::IsNormal
(const gp_Vec& Other,
 const Standard_Real AngularTolerance) const
{
  Standard_Real Ang = 3.14159265358979323846 / 2.0 - Angle(Other);
  if (Ang < 0) Ang = - Ang;
  return  Ang <= AngularTolerance;
}    

inline Standard_Boolean gp_Vec::IsOpposite
(const gp_Vec& Other,
 const Standard_Real AngularTolerance) const
{
  Standard_Real Ang = 3.14159265358979323846 - Angle(Other);
  return Ang <= AngularTolerance;
}    

inline Standard_Boolean gp_Vec::IsParallel
(const gp_Vec& Other,
 const Standard_Real AngularTolerance) const
{
  Standard_Real Ang = Angle (Other);
  return   Ang <= AngularTolerance || 3.14159265358979323846 - Ang <= AngularTolerance;
}    

inline Standard_Real gp_Vec::Angle (const gp_Vec& Other) const
{
  
  
  
  
  
  
  
  
  if (coord.Modulus() <= gp::Resolution() || Other.coord.Modulus() <= gp::Resolution()) gp_VectorWithNullMagnitude::Raise(" ");;
  return (gp_Dir(coord)).Angle(Other);
}

inline Standard_Real gp_Vec::AngleWithRef (const gp_Vec& Other,
					   const gp_Vec& Vref) const
{
  if (coord.Modulus() <= gp::Resolution() || Vref.coord.Modulus () <= gp::Resolution() || Other.coord.Modulus() <= gp::Resolution()) gp_VectorWithNullMagnitude::Raise(" ");;
  return (gp_Dir(coord)).AngleWithRef(Other,Vref);
} 

inline Standard_Real gp_Vec::Magnitude() const
{ return coord.Modulus(); }

inline Standard_Real gp_Vec::SquareMagnitude() const
{ return coord.SquareModulus(); }

inline void gp_Vec::Add (const gp_Vec& Other)
{ coord.Add (Other.coord); }

inline gp_Vec gp_Vec::Added (const gp_Vec& Other) const
{
  gp_Vec V = *this;
  V.coord.Add (Other.coord);
  return V;
}

inline void gp_Vec::Subtract (const gp_Vec& Right)
{ coord.Subtract (Right.coord); }

inline gp_Vec gp_Vec::Subtracted (const gp_Vec& Right) const
{
  gp_Vec V = *this;
   V.coord.Subtract(Right.coord);
   return V;
}

inline void gp_Vec::Multiply (const Standard_Real Scalar)
{ coord.Multiply(Scalar); }

inline gp_Vec gp_Vec::Multiplied (const Standard_Real Scalar) const
{
  gp_Vec V = *this;
  V.coord.Multiply (Scalar);
  return V;
}

inline void gp_Vec::Divide (const Standard_Real Scalar)
{ coord.Divide (Scalar); }

inline gp_Vec gp_Vec::Divided (const Standard_Real Scalar) const
{
  gp_Vec V = *this;
  V.coord.Divide (Scalar);
  return V;
}

inline void gp_Vec::Cross (const gp_Vec& Right)
{ coord.Cross (Right.coord); }

inline gp_Vec gp_Vec::Crossed (const gp_Vec& Right) const
{
  gp_Vec V = *this;
  V.coord.Cross (Right.coord);
  return V;
}

inline Standard_Real gp_Vec::CrossMagnitude
(const gp_Vec& Right) const
{ return coord.CrossMagnitude (Right.coord); }

inline Standard_Real gp_Vec::CrossSquareMagnitude
(const gp_Vec& Right) const
{ return coord.CrossSquareMagnitude (Right.coord); }

inline void gp_Vec::CrossCross (const gp_Vec& V1,
				const gp_Vec& V2)
{ coord.CrossCross(V1.coord, V2.coord); }

inline gp_Vec gp_Vec::CrossCrossed (const gp_Vec& V1,
				    const gp_Vec& V2) const
{
  gp_Vec V = *this;
  V.coord.CrossCross(V1.coord, V2.coord);
  return V;
}

inline Standard_Real gp_Vec::Dot (const gp_Vec& Other) const
{ return coord.Dot (Other.coord); }

inline Standard_Real gp_Vec::DotCross (const gp_Vec& V1,
				       const gp_Vec& V2)  const
{ return coord.DotCross (V1.coord, V2.coord); } 

inline void gp_Vec::Normalize()
{ 
  Standard_Real D = coord.Modulus();
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  coord.Divide (D);
}

inline gp_Vec gp_Vec::Normalized() const
{ 
  Standard_Real D = coord.Modulus();
  if (D <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  gp_Vec V = *this;
  V.coord.Divide (D);
  return V; 
}

inline void gp_Vec::Reverse()
{ coord.Reverse(); }

inline gp_Vec gp_Vec::Reversed () const
{
  gp_Vec V = *this;
  V.coord.Reverse();
  return V;
}

inline void gp_Vec::SetLinearForm
(const Standard_Real L,
 const gp_Vec& Left,
 const Standard_Real R,
 const gp_Vec& Right)
{ coord.SetLinearForm (L, Left.coord, R, Right.coord); }

inline void gp_Vec::SetLinearForm
(const Standard_Real L,
 const gp_Vec& Left,
 const gp_Vec& Right)
{ coord.SetLinearForm (L, Left.coord, Right.coord); }

inline void gp_Vec::SetLinearForm
(const gp_Vec& Left,
 const gp_Vec& Right)
{ coord.SetLinearForm (Left.coord,  Right.coord); }

inline void gp_Vec::SetLinearForm
(const Standard_Real A1, const gp_Vec& V1, 
 const Standard_Real A2, const gp_Vec& V2,
 const Standard_Real A3, const gp_Vec& V3)
{ coord.SetLinearForm (A1, V1.coord, A2, V2.coord, A3, V3.coord); }

inline void gp_Vec::SetLinearForm
(const Standard_Real A1, const gp_Vec& V1, 
 const Standard_Real A2, const gp_Vec& V2, 
 const gp_Vec& V3)
{ coord.SetLinearForm (A1, V1.coord, A2, V2.coord, V3.coord); }

inline void gp_Vec::SetLinearForm
(const Standard_Real A1, const gp_Vec& V1,
 const Standard_Real A2, const gp_Vec& V2,
 const Standard_Real A3, const gp_Vec& V3,
 const gp_Vec& V4)
{ coord.SetLinearForm(A1,V1.coord,A2,V2.coord,A3,V3.coord,V4.coord); }

inline void gp_Vec::Rotate (const gp_Ax1& A1,
			    const Standard_Real Ang)
{
  gp_Trsf T;
  T.SetRotation (A1, Ang);
  coord.Multiply (T.VectorialPart());
}

inline gp_Vec gp_Vec::Rotated (const gp_Ax1& A1,
			       const Standard_Real Ang) const
{
  gp_Vec Vres = *this;
  Vres.Rotate (A1, Ang);
  return Vres;                     
}

inline void gp_Vec::Scale (const Standard_Real S)
{ coord.Multiply (S); }

inline gp_Vec gp_Vec::Scaled (const Standard_Real S) const
{
  gp_Vec V = *this;
  V.coord.Multiply(S);
  return V;
}

inline gp_Vec gp_Vec::Transformed (const gp_Trsf& T) const
{
  gp_Vec V = *this;
  V.Transform(T);
  return V;
} 

inline gp_Vec operator* (const Standard_Real Scalar, const gp_Vec& V) {
 return V.Multiplied(Scalar);
}











inline gp_Trsf::gp_Trsf () : 
scale(1.0),
shape(gp_Identity),
matrix(1,0,0, 0,1,0, 0,0,1),
loc(0.0, 0.0, 0.0)
{}

inline void gp_Trsf::SetMirror (const gp_Pnt& P) 
{
  shape = gp_PntMirror;
  scale = -1.0;
  loc = P.XYZ();
  matrix.SetIdentity ();
  loc.Multiply(2.0);
}

inline void gp_Trsf::SetTranslation (const gp_Vec& V) 
{
  shape = gp_Translation;
  scale = 1.;
  matrix.SetIdentity ();
  loc = V.XYZ();
}

inline void gp_Trsf::SetTranslation(const gp_Pnt& P1,
				    const gp_Pnt& P2) 
{
  shape = gp_Translation;
  scale = 1.0;
  matrix.SetIdentity ();
  loc = (P2.XYZ()).Subtracted (P1.XYZ());
}

inline void gp_Trsf::SetForm(const gp_TrsfForm P)
{
  shape = P;
}

inline Standard_Boolean gp_Trsf::IsNegative() const 
{ return (scale < 0.0); }

inline const gp_XYZ& gp_Trsf::TranslationPart () const
{ return loc; }

inline const gp_Mat& gp_Trsf::HVectorialPart () const
{ return matrix; }

inline Standard_Real gp_Trsf::Value (const Standard_Integer Row, 
				     const Standard_Integer Col) const 
{
  if (Row < 1 || Row > 3 || Col < 1 || Col > 4) Standard_OutOfRange::Raise(" ");;
  if (Col < 4) return scale * matrix.Value (Row, Col);
  else         return loc.Coord (Row);
}

inline  gp_TrsfForm gp_Trsf::Form () const
{ return shape; }

inline  Standard_Real gp_Trsf::ScaleFactor () const
{ return scale; }

inline gp_Trsf gp_Trsf::Inverted() const
{ 
  gp_Trsf T = *this;
  T.Invert();
  return T;
}

inline gp_Trsf gp_Trsf::Multiplied (const gp_Trsf& T) const
{
  gp_Trsf Tresult(*this);
  Tresult.Multiply(T);
  return Tresult;
}

inline gp_Trsf gp_Trsf::Powered (const Standard_Integer N) const
{
  gp_Trsf T = *this;
  T.Power (N);
  return T;
}

inline void gp_Trsf::Transforms (Standard_Real& X,
				 Standard_Real& Y,
				 Standard_Real& Z) const 
{
  gp_XYZ Triplet (X, Y, Z);
  Triplet.Multiply (matrix);
  if (scale != 1.0) Triplet.Multiply (scale);
  Triplet.Add(loc);
  X = Triplet.X();
  Y = Triplet.Y();
  Z = Triplet.Z();
}

inline void gp_Trsf::Transforms (gp_XYZ& Coord) const
{
  Coord.Multiply (matrix);
  if (scale != 1.0) Coord.Multiply (scale);
  Coord.Add(loc);
}







inline gp_Pnt::gp_Pnt() { }

inline gp_Pnt::gp_Pnt (const gp_XYZ& Coordinates) : coord (Coordinates)
{ }

inline gp_Pnt::gp_Pnt (const Standard_Real Xp,
		       const Standard_Real Yp,
		       const Standard_Real Zp) : coord(Xp, Yp,Zp)
{ }

inline void gp_Pnt::SetCoord (const Standard_Integer Index,
			      const Standard_Real Xi)
{ coord.SetCoord (Index, Xi); }

inline void gp_Pnt::SetCoord (const Standard_Real Xp, 
			      const Standard_Real Yp, 
			      const Standard_Real Zp) {
  coord.SetCoord (Xp, Yp, Zp);
}

inline void gp_Pnt::SetX (const Standard_Real X)
{ coord.SetX (X); }

inline void gp_Pnt::SetY (const Standard_Real Y)
{ coord.SetY (Y); }

inline void gp_Pnt::SetZ (const Standard_Real Z)
{ coord.SetZ (Z); }

inline void gp_Pnt::SetXYZ (const gp_XYZ& Coordinates) 
{ coord = Coordinates; }

inline Standard_Real gp_Pnt::Coord (const Standard_Integer Index) const
{ return coord.Coord(Index); }

inline void gp_Pnt::Coord (Standard_Real& Xp, 
			   Standard_Real& Yp, 
			   Standard_Real& Zp) const { 
			     coord.Coord (Xp, Yp, Zp);
			   }

inline Standard_Real gp_Pnt::X() const
{ return coord.X(); }

inline Standard_Real gp_Pnt::Y() const
{ return coord.Y(); }

inline Standard_Real gp_Pnt::Z() const
{ return coord.Z(); }

inline const gp_XYZ& gp_Pnt::XYZ () const
{ return coord; }

inline const gp_XYZ& gp_Pnt::Coord () const
{ return coord; }

inline gp_XYZ& gp_Pnt::ChangeCoord ()
{ return coord; }

inline void gp_Pnt::BaryCenter(const Standard_Real A,
			       const gp_Pnt& P,
			       const Standard_Real B)
{
  coord.SetLinearForm(A,coord,B,P.coord);
  coord.Divide(A + B);
}

inline Standard_Boolean gp_Pnt::IsEqual
(const gp_Pnt& Other,
 const Standard_Real LinearTolerance) const
{ return Distance (Other) <= LinearTolerance; }

inline Standard_Real gp_Pnt::Distance (const gp_Pnt& Other) const
{
  Standard_Real d=0,dd;
  const gp_XYZ& XYZ = Other.coord;
  dd = coord.X(); dd -= XYZ.X(); dd *= dd; d += dd;
  dd = coord.Y(); dd -= XYZ.Y(); dd *= dd; d += dd;
  dd = coord.Z(); dd -= XYZ.Z(); dd *= dd; d += dd;
  return(sqrt(d));
}

inline Standard_Real gp_Pnt::SquareDistance (const gp_Pnt& Other) const
{
  Standard_Real d=0,dd;
  const gp_XYZ& XYZ = Other.coord;
  dd = coord.X(); dd -= XYZ.X(); dd *= dd; d += dd;
  dd = coord.Y(); dd -= XYZ.Y(); dd *= dd; d += dd;
  dd = coord.Z(); dd -= XYZ.Z(); dd *= dd; d += dd;
  return(d);
}

inline void gp_Pnt::Rotate (const gp_Ax1& A1,
			    const Standard_Real Ang)
{
  gp_Trsf T;
  T.SetRotation (A1, Ang);
  T.Transforms  (coord);
}

inline gp_Pnt gp_Pnt::Rotated (const gp_Ax1& A1,
			       const Standard_Real Ang) const
{
  gp_Pnt P = *this;
  P.Rotate (A1, Ang);
  return P;
}

inline void gp_Pnt::Scale (const gp_Pnt& P,
			   const Standard_Real S)
{
  gp_XYZ XYZ = P.coord;
  XYZ.Multiply (1.0 - S);
  coord.Multiply (S);
  coord.Add      (XYZ);
}

inline gp_Pnt gp_Pnt::Scaled (const gp_Pnt& P,
			      const Standard_Real S)  const
{
  gp_Pnt Pres = *this;
  Pres.Scale (P, S);
  return Pres;
}

inline gp_Pnt gp_Pnt::Transformed (const gp_Trsf& T) const
{
  gp_Pnt P = *this;
  P.Transform (T);
  return P;
}

inline void gp_Pnt::Translate (const gp_Vec& V)
{ coord.Add (V.XYZ()); }

inline gp_Pnt gp_Pnt::Translated (const gp_Vec& V) const
{
  gp_Pnt P = *this;
  P.coord.Add (V.XYZ());
  return P;
}

inline void gp_Pnt::Translate (const gp_Pnt& P1,
			       const gp_Pnt& P2)
{
  coord.Add      (P2.coord);
  coord.Subtract (P1.coord);
}               

inline gp_Pnt gp_Pnt::Translated (const gp_Pnt& P1,
				  const gp_Pnt& P2) const
{
  gp_Pnt P = *this;
  P.Translate (P1 , P2);
  return P;
}               


























































































































class Standard_DimensionError;
class Standard_DimensionError; class Handle_Standard_DimensionError : public opencascade::handle<Standard_DimensionError> { public: Handle_Standard_DimensionError() {} Handle_Standard_DimensionError(opencascade::handle<Standard_DimensionError>&& theHandle) : opencascade::handle<Standard_DimensionError>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_DimensionError,T2>::value>::type> inline Handle_Standard_DimensionError(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_DimensionError>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_DimensionError,T2>::value>::type> inline Handle_Standard_DimensionError(const T2* theOther) : opencascade::handle<Standard_DimensionError>(theOther) {} template<typename T> inline Handle_Standard_DimensionError& operator=(T theOther) { opencascade::handle<Standard_DimensionError>::operator=(theOther); return *this; } };


  





class Standard_DimensionError : public Standard_DomainError { void Throw () const override { throw *this; } public: Standard_DimensionError() : Standard_DomainError() {} Standard_DimensionError(const Standard_CString theMessage) : Standard_DomainError(theMessage) {} static void Raise(const Standard_CString theMessage = "") { opencascade::handle<Standard_DimensionError> _E = new Standard_DimensionError; _E->Reraise(theMessage); } static void Raise(Standard_SStream& theMessage) { opencascade::handle<Standard_DimensionError> _E = new Standard_DimensionError; _E->Reraise (theMessage); } static opencascade::handle<Standard_DimensionError> NewInstance(const Standard_CString theMessage = "") { return new Standard_DimensionError(theMessage); } public: typedef Standard_DomainError base_type; static const char* get_type_name () { return "Standard_DimensionError"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<Standard_DimensionError>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return Standard_DimensionError::get_type_descriptor(); } };




class Standard_DimensionMismatch;
class Standard_DimensionMismatch; class Handle_Standard_DimensionMismatch : public opencascade::handle<Standard_DimensionMismatch> { public: Handle_Standard_DimensionMismatch() {} Handle_Standard_DimensionMismatch(opencascade::handle<Standard_DimensionMismatch>&& theHandle) : opencascade::handle<Standard_DimensionMismatch>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_DimensionMismatch,T2>::value>::type> inline Handle_Standard_DimensionMismatch(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_DimensionMismatch>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_DimensionMismatch,T2>::value>::type> inline Handle_Standard_DimensionMismatch(const T2* theOther) : opencascade::handle<Standard_DimensionMismatch>(theOther) {} template<typename T> inline Handle_Standard_DimensionMismatch& operator=(T theOther) { opencascade::handle<Standard_DimensionMismatch>::operator=(theOther); return *this; } };


  





class Standard_DimensionMismatch : public Standard_DimensionError { void Throw () const override { throw *this; } public: Standard_DimensionMismatch() : Standard_DimensionError() {} Standard_DimensionMismatch(const Standard_CString theMessage) : Standard_DimensionError(theMessage) {} static void Raise(const Standard_CString theMessage = "") { opencascade::handle<Standard_DimensionMismatch> _E = new Standard_DimensionMismatch; _E->Reraise(theMessage); } static void Raise(Standard_SStream& theMessage) { opencascade::handle<Standard_DimensionMismatch> _E = new Standard_DimensionMismatch; _E->Reraise (theMessage); } static opencascade::handle<Standard_DimensionMismatch> NewInstance(const Standard_CString theMessage = "") { return new Standard_DimensionMismatch(theMessage); } public: typedef Standard_DimensionError base_type; static const char* get_type_name () { return "Standard_DimensionMismatch"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<Standard_DimensionMismatch>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return Standard_DimensionMismatch::get_type_descriptor(); } };



















































class Standard_ProgramError;
class Standard_ProgramError; class Handle_Standard_ProgramError : public opencascade::handle<Standard_ProgramError> { public: Handle_Standard_ProgramError() {} Handle_Standard_ProgramError(opencascade::handle<Standard_ProgramError>&& theHandle) : opencascade::handle<Standard_ProgramError>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_ProgramError,T2>::value>::type> inline Handle_Standard_ProgramError(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_ProgramError>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_ProgramError,T2>::value>::type> inline Handle_Standard_ProgramError(const T2* theOther) : opencascade::handle<Standard_ProgramError>(theOther) {} template<typename T> inline Handle_Standard_ProgramError& operator=(T theOther) { opencascade::handle<Standard_ProgramError>::operator=(theOther); return *this; } };


  





class Standard_ProgramError : public Standard_Failure { void Throw () const override { throw *this; } public: Standard_ProgramError() : Standard_Failure() {} Standard_ProgramError(const Standard_CString theMessage) : Standard_Failure(theMessage) {} static void Raise(const Standard_CString theMessage = "") { opencascade::handle<Standard_ProgramError> _E = new Standard_ProgramError; _E->Reraise(theMessage); } static void Raise(Standard_SStream& theMessage) { opencascade::handle<Standard_ProgramError> _E = new Standard_ProgramError; _E->Reraise (theMessage); } static opencascade::handle<Standard_ProgramError> NewInstance(const Standard_CString theMessage = "") { return new Standard_ProgramError(theMessage); } public: typedef Standard_Failure base_type; static const char* get_type_name () { return "Standard_ProgramError"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<Standard_ProgramError>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return Standard_ProgramError::get_type_descriptor(); } };




class Standard_OutOfMemory;
class Standard_OutOfMemory; class Handle_Standard_OutOfMemory : public opencascade::handle<Standard_OutOfMemory> { public: Handle_Standard_OutOfMemory() {} Handle_Standard_OutOfMemory(opencascade::handle<Standard_OutOfMemory>&& theHandle) : opencascade::handle<Standard_OutOfMemory>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_OutOfMemory,T2>::value>::type> inline Handle_Standard_OutOfMemory(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_OutOfMemory>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_OutOfMemory,T2>::value>::type> inline Handle_Standard_OutOfMemory(const T2* theOther) : opencascade::handle<Standard_OutOfMemory>(theOther) {} template<typename T> inline Handle_Standard_OutOfMemory& operator=(T theOther) { opencascade::handle<Standard_OutOfMemory>::operator=(theOther); return *this; } };


  



















class Standard_OutOfMemory : public Standard_ProgramError
{
  void Throw () const override;

public:

  
  __declspec( dllexport ) Standard_OutOfMemory(const Standard_CString theMessage = 0);

  
  __declspec( dllexport ) Standard_CString GetMessageString() const override;
  
  
  __declspec( dllexport ) void SetMessageString (const Standard_CString aMessage) override;

  
  __declspec( dllexport ) static void Raise(const Standard_CString theMessage = "");

  
  __declspec( dllexport ) static void Raise(Standard_SStream& theMessage);

  
  __declspec( dllexport ) static opencascade::handle<Standard_OutOfMemory> NewInstance(const Standard_CString theMessage = "");

  public: typedef Standard_ProgramError base_type; static const char* get_type_name () { return "Standard_OutOfMemory"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:
  char myBuffer[1024];
};














































































class Standard_OutOfMemory;


class MMgt_TShared;
class MMgt_TShared; class Handle_MMgt_TShared : public opencascade::handle<MMgt_TShared> { public: Handle_MMgt_TShared() {} Handle_MMgt_TShared(opencascade::handle<MMgt_TShared>&& theHandle) : opencascade::handle<MMgt_TShared>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <MMgt_TShared,T2>::value>::type> inline Handle_MMgt_TShared(const opencascade::handle<T2>& theOther) : opencascade::handle<MMgt_TShared>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <MMgt_TShared,T2>::value>::type> inline Handle_MMgt_TShared(const T2* theOther) : opencascade::handle<MMgt_TShared>(theOther) {} template<typename T> inline Handle_MMgt_TShared& operator=(T theOther) { opencascade::handle<MMgt_TShared>::operator=(theOther); return *this; } };






















class MMgt_TShared : public Standard_Transient
{

public:

  
  __declspec( dllexport ) virtual void Delete() const override;




  public: typedef Standard_Transient base_type; static const char* get_type_name () { return "MMgt_TShared"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:




private:




};























































              
class NCollection_BaseAllocator : public MMgt_TShared
{
 public:
  
  __declspec( dllexport ) virtual void* Allocate (const size_t size);
  __declspec( dllexport ) virtual void  Free     (void * anAddress);
  
  
  
  
  
  __declspec( dllexport ) static const opencascade::handle<NCollection_BaseAllocator>&
    CommonBaseAllocator(void);

  
  __declspec( dllexport ) static void StandardCallBack
                    (const Standard_Boolean theIsAlloc,
                     const Standard_Address theStorage,
                     const Standard_Size theRoundSize,
                     const Standard_Size theSize);

  
  __declspec( dllexport ) static void PrintMemUsageStatistics();

 protected:
  
  NCollection_BaseAllocator(void) {}

 private:
  
  NCollection_BaseAllocator(const NCollection_BaseAllocator&);

 public:
  
  public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "NCollection_BaseAllocator"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;
};

class NCollection_BaseAllocator; class Handle_NCollection_BaseAllocator : public opencascade::handle<NCollection_BaseAllocator> { public: Handle_NCollection_BaseAllocator() {} Handle_NCollection_BaseAllocator(opencascade::handle<NCollection_BaseAllocator>&& theHandle) : opencascade::handle<NCollection_BaseAllocator>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <NCollection_BaseAllocator,T2>::value>::type> inline Handle_NCollection_BaseAllocator(const opencascade::handle<T2>& theOther) : opencascade::handle<NCollection_BaseAllocator>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <NCollection_BaseAllocator,T2>::value>::type> inline Handle_NCollection_BaseAllocator(const T2* theOther) : opencascade::handle<NCollection_BaseAllocator>(theOther) {} template<typename T> inline Handle_NCollection_BaseAllocator& operator=(T theOther) { opencascade::handle<NCollection_BaseAllocator>::operator=(theOther); return *this; } };























































































































inline void Standard_ASSERT_DO_NOTHING() {}
































































  
  

  
  


  
  


















template <bool condition> 
struct Standard_Static_Assert { };


template <>
struct Standard_Static_Assert<true>
{
  static void assert_ok() {}
};









  #pragma once




#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		
template<class _Container>
	class back_insert_iterator
		: public _Outit
	{	
public:
	typedef back_insert_iterator<_Container> _Myt;
	typedef _Container container_type;
	typedef typename _Container::value_type _Valty;

	explicit back_insert_iterator(_Container& _Cont)
		: container(::std:: addressof(_Cont))
		{	
		}

	_Myt& operator=(const _Valty& _Val)
		{	
		container->push_back(_Val);
		return (*this);
		}

	_Myt& operator=(_Valty&& _Val)
		{	
		container->push_back(::std:: forward<_Valty>(_Val));
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	};

template<class _Container>
	struct _Is_checked_helper<back_insert_iterator<_Container> >
		: public true_type
	{	
	};

		
template<class _Container> inline
	back_insert_iterator<_Container> back_inserter(_Container& _Cont)
	{	
	return (back_insert_iterator<_Container>(_Cont));
	}

		
template<class _Container>
	class front_insert_iterator
		: public _Outit
	{	
public:
	typedef front_insert_iterator<_Container> _Myt;
	typedef _Container container_type;
	typedef typename _Container::value_type _Valty;

	explicit front_insert_iterator(_Container& _Cont)
		: container(::std:: addressof(_Cont))
		{	
		}

	_Myt& operator=(const _Valty& _Val)
		{	
		container->push_front(_Val);
		return (*this);
		}

	_Myt& operator=(_Valty&& _Val)
		{	
		container->push_front(::std:: forward<_Valty>(_Val));
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	};

template<class _Container>
	struct _Is_checked_helper<front_insert_iterator<_Container> >
		: public true_type
	{	
	};

		
template<class _Container> inline
	front_insert_iterator<_Container> front_inserter(_Container& _Cont)
	{	
	return (front_insert_iterator<_Container>(_Cont));
	}

		
template<class _Container>
	class insert_iterator
		: public _Outit
	{	
public:
	typedef insert_iterator<_Container> _Myt;
	typedef _Container container_type;
	typedef typename _Container::value_type _Valty;

	insert_iterator(_Container& _Cont, typename _Container::iterator _Where)
		: container(::std:: addressof(_Cont)), iter(_Where)
		{	
		}

	_Myt& operator=(const _Valty& _Val)
		{	
		iter = container->insert(iter, _Val);
		++iter;
		return (*this);
		}

	_Myt& operator=(_Valty&& _Val)
		{	
		iter = container->insert(iter, ::std:: forward<_Valty>(_Val));
		++iter;
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt& operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	typename _Container::iterator iter;	
	};

template<class _Container>
	struct _Is_checked_helper<insert_iterator<_Container> >
		: public true_type
	{	
	};

		
template<class _Container> inline
	insert_iterator<_Container> inserter(_Container& _Cont,
		typename _Container::iterator _Where)
	{	
	return (insert_iterator<_Container>(_Cont, _Where));
	}

		

template<class _Ty,
	class _Elem = char,
	class _Traits = char_traits<_Elem>,
	class _Diff = ptrdiff_t>
	class istream_iterator
		: public iterator<input_iterator_tag, _Ty, _Diff,
			const _Ty *, const _Ty&>
	{	
	typedef istream_iterator<_Ty, _Elem, _Traits, _Diff> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_istream<_Elem, _Traits> istream_type;

	typedef const _Ty *pointer;

	constexpr istream_iterator()
		: _Myistr(0), _Myval()
		{	
		}

	istream_iterator(istream_type& _Istr)
		: _Myistr(&_Istr)
		{	
		_Getval();
		}

	const _Ty& operator*() const
		{	
		return (_Myval);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myt& operator++()
		{	
		_Getval();
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	bool _Equal(const _Myt& _Right) const
		{	
		return (_Myistr == _Right._Myistr);
		}

protected:
	void _Getval()
		{	
		if (_Myistr != 0 && !(*_Myistr >> _Myval))
			_Myistr = 0;
		}

	istream_type *_Myistr;	
	_Ty _Myval;	
	};

template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff>
	struct _Is_checked_helper<istream_iterator<_Ty, _Elem, _Traits, _Diff> >
		: public true_type
	{	
	};

		
template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff> inline
	bool operator==(
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff> inline
	bool operator!=(
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
	{	
	return (!(_Left == _Right));
	}

		

template<class _Ty,
	class _Elem = char,
	class _Traits = char_traits<_Elem> >
	class ostream_iterator
		: public _Outit
	{	
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_ostream<_Elem, _Traits> ostream_type;

	ostream_iterator(ostream_type& _Ostr,
		const _Elem *_Delim = 0)
		: _Myostr(&_Ostr), _Mydelim(_Delim)
		{	
		}

	ostream_iterator& operator=(const _Ty& _Val)
		{	
		*_Myostr << _Val;
		if (_Mydelim != 0)
			*_Myostr << _Mydelim;
		return (*this);
		}

	ostream_iterator& operator*()
		{	
		return (*this);
		}

	ostream_iterator& operator++()
		{	
		return (*this);
		}

	ostream_iterator& operator++(int)
		{	
		return (*this);
		}

protected:
	const _Elem *_Mydelim;	
	ostream_type *_Myostr;	
	};

template<class _Ty,
	class _Elem,
	class _Traits>
	struct _Is_checked_helper<ostream_iterator<_Ty, _Elem, _Traits> >
		: public true_type
	{	
	};
}

namespace stdext {
using ::std:: iterator_traits;
using ::std:: size_t;

		
template<class _Iterator>
	class checked_array_iterator
	{	
public:
	typedef checked_array_iterator<_Iterator> _Myt;

	typedef typename iterator_traits<_Iterator>::iterator_category
		iterator_category;
	typedef typename iterator_traits<_Iterator>::value_type
		value_type;
	typedef typename iterator_traits<_Iterator>::difference_type
		difference_type;
	typedef typename iterator_traits<_Iterator>::pointer
		pointer;
	typedef typename iterator_traits<_Iterator>::reference
		reference;

	checked_array_iterator()
		: _Myarray(), _Mysize(0), _Myindex(0)
		{	
		}

	checked_array_iterator(_Iterator _Array, size_t _Size,
		size_t _Index = 0)
		: _Myarray(_Array), _Mysize(_Size), _Myindex(_Index)
		{	
		{ if (!(_Index <= _Size)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		}

	_Iterator base() const
		{	
		return (_Myarray + _Myindex);
		}

	typedef _Iterator _Unchecked_type;

	_Myt& _Rechecked(_Unchecked_type _Right)
		{	
		_Myindex = _Right - _Myarray;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (base());
		}

	reference operator*() const
		{	
		{ if (!(_Myarray != 0 && _Myindex < _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myarray[_Myindex]);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myt& operator++()
		{	
		{ if (!(_Myarray != 0 && _Myindex < _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		++_Myindex;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		{ if (!(_Myarray != 0 && 0 < _Myindex)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		--_Myindex;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myt& operator+=(difference_type _Off)
		{	
		{ if (!(_Myarray != 0 && _Myindex + _Off <= _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		_Myindex += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myt operator-(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		{ if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myindex - _Right._Myindex);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myt& _Right) const
		{	
		{ if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myindex == _Right._Myindex);
		}

	bool operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myt& _Right) const
		{	
		{ if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myindex < _Right._Myindex);
		}

	bool operator>(const _Myt& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myt& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myt& _Right) const
		{	
		return (!(*this < _Right));
		}

private:
	_Iterator _Myarray;	
	size_t _Mysize;	
	size_t _Myindex;	
	};

template<class _Iterator> inline
	typename checked_array_iterator<_Iterator>::_Unchecked_type
		_Unchecked(checked_array_iterator<_Iterator> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Iterator> inline
	checked_array_iterator<_Iterator>&
		_Rechecked(checked_array_iterator<_Iterator>& _Iter,
			typename checked_array_iterator<_Iterator>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Iterator> inline
	checked_array_iterator<_Iterator> operator+(
		typename checked_array_iterator<_Iterator>::difference_type _Off,
		checked_array_iterator<_Iterator> _Next)
	{	
	return (_Next += _Off);
	}

template<class _Iterator> inline
	checked_array_iterator<_Iterator> make_checked_array_iterator(
		_Iterator _Array, size_t _Size, size_t _Index = 0)
	{	
	return (checked_array_iterator<_Iterator>(_Array, _Size, _Index));
	}

		
template<class _Iterator>
	class unchecked_array_iterator
	{	
public:
	typedef unchecked_array_iterator<_Iterator> _Myt;

	typedef typename iterator_traits<_Iterator>::iterator_category
		iterator_category;
	typedef typename iterator_traits<_Iterator>::value_type
		value_type;
	typedef typename iterator_traits<_Iterator>::difference_type
		difference_type;
	typedef typename iterator_traits<_Iterator>::pointer
		pointer;
	typedef typename iterator_traits<_Iterator>::reference
		reference;

	unchecked_array_iterator()
		: _Myptr()
		{	
		}

	explicit unchecked_array_iterator(_Iterator _Ptr)
		: _Myptr(_Ptr)
		{	
		}

	_Iterator base() const
		{	
		return (_Myptr);
		}

	typedef _Iterator _Unchecked_type;

	_Myt& _Rechecked(_Unchecked_type _Right)
		{	
		_Myptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (base());
		}

	reference operator*() const
		{	
		return (*_Myptr);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myt& operator++()
		{	
		++_Myptr;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		--_Myptr;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myt& operator+=(difference_type _Off)
		{	
		_Myptr += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myt operator-(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		return (_Myptr - _Right._Myptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myt& _Right) const
		{	
		return (_Myptr == _Right._Myptr);
		}

	bool operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myt& _Right) const
		{	
		return (_Myptr < _Right._Myptr);
		}

	bool operator>(const _Myt& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myt& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myt& _Right) const
		{	
		return (!(*this < _Right));
		}

private:
	_Iterator _Myptr;	
	};

template<class _Iterator> inline
	typename unchecked_array_iterator<_Iterator>::_Unchecked_type
		_Unchecked(unchecked_array_iterator<_Iterator> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Iterator> inline
	unchecked_array_iterator<_Iterator>&
		_Rechecked(unchecked_array_iterator<_Iterator>& _Iter,
			typename unchecked_array_iterator<_Iterator>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Iterator> inline
	unchecked_array_iterator<_Iterator> operator+(
		typename unchecked_array_iterator<_Iterator>::difference_type _Off,
		unchecked_array_iterator<_Iterator> _Next)
	{	
	return (_Next += _Off);
	}

template<class _Iterator> inline
	unchecked_array_iterator<_Iterator> make_unchecked_array_iterator(
		_Iterator _Ptr)
	{	
	return (unchecked_array_iterator<_Iterator>(_Ptr));
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)













namespace opencascade
{
  template<bool Condition, typename T>
  struct enable_if
  {
    typedef T type;
  };
  
  template<typename T>
  struct enable_if<false, T>
  {
  };
  
  template<typename T1, typename T2>
  struct is_same
  {
    enum { value = 0 };
  };
  
  template<typename T>
  struct is_same<T, T>
  {
    enum { value = 1 };
  };
  
  template<bool Condition, typename TypeTrue, typename TypeFalse>
  struct conditional
  {
    typedef TypeTrue type;
  };

  template<typename TypeTrue, typename TypeFalse>
  struct conditional<false, TypeTrue, TypeFalse>
  {
    typedef TypeFalse type;
  };
}







template<class Category, class BaseIterator, class ItemType, bool IsConstant>
class NCollection_StlIterator :
  public std::iterator<Category, ItemType, ptrdiff_t,
                       typename opencascade::conditional<IsConstant, const ItemType*, ItemType*>::type,
                       typename opencascade::conditional<IsConstant, const ItemType&, ItemType&>::type>
{
public:

  
  NCollection_StlIterator () {}

  
  NCollection_StlIterator (const BaseIterator& theIterator)
    : myIterator (theIterator)
  { }

  
  NCollection_StlIterator (const NCollection_StlIterator<Category, BaseIterator, ItemType, false>& theIterator)
    : myIterator (theIterator.Iterator())
  { }

  
  NCollection_StlIterator& operator= (const NCollection_StlIterator<Category, BaseIterator, ItemType, false>& theIterator)
  {
    myIterator = theIterator.myIterator;
    return *this;
  }

  
  const BaseIterator& Iterator () const
  {
    return myIterator;
  }

protected: 

  
  

  template<bool Condition>
  typename opencascade::enable_if<!Condition, ItemType&>::type Reference() const
  {
    return myIterator.ChangeValue();
  }

  template<bool Condition>
  typename opencascade::enable_if<Condition, const ItemType&>::type Reference() const
  {
    return myIterator.Value();
  }

public: 

  
  bool operator== (const NCollection_StlIterator& theOther) const
  {
    return myIterator.More() == theOther.myIterator.More() &&
           (!myIterator.More() || myIterator.IsEqual (theOther.myIterator));
  }

  
  bool operator!= (const NCollection_StlIterator& theOther) const
  {
    return !(*this == theOther);
  }

  
  typename NCollection_StlIterator::reference operator*() const
  {
    return Reference<IsConstant>();
  }

  
  typename NCollection_StlIterator::pointer operator->() const
  {
    return &Reference<IsConstant>();
  }

  
  NCollection_StlIterator& operator++()
  {
    myIterator.Next();
    return *this;
  }

  
  NCollection_StlIterator operator++(int)
  {
    const NCollection_StlIterator theOld (*this);
    ++(*this);
    return theOld;
  }

public: 
  
  
  NCollection_StlIterator& operator--()
  {
    Standard_Static_Assert<(opencascade::is_same<std::bidirectional_iterator_tag,Category>::value || opencascade::is_same<std::random_access_iterator_tag,Category>::value)>::assert_ok();;
    myIterator.Previous();
    return *this;
  }
  
  
  NCollection_StlIterator operator--(int)
  {
    NCollection_StlIterator theOld (*this);
    --(*this);
    return theOld;
  }
  
public: 

  
  NCollection_StlIterator& operator+= (typename NCollection_StlIterator::difference_type theOffset)
  {
    Standard_Static_Assert<(opencascade::is_same<std::random_access_iterator_tag,Category>::value)>::assert_ok();;
    myIterator.Offset (theOffset);
    return *this;
  }

  
  NCollection_StlIterator operator+ (typename NCollection_StlIterator::difference_type theOffset) const
  {
    NCollection_StlIterator aTemp (*this);
    return aTemp += theOffset;
  }

  
  NCollection_StlIterator& operator-= (typename NCollection_StlIterator::difference_type theOffset)
  {
    return *this += -theOffset;
  }

  
  NCollection_StlIterator operator- (typename NCollection_StlIterator::difference_type theOffset) const
  {
    NCollection_StlIterator aTemp (*this);
    return aTemp += -theOffset;
  }

  
  typename NCollection_StlIterator::difference_type operator- (const NCollection_StlIterator& theOther) const
  {
    Standard_Static_Assert<(opencascade::is_same<std::random_access_iterator_tag,Category>::value)>::assert_ok();;
    return myIterator.Differ (theOther.myIterator);
  }

  
  typename NCollection_StlIterator::reference operator[] (typename NCollection_StlIterator::difference_type theOffset) const
  {
    return *(*this + theOffset);
  }
  
  
  bool operator< (const NCollection_StlIterator& theOther) const
  {
    return (*this - theOther) < 0;
  }

  
  bool operator> (const NCollection_StlIterator& theOther) const
  {
    return theOther < *this;
  }

  
  bool operator<= (const NCollection_StlIterator& theOther) const
  {
    return !(theOther < *this);
  }

  
  bool operator>= (const NCollection_StlIterator& theOther) const
  {
    return !(*this < theOther);
  }

private:
  
  BaseIterator myIterator;
};

































              
template <class TheItemType>
class NCollection_Array1
{
public:
  
  typedef TheItemType value_type;

public:
  
  class Iterator
  {
  public:

    
    Iterator (void) :
      myPtrCur (0),
      myPtrEnd (0)
    {
      
    }

    
    Iterator (const NCollection_Array1& theArray, Standard_Boolean theToEnd = false) :
      myPtrEnd (const_cast<TheItemType*> (&theArray.Last() + 1))
    {
      myPtrCur = theToEnd ? myPtrEnd : const_cast<TheItemType*> (&theArray.First());
    }

    
    void Init (const NCollection_Array1& theArray)
    { 
      myPtrCur = const_cast<TheItemType*> (&theArray.First());
      myPtrEnd = const_cast<TheItemType*> (&theArray.Last() + 1);
    }

    
    Iterator& operator= (const Iterator& theOther)
    {
      myPtrCur = theOther.myPtrCur;
      myPtrEnd = theOther.myPtrEnd;
      return *this;
    }

    
    Standard_Boolean More (void) const
    { return myPtrCur < myPtrEnd; }
    
    
    void Next (void)
    { ++myPtrCur; }

    
    void Previous()
    { --myPtrCur; }

    
    void Offset (ptrdiff_t theOffset)
    { myPtrCur += theOffset; }

    
    ptrdiff_t Differ (const Iterator& theOther) const
    { return myPtrCur - theOther.myPtrCur; }

    
    const TheItemType& Value (void) const
    { return *myPtrCur; }

    
    TheItemType& ChangeValue (void) const 
    { return *myPtrCur; }

    
    Standard_Boolean IsEqual (const Iterator& theOther) const
    { return myPtrCur == theOther.myPtrCur; }

  private:
    TheItemType* myPtrCur; 
    TheItemType* myPtrEnd; 
  }; 

  
  typedef NCollection_StlIterator<std::random_access_iterator_tag, Iterator, TheItemType, false> iterator;

  
  typedef NCollection_StlIterator<std::random_access_iterator_tag, Iterator, TheItemType, true> const_iterator;

  
  iterator begin() const { return Iterator (*this, false); }

  
  iterator end() const { return Iterator (*this, true); }
  
  
  const_iterator cbegin() const { return Iterator (*this, false); }

  
  const_iterator cend() const { return Iterator (*this, true); }

 public:
  

  
  NCollection_Array1(const Standard_Integer theLower,
                     const Standard_Integer theUpper) :
                myLowerBound                             (theLower),
                myUpperBound                             (theUpper),
                myDeletable                              (true)
  {
    if (theUpper < theLower) Standard_RangeError::Raise("NCollection_Array1::Create");;
    TheItemType* pBegin = new TheItemType[Length()];
    if (!pBegin) Standard_OutOfMemory::Raise("NCollection_Array1 : Allocation failed");;

    myData = pBegin - theLower;
  }

  
  NCollection_Array1 (const NCollection_Array1& theOther) :
    myLowerBound                                (theOther.Lower()),
    myUpperBound                                (theOther.Upper()),
    myDeletable                                 (true)
  {
    TheItemType* pBegin = new TheItemType[Length()];
    if (!pBegin) Standard_OutOfMemory::Raise("NCollection_Array1 : Allocation failed");;
    myData = pBegin - myLowerBound;

    *this = theOther;
  }

  
  NCollection_Array1 (const TheItemType& theBegin,
                      const Standard_Integer theLower,
                      const Standard_Integer theUpper) :
    myLowerBound                                (theLower),
    myUpperBound                                (theUpper),
    myDeletable                                 (false)
  {
    if (theUpper < theLower) Standard_RangeError::Raise("NCollection_Array1::Create");;
    myData = (TheItemType *) &theBegin - theLower; 
  }

  
  void Init (const TheItemType& theValue) 
  {
    TheItemType *pCur = &myData[myLowerBound], *pEnd=&myData[myUpperBound];
    for(; pCur <= pEnd; pCur++)
      *pCur = (TheItemType&) theValue;
  }

  
  Standard_Integer Size (void) const
  { return Length(); }
  
  Standard_Integer Length (void) const
  { return (myUpperBound-myLowerBound+1); }

  
  Standard_Integer Lower (void) const
  { return myLowerBound; }
  
  Standard_Integer Upper (void) const
  { return myUpperBound; }

  
  Standard_Boolean IsDeletable (void) const
  { return myDeletable; }

  
  Standard_Boolean IsAllocated (void) const
  { return myDeletable; }

  
  NCollection_Array1& Assign (const NCollection_Array1& theOther)
  {
    if (&theOther == this)
      return *this;
    if (Length() != theOther.Length()) Standard_DimensionMismatch::Raise("NCollection_Array1::operator=");;
    TheItemType * pMyItem        = &myData[myLowerBound];
    TheItemType * const pEndItem = &(theOther.myData)[theOther.myUpperBound];
    TheItemType * pItem          = &(theOther.myData)[theOther.myLowerBound];
    while (pItem <= pEndItem) * pMyItem ++ = * pItem ++;
    return *this; 
  }

  
  NCollection_Array1& operator= (const NCollection_Array1& theOther)
  { 
    return Assign (theOther);
  }

  
  const TheItemType& First() const
  {
    return myData[myLowerBound];
  }

  
  TheItemType& ChangeFirst()
  {
    return myData[myLowerBound];
  }

  
  const TheItemType& Last() const
  {
    return myData[myUpperBound];
  }

  
  TheItemType& ChangeLast()
  {
    return myData[myUpperBound];
  }

  
  const TheItemType& Value (const Standard_Integer theIndex) const
  {
    if (theIndex < myLowerBound || theIndex > myUpperBound) Standard_OutOfRange::Raise("NCollection_Array1::Value");;
    return myData[theIndex];
  }

  
  const TheItemType& operator() (const Standard_Integer theIndex) const
  { return Value (theIndex); }

  
  TheItemType& ChangeValue (const Standard_Integer theIndex)
  {
    if (theIndex < myLowerBound || theIndex > myUpperBound) Standard_OutOfRange::Raise("NCollection_Array1::ChangeValue");;
    return myData[theIndex];
  }

  
  TheItemType& operator() (const Standard_Integer theIndex)
  { return ChangeValue (theIndex); }

  
  void SetValue (const Standard_Integer theIndex,
                 const TheItemType&     theItem)
  {
    if (theIndex < myLowerBound || theIndex > myUpperBound) Standard_OutOfRange::Raise("NCollection_Array1::SetValue");;
    myData[theIndex] = theItem;
  }

  
  ~NCollection_Array1 (void)
  { if (myDeletable) delete [] &(myData[myLowerBound]); }

 protected:
  
  Standard_Integer     myLowerBound;
  Standard_Integer     myUpperBound;
  Standard_Boolean     myDeletable; 
  TheItemType*         myData;      
};




typedef NCollection_Array1<gp_Pnt> TColgp_Array1OfPnt;
















































typedef NCollection_Array1<gp_Pnt2d> TColgp_Array1OfPnt2d;









































































































class TColgp_HArray1OfPnt2d : public TColgp_Array1OfPnt2d, public MMgt_TShared { public: void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { } void* operator new (size_t theSize, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { return theAllocator->Allocate(theSize); } void operator delete (void* theAddress, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { theAllocator->Free(theAddress); } TColgp_HArray1OfPnt2d (const Standard_Integer theLower, const Standard_Integer theUpper) : TColgp_Array1OfPnt2d (theLower,theUpper) {} TColgp_HArray1OfPnt2d (const Standard_Integer theLower, const Standard_Integer theUpper, const TColgp_Array1OfPnt2d::value_type& theValue) : TColgp_Array1OfPnt2d (theLower,theUpper) { Init (theValue); } TColgp_HArray1OfPnt2d (const TColgp_Array1OfPnt2d& theOther) : TColgp_Array1OfPnt2d(theOther) {} const TColgp_Array1OfPnt2d& Array1 () const { return *this; } TColgp_Array1OfPnt2d& ChangeArray1 () { return *this; } public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "TColgp_HArray1OfPnt2d"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<TColgp_HArray1OfPnt2d>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return TColgp_HArray1OfPnt2d::get_type_descriptor(); } }; class TColgp_HArray1OfPnt2d; class Handle_TColgp_HArray1OfPnt2d : public opencascade::handle<TColgp_HArray1OfPnt2d> { public: Handle_TColgp_HArray1OfPnt2d() {} Handle_TColgp_HArray1OfPnt2d(opencascade::handle<TColgp_HArray1OfPnt2d>&& theHandle) : opencascade::handle<TColgp_HArray1OfPnt2d>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <TColgp_HArray1OfPnt2d,T2>::value>::type> inline Handle_TColgp_HArray1OfPnt2d(const opencascade::handle<T2>& theOther) : opencascade::handle<TColgp_HArray1OfPnt2d>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <TColgp_HArray1OfPnt2d,T2>::value>::type> inline Handle_TColgp_HArray1OfPnt2d(const T2* theOther) : opencascade::handle<TColgp_HArray1OfPnt2d>(theOther) {} template<typename T> inline Handle_TColgp_HArray1OfPnt2d& operator=(T theOther) { opencascade::handle<TColgp_HArray1OfPnt2d>::operator=(theOther); return *this; } };

















































class Standard_OutOfRange;







class Poly_Triangle 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  __declspec( dllexport ) Poly_Triangle();
  
  
  
  
  
  __declspec( dllexport ) Poly_Triangle(const Standard_Integer N1, const Standard_Integer N2, const Standard_Integer N3);
  
  
  __declspec( dllexport ) void Set (const Standard_Integer N1, const Standard_Integer N2, const Standard_Integer N3);
  
  
  
    void Set (const Standard_Integer Index, const Standard_Integer Node);
  
  
  __declspec( dllexport ) void Get (Standard_Integer& N1, Standard_Integer& N2, Standard_Integer& N3) const;
  
  
  
    Standard_Integer Value (const Standard_Integer Index) const;
  Standard_Integer operator() (const Standard_Integer Index) const
{
  return Value(Index);
}
  
  
  
    Standard_Integer& ChangeValue (const Standard_Integer Index);
  Standard_Integer& operator() (const Standard_Integer Index)
{
  return ChangeValue(Index);
}




protected:





private:



  Standard_Integer myNodes[3];


};


























inline void Poly_Triangle::Set(const Standard_Integer Index, const Standard_Integer Node)
{
  if (Index < 1 || Index > 3) Standard_OutOfRange::Raise(0);;
  myNodes[Index-1] = Node;
}






inline Standard_Integer Poly_Triangle::Value(const Standard_Integer Index) const 
{
  if (Index < 1 || Index > 3) Standard_OutOfRange::Raise(0);;
  return myNodes[Index-1];
}






inline Standard_Integer& Poly_Triangle::ChangeValue
(const Standard_Integer Index)
{
  if (Index < 1 || Index > 3) Standard_OutOfRange::Raise(0);;
  return myNodes[Index-1];
}











typedef NCollection_Array1<Poly_Triangle> Poly_Array1OfTriangle;














































         
         
         
         
         
         




inline Standard_ShortReal     ShortRealSmall() 
{ return 1.175494351e-38F; }




inline Standard_ShortReal     Abs(const Standard_ShortReal Value) 



{ return float( fabs (Value) ) ; }





inline Standard_Integer  ShortRealDigits() 
{ return 6; }





inline Standard_ShortReal     ShortRealEpsilon() 
{ return 1.192092896e-07F; }




inline Standard_ShortReal     ShortRealFirst() 
{ Standard_ShortReal MaxFloatTmp = -3.402823466e+38F;
  return MaxFloatTmp; }
  




inline Standard_Integer  ShortRealFirst10Exp() 
{ return (-37); }




inline Standard_ShortReal     ShortRealLast() 
{ return  3.402823466e+38F; }





inline Standard_Integer  ShortRealLast10Exp() 
{ return  38; }





inline Standard_Integer  ShortRealMantissa() 
{ return  24; }




inline Standard_Integer  ShortRealRadix() 
{ return  2; }




inline Standard_Integer  ShortRealSize() 
{ return (8 * sizeof(Standard_ShortReal)); }




inline Standard_ShortReal     Max (const Standard_ShortReal Val1, 
				   const Standard_ShortReal Val2) 
{
  if (Val1 >= Val2) {
    return Val1;
  } else {
    return Val2;
  }
}




inline Standard_ShortReal     Min (const Standard_ShortReal Val1, 
				   const Standard_ShortReal Val2)
{
  if (Val1 <= Val2) {
    return Val1;
  } else {
    return Val2;
  }
}










__declspec( dllimport ) extern Standard_Integer HashCode (const Standard_ShortReal, const Standard_Integer);  




inline Standard_Boolean  IsEqual (const Standard_ShortReal Value1, 
				  const Standard_ShortReal Value2) 
{ return Abs((Value1 - Value2)) < ShortRealSmall(); }


























typedef NCollection_Array1<Standard_ShortReal> TShort_Array1OfShortReal;






class TShort_HArray1OfShortReal : public TShort_Array1OfShortReal, public MMgt_TShared { public: void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { } void* operator new (size_t theSize, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { return theAllocator->Allocate(theSize); } void operator delete (void* theAddress, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { theAllocator->Free(theAddress); } TShort_HArray1OfShortReal (const Standard_Integer theLower, const Standard_Integer theUpper) : TShort_Array1OfShortReal (theLower,theUpper) {} TShort_HArray1OfShortReal (const Standard_Integer theLower, const Standard_Integer theUpper, const TShort_Array1OfShortReal::value_type& theValue) : TShort_Array1OfShortReal (theLower,theUpper) { Init (theValue); } TShort_HArray1OfShortReal (const TShort_Array1OfShortReal& theOther) : TShort_Array1OfShortReal(theOther) {} const TShort_Array1OfShortReal& Array1 () const { return *this; } TShort_Array1OfShortReal& ChangeArray1 () { return *this; } public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "TShort_HArray1OfShortReal"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<TShort_HArray1OfShortReal>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return TShort_HArray1OfShortReal::get_type_descriptor(); } }; class TShort_HArray1OfShortReal; class Handle_TShort_HArray1OfShortReal : public opencascade::handle<TShort_HArray1OfShortReal> { public: Handle_TShort_HArray1OfShortReal() {} Handle_TShort_HArray1OfShortReal(opencascade::handle<TShort_HArray1OfShortReal>&& theHandle) : opencascade::handle<TShort_HArray1OfShortReal>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <TShort_HArray1OfShortReal,T2>::value>::type> inline Handle_TShort_HArray1OfShortReal(const opencascade::handle<T2>& theOther) : opencascade::handle<TShort_HArray1OfShortReal>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <TShort_HArray1OfShortReal,T2>::value>::type> inline Handle_TShort_HArray1OfShortReal(const T2* theOther) : opencascade::handle<TShort_HArray1OfShortReal>(theOther) {} template<typename T> inline Handle_TShort_HArray1OfShortReal& operator=(T theOther) { opencascade::handle<TShort_HArray1OfShortReal>::operator=(theOther); return *this; } };








class Standard_DomainError;
class Standard_NullObject;


class Poly_Triangulation;
class Poly_Triangulation; class Handle_Poly_Triangulation : public opencascade::handle<Poly_Triangulation> { public: Handle_Poly_Triangulation() {} Handle_Poly_Triangulation(opencascade::handle<Poly_Triangulation>&& theHandle) : opencascade::handle<Poly_Triangulation>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Poly_Triangulation,T2>::value>::type> inline Handle_Poly_Triangulation(const opencascade::handle<T2>& theOther) : opencascade::handle<Poly_Triangulation>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Poly_Triangulation,T2>::value>::type> inline Handle_Poly_Triangulation(const T2* theOther) : opencascade::handle<Poly_Triangulation>(theOther) {} template<typename T> inline Handle_Poly_Triangulation& operator=(T theOther) { opencascade::handle<Poly_Triangulation>::operator=(theOther); return *this; } };


























class Poly_Triangulation : public MMgt_TShared
{

public:

  
  
  
  
  
  
  
  __declspec( dllexport ) Poly_Triangulation(const Standard_Integer nbNodes, const Standard_Integer nbTriangles, const Standard_Boolean UVNodes);
  
  
  
  
  __declspec( dllexport ) Poly_Triangulation(const TColgp_Array1OfPnt& Nodes, const Poly_Array1OfTriangle& Triangles);
  
  
  
  
  
  
  
  
  __declspec( dllexport ) Poly_Triangulation(const TColgp_Array1OfPnt& Nodes, const TColgp_Array1OfPnt2d& UVNodes, const Poly_Array1OfTriangle& Triangles);
  
  
  __declspec( dllexport ) virtual opencascade::handle<Poly_Triangulation> Copy() const;
  
  
  __declspec( dllexport ) Standard_Real Deflection() const;
  
  
  
  __declspec( dllexport ) void Deflection (const Standard_Real D);
  
  
  __declspec( dllexport ) void RemoveUVNodes();
  
  
  
    Standard_Integer NbNodes() const;
  
  
  
    Standard_Integer NbTriangles() const;
  
  
  
    Standard_Boolean HasUVNodes() const;
  
  
  __declspec( dllexport ) const TColgp_Array1OfPnt& Nodes() const;
  
  
  
  
  
  
  __declspec( dllexport ) TColgp_Array1OfPnt& ChangeNodes();
  
  
  
  
  
  
  __declspec( dllexport ) const TColgp_Array1OfPnt2d& UVNodes() const;
  
  
  
  
  
  
  
  __declspec( dllexport ) TColgp_Array1OfPnt2d& ChangeUVNodes();
  
  
  __declspec( dllexport ) const Poly_Array1OfTriangle& Triangles() const;
  
  
  
  
  
  
  __declspec( dllexport ) Poly_Array1OfTriangle& ChangeTriangles();
  
  
  
  __declspec( dllexport ) void SetNormals (const opencascade::handle<TShort_HArray1OfShortReal>& theNormals);
  
  __declspec( dllexport ) const TShort_Array1OfShortReal& Normals() const;
  
  __declspec( dllexport ) TShort_Array1OfShortReal& ChangeNormals();
  
  __declspec( dllexport ) Standard_Boolean HasNormals() const;




  public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "Poly_Triangulation"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:




private:


  Standard_Real myDeflection;
  Standard_Integer myNbNodes;
  Standard_Integer myNbTriangles;
  TColgp_Array1OfPnt myNodes;
  opencascade::handle<TColgp_HArray1OfPnt2d> myUVNodes;
  Poly_Array1OfTriangle myTriangles;
  opencascade::handle<TShort_HArray1OfShortReal> myNormals;


};
























inline Standard_Integer Poly_Triangulation::NbNodes() const 
{
  return myNbNodes;
}






inline Standard_Integer Poly_Triangulation::NbTriangles() const 
{
  return myNbTriangles;
}






inline Standard_Boolean Poly_Triangulation::HasUVNodes() const 
{
  return !myUVNodes.IsNull();
}


































class TopoDS_Vertex;
class TopoDS_Shape;
class TopoDS_Edge;
class TopoDS_Wire;
class TopoDS_Face;
class TopoDS_Shell;
class TopoDS_Solid;
class TopoDS_CompSolid;
class TopoDS_Compound;
class TopoDS_Shape;
class TopoDS_HShape;
class TopoDS_TShape;
class TopoDS_TVertex;
class TopoDS_Vertex;
class TopoDS_TEdge;
class TopoDS_Edge;
class TopoDS_TWire;
class TopoDS_Wire;
class TopoDS_TFace;
class TopoDS_Face;
class TopoDS_TShell;
class TopoDS_Shell;
class TopoDS_TSolid;
class TopoDS_Solid;
class TopoDS_TCompSolid;
class TopoDS_CompSolid;
class TopoDS_TCompound;
class TopoDS_Compound;
class TopoDS_Builder;
class TopoDS_Iterator;







class TopoDS 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
  
  
    static const TopoDS_Vertex& Vertex (const TopoDS_Shape& S);
inline static TopoDS_Vertex& Vertex(TopoDS_Shape&);
  
  
  
  
    static const TopoDS_Edge& Edge (const TopoDS_Shape& S);
inline static TopoDS_Edge& Edge(TopoDS_Shape&);
  
  
  
  
    static const TopoDS_Wire& Wire (const TopoDS_Shape& S);
inline static TopoDS_Wire& Wire(TopoDS_Shape&);
  
  
  
  
    static const TopoDS_Face& Face (const TopoDS_Shape& S);
inline static TopoDS_Face& Face(TopoDS_Shape&);
  
  
  
  
    static const TopoDS_Shell& Shell (const TopoDS_Shape& S);
inline static TopoDS_Shell& Shell(TopoDS_Shape&);
  
  
  
  
    static const TopoDS_Solid& Solid (const TopoDS_Shape& S);
inline static TopoDS_Solid& Solid(TopoDS_Shape&);
  
  
  
  
    static const TopoDS_CompSolid& CompSolid (const TopoDS_Shape& S);
inline static TopoDS_CompSolid& CompSolid(TopoDS_Shape&);
  
  
  
  
    static const TopoDS_Compound& Compound (const TopoDS_Shape& S);
inline static TopoDS_Compound& Compound(TopoDS_Shape&);




protected:





private:




friend class TopoDS_Shape;
friend class TopoDS_HShape;
friend class TopoDS_TShape;
friend class TopoDS_TVertex;
friend class TopoDS_Vertex;
friend class TopoDS_TEdge;
friend class TopoDS_Edge;
friend class TopoDS_TWire;
friend class TopoDS_Wire;
friend class TopoDS_TFace;
friend class TopoDS_Face;
friend class TopoDS_TShell;
friend class TopoDS_Shell;
friend class TopoDS_TSolid;
friend class TopoDS_Solid;
friend class TopoDS_TCompSolid;
friend class TopoDS_CompSolid;
friend class TopoDS_TCompound;
friend class TopoDS_Compound;
friend class TopoDS_Builder;
friend class TopoDS_Iterator;

};
































































enum TopAbs_ShapeEnum
{
TopAbs_COMPOUND,
TopAbs_COMPSOLID,
TopAbs_SOLID,
TopAbs_SHELL,
TopAbs_FACE,
TopAbs_WIRE,
TopAbs_EDGE,
TopAbs_VERTEX,
TopAbs_SHAPE
};












































































class TopLoc_SListNodeOfItemLocation;
class Standard_NoSuchObject;
class TopLoc_ItemLocation;

















class TopLoc_SListOfItemLocation 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    TopLoc_SListOfItemLocation();
  
  
  __declspec( dllexport ) TopLoc_SListOfItemLocation(const TopLoc_ItemLocation& anItem, const TopLoc_SListOfItemLocation& aTail);
  
  
    TopLoc_SListOfItemLocation(const TopLoc_SListOfItemLocation& Other);
  
  
  
  __declspec( dllexport ) TopLoc_SListOfItemLocation& Assign (const TopLoc_SListOfItemLocation& Other);
TopLoc_SListOfItemLocation& operator = (const TopLoc_SListOfItemLocation& Other)
{
  return Assign(Other);
}
  
    Standard_Boolean IsEmpty() const;
  
  
    void Clear();
~TopLoc_SListOfItemLocation()
{
  Clear();
}
  
  
  
  __declspec( dllexport ) const TopLoc_ItemLocation& Value() const;
  
  
  
  __declspec( dllexport ) const TopLoc_SListOfItemLocation& Tail() const;
  
  
  
    void Construct (const TopLoc_ItemLocation& anItem);
  
  
    void ToTail();
  
  
  
    Standard_Boolean More() const;
  
  
  
    void Next();




protected:





private:



  opencascade::handle<TopLoc_SListNodeOfItemLocation> myNode;


};
























inline TopLoc_SListOfItemLocation::TopLoc_SListOfItemLocation()
{}






inline TopLoc_SListOfItemLocation::TopLoc_SListOfItemLocation(const TopLoc_SListOfItemLocation& Other) : 
       myNode(Other.myNode)
{
}






inline Standard_Boolean TopLoc_SListOfItemLocation::IsEmpty() const
{
  return myNode.IsNull();
}






inline void TopLoc_SListOfItemLocation::Clear()
{
  if (!myNode.IsNull()) {
    myNode.Nullify();
  }
}






inline void TopLoc_SListOfItemLocation::Construct(const TopLoc_ItemLocation& anItem)
{
  Assign(TopLoc_SListOfItemLocation(anItem,*this));
}






inline void TopLoc_SListOfItemLocation::ToTail()
{
  Assign(Tail());
}






inline Standard_Boolean TopLoc_SListOfItemLocation::More() const
{
  return !IsEmpty();
}






inline void TopLoc_SListOfItemLocation::Next()
{
  ToTail();
}











class Standard_NoSuchObject;
class Standard_ConstructionError;
class gp_Trsf;
class TopLoc_Datum3D;






class TopLoc_Location 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
  __declspec( dllexport ) TopLoc_Location();
  
  
  
  __declspec( dllexport ) TopLoc_Location(const gp_Trsf& T);
  
  
  
  
  
  __declspec( dllexport ) TopLoc_Location(const opencascade::handle<TopLoc_Datum3D>& D);
  
  
    Standard_Boolean IsIdentity() const;
  
  
    void Identity();
  
  
  
  
  
  
    const opencascade::handle<TopLoc_Datum3D>& FirstDatum() const;
  
  
  
  
  
    Standard_Integer FirstPower() const;
  
  
  
  
  
  
  
    const TopLoc_Location& NextLocation() const;
  
  
  
  __declspec( dllexport ) const gp_Trsf& Transformation() const;
__declspec( dllexport ) operator gp_Trsf() const;
  
  
  
  
  __declspec( dllexport ) TopLoc_Location Inverted() const;
  
  
  
  __declspec( dllexport ) TopLoc_Location Multiplied (const TopLoc_Location& Other) const;
TopLoc_Location operator* (const TopLoc_Location& Other) const
{
  return Multiplied(Other);
}
  
  
  __declspec( dllexport ) TopLoc_Location Divided (const TopLoc_Location& Other) const;
TopLoc_Location operator/ (const TopLoc_Location& Other) const
{
  return Divided(Other);
}
  
  
  __declspec( dllexport ) TopLoc_Location Predivided (const TopLoc_Location& Other) const;
  
  
  
  
  __declspec( dllexport ) TopLoc_Location Powered (const Standard_Integer pwr) const;
  
  
  
  
  __declspec( dllexport ) Standard_Integer HashCode (const Standard_Integer Upper) const;
  
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsEqual (const TopLoc_Location& Other) const;
Standard_Boolean operator == (const TopLoc_Location& Other) const
{
  return IsEqual(Other);
}
  
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsDifferent (const TopLoc_Location& Other) const;
Standard_Boolean operator != (const TopLoc_Location& Other) const
{
  return IsDifferent(Other);
}
  
  
  __declspec( dllexport ) void ShallowDump (Standard_OStream& S) const;




protected:





private:



  TopLoc_SListOfItemLocation myItems;


};














































class TopLoc_Datum3D;
class TopLoc_Location;
class TopLoc_SListOfItemLocation;












class TopLoc_ItemLocation 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
  __declspec( dllexport ) TopLoc_ItemLocation(const opencascade::handle<TopLoc_Datum3D>& D, const Standard_Integer P);


friend class TopLoc_Location;
friend class TopLoc_SListOfItemLocation;


protected:





private:



  opencascade::handle<TopLoc_Datum3D> myDatum;
  Standard_Integer myPower;
  gp_Trsf myTrsf;


};















inline Standard_Boolean TopLoc_Location::IsIdentity() const
{
  return myItems.IsEmpty();
}






inline void TopLoc_Location::Identity()
{
  myItems.Clear();
}






inline const opencascade::handle<TopLoc_Datum3D>&  TopLoc_Location::FirstDatum()const 
{
  return myItems.Value().myDatum;
}






 inline Standard_Integer  TopLoc_Location::FirstPower()const 
{
  return myItems.Value().myPower;
}







 inline const TopLoc_Location&  TopLoc_Location::NextLocation()const 
{
  return (*(TopLoc_Location*) &(myItems.Tail()));
}






inline Standard_Integer HashCode(const TopLoc_Location& me,const Standard_Integer Upper) {
 return me.HashCode(Upper);
}

inline void ShallowDump(const TopLoc_Location& me,Standard_OStream& S) {
 me.ShallowDump(S);
}













































enum TopAbs_Orientation
{
TopAbs_FORWARD,
TopAbs_REVERSED,
TopAbs_INTERNAL,
TopAbs_EXTERNAL
};






class TopoDS_TShape;
class Standard_NullObject;
class Standard_DomainError;
class Standard_TypeMismatch;
class TopLoc_Location;












class TopoDS_Shape 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    TopoDS_Shape();
  
  
  
  
    Standard_Boolean IsNull() const;
  
  
  
    void Nullify();
  
  
    const TopLoc_Location& Location() const;
  
  
    void Location (const TopLoc_Location& Loc);
  
  
  
    TopoDS_Shape Located (const TopLoc_Location& Loc) const;
  
  
    TopAbs_Orientation Orientation() const;
  
  
    void Orientation (const TopAbs_Orientation Orient);
  
  
  
    TopoDS_Shape Oriented (const TopAbs_Orientation Or) const;
  
    const opencascade::handle<TopoDS_TShape>& TShape() const;
  
  
  
  
  
  
    TopAbs_ShapeEnum ShapeType() const;
  
  
    Standard_Boolean Free() const;
  
  
    void Free (const Standard_Boolean F);
  
  
    Standard_Boolean Locked() const;
  
  
    void Locked (const Standard_Boolean F);
  
  
    Standard_Boolean Modified() const;
  
  
    void Modified (const Standard_Boolean M);
  
  
    Standard_Boolean Checked() const;
  
  
    void Checked (const Standard_Boolean C);
  
  
    Standard_Boolean Orientable() const;
  
  
    void Orientable (const Standard_Boolean C);
  
  
    Standard_Boolean Closed() const;
  
  
    void Closed (const Standard_Boolean C);
  
  
    Standard_Boolean Infinite() const;
  
  
    void Infinite (const Standard_Boolean C);
  
  
    Standard_Boolean Convex() const;
  
  
    void Convex (const Standard_Boolean C);
  
  
    void Move (const TopLoc_Location& position);
  
  
  
    TopoDS_Shape Moved (const TopLoc_Location& position) const;
  
  
  
    void Reverse();
  
  
  
  
    TopoDS_Shape Reversed() const;
  
  
  
    void Complement();
  
  
  
  
    TopoDS_Shape Complemented() const;
  
  
  
  
    void Compose (const TopAbs_Orientation Orient);
  
  
  
  
    TopoDS_Shape Composed (const TopAbs_Orientation Orient) const;
  
  
  
  
    Standard_Boolean IsPartner (const TopoDS_Shape& other) const;
  
  
  
  
    Standard_Boolean IsSame (const TopoDS_Shape& other) const;
  
  
  
  
    Standard_Boolean IsEqual (const TopoDS_Shape& other) const;
  Standard_Boolean operator == (const TopoDS_Shape& other) const
{
  return IsEqual(other);
}
  
  
    Standard_Boolean IsNotEqual (const TopoDS_Shape& other) const;
  Standard_Boolean operator != (const TopoDS_Shape& other) const
{
  return IsNotEqual(other);
}
  
  
  
  
  
  __declspec( dllexport ) Standard_Integer HashCode (const Standard_Integer Upper) const;
  
  
  
  
    void EmptyCopy();
  
  
  
  
    TopoDS_Shape EmptyCopied() const;
  
    void TShape (const opencascade::handle<TopoDS_TShape>& T);




protected:





private:



  opencascade::handle<TopoDS_TShape> myTShape;
  TopLoc_Location myLocation;
  TopAbs_Orientation myOrient;


};

























































































































































class Standard_NoSuchObject;
class Standard_NoSuchObject; class Handle_Standard_NoSuchObject : public opencascade::handle<Standard_NoSuchObject> { public: Handle_Standard_NoSuchObject() {} Handle_Standard_NoSuchObject(opencascade::handle<Standard_NoSuchObject>&& theHandle) : opencascade::handle<Standard_NoSuchObject>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_NoSuchObject,T2>::value>::type> inline Handle_Standard_NoSuchObject(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_NoSuchObject>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_NoSuchObject,T2>::value>::type> inline Handle_Standard_NoSuchObject(const T2* theOther) : opencascade::handle<Standard_NoSuchObject>(theOther) {} template<typename T> inline Handle_Standard_NoSuchObject& operator=(T theOther) { opencascade::handle<Standard_NoSuchObject>::operator=(theOther); return *this; } };


  





class Standard_NoSuchObject : public Standard_DomainError { void Throw () const override { throw *this; } public: Standard_NoSuchObject() : Standard_DomainError() {} Standard_NoSuchObject(const Standard_CString theMessage) : Standard_DomainError(theMessage) {} static void Raise(const Standard_CString theMessage = "") { opencascade::handle<Standard_NoSuchObject> _E = new Standard_NoSuchObject; _E->Reraise(theMessage); } static void Raise(Standard_SStream& theMessage) { opencascade::handle<Standard_NoSuchObject> _E = new Standard_NoSuchObject; _E->Reraise (theMessage); } static opencascade::handle<Standard_NoSuchObject> NewInstance(const Standard_CString theMessage = "") { return new Standard_NoSuchObject(theMessage); } public: typedef Standard_DomainError base_type; static const char* get_type_name () { return "Standard_NoSuchObject"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<Standard_NoSuchObject>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return Standard_NoSuchObject::get_type_descriptor(); } };





























              
class NCollection_ListNode
{
public:
  
  void* operator new (size_t theSize, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { return theAllocator->Allocate(theSize); } void operator delete (void* theAddress, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { theAllocator->Free(theAddress); }
public:
  
  NCollection_ListNode (NCollection_ListNode* theNext)
  : myNext(theNext) {}

  
  NCollection_ListNode*& Next (void)
  { return myNext; }

  
  NCollection_ListNode* Next (void) const
  { return myNext; }

 private:
  
  NCollection_ListNode& operator= (const NCollection_ListNode&);
  
  
  NCollection_ListNode (const NCollection_ListNode&);

 private:
  NCollection_ListNode * myNext; 
};




typedef void (* NCollection_DelListNode) 
     (NCollection_ListNode*, opencascade::handle<NCollection_BaseAllocator>& theAl);


class NCollection_BaseList
{
public:
  
  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }
  void* operator new (size_t theSize, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { return theAllocator->Allocate(theSize); } void operator delete (void* theAddress, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { theAllocator->Free(theAddress); }

public:
  class Iterator
  {
  public:
    
    Iterator  (void) :
      myCurrent (0),
      myPrevious(0) {}
    
    Iterator  (const NCollection_BaseList& theList) :
      myCurrent (theList.myFirst),
      myPrevious(0) {}
    
    void Init (const NCollection_BaseList& theList)
    {
      myCurrent  = theList.myFirst;
      myPrevious = 0;
    }
    
    void Initialize (const NCollection_BaseList& theList)
    {
      Init(theList);
    }
    
    Standard_Boolean More (void) const
    { return (myCurrent!=0); }
    
    Iterator& operator= (const Iterator& theIt)
    {
      if (&theIt != this)
      {
        myCurrent  = theIt.myCurrent;
        myPrevious = theIt.myPrevious;
      }
      return * this;
    }

    
    Standard_Boolean operator== (const Iterator& theIt) const
    {
      return myCurrent == theIt.myCurrent;
    }

    
    Standard_Boolean IsEqual (const Iterator& theOther) const
    {
      return *this == theOther;
    }
  protected:
    void Init (const NCollection_BaseList& theList,
               NCollection_ListNode * const thePrev)
    {
      myCurrent  = thePrev ? thePrev -> Next() :
                             (NCollection_ListNode *)theList.PLast();
      myPrevious = thePrev;
    }
  public:
    NCollection_ListNode * myCurrent; 
    NCollection_ListNode * myPrevious;
    friend class NCollection_BaseList;
  }; 

 public:
  
  
  
  Standard_Integer Extent (void) const
  { return myLength; }

  
  
  Standard_Boolean IsEmpty (void) const
  { return (myFirst == 0); }

  
  
  const opencascade::handle<NCollection_BaseAllocator>& Allocator() const 
  { return myAllocator; }

  
  
  virtual ~NCollection_BaseList (void)
  {}

 protected:
  

  
  
  NCollection_BaseList (const opencascade::handle<NCollection_BaseAllocator>& theAllocator=0L) :
    myFirst(0),
    myLast(0),
    myLength(0)
  {
    myAllocator = (theAllocator.IsNull() ? NCollection_BaseAllocator::CommonBaseAllocator() : theAllocator);
  }

  
  
  __declspec( dllexport ) void PClear (NCollection_DelListNode fDel);

  
  
  const NCollection_ListNode* PFirst (void) const
  { return myFirst; }

  
  
  const NCollection_ListNode* PLast (void) const
  { return myLast; }

  
  
  __declspec( dllexport ) void PAppend (NCollection_ListNode* theNode);

  
  
  void                 PAppend (NCollection_ListNode* theNode,
                                Iterator&             theIt)
  {
    NCollection_ListNode * aPrev = myLast;
    PAppend (theNode);
    theIt.Init (* this, aPrev);
  }

  
  
  __declspec( dllexport ) void PAppend (NCollection_BaseList& theOther);

  
  
  __declspec( dllexport ) void PPrepend (NCollection_ListNode* theNode);

  
  
  __declspec( dllexport ) void PPrepend (NCollection_BaseList& theOther);

  
  
  __declspec( dllexport ) void PRemoveFirst 
    (NCollection_DelListNode fDel);

  
  
  __declspec( dllexport ) void PRemove 
    (Iterator& theIter,
     NCollection_DelListNode fDel);

  
  
  __declspec( dllexport ) void PInsertBefore (NCollection_ListNode* theNode,
                                      Iterator& theIter);

  
  
  __declspec( dllexport ) void PInsertBefore (NCollection_BaseList& theOther,
                                      Iterator& theIter);

  
  
  __declspec( dllexport ) void PInsertAfter (NCollection_ListNode* theNode,
                                     Iterator& theIter);

  
  
  __declspec( dllexport ) void PInsertAfter (NCollection_BaseList& theOther,
                                     Iterator& theIter);

  
  
  __declspec( dllexport ) void PReverse     ();

 protected:
  
  opencascade::handle<NCollection_BaseAllocator> myAllocator;
  NCollection_ListNode * myFirst;  
  NCollection_ListNode * myLast;   
  Standard_Integer       myLength; 

  
  friend class Iterator;
};



























              
template <class TheItemType> class NCollection_TListNode 
  : public NCollection_ListNode
{
 public:
  
  NCollection_TListNode (const TheItemType& theItem,
                         NCollection_ListNode* theNext=0) :
    NCollection_ListNode  (theNext), myValue(theItem) { }
  
  const TheItemType& Value () const { return myValue; }
  
  TheItemType& ChangeValue () { return myValue; }

  
  static void delNode (NCollection_ListNode * theNode, 
                       opencascade::handle<NCollection_BaseAllocator>& theAl)
  {
    ((NCollection_TListNode *) theNode)->myValue.~TheItemType();
    theAl->Free(theNode);
  }

  
 protected:
  TheItemType    myValue; 
  
};









template <class TheItemType> class NCollection_TListIterator 
  : public NCollection_BaseList::Iterator
{
 public:
  
  NCollection_TListIterator  (void) :
    NCollection_BaseList::Iterator () {}
  
  NCollection_TListIterator  (const NCollection_BaseList& theList) :
    NCollection_BaseList::Iterator (theList) {}
  
  Standard_Boolean More (void) const
  { return (myCurrent!=0); }
  
  void Next (void)
  {
    myPrevious = myCurrent;
    myCurrent = myCurrent->Next();
  }

  
  const TheItemType& Value (void) const
  { return ((const NCollection_TListNode<TheItemType>*) myCurrent)->Value(); }

  
  TheItemType& Value (void)
  { return ((NCollection_TListNode<TheItemType>*) myCurrent)->ChangeValue(); }

  
  TheItemType& ChangeValue (void) const
  { return ((NCollection_TListNode<TheItemType> *)myCurrent)->ChangeValue(); }
};











               
template <class TheItemType>
class NCollection_List : public NCollection_BaseList
{
public:
  
  typedef TheItemType value_type;

public:
  typedef NCollection_TListNode<TheItemType>     ListNode;
  typedef NCollection_TListIterator<TheItemType> Iterator;

  
  typedef NCollection_StlIterator<std::forward_iterator_tag, Iterator, TheItemType, false> iterator;

  
  typedef NCollection_StlIterator<std::forward_iterator_tag, Iterator, TheItemType, true> const_iterator;

  
  iterator begin() const { return Iterator (*this); }

  
  iterator end() const { return Iterator(); }

  
  const_iterator cbegin() const { return Iterator (*this); }

  
  const_iterator cend() const { return Iterator(); }

 public:
  

  
  NCollection_List(const opencascade::handle<NCollection_BaseAllocator>& theAllocator=0L) :
    NCollection_BaseList(theAllocator) {}

  
  NCollection_List (const NCollection_List& theOther) :
    NCollection_BaseList(theOther.myAllocator)
  {
    Assign (theOther);
  }

  
  Standard_Integer Size (void) const
  { return Extent(); }

  
  
  NCollection_List& Assign (const NCollection_List& theOther)
  {
    if (this != &theOther) {
      Clear();
      appendList(theOther.PFirst());
    }
    return *this;
  }

  
  NCollection_List& operator= (const NCollection_List& theOther)
  {
    return Assign (theOther);
  }

  
  void Clear (const opencascade::handle<NCollection_BaseAllocator>& theAllocator=0L)
  {
    PClear (ListNode::delNode);
    if (!theAllocator.IsNull())
      this->myAllocator = theAllocator;
  }

  
  const TheItemType& First (void) const
  {
    if (IsEmpty()) Standard_NoSuchObject::Raise("NCollection_List::First");;
    return ((const ListNode *) PFirst())->Value();
  }

  
  TheItemType& First (void)
  {
    if (IsEmpty()) Standard_NoSuchObject::Raise("NCollection_List::First");;
    return ((ListNode *) PFirst())->ChangeValue();
  }

  
  const TheItemType& Last (void) const
  { 
    if (IsEmpty()) Standard_NoSuchObject::Raise("NCollection_List::Last");;
    return ((const ListNode *) PLast())->Value();
  }

  
  TheItemType& Last (void)
  { 
    if (IsEmpty()) Standard_NoSuchObject::Raise("NCollection_List::Last");;
    return ((ListNode *) PLast())->ChangeValue();
  }

  
  TheItemType& Append (const TheItemType& theItem)
  { 
    ListNode * pNew = new (this->myAllocator) ListNode(theItem);
    PAppend(pNew);
    return ((ListNode *) PLast())->ChangeValue();
  }

  
  
  void Append (const TheItemType& theItem, Iterator& theIter)
  { 
    ListNode * pNew = new (this->myAllocator) ListNode(theItem);
    PAppend(pNew, theIter);
  }

  
  void Append (NCollection_List& theOther)
  { 
    if (this == &theOther || theOther.Extent()<1)
      return;
    if (this->myAllocator == theOther.myAllocator)
    {
      
      
      PAppend(theOther);
    }
    else
    {
      
      appendList(theOther.myFirst);
      theOther.Clear();
    }
  }

  
  TheItemType& Prepend (const TheItemType& theItem)
  { 
    ListNode * pNew = new (this->myAllocator) ListNode(theItem);
    PPrepend(pNew);
    return ((ListNode *) PFirst())->ChangeValue();
  }

  
  void Prepend (NCollection_List& theOther)
  { 
    if (this == &theOther || theOther.Extent()<1) 
      return;
    if (this->myAllocator == theOther.myAllocator)
    {
      
      
      PPrepend(theOther);
    }
    else
    {
      
      Iterator it(*this);
      prependList(theOther.PFirst(), it);
      theOther.Clear();
    }
  }

  
  void RemoveFirst (void) 
  { PRemoveFirst (ListNode::delNode); }

  
  void Remove (Iterator& theIter) 
  { 
    PRemove (theIter, ListNode::delNode); 
  }

  
  Standard_Boolean Remove (const TheItemType& theObject)
  {
    for (Iterator anIter (*this); anIter.More(); anIter.Next())
    {
      if (anIter.Value() == theObject)
      {
        Remove (anIter);
        return true;
      }
    }
    return false;
  }

  
  TheItemType& InsertBefore (const TheItemType& theItem,
                             Iterator& theIter) 
  { 
    ListNode * pNew = new (this->myAllocator) ListNode(theItem);
    PInsertBefore (pNew, theIter);
    return pNew -> ChangeValue();
  }

  
  void InsertBefore (NCollection_List& theOther,
                     Iterator& theIter) 
  {
    if (this == &theOther) 
      return;
  
    if (this->myAllocator == theOther.myAllocator)
    {
      
      
      PInsertBefore (theOther, theIter);
    }
    else
    {
      
      prependList(theOther.myFirst, theIter);
      theOther.Clear();
    }
  }

  
  TheItemType& InsertAfter (const TheItemType& theItem,
                            Iterator& theIter) 
  {
    ListNode * pNew = new (this->myAllocator) ListNode(theItem);
    PInsertAfter (pNew, theIter);
    return pNew -> ChangeValue();
  }

  
  void InsertAfter (NCollection_List& theOther,
                    Iterator& theIter) 
  {
    if (!theIter.More())
    {
      Append(theOther);
      return;
    }
    if (this->myAllocator == theOther.myAllocator)
    {
      
      
      PInsertAfter (theOther, theIter);
    }
    else
    {
      
      if (!theIter.More()) Standard_NoSuchObject::Raise("NCollection_List::InsertAfter");;

      Iterator anIter;
      anIter.myPrevious = theIter.myCurrent;
      anIter.myCurrent = theIter.myCurrent->Next();
      prependList(theOther.PFirst(), anIter);
      theOther.Clear();
    }
  }

  
  void Reverse ()
  { PReverse(); }

  
  Standard_Boolean Contains (const TheItemType& theObject) const
  {
    for (Iterator anIter (*this); anIter.More(); anIter.Next())
    {
      if (anIter.Value() == theObject)
      {
        return true;
      }
    }
    return false;
  }

  
  virtual ~NCollection_List (void)
  { Clear(); }

 private:
  

  
  void appendList(const NCollection_ListNode * pCur) {
    while (pCur) {
      NCollection_ListNode * pNew =
        new (this->myAllocator) ListNode(((const ListNode *)(pCur))->Value());
      PAppend(pNew);
      pCur = pCur->Next();
    }
  }

  
  void prependList(const NCollection_ListNode * pCur, Iterator& theIter) {
    while (pCur) {
      NCollection_ListNode * pNew =
        new (this->myAllocator) ListNode (((const ListNode *)(pCur))->Value());
      PInsertBefore(pNew, theIter);
      pCur = pCur->Next();
    }
  }
};




class TopoDS_Shape;
typedef NCollection_List<TopoDS_Shape> TopoDS_ListOfShape;
typedef NCollection_List<TopoDS_Shape>::Iterator TopoDS_ListIteratorOfListOfShape;








class Standard_ConstructionError;
class TopoDS_Iterator;
class TopoDS_Builder;


class TopoDS_TShape;
class TopoDS_TShape; class Handle_TopoDS_TShape : public opencascade::handle<TopoDS_TShape> { public: Handle_TopoDS_TShape() {} Handle_TopoDS_TShape(opencascade::handle<TopoDS_TShape>&& theHandle) : opencascade::handle<TopoDS_TShape>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <TopoDS_TShape,T2>::value>::type> inline Handle_TopoDS_TShape(const opencascade::handle<T2>& theOther) : opencascade::handle<TopoDS_TShape>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <TopoDS_TShape,T2>::value>::type> inline Handle_TopoDS_TShape(const T2* theOther) : opencascade::handle<TopoDS_TShape>(theOther) {} template<typename T> inline Handle_TopoDS_TShape& operator=(T theOther) { opencascade::handle<TopoDS_TShape>::operator=(theOther); return *this; } };


























class TopoDS_TShape : public MMgt_TShared
{

public:

  
  
    Standard_Boolean Free() const;
  
  
    void Free (const Standard_Boolean F);
  
  
    Standard_Boolean Locked() const;
  
  
    void Locked (const Standard_Boolean F);
  
  
    Standard_Boolean Modified() const;
  
  
    void Modified (const Standard_Boolean M);
  
  
    Standard_Boolean Checked() const;
  
  
    void Checked (const Standard_Boolean C);
  
  
    Standard_Boolean Orientable() const;
  
  
    void Orientable (const Standard_Boolean C);
  
  
    Standard_Boolean Closed() const;
  
  
    void Closed (const Standard_Boolean C);
  
  
    Standard_Boolean Infinite() const;
  
  
    void Infinite (const Standard_Boolean C);
  
  
    Standard_Boolean Convex() const;
  
  
    void Convex (const Standard_Boolean C);
  
  
  
  __declspec( dllexport ) virtual TopAbs_ShapeEnum ShapeType() const = 0;
  
  
  __declspec( dllexport ) virtual opencascade::handle<TopoDS_TShape> EmptyCopy() const = 0;


friend class TopoDS_Iterator;
friend class TopoDS_Builder;


  public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "TopoDS_TShape"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:

  
  
  
  
  
  
  
  
  
    TopoDS_TShape();



private:

  
    const TopoDS_ListOfShape& Shapes() const;
  
    TopoDS_ListOfShape& ChangeShapes();

  TopoDS_ListOfShape myShapes;
  Standard_Integer myFlags;


};







































































enum TopAbs_State
{
TopAbs_IN,
TopAbs_OUT,
TopAbs_ON,
TopAbs_UNKNOWN
};






















class TopAbs 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) static TopAbs_Orientation Compose (const TopAbs_Orientation Or1, const TopAbs_Orientation Or2);
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) static TopAbs_Orientation Reverse (const TopAbs_Orientation Or);
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) static TopAbs_Orientation Complement (const TopAbs_Orientation Or);
  
  
  
  __declspec( dllexport ) static Standard_OStream& Print (const TopAbs_ShapeEnum SE, Standard_OStream& S);
  
  
  
  __declspec( dllexport ) static Standard_OStream& Print (const TopAbs_Orientation Or, Standard_OStream& S);
  
  
  
  __declspec( dllexport ) static Standard_OStream& Print (const TopAbs_State St, Standard_OStream& S);




protected:





private:





};














































































































































































































































































































inline TopoDS_TShape::TopoDS_TShape()
 : myFlags((1<<0) |
           (1<<1) |
           (1<<3))
{
}






inline Standard_Boolean TopoDS_TShape::Free() const
{
  return ((myFlags & (1<<0)) != 0);
}






inline void TopoDS_TShape::Free(const Standard_Boolean F)
{
  if (F) myFlags |=  (1<<0);
  else   myFlags &= ~(1<<0);
}





inline Standard_Boolean TopoDS_TShape::Locked() const
{
  return ((myFlags & (1<<7)) != 0);
}






inline void TopoDS_TShape::Locked(const Standard_Boolean F)
{
  if (F) myFlags |=  (1<<7);
  else   myFlags &= ~(1<<7);
}






inline Standard_Boolean TopoDS_TShape::Modified() const
{
  return ((myFlags & (1<<1)) != 0);
}






inline void TopoDS_TShape::Modified(const Standard_Boolean M)
{
  if (M)
  {
    myFlags |= (1<<1);
    
    myFlags &= ~(1<<2);
  }
  else myFlags &= ~(1<<1);
}






inline Standard_Boolean TopoDS_TShape::Checked() const
{
  return ((myFlags & (1<<2)) != 0);
}






inline void TopoDS_TShape::Checked(const Standard_Boolean M)
{
  if (M) myFlags |=  (1<<2);
  else   myFlags &= ~(1<<2);
}






inline Standard_Boolean TopoDS_TShape::Orientable() const
{
  return ((myFlags & (1<<3)) != 0);
}






inline void TopoDS_TShape::Orientable(const Standard_Boolean M)
{
  if (M) myFlags |=  (1<<3);
  else   myFlags &= ~(1<<3);
}






inline Standard_Boolean TopoDS_TShape::Closed() const
{
  return ((myFlags & (1<<4)) != 0);
}






inline void TopoDS_TShape::Closed(const Standard_Boolean M)
{
  if (M) myFlags |=  (1<<4);
  else   myFlags &= ~(1<<4);
}






inline Standard_Boolean TopoDS_TShape::Infinite() const
{
  return ((myFlags & (1<<5)) != 0);
}






inline void TopoDS_TShape::Infinite(const Standard_Boolean M)
{
  if (M) myFlags |=  (1<<5);
  else   myFlags &= ~(1<<5);
}






inline Standard_Boolean TopoDS_TShape::Convex() const
{
  return ((myFlags & (1<<6)) != 0);
}






inline void TopoDS_TShape::Convex(const Standard_Boolean M)
{
  if (M) myFlags |=  (1<<6);
  else   myFlags &= ~(1<<6);
}






inline const TopoDS_ListOfShape& TopoDS_TShape::Shapes() const
{
  return myShapes;
}






inline TopoDS_ListOfShape& TopoDS_TShape::ChangeShapes()
{
  return myShapes;
}
















inline TopoDS_Shape::TopoDS_Shape ()
 : myOrient(TopAbs_EXTERNAL)
{
}






inline Standard_Boolean TopoDS_Shape::IsNull () const
{
  return myTShape.IsNull();
}






inline void TopoDS_Shape::Nullify ()
{
  myTShape.Nullify();
}






inline const TopLoc_Location& TopoDS_Shape::Location () const
{
  return myLocation;
}






inline void TopoDS_Shape::Location (const TopLoc_Location& Loc)
{
  myLocation = Loc;
}






inline TopoDS_Shape TopoDS_Shape::Located (const TopLoc_Location& Loc) const
{
  TopoDS_Shape S(*this);
  S.Location(Loc);
  return S;
}






inline TopAbs_Orientation TopoDS_Shape::Orientation () const
{
  return myOrient;
}






inline void TopoDS_Shape::Orientation (const TopAbs_Orientation Orient)
{
  myOrient = Orient;
}






inline TopoDS_Shape TopoDS_Shape::Oriented (const TopAbs_Orientation Or) const
{
  TopoDS_Shape S(*this);
  S.Orientation(Or);
  return S;
}






inline const opencascade::handle<TopoDS_TShape>& TopoDS_Shape::TShape () const
{
  return myTShape;
}






inline TopAbs_ShapeEnum TopoDS_Shape::ShapeType() const
{
  return myTShape->ShapeType();
}






inline Standard_Boolean TopoDS_Shape::Free () const
{
  return myTShape->Free();
}






inline void TopoDS_Shape::Free (const Standard_Boolean B)
{
  myTShape->Free(B);
}






inline Standard_Boolean TopoDS_Shape::Locked () const
{
  return myTShape->Locked();
}






inline void TopoDS_Shape::Locked (const Standard_Boolean B)
{
  myTShape->Locked(B);
}






inline Standard_Boolean TopoDS_Shape::Modified () const
{
  return myTShape->Modified();
}






inline void TopoDS_Shape::Modified (const Standard_Boolean B)
{
  myTShape->Modified(B);
}






inline Standard_Boolean TopoDS_Shape::Checked () const
{
  return myTShape->Checked();
}






inline void TopoDS_Shape::Checked (const Standard_Boolean B)
{
  myTShape->Checked(B);
}






inline Standard_Boolean TopoDS_Shape::Orientable () const
{
  return myTShape->Orientable();
}






inline void TopoDS_Shape::Orientable (const Standard_Boolean B)
{
  myTShape->Orientable(B);
}






inline Standard_Boolean TopoDS_Shape::Closed () const
{
  return myTShape->Closed();
}






inline void TopoDS_Shape::Closed (const Standard_Boolean B)
{
  myTShape->Closed(B);
}






inline Standard_Boolean TopoDS_Shape::Infinite () const
{
  return myTShape->Infinite();
}






inline void TopoDS_Shape::Infinite (const Standard_Boolean B)
{
  myTShape->Infinite(B);
}






inline Standard_Boolean TopoDS_Shape::Convex () const
{
  return myTShape->Convex();
}






inline void TopoDS_Shape::Convex (const Standard_Boolean B)
{
  myTShape->Convex(B);
}






inline void TopoDS_Shape::Move (const TopLoc_Location& position)
{
  myLocation = position * myLocation;
}






inline TopoDS_Shape TopoDS_Shape::Moved 
  (const TopLoc_Location& position) const
{
  TopoDS_Shape S(*this);
  S.Move(position);
  return S;
}






inline void TopoDS_Shape::Reverse()
{
  myOrient = TopAbs::Reverse(myOrient);
}






inline TopoDS_Shape  TopoDS_Shape::Reversed() const
{
  TopoDS_Shape S(*this);
  S.Reverse();
  return S;
}






inline void TopoDS_Shape::Complement()
{
  myOrient = TopAbs::Complement(myOrient);
}






inline TopoDS_Shape TopoDS_Shape::Complemented() const
{
  TopoDS_Shape S(*this);
  S.Complement();
  return S;
}






inline void TopoDS_Shape::Compose(const TopAbs_Orientation Orient)
{
  myOrient = TopAbs::Compose(myOrient,Orient);
}






inline TopoDS_Shape TopoDS_Shape::Composed
  (const TopAbs_Orientation Orient) const
{
  TopoDS_Shape S(*this);
  S.Compose(Orient);
  return S;
}






inline Standard_Boolean TopoDS_Shape::IsPartner (const TopoDS_Shape& other) const
{
  return (myTShape == other.myTShape);
}






inline Standard_Boolean TopoDS_Shape::IsSame (const TopoDS_Shape& other) const
{
  return (myTShape == other.myTShape) &&
         (myLocation == other.myLocation);
}






inline Standard_Boolean TopoDS_Shape::IsEqual (const TopoDS_Shape& other) const
{
  return (myTShape == other.myTShape) &&
         (myLocation == other.myLocation) &&
         (myOrient == other.myOrient);
}






inline Standard_Boolean TopoDS_Shape::IsNotEqual (const TopoDS_Shape& other) const
{
  return !IsEqual(other);
}






inline void TopoDS_Shape::EmptyCopy()
{
  myTShape = myTShape->EmptyCopy();
}






inline TopoDS_Shape TopoDS_Shape::EmptyCopied() const
{
  TopoDS_Shape S(*this);
  S.EmptyCopy();
  return S;
}
  





inline void TopoDS_Shape::TShape (const opencascade::handle<TopoDS_TShape>& TS)
{
  myTShape = TS;
}





inline Standard_Integer HashCode(const TopoDS_Shape& me,const Standard_Integer Upper) {
 return me.HashCode(Upper);
}






























class Standard_TypeMismatch;
class Standard_TypeMismatch; class Handle_Standard_TypeMismatch : public opencascade::handle<Standard_TypeMismatch> { public: Handle_Standard_TypeMismatch() {} Handle_Standard_TypeMismatch(opencascade::handle<Standard_TypeMismatch>&& theHandle) : opencascade::handle<Standard_TypeMismatch>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_TypeMismatch,T2>::value>::type> inline Handle_Standard_TypeMismatch(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_TypeMismatch>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_TypeMismatch,T2>::value>::type> inline Handle_Standard_TypeMismatch(const T2* theOther) : opencascade::handle<Standard_TypeMismatch>(theOther) {} template<typename T> inline Handle_Standard_TypeMismatch& operator=(T theOther) { opencascade::handle<Standard_TypeMismatch>::operator=(theOther); return *this; } };


  





class Standard_TypeMismatch : public Standard_DomainError { void Throw () const override { throw *this; } public: Standard_TypeMismatch() : Standard_DomainError() {} Standard_TypeMismatch(const Standard_CString theMessage) : Standard_DomainError(theMessage) {} static void Raise(const Standard_CString theMessage = "") { opencascade::handle<Standard_TypeMismatch> _E = new Standard_TypeMismatch; _E->Reraise(theMessage); } static void Raise(Standard_SStream& theMessage) { opencascade::handle<Standard_TypeMismatch> _E = new Standard_TypeMismatch; _E->Reraise (theMessage); } static opencascade::handle<Standard_TypeMismatch> NewInstance(const Standard_CString theMessage = "") { return new Standard_TypeMismatch(theMessage); } public: typedef Standard_DomainError base_type; static const char* get_type_name () { return "Standard_TypeMismatch"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<Standard_TypeMismatch>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return Standard_TypeMismatch::get_type_descriptor(); } };





inline static Standard_Boolean TopoDS_Mismatch(const TopoDS_Shape& S,
					       const TopAbs_ShapeEnum T)
{
  return S.IsNull() ? false : S.ShapeType() != T;
}






inline const TopoDS_Vertex&  TopoDS::Vertex(const TopoDS_Shape& S)
{
  if (TopoDS_Mismatch(S,TopAbs_VERTEX)) Standard_TypeMismatch::Raise("TopoDS::Vertex");;
  return *(TopoDS_Vertex*) &S;
}







inline TopoDS_Vertex& TopoDS::Vertex(TopoDS_Shape& S) 
{
  if (TopoDS_Mismatch(S,TopAbs_VERTEX)) Standard_TypeMismatch::Raise("TopoDS::Vertex");;
  return *(TopoDS_Vertex*) &S;
}







inline const TopoDS_Edge&  TopoDS::Edge(const TopoDS_Shape& S)
{
  if (TopoDS_Mismatch(S,TopAbs_EDGE)) Standard_TypeMismatch::Raise("TopoDS::Edge");;
  return *(TopoDS_Edge*) &S;
}







inline TopoDS_Edge& TopoDS::Edge(TopoDS_Shape& S) 
{
  if (TopoDS_Mismatch(S,TopAbs_EDGE)) Standard_TypeMismatch::Raise("TopoDS::Edge");;
  return *(TopoDS_Edge*) &S;
}







inline const TopoDS_Wire&  TopoDS::Wire(const TopoDS_Shape& S)
{
  if (TopoDS_Mismatch(S,TopAbs_WIRE)) Standard_TypeMismatch::Raise("TopoDS::Wire");;
  return *(TopoDS_Wire*) &S;
}







inline TopoDS_Wire& TopoDS::Wire(TopoDS_Shape& S) 
{
  if (TopoDS_Mismatch(S,TopAbs_WIRE)) Standard_TypeMismatch::Raise("TopoDS::Wire");;
  return *(TopoDS_Wire*) &S;
}







inline const TopoDS_Face&  TopoDS::Face(const TopoDS_Shape& S)
{
  if (TopoDS_Mismatch(S,TopAbs_FACE)) Standard_TypeMismatch::Raise("TopoDS::Face");;
  return *(TopoDS_Face*) &S;
}







inline TopoDS_Face& TopoDS::Face(TopoDS_Shape& S) 
{
  if (TopoDS_Mismatch(S,TopAbs_FACE)) Standard_TypeMismatch::Raise("TopoDS::Face");;
  return *(TopoDS_Face*) &S;
}







inline const TopoDS_Shell&  TopoDS::Shell(const TopoDS_Shape& S)
{
  if (TopoDS_Mismatch(S,TopAbs_SHELL)) Standard_TypeMismatch::Raise("TopoDS::Shell");;
  return *(TopoDS_Shell*) &S;
}







inline TopoDS_Shell& TopoDS::Shell(TopoDS_Shape& S) 
{
  if (TopoDS_Mismatch(S,TopAbs_SHELL)) Standard_TypeMismatch::Raise("TopoDS::Shell");;
  return *(TopoDS_Shell*) &S;
}







inline const TopoDS_Solid&  TopoDS::Solid(const TopoDS_Shape& S)
{
  if (TopoDS_Mismatch(S,TopAbs_SOLID)) Standard_TypeMismatch::Raise("TopoDS::Solid");;
  return *(TopoDS_Solid*) &S;
}







inline TopoDS_Solid& TopoDS::Solid(TopoDS_Shape& S) 
{
  if (TopoDS_Mismatch(S,TopAbs_SOLID)) Standard_TypeMismatch::Raise("TopoDS::Solid");;
  return *(TopoDS_Solid*) &S;
}







inline const TopoDS_CompSolid&  TopoDS::CompSolid(const TopoDS_Shape& S)
{
  if (TopoDS_Mismatch(S,TopAbs_COMPSOLID)) Standard_TypeMismatch::Raise("TopoDS::CompSolid");;
  return *(TopoDS_CompSolid*) &S;
}







inline TopoDS_CompSolid& TopoDS::CompSolid(TopoDS_Shape& S) 
{
  if (TopoDS_Mismatch(S,TopAbs_COMPSOLID)) Standard_TypeMismatch::Raise("TopoDS::CompSolid");;
  return *(TopoDS_CompSolid*) &S;
}







inline const TopoDS_Compound&  TopoDS::Compound(const TopoDS_Shape& S)
{
  if (TopoDS_Mismatch(S,TopAbs_COMPOUND)) Standard_TypeMismatch::Raise("TopoDS::Compound");;
  return *(TopoDS_Compound*) &S;
}







inline TopoDS_Compound& TopoDS::Compound(TopoDS_Shape& S) 
{
  if (TopoDS_Mismatch(S,TopAbs_COMPOUND)) Standard_TypeMismatch::Raise("TopoDS::Compound");;
  return *(TopoDS_Compound*) &S;
}












































class TopoDS_Face  : public TopoDS_Shape
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    TopoDS_Face();




protected:





private:





};
























inline TopoDS_Face::TopoDS_Face ()
{
}





















































class TopoDS_Iterator;
typedef TopoDS_Iterator* TopExp_Stack;







class Standard_NoMoreObject;
class Standard_NoSuchObject;
class TopoDS_Shape;



























































class TopExp_Explorer 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  __declspec( dllexport ) TopExp_Explorer();
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) TopExp_Explorer(const TopoDS_Shape& S, const TopAbs_ShapeEnum ToFind, const TopAbs_ShapeEnum ToAvoid = TopAbs_SHAPE);
  
  
  
  
  
  
  
  __declspec( dllexport ) void Init (const TopoDS_Shape& S, const TopAbs_ShapeEnum ToFind, const TopAbs_ShapeEnum ToAvoid = TopAbs_SHAPE);
  
  
  
    Standard_Boolean More() const;
  
  
  
  
  __declspec( dllexport ) void Next();
  
  
  
  
  __declspec( dllexport ) const TopoDS_Shape& Current() const;
  
  
  
  __declspec( dllexport ) void ReInit();
  
  
  
    Standard_Integer Depth() const;
  
  
  
    void Clear();
  
  __declspec( dllexport ) void Destroy();
~TopExp_Explorer()
{
  Destroy();
}




protected:





private:



  TopExp_Stack myStack;
  Standard_Integer myTop;
  Standard_Integer mySizeOfStack;
  TopoDS_Shape myShape;
  Standard_Boolean hasMore;
  TopAbs_ShapeEnum toFind;
  TopAbs_ShapeEnum toAvoid;


};
















































class Standard_NoMoreObject;
class Standard_NoSuchObject;
class TopoDS_Shape;







class TopoDS_Iterator 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    TopoDS_Iterator();
  
  
  
  
  
  
  
  
    TopoDS_Iterator(const TopoDS_Shape& S, const Standard_Boolean cumOri = true, const Standard_Boolean cumLoc = true);
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void Initialize (const TopoDS_Shape& S, const Standard_Boolean cumOri = true, const Standard_Boolean cumLoc = true);
  
  
  
    Standard_Boolean More() const;
  
  
  
  
  
  __declspec( dllexport ) void Next();
  
  
  
  
  
    const TopoDS_Shape& Value() const;




protected:





private:



  TopoDS_Shape myShape;
  TopoDS_ListIteratorOfListOfShape myShapes;
  TopAbs_Orientation myOrientation;
  TopLoc_Location myLocation;


};


























inline TopoDS_Iterator::TopoDS_Iterator()
{}






inline TopoDS_Iterator::TopoDS_Iterator(const TopoDS_Shape& S,
                                        const Standard_Boolean cumOri,
                                        const Standard_Boolean cumLoc)
{
  Initialize(S,cumOri,cumLoc);
}






inline Standard_Boolean TopoDS_Iterator::More() const
{
  return myShapes.More();
}






inline const TopoDS_Shape& TopoDS_Iterator::Value() const
{
  if (!More()) Standard_NoSuchObject::Raise("TopoDS_Iterator::Value");;  
  return myShape;
}














inline Standard_Boolean  TopExp_Explorer::More()const 
{
  return hasMore;
}







inline Standard_Integer  TopExp_Explorer::Depth()const 
{
  return myTop;
}







inline void  TopExp_Explorer::Clear()
{
  hasMore = false;
  if(myTop >0) {
    for(int i=1;i<= myTop; i++)
      myStack[i].~TopoDS_Iterator();
  }
  myTop = 0;
}



















































































class TopoDS_Shape;



class TopTools_ShapeMapHasher 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
    static Standard_Integer HashCode (const TopoDS_Shape& S, const Standard_Integer Upper);
  
  
  
  
    static Standard_Boolean IsEqual (const TopoDS_Shape& S1, const TopoDS_Shape& S2);




protected:





private:





};

























inline Standard_Integer  TopTools_ShapeMapHasher::HashCode
  (const TopoDS_Shape& S, const Standard_Integer Upper)
{
  return S.HashCode(Upper);
}





inline Standard_Boolean  TopTools_ShapeMapHasher::IsEqual
  (const TopoDS_Shape& S1, const TopoDS_Shape& S2)
{
  return S1.IsSame(S2);
}



















































typedef void (* NCollection_DelMapNode) 
     (NCollection_ListNode*, opencascade::handle<NCollection_BaseAllocator>& theAl);









              

class NCollection_BaseMap 
{
public:
  
  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }
  void* operator new (size_t theSize, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { return theAllocator->Allocate(theSize); } void operator delete (void* theAddress, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { theAllocator->Free(theAddress); }

public:
  
  class Iterator
  {
  protected:
    
    Iterator (void) :
      myNbBuckets (0),
      myBuckets   (0),
      myBucket    (0),
      myNode      (0) {}
    
    
    Iterator (const NCollection_BaseMap& theMap) :
      myNbBuckets (theMap.myNbBuckets),
      myBuckets   (theMap.myData1),
      myBucket    (-1),
      myNode      (0)
    {
      if (!myBuckets) 
        myNbBuckets = -1;
      else
        do {
          myBucket++;
          if (myBucket > myNbBuckets) 
            return;
          myNode = myBuckets[myBucket];
        } while (!myNode);
    }

  public:
    
    void Initialize (const NCollection_BaseMap& theMap)
    {
      myNbBuckets = theMap.myNbBuckets;
      myBuckets = theMap.myData1;
      myBucket = -1;
      myNode = 0;
      if (!myBuckets) 
        myNbBuckets = -1;
      PNext();
    }

    
    void Reset (void)
    {
      myBucket = -1;
      myNode = 0;
      PNext();
    }
    
    
    Standard_Boolean IsEqual (const Iterator& theOther) const
    {
      return myBucket == theOther.myBucket && myNode == theOther.myNode;
    }

  protected:
    
    Standard_Boolean PMore (void) const
    { return (myNode != 0); }
    
    
    void PNext (void)
    {
      if (!myBuckets) 
        return; 
      if (myNode) 
      {
        myNode = myNode->Next();
        if (myNode) 
          return;
      }
      while (!myNode) 
      {
        myBucket++;
        if (myBucket > myNbBuckets) 
          return;
        myNode = myBuckets[myBucket];
      }
    }

  protected:
    
    Standard_Integer       myNbBuckets; 
    NCollection_ListNode **myBuckets;   
    Standard_Integer       myBucket;    
    NCollection_ListNode * myNode;      
  };

 public:
  

  
  Standard_Integer NbBuckets() const
  { return myNbBuckets; }

  
  Standard_Integer Extent() const
  { return mySize; }

  
  Standard_Boolean IsEmpty() const
  { return mySize == 0; }

  
  __declspec( dllexport ) void Statistics(Standard_OStream& S) const;

  
  const opencascade::handle<NCollection_BaseAllocator>& Allocator() const
  { return myAllocator; }

 protected:
  

  
  NCollection_BaseMap (const Standard_Integer NbBuckets,
                       const Standard_Boolean single,
                       const opencascade::handle<NCollection_BaseAllocator>& theAllocator)
  : myData1(0),
    myData2(0),
    isDouble(!single),
    mySaturated(false),
    myNbBuckets(NbBuckets),
    mySize(0)
  {
    myAllocator = (theAllocator.IsNull() ? NCollection_BaseAllocator::CommonBaseAllocator() : theAllocator);
  }

  
  virtual ~NCollection_BaseMap() {}

  
  __declspec( dllexport ) Standard_Boolean BeginResize 
    (const Standard_Integer  NbBuckets,
     Standard_Integer&       NewBuckets,
     NCollection_ListNode**& data1,
     NCollection_ListNode**& data2) const;

  
  __declspec( dllexport ) void EndResize 
    (const Standard_Integer NbBuckets,
     const Standard_Integer NewBuckets,
     NCollection_ListNode** data1,
     NCollection_ListNode** data2);

  
  Standard_Boolean Resizable() const
  { return IsEmpty() || (!mySaturated && (mySize > myNbBuckets)); }

  
  void Increment()
  { mySize++; }

  
  void Decrement() 
  { mySize--; }

  
  __declspec( dllexport ) void Destroy(NCollection_DelMapNode fDel,
                               Standard_Boolean doReleaseMemory = true);

  
  __declspec( dllexport ) Standard_Integer NextPrimeForMap
    (const Standard_Integer N) const;

  
  void exchangeMapsData (NCollection_BaseMap& theOther)
  {
    std::swap (myAllocator, theOther.myAllocator);
    std::swap (myData1,     theOther.myData1);
    std::swap (myData2,     theOther.myData2);
    
    std::swap (mySaturated, theOther.mySaturated);
    std::swap (myNbBuckets, theOther.myNbBuckets);
    std::swap (mySize,      theOther.mySize);
  }

 protected:
  
  opencascade::handle<NCollection_BaseAllocator> myAllocator;
  NCollection_ListNode ** myData1;
  NCollection_ListNode ** myData2;

 private: 
  
  Standard_Boolean isDouble;
  Standard_Boolean mySaturated;
  Standard_Integer myNbBuckets;
  Standard_Integer mySize;

  
  friend class Iterator;
};































class Standard_ImmutableObject;
class Standard_ImmutableObject; class Handle_Standard_ImmutableObject : public opencascade::handle<Standard_ImmutableObject> { public: Handle_Standard_ImmutableObject() {} Handle_Standard_ImmutableObject(opencascade::handle<Standard_ImmutableObject>&& theHandle) : opencascade::handle<Standard_ImmutableObject>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_ImmutableObject,T2>::value>::type> inline Handle_Standard_ImmutableObject(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_ImmutableObject>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_ImmutableObject,T2>::value>::type> inline Handle_Standard_ImmutableObject(const T2* theOther) : opencascade::handle<Standard_ImmutableObject>(theOther) {} template<typename T> inline Handle_Standard_ImmutableObject& operator=(T theOther) { opencascade::handle<Standard_ImmutableObject>::operator=(theOther); return *this; } };


  





class Standard_ImmutableObject : public Standard_DomainError { void Throw () const override { throw *this; } public: Standard_ImmutableObject() : Standard_DomainError() {} Standard_ImmutableObject(const Standard_CString theMessage) : Standard_DomainError(theMessage) {} static void Raise(const Standard_CString theMessage = "") { opencascade::handle<Standard_ImmutableObject> _E = new Standard_ImmutableObject; _E->Reraise(theMessage); } static void Raise(Standard_SStream& theMessage) { opencascade::handle<Standard_ImmutableObject> _E = new Standard_ImmutableObject; _E->Reraise (theMessage); } static opencascade::handle<Standard_ImmutableObject> NewInstance(const Standard_CString theMessage = "") { return new Standard_ImmutableObject(theMessage); } public: typedef Standard_DomainError base_type; static const char* get_type_name () { return "Standard_ImmutableObject"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<Standard_ImmutableObject>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return Standard_ImmutableObject::get_type_descriptor(); } };






























template <class TheKeyType> 
inline Standard_Integer HashCode_Proxy (const TheKeyType& theKey, 
                                        const Standard_Integer Upper)
{
  return HashCode (theKey, Upper);
}






template <class TheKeyType> 
inline Standard_Boolean IsEqual (const TheKeyType& theKey1, 
                                 const TheKeyType& theKey2)
{
  return theKey1 == theKey2;
}






template <class TheKeyType> 
inline Standard_Boolean IsEqual_Proxy (const TheKeyType& theKey1, 
                                       const TheKeyType& theKey2)
{
  return IsEqual (theKey1, theKey2);
}










template <class TheKeyType> class NCollection_DefaultHasher {
public:
  
  static Standard_Integer HashCode(const TheKeyType& theKey, 
                                   const Standard_Integer Upper) {
    return HashCode_Proxy(theKey, Upper);
  }
  
  static Standard_Boolean IsEqual(const TheKeyType& theKey1, 
                                  const TheKeyType& theKey2) {
    return IsEqual_Proxy(theKey1, theKey2);
  }
};















            

template < class TheKeyType, 
           class Hasher = NCollection_DefaultHasher<TheKeyType> > 
class NCollection_IndexedMap : public NCollection_BaseMap
{
  
 private:
  class IndexedMapNode : public NCollection_TListNode<TheKeyType>
  {
  public:
    
    IndexedMapNode (const TheKeyType&      theKey1, 
                    const Standard_Integer theKey2, 
                    NCollection_ListNode*  theNext1, 
                    NCollection_ListNode*  theNext2) :
      NCollection_TListNode<TheKeyType> (theKey1, theNext1),
      myKey2(theKey2),
      myNext2((IndexedMapNode*)theNext2)
    { 
    }
    
    TheKeyType& Key1 (void)
    { return this->ChangeValue(); }
    
    Standard_Integer& Key2 (void)
    { return myKey2; }
    
    IndexedMapNode*& Next2 (void)
    { return myNext2; }
    
    
    static void delNode (NCollection_ListNode * theNode, 
                         opencascade::handle<NCollection_BaseAllocator>& theAl)
    {
      ((IndexedMapNode *) theNode)->~IndexedMapNode();
      theAl->Free(theNode);
    }

  private:
    Standard_Integer myKey2;
    IndexedMapNode * myNext2;
  };

 public:
  
  class Iterator
  {
  public:
    
    Iterator (void) :
      myMap(0),
      myIndex(0) {}
    
    Iterator (const NCollection_IndexedMap& theMap) :
      myMap((NCollection_IndexedMap *) &theMap),
      myIndex(1) {}
    
    Standard_Boolean More(void) const
    { return (myMap != 0) && (myIndex <= myMap->Extent()); }
    
    void Next(void)
    { myIndex++; }
    
    const TheKeyType& Value(void) const
    {
      if (!More()) Standard_NoSuchObject::Raise("NCollection_IndexedMap::Iterator::Value");;
      return myMap->FindKey(myIndex);
    }
    
    TheKeyType& ChangeValue(void) const
    {  
      Standard_ImmutableObject::Raise ("impossible to ChangeValue");
      return * (TheKeyType *) 0; 
    }
    
    Standard_Boolean IsEqual (const Iterator& theOther) const
    {
      return myMap == theOther.myMap && myIndex == theOther.myIndex;
    }
    
  private:
    NCollection_IndexedMap * myMap;   
    Standard_Integer         myIndex; 
  };
  
  
  typedef NCollection_StlIterator<std::forward_iterator_tag, Iterator, TheKeyType, true> const_iterator;

  
  const_iterator cbegin() const { return Iterator (*this); }

  
  const_iterator cend() const { return Iterator(); }
  
 public:
  

  
  NCollection_IndexedMap (const Standard_Integer NbBuckets=1,
                          const opencascade::handle<NCollection_BaseAllocator>& theAllocator=0L)
  : NCollection_BaseMap (NbBuckets, false, theAllocator) {}

  
  NCollection_IndexedMap (const NCollection_IndexedMap& theOther)
  : NCollection_BaseMap (theOther.NbBuckets(), false, theOther.myAllocator)
  { *this = theOther; }

  
  
  void Exchange (NCollection_IndexedMap& theOther)
  {
    this->exchangeMapsData (theOther);
  }

  
  
  NCollection_IndexedMap& Assign (const NCollection_IndexedMap& theOther)
  { 
    if (this == &theOther)
      return *this;

    Clear();
    ReSize (theOther.Extent()-1);
    Standard_Integer i, iLength=theOther.Extent();
    for (i=1; i<=iLength; i++)
    {
      TheKeyType aKey1 = theOther(i);
      Standard_Integer iK1 = Hasher::HashCode (aKey1, NbBuckets());
      Standard_Integer iK2 = ::HashCode (i, NbBuckets());
      IndexedMapNode * pNode = new (this->myAllocator) IndexedMapNode (aKey1, i, 
                                                                       myData1[iK1], 
                                                                       myData2[iK2]);
      myData1[iK1] = pNode;
      myData2[iK2] = pNode;
      Increment();
    }
    return *this;
  }

  
  NCollection_IndexedMap& operator= (const NCollection_IndexedMap& theOther)
  {
    return Assign (theOther);
  }

  
  void ReSize (const Standard_Integer N)
  {
    NCollection_ListNode** ppNewData1 = 0;
    NCollection_ListNode** ppNewData2 = 0;
    Standard_Integer newBuck;
    if (BeginResize (N, newBuck, ppNewData1, ppNewData2))
    {
      if (myData1) 
      {
        IndexedMapNode *p, *q;
        Standard_Integer i, iK1, iK2;
        for (i = 0; i <= NbBuckets(); i++) 
        {
          if (myData1[i]) 
          {
            p = (IndexedMapNode *) myData1[i];
            while (p) 
            {
              iK1 =Hasher::HashCode(p->Key1(), newBuck);
              q = (IndexedMapNode*) p->Next();
              p->Next()  = ppNewData1[iK1];
              ppNewData1[iK1] = p;
              if (p->Key2() > 0) 
              {
                iK2 = ::HashCode (p->Key2(), newBuck);
                p->Next2() = (IndexedMapNode*)ppNewData2[iK2];
                ppNewData2[iK2] = p;
              }
              p = q;
            }
          }
        }
      }
      EndResize (N, newBuck, ppNewData1, ppNewData2);
    }
  }

  
  Standard_Integer Add (const TheKeyType& theKey1)
  {
    if (Resizable()) 
      ReSize(Extent());
    Standard_Integer iK1 = Hasher::HashCode (theKey1, NbBuckets());
    IndexedMapNode * pNode;
    pNode = (IndexedMapNode *) myData1[iK1];
    while (pNode)
    {
      if (Hasher::IsEqual (pNode->Key1(), theKey1))
        return pNode->Key2();
      pNode = (IndexedMapNode *) pNode->Next();
    }
    Increment();
    Standard_Integer iK2 = ::HashCode(Extent(),NbBuckets());
    pNode = new (this->myAllocator) IndexedMapNode (theKey1, Extent(), 
                                                    myData1[iK1], myData2[iK2]);
    myData1[iK1] = pNode;
    myData2[iK2] = pNode;
    return Extent();
  }

  
  Standard_Boolean Contains (const TheKeyType& theKey1) const
  {
    if (IsEmpty()) 
      return false;
    Standard_Integer iK1 = Hasher::HashCode (theKey1, NbBuckets());
    IndexedMapNode * pNode1;
    pNode1 = (IndexedMapNode *) myData1[iK1];
    while (pNode1) 
    {
      if (Hasher::IsEqual(pNode1->Key1(), theKey1)) 
        return true;
      pNode1 = (IndexedMapNode *) pNode1->Next();
    }
    return false;
  }

  
  void Substitute (const Standard_Integer theIndex,
                   const TheKeyType& theKey1)
  {
    if (theIndex < 1 || theIndex > Extent()) Standard_OutOfRange::Raise("NCollection_IndexedMap::Substitute : " "Index is out of range");;

    IndexedMapNode * p;
    
    Standard_Integer iK1 = Hasher::HashCode (theKey1, NbBuckets());
    p = (IndexedMapNode *) myData1[iK1];
    while (p)
    {
      if (Hasher::IsEqual (p->Key1(), theKey1))
      {
        if (p->Key2() != theIndex)
        {
          Standard_DomainError::Raise ("NCollection_IndexedMap::Substitute : "
                                       "Attempt to substitute existing key");
        }
        p->Key1() = theKey1;
        return;
      }
      p = (IndexedMapNode *) p->Next();
    }

    
    Standard_Integer iK2 = ::HashCode (theIndex, NbBuckets());
    p = (IndexedMapNode *) myData2[iK2];
    while (p) 
    {
      if (p->Key2() == theIndex) 
        break;
      p = (IndexedMapNode*) p->Next2();
    }
    
    
    Standard_Integer iK = Hasher::HashCode (p->Key1(), NbBuckets());
    IndexedMapNode * q = (IndexedMapNode *) myData1[iK];
    if (q == p)
      myData1[iK] = (IndexedMapNode *) p->Next();
    else 
    {
      while (q->Next() != p) 
        q = (IndexedMapNode *) q->Next();
      q->Next() = p->Next();
    }

    
    p->Key1() = theKey1;
    p->Next() = myData1[iK1];
    myData1[iK1] = p;
  }

  
  void Swap (const Standard_Integer theIndex1,
             const Standard_Integer theIndex2)
  {
    if (theIndex1 < 1 || theIndex1 > Extent() || theIndex2 < 1 || theIndex2 > Extent()) Standard_OutOfRange::Raise("NCollection_IndexedMap::Swap");;

    if (theIndex1 == theIndex2)
    {
      return;
    }

    const Standard_Integer aK1 = ::HashCode (theIndex1, NbBuckets());
    const Standard_Integer aK2 = ::HashCode (theIndex2, NbBuckets());

    IndexedMapNode* aP1 = (IndexedMapNode*) myData2[aK1];
    IndexedMapNode* aP2 = (IndexedMapNode*) myData2[aK2];

    if (aP1->Key2() == theIndex1)
    {
      myData2[aK1] = (IndexedMapNode *) aP1->Next2();
    }
    else
    {
      IndexedMapNode* aQ = aP1;
      for (aP1 = aQ->Next2(); aP1->Key2() != theIndex1; aQ = aP1, aP1 = aQ->Next2()) { }

      aQ->Next2() = aP1->Next2();
    }

    if (aP2->Key2() == theIndex2)
    {
      myData2[aK2] = (IndexedMapNode *) aP2->Next2();
    }
    else
    {
      IndexedMapNode* aQ = aP2;
      for (aP2 = aQ->Next2(); aP2->Key2() != theIndex2; aQ = aP2, aP2 = aQ->Next2()) { }

      aQ->Next2() = aP2->Next2();
    }

    std::swap (aP1->Key2(),
               aP2->Key2());

    aP1->Next2() = (IndexedMapNode*) myData2[aK2];
    myData2[aK2] = aP1;

    aP2->Next2() = (IndexedMapNode*) myData2[aK1];
    myData2[aK1] = aP2;
  }

  
  void RemoveLast (void)
  {
    if (Extent() == 0) Standard_OutOfRange::Raise("NCollection_IndexedMap::RemoveLast");;

    IndexedMapNode * p, * q;
    
    Standard_Integer iK2 = ::HashCode (Extent(), NbBuckets());
    p = (IndexedMapNode *) myData2[iK2];
    q = 0;
    while (p) 
    {
      if (p->Key2() == Extent()) 
        break;
      q = p;
      p = (IndexedMapNode*) p->Next2();
    }
    if (q == 0) 
      myData2[iK2] = (IndexedMapNode *) p->Next2();
    else 
      q->Next2() = p->Next2();
    
    
    Standard_Integer iK1 = Hasher::HashCode (p->Key1(), NbBuckets());
    q = (IndexedMapNode *) myData1[iK1];
    if (q == p)
      myData1[iK1] = (IndexedMapNode *) p->Next();
    else 
    {
      while (q->Next() != p) 
        q = (IndexedMapNode *) q->Next();
      q->Next() = p->Next();
    }
    p->~IndexedMapNode();
    this->myAllocator->Free(p);
    Decrement();
  }

  
  const TheKeyType& FindKey (const Standard_Integer theKey2) const
  {
    if (theKey2 < 1 || theKey2 > Extent()) Standard_OutOfRange::Raise("NCollection_IndexedMap::FindKey");;

    IndexedMapNode * pNode2 =
      (IndexedMapNode *) myData2[::HashCode(theKey2,NbBuckets())];
    while (pNode2)
    {
      if (pNode2->Key2() == theKey2) 
        return pNode2->Key1();
      pNode2 = (IndexedMapNode*) pNode2->Next2();
    }
    Standard_NoSuchObject::Raise("NCollection_IndexedMap::FindKey");
    return pNode2->Key1(); 
  }

  
  const TheKeyType& operator() (const Standard_Integer theKey2) const
  { return FindKey (theKey2); }

  
  Standard_Integer FindIndex(const TheKeyType& theKey1) const
  {
    if (IsEmpty()) return 0;
    IndexedMapNode * pNode1 = 
      (IndexedMapNode *) myData1[Hasher::HashCode(theKey1,NbBuckets())];
    while (pNode1)
    {
      if (Hasher::IsEqual (pNode1->Key1(), theKey1)) 
        return pNode1->Key2();
      pNode1 = (IndexedMapNode*) pNode1->Next();
    }
    return 0;
  }

  
  
  void Clear(const Standard_Boolean doReleaseMemory = true)
  { Destroy (IndexedMapNode::delNode, doReleaseMemory); }

  
  void Clear (const opencascade::handle<NCollection_BaseAllocator>& theAllocator)
  { 
    Clear();
    this->myAllocator = ( ! theAllocator.IsNull() ? theAllocator :
                    NCollection_BaseAllocator::CommonBaseAllocator() );
  }

  
  virtual ~NCollection_IndexedMap (void)
  { Clear(); }

  
  Standard_Integer Size(void) const
  { return Extent(); }
};




typedef NCollection_IndexedMap<TopoDS_Shape,TopTools_ShapeMapHasher> TopTools_IndexedMapOfShape;


























typedef std::istream Standard_IStream;










































































class TCollection_HAsciiString;













class Message_ProgressScale 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  __declspec( dllexport ) Message_ProgressScale();
  
    void SetName (const Standard_CString theName);
  
  
    void SetName (const opencascade::handle<TCollection_HAsciiString>& theName);
  
  
  
    opencascade::handle<TCollection_HAsciiString> GetName() const;
  
  
    void SetMin (const Standard_Real theMin);
  
  
    Standard_Real GetMin() const;
  
  
    void SetMax (const Standard_Real theMax);
  
  
    Standard_Real GetMax() const;
  
  
    void SetRange (const Standard_Real min, const Standard_Real max);
  
  
    void SetStep (const Standard_Real theStep);
  
  
    Standard_Real GetStep() const;
  
  
    void SetInfinite (const Standard_Boolean theInfinite = true);
  
  
    Standard_Boolean GetInfinite() const;
  
  
    void SetScale (const Standard_Real min, const Standard_Real max, const Standard_Real step, const Standard_Boolean theInfinite = true);
  
  
    void SetSpan (const Standard_Real first, const Standard_Real last);
  
    Standard_Real GetFirst() const;
  
  
    Standard_Real GetLast() const;
  
  __declspec( dllexport ) Standard_Real LocalToBase (const Standard_Real val) const;
  
  
  __declspec( dllexport ) Standard_Real BaseToLocal (const Standard_Real val) const;




protected:





private:



  opencascade::handle<TCollection_HAsciiString> myName;
  Standard_Real myMin;
  Standard_Real myMax;
  Standard_Real myStep;
  Standard_Boolean myInfinite;
  Standard_Real myFirst;
  Standard_Real myLast;


};


















































































typedef Standard_Character* Standard_PCharacter;










class Standard_NullObject;
class Standard_OutOfRange;
class Standard_NumericError;
class Standard_NegativeValue;
class TCollection_HAsciiString;
class TCollection_ExtendedString;














class TCollection_AsciiString 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  __declspec( dllexport ) TCollection_AsciiString();
  
  
  __declspec( dllexport ) TCollection_AsciiString(const Standard_CString message);
  
  
  __declspec( dllexport ) TCollection_AsciiString(const Standard_CString message, const Standard_Integer aLen);
  
  
  __declspec( dllexport ) TCollection_AsciiString(const Standard_Character aChar);
  
  
  
  __declspec( dllexport ) TCollection_AsciiString(const Standard_Integer length, const Standard_Character filler);
  
  
  __declspec( dllexport ) TCollection_AsciiString(const Standard_Integer value);
  
  
  __declspec( dllexport ) TCollection_AsciiString(const Standard_Real value);
  
  
  __declspec( dllexport ) TCollection_AsciiString(const TCollection_AsciiString& astring);
  
  
  
  __declspec( dllexport ) TCollection_AsciiString(const TCollection_AsciiString& astring, const Standard_Character message);
  
  
  
  __declspec( dllexport ) TCollection_AsciiString(const TCollection_AsciiString& astring, const Standard_CString message);
  
  
  
  __declspec( dllexport ) TCollection_AsciiString(const TCollection_AsciiString& astring, const TCollection_AsciiString& message);
  
  
  
  
  
  __declspec( dllexport ) TCollection_AsciiString(const TCollection_ExtendedString& astring, const Standard_Character replaceNonAscii = 0);


  
  
  
  
  
  __declspec( dllexport ) TCollection_AsciiString (const Standard_WideChar* theStringUtf);


  
  __declspec( dllexport ) void AssignCat (const Standard_Character other);
void operator += (const Standard_Character other)
{
  AssignCat(other);
}
  
  
  __declspec( dllexport ) void AssignCat (const Standard_Integer other);
void operator += (const Standard_Integer other)
{
  AssignCat(other);
}
  
  
  __declspec( dllexport ) void AssignCat (const Standard_Real other);
void operator += (const Standard_Real other)
{
  AssignCat(other);
}
  
  
  
  
  
  
  
  __declspec( dllexport ) void AssignCat (const Standard_CString other);
void operator += (const Standard_CString other)
{
  AssignCat(other);
}
  
  
  
  __declspec( dllexport ) void AssignCat (const TCollection_AsciiString& other);
void operator += (const TCollection_AsciiString& other)
{
  AssignCat(other);
}
  
  
  
  
  
  
  
  __declspec( dllexport ) void Capitalize();
  
  
  
  
  
  
  
  
  
  
  
    TCollection_AsciiString Cat (const Standard_Character other) const;
  TCollection_AsciiString operator + (const Standard_Character other) const
{
  return Cat(other);
}
  
  
  
  
  
  
  
  
  
  
    TCollection_AsciiString Cat (const Standard_Integer other) const;
  TCollection_AsciiString operator + (const Standard_Integer other) const
{
  return Cat(other);
}
  
  
  
  
  
  
  
  
  
  
    TCollection_AsciiString Cat (const Standard_Real other) const;
  TCollection_AsciiString operator + (const Standard_Real other) const
{
  return Cat(other);
}
  
  
  
  
  
  
  
  
  
  
  
    TCollection_AsciiString Cat (const Standard_CString other) const;
  TCollection_AsciiString operator + (const Standard_CString other) const
{
  return Cat(other);
}
  
  
  
    TCollection_AsciiString Cat (const TCollection_AsciiString& other) const;
  TCollection_AsciiString operator + (const TCollection_AsciiString& other) const
{
  return Cat(other);
}
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void Center (const Standard_Integer Width, const Standard_Character Filler);
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void ChangeAll (const Standard_Character aChar, const Standard_Character NewChar, const Standard_Boolean CaseSensitive = true);
  
  
  
  __declspec( dllexport ) void Clear();
  
  
  
  
  __declspec( dllexport ) void Copy (const Standard_CString fromwhere);
void operator = (const Standard_CString fromwhere)
{
  Copy(fromwhere);
}
  
  
  
  
  __declspec( dllexport ) void Copy (const TCollection_AsciiString& fromwhere);
void operator = (const TCollection_AsciiString& fromwhere)
{
  Copy(fromwhere);
}
  
  
  __declspec( dllexport ) ~TCollection_AsciiString();
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Integer FirstLocationInSet (const TCollection_AsciiString& Set, const Standard_Integer FromIndex, const Standard_Integer ToIndex) const;
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Integer FirstLocationNotInSet (const TCollection_AsciiString& Set, const Standard_Integer FromIndex, const Standard_Integer ToIndex) const;
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void Insert (const Standard_Integer where, const Standard_Character what);
  
  
  
  
  
  __declspec( dllexport ) void Insert (const Standard_Integer where, const Standard_CString what);
  
  
  __declspec( dllexport ) void Insert (const Standard_Integer where, const TCollection_AsciiString& what);
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void InsertAfter (const Standard_Integer Index, const TCollection_AsciiString& other);
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void InsertBefore (const Standard_Integer Index, const TCollection_AsciiString& other);
  
  
  Standard_Boolean IsEmpty() const { return mylength == 0; }

  
  
  
  __declspec( dllexport ) Standard_Boolean IsEqual (const Standard_CString other) const;
Standard_Boolean operator == (const Standard_CString other) const
{
  return IsEqual(other);
}
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsEqual (const TCollection_AsciiString& other) const;
Standard_Boolean operator == (const TCollection_AsciiString& other) const
{
  return IsEqual(other);
}
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsDifferent (const Standard_CString other) const;
Standard_Boolean operator != (const Standard_CString other) const
{
  return IsDifferent(other);
}
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsDifferent (const TCollection_AsciiString& other) const;
Standard_Boolean operator != (const TCollection_AsciiString& other) const
{
  return IsDifferent(other);
}
  
  
  __declspec( dllexport ) Standard_Boolean IsLess (const Standard_CString other) const;
Standard_Boolean operator < (const Standard_CString other) const
{
  return IsLess(other);
}
  
  
  __declspec( dllexport ) Standard_Boolean IsLess (const TCollection_AsciiString& other) const;
Standard_Boolean operator < (const TCollection_AsciiString& other) const
{
  return IsLess(other);
}
  
  
  __declspec( dllexport ) Standard_Boolean IsGreater (const Standard_CString other) const;
Standard_Boolean operator > (const Standard_CString other) const
{
  return IsGreater(other);
}
  
  
  __declspec( dllexport ) Standard_Boolean IsGreater (const TCollection_AsciiString& other) const;
Standard_Boolean operator > (const TCollection_AsciiString& other) const
{
  return IsGreater(other);
}

  
  __declspec( dllexport ) Standard_Boolean StartsWith (const TCollection_AsciiString& theStartString) const;

  
  __declspec( dllexport ) Standard_Boolean EndsWith (const TCollection_AsciiString& theEndString) const;

  
  
  
  __declspec( dllexport ) Standard_Integer IntegerValue() const;
  
  
  
  __declspec( dllexport ) Standard_Boolean IsIntegerValue() const;
  
  
  
  __declspec( dllexport ) Standard_Boolean IsRealValue() const;
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsAscii() const;
  
  
  __declspec( dllexport ) void LeftAdjust();
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void LeftJustify (const Standard_Integer Width, const Standard_Character Filler);
  
  
  
  
  
  
  
  
  
  
  
  
    Standard_Integer Length() const;
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Integer Location (const TCollection_AsciiString& other, const Standard_Integer FromIndex, const Standard_Integer ToIndex) const;
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Integer Location (const Standard_Integer N, const Standard_Character C, const Standard_Integer FromIndex, const Standard_Integer ToIndex) const;
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void LowerCase();
  
  
  
  
  
  
  
  __declspec( dllexport ) void Prepend (const TCollection_AsciiString& other);
  
  
  __declspec( dllexport ) void Print (Standard_OStream& astream) const;
friend __declspec( dllexport ) Standard_OStream& operator << (Standard_OStream& astream,const TCollection_AsciiString& astring);
  
  
  __declspec( dllexport ) void Read (Standard_IStream& astream);
friend __declspec( dllexport ) Standard_IStream& operator >> (Standard_IStream& astream, TCollection_AsciiString& astring);
  
  
  
  
  
  __declspec( dllexport ) Standard_Real RealValue() const;
  
  
  
  
  
  
  
  __declspec( dllexport ) void RemoveAll (const Standard_Character C, const Standard_Boolean CaseSensitive);
  
  
  __declspec( dllexport ) void RemoveAll (const Standard_Character what);
  
  
  
  
  
  
  
  __declspec( dllexport ) void Remove (const Standard_Integer where, const Standard_Integer ahowmany = 1);
  
  
  __declspec( dllexport ) void RightAdjust();
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void RightJustify (const Standard_Integer Width, const Standard_Character Filler);
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Integer Search (const Standard_CString what) const;
  
  
  
  
  __declspec( dllexport ) Standard_Integer Search (const TCollection_AsciiString& what) const;
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Integer SearchFromEnd (const Standard_CString what) const;
  
  
  
  
  __declspec( dllexport ) Standard_Integer SearchFromEnd (const TCollection_AsciiString& what) const;
  
  
  
  
  
  
  
  __declspec( dllexport ) void SetValue (const Standard_Integer where, const Standard_Character what);
  
  
  
  
  
  
  
  __declspec( dllexport ) void SetValue (const Standard_Integer where, const Standard_CString what);
  
  
  __declspec( dllexport ) void SetValue (const Standard_Integer where, const TCollection_AsciiString& what);
  
  
  
  
  
  __declspec( dllexport ) TCollection_AsciiString Split (const Standard_Integer where);
  
  
  
  
  
  
  
  
  
  
  
  
    TCollection_AsciiString SubString (const Standard_Integer FromIndex, const Standard_Integer ToIndex) const;
  
  
  
  
    Standard_CString ToCString() const;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) TCollection_AsciiString Token (const Standard_CString separators = " \t", const Standard_Integer whichone = 1) const;
  
  
  
  __declspec( dllexport ) void Trunc (const Standard_Integer ahowmany);
  
  
  __declspec( dllexport ) void UpperCase();
  
  
  
  __declspec( dllexport ) Standard_Integer UsefullLength() const;
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Character Value (const Standard_Integer where) const;
  
  
  
    static Standard_Integer HashCode (const TCollection_AsciiString& astring, const Standard_Integer Upper);
  
  
  
    static Standard_Boolean IsEqual (const TCollection_AsciiString& string1, const TCollection_AsciiString& string2);
  
  
  
    static Standard_Boolean IsEqual (const TCollection_AsciiString& string1, const Standard_CString string2);

  
  __declspec( dllexport ) static Standard_Boolean IsSameString (const TCollection_AsciiString& theString1,
                                                        const TCollection_AsciiString& theString2,
                                                        const Standard_Boolean theIsCaseSensitive);

friend class TCollection_HAsciiString;

private:

  __declspec( dllexport ) void Split (const Standard_Integer where, TCollection_AsciiString& result);
  
  __declspec( dllexport ) void SubString (const Standard_Integer FromIndex, const Standard_Integer ToIndex, TCollection_AsciiString& result) const;
  
  __declspec( dllexport ) void Token (const Standard_CString separators, const Standard_Integer whichone, TCollection_AsciiString& result) const;

private:

  Standard_PCharacter mystring; 
  Standard_Integer    mylength; 

};























inline Standard_Integer HashCode(const TCollection_AsciiString& astring,
						   const Standard_Integer Upper)
{
  return TCollection_AsciiString::HashCode(astring,Upper);
}





inline Standard_Boolean IsEqual(const TCollection_AsciiString& string1,
						  const TCollection_AsciiString& string2)
{
  return TCollection_AsciiString::IsEqual(string1,string2);
}






inline Standard_CString TCollection_AsciiString::ToCString()const
{
  return mystring;
}


inline Standard_Integer TCollection_AsciiString::Length() const
{
 return mylength;
}

inline TCollection_AsciiString TCollection_AsciiString::Cat(const TCollection_AsciiString& other) const
{
  return TCollection_AsciiString( *this , other ) ;
}

inline TCollection_AsciiString TCollection_AsciiString::Cat(const Standard_CString other) const 
{
 return TCollection_AsciiString( *this , other ) ;
}

inline TCollection_AsciiString TCollection_AsciiString::Cat(const Standard_Character other) const 
{
 return TCollection_AsciiString( *this , other ) ;
}

inline TCollection_AsciiString TCollection_AsciiString::Cat(const Standard_Integer other) const 
{

 return TCollection_AsciiString( *this , TCollection_AsciiString(other) ) ;
}

inline TCollection_AsciiString TCollection_AsciiString::Cat(const Standard_Real other) const 
{

 return TCollection_AsciiString( *this , TCollection_AsciiString(other) ) ;
}




inline Standard_Integer TCollection_AsciiString::HashCode(const TCollection_AsciiString& astring,
						   const Standard_Integer Upper)
{
  return ::HashCode(astring.ToCString(),Upper);
}





inline Standard_Boolean TCollection_AsciiString::IsEqual(const TCollection_AsciiString& string1,
						  const TCollection_AsciiString& string2)
{
  return string1.IsEqual(string2);
}




inline Standard_Boolean TCollection_AsciiString::IsEqual(const TCollection_AsciiString& string1,
						  const Standard_CString string2)
{
  return string1.IsEqual( string2 );
}




inline TCollection_AsciiString TCollection_AsciiString::SubString(const Standard_Integer FromIndex,
							   const Standard_Integer ToIndex) const
{

  if (ToIndex > mylength || FromIndex <= 0 || FromIndex > ToIndex ) Standard_OutOfRange::Raise();

  return TCollection_AsciiString( &mystring [ FromIndex - 1 ] ,
                                  ToIndex - FromIndex + 1 ) ;
}












class Standard_NullObject;
class Standard_OutOfRange;
class Standard_NumericError;
class Standard_NegativeValue;
class TCollection_AsciiString;
class TCollection_HExtendedString;


class TCollection_HAsciiString;
class TCollection_HAsciiString; class Handle_TCollection_HAsciiString : public opencascade::handle<TCollection_HAsciiString> { public: Handle_TCollection_HAsciiString() {} Handle_TCollection_HAsciiString(opencascade::handle<TCollection_HAsciiString>&& theHandle) : opencascade::handle<TCollection_HAsciiString>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <TCollection_HAsciiString,T2>::value>::type> inline Handle_TCollection_HAsciiString(const opencascade::handle<T2>& theOther) : opencascade::handle<TCollection_HAsciiString>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <TCollection_HAsciiString,T2>::value>::type> inline Handle_TCollection_HAsciiString(const T2* theOther) : opencascade::handle<TCollection_HAsciiString>(theOther) {} template<typename T> inline Handle_TCollection_HAsciiString& operator=(T theOther) { opencascade::handle<TCollection_HAsciiString>::operator=(theOther); return *this; } };









class TCollection_HAsciiString : public MMgt_TShared
{

public:

  
  
  __declspec( dllexport ) TCollection_HAsciiString();
  
  
  __declspec( dllexport ) TCollection_HAsciiString(const Standard_CString message);
  
  
  __declspec( dllexport ) TCollection_HAsciiString(const Standard_Character aChar);
  
  
  
  __declspec( dllexport ) TCollection_HAsciiString(const Standard_Integer length, const Standard_Character filler);
  
  
  __declspec( dllexport ) TCollection_HAsciiString(const Standard_Integer value);
  
  
  __declspec( dllexport ) TCollection_HAsciiString(const Standard_Real value);
  
  
  __declspec( dllexport ) TCollection_HAsciiString(const TCollection_AsciiString& aString);
  
  
  __declspec( dllexport ) TCollection_HAsciiString(const opencascade::handle<TCollection_HAsciiString>& aString);
  
  
  
  
  
  
  __declspec( dllexport ) TCollection_HAsciiString(const opencascade::handle<TCollection_HExtendedString>& aString, const Standard_Character replaceNonAscii);
  
  
    void AssignCat (const Standard_CString other);
  
  
  
    void AssignCat (const opencascade::handle<TCollection_HAsciiString>& other);
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void Capitalize();
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) opencascade::handle<TCollection_HAsciiString> Cat (const Standard_CString other) const;
  
  
  
  
  __declspec( dllexport ) opencascade::handle<TCollection_HAsciiString> Cat (const opencascade::handle<TCollection_HAsciiString>& other) const;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void Center (const Standard_Integer Width, const Standard_Character Filler);
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void ChangeAll (const Standard_Character aChar, const Standard_Character NewChar, const Standard_Boolean CaseSensitive = true);
  
  
  
  __declspec( dllexport ) void Clear();
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Integer FirstLocationInSet (const opencascade::handle<TCollection_HAsciiString>& Set, const Standard_Integer FromIndex, const Standard_Integer ToIndex) const;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Integer FirstLocationNotInSet (const opencascade::handle<TCollection_HAsciiString>& Set, const Standard_Integer FromIndex, const Standard_Integer ToIndex) const;
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void Insert (const Standard_Integer where, const Standard_Character what);
  
  
  __declspec( dllexport ) void Insert (const Standard_Integer where, const Standard_CString what);
  
  
  __declspec( dllexport ) void Insert (const Standard_Integer where, const opencascade::handle<TCollection_HAsciiString>& what);
  
  
  
  
  
  
  
  __declspec( dllexport ) void InsertAfter (const Standard_Integer Index, const opencascade::handle<TCollection_HAsciiString>& other);
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void InsertBefore (const Standard_Integer Index, const opencascade::handle<TCollection_HAsciiString>& other);
  
  
  __declspec( dllexport ) Standard_Boolean IsEmpty() const;
  
  
  __declspec( dllexport ) Standard_Boolean IsLess (const opencascade::handle<TCollection_HAsciiString>& other) const;
  
  
  __declspec( dllexport ) Standard_Boolean IsGreater (const opencascade::handle<TCollection_HAsciiString>& other) const;
  
  
  
  
  __declspec( dllexport ) Standard_Integer IntegerValue() const;
  
  
  __declspec( dllexport ) Standard_Boolean IsIntegerValue() const;
  
  
  __declspec( dllexport ) Standard_Boolean IsRealValue() const;
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsAscii() const;
  
  
  
  __declspec( dllexport ) Standard_Boolean IsDifferent (const opencascade::handle<TCollection_HAsciiString>& S) const;
  
  
  
  __declspec( dllexport ) Standard_Boolean IsSameString (const opencascade::handle<TCollection_HAsciiString>& S) const;
  
  
  
  __declspec( dllexport ) Standard_Boolean IsSameString (const opencascade::handle<TCollection_HAsciiString>& S, const Standard_Boolean CaseSensitive) const;
  
  
  __declspec( dllexport ) void LeftAdjust();
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void LeftJustify (const Standard_Integer Width, const Standard_Character Filler);
  
  
  
    Standard_Integer Length() const;
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Integer Location (const opencascade::handle<TCollection_HAsciiString>& other, const Standard_Integer FromIndex, const Standard_Integer ToIndex) const;
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Integer Location (const Standard_Integer N, const Standard_Character C, const Standard_Integer FromIndex, const Standard_Integer ToIndex) const;
  
  
  __declspec( dllexport ) void LowerCase();
  
  
  
  
  
  
  
  __declspec( dllexport ) void Prepend (const opencascade::handle<TCollection_HAsciiString>& other);
  
  
  __declspec( dllexport ) void Print (Standard_OStream& astream) const;
  
  
  
  
  
  __declspec( dllexport ) Standard_Real RealValue() const;
  
  
  
  
  
  
  
  __declspec( dllexport ) void RemoveAll (const Standard_Character C, const Standard_Boolean CaseSensitive);
  
  
  __declspec( dllexport ) void RemoveAll (const Standard_Character what);
  
  
  
  
  
  
  
  __declspec( dllexport ) void Remove (const Standard_Integer where, const Standard_Integer ahowmany = 1);
  
  
  __declspec( dllexport ) void RightAdjust();
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void RightJustify (const Standard_Integer Width, const Standard_Character Filler);
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Integer Search (const Standard_CString what) const;
  
  
  
  
  __declspec( dllexport ) Standard_Integer Search (const opencascade::handle<TCollection_HAsciiString>& what) const;
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Integer SearchFromEnd (const Standard_CString what) const;
  
  
  
  
  __declspec( dllexport ) Standard_Integer SearchFromEnd (const opencascade::handle<TCollection_HAsciiString>& what) const;
  
  
  
  
  
  
  
  __declspec( dllexport ) void SetValue (const Standard_Integer where, const Standard_Character what);
  
  
  
  
  
  
  
  __declspec( dllexport ) void SetValue (const Standard_Integer where, const Standard_CString what);
  
  
  __declspec( dllexport ) void SetValue (const Standard_Integer where, const opencascade::handle<TCollection_HAsciiString>& what);
  
  
  
  
  
  __declspec( dllexport ) opencascade::handle<TCollection_HAsciiString> Split (const Standard_Integer where);
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) opencascade::handle<TCollection_HAsciiString> SubString (const Standard_Integer FromIndex, const Standard_Integer ToIndex) const;
  
  
  
  
    Standard_CString ToCString() const;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) opencascade::handle<TCollection_HAsciiString> Token (const Standard_CString separators = " \t", const Standard_Integer whichone = 1) const;
  
  
  
  __declspec( dllexport ) void Trunc (const Standard_Integer ahowmany);
  
  
  __declspec( dllexport ) void UpperCase();
  
  
  
  __declspec( dllexport ) Standard_Integer UsefullLength() const;
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Character Value (const Standard_Integer where) const;
  
  
    const TCollection_AsciiString& String() const;
  
  __declspec( dllexport ) Standard_Boolean IsSameState (const opencascade::handle<TCollection_HAsciiString>& other) const;




  public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "TCollection_HAsciiString"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:




private:


  TCollection_AsciiString myString;


};




















inline void TCollection_HAsciiString::AssignCat(const Standard_CString other) 
{myString.AssignCat(other);}




inline void TCollection_HAsciiString::AssignCat
                      (const opencascade::handle<TCollection_HAsciiString>& other) 
{myString.AssignCat(other->String());}





inline Standard_Integer TCollection_HAsciiString::Length() const
{return myString.mylength;}




inline const TCollection_AsciiString& TCollection_HAsciiString::String() const
{return myString;}


inline Standard_CString TCollection_HAsciiString::ToCString() const
{ return myString.ToCString(); }














inline void Message_ProgressScale::SetName(const Standard_CString theName)
{
  myName = new TCollection_HAsciiString ( theName );
}






inline void Message_ProgressScale::SetName(const opencascade::handle<TCollection_HAsciiString>& theName)
{
  myName = theName;
}






inline opencascade::handle<TCollection_HAsciiString> Message_ProgressScale::GetName() const
{
  return myName;
}






inline void Message_ProgressScale::SetMin(const Standard_Real theMin)
{
  myMin = theMin;
}






inline Standard_Real Message_ProgressScale::GetMin() const
{
  return myMin;
}






inline void Message_ProgressScale::SetMax(const Standard_Real theMax)
{
  myMax = theMax;
}






inline Standard_Real Message_ProgressScale::GetMax() const
{
  return myMax;
}






inline void Message_ProgressScale::SetRange(const Standard_Real theMin,
					     const Standard_Real theMax)
{
  myMin = theMin;
  myMax = theMax;
}






inline void Message_ProgressScale::SetStep(const Standard_Real theStep)
{
  myStep = theStep;
}






inline Standard_Real Message_ProgressScale::GetStep() const
{
  return myStep;
}






inline void Message_ProgressScale::SetInfinite(const Standard_Boolean theInfinite)
{
  myInfinite = theInfinite;
}






inline Standard_Boolean Message_ProgressScale::GetInfinite() const
{
  return myInfinite;
}






inline void Message_ProgressScale::SetScale(const Standard_Real theMin,
					     const Standard_Real theMax,
					     const Standard_Real theStep,
					     const Standard_Boolean theInfinite)
{
  myMin = theMin;
  myMax = theMax;
  myStep = theStep;
  myInfinite = theInfinite;
}






inline void Message_ProgressScale::SetSpan(const Standard_Real theFirst,
					    const Standard_Real theLast)
{
  myFirst = theFirst;
  myLast  = theLast;
}






inline Standard_Real Message_ProgressScale::GetFirst () const
{
  return myFirst;
}






inline Standard_Real Message_ProgressScale::GetLast () const
{
  return myLast;
}





















































class NCollection_SeqNode 
{
public:
  
  void* operator new (size_t theSize, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { return theAllocator->Allocate(theSize); } void operator delete (void* theAddress, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { theAllocator->Free(theAddress); }
public:
  NCollection_SeqNode () : myNext (0), myPrevious (0) {}
  NCollection_SeqNode * Next      () const { return myNext; }
  NCollection_SeqNode * Previous  () const { return myPrevious; }
  void SetNext     (NCollection_SeqNode * theNext) { myNext = theNext; }
  void SetPrevious (NCollection_SeqNode * thePrev) { myPrevious = thePrev; }
  
 private:
  NCollection_SeqNode* myNext;
  NCollection_SeqNode* myPrevious;
};

typedef void (* NCollection_DelSeqNode) 
     (NCollection_SeqNode*, opencascade::handle<NCollection_BaseAllocator>& theAl);




              
class NCollection_BaseSequence 
{
public:
  
  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }
  void* operator new (size_t theSize, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { return theAllocator->Allocate(theSize); } void operator delete (void* theAddress, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { theAllocator->Free(theAddress); }

public:
  class Iterator
  {
  public:
    
    Iterator (void) : myCurrent (0), myPrevious(0) {}

    
    Iterator (const NCollection_BaseSequence& theSeq,
              const Standard_Boolean isStart)
    {
      Init (theSeq, isStart);
    }

     
    void Init (const NCollection_BaseSequence& theSeq,
               const Standard_Boolean isStart = true)
    {
      myCurrent  = (isStart ? theSeq.myFirstItem : 0);
      myPrevious = (isStart ? 0 : theSeq.myLastItem);
    }

    
    Iterator& operator = (const Iterator& theOther)
    {
      myCurrent = theOther.myCurrent;
      myPrevious = theOther.myPrevious;
      return *this;
    }
    
    void Previous()
    {
      myCurrent = myPrevious;
      if (myCurrent)
        myPrevious = myCurrent->Previous();
    }
      
  protected:
    NCollection_SeqNode* myCurrent;  
    NCollection_SeqNode* myPrevious; 
    friend class NCollection_BaseSequence;
  };

 public:
  
  
      Standard_Boolean   IsEmpty     () const {return (mySize == 0);}
      Standard_Integer   Length      () const {return mySize;}

      
      const opencascade::handle<NCollection_BaseAllocator>& Allocator() const
      { return myAllocator; }

 protected:
  
  
  NCollection_BaseSequence (const opencascade::handle<NCollection_BaseAllocator>& theAllocator) :
    myFirstItem        (0),
    myLastItem         (0),
    myCurrentItem      (0),
    myCurrentIndex     (0),
    mySize             (0)
  {
    myAllocator = (theAllocator.IsNull() ? NCollection_BaseAllocator::CommonBaseAllocator() : theAllocator);
  }

  
  virtual ~NCollection_BaseSequence() {}

  __declspec( dllexport ) void   ClearSeq    (NCollection_DelSeqNode fDel);
  __declspec( dllexport ) void   PAppend     (NCollection_SeqNode *);
  __declspec( dllexport ) void   PAppend     (NCollection_BaseSequence& S);
  __declspec( dllexport ) void   PPrepend    (NCollection_SeqNode *);
  __declspec( dllexport ) void   PPrepend    (NCollection_BaseSequence& S);
  __declspec( dllexport ) void   PInsertAfter(Iterator& thePosition,
                                      NCollection_SeqNode *);
  __declspec( dllexport ) void   PInsertAfter(const Standard_Integer Index,
                                      NCollection_SeqNode *);
  __declspec( dllexport ) void   PInsertAfter(const Standard_Integer Index,
                                      NCollection_BaseSequence& S);
  __declspec( dllexport ) void   PSplit      (const Standard_Integer Index,
                                      NCollection_BaseSequence& Sub);
  __declspec( dllexport ) void   RemoveSeq   (Iterator& thePosition,
                                      NCollection_DelSeqNode fDel);
  __declspec( dllexport ) void   RemoveSeq   (const Standard_Integer Index,
                                      NCollection_DelSeqNode fDel);
  __declspec( dllexport ) void   RemoveSeq   (const Standard_Integer From,
                                      const Standard_Integer To,
                                      NCollection_DelSeqNode fDel);
  __declspec( dllexport ) void   PReverse    ();
  __declspec( dllexport ) void   PExchange   (const Standard_Integer I,
                                      const Standard_Integer J) ;
  __declspec( dllexport ) NCollection_SeqNode *
                         Find        (const Standard_Integer) const;

 protected:
  
  
  opencascade::handle<NCollection_BaseAllocator> myAllocator;
  NCollection_SeqNode* myFirstItem;
  NCollection_SeqNode* myLastItem;
  NCollection_SeqNode* myCurrentItem;
  Standard_Integer myCurrentIndex;
  Standard_Integer mySize;

 private: 
  
  
  __declspec( dllexport ) NCollection_BaseSequence
                           (const NCollection_BaseSequence& Other);
  inline void Nullify ();
  friend class Iterator;
};











              
template <class TheItemType>
class NCollection_Sequence : public NCollection_BaseSequence
{
public:
  
  typedef TheItemType value_type;

public:
  
  class Node : public NCollection_SeqNode
  {
  public:
    
    Node (const TheItemType& theItem) :
      NCollection_SeqNode ()
      { myValue = theItem; }
    
    const TheItemType& Value () const { return myValue; }
    
    TheItemType&       ChangeValue () { return myValue; }

  private:
    TheItemType    myValue;
  }; 

 public:
  
  class Iterator : public NCollection_BaseSequence::Iterator
  {
  public:
    
    Iterator  (void) {}
    
    Iterator  (const NCollection_Sequence& theSeq,
               const Standard_Boolean      isStart = true)
      : NCollection_BaseSequence::Iterator (theSeq, isStart) {}
    
    Standard_Boolean More (void) const
    { return (myCurrent!=0); }
    
    void Next (void)
    {
      if (myCurrent)
      {
        myPrevious = myCurrent;
        myCurrent = myCurrent->Next();
      }
    }
    
    const TheItemType& Value (void) const
    { return ((const Node *)myCurrent)->Value(); }
    
    TheItemType& ChangeValue (void) const
    { return ((Node *)myCurrent)->ChangeValue(); }
    
    Standard_Boolean IsEqual (const Iterator& theOther) const
    {
      return myCurrent == theOther.myCurrent;
    }
  }; 

  
  typedef NCollection_StlIterator<std::bidirectional_iterator_tag, Iterator, TheItemType, false> iterator;

  
  typedef NCollection_StlIterator<std::bidirectional_iterator_tag, Iterator, TheItemType, true> const_iterator;

  
  iterator begin() const { return Iterator (*this, true); }

  
  iterator end() const { Iterator anIter (*this, false); anIter.Next(); return anIter; }
  
  
  const_iterator cbegin() const { return Iterator (*this, true); }

  
  const_iterator cend() const { Iterator anIter (*this, false); anIter.Next(); return anIter; }

 public:
  

  
  NCollection_Sequence(const opencascade::handle<NCollection_BaseAllocator>& theAllocator=0L) :
    NCollection_BaseSequence(theAllocator) {}

  
  NCollection_Sequence (const NCollection_Sequence& theOther) :
    NCollection_BaseSequence(theOther.myAllocator)
  {
    Assign (theOther);
  }

  
  Standard_Integer Size (void) const
  { return mySize; }

  
  Standard_Integer Length (void) const
  { return mySize; }

  
  
  Standard_Integer Lower() const
  {
    return 1;
  }

  
  
  Standard_Integer Upper() const
  {
    return mySize;
  }

  
  Standard_Boolean IsEmpty (void) const
  { return (mySize==0); }

  
  void Reverse (void)
  { PReverse(); }

  
  void Exchange (const Standard_Integer I,
                 const Standard_Integer J )
  { PExchange(I, J); }

  
  static void delNode (NCollection_SeqNode * theNode, 
                       opencascade::handle<NCollection_BaseAllocator>& theAl)
  {
    ((Node *) theNode)->~Node();
    theAl->Free(theNode);
  }

  
  void Clear (const opencascade::handle<NCollection_BaseAllocator>& theAllocator=0L)
  {
    ClearSeq (delNode);
    if (!theAllocator.IsNull())
      this->myAllocator = theAllocator;
  }
  
  
  
  NCollection_Sequence& Assign (const NCollection_Sequence& theOther)
  { 
    if (this == &theOther) 
      return *this;
    Clear ();
    Node * pCur = (Node *) theOther.myFirstItem;
    while (pCur) {
      Node* pNew = new (this->myAllocator) Node (pCur->Value());
      PAppend (pNew);
      pCur = (Node *) pCur->Next();
    }
    return * this;
  }

  
  NCollection_Sequence& operator= (const NCollection_Sequence& theOther)
  {
    return Assign (theOther);
  }

  
  void Remove (Iterator& thePosition)
  { RemoveSeq (thePosition, delNode); }

  
  void Remove (const Standard_Integer theIndex)
  { RemoveSeq (theIndex, delNode); }

  
  void Remove (const Standard_Integer theFromIndex,
               const Standard_Integer theToIndex)
  { RemoveSeq (theFromIndex, theToIndex, delNode); }

  
  void Append (const TheItemType& theItem)
  { PAppend (new (this->myAllocator) Node (theItem)); }

  
  void Append (NCollection_Sequence& theSeq)
  {
    if (myFirstItem == theSeq.myFirstItem) Assign (theSeq);
    PAppend (theSeq);
  }

  
  void Prepend (const TheItemType& theItem)
  { PPrepend (new (this->myAllocator) Node (theItem)); }

  
  void Prepend (NCollection_Sequence& theSeq)
  {
    if (myFirstItem == theSeq.myFirstItem) Assign (theSeq);
    PPrepend (theSeq);
  }

  
  void InsertBefore (const Standard_Integer theIndex, 
                     const TheItemType&     theItem)
  { InsertAfter (theIndex-1, theItem); }

  
  void InsertBefore (const Standard_Integer theIndex,
                     NCollection_Sequence&  theSeq)
  { InsertAfter (theIndex-1, theSeq); }
  
  
  void InsertAfter  (Iterator&              thePosition,
                     const TheItemType&     theItem)
  { PInsertAfter (thePosition, new (this->myAllocator) Node (theItem)); }

  
  void InsertAfter  (const Standard_Integer theIndex,
                     NCollection_Sequence&  theSeq)
  { PInsertAfter (theIndex, theSeq); }

  
  void InsertAfter (const Standard_Integer  theIndex, 
                    const TheItemType&      theItem)
  {
    if (theIndex < 0 || theIndex > mySize) Standard_OutOfRange::Raise("NCollection_Sequence::InsertAfter");;
    PInsertAfter (theIndex, new (this->myAllocator) Node (theItem));
  }

  
  void Split (const Standard_Integer theIndex, NCollection_Sequence& theSeq)
  {
    theSeq.Clear (this->myAllocator);
    PSplit (theIndex, theSeq);
  }

  
  const TheItemType& First () const
  {
    if (mySize == 0) Standard_NoSuchObject::Raise("NCollection_Sequence::First");;
    return ((const Node *) myFirstItem) -> Value();
  }

  
  TheItemType& ChangeFirst()
  {
    if (mySize == 0) Standard_NoSuchObject::Raise("NCollection_Sequence::ChangeFirst");;
    return ((Node* )myFirstItem)->ChangeValue();
  }

  
  const TheItemType& Last () const
  {
    if (mySize == 0) Standard_NoSuchObject::Raise("NCollection_Sequence::Last");;
    return ((const Node *) myLastItem) -> Value();
  }

  
  TheItemType& ChangeLast()
  {
    if (mySize == 0) Standard_NoSuchObject::Raise("NCollection_Sequence::ChangeLast");;
    return ((Node* )myLastItem)->ChangeValue();
  }

  
  const TheItemType& Value (const Standard_Integer theIndex) const
  {
    if (theIndex <= 0 || theIndex > mySize) Standard_OutOfRange::Raise("NCollection_Sequence::Value");;

    NCollection_Sequence * const aLocalTHIS = (NCollection_Sequence *) this;
    aLocalTHIS -> myCurrentItem  = Find (theIndex);
    aLocalTHIS -> myCurrentIndex = theIndex;
    return ((const Node *) myCurrentItem) -> Value();
  }

  
  const TheItemType& operator() (const Standard_Integer theIndex) const
  { return Value(theIndex); }

  
  TheItemType& ChangeValue (const Standard_Integer theIndex)
  {
    if (theIndex <= 0 || theIndex > mySize) Standard_OutOfRange::Raise("NCollection_Sequence::ChangeValue");;

    myCurrentItem  = Find (theIndex);
    myCurrentIndex = theIndex;
    return ((Node *) myCurrentItem) -> ChangeValue();
  }

  
  TheItemType& operator() (const Standard_Integer theIndex)
  { return ChangeValue(theIndex); }

  
  void SetValue (const Standard_Integer theIndex, 
                 const TheItemType& theItem)
  { ChangeValue (theIndex) = theItem; }

  
  virtual ~NCollection_Sequence (void)
  { Clear(); }

 private:

  
  friend class Iterator;

};




typedef NCollection_Sequence<Message_ProgressScale> Message_SequenceOfProgressScale;








class TCollection_HAsciiString;
class Message_ProgressScale;


class Message_ProgressIndicator;
class Message_ProgressIndicator; class Handle_Message_ProgressIndicator : public opencascade::handle<Message_ProgressIndicator> { public: Handle_Message_ProgressIndicator() {} Handle_Message_ProgressIndicator(opencascade::handle<Message_ProgressIndicator>&& theHandle) : opencascade::handle<Message_ProgressIndicator>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Message_ProgressIndicator,T2>::value>::type> inline Handle_Message_ProgressIndicator(const opencascade::handle<T2>& theOther) : opencascade::handle<Message_ProgressIndicator>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Message_ProgressIndicator,T2>::value>::type> inline Handle_Message_ProgressIndicator(const T2* theOther) : opencascade::handle<Message_ProgressIndicator>(theOther) {} template<typename T> inline Handle_Message_ProgressIndicator& operator=(T theOther) { opencascade::handle<Message_ProgressIndicator>::operator=(theOther); return *this; } };














































class Message_ProgressIndicator : public MMgt_TShared
{

public:

  
  
  
  __declspec( dllexport ) virtual void Reset();
  
    void SetName (const Standard_CString name);
  
  
    void SetName (const opencascade::handle<TCollection_HAsciiString>& name);
  
  
    void SetRange (const Standard_Real min, const Standard_Real max);
  
  
    void SetStep (const Standard_Real step);
  
  
    void SetInfinite (const Standard_Boolean isInf = true);
  
    void SetScale (const Standard_CString name, const Standard_Real min, const Standard_Real max, const Standard_Real step, const Standard_Boolean isInf = false);
  
  
  __declspec( dllexport ) void SetScale (const Standard_Real min, const Standard_Real max, const Standard_Real step, const Standard_Boolean isInf = false);
  
  
  __declspec( dllexport ) void GetScale (Standard_Real& min, Standard_Real& max, Standard_Real& step, Standard_Boolean& isInf) const;
  
  __declspec( dllexport ) void SetValue (const Standard_Real val);
  
  
  
  
  __declspec( dllexport ) Standard_Real GetValue() const;
  
    void Increment();
  
  
    void Increment (const Standard_Real step);
  
    Standard_Boolean NewScope (const Standard_CString name = 0);
  
    Standard_Boolean NewScope (const opencascade::handle<TCollection_HAsciiString>& name);
  
    Standard_Boolean NewScope (const Standard_Real span, const Standard_CString name = 0);
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Boolean NewScope (const Standard_Real span, const opencascade::handle<TCollection_HAsciiString>& name);
  
  
  
  
  __declspec( dllexport ) Standard_Boolean EndScope();
  
    Standard_Boolean NextScope (const Standard_CString name = 0);
  
  
  __declspec( dllexport ) Standard_Boolean NextScope (const Standard_Real span, const Standard_CString name = 0);
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean UserBreak();
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean Show (const Standard_Boolean force = true) = 0;
  
  
  
    Standard_Real GetPosition() const;
  
  
  
  Standard_Integer GetNbScopes() const;
  
  
  
  const Message_ProgressScale& GetScope (const Standard_Integer index) const;




  public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "Message_ProgressIndicator"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:

  
  
  __declspec( dllexport ) Message_ProgressIndicator();



private:


  Standard_Real myPosition;
  Message_SequenceOfProgressScale myScopes;


};
























inline void Message_ProgressIndicator::SetName (const Standard_CString name)
{
  if (name != 0)
    myScopes.ChangeValue(1).SetName ( name );
}
	





inline void Message_ProgressIndicator::SetName (const opencascade::handle<TCollection_HAsciiString> &name)
{
  if (!name.IsNull())
    myScopes.ChangeValue(1).SetName ( name );
}
	





inline void Message_ProgressIndicator::SetRange (const Standard_Real min, 
                                                  const Standard_Real max)
{
  myScopes.ChangeValue(1).SetRange ( min, max );
}
	





inline void Message_ProgressIndicator::SetStep (const Standard_Real step)
{
  myScopes.ChangeValue(1).SetStep ( step );
}
	





inline void Message_ProgressIndicator::SetInfinite (const Standard_Boolean isInf)
{
  myScopes.ChangeValue(1).SetInfinite ( isInf );
}
    





inline void Message_ProgressIndicator::SetScale (const Standard_CString name,
						  const Standard_Real min, 
						  const Standard_Real max, 
						  const Standard_Real step,
						  const Standard_Boolean isInf)
{
  SetName ( name );
  SetScale ( min, max, step, isInf );
}






inline void Message_ProgressIndicator::Increment ()
{
  Increment ( myScopes(1).GetStep() );
}






inline void Message_ProgressIndicator::Increment (const Standard_Real step)
{
  SetValue ( GetValue() + step );
}
    





inline Standard_Boolean Message_ProgressIndicator::NewScope (const Standard_CString name)
{
  return NewScope ( name ? new TCollection_HAsciiString ( name ) : 0 );
}






inline Standard_Boolean Message_ProgressIndicator::NewScope (const opencascade::handle<TCollection_HAsciiString> &name)
{
  return NewScope ( myScopes(1).GetStep(), name );
}






inline Standard_Boolean Message_ProgressIndicator::NewScope (const Standard_Real span,
                                                              const Standard_CString name)
{
  return NewScope ( span, name ? new TCollection_HAsciiString ( name ) : 0 );
}






inline Standard_Boolean Message_ProgressIndicator::NextScope (const Standard_CString name) 
{
  return NextScope ( myScopes.Length() >1 ? myScopes(1).GetStep() : 1., name );
}






inline Standard_Real Message_ProgressIndicator::GetPosition () const
{
  return myPosition;
}
	





inline Standard_Integer Message_ProgressIndicator::GetNbScopes () const
{
  return myScopes.Length();
}
    





inline const Message_ProgressScale &Message_ProgressIndicator::GetScope (const Standard_Integer index) const
{
  return myScopes(index);
}









class TopoDS_Face;
class TopoDS_Wire;
class TopoDS_Edge;
class Bnd_Box2d;
class TopoDS_Vertex;
class TopoDS_Shell;
class TopoDS_Solid;
class TopoDS_CompSolid;
class TopoDS_Compound;
class TopoDS_Shape;
class Message_ProgressIndicator;
class BRep_Builder;
class BRepTools_WireExplorer;
class BRepTools_Modification;
class BRepTools_Modifier;
class BRepTools_TrsfModification;
class BRepTools_NurbsConvertModification;
class BRepTools_GTrsfModification;
class BRepTools_Substitution;
class BRepTools_Quilt;
class BRepTools_ShapeSet;
class BRepTools_ReShape;
class Geom_Curve;
class Geom2d_Curve;
class Geom_Surface;


































class BRepTools 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
  __declspec( dllexport ) static void UVBounds (const TopoDS_Face& F, Standard_Real& UMin, Standard_Real& UMax, Standard_Real& VMin, Standard_Real& VMax);
  
  
  
  __declspec( dllexport ) static void UVBounds (const TopoDS_Face& F, const TopoDS_Wire& W, Standard_Real& UMin, Standard_Real& UMax, Standard_Real& VMin, Standard_Real& VMax);
  
  
  
  __declspec( dllexport ) static void UVBounds (const TopoDS_Face& F, const TopoDS_Edge& E, Standard_Real& UMin, Standard_Real& UMax, Standard_Real& VMin, Standard_Real& VMax);
  
  
  
  __declspec( dllexport ) static void AddUVBounds (const TopoDS_Face& F, Bnd_Box2d& B);
  
  
  
  __declspec( dllexport ) static void AddUVBounds (const TopoDS_Face& F, const TopoDS_Wire& W, Bnd_Box2d& B);
  
  
  
  __declspec( dllexport ) static void AddUVBounds (const TopoDS_Face& F, const TopoDS_Edge& E, Bnd_Box2d& B);
  
  
  __declspec( dllexport ) static void Update (const TopoDS_Vertex& V);
  
  
  __declspec( dllexport ) static void Update (const TopoDS_Edge& E);
  
  
  __declspec( dllexport ) static void Update (const TopoDS_Wire& W);
  
  
  __declspec( dllexport ) static void Update (const TopoDS_Face& F);
  
  
  __declspec( dllexport ) static void Update (const TopoDS_Shell& S);
  
  
  __declspec( dllexport ) static void Update (const TopoDS_Solid& S);
  
  
  __declspec( dllexport ) static void Update (const TopoDS_CompSolid& C);
  
  
  __declspec( dllexport ) static void Update (const TopoDS_Compound& C);
  
  
  __declspec( dllexport ) static void Update (const TopoDS_Shape& S);
  
  
  
  
  __declspec( dllexport ) static void UpdateFaceUVPoints (const TopoDS_Face& F);
  
  
  
  
  __declspec( dllexport ) static void Clean (const TopoDS_Shape& S);
  
  
  
  __declspec( dllexport ) static void RemoveUnusedPCurves (const TopoDS_Shape& S);
  
  
  
  
  __declspec( dllexport ) static Standard_Boolean Triangulation (const TopoDS_Shape& S, const Standard_Real deflec);
  
  
  
  __declspec( dllexport ) static Standard_Boolean Compare (const TopoDS_Vertex& V1, const TopoDS_Vertex& V2);
  
  
  
  __declspec( dllexport ) static Standard_Boolean Compare (const TopoDS_Edge& E1, const TopoDS_Edge& E2);
  
  
  
  __declspec( dllexport ) static TopoDS_Wire OuterWire (const TopoDS_Face& F);
  
  
  
  __declspec( dllexport ) static void Map3DEdges (const TopoDS_Shape& S, TopTools_IndexedMapOfShape& M);
  
  
  
  __declspec( dllexport ) static Standard_Boolean IsReallyClosed (const TopoDS_Edge& E, const TopoDS_Face& F);
  
  
  
  __declspec( dllexport ) static void Dump (const TopoDS_Shape& Sh, Standard_OStream& S);
  
  
  __declspec( dllexport ) static void Write (const TopoDS_Shape& Sh, Standard_OStream& S, const opencascade::handle<Message_ProgressIndicator>& PR = 0);
  
  
  
  __declspec( dllexport ) static void Read (TopoDS_Shape& Sh, Standard_IStream& S, const BRep_Builder& B, const opencascade::handle<Message_ProgressIndicator>& PR = 0);
  
  
  __declspec( dllexport ) static Standard_Boolean Write (const TopoDS_Shape& Sh, const Standard_CString File, const opencascade::handle<Message_ProgressIndicator>& PR = 0);
  
  
  
  __declspec( dllexport ) static Standard_Boolean Read (TopoDS_Shape& Sh, const Standard_CString File, const BRep_Builder& B, const opencascade::handle<Message_ProgressIndicator>& PR = 0);

  
  
  
  
  
  
  __declspec( dllexport ) static Standard_Real EvalAndUpdateTol(const TopoDS_Edge& theE, 
                                                        const opencascade::handle<Geom_Curve>& theC3d, 
                                                        const opencascade::handle<Geom2d_Curve> theC2d, 
                                                        const opencascade::handle<Geom_Surface>& theS,
                                                        const Standard_Real theF,
                                                        const Standard_Real theL);



protected:





private:




friend class BRepTools_WireExplorer;
friend class BRepTools_Modification;
friend class BRepTools_Modifier;
friend class BRepTools_TrsfModification;
friend class BRepTools_NurbsConvertModification;
friend class BRepTools_GTrsfModification;
friend class BRepTools_Substitution;
friend class BRepTools_Quilt;
friend class BRepTools_ShapeSet;
friend class BRepTools_ReShape;

};
























































class gp_XY;
class gp_Pnt2d;
class gp_Trsf2d;
class gp_Ax2d;



class Bnd_B2d 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    Bnd_B2d();
  
  
    Bnd_B2d(const gp_XY& theCenter, const gp_XY& theHSize);
  
  
    Standard_Boolean IsVoid() const;
  
  
    void Clear();
  
  
  __declspec( dllexport ) void Add (const gp_XY& thePnt);
  
  
  void Add (const gp_Pnt2d& thePnt);
  
  
    void Add (const Bnd_B2d& theBox);
  
  
  
  
    gp_XY CornerMin() const;
  
  
  
  
    gp_XY CornerMax() const;
  
  
  
    Standard_Real SquareExtent() const;
  
  
    void Enlarge (const Standard_Real theDiff);
  
  
  
  
  __declspec( dllexport ) Standard_Boolean Limit (const Bnd_B2d& theOtherBox);
  
  
  
  __declspec( dllexport ) Bnd_B2d Transformed (const gp_Trsf2d& theTrsf) const;
  
  
  
    Standard_Boolean IsOut (const gp_XY& thePnt) const;
  
  
  
  __declspec( dllexport ) Standard_Boolean IsOut (const gp_XY& theCenter, const Standard_Real theRadius, const Standard_Boolean isCircleHollow = false) const;
  
  
  
    Standard_Boolean IsOut (const Bnd_B2d& theOtherBox) const;
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsOut (const Bnd_B2d& theOtherBox, const gp_Trsf2d& theTrsf) const;
  
  
  
  __declspec( dllexport ) Standard_Boolean IsOut (const gp_Ax2d& theLine) const;
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsOut (const gp_XY& theP0, const gp_XY& theP1) const;
  
  
  
    Standard_Boolean IsIn (const Bnd_B2d& theBox) const;
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsIn (const Bnd_B2d& theBox, const gp_Trsf2d& theTrsf) const;
  
  
    void SetCenter (const gp_XY& theCenter);
  
  
  
    void SetHSize (const gp_XY& theHSize);




protected:



  Standard_Real myCenter[2];
  Standard_Real myHSize[2];


private:





};































inline Bnd_B2d::Bnd_B2d ()
{
  Clear();
}








inline Bnd_B2d::Bnd_B2d (const gp_XY& theCenter,
                         const gp_XY& theHSize)
{
  myCenter[0] = Standard_Real(theCenter.X());
  myCenter[1] = Standard_Real(theCenter.Y());
  myHSize[0]  = Standard_Real(theHSize.X());
  myHSize[1]  = Standard_Real(theHSize.Y());
}




inline void Bnd_B2d::Clear ()
{
  myCenter[0] = Standard_Real(1e30);;
  myCenter[1] = Standard_Real(1e30);;
  myHSize[0] = -Standard_Real(1e30);;
  myHSize[1] = -Standard_Real(1e30);;
}




inline Standard_Boolean Bnd_B2d::IsVoid () const
{
  return (myHSize[0] < -1e-5);
}




inline void Bnd_B2d::Add (const gp_Pnt2d& thePnt)
{
  Add (thePnt.XY());
}




inline void Bnd_B2d::Add (const Bnd_B2d& theBox)
{
  if (theBox.IsVoid() == false) {
    Add (theBox.CornerMin());
    Add (theBox.CornerMax());
  }
}




inline gp_XY Bnd_B2d::CornerMin () const
{
  return gp_XY (myCenter[0] - myHSize[0], myCenter[1] - myHSize[1]);
}




inline gp_XY Bnd_B2d::CornerMax () const
{
  return gp_XY (myCenter[0] + myHSize[0], myCenter[1] + myHSize[1]);
}




inline Standard_Real Bnd_B2d::SquareExtent () const
{
  return 4 * (myHSize[0] * myHSize[0] + myHSize[1] * myHSize[1]);
}




inline void Bnd_B2d::SetCenter (const gp_XY& theCenter)
{
  myCenter[0] = Standard_Real(theCenter.X());
  myCenter[1] = Standard_Real(theCenter.Y());
}




inline void Bnd_B2d::SetHSize (const gp_XY& theHSize)
{
  myHSize[0] = Standard_Real(theHSize.X());
  myHSize[1] = Standard_Real(theHSize.Y());
}






inline void Bnd_B2d::Enlarge (const Standard_Real aDiff)
{
  const Standard_Real aD = Standard_Real(Abs(aDiff));
  myHSize[0] += aD;
  myHSize[1] += aD;
}




inline Standard_Boolean Bnd_B2d::IsOut (const gp_XY& thePnt) const
{
  return (Abs(Standard_Real(thePnt.X()) - myCenter[0]) > myHSize[0] ||
          Abs(Standard_Real(thePnt.Y()) - myCenter[1]) > myHSize[1]);
}




inline Standard_Boolean Bnd_B2d::IsOut (const Bnd_B2d& theBox) const
{
  return (Abs(theBox.myCenter[0]-myCenter[0]) > theBox.myHSize[0]+myHSize[0] ||
          Abs(theBox.myCenter[1]-myCenter[1]) > theBox.myHSize[1]+myHSize[1]);
}




inline Standard_Boolean Bnd_B2d::IsIn (const Bnd_B2d& theBox) const
{
  return (Abs(theBox.myCenter[0]-myCenter[0]) < theBox.myHSize[0]-myHSize[0] &&
          Abs(theBox.myCenter[1]-myCenter[1]) < theBox.myHSize[1]-myHSize[1]);
}









































class Standard_ConstructionError;
class gp_Dir2d;
class gp_Trsf2d;




















class Bnd_Box2d 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  Bnd_Box2d() : Xmin(0.), Xmax(0.), Ymin(0.), Ymax(0.), Gap(0.), Flags (VoidMask) {}

  
  
  void SetWhole() { Flags = WholeMask; }

  
  void SetVoid()
  {
    Flags = VoidMask;
    Gap   = 0.0;
  }

  
  
  
  void Set (const gp_Pnt2d& thePnt)
  {
    Flags = VoidMask;
    Gap   = 0.0;
    Add (thePnt);
  }

  
  
  
  
  
  void Set (const gp_Pnt2d& thePnt, const gp_Dir2d& theDir)
  {
    Flags = VoidMask;
    Gap   = 0.0;
    Add (thePnt, theDir);
  }

  
  
  
  
  __declspec( dllexport ) void Update (const Standard_Real aXmin, const Standard_Real aYmin, const Standard_Real aXmax, const Standard_Real aYmax);
  
  
  __declspec( dllexport ) void Update (const Standard_Real X, const Standard_Real Y);
  
  
  Standard_Real GetGap() const { return Gap; }

  
  void SetGap (const Standard_Real Tol) { Gap = Tol; }

  
  
  
  
  
  void Enlarge (const Standard_Real theTol)
  {
    Standard_Real aTol = theTol < 0.0 ? -theTol : theTol;
    if (Gap < aTol) Gap = aTol;
  }

  
  
  
  
  __declspec( dllexport ) void Get (Standard_Real& aXmin, Standard_Real& aYmin, Standard_Real& aXmax, Standard_Real& aYmax) const;

  
  void OpenXmin() { Flags |= XminMask; }

  
  void OpenXmax() { Flags |= XmaxMask; }

  
  void OpenYmin() { Flags |= YminMask; }

  
  void OpenYmax() { Flags |= YmaxMask; }

  
  Standard_Boolean IsOpenXmin() const { return (Flags & XminMask) != 0; }

  
  Standard_Boolean IsOpenXmax() const { return (Flags & XmaxMask) != 0; }

  
  Standard_Boolean IsOpenYmin() const { return (Flags & YminMask) != 0; }

  
  Standard_Boolean IsOpenYmax() const { return (Flags & YmaxMask) != 0; }

  
  
  Standard_Boolean IsWhole() const { return (Flags & WholeMask) == WholeMask; }

  
  Standard_Boolean IsVoid() const { return (Flags & VoidMask) != 0; }

  
  
  
  
  
  
  __declspec( dllexport ) Bnd_Box2d Transformed (const gp_Trsf2d& T) const;
  
  
  __declspec( dllexport ) void Add (const Bnd_Box2d& Other);
  
  
  void Add (const gp_Pnt2d& thePnt) { Update (thePnt.X(), thePnt.Y()); }

  
  void Add (const gp_Pnt2d& thePnt, const gp_Dir2d& theDir)
  {
    Add (thePnt);
    Add (theDir);
  }
  
  
  
  
  __declspec( dllexport ) void Add (const gp_Dir2d& D);
  
  
  __declspec( dllexport ) Standard_Boolean IsOut (const gp_Pnt2d& P) const;
  
  
  __declspec( dllexport ) Standard_Boolean IsOut (const Bnd_Box2d& Other) const;
  
  
  Standard_Boolean IsOut (const Bnd_Box2d& theOther, const gp_Trsf2d& theTrsf) const
  {
    return IsOut (theOther.Transformed (theTrsf));
  }

  
  
  
  Standard_Boolean IsOut (const gp_Trsf2d& T1, const Bnd_Box2d& Other, const gp_Trsf2d& T2) const
  {
    return Transformed(T1).IsOut (Other.Transformed(T2));
  }

  __declspec( dllexport ) void Dump() const;
  
  
  Standard_Real SquareExtent() const
  {
    if (IsVoid()) return 0.0;
    const Standard_Real aDx = Xmax - Xmin + Gap + Gap;
    const Standard_Real aDy = Ymax - Ymin + Gap + Gap;
    return aDx*aDx + aDy*aDy;
  }

protected:

  
  enum MaskFlags
  {
    VoidMask  = 0x01,
    XminMask  = 0x02,
    XmaxMask  = 0x04,
    YminMask  = 0x08,
    YmaxMask  = 0x10,
    WholeMask = 0x1e
  };

private:

  Standard_Real Xmin;
  Standard_Real Xmax;
  Standard_Real Ymin;
  Standard_Real Ymax;
  Standard_Real Gap;
  Standard_Integer Flags;

};




































































              

template < class TheKeyType, 
           class TheItemType, 
           class Hasher = NCollection_DefaultHasher<TheKeyType> >
class NCollection_DataMap : public NCollection_BaseMap
{
  
 public:
  class DataMapNode : public NCollection_TListNode<TheItemType>
  {
  public:
    
    DataMapNode (const TheKeyType&     theKey, 
                 const TheItemType&    theItem, 
                 NCollection_ListNode* theNext) :
      NCollection_TListNode<TheItemType> (theItem, theNext),
      myKey(theKey)
    {}

    
    const TheKeyType& Key (void) const
    { return myKey; }
    
    
    static void delNode (NCollection_ListNode * theNode, 
                         opencascade::handle<NCollection_BaseAllocator>& theAl)
    {
      ((DataMapNode *) theNode)->~DataMapNode();
      theAl->Free(theNode);
    }

  private:
    TheKeyType    myKey;
  };

 public:
  
  class Iterator : public NCollection_BaseMap::Iterator
  {
  public:
    
    Iterator (void) :
      NCollection_BaseMap::Iterator() {}
    
    Iterator (const NCollection_DataMap& theMap) :
      NCollection_BaseMap::Iterator(theMap) {}
    
    Standard_Boolean More(void) const
    { return PMore(); }
    
    void Next(void)
    { PNext(); }
    
    const TheItemType& Value(void) const
    {  
      if (!More()) Standard_NoSuchObject::Raise("NCollection_DataMap::Iterator::Value");;  
      return ((DataMapNode *) myNode)->Value();
    }
    
    TheItemType& ChangeValue(void) const
    {  
      if (!More()) Standard_NoSuchObject::Raise("NCollection_DataMap::Iterator::ChangeValue");;  
      return ((DataMapNode *) myNode)->ChangeValue();
    }
    
    const TheKeyType& Key (void) const
    { 
      if (!More()) Standard_NoSuchObject::Raise("NCollection_DataMap::Iterator::Key");;  
      return ((DataMapNode *) myNode)->Key();
    }
  };
  
  
  typedef NCollection_StlIterator<std::forward_iterator_tag, Iterator, TheItemType, false> iterator;

  
  typedef NCollection_StlIterator<std::forward_iterator_tag, Iterator, TheItemType, true> const_iterator;

  
  iterator begin() const { return Iterator (*this); }

  
  iterator end() const { return Iterator(); }

  
  const_iterator cbegin() const { return Iterator (*this); }

  
  const_iterator cend() const { return Iterator(); }

 public:
  

  
  NCollection_DataMap (const Standard_Integer NbBuckets=1,
                     const opencascade::handle<NCollection_BaseAllocator>& theAllocator = 0L)
    : NCollection_BaseMap (NbBuckets, true, theAllocator) {}

  
  NCollection_DataMap (const NCollection_DataMap& theOther)
    : NCollection_BaseMap (theOther.NbBuckets(), true, theOther.myAllocator) 
  { *this = theOther; }

  
  
  void Exchange (NCollection_DataMap& theOther)
  {
    this->exchangeMapsData (theOther);
  }

  
  
  NCollection_DataMap& Assign (const NCollection_DataMap& theOther)
  { 
    if (this == &theOther)
      return *this;

    Clear();
    ReSize (theOther.Extent()-1);
    Iterator anIter(theOther);
    for (; anIter.More(); anIter.Next())
      Bind (anIter.Key(), anIter.Value());
    return *this;
  }

  
  NCollection_DataMap& operator= (const NCollection_DataMap& theOther)
  { 
    return Assign (theOther);
  }

  
  void ReSize (const Standard_Integer N)
  {
    NCollection_ListNode** newdata = 0;
    NCollection_ListNode** dummy   = 0;
    Standard_Integer newBuck;
    if (BeginResize (N, newBuck, newdata, dummy))
    {
      if (myData1) 
      {
        DataMapNode** olddata = (DataMapNode**) myData1;
        DataMapNode *p, *q;
        Standard_Integer i,k;
        for (i = 0; i <= NbBuckets(); i++) 
        {
          if (olddata[i]) 
          {
            p = olddata[i];
            while (p) 
            {
              k = Hasher::HashCode(p->Key(),newBuck);
              q = (DataMapNode*) p->Next();
              p->Next() = newdata[k];
              newdata[k] = p;
              p = q;
            }
          }
        }
      }
      EndResize (N, newBuck, newdata, dummy);
    }
  }

  
  
  
  Standard_Boolean Bind (const TheKeyType& theKey, const TheItemType& theItem)
  {
    if (Resizable()) 
      ReSize(Extent());
    DataMapNode** data = (DataMapNode**)myData1;
    Standard_Integer k = Hasher::HashCode (theKey, NbBuckets());
    DataMapNode* p = data[k];
    while (p) 
    {
      if (Hasher::IsEqual(p->Key(), theKey))
      {
        p->ChangeValue() = theItem;
        return false;
      }
      p = (DataMapNode *) p->Next();
    }
    data[k] = new (this->myAllocator) DataMapNode (theKey, theItem, data[k]);
    Increment();
    return true;
  }

  
  TheItemType* Bound (const TheKeyType& theKey, const TheItemType& theItem)
  {
    if (Resizable()) 
      ReSize(Extent());
    DataMapNode** data = (DataMapNode**)myData1;
    Standard_Integer k = Hasher::HashCode (theKey, NbBuckets());
    DataMapNode* p = data[k];
    while (p)
    {
      if (Hasher::IsEqual(p->Key(), theKey))
      {
        p->ChangeValue() = theItem;
        return &p->ChangeValue();
      }
      p = (DataMapNode*)p->Next();
    }
    data[k] = new (this->myAllocator) DataMapNode (theKey, theItem, data[k]);
    Increment();
    return &data[k]->ChangeValue();
  }

  
  Standard_Boolean IsBound(const TheKeyType& theKey) const
  {
    DataMapNode* p;
    return lookup(theKey, p);
  }

  
  Standard_Boolean UnBind(const TheKeyType& theKey)
  {
    if (IsEmpty()) 
      return false;
    DataMapNode** data = (DataMapNode**) myData1;
    Standard_Integer k = Hasher::HashCode(theKey,NbBuckets());
    DataMapNode* p = data[k];
    DataMapNode* q = 0;
    while (p) 
    {
      if (Hasher::IsEqual(p->Key(), theKey))
      {
        Decrement();
        if (q) 
          q->Next() = p->Next();
        else
          data[k] = (DataMapNode*) p->Next();
        p->~DataMapNode();
        this->myAllocator->Free(p);
        return true;
      }
      q = p;
      p = (DataMapNode*) p->Next();
    }
    return false;
  }

  
  
  const TheItemType* Seek(const TheKeyType& theKey) const
  {
    DataMapNode* p = 0;
    if (!lookup(theKey, p))
      return 0L;
    return &p->Value();
  }

  
  const TheItemType& Find(const TheKeyType& theKey) const
  {
    DataMapNode* p = 0;
    if (!lookup(theKey, p))
      Standard_NoSuchObject::Raise("NCollection_DataMap::Find");
    return p->Value();
  }

  
  
  Standard_Boolean Find (const TheKeyType& theKey,
                         TheItemType&      theValue) const
  {
    DataMapNode* p = 0;
    if (!lookup(theKey, p))
      return false;

    theValue = p->Value();
    return true;
  }

  
  const TheItemType& operator() (const TheKeyType& theKey) const
  { return Find(theKey); }

  
  
  TheItemType* ChangeSeek(const TheKeyType& theKey)
  {
    DataMapNode* p = 0;
    if (!lookup(theKey, p))
      return 0L;
    return &p->ChangeValue();
  }

  
  TheItemType& ChangeFind (const TheKeyType& theKey)
  {
    DataMapNode* p = 0;
    if (!lookup(theKey, p))
      Standard_NoSuchObject::Raise("NCollection_DataMap::Find");
    return p->ChangeValue();
  }

  
  TheItemType& operator() (const TheKeyType& theKey)
  { return ChangeFind(theKey); }

  
  
  void Clear(const Standard_Boolean doReleaseMemory = true)
  { Destroy (DataMapNode::delNode, doReleaseMemory); }

  
  void Clear (const opencascade::handle<NCollection_BaseAllocator>& theAllocator)
  { 
    Clear();
    this->myAllocator = ( ! theAllocator.IsNull() ? theAllocator :
                    NCollection_BaseAllocator::CommonBaseAllocator() );
  }

  
  virtual ~NCollection_DataMap (void)
  { Clear(); }

  
  Standard_Integer Size(void) const
  { return Extent(); }

  
 protected:
  
  
  
  
  Standard_Boolean lookup(const TheKeyType& theKey,DataMapNode*& thepNode) const
  {
    if (IsEmpty())
      return false; 
    for (thepNode = (DataMapNode*)myData1[Hasher::HashCode(theKey, NbBuckets())];
         thepNode; thepNode = (DataMapNode*)thepNode->Next())
    {
      if (Hasher::IsEqual(thepNode->Key(), theKey)) 
        return true;
    }
    return false; 
  }

};





































            

template < class TheKeyType, 
           class Hasher = NCollection_DefaultHasher<TheKeyType> >
class NCollection_Map : public NCollection_BaseMap
{
  
 public:

  class MapNode : public NCollection_TListNode<TheKeyType>
  {
  public:
    
    MapNode (const TheKeyType& theKey, 
             NCollection_ListNode* theNext) :
      NCollection_TListNode<TheKeyType> (theKey, theNext) {}
    
    const TheKeyType& Key (void)
    { return this->Value(); }

  };

 public:
  
  class Iterator : public NCollection_BaseMap::Iterator
  {
  public:
    
    Iterator (void) :
      NCollection_BaseMap::Iterator() {}
    
    Iterator (const NCollection_Map& theMap) :
      NCollection_BaseMap::Iterator(theMap) {}
    
    Standard_Boolean More(void) const
    { return PMore(); }
    
    void Next(void)
    { PNext(); }
    
    const TheKeyType& Value(void) const
    {
      if (!More()) Standard_NoSuchObject::Raise("NCollection_Map::Iterator::Value");;  
      return ((MapNode *) myNode)->Value();
    }
    
    TheKeyType& ChangeValue(void) const
    {  
      Standard_ImmutableObject::Raise("NCollection_Map::Iterator::ChangeValue");
      return * (TheKeyType *) 0; 
    }
    
    const TheKeyType& Key (void) const
    { 
      if (!More()) Standard_NoSuchObject::Raise("NCollection_Map::Iterator::Key");;  
      return ((MapNode *) myNode)->Value();
    }
  };
  
  
  typedef NCollection_StlIterator<std::forward_iterator_tag, Iterator, TheKeyType, true> const_iterator;

  
  const_iterator cbegin() const { return Iterator (*this); }

  
  const_iterator cend() const { return Iterator(); }

 public:
  

  
  NCollection_Map (const Standard_Integer NbBuckets = 1,
                   const opencascade::handle<NCollection_BaseAllocator>& theAllocator = 0L) :
    NCollection_BaseMap (NbBuckets, true, theAllocator) {}

  
  NCollection_Map (const NCollection_Map& theOther) :
    NCollection_BaseMap (theOther.NbBuckets(), true, theOther.myAllocator)
  { *this = theOther; }

  
  
  void Exchange (NCollection_Map& theOther)
  {
    this->exchangeMapsData (theOther);
  }

  
  
  NCollection_Map& Assign (const NCollection_Map& theOther)
  { 
    if (this == &theOther)
      return *this;

    Clear();
    ReSize (theOther.Extent()-1);
    Iterator anIter(theOther);
    for (; anIter.More(); anIter.Next())
      Add (anIter.Key());
    return *this;
  }

  
  NCollection_Map& operator= (const NCollection_Map& theOther)
  {
    return Assign(theOther);
  }

  
  void ReSize (const Standard_Integer N)
  {
    NCollection_ListNode** newdata = 0L;
    NCollection_ListNode** dummy = 0L;
    Standard_Integer newBuck;
    if (BeginResize (N, newBuck, newdata, dummy))
    {
      if (myData1) 
      {
        MapNode** olddata = (MapNode**) myData1;
        MapNode *p, *q;
        Standard_Integer i,k;
        for (i = 0; i <= NbBuckets(); i++) 
        {
          if (olddata[i]) 
          {
            p = olddata[i];
            while (p) 
            {
              k = Hasher::HashCode(p->Key(),newBuck);
              q = (MapNode*) p->Next();
              p->Next() = newdata[k];
              newdata[k] = p;
              p = q;
            }
          }
        }
      }
      EndResize (N, newBuck, newdata, dummy);
    }
  }

  
  Standard_Boolean Add(const TheKeyType& K)
  {
    if (Resizable()) 
      ReSize(Extent());
    MapNode** data = (MapNode**)myData1;
    Standard_Integer k = Hasher::HashCode(K,NbBuckets());
    MapNode* p = data[k];
    while (p) 
    {
      if (Hasher::IsEqual(p->Key(),K))
        return false;
      p = (MapNode *) p->Next();
    }
    data[k] = new (this->myAllocator) MapNode(K,data[k]);
    Increment();
    return true;
  }

  
  
  const TheKeyType& Added(const TheKeyType& K)
  {
    if (Resizable()) 
      ReSize(Extent());
    MapNode** data = (MapNode**)myData1;
    Standard_Integer k = Hasher::HashCode(K,NbBuckets());
    MapNode* p = data[k];
    while (p) 
    {
      if (Hasher::IsEqual(p->Key(),K))
        return p->Key();
      p = (MapNode *) p->Next();
    }
    data[k] = new (this->myAllocator) MapNode(K,data[k]);
    Increment();
    return data[k]->Key();
  }

  
  Standard_Boolean Contains(const TheKeyType& K) const
  {
    if (IsEmpty()) 
      return false;
    MapNode** data = (MapNode**) myData1;
    MapNode*  p = data[Hasher::HashCode(K,NbBuckets())];
    while (p) 
    {
      if (Hasher::IsEqual(p->Key(),K)) 
        return true;
      p = (MapNode *) p->Next();
    }
    return false;
  }

  
  Standard_Boolean Remove(const TheKeyType& K)
  {
    if (IsEmpty()) 
      return false;
    MapNode** data = (MapNode**) myData1;
    Standard_Integer k = Hasher::HashCode(K,NbBuckets());
    MapNode* p = data[k];
    MapNode* q = 0;
    while (p) 
    {
      if (Hasher::IsEqual(p->Key(),K)) 
      {
        Decrement();
        if (q) 
          q->Next() = p->Next();
        else
          data[k] = (MapNode*) p->Next();
        p->~MapNode();
        this->myAllocator->Free(p);
        return true;
      }
      q = p;
      p = (MapNode*) p->Next();
    }
    return false;
  }

  
  
  void Clear(const Standard_Boolean doReleaseMemory = true)
  { Destroy (MapNode::delNode, doReleaseMemory); }

  
  void Clear (const opencascade::handle<NCollection_BaseAllocator>& theAllocator)
  { 
    Clear();
    this->myAllocator = ( ! theAllocator.IsNull() ? theAllocator :
                    NCollection_BaseAllocator::CommonBaseAllocator() );
  }

  
  virtual ~NCollection_Map (void)
  { Clear(); }

  
  Standard_Integer Size(void) const
  { return Extent(); }

 public:
  
  

  
  Standard_Boolean IsEqual (const NCollection_Map& theOther) const
  {
    return Extent() == theOther.Extent()
        && Contains (theOther);
  }

  
  Standard_Boolean Contains (const NCollection_Map& theOther) const
  {
    if (this == &theOther
     || theOther.IsEmpty())
    {
      return true;
    }
    else if (Extent() < theOther.Extent())
    {
      return false;
    }

    for (Iterator anIter (theOther); anIter.More(); anIter.Next())
    {
      if (!Contains (anIter.Key()))
      {
        return false;
      }
    }

    return true;
  }

  
  
  
  
  void Union (const NCollection_Map& theLeft,
              const NCollection_Map& theRight)
  {
    if (&theLeft == &theRight)
    {
      Assign (theLeft);
      return;
    }

    if (this != &theLeft
     && this != &theRight)
    {
      Clear();
    }

    if (this != &theLeft)
    {
      for (Iterator anIter (theLeft); anIter.More(); anIter.Next())
      {
        Add (anIter.Key());
      }
    }
    if (this != &theRight)
    {
      for (Iterator anIter (theRight); anIter.More(); anIter.Next())
      {
        Add (anIter.Key());
      }
    }
  }

  
  
  
  
  Standard_Boolean Unite (const NCollection_Map& theOther)
  {
    if (this == &theOther)
    {
      return false;
    }

    const Standard_Integer anOldExtent = Extent();
    Union (*this, theOther);
    return anOldExtent != Extent();
  }

  
  Standard_Boolean HasIntersection (const NCollection_Map& theMap) const
  {
    const NCollection_Map* aMap1 = this;
    const NCollection_Map* aMap2 = &theMap;
    if (theMap.Size() < Size())
    {
      aMap1 = &theMap;
      aMap2 = this;
    }

    for (NCollection_Map::Iterator aIt(*aMap1); aIt.More(); aIt.Next())
    {
      if (aMap2->Contains(aIt.Value()))
      {
        return true;
      }
    }

    return false;
  }

  
  
  
  
  void Intersection (const NCollection_Map& theLeft,
                     const NCollection_Map& theRight)
  {
    if (&theLeft == &theRight)
    {
      Assign (theLeft);
      return;
    }

    if (this == &theLeft)
    {
      NCollection_Map aCopy (1, this->myAllocator);
      Exchange     (aCopy);
      Intersection (aCopy, theRight);
      return;
    }
    else if (this == &theRight)
    {
      NCollection_Map aCopy (1, this->myAllocator);
      Exchange     (aCopy);
      Intersection (theLeft, aCopy);
      return;
    }

    Clear();
    if (theLeft.Extent() < theRight.Extent())
    {
      for (Iterator anIter (theLeft); anIter.More(); anIter.Next())
      {
        if (theRight.Contains (anIter.Key()))
        {
          Add (anIter.Key());
        }
      }
    }
    else
    {
      for (Iterator anIter (theRight); anIter.More(); anIter.Next())
      {
        if (theLeft.Contains (anIter.Key()))
        {
          Add (anIter.Key());
        }
      }
    }
  }

  
  
  
  
  Standard_Boolean Intersect (const NCollection_Map& theOther)
  {
    if (this == &theOther
     || IsEmpty())
    {
      return false;
    }

    const Standard_Integer anOldExtent = Extent();
    Intersection (*this, theOther);
    return anOldExtent != Extent();
  }

  
  
  
  
  void Subtraction (const NCollection_Map& theLeft,
                    const NCollection_Map& theRight)
  {
    if (this == &theLeft)
    {
      Subtract (theRight);
      return;
    }
    else if (this == &theRight)
    {
      NCollection_Map aCopy (1, this->myAllocator);
      Exchange    (aCopy);
      Subtraction (theLeft, aCopy);
      return;
    }

    Assign   (theLeft);
    Subtract (theRight);
  }

  
  
  
  
  
  Standard_Boolean Subtract (const NCollection_Map& theOther)
  {
    if (this == &theOther)
    {
      if (IsEmpty())
      {
        return false;
      }

      Clear();
      return true;
    }

    const Standard_Integer anOldExtent = Extent();
    for (Iterator anIter (theOther); anIter.More(); anIter.Next())
    {
      Remove (anIter.Key());
    }
    return anOldExtent != Extent();
  }

  
  
  
  void Difference (const NCollection_Map& theLeft,
                   const NCollection_Map& theRight)
  {
    if (&theLeft == &theRight)
    {
      Clear();
      return;
    }
    else if (this == &theLeft)
    {
      NCollection_Map aCopy (1, this->myAllocator);
      Exchange   (aCopy);
      Difference (aCopy, theRight);
      return;
    }
    else if (this == &theRight)
    {
      NCollection_Map aCopy (1, this->myAllocator);
      Exchange   (aCopy);
      Difference (theLeft, aCopy);
      return;
    }

    Clear();
    for (Iterator anIter (theLeft); anIter.More(); anIter.Next())
    {
      if (!theRight.Contains (anIter.Key()))
      {
        Add (anIter.Key());
      }
    }
    for (Iterator anIter (theRight); anIter.More(); anIter.Next())
    {
      if (!theLeft.Contains (anIter.Key()))
      {
        Add (anIter.Key());
      }
    }
  }

  
  
  
  
  Standard_Boolean Differ (const NCollection_Map& theOther)
  {
    if (this == &theOther)
    {
      if (IsEmpty())
      {
        return false;
      }
      Clear();
      return true;
    }

    const Standard_Integer anOldExtent = Extent();
    Difference (*this, theOther);
    return anOldExtent != Extent();
  }

  
};


















































inline Standard_Integer GetCapacity (const Standard_Integer theIncrement)
{
  return Max(theIncrement/8, 1);
}


class NCollection_BaseVector
{
public:
  
  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }
  void* operator new (size_t theSize, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { return theAllocator->Allocate(theSize); } void operator delete (void* theAddress, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { theAllocator->Free(theAddress); }

protected:

  
  struct MemBlock
  {

  public:

    
    
    
    void* findV (const Standard_Integer theIndex,
                 const size_t           theItemSize) const
    {
      return (char* )DataPtr + size_t(theIndex) * theItemSize;
    }

  public:

    void*            DataPtr;    
    Standard_Integer FirstIndex; 
    Standard_Integer Length;
    Standard_Integer Size;

  };

  
  class Iterator
  {
  protected:
    Iterator()
    : myICurBlock (0),
      myIEndBlock (0),
      myCurIndex  (0),
      myEndIndex  (0) {}

    Iterator (const NCollection_BaseVector& theVector, Standard_Boolean theToEnd = false)
    {
      initV (theVector, theToEnd);
    }

    Iterator (const Iterator& theVector)
    {
      copyV (theVector);
    }

    __declspec( dllexport ) void initV (const NCollection_BaseVector& theVector, Standard_Boolean theToEnd = false);

    __declspec( dllexport ) void copyV (const Iterator&);

    Standard_Boolean moreV() const
    {
      return (myICurBlock < myIEndBlock || myCurIndex < myEndIndex);
    }

    void nextV()
    {
      if (++myCurIndex >= myVector->myData[myICurBlock].Length
       && myICurBlock < myIEndBlock)
      {
        ++myICurBlock;
        myCurIndex = 0;
      }
    }

    void prevV()
    {
      if (--myCurIndex < 0 && myICurBlock > 0)
      {
        --myICurBlock;
        myCurIndex = myVector->myData[myICurBlock].Length - 1;
      }
    }

    void offsetV (Standard_Integer theOffset)
    {
      const Standard_Integer anIndex = myCurIndex + myICurBlock * myVector->myIncrement + theOffset;
      myICurBlock = anIndex / myVector->myIncrement;
      myCurIndex = anIndex % myVector->myIncrement;
      if (myICurBlock > myIEndBlock)
      {
        
        
        --myICurBlock;
        myCurIndex += myVector->myIncrement;
      }
    }

    Standard_Integer differV (const Iterator& theOther) const
    {
      return (myCurIndex - theOther.myCurIndex) + (myICurBlock - theOther.myICurBlock) * myVector->myIncrement;
    }

    const MemBlock* curBlockV() const
    {
      return &myVector->myData[myICurBlock];
    }

    const NCollection_BaseVector* myVector;    
    Standard_Integer              myICurBlock; 
    Standard_Integer              myIEndBlock;
    Standard_Integer              myCurIndex;  
    Standard_Integer              myEndIndex;
  };

protected: 

  typedef void (*initMemBlocks_t) (NCollection_BaseVector& theVector,
                                   MemBlock&               theBlock,
                                   const Standard_Integer  theFirst,
                                   const Standard_Integer  theSize);

  
  
  
  
  __declspec( dllexport ) MemBlock* allocMemBlocks (const Standard_Integer theCapacity,
                                            MemBlock*              theSource     = 0,
                                            const Standard_Integer theSourceSize = 0);

protected: 

  
  NCollection_BaseVector (const opencascade::handle<NCollection_BaseAllocator>& theAllocator,
                          initMemBlocks_t                    theInitBlocks,
                          const size_t                       theSize,
                          const Standard_Integer             theInc)
  : myItemSize   (theSize),
    myIncrement  (theInc),
    myLength     (0),
    myCapacity   (GetCapacity (myIncrement)),
    myNBlocks    (0),
    myInitBlocks (theInitBlocks)
  {
    myAllocator = (theAllocator.IsNull() ? NCollection_BaseAllocator::CommonBaseAllocator() : theAllocator);
    myData = allocMemBlocks (myCapacity);
  }

  
  NCollection_BaseVector (const opencascade::handle<NCollection_BaseAllocator>& theAllocator,
                          initMemBlocks_t                    theInitBlocks,
                          const NCollection_BaseVector&      theOther)
  : myItemSize   (theOther.myItemSize),
    myIncrement  (theOther.myIncrement),
    myLength     (theOther.myLength),
    myCapacity   (GetCapacity(myIncrement) + theOther.myLength / theOther.myIncrement),
    myNBlocks    (theOther.myLength == 0 ? 0 : 1 + (theOther.myLength - 1)/theOther.myIncrement),
    myInitBlocks (theInitBlocks)
  {
    myAllocator = (theAllocator.IsNull() ? NCollection_BaseAllocator::CommonBaseAllocator() : theAllocator);
    myData = allocMemBlocks (myCapacity);
  }

  
  virtual ~NCollection_BaseVector() {}

  
  __declspec( dllexport ) void* expandV (const Standard_Integer theIndex);

  
  inline void* findV (const Standard_Integer theIndex) const
  {
    if (theIndex < 0 || theIndex >= myLength) Standard_OutOfRange::Raise("NCollection_BaseVector::findV");;
    const Standard_Integer aBlock = theIndex / myIncrement;
    return myData[aBlock].findV (theIndex - aBlock * myIncrement, myItemSize);
  }

public: 

  
  __declspec( dllexport ) void Clear();
  
  void SetIncrement(const Standard_Integer aIncrement) {
    if (aIncrement > 0) {
      if (!myIncrement) {
        myIncrement=aIncrement;
      }
    }
  }

  
  const opencascade::handle<NCollection_BaseAllocator>& Allocator() const
  {
    return myAllocator;
  }

protected: 

  opencascade::handle<NCollection_BaseAllocator> myAllocator;
  size_t           myItemSize;
  Standard_Integer myIncrement;
  Standard_Integer myLength;
  Standard_Integer myCapacity;
  Standard_Integer myNBlocks;
  MemBlock*        myData;
  initMemBlocks_t  myInitBlocks;

protected:

  friend class Iterator;
};


























template <class TheItemType>
class NCollection_Vector : public NCollection_BaseVector
{
public:
  
  typedef TheItemType value_type;

public:

  
  class Iterator : public NCollection_BaseVector::Iterator
  {
  public:

    
    Iterator() {}

    
    Iterator (const NCollection_Vector& theVector, Standard_Boolean theToEnd = false)
    : NCollection_BaseVector::Iterator (theVector, theToEnd) {}

    
    Iterator (const Iterator& theOther)
    : NCollection_BaseVector::Iterator (theOther) {}

    
    void Init (const NCollection_Vector& theVector)
    {
      initV (theVector);
    }

    
    Iterator& operator= (const Iterator& theOther)
    {
      copyV (theOther);
      return *this;
    }

    
    Standard_Boolean More() const
    {
      return moreV();
    }

    
    void Next()
    {
      nextV();
    }

    
    void Previous()
    {
      prevV();
    }

    
    void Offset (ptrdiff_t theOffset)
    {
      offsetV (static_cast<int>(theOffset));
    }

    
    ptrdiff_t Differ (const Iterator& theOther) const
    {
      return differV (theOther);
    }

    
    const TheItemType& Value() const
    {
      return ((const TheItemType* )curBlockV()->DataPtr)[myCurIndex];
    }

    
    TheItemType& ChangeValue() const
    {
      return ((TheItemType* )curBlockV()->DataPtr)[myCurIndex];
    }

    
    Standard_Boolean IsEqual (const Iterator& theOther) const
    {
      return myVector    == theOther.myVector
          && myCurIndex  == theOther.myCurIndex
          && myEndIndex  == theOther.myEndIndex  
          && myICurBlock == theOther.myICurBlock
          && myIEndBlock == theOther.myIEndBlock;
    }
  };

  
  typedef NCollection_StlIterator<std::random_access_iterator_tag, Iterator, TheItemType, false> iterator;

  
  typedef NCollection_StlIterator<std::random_access_iterator_tag, Iterator, TheItemType, true> const_iterator;

  
  iterator begin() const { return Iterator (*this, false); }

  
  iterator end() const { return Iterator (*this, true); }

  
  const_iterator cbegin() const { return Iterator (*this, false); }

  
  const_iterator cend() const { return Iterator (*this, true); }

public: 

  
  explicit NCollection_Vector (const Standard_Integer theIncrement              = 256,
                               const opencascade::handle<NCollection_BaseAllocator>& theAlloc = 0) :
    NCollection_BaseVector (theAlloc, initMemBlocks, sizeof(TheItemType), theIncrement)
  {}

  
  NCollection_Vector (const NCollection_Vector& theOther) :
    NCollection_BaseVector (theOther.myAllocator, initMemBlocks, theOther)
  {
    copyData (theOther);
  }

  
  virtual ~NCollection_Vector()
  {
    for (Standard_Integer anItemIter = 0; anItemIter < myCapacity; ++anItemIter)
    {
      initMemBlocks (*this, myData[anItemIter], 0, 0);
    }
    this->myAllocator->Free (myData);
  }

  
  Standard_Integer Length() const
  {
    return myLength;
  }

  
  Standard_Integer Size() const
  {
    return myLength;
  }

  
  
  Standard_Integer Lower() const
  {
    return 0;
  }

  
  
  Standard_Integer Upper() const
  {
    return myLength - 1;
  }

  
  Standard_Boolean IsEmpty() const
  {
    return (myLength == 0);
  }

  
  inline void Assign (const NCollection_Vector& theOther,
                      const Standard_Boolean theOwnAllocator = true);

  
  NCollection_Vector& operator= (const NCollection_Vector& theOther)
  {
    Assign (theOther, false);
    return *this;
  }

  
  TheItemType& Append (const TheItemType& theValue)
  {
    TheItemType& anAppended = *(TheItemType* )expandV (myLength);
    anAppended = theValue;
    return anAppended;
  }

  
  const TheItemType& operator() (const Standard_Integer theIndex) const
  {
    return Value (theIndex);
  }

  const TheItemType& Value (const Standard_Integer theIndex) const
  {
    return *(const TheItemType* )findV (theIndex);
  }

  
  const TheItemType& First() const
  {
    return *(const TheItemType* )findV (Lower());
  }

  
  TheItemType& ChangeFirst()
  {
    return *(TheItemType* )findV (Lower());
  }

  
  const TheItemType& Last() const
  {
    return *(const TheItemType* )findV (Upper());
  }

  
  TheItemType& ChangeLast()
  {
    return *(TheItemType* )findV (Upper());
  }

  
  TheItemType& operator() (const Standard_Integer theIndex)
  {
    return ChangeValue (theIndex);
  }

  TheItemType& ChangeValue (const Standard_Integer theIndex)
  {
    return *(TheItemType* )findV (theIndex);
  }

  
  TheItemType& SetValue (const Standard_Integer theIndex,
                         const TheItemType&     theValue)
  {
    if (theIndex < 0) Standard_OutOfRange::Raise("NCollection_Vector::SetValue");;
    TheItemType* const aVecValue = (TheItemType* )(theIndex < myLength ? findV (theIndex) : expandV (theIndex));
    *aVecValue = theValue;
    return *aVecValue;
  }

private: 

  void copyData (const NCollection_Vector& theOther)
  {
    Standard_Integer iBlock = 0;
    Iterator anIter (theOther);
    for (Standard_Integer aLength = 0; aLength < myLength; aLength += myIncrement)
    {
      MemBlock& aBlock = myData[iBlock];
      initMemBlocks (*this, aBlock, aLength, myIncrement);
      Standard_Integer anItemIter = 0;
      for (; anItemIter < myIncrement; ++anItemIter)
      {
        if (!anIter.More())
        {
          break;
        }

        ((TheItemType* )aBlock.DataPtr)[anItemIter] = anIter.Value();
        anIter.Next();
      }
      aBlock.Length = anItemIter;
      iBlock++;
    }
  }

  
  static void initMemBlocks (NCollection_BaseVector&           theVector,
                             NCollection_BaseVector::MemBlock& theBlock,
                             const Standard_Integer            theFirst,
                             const Standard_Integer            theSize)
  {
    NCollection_Vector& aSelf = static_cast<NCollection_Vector&> (theVector);
    opencascade::handle<NCollection_BaseAllocator>& anAllocator = aSelf.myAllocator;

    
    if (theBlock.DataPtr != 0)
    {
      for (Standard_Integer anItemIter = 0; anItemIter < theBlock.Size; ++anItemIter)
      {
        ((TheItemType* )theBlock.DataPtr)[anItemIter].~TheItemType();
      }
      anAllocator->Free (theBlock.DataPtr);
      theBlock.DataPtr = 0;
    }

    
    if (theSize > 0)
    {
      theBlock.DataPtr = anAllocator->Allocate (theSize * sizeof(TheItemType));
      for (Standard_Integer anItemIter = 0; anItemIter < theSize; ++anItemIter)
      {
        new (&((TheItemType* )theBlock.DataPtr)[anItemIter]) TheItemType;
      }
    }
    theBlock.FirstIndex = theFirst;
    theBlock.Size       = theSize;
    theBlock.Length     = 0;
  }

  friend class Iterator;

};


template <class TheItemType> inline
void NCollection_Vector<TheItemType>::Assign (const NCollection_Vector& theOther,
                                              const Standard_Boolean    theOwnAllocator)
{
  if (this == &theOther)
  {
    return;
  }

  
  for (Standard_Integer anItemIter = 0; anItemIter < myCapacity; ++anItemIter)
  {
    initMemBlocks (*this, myData[anItemIter], 0, 0);
  }
  this->myAllocator->Free (myData);

  
  if (!theOwnAllocator)
  {
    this->myAllocator = theOther.myAllocator;
  }
  myIncrement = theOther.myIncrement;
  myLength    = theOther.myLength;
  myNBlocks   = (myLength == 0) ? 0 : (1 + (myLength - 1)/myIncrement);
  myCapacity  = GetCapacity (myIncrement) + myLength / myIncrement;
  myData      = allocMemBlocks (myCapacity);

  
  copyData (theOther);
}























  








template <class T>
class NCollection_Handle : public opencascade::handle<Standard_Transient>
{
 private:

  
  
  
  class Ptr : public Standard_Transient
  {
  public:

    
    Ptr (T* theObj) { myPtr = theObj; }

    
    ~Ptr () { if ( myPtr ) delete myPtr; myPtr = 0; }

  protected:

    
    Ptr(const Ptr&);

    
    Ptr& operator=(const Ptr&);

  public:
    T* myPtr; 
  };
  
  
  
  
  NCollection_Handle (Ptr* thePtr, int) 
    : opencascade::handle<Standard_Transient> (thePtr) {}
  
 public:

  typedef T element_type;

  
  NCollection_Handle () {}
  
  
  NCollection_Handle (T* theObject) 
    : opencascade::handle<Standard_Transient> (theObject ? new Ptr (theObject) : 0) {}
  
  
  T* get () { return ((Ptr*)opencascade::handle<Standard_Transient>::get())->myPtr; }

  
  const T* get () const { return ((Ptr*)opencascade::handle<Standard_Transient>::get())->myPtr; }

  
  T* operator -> () { return get(); }
  
  
  const T* operator -> () const { return get(); }
  
  
  T& operator * () { return *get(); }
  
  
  const T& operator * () const { return *get(); }

  
  
  static NCollection_Handle<T> DownCast (const opencascade::handle<Standard_Transient>& theOther)
  {
    return NCollection_Handle<T>(dynamic_cast<Ptr*>(theOther.get()), 0);
  }

};


















































            

template < class TheKeyType, 
           class TheItemType, 
           class Hasher = NCollection_DefaultHasher<TheKeyType> > 
class NCollection_IndexedDataMap : public NCollection_BaseMap
{
  
 private:
  class IndexedDataMapNode : public NCollection_TListNode<TheItemType>
  {
  public:
    
    IndexedDataMapNode (const TheKeyType&      theKey1, 
                        const Standard_Integer theKey2,
                        const TheItemType&     theItem,
                        NCollection_ListNode*  theNext1, 
                        NCollection_ListNode*  theNext2) :
      NCollection_TListNode<TheItemType>(theItem,theNext1),
      myKey1(theKey1),
      myKey2(theKey2),
      myNext2((IndexedDataMapNode*)theNext2)
    { 
    }
    
    TheKeyType& Key1 (void)
    { return myKey1; }
    
    Standard_Integer& Key2 (void)
    { return myKey2; }
    
    IndexedDataMapNode*& Next2 (void)
    { return myNext2; }
    
    
    static void delNode (NCollection_ListNode * theNode, 
                         opencascade::handle<NCollection_BaseAllocator>& theAl)
    {
      ((IndexedDataMapNode *) theNode)->~IndexedDataMapNode();
      theAl->Free(theNode);
    }
  private:
    TheKeyType           myKey1;
    Standard_Integer     myKey2;
    IndexedDataMapNode * myNext2;
  };

 public:
  
  class Iterator
  {
  public:
    
    Iterator (void) :
      myMap(0),
      myIndex(0) {}
    
    Iterator (const NCollection_IndexedDataMap& theMap)
    : myMap  ((NCollection_IndexedDataMap* )&theMap),
      myNode (myMap->nodeFromIndex (1)),
      myIndex (1) {}
    
    Standard_Boolean More(void) const
    { return (myMap != 0) && (myIndex <= myMap->Extent()); }
    
    void Next(void)
    {
      myNode = myMap->nodeFromIndex (++myIndex);
    }
    
    const TheItemType& Value(void) const
    {  
      if (!More()) Standard_NoSuchObject::Raise("NCollection_IndexedDataMap::Iterator::Value");;
      return myNode->Value();
    }
    
    TheItemType& ChangeValue(void) const
    {  
      if (!More()) Standard_NoSuchObject::Raise("NCollection_IndexedDataMap::Iterator::ChangeValue");;
      return myNode->ChangeValue();
    }
    
    const TheKeyType& Key() const
    {
      if (!More()) Standard_NoSuchObject::Raise("NCollection_IndexedDataMap::Iterator::Key");;
      return myNode->Key1();
    }
    
    Standard_Boolean IsEqual (const Iterator& theOther) const
    {
      return myMap == theOther.myMap &&
             myNode == theOther.myNode &&
             myIndex == theOther.myIndex;
    }
  private:
    NCollection_IndexedDataMap* myMap;   
    IndexedDataMapNode*         myNode;  
    Standard_Integer            myIndex; 
  };
  
  
  typedef NCollection_StlIterator<std::forward_iterator_tag, Iterator, TheItemType, false> iterator;

  
  typedef NCollection_StlIterator<std::forward_iterator_tag, Iterator, TheItemType, true> const_iterator;

  
  iterator begin() const { return Iterator (*this); }

  
  iterator end() const { return Iterator(); }

  
  const_iterator cbegin() const { return Iterator (*this); }

  
  const_iterator cend() const { return Iterator(); }
  
 public:
  

  
  NCollection_IndexedDataMap (const Standard_Integer NbBuckets=1,
                     const opencascade::handle<NCollection_BaseAllocator>& theAllocator = 0L)
    :  NCollection_BaseMap (NbBuckets, false, theAllocator) {}

  
  NCollection_IndexedDataMap (const NCollection_IndexedDataMap& theOther) 
    : NCollection_BaseMap (theOther.NbBuckets(), false, theOther.myAllocator) 
  { *this = theOther; }

  
  
  void Exchange (NCollection_IndexedDataMap& theOther)
  {
    this->exchangeMapsData (theOther);
  }

  
  
  NCollection_IndexedDataMap& Assign (const NCollection_IndexedDataMap& theOther)
  { 
    if (this == &theOther)
      return *this;

    Clear();
    ReSize (theOther.Extent()-1);
    Standard_Integer i;
    for (i=1; i<=theOther.Extent(); i++)
    {
      TheKeyType aKey1 = theOther.FindKey(i);
      TheItemType anItem = theOther.FindFromIndex(i);
      Standard_Integer iK1 = Hasher::HashCode (aKey1, NbBuckets());
      Standard_Integer iK2 = ::HashCode (i, NbBuckets());
      IndexedDataMapNode * pNode = 
        new (this->myAllocator) IndexedDataMapNode (aKey1, i, anItem,
                                              myData1[iK1], myData2[iK2]);
      myData1[iK1] = pNode;
      myData2[iK2] = pNode;
      Increment();
    }
    return *this;
  }

  
  NCollection_IndexedDataMap& operator= (const NCollection_IndexedDataMap& theOther)
  {
    return Assign (theOther);
  }

  
  void ReSize (const Standard_Integer N)
  {
    NCollection_ListNode** ppNewData1 = 0;
    NCollection_ListNode** ppNewData2 = 0;
    Standard_Integer newBuck;
    if (BeginResize (N, newBuck, ppNewData1, ppNewData2))
    {
      if (myData1) 
      {
        IndexedDataMapNode *p, *q;
        Standard_Integer i, iK1, iK2;
        for (i = 0; i <= NbBuckets(); i++) 
        {
          if (myData1[i]) 
          {
            p = (IndexedDataMapNode *) myData1[i];
            while (p) 
            {
              iK1 = Hasher::HashCode (p->Key1(), newBuck);
              iK2 = ::HashCode (p->Key2(), newBuck);
              q = (IndexedDataMapNode*) p->Next();
              p->Next()  = ppNewData1[iK1];
              p->Next2() = (IndexedDataMapNode*)ppNewData2[iK2];
              ppNewData1[iK1] = p;
              ppNewData2[iK2] = p;
              p = q;
            }
          }
        }
      }
      EndResize (N, newBuck, ppNewData1, ppNewData2);
    }
  }

  
  Standard_Integer Add (const TheKeyType& theKey1, const TheItemType& theItem)
  {
    if (Resizable()) 
      ReSize(Extent());
    Standard_Integer iK1 = Hasher::HashCode (theKey1, NbBuckets());
    IndexedDataMapNode * pNode;
    pNode = (IndexedDataMapNode *) myData1[iK1];
    while (pNode)
    {
      if (Hasher::IsEqual (pNode->Key1(), theKey1))
        return pNode->Key2();
      pNode = (IndexedDataMapNode *) pNode->Next();
    }
    Increment();
    Standard_Integer iK2 = ::HashCode(Extent(),NbBuckets());
    pNode = new (this->myAllocator) IndexedDataMapNode (theKey1, Extent(), theItem,
                                                  myData1[iK1], myData2[iK2]);
    myData1[iK1] = pNode;
    myData2[iK2] = pNode;
    return Extent();
  }

  
  Standard_Boolean Contains (const TheKeyType& theKey1) const
  {
    if (IsEmpty()) 
      return false;
    Standard_Integer iK1 = Hasher::HashCode (theKey1, NbBuckets());
    IndexedDataMapNode * pNode1;
    pNode1 = (IndexedDataMapNode *) myData1[iK1];
    while (pNode1) 
    {
      if (Hasher::IsEqual(pNode1->Key1(), theKey1)) 
        return true;
      pNode1 = (IndexedDataMapNode *) pNode1->Next();
    }
    return false;
  }

  
  void Substitute (const Standard_Integer theIndex,
                   const TheKeyType&      theKey1,
                   const TheItemType&     theItem)
  {
    if (theIndex < 1 || theIndex > Extent()) Standard_OutOfRange::Raise("NCollection_IndexedDataMap::Substitute : " "Index is out of range");;

    IndexedDataMapNode * p;
    
    Standard_Integer iK1 = Hasher::HashCode (theKey1, NbBuckets());
    p = (IndexedDataMapNode *) myData1[iK1];
    while (p)
    {
      if (Hasher::IsEqual (p->Key1(), theKey1))
      {
        if (p->Key2() != theIndex)
        {
          Standard_DomainError::Raise ("NCollection_IndexedDataMap::Substitute : "
                                       "Attempt to substitute existing key");
        }
        p->Key1() = theKey1;
        p->ChangeValue() = theItem;
        return;
      }
      p = (IndexedDataMapNode *) p->Next();
    }

    
    Standard_Integer iK2 = ::HashCode (theIndex, NbBuckets());
    p = (IndexedDataMapNode *) myData2[iK2];
    while (p) 
    {
      if (p->Key2() == theIndex) 
        break;
      p = (IndexedDataMapNode*) p->Next2();
    }
    
    
    Standard_Integer iK = Hasher::HashCode (p->Key1(), NbBuckets());
    IndexedDataMapNode * q = (IndexedDataMapNode *) myData1[iK];
    if (q == p)
      myData1[iK] = (IndexedDataMapNode *) p->Next();
    else 
    {
      while (q->Next() != p) 
        q = (IndexedDataMapNode *) q->Next();
      q->Next() = p->Next();
    }

    
    p->Key1()  = theKey1;
    p->ChangeValue() = theItem;
    p->Next()  = myData1[iK1];
    myData1[iK1] = p;
  }

  
  void Swap (const Standard_Integer theIndex1,
             const Standard_Integer theIndex2)
  {
    if (theIndex1 < 1 || theIndex1 > Extent() || theIndex2 < 1 || theIndex2 > Extent()) Standard_OutOfRange::Raise("NCollection_IndexedDataMap::Swap");;

    if (theIndex1 == theIndex2)
    {
      return;
    }

    const Standard_Integer aK1 = ::HashCode (theIndex1, NbBuckets());
    const Standard_Integer aK2 = ::HashCode (theIndex2, NbBuckets());

    IndexedDataMapNode* aP1 = (IndexedDataMapNode*) myData2[aK1];
    IndexedDataMapNode* aP2 = (IndexedDataMapNode*) myData2[aK2];

    if (aP1->Key2() == theIndex1)
    {
      myData2[aK1] = (IndexedDataMapNode *) aP1->Next2();
    }
    else
    {
      IndexedDataMapNode* aQ = aP1;
      for (aP1 = aQ->Next2(); aP1->Key2() != theIndex1; aQ = aP1, aP1 = aQ->Next2()) { }

      aQ->Next2() = aP1->Next2();
    }

    if (aP2->Key2() == theIndex2)
    {
      myData2[aK2] = (IndexedDataMapNode *) aP2->Next2();
    }
    else
    {
      IndexedDataMapNode* aQ = aP2;
      for (aP2 = aQ->Next2(); aP2->Key2() != theIndex2; aQ = aP2, aP2 = aQ->Next2()) { }

      aQ->Next2() = aP2->Next2();
    }

    std::swap (aP1->Key2(),
               aP2->Key2());

    aP1->Next2() = (IndexedDataMapNode*) myData2[aK2];
    myData2[aK2] = aP1;

    aP2->Next2() = (IndexedDataMapNode*) myData2[aK1];
    myData2[aK1] = aP2;
  }

  
  void RemoveLast (void)
  {
    if (Extent() == 0) Standard_OutOfRange::Raise("NCollection_IndexedDataMap::RemoveLast");;

    IndexedDataMapNode * p, * q;
    
    Standard_Integer iK2 = ::HashCode (Extent(), NbBuckets());
    p = (IndexedDataMapNode *) myData2[iK2];
    q = 0;
    while (p) 
    {
      if (p->Key2() == Extent()) 
        break;
      q = p;
      p = (IndexedDataMapNode*) p->Next2();
    }
    if (q == 0) 
      myData2[iK2] = (IndexedDataMapNode *) p->Next2();
    else 
      q->Next2() = p->Next2();
    
    
    Standard_Integer iK1 = Hasher::HashCode (p->Key1(), NbBuckets());
    q = (IndexedDataMapNode *) myData1[iK1];
    if (q == p)
      myData1[iK1] = (IndexedDataMapNode *) p->Next();
    else 
    {
      while (q->Next() != p) 
        q = (IndexedDataMapNode *) q->Next();
      q->Next() = p->Next();
    }
    p->~IndexedDataMapNode();
    this->myAllocator->Free(p);
    Decrement();
  }

  
  const TheKeyType& FindKey (const Standard_Integer theKey2) const
  {
    if (theKey2 < 1 || theKey2 > Extent()) Standard_OutOfRange::Raise("NCollection_IndexedDataMap::FindKey");;

    IndexedDataMapNode* aNode = nodeFromIndex (theKey2);
    if (aNode == 0)
    {
      Standard_NoSuchObject::Raise ("NCollection_IndexedDataMap::FindKey");
    }
    return aNode->Key1();
  }

  
  const TheItemType& FindFromIndex (const Standard_Integer theKey2) const
  {
    if (theKey2 < 1 || theKey2 > Extent()) Standard_OutOfRange::Raise("NCollection_IndexedDataMap::FindFromIndex");;

    IndexedDataMapNode* aNode = nodeFromIndex (theKey2);
    if (aNode == 0)
    {
      Standard_NoSuchObject::Raise ("NCollection_IndexedDataMap::FindFromIndex");
    }
    return aNode->Value();
  }

  
  const TheItemType& operator() (const Standard_Integer theKey2) const
  { return FindFromIndex (theKey2); }

  
  TheItemType& ChangeFromIndex (const Standard_Integer theKey2)
  {
    if (theKey2 < 1 || theKey2 > Extent()) Standard_OutOfRange::Raise("NCollection_IndexedDataMap::ChangeFromIndex");;

    IndexedDataMapNode* aNode = nodeFromIndex (theKey2);
    if (aNode == 0)
    {
      Standard_NoSuchObject::Raise ("NCollection_IndexedDataMap::ChangeFromIndex");
    }
    return aNode->ChangeValue();
  }

  
  TheItemType& operator() (const Standard_Integer theKey2)
  { return ChangeFromIndex (theKey2); }

  
  Standard_Integer FindIndex(const TheKeyType& theKey1) const
  {
    if (IsEmpty()) return 0;
    IndexedDataMapNode * pNode1 = 
      (IndexedDataMapNode *) myData1[Hasher::HashCode(theKey1,NbBuckets())];
    while (pNode1)
    {
      if (Hasher::IsEqual (pNode1->Key1(), theKey1)) 
        return pNode1->Key2();
      pNode1 = (IndexedDataMapNode*) pNode1->Next();
    }
    return 0;
  }

  
  const TheItemType& FindFromKey(const TheKeyType& theKey1) const
  {
    if (IsEmpty()) Standard_NoSuchObject::Raise("NCollection_IndexedDataMap::FindFromKey");;

    IndexedDataMapNode * pNode1 = 
      (IndexedDataMapNode *) myData1[Hasher::HashCode(theKey1,NbBuckets())];
    while (pNode1)
    {
      if (Hasher::IsEqual (pNode1->Key1(), theKey1)) 
        return pNode1->Value();
      pNode1 = (IndexedDataMapNode*) pNode1->Next();
    }
    Standard_NoSuchObject::Raise("NCollection_IndexedDataMap::FindFromKey");
    return pNode1->Value();
  }

  
  TheItemType& ChangeFromKey (const TheKeyType& theKey1)
  {
    if (IsEmpty()) Standard_NoSuchObject::Raise("NCollection_IndexedDataMap::ChangeFromKey");;

    IndexedDataMapNode * pNode1 = 
      (IndexedDataMapNode *) myData1[Hasher::HashCode(theKey1,NbBuckets())];
    while (pNode1)
    {
      if (Hasher::IsEqual (pNode1->Key1(), theKey1)) 
        return pNode1->ChangeValue();
      pNode1 = (IndexedDataMapNode*) pNode1->Next();
    }
    Standard_NoSuchObject::Raise("NCollection_IndexedDataMap::ChangeFromKey");
    return pNode1->ChangeValue();
  }

  
  
  const TheItemType* Seek(const TheKeyType& theKey1) const
  {
    return const_cast< NCollection_IndexedDataMap * >( this )->ChangeSeek(theKey1);
    
    
  }

  
  
  TheItemType* ChangeSeek (const TheKeyType& theKey1)
  {
    if (!IsEmpty()) 
    {
      IndexedDataMapNode * pNode1 = 
        (IndexedDataMapNode *) myData1[Hasher::HashCode(theKey1,NbBuckets())];
      while (pNode1)
      {
        if (Hasher::IsEqual (pNode1->Key1(), theKey1)) 
          return &pNode1->ChangeValue();
        pNode1 = (IndexedDataMapNode*) pNode1->Next();
      }
    }
    return 0L;
  }

  
  
  Standard_Boolean FindFromKey (const TheKeyType& theKey1,
                                TheItemType&      theValue) const
  {
    if (IsEmpty())
    {
      return false;
    }
    for (IndexedDataMapNode* aNode = (IndexedDataMapNode* )myData1[Hasher::HashCode (theKey1, NbBuckets())];
         aNode != 0; aNode = (IndexedDataMapNode* )aNode->Next())
    {
      if (Hasher::IsEqual (aNode->Key1(), theKey1))
      {
        theValue = aNode->Value();
        return true;
      }
    }
    return false;
  }

  
  
  void Clear(const Standard_Boolean doReleaseMemory = true)
  { Destroy (IndexedDataMapNode::delNode, doReleaseMemory); }

  
  void Clear (const opencascade::handle<NCollection_BaseAllocator>& theAllocator)
  { 
    Clear();
    this->myAllocator = ( ! theAllocator.IsNull() ? theAllocator :
                    NCollection_BaseAllocator::CommonBaseAllocator() );
  }

  
  virtual ~NCollection_IndexedDataMap (void)
  { Clear(); }

  
  Standard_Integer Size(void) const
  { return Extent(); }

 private:
  

  
  
  IndexedDataMapNode* nodeFromIndex (const Standard_Integer theKey2) const
  {
    if (Extent() == 0)
    {
      return 0;
    }
    for (IndexedDataMapNode* aNode = (IndexedDataMapNode* )myData2[::HashCode (theKey2, NbBuckets())];
         aNode != 0; aNode = (IndexedDataMapNode* )aNode->Next2())
    {
      if (aNode->Key2() == theKey2)
      {
        return aNode;
      }
    }
    return 0;
  }

};
















































template<class theItem, Standard_Integer MAX_ARRAY_SIZE = 1024> class NCollection_LocalArray
{
public:

  NCollection_LocalArray (const size_t theSize)
  : myPtr (myBuffer)
  {
    Allocate(theSize);
  }

  NCollection_LocalArray ()
  : myPtr (myBuffer), mySize(0) {}

  ~NCollection_LocalArray()
  {
    Deallocate();
  }

  void Allocate (const size_t theSize)
  {
    Deallocate();
    if (theSize > MAX_ARRAY_SIZE)
      myPtr = (theItem*)Standard::Allocate (theSize * sizeof(theItem));
    else
      myPtr = myBuffer;

    mySize = theSize;
  }

  size_t Size() const
  {
    return mySize;
  }

  operator theItem*() const
  {
    return myPtr;
  }

private:

  NCollection_LocalArray (const NCollection_LocalArray& );
  NCollection_LocalArray& operator= (const NCollection_LocalArray& );

protected:

  void Deallocate()
  {
    if (myPtr != myBuffer)
      Standard::Free (myPtr);
  }

protected:

  theItem  myBuffer[MAX_ARRAY_SIZE];
  theItem* myPtr;
  size_t mySize;

};











































class NCollection_IncAllocator : public NCollection_BaseAllocator
{
 public:
  
  typedef void * aligned_t;

  

  
  __declspec( dllexport ) NCollection_IncAllocator (const size_t theBlockSize = DefaultBlockSize);

  
  __declspec( dllexport ) virtual void* Allocate        (const size_t size) override;

  
  __declspec( dllexport ) virtual void  Free            (void *anAddress) override;

  
  __declspec( dllexport ) size_t        GetMemSize      () const;

  
  __declspec( dllexport ) ~NCollection_IncAllocator     ();

  
  
  __declspec( dllexport ) void *        Reallocate      (void * anAddress,
                                                 const size_t oldSize,
                                                 const size_t newSize);

  
  
  
  
  
  
  
  __declspec( dllexport ) void          Reset           (const Standard_Boolean
                                                 doReleaseMem=true);

  static const size_t DefaultBlockSize = 24600;

 protected:
  struct         IBlock;

  
  
  __declspec( dllexport ) void  Clean                   ();

  
  
  void *                allocateNewBlock        (const size_t cSize);

 private:
  
  NCollection_IncAllocator (const NCollection_IncAllocator&);
  NCollection_IncAllocator& operator = (const NCollection_IncAllocator&);

 protected:
  
  struct IBlock {
    aligned_t * allocateInBlock (const size_t cSize)
    {
      aligned_t * aResult = p_free_space;
      p_free_space += cSize;
      return aResult;
    }
    aligned_t     * p_free_space;
    aligned_t     * p_end_block;
    struct IBlock * p_next;
  };
 protected:
  
  IBlock        * myFirstBlock;
  size_t        mySize;
  size_t        myMemSize;

 public:

  public: typedef NCollection_BaseAllocator base_type; static const char* get_type_name () { return "NCollection_IncAllocator"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;
};


class NCollection_IncAllocator; class Handle_NCollection_IncAllocator : public opencascade::handle<NCollection_IncAllocator> { public: Handle_NCollection_IncAllocator() {} Handle_NCollection_IncAllocator(opencascade::handle<NCollection_IncAllocator>&& theHandle) : opencascade::handle<NCollection_IncAllocator>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <NCollection_IncAllocator,T2>::value>::type> inline Handle_NCollection_IncAllocator(const opencascade::handle<T2>& theOther) : opencascade::handle<NCollection_IncAllocator>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <NCollection_IncAllocator,T2>::value>::type> inline Handle_NCollection_IncAllocator(const T2* theOther) : opencascade::handle<NCollection_IncAllocator>(theOther) {} template<typename T> inline Handle_NCollection_IncAllocator& operator=(T theOther) { opencascade::handle<NCollection_IncAllocator>::operator=(theOther); return *this; } };






enum NCollection_CellFilter_Action 
{
  CellFilter_Keep  = 0, 
  CellFilter_Purge = 1  
};

















































































template <class Inspector> class NCollection_CellFilter
{
public:
  typedef typename Inspector::Target Target;
  typedef typename Inspector::Point  Point;

public:

  
  
  
  
  
  
  
  
  
  
  NCollection_CellFilter (const Standard_Integer theDim,
                          const Standard_Real theCellSize = 0,
                          const opencascade::handle<NCollection_IncAllocator>& theAlloc = 0)
  : myCellSize(0, theDim - 1)
  {
    myDim = theDim;
    Reset (theCellSize, theAlloc);
  }

  
  NCollection_CellFilter (const Standard_Real theCellSize = 0,
                          const opencascade::handle<NCollection_IncAllocator>& theAlloc = 0)
  : myCellSize(0, Inspector::Dimension - 1)
  {
    myDim = Inspector::Dimension;
    Reset (theCellSize, theAlloc);
  }

  
  void Reset (Standard_Real theCellSize, 
              const opencascade::handle<NCollection_IncAllocator>& theAlloc=0)
  {
    for (int i=0; i < myDim; i++)
      myCellSize(i) = theCellSize;
    resetAllocator ( theAlloc );
  }

  
  void Reset (NCollection_Array1<Standard_Real>& theCellSize, 
              const opencascade::handle<NCollection_IncAllocator>& theAlloc=0)
  {
    myCellSize = theCellSize;
    resetAllocator ( theAlloc );
  }
  
  
  void Add (const Target& theTarget, const Point &thePnt)
  {
    Cell aCell (thePnt, myCellSize);
    add (aCell, theTarget);
  }

  
  
  
  void Add (const Target& theTarget, 
	    const Point &thePntMin, const Point &thePntMax)
  {
    
    Cell aCellMin (thePntMin, myCellSize);
    Cell aCellMax (thePntMax, myCellSize);
    Cell aCell = aCellMin;
    
    iterateAdd (myDim-1, aCell, aCellMin, aCellMax, theTarget);
  }

  
  
  void Remove (const Target& theTarget, const Point &thePnt)
  {
    Cell aCell (thePnt, myCellSize);
    remove (aCell, theTarget);
  }

  
  
  
  
  
  void Remove (const Target& theTarget, 
               const Point &thePntMin, const Point &thePntMax)
  {
    
    Cell aCellMin (thePntMin, myCellSize);
    Cell aCellMax (thePntMax, myCellSize);
    Cell aCell = aCellMin;
    
    iterateRemove (myDim-1, aCell, aCellMin, aCellMax, theTarget);
  }

  
  void Inspect (const Point& thePnt, Inspector &theInspector) 
  {
    Cell aCell (thePnt, myCellSize);
    inspect (aCell, theInspector);
  }

  
  
  
  void Inspect (const Point& thePntMin, const Point& thePntMax, 
                Inspector &theInspector) 
  {
    
    Cell aCellMin (thePntMin, myCellSize);
    Cell aCellMax (thePntMax, myCellSize);
    Cell aCell = aCellMin;
    
    iterateInspect (myDim-1, aCell, 
                    aCellMin, aCellMax, theInspector);
  }




protected:

 
  


  struct ListNode
  {
    ListNode()
    {
      
      Standard_NoSuchObject::Raise("NCollection_CellFilter::ListNode()");
    }

    Target Object;
    ListNode *Next;
  };

  




  struct Cell
  {
  public:

    
    Cell (const Point& thePnt, 
          const NCollection_Array1<Standard_Real>& theCellSize)
      : index(theCellSize.Size()),
        Objects(0)
    {
      for (int i = 0; i < theCellSize.Size(); i++)
      {
          Standard_Real val = (Standard_Real)(Inspector::Coord(i, thePnt) / theCellSize(theCellSize.Lower() + i));
          
          
          
          
          index[i] = long((val > 2147483647 - 1) ? fmod(val, (Standard_Real) 2147483647) 
                                               : (val < (-2147483647 - 1) + 1) ? fmod(val, (Standard_Real) (-2147483647 - 1))
                                                                     : val);
      }
    }

    
    Cell (const Cell& theOther)
      : index(theOther.index.Size())
    {
      (*this) = theOther;
    }

    
    void operator = (const Cell& theOther)
    {
      Standard_Integer aDim = Standard_Integer(theOther.index.Size());
      for(Standard_Integer anIdx = 0; anIdx < aDim; anIdx++)
        index[anIdx] = theOther.index[anIdx];

      Objects = theOther.Objects;
      ((Cell&)theOther).Objects = 0;
    }

    
    ~Cell ()
    {
      for ( ListNode* aNode = Objects; aNode; aNode = aNode->Next )
        aNode->Object.~Target();
      
      Objects = 0;
    }

    
    Standard_Boolean IsEqual (const Cell& theOther) const
    {
      Standard_Integer aDim = Standard_Integer(theOther.index.Size());
      for (int i=0; i < aDim; i++) 
        if ( index[i] != theOther.index[i] ) return false;
      return true;
    }

    
    Standard_Integer HashCode (const Standard_Integer theUpper) const
    {
      
      Standard_Integer aDim = Standard_Integer(index.Size());
      const Standard_Size aShiftBits = ((8 * sizeof(long))-1) / aDim;
      long aCode=0;
      for (int i=0; i < aDim; i++)
        aCode = ( aCode << aShiftBits ) ^ index[i];
      return (unsigned)aCode % theUpper;
    }

  public:
    NCollection_LocalArray<long, 10> index;
    ListNode *Objects;
  };

  
  friend Standard_Integer HashCode (const Cell &aCell, const Standard_Integer theUpper)
  { return aCell.HashCode(theUpper); }
  friend Standard_Boolean IsEqual (const Cell &aCell1, const Cell &aCell2)
  { return aCell1.IsEqual(aCell2); }

protected:

  
  void resetAllocator (const opencascade::handle<NCollection_IncAllocator>& theAlloc)
  {
    if ( theAlloc.IsNull() )
      myAllocator = new NCollection_IncAllocator;
    else 
      myAllocator = theAlloc;
    myCells.Clear ( myAllocator );
  }
  
  
  void add (const Cell& theCell, const Target& theTarget)
  {
    
    Cell& aMapCell = (Cell&)myCells.Added (theCell);

    
    ListNode* aNode = (ListNode*)myAllocator->Allocate(sizeof(ListNode));
    new (&aNode->Object) Target (theTarget);
    aNode->Next = aMapCell.Objects;
    aMapCell.Objects = aNode;
  }

  
  
  void iterateAdd (int idim, Cell &theCell, 
		   const Cell& theCellMin, const Cell& theCellMax, 
                   const Target& theTarget)
  {
    int start = theCellMin.index[idim];
    int end   = theCellMax.index[idim];
    for (int i=start; i <= end; i++) {
      theCell.index[idim] = i;
      if ( idim ) 
        iterateAdd (idim-1, theCell, theCellMin, theCellMax, theTarget);
      else 
        add (theCell, theTarget);
    }
  }
  
  
  void remove (const Cell& theCell, const Target& theTarget)
  {
    
    if ( ! myCells.Contains (theCell) ) 
      return;

    
    Cell& aMapCell = (Cell&)myCells.Added (theCell);
    ListNode* aNode = aMapCell.Objects;
    ListNode* aPrev = 0;
    while (aNode)
    {
      ListNode* aNext = aNode->Next;
      if (Inspector::IsEqual (aNode->Object, theTarget))
      {
        aNode->Object.~Target();
        (aPrev ? aPrev->Next : aMapCell.Objects) = aNext;
        
      }
      else
        aPrev = aNode;
      aNode = aNext;
    }
  }

  
  
  void iterateRemove (int idim, Cell &theCell, 
                      const Cell& theCellMin, const Cell& theCellMax, 
                      const Target& theTarget)
  {
    int start = theCellMin.index[idim];
    int end   = theCellMax.index[idim];
    for (int i=start; i <= end; i++) {
      theCell.index[idim] = i;
      if ( idim ) 
        iterateRemove (idim-1, theCell, theCellMin, theCellMax, theTarget);
      else 
        remove (theCell, theTarget);
    }
  }

  
  void inspect (const Cell& theCell, Inspector& theInspector) 
  {
    
    if ( ! myCells.Contains (theCell) ) 
      return;

    
    Cell& aMapCell = (Cell&)myCells.Added (theCell);
    ListNode* aNode = aMapCell.Objects;
    ListNode* aPrev = 0;
    while(aNode) {
      ListNode* aNext = aNode->Next;
      NCollection_CellFilter_Action anAction = 
        theInspector.Inspect (aNode->Object);
      
      if ( anAction == CellFilter_Purge ) {
        aNode->Object.~Target();
        (aPrev ? aPrev->Next : aMapCell.Objects) = aNext;
        
      }
      else
        aPrev = aNode;
      aNode = aNext;      
    }
  }

  
  void iterateInspect (int idim, Cell &theCell, 
	               const Cell& theCellMin, const Cell& theCellMax, 
                       Inspector& theInspector) 
  {
    int start = theCellMin.index[idim];
    int end   = theCellMax.index[idim];
    for (int i=start; i <= end; i++) {
      theCell.index[idim] = i;
      if ( idim ) 
        iterateInspect (idim-1, theCell, theCellMin, theCellMax, theInspector);
      else 
        inspect (theCell, theInspector);
    }
  }

protected:
  Standard_Integer myDim;
  opencascade::handle<NCollection_BaseAllocator> myAllocator;
  NCollection_Map<Cell>             myCells;
  NCollection_Array1<Standard_Real> myCellSize;
};






class gp_XYZ;
struct NCollection_CellFilter_InspectorXYZ
{
  
  enum { Dimension = 3 };

  
  typedef gp_XYZ Point;

  
  static Standard_Real Coord (int i, const Point &thePnt) { return thePnt.Coord(i+1); }
  
  
  
  Point Shift (const Point& thePnt, Standard_Real theTol) const 
  { return Point (thePnt.X() + theTol, thePnt.Y() + theTol, thePnt.Z() + theTol); }
};






class gp_XY;
struct NCollection_CellFilter_InspectorXY
{
  
  enum { Dimension = 2 };

  
  typedef gp_XY Point;

  
  static Standard_Real Coord (int i, const Point &thePnt) { return thePnt.Coord(i+1); }

  
  
  Point Shift (const Point& thePnt, Standard_Real theTol) const 
  { return Point (thePnt.X() + theTol, thePnt.Y() + theTol); }
};






















































































template <class TheObjType, class TheBndType> class NCollection_UBTree
{
public:
  
  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }
  void* operator new (size_t theSize, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { return theAllocator->Allocate(theSize); } void operator delete (void* theAddress, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { theAllocator->Free(theAddress); }

public:
  

  


  class Selector
  {
  public:
    


    Selector () : myStop(false) {}

    




    virtual Standard_Boolean Reject (const TheBndType&) const = 0;

    






    virtual Standard_Boolean Accept (const TheObjType&) = 0;

    




    Standard_Boolean Stop () const { return myStop; }

    


    virtual ~Selector () {}

  protected:
    



    Standard_Boolean myStop;
  };

  






  class TreeNode
  {
  public:
    void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }
    void* operator new (size_t theSize, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { return theAllocator->Allocate(theSize); } void operator delete (void* theAddress, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { theAllocator->Free(theAddress); }

  public:
    TreeNode (const TheObjType& theObj, const TheBndType& theBnd)
      : myBnd(theBnd), myObject(theObj), myChildren(0), myParent(0) {}

    Standard_Boolean       IsLeaf       () const { return !myChildren; }
    Standard_Boolean       IsRoot       () const { return !myParent; }
    const TheBndType&      Bnd          () const { return myBnd; }
    TheBndType&            ChangeBnd    ()       { return myBnd; }
    const TheObjType&      Object       () const { return myObject; }
    const TreeNode&        Child        (const Standard_Integer i) const
                                                 { return myChildren[i]; }
    TreeNode&              ChangeChild  (const Standard_Integer i)
                                                 { return myChildren[i]; }
    const TreeNode&        Parent       () const { return *myParent; }
    TreeNode&              ChangeParent ()       { return *myParent; }

    













    void Gemmate            (const TheBndType& theNewBnd,
                             const TheObjType& theObj,
                             const TheBndType& theBnd,
                             const opencascade::handle<NCollection_BaseAllocator>& theAlloc)
    {
      
      TreeNode *children = (TreeNode *) theAlloc->Allocate (2*sizeof(TreeNode));
      new (&children[0]) TreeNode;
      new (&children[1]) TreeNode;
      children[0] = *this;
      children[1].myObject = theObj;
      children[1].myBnd = theBnd;
      children[0].myParent = children[1].myParent = this;
      if (!IsLeaf()) {
        myChildren[0].myParent = children;
        myChildren[1].myParent = children;
      }
      myChildren = children;
      myBnd = theNewBnd;
      myObject = TheObjType();      
    }

    


    void Kill               (const Standard_Integer i,
                             const opencascade::handle<NCollection_BaseAllocator>& theAlloc)
    {
      if (!IsLeaf()) {
        TreeNode *oldChildren = myChildren;
        const Standard_Integer iopp = 1 - i;
        myBnd      = oldChildren[iopp].myBnd;
        myObject   = oldChildren[iopp].myObject;
        myChildren = oldChildren[iopp].myChildren;
        if (!IsLeaf()) {
          myChildren[0].myParent = this;
          myChildren[1].myParent = this;
        }
        
        
        oldChildren[iopp].~TreeNode();
        delNode(&oldChildren[i], theAlloc); 
        theAlloc->Free(oldChildren);
      }
    }


    ~TreeNode () { myChildren = 0L; }

    


 
    static void delNode (TreeNode * theNode,
                         const opencascade::handle<NCollection_BaseAllocator>& theAlloc)
    {
      if (theNode) {
        if (theNode -> myChildren) {
          delNode (&theNode -> myChildren[0], theAlloc);
          delNode (&theNode -> myChildren[1], theAlloc);
          theAlloc->Free(theNode -> myChildren);
        }
        theNode->~TreeNode();
      }
    }

  private:
    TreeNode () : myChildren(0L), myParent(0L) {}

    TheBndType  myBnd;          
    TheObjType  myObject;       
    TreeNode   *myChildren;     
    TreeNode   *myParent;       
  };

  

  


  NCollection_UBTree
    (const opencascade::handle<NCollection_BaseAllocator>& theAllocator=0L)
      : myRoot(0L), myLastNode(0L)
  {
    if (theAllocator.IsNull())
      myAlloc = NCollection_BaseAllocator::CommonBaseAllocator();
    else
      myAlloc = theAllocator;
  }

  








  __declspec( dllexport ) virtual Standard_Boolean Add (const TheObjType& theObj,
                                                const TheBndType& theBnd);

  




  virtual Standard_Integer Select (Selector& theSelector) const
        { return (IsEmpty() ? 0 : Select (Root(), theSelector)); }

  







  virtual void Clear (const opencascade::handle<NCollection_BaseAllocator>& aNewAlloc = 0L)

  {
    if (myRoot) {
      TreeNode::delNode (myRoot, this->myAlloc);
      this->myAlloc->Free (myRoot);
      myRoot = 0L;
    }
    if (aNewAlloc.IsNull() == false)
      myAlloc = aNewAlloc;
  }

  Standard_Boolean IsEmpty () const { return !myRoot; }

  



  const TreeNode& Root () const { return *myRoot; }

  


  virtual ~NCollection_UBTree () { Clear(); }

  




  const opencascade::handle<NCollection_BaseAllocator>& Allocator () const
  { return myAlloc; }

 protected:
  

  



  TreeNode& ChangeLastNode () { return *myLastNode; }

  




  __declspec( dllexport ) Standard_Integer Select (const TreeNode& theBranch,
                                           Selector& theSelector) const;

 private:
  

  
  NCollection_UBTree (const NCollection_UBTree&);

  
  NCollection_UBTree& operator = (const NCollection_UBTree&);

  

  TreeNode                            *myRoot;    
  TreeNode                            *myLastNode;
  opencascade::handle<NCollection_BaseAllocator>    myAlloc;   
};







template <class TheObjType, class TheBndType>
Standard_Boolean NCollection_UBTree<TheObjType,TheBndType>::Add
                        (const TheObjType& theObj,
                         const TheBndType& theBnd)
{
  if (IsEmpty()) {
    
    myRoot = new (this->myAlloc) TreeNode (theObj, theBnd);
    myLastNode = myRoot;
    return true;
  }

  TreeNode *pBranch = myRoot;
  Standard_Boolean isOutOfBranch = pBranch->Bnd().IsOut (theBnd);

  for(;;) {
    
    if (isOutOfBranch || pBranch->IsLeaf()) {
      TheBndType aNewBnd = theBnd;
      aNewBnd.Add (pBranch->Bnd());
      
      pBranch->Gemmate (aNewBnd, theObj, theBnd, this->myAlloc);
      myLastNode = &pBranch->ChangeChild(1);
      break;
    }

    
    pBranch->ChangeBnd().Add (theBnd);

    
    
    
    Standard_Integer iBest = 0;
    Standard_Boolean isOut[] = { pBranch->Child(0).Bnd().IsOut (theBnd),
                                 pBranch->Child(1).Bnd().IsOut (theBnd) };
    if (isOut[0] != isOut[1])
      iBest = (isOut[0] ? 1 : 0);
    else {
      TheBndType aUnion[] = { theBnd, theBnd };
      aUnion[0].Add (pBranch->Child(0).Bnd());
      aUnion[1].Add (pBranch->Child(1).Bnd());
      const Standard_Real d1 = aUnion[0].SquareExtent();
      const Standard_Real d2 = aUnion[1].SquareExtent();
      if (d1 > d2)
        iBest = 1;
    }

    
    isOutOfBranch = isOut[iBest];
    pBranch = &pBranch->ChangeChild(iBest);
  }
  return true;
}








template <class TheObjType, class TheBndType>
Standard_Integer NCollection_UBTree<TheObjType,TheBndType>::Select
                                 (const TreeNode& theBranch,
                                  Selector&       theSelector) const
{
  
  if (theSelector.Reject (theBranch.Bnd()))
    return 0;

  Standard_Integer nSel = 0;

  if (theBranch.IsLeaf()) {
    
    if (theSelector.Accept (theBranch.Object()))
      nSel++;
  }
  else {
    
    nSel += Select (theBranch.Child(0), theSelector);
    if (!theSelector.Stop())
      nSel += Select (theBranch.Child(1), theSelector);
  }

  return nSel;
}


























































































typedef NCollection_Sequence<Standard_Integer> TColStd_SequenceOfInteger;
















template <class TheObjType, class TheBndType> class NCollection_EBTree
  : public NCollection_UBTree <TheObjType, TheBndType>
{
 public:
  typedef NCollection_UBTree <TheObjType, TheBndType> UBTree;
  typedef typename UBTree::TreeNode TreeNode;
  

  


  NCollection_EBTree (const opencascade::handle<NCollection_BaseAllocator>& theAllocator=0L)
    : UBTree (theAllocator) {}

  




 
  __declspec( dllexport ) Standard_Boolean Add    (const TheObjType& theObj,
                                           const TheBndType& theBnd);

  




  __declspec( dllexport ) Standard_Boolean Remove (const TheObjType& theObj);

  



  Standard_Boolean Contains (const TheObjType& theObj) const
        { return myObjNodeMap.IsBound (theObj); }

  



  const TreeNode& FindNode (const TheObjType& theObj) const
        { return *myObjNodeMap.Find (theObj); }

  


  void Clear (const opencascade::handle<NCollection_BaseAllocator>& aNewAlloc = 0L)
        { myObjNodeMap.Clear(); UBTree::Clear(aNewAlloc); }

 private:
  

  
  NCollection_EBTree (const NCollection_EBTree&);

  
  NCollection_EBTree& operator = (const NCollection_EBTree&);

  

  NCollection_DataMap <TheObjType, TreeNode*>
                            myObjNodeMap;   
};









template <class TheObjType, class TheBndType>
Standard_Boolean NCollection_EBTree<TheObjType,TheBndType>::Add
                        (const TheObjType& theObj,
                         const TheBndType& theBnd)
{
  Standard_Boolean result = false;
  if (!Contains (theObj)) {
    
    UBTree::Add (theObj, theBnd);

    
    TreeNode& aNewNode = this->ChangeLastNode();
    myObjNodeMap.Bind (theObj, &aNewNode);
    
    if (!aNewNode.IsRoot()) {
      TreeNode& aNeiNode = aNewNode.ChangeParent().ChangeChild(0);
      if (aNeiNode.IsLeaf()) {
        myObjNodeMap.UnBind (aNeiNode.Object());
        myObjNodeMap.Bind (aNeiNode.Object(), &aNeiNode);
      }
    }
    result = true;
  }
  return result;
}







template <class TheObjType, class TheBndType>
Standard_Boolean NCollection_EBTree<TheObjType,TheBndType>::Remove
                                (const TheObjType& theObj)
{
  Standard_Boolean result = false;
  if (Contains (theObj)) {
    TreeNode* pNode = myObjNodeMap (theObj);
    if (pNode->IsRoot()) {
      
      Clear();
    }
    else {
      
      
      
      myObjNodeMap.UnBind (theObj);
      TreeNode* pParent = &pNode->ChangeParent();
      pParent->Kill ((pNode == &pParent->Child(0) ? 0 : 1),
                     this->Allocator());
      if (pParent->IsLeaf()) {
        
        myObjNodeMap.UnBind (pParent->Object());
        myObjNodeMap.Bind (pParent->Object(), pParent);
      }
      while (!pParent->IsRoot()) {
        pParent = &pParent->ChangeParent();
        pParent->ChangeBnd() = pParent->Child(0).Bnd();
        pParent->ChangeBnd().Add (pParent->Child(1).Bnd());
      }
    }
    result = true;
  }
  return result;
}







































































#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4127 4244 4296 4389 4521 4723)

  #pragma warning(disable: 6294 6326)

 
  
 

 




  
 

namespace std {
	
template<class _Ty>
	struct _Is_RealType
		: _Cat_base<is_same<_Ty, float>::value
		|| is_same<_Ty, double>::value
		|| is_same<_Ty, long double>::value>
	{	
	};

	
template<class _Ty>
	struct _Is_UIntType
		: _Cat_base<is_same<_Ty, unsigned short>::value
		|| is_same<_Ty, unsigned int>::value
		|| is_same<_Ty, unsigned long>::value
		|| is_same<_Ty, unsigned long long>::value>
	{	
	};

	
template<class _Ty>
	struct _Is_IntType
		: _Cat_base<is_same<_Ty, short>::value
		|| is_same<_Ty, int>::value
		|| is_same<_Ty, long>::value
		|| is_same<_Ty, long long>::value
		|| _Is_UIntType<_Ty>::value>
	{	
	};

	
template<class _Seed_seq,
	class _Self,
	class _Engine = _Self>
	struct _Enable_if_seed_seq
		: enable_if<
			!is_convertible<typename decay<_Seed_seq>::type,
				typename _Self::result_type>::value
			&& !is_same<typename decay<_Seed_seq>::type,
				_Self>::value
			&& !is_same<typename decay<_Seed_seq>::type,
				_Engine>::value>
	{	
	};

	
static constexpr long double _Pi = 3.14159265358979323846264338327950288L;
static constexpr long double _Exp1 = 2.71828182845904523536028747135266250L;
static constexpr long double _Two32 = 4294967296.0L;
static constexpr long double _Two31 = 2147483648.0L;

	
[[noreturn]] __declspec(dllimport) void __cdecl _Rng_abort(  const char *_Msg);
__declspec(dllimport) float __cdecl _XLgamma(float);
__declspec(dllimport) double __cdecl _XLgamma(double);
__declspec(dllimport) long double __cdecl _XLgamma(long double);

	
static constexpr int _Nwords = 4;

template<class _Elem,
	class _Traits>
	basic_ostream<_Elem, _Traits>& _Write(
		basic_ostream<_Elem, _Traits>& _Os, long double _Dx)
	{	
	int _Ex;
	long double _Frac = :: frexpl(_Dx, &_Ex);
	for (int _Nw = 0; _Nw < _Nwords; ++_Nw)
		{	
		_Frac *= _Two31;
		long _Digits = (long)_Frac;
		_Frac -= _Digits;
		_Os << ' ' << _Digits;
		}
	_Os << ' ' << _Ex;
	return (_Os);
	}

template<class _Elem,
	class _Traits>
	basic_istream<_Elem, _Traits>&
		_Read(basic_istream<_Elem, _Traits>& _Is, long double& _Dx)
	{	
	long double _Frac = 0.0;
	long _Digits;
	for (int _Nw = 0; _Nw < _Nwords; ++_Nw)
		{	
		_Is >> _Digits;
		long double _Temp = _Digits / _Two31;
		for (int _Idx = 0; _Idx < _Nw; ++_Idx)
			_Temp /= _Two31;
		_Frac += _Temp;
		}
	_Is >> _Digits;
	_Dx = :: ldexpl(_Frac, _Digits);
	return (_Is);
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>&
		_In(basic_istream<_Elem, _Traits>& _Is, _Ty& _Dx)
	{	
	long double _Vx;
	_Ty _Max = (numeric_limits<_Ty>::max)();
	_Read(_Is, _Vx);
	if (:: fabsl(_Vx) <= _Max)
		_Dx = (_Ty)_Vx;
	else if (_Vx < 0)
		_Dx = -_Max;
	else
		_Dx = _Max;
	return (_Is);
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>&
		_Out(basic_ostream<_Elem, _Traits>& _Os, _Ty _Dx)
	{	
	return (_Write(_Os, _Dx));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	class _Wrap_istream
	{	
public:
	_Wrap_istream(basic_istream<_Elem, _Traits>& _Is)
		: _Str(_Is)
		{	
		}

	_Ty operator()()
		{	
		_Ty _Data;
		_Str >> _Data;
		if (!_Str)
			_Xinvalid_argument("input stream corrupted");
		return (_Data);
		}

	_Wrap_istream& operator=(const _Wrap_istream&) = delete;

private:
	basic_istream<_Elem, _Traits>& _Str;
	};

	
class seed_seq
	{	
public:
	typedef unsigned int result_type;

	seed_seq()
		{	
		}

	template<class _Ty>
		seed_seq(::std:: initializer_list<_Ty> _Ilist)
		{	
		_Construct(_Ilist.begin(), _Ilist.end());
		}

	template<class _InIt>
		seed_seq(_InIt _First, _InIt _Last)
		{	
		_Construct(_First, _Last);
		}

	template<class _RanIt>
		void generate(_RanIt _First, _RanIt _Last) const
		{	
		;
		_Generate_unchecked(_Unchecked(_First), _Unchecked(_Last));
		}

	template<class _OutIt>
		void param(_OutIt _Dest) const
		{	
		::std:: copy(_Myvec.begin(), _Myvec.end(), _Dest);
		}

	size_t size() const noexcept
		{	
		return (_Myvec.size());
		}

	seed_seq(const seed_seq&) = delete;
	void operator=(const seed_seq&) = delete;

private:
	template<class _InIt>
		void _Construct(_InIt _First, _InIt _Last)
		{	
		for (; _First != _Last; ++_First)
			_Myvec.push_back((unsigned int)*_First);
		}

	template<class _RanIt>
		void _Generate_unchecked(_RanIt _First, _RanIt _Last) const
		{	
		const size_t _Nx = _Last - _First;

		if (0 < _Nx)
			{	
			const size_t _Sx = _Myvec.size();
			const size_t _Tx = 623 <= _Nx ? 11 : 68 <= _Nx ? 7
				: 39 <= _Nx ? 5 : 7 <= _Nx ? 3 : (_Nx - 1) / 2;
			const size_t _Px = (_Nx - _Tx) / 2;
			const size_t _Qx = _Px + _Tx;
			const size_t _Mx = _Nx <= _Sx ? _Sx + 1 : _Nx;
			size_t _Kx;

			_Iter_value_t<_RanIt> _Mask = _Iter_value_t<_RanIt>(1) << 31;
			_Mask <<= 1;	
			_Mask -= 1;

			for (_Kx = 0; _Kx < _Nx; ++_Kx)
				_First[_Kx] = 0x8b8b8b8b;
			for (_Kx = 0; _Kx < _Mx; ++_Kx)
				{	
				result_type _R1 = 1664525 * _Xor27(_First[_Kx % _Nx]
					^ _First[(_Kx + _Px) % _Nx] ^ _First[(_Kx - 1) % _Nx]);
				result_type _R2 = (result_type)((_R1 + (_Kx == 0 ? _Sx
					: _Kx <= _Sx ? _Kx % _Nx + _Myvec[(_Kx - 1) % _Sx]
					: _Kx % _Nx)) & _Mask);

				_First[(_Kx + _Px) % _Nx] =
					(_First[(_Kx + _Px) % _Nx] + _R1) & _Mask;
				_First[(_Kx + _Qx) % _Nx] =
					(_First[(_Kx + _Qx) % _Nx] + _R2) & _Mask;
				_First[_Kx % _Nx] = _R2;
				}
			for (; _Kx < _Mx + _Nx; ++_Kx)
				{	
				result_type _R3 = 1566083941 * _Xor27(_First[_Kx % _Nx]
					+ _First[(_Kx + _Px) % _Nx] + _First[(_Kx - 1) % _Nx]);
				result_type _R4 = (result_type)((_R3 - _Kx % _Nx) & _Mask);

				_First[(_Kx + _Px) % _Nx] =
					(_First[(_Kx + _Px) % _Nx] ^ _R3) & _Mask;
				_First[(_Kx + _Qx) % _Nx] =
					(_First[(_Kx + _Qx) % _Nx] ^ _R4) & _Mask;
				_First[_Kx % _Nx] = _R4;
				}
			}
		}

	result_type _Xor27(result_type _Val) const
		{	
		return (_Val ^ (_Val >> 27));
		}

	vector<result_type> _Myvec;
	};

	
template<class _Real,
	size_t _Bits,
	class _Gen>
	_Real generate_canonical(_Gen& _Gx)
	{	
	static_assert(_Is_RealType<_Real>::value,
		"invalid template argument for generate_canonical");

	const size_t _Digits = static_cast<size_t>(numeric_limits<_Real>::digits);
	const size_t _Minbits = _Digits < _Bits ? _Digits : _Bits;

	const _Real _Gxmin = static_cast<_Real>((_Gx.min)());
	const _Real _Gxmax = static_cast<_Real>((_Gx.max)());
	const _Real _Rx = (_Gxmax - _Gxmin) + static_cast<_Real>(1);

	const int _Ceil = static_cast<int>(::std:: ceil(
		static_cast<_Real>(_Minbits) / ::std:: log2(_Rx)));
	const int _Kx = _Ceil < 1 ? 1 : _Ceil;

	_Real _Ans = static_cast<_Real>(0);
	_Real _Factor = static_cast<_Real>(1);

	for (int _Idx = 0; _Idx < _Kx; ++_Idx)
		{	
		_Ans += (static_cast<_Real>(_Gx()) - _Gxmin) * _Factor;
		_Factor *= _Rx;
		}

	return (_Ans / _Factor);
	}





	
typedef unsigned long long _Max_type;

static constexpr int _MP_len = 5;
typedef _Max_type _MP_arr[_MP_len];

__declspec(dllimport) _Max_type __cdecl _MP_Get(_MP_arr);
__declspec(dllimport) void __cdecl _MP_Add(_MP_arr, _Max_type);
__declspec(dllimport) void __cdecl _MP_Mul(_MP_arr, _Max_type, _Max_type);
__declspec(dllimport) void __cdecl _MP_Rem(_MP_arr, _Max_type);

	
template<class _Ity,
	class _Ty,
	_Max_type _Ax,
	_Max_type _Cx,
	_Max_type _Mx>
	struct _Mul_mod
	{	
		
	_Mul_mod(_Ty _Val = 0)
		: _Prev(_Val)
		{	
		}

	_Ty operator()()
		{	
		_Ty _Divisor = (_Ty)_Mx;

		_Prev = _Mx ? ((_Ity)_Ax * _Prev + (_Ty)_Cx) % _Divisor
			: ((_Ity)_Ax * _Prev + (_Ty)_Cx);
		if (_Prev < static_cast<_Ty>(0))
			_Prev += (_Ty)_Mx;
		return (_Prev);
		}

	_Ty _Prev;
	};

template<class _Ty,
	_Max_type _Ax,
	_Max_type _Cx,
	_Max_type _Mx>
	class _Mult_prec
	{	
		
public:
	_Mult_prec(_Ty _Val = 0)
		: _Prev(_Val)
		{	
		}

	_Ty operator()()
		{	
		_MP_arr _Wx;
		_MP_Mul(_Wx, _Prev, _Ax);
		_MP_Add(_Wx, _Cx);
		_MP_Rem(_Wx, _Mx);
		_Prev = _MP_Get(_Wx);
		return (_Prev);
		}

	_Ty _Prev;
	};

template<class _Ty,
	_Max_type _Ax,
	_Max_type _Cx,
	_Max_type _Mx,
	bool>
	struct _Select_ulonglong
	{	
	typedef _Mult_prec<_Ty, _Ax, _Cx, _Mx> type;
	};

template<class _Ty,
	_Max_type _Ax,
	_Max_type _Cx,
	_Max_type _Mx>
	struct _Select_ulonglong<_Ty, _Ax, _Cx, _Mx, true>
	{	
	typedef _Mul_mod<unsigned long long, _Ty, _Ax, _Cx, _Mx> type;
	};

template<class _Ty,
	_Max_type _Ax,
	_Max_type _Cx,
	_Max_type _Mx,
	bool>
	struct _Select_ulong
	{	
	typedef typename _Select_ulonglong<_Ty, _Ax, _Cx, _Mx,
		_Cx < 0xffffffffffffffff && _Mx <= (0xffffffffffffffff - _Cx) / _Ax>::type type;
	};

template<class _Ty,
	_Max_type _Ax,
	_Max_type _Cx,
	_Max_type _Mx>
	struct _Select_ulong<_Ty, _Ax, _Cx, _Mx, true>
	{	
	typedef _Mul_mod<unsigned long, _Ty, _Ax, _Cx, _Mx> type;
	};

template<class _Ty,
	_Max_type _Ax,
	_Max_type _Cx,
	_Max_type _Mx,
	bool>
	struct _Select_uint
	{	
	typedef typename _Select_ulong<_Ty, _Ax, _Cx, _Mx,
		_Cx < 0xffffffffUL && _Mx <= (0xffffffffUL - _Cx) / _Ax>::type type;
	};

template<class _Ty,
	_Max_type _Ax,
	_Max_type _Cx,
	_Max_type _Mx>
	struct _Select_uint<_Ty, _Ax, _Cx, _Mx, true>
	{	
	typedef _Mul_mod<unsigned int, _Ty, _Ax, _Cx, _Mx> type;
	};

template<class _Ty,
	_Max_type _Ax,
	_Max_type _Cx,
	_Max_type _Mx>
	struct _Select
	{	
	typedef typename _Select_uint<_Ty, _Ax, _Cx, _Mx,
		_Cx < 0xffffffff && _Mx <= (0xffffffff - _Cx) / _Ax>::type type;
	};

template<class _Uint,
	_Uint _Ax,
	_Uint _Cx,
	_Uint _Mx>
	class linear_congruential
	{	
public:
	typedef linear_congruential<_Uint, _Ax, _Cx, _Mx> _Myt;
	typedef _Uint result_type;

	static constexpr _Uint multiplier = _Ax;
	static constexpr _Uint increment = _Cx;
	static constexpr _Uint modulus = _Mx;

	static constexpr _Uint default_seed = 1U;

	explicit linear_congruential(_Uint _X0 = default_seed)
		{	
		seed(_X0);
		}

	template<class _Gen,
		class = typename _Enable_if_seed_seq<_Gen, _Myt>::type>
		linear_congruential(_Gen& _Gx)
		{	
		seed(_Gx);
		}

	void seed(_Uint _X0 = default_seed)
		{	
		_Reset(_X0);
		}

	template<class _Gen>
		void seed(_Gen& _Gx, bool = false)
		{	
		_Seed(_Gx, is_arithmetic<_Gen>());
		}

	_Uint (min)() const
		{	
		return (_Cx != 0 ? 0 : 1);
		}

	_Uint (max)() const
		{	
		return (_Mx != 0 ? _Mx - 1 : (numeric_limits<_Uint>::max)());
		}

	_Uint operator()()
		{	
		return (_Imp());
		}

	void discard(unsigned long long _Nskip)
		{	
		for (; 0 < _Nskip; --_Nskip)
			(*this)();
		}

	bool _Equals(const _Myt& _Right) const
		{	
		return (_Imp._Prev == _Right._Imp._Prev);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>&
			_Write(basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		return (_Ostr << _Imp._Prev);
		}

protected:
	template<class _Gen>
		void _Seed(_Gen& _Gx, true_type)
		{	
		_Reset((_Uint)_Gx);
		}

	template<class _Gen>
		void _Seed(_Gen& _Gx, false_type)
		{	
		_Reset(_Gx());
		}

  #pragma warning(push)
  #pragma warning(disable: 4724) 
	void _Reset(_Uint _X0)
		{	
		_Imp._Prev = _Mx != 0 ? _X0 % _Mx : _X0;
		if (_Imp._Prev == 0 && _Cx == 0)
			_Imp._Prev = 1;
		}
  #pragma warning(pop)

	typename _Select<_Uint, _Ax, _Cx, _Mx>::type _Imp;
	};

template<class _Uint,
	_Uint _Ax,
	_Uint _Cx,
	_Uint _Mx>
	bool operator==(
		const linear_congruential<_Uint, _Ax, _Cx, _Mx>& _Left,
		const linear_congruential<_Uint, _Ax, _Cx, _Mx>& _Right)
	{	
	return (_Left._Equals(_Right));
	}

template<class _Uint,
	_Uint _Ax,
	_Uint _Cx,
	_Uint _Mx>
	bool operator!=(
		const linear_congruential<_Uint, _Ax, _Cx, _Mx>& _Left,
		const linear_congruential<_Uint, _Ax, _Cx, _Mx>& _Right)
	{	
	return (!_Left._Equals(_Right));
	}

template<class _Elem,
	class _Traits,
	class _Uint,
	_Uint _Ax,
	_Uint _Cx,
	_Uint _Mx>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		linear_congruential<_Uint, _Ax, _Cx, _Mx>& _Eng)
	{	
	_Wrap_istream<_Elem, _Traits, _Uint> _In(_Istr);
	_Eng.seed(_In);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Uint,
	_Uint _Ax,
	_Uint _Cx,
	_Uint _Mx>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const linear_congruential<_Uint, _Ax, _Cx, _Mx>& _Eng)
	{	
	return (_Eng._Write(_Ostr));
	}

		
template<class _Uint,
	_Uint _Ax,
	_Uint _Cx,
	_Uint _Mx>
	class linear_congruential_engine
		: public linear_congruential<_Uint, _Ax, _Cx, _Mx>
	{	
public:
	static_assert(_Is_UIntType<_Uint>::value
		&& (0 == _Mx || (_Ax < _Mx && _Cx < _Mx)),
		"invalid template argument for linear_congruential_engine");

	typedef linear_congruential_engine<_Uint, _Ax, _Cx, _Mx> _Myt;
	typedef linear_congruential<_Uint, _Ax, _Cx, _Mx> _Mybase;

	explicit linear_congruential_engine(_Uint _X0 = _Mybase::default_seed)
		: linear_congruential<_Uint, _Ax, _Cx, _Mx>(_X0)	
		{	
		}

	template<class _Seed_seq,
		class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
		explicit linear_congruential_engine(_Seed_seq& _Seq)
		: linear_congruential<_Uint, _Ax, _Cx, _Mx>()	
		{	
		seed(_Seq);
		}

	void seed(_Uint _X0 = _Mybase::default_seed)
		{	
		this->_Reset(_X0);
		}

	static constexpr int _Nw = (8 * sizeof (_Uint) + 31) / 32;

	template<class _Seed_seq,
		class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
		void seed(_Seed_seq& _Seq)
		{	
		_Uint _Arr[3 + _Nw];
		int _Lsh = 8 * sizeof (_Uint);	

		_Seq.generate(&_Arr[0], &_Arr[3 + _Nw]);
		for (int _Idx = _Nw; 0 < --_Idx; )
			_Arr[3 + _Idx - 1] |=
				_Arr[3 + _Idx] << _Lsh;
		this->_Reset(_Arr[3]);
		}

	static constexpr _Uint (min)()
		{	
		return (_Cx != 0 ? 0 : 1);
		}

	static constexpr _Uint (max)()
		{	
		return (_Mx != 0 ? _Mx - 1 : (numeric_limits<_Uint>::max)());
		}
	};

	
	
template<class _Ty,
	size_t _Nw>
	struct _Circ_buf
	{	
	_Ty _At(int _Ix) const
		{	
		return (_Ax[_Base(_Ix)]);
		}

	bool _Equals(const _Circ_buf& _Right) const
		{	
		const _Ty *_Last1 = _Ax + _Idx;
		const _Ty *_Last2 = _Right._Ax + _Right._Idx;
		const _Ty *_First, *_Last, *_Other;
		bool _Use2 = _Base() < _Right._Base();

		if (_Use2)
			{	
				
			_First = _Right._Ax + _Right._Base();
			_Last = _Last2;
			_Other = _Ax + _Base();
			}
		else
			{	
				
			_First = _Ax + _Base();
			_Last = _Last1;
			_Other = _Right._Ax + _Right._Base();
			}

		ptrdiff_t _N0 = _Nw;
		while (0 < _N0)
			{	
				
				
				
				
			const _Ty *_Limit = _First < _Last ? _Last
				: _Use2 ? _Right._Ax + 2 * _Nw
				: _Ax + 2 * _Nw;
			_N0 -= _Limit - _First;
			while (_First != _Limit)
				if (*_First++ != *_Other++)
					return (false);
			_First = _Other;
			_Last = _Use2 ? _Last1 : _Last2;
			_Other = _Use2 ? _Right._Ax : _Ax;
			_Use2 = !_Use2;
			}
		return (true);
		}

	unsigned int _Base(int _Ix = 0) const
		{	
		return ((_Ix += _Idx) < _Nw ? (_Ix + _Nw) : (_Ix - _Nw));
		}

	unsigned int _Idx;
	_Ty _Ax[2 * _Nw];
	};

	
template<class _Ty,
	size_t _Sx,
	size_t _Rx,
	class _Swc_Traits>
	class _Swc_base
		: public _Circ_buf<_Ty, _Rx>
	{	
public:
	typedef _Ty result_type;
	typedef _Swc_Traits _Traits;
	typedef _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits> _Myt;
	typedef _Circ_buf<_Ty, _Rx> _Mybase;
	typedef typename _Swc_Traits::_Seed_t _Seed_t;

	static constexpr size_t short_lag = _Sx;
	static constexpr size_t long_lag = _Rx;
	static constexpr _Seed_t default_seed = static_cast<_Seed_t>(19780503U);

	_Swc_base()
		{	
		seed();
		}

	_Swc_base(_Seed_t _X0)
		{	
		seed(_X0);
		}

	template<class _Gen,
		class = typename _Enable_if_seed_seq<_Gen, _Myt>::type>
		_Swc_base(_Gen& _Gx)
		{	
		seed(_Gx);
		}

	void seed(_Seed_t _Value = default_seed)
		{	
		_Seed(_Value, false, true_type());
		}

	template<class _Gen>
		void seed(_Gen& _Gx, bool _Readcy = false)
		{	
		_Seed(_Gx, _Readcy, is_arithmetic<_Gen>());
		}

	result_type (min)() const
		{	
		return (0);
		}

	result_type (max)() const
		{	
		return (_Swc_Traits::_Max);
		}

	result_type operator()()
		{	
		int _Ix = 2 * _Rx <= this->_Idx ? 0 : this->_Idx;
		if (_Ix < _Sx)
			_Setx(_Ix, this->_Ax[_Ix + 2 * _Rx - _Sx],
				this->_Ax[_Ix + _Rx]);
		else if (_Ix < _Rx)
			_Setx(_Ix, this->_Ax[_Ix - _Sx], this->_Ax[_Ix + _Rx]);
		else
			_Setx(_Ix, this->_Ax[_Ix - _Sx], this->_Ax[_Ix - _Rx]);
		this->_Idx = _Ix + 1;
		return (this->_Ax[_Ix]);
		}

	void discard(unsigned long long _Nskip)
		{	
		for (; 0 < _Nskip; --_Nskip)
			(*this)();
		}

	bool _Equals(const _Swc_base& _Right) const
		{	
		return (_Mybase::_Equals(_Right)
			&& _Carry == _Right._Carry);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>&
			_Write(basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Swc_Traits::_Write(_Ostr, *this, _Carry);
		return (_Ostr);
		}

protected:
	template<class _Gen>
		void _Seed(_Gen& _Gx, bool _Readcy, true_type)
		{	
		linear_congruential<_Seed_t, 40014U, 0U, 2147483563U> _Lc(
			_Gx == 0U ? default_seed : _Gx);
		_Reset(_Lc, _Readcy);
		}

	template<class _Gen>
		void _Seed(_Gen& _Gx, bool _Readcy, false_type)
		{	
		_Reset(_Gx, _Readcy);
		}

	template<class _Gen>
		void _Reset(_Gen& _Gx, bool _Readcy)
		{	
		_Carry = _Swc_Traits::_Reset(_Gx, this->_Ax, _Readcy);
		this->_Idx = _Rx;
		}

	void _Setx(int _Ix, _Ty _Xis, _Ty _Xir)
		{	
		bool _Underflowed = false;
		_Ty _Newx = _Xis;
		if (_Newx < _Xir)
			_Underflowed = true;
		_Newx -= _Xir;
		if (_Newx < static_cast<typename _Swc_Traits::_UCy_t>(_Carry))
			_Underflowed = true;
		_Newx -= _Carry;
		if (_Underflowed)
			{	
			_Newx += _Swc_Traits::_Mod;
			_Carry = _Swc_Traits::_Cy;
			}
		else
			_Carry = 0;
		this->_Ax[_Ix] = _Newx;
		}

	typename _Swc_Traits::_Cy_t _Carry;
	};

template<class _Ty,
	size_t _Sx,
	size_t _Rx,
	class _Swc_Traits>
	bool operator==(const _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>& _Left,
		const _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>& _Right)
		{	
		return (_Left._Equals(_Right));
		}

template<class _Ty,
	size_t _Sx,
	size_t _Rx,
	class _Swc_Traits>
	bool operator!=(const _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>& _Left,
		const _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>& _Right)
		{	
		return (!_Left._Equals(_Right));
		}

template<class _Elem,
	class _Traits,
	class _Ty,
	size_t _Sx,
	size_t _Rx,
	class _Swc_Traits>
	basic_istream<_Elem, _Traits>&
		operator>>(basic_istream<_Elem, _Traits>& _Istr,
		_Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>& _Eng)
		{	
		_Wrap_istream<_Elem, _Traits, typename _Swc_Traits::_Seed_t>
			_Gen(_Istr);
		_Eng.seed(_Gen, true);
		return (_Istr);
		}

template<class _Elem,
	class _Traits,
	class _Ty,
	size_t _Sx,
	size_t _Rx,
	class _Swc_Traits>
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
		const _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>& _Eng)
		{	
		return (_Eng._Write(_Ostr));
		}

template<class _Ty,
	size_t _Sx,
	size_t _Rx,
	class _Swc_Traits>
	const size_t _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>::short_lag;

template<class _Ty,
	size_t _Sx,
	size_t _Rx,
	class _Swc_Traits>
	const size_t _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>::long_lag;

	
template<class _Ty,
	_Ty _Mx,
	size_t _Nw>
	struct _Swc_traits
	{	
	typedef int _Cy_t;
	typedef unsigned int _UCy_t;
	typedef _Ty _Mod_t;
	typedef _Ty _Seed_t;

	static constexpr _Cy_t _Cy = 1;
	static constexpr _Mod_t _Mod = _Mx;
	static constexpr _Ty _Max = _Mx - 1;

	static int _Get_wc()
		{	
		int _Kx;

		if (_Mx == 0)
			_Kx = (8 * sizeof (_Ty) + 31) / 32;
		else
			{	
			_ULonglong _Val = (_ULonglong)1 << 32;
			for (_Kx = 1; 0 < _Val && _Val < _Mx; ++_Kx)
				_Val = _Val << 32;
			}
		return (_Kx);
		}

	template<class _Gen>
		static _Cy_t _Reset(_Gen& _Gx, _Ty *_Ax, bool _Readcy)
		{	
			
			
		int _Kx = _Get_wc();

		for (int _Ix = 0; _Ix < _Nw; ++_Ix)
			{	
			_Ax[_Ix] = _Gx();
			for (int _Jx = 0; ++_Jx < _Kx; )
				_Ax[_Ix] |= (_Ty)_Gx() << (32 * _Jx);
			}

		_Cy_t _Ans = _Reduce(_Ax);
		if (!_Readcy)
			return (_Ans);
		else
			return (_Gx());
		}

  #pragma warning(push)
  #pragma warning(disable: 4724) 
	static _Cy_t _Reduce(_Ty *_Ax)
		{	
		if (_Mx != 0)
			for (int _Ix = 0; _Ix < _Nw; ++_Ix)
				_Ax[_Ix] = _Ax[_Ix] % _Mx;
		return (_Ax[_Nw - 1] == 0);
		}
  #pragma warning(pop)

	template<class _Elem,
		class _Traits>
		static void _Write(basic_ostream<_Elem, _Traits>& _Ostr,
			const _Circ_buf<_Ty, _Nw>& _Buf, _Cy_t _Cy)
		{	
		int _Kx = _Get_wc();

		for (int _Ix = 0; _Ix < _Nw; ++_Ix)
			for (int _Jx = 1; _Jx <= _Kx; ++_Jx)
				{	
				unsigned int _Word =
					(unsigned int)(_Buf._At(_Ix) >> ((_Kx - _Jx) * 32));
				_Ostr << _Word << ' ';
				}
		_Ostr << _Cy;
		}
	};

	
template<class _Ty,
	_Ty _Mx,
	size_t _Sx,
	size_t _Rx>
	class subtract_with_carry
		: public _Swc_base<_Ty, _Sx, _Rx, _Swc_traits<_Ty, _Mx, _Rx> >
	{	
public:
	typedef subtract_with_carry<_Ty, _Mx, _Sx, _Rx> _Myt;
	typedef _Swc_base<_Ty, _Sx, _Rx, _Swc_traits<_Ty, _Mx, _Rx> > _Mybase;

	static constexpr _Ty modulus = _Mx;

	using _Mybase::default_seed;

	explicit subtract_with_carry(_Ty _X0 = default_seed)
		: _Mybase(_X0)
		{	
		}

	template<class _Gen,
		class = typename _Enable_if_seed_seq<_Gen, _Myt>::type>
		subtract_with_carry(_Gen& _Gx)
		: _Mybase(_Gx)
		{	
		}
	};

		
template<class _Ty,
	size_t _Wx,
	size_t _Sx,
	size_t _Rx>
	class subtract_with_carry_engine
		: public subtract_with_carry<_Ty,
			(_Ty(1) << (_Wx - 1)) << 1, _Sx, _Rx>
	{	
public:
	static_assert(_Is_UIntType<_Ty>::value && 0U < _Sx && _Sx < _Rx
		&& 0 < _Wx && _Wx <= numeric_limits<_Ty>::digits,
		"invalid template argument for subtract_with_carry_engine");

	typedef subtract_with_carry_engine<_Ty, _Wx, _Sx, _Rx> _Myt;

	static constexpr _Ty _Mx = (_Ty(1) << (_Wx - 1)) << 1;
	static constexpr size_t word_size = _Wx;
	static constexpr size_t short_lag = _Sx;
	static constexpr size_t long_lag = _Rx;

	typedef subtract_with_carry<_Ty, _Mx, _Sx, _Rx> _Mybase;
	typedef typename _Mybase::_Traits _Traits;
	typedef _Ty result_type;

	using _Mybase::default_seed;

	explicit subtract_with_carry_engine(_Ty _X0 = default_seed)
		: subtract_with_carry<_Ty, _Mx, _Sx, _Rx>(_X0)	
		{	
		}

	template<class _Seed_seq,
		class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
		explicit subtract_with_carry_engine(_Seed_seq& _Seq)
		: subtract_with_carry<_Ty, _Mx, _Sx, _Rx>()	
		{	
		seed(_Seq);
		}

	void seed(_Ty _Value = default_seed)
		{	
		this->_Seed(_Value, false, true_type());
		}

	static constexpr int _Kx = (8 * sizeof (_Ty) + 31) / 32;

	template<class _Seed_seq,
		class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
		void seed(_Seed_seq& _Seq)
		{	
		unsigned long _Arr[_Kx * _Rx];
		_Seq.generate(&_Arr[0], &_Arr[_Kx * _Rx]);

		int _Idx0 = 0;
		for (int _Ix = 0; _Ix < _Rx; ++_Ix, _Idx0 += _Kx)
			{	
			this->_Ax[_Ix] = _Arr[_Idx0];
			for (int _Jx = 0; ++_Jx < _Kx; )
				this->_Ax[_Ix] |= (_Ty)_Arr[_Idx0 + _Jx] << (32 * _Jx);

			if (_Traits::_Mod != 0)
				this->_Ax[_Ix] %= _Traits::_Mod;
			}
		this->_Carry = _Traits::_Reduce(this->_Ax);
		this->_Idx = _Rx;
		}

	static constexpr _Ty (min)()
		{	
		return (0);
		}

	static constexpr _Ty (max)()
		{	
		return (_Mx - 1);
		}
	};


	
template<class _Ty,
	size_t _Wx,
	size_t _Rx>
	struct _Swc_01_traits
	{	
	typedef _Ty _Cy_t;
	typedef _Ty _UCy_t;
	typedef _Ty _Mod_t;
	typedef unsigned int _Seed_t;

	static const _Cy_t _Cy;
	static const _Mod_t _Mod;
	static const _Ty _Max;
	static constexpr int _Nwords = (_Wx + 31) / 32;

	template<class _Gen>
		static _Cy_t _Reset(_Gen& _Gx, _Ty *_Ax, bool _Readcy)
		{	
			
			
		for (int _Ix = 0; _Ix < _Rx; ++_Ix)
			{	
			_Ty _Factor = 1;
			_Ty _Val = 0;
			for (int _Jx = 0; _Jx < _Nwords - 1; ++_Jx)
				{	
				_Factor /= (_Ty)_Two32;
				_Val += _Gx() * _Factor;
				}
			_Ty _Temp = ((unsigned long)_Gx() & _Mask) / _Scale1;
			_Val += (_Temp - (unsigned long)_Temp) * _Factor;
			_Ax[_Ix] = _Val;
			}
		if (!_Readcy)
			return (_Ax[_Rx - 1] != 0 ? 0 : _Cy);
		else
			return (_Gx() == 0 ? 0 : _Cy);
		}

	template<class _Elem,
		class _Traits>
		static void _Write(basic_ostream<_Elem, _Traits>& _Ostr,
			const _Circ_buf<_Ty, _Rx>& _Buf, _Cy_t _Cy)
		{	
		for (int _Ix = 0; _Ix < _Rx; ++_Ix)
			{	
			_Ty _Val = _Buf._At(_Ix);
			unsigned long _Temp;
			for (int _Jx = 0; _Jx < _Nwords - 1; ++_Jx)
				{	
				_Val *= (_Ty)_Two32;
				_Temp = (unsigned long)_Val;
				_Val -= _Temp;
				_Ostr << _Temp << ' ';
				}
			_Temp = (unsigned long)(_Val * _Scale1);
			_Ostr << _Temp << ' ';
			}
		_Ostr << (_Cy ? 1 : 0);
		}

private:
	static const _Ty _Scale1;
	static constexpr unsigned long _Mask = ~((~0UL) << (_Wx % 32));
	};

template<class _Ty,
	size_t _Wx,
	size_t _Rx>
	const typename _Swc_01_traits<_Ty, _Wx, _Rx>::_Cy_t
		_Swc_01_traits<_Ty, _Wx, _Rx>::_Cy =
			(typename _Swc_01_traits<_Ty, _Wx, _Rx>::_Cy_t)
				:: ldexp(1.0, int(-ptrdiff_t(_Wx)));

template<class _Ty,
	size_t _Wx,
	size_t _Rx>
	const typename _Swc_01_traits<_Ty, _Wx, _Rx>::_Mod_t
		_Swc_01_traits<_Ty, _Wx, _Rx>::_Mod = 1;

template<class _Ty,
	size_t _Wx,
	size_t _Rx>
	const _Ty _Swc_01_traits<_Ty, _Wx, _Rx>::_Max = 1;

template<class _Ty,
	size_t _Wx,
	size_t _Rx>
	const _Ty _Swc_01_traits<_Ty, _Wx, _Rx>::_Scale1 =
		(_Ty):: ldexp(1.0, _Wx % 32);

	
template<class _Ty,
	size_t _Wx,
	size_t _Sx,
	size_t _Rx>
	class subtract_with_carry_01
		: public _Swc_base<_Ty, _Sx, _Rx, _Swc_01_traits<_Ty, _Wx, _Rx> >
	{	
public:
	static constexpr size_t word_size = _Wx;
	typedef subtract_with_carry_01<_Ty, _Wx, _Sx, _Rx> _Myt;
	typedef _Swc_base<_Ty, _Sx, _Rx, _Swc_01_traits<_Ty, _Wx, _Rx> > _Mybase;

	subtract_with_carry_01()
		: _Mybase()
		{	
		}

	explicit subtract_with_carry_01(typename _Mybase::_Seed_t _Value)
		: _Mybase(_Value)
		{	
		}

	template<class _Gen,
		class = typename _Enable_if_seed_seq<_Gen, _Myt>::type>
		subtract_with_carry_01(_Gen& _Gx)
			: _Mybase(_Gx)
		{	
		}
	};

template<class _Ty,
	size_t _Wx,
	size_t _Sx,
	size_t _Rx>
	const size_t subtract_with_carry_01<_Ty, _Wx, _Sx, _Rx>
		::word_size;


	
template<class _Ty,
	int _Wx,
	int _Nx,
	int _Mx,
	int _Rx,
	_Ty _Px,
	int _Ux,
	int _Sx,
	_Ty _Bx,
	int _Tx,
	_Ty _Cx,
	int _Lx>
	class mersenne_twister
		: public _Circ_buf<_Ty, _Nx>
	{	
public:
	typedef mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
		_Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx> _Myt;
	typedef _Ty result_type;

	static constexpr int word_size = _Wx;
	static constexpr int state_size = _Nx;
	static constexpr int shift_size = _Mx;
	static constexpr int mask_bits = _Rx;
	static constexpr _Ty parameter_a = _Px;
	static constexpr int output_u = _Ux;
	static constexpr int output_s = _Sx;
	static constexpr _Ty output_b = _Bx;
	static constexpr int output_t = _Tx;
	static constexpr _Ty output_c = _Cx;
	static constexpr int output_l = _Lx;

	static constexpr _Ty default_seed = 5489U;

	explicit mersenne_twister(_Ty _X0 = default_seed,
		_Ty _Dxarg = _WMSK,
		_Ty _Fxarg = (_Ty)1812433253)
		: _Dxval(_Dxarg)
		{	
		seed(_X0, _Fxarg);
		}

	template<class _Gen,
		class = typename _Enable_if_seed_seq<_Gen, _Myt>::type>
		explicit mersenne_twister(_Gen& _Gx)
		: _Dxval(_WMSK)
		{	
		seed(_Gx);
		}

	void seed(_Ty _X0 = default_seed,
		_Ty _Fx = (_Ty)1812433253)
		{	
		_Ty _Prev = this->_Ax[0] = _X0 & _WMSK;
		for (int _Ix = 1; _Ix < _Nx; ++_Ix)
			_Prev = this->_Ax[_Ix] =
				(_Ix + _Fx * (_Prev ^ (_Prev >> (_Wx - 2)))) & _WMSK;
		this->_Idx = _Nx;
		}

	template<class _Gen,
		class = typename _Enable_if_seed_seq<_Gen, _Myt>::type>
		void seed(_Gen& _Gx, bool = false)
		{	
		for (int _Ix = 0; _Ix < _Nx; ++_Ix)
			this->_Ax[_Ix] = _Gx() & _WMSK;
		this->_Idx = _Nx;
		}

	template<class _Elem,
		class _S_Traits>
		basic_ostream<_Elem, _S_Traits>&
			_Write(basic_ostream<_Elem, _S_Traits>& _Ostr) const
		{	
		for (int _Ix = 0; _Ix < _Nx; ++_Ix)
			_Ostr << this->_At(_Ix) << ' ';
		return (_Ostr);
		}

	result_type (min)() const
		{	
		return (0);
		}

	result_type (max)() const
		{	
		return (_WMSK);
		}

	result_type operator()()
		{	
		if (this->_Idx == _Nx)
			_Refill_upper();
		else if (2 * _Nx <= this->_Idx)
			_Refill_lower();

		_Ty _Res = this->_Ax[this->_Idx++] & _WMSK;
		_Res ^= (_Res >> _Ux) & _Dxval;
		_Res ^= (_Res << _Sx) & _Bx;
		_Res ^= (_Res << _Tx) & _Cx;
		_Res ^= (_Res & _WMSK) >> _Lx;
		return (_Res);
		}

	void discard(unsigned long long _Nskip)
		{	
		for (; 0 < _Nskip; --_Nskip)
			(*this)();
		}

protected:

	 

	void _Refill_lower()
		{	
		int _Ix;
		for (_Ix = 0; _Ix < _Nx - _Mx; ++_Ix)
			{	
			_Ty _Tmp = (this->_Ax[_Ix + _Nx] & _HMSK)
				| (this->_Ax[_Ix + _Nx + 1] & _LMSK);
			this->_Ax[_Ix] = (_Tmp >> 1)
				^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix + _Nx + _Mx];
			}

		for (; _Ix < _Nx - 1; ++_Ix)
			{	
			_Ty _Tmp = (this->_Ax[_Ix +_Nx] & _HMSK)
				| (this->_Ax[_Ix + _Nx + 1] & _LMSK);
			this->_Ax[_Ix] = (_Tmp >> 1)
				^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix - _Nx + _Mx];
			}

		_Ty _Tmp = (this->_Ax[_Ix + _Nx] & _HMSK) | (this->_Ax[0] & _LMSK);
		this->_Ax[_Ix] = (_Tmp >> 1)
			^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Mx - 1];
		this->_Idx = 0;
		}

	void _Refill_upper()
		{	
		int _Ix;
		for (_Ix = _Nx; _Ix < 2 * _Nx; ++_Ix)
			{	
			_Ty _Tmp = (this->_Ax[_Ix - _Nx] & _HMSK)
				| (this->_Ax[_Ix - _Nx + 1] & _LMSK);
			this->_Ax[_Ix] = (_Tmp >> 1)
				^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix - _Nx + _Mx];
			}
		}

	_Ty _Dxval;

	static constexpr _Ty _WMSK = ~((~_Ty(0) << (_Wx - 1)) << 1);
	static constexpr _Ty _HMSK = (_WMSK << _Rx) & _WMSK;
	static constexpr _Ty _LMSK = ~_HMSK & _WMSK;
	};

template<class _Ty, int _Wx, int _Nx, int _Mx, int _Rx,
	_Ty _Px, int _Ux, int _Sx, _Ty _Bx, int _Tx, _Ty _Cx, int _Lx>
	bool operator==(
		const mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
			_Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>& _Left,
		const mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
			_Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>& _Right)
	{	
	return (_Left._Equals(_Right));
	}

template<class _Ty, int _Wx, int _Nx, int _Mx, int _Rx,
	_Ty _Px, int _Ux, int _Sx, _Ty _Bx, int _Tx, _Ty _Cx, int _Lx>
	bool operator!=(
		const mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
			_Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>& _Left,
		const mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
			_Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>& _Right)
	{	
	return (!_Left._Equals(_Right));
	}

template<class _Elem,
	class _S_Traits,
	class _Ty, int _Wx, int _Nx, int _Mx, int _Rx,
	_Ty _Px, int _Ux, int _Sx, _Ty _Bx, int _Tx, _Ty _Cx, int _Lx>
	basic_istream<_Elem, _S_Traits>& operator>>(
		basic_istream<_Elem, _S_Traits>& _Istr,
		mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
			_Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>& _Eng)
	{	
	_Wrap_istream<_Elem, _S_Traits, _Ty> _Gen(_Istr);
	_Eng.seed(_Gen);
	return (_Istr);
	}

template<class _Elem,
	class _S_Traits,
	class _Ty, int _Wx, int _Nx, int _Mx, int _Rx,
	_Ty _Px, int _Ux, int _Sx, _Ty _Bx, int _Tx, _Ty _Cx, int _Lx>
	basic_ostream<_Elem, _S_Traits>& operator<<(
		basic_ostream<_Elem, _S_Traits>& _Ostr,
		const mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
			_Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>& _Eng)
	{	
	return (_Eng._Write(_Ostr));
	}

	
template<class _Ty,
	size_t _Wx,
	size_t _Nx,
	size_t _Mx,
	size_t _Rx,
	_Ty _Px,
	size_t _Ux,
	_Ty _Dx,	
	size_t _Sx,
	_Ty _Bx,
	size_t _Tx,
	_Ty _Cx,
	size_t _Lx,
	_Ty _Fx>	
	class mersenne_twister_engine
		: public mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
			_Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>
	{	
public:
	static constexpr unsigned long long
		_Max = (((1ULL << (_Wx - 1)) - 1) << 1) + 1;

	static_assert(_Is_UIntType<_Ty>::value && 0 < _Mx && _Mx <= _Nx
		&& 2U < _Wx && _Rx <= _Wx && _Ux <= _Wx && _Sx <= _Wx && _Tx <= _Wx
		&& _Lx <= _Wx && _Wx <= numeric_limits<_Ty>::digits && _Px <= _Max
		&& _Bx <= _Max && _Cx <= _Max && _Dx <= _Max && _Fx <= _Max,
		"invalid template argument for mersenne_twister_engine");

	typedef mersenne_twister_engine<_Ty, _Wx, _Nx, _Mx, _Rx,
		_Px, _Ux, _Dx, _Sx, _Bx, _Tx, _Cx, _Lx, _Fx> _Myt;
	typedef mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
		_Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx> _Mybase;
	typedef _Ty result_type;

	static constexpr size_t word_size = _Wx;
	static constexpr size_t state_size = _Nx;
	static constexpr size_t shift_size = _Mx;
	static constexpr size_t mask_bits = _Rx;
	static constexpr _Ty xor_mask = _Px;
	static constexpr size_t tempering_u = _Ux;
	static constexpr _Ty tempering_d = _Dx;
	static constexpr size_t tempering_s = _Sx;
	static constexpr _Ty tempering_b = _Bx;
	static constexpr size_t tempering_t = _Tx;
	static constexpr _Ty tempering_c = _Cx;
	static constexpr size_t tempering_l = _Lx;
	static constexpr _Ty initialization_multiplier = _Fx;

	static constexpr result_type default_seed = 5489U;

	explicit mersenne_twister_engine(result_type _X0 = default_seed)
		: mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx, _Px, _Ux, _Sx, _Bx,
			_Tx, _Cx, _Lx>(_X0, _Dx, _Fx)	
		{	
		}

	template<class _Seed_seq,
		class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
		explicit mersenne_twister_engine(_Seed_seq& _Seq)
		: mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx, _Px, _Ux, _Sx, _Bx,
			_Tx, _Cx, _Lx>(default_seed, _Dx, _Fx)	
		{	
		seed(_Seq);
		}

	void seed(result_type _X0 = default_seed)
		{	
		_Mybase::seed(_X0, _Fx);
		}

	template<class _Seed_seq,
		class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
		void seed(_Seed_seq& _Seq)
		{	
		static constexpr int _Kx = (_Wx + 31) / 32;
		unsigned long _Arr[_Kx * _Nx];
		_Seq.generate(&_Arr[0], &_Arr[_Kx * _Nx]);

		int _Idx0 = 0;
		_Ty _Sum = 0;
		for (int _Ix = 0; _Ix < _Nx; ++_Ix, _Idx0 += _Kx)
			{	
			this->_Ax[_Ix] = _Arr[_Idx0];
			for (int _Jx = 0; ++_Jx < _Kx; )
				this->_Ax[_Ix] |= (_Ty)_Arr[_Idx0 + _Jx] << (32 * _Jx);
			this->_Ax[_Ix] &= this->_WMSK;

			if (_Ix == 0)
				_Sum = this->_Ax[_Ix] >> _Rx;
			else
				_Sum |= this->_Ax[_Ix];
			}
		if (_Sum == 0)
			this->_Ax[0] = this->_WMSK;

		this->_Idx = _Nx;
		}

	static constexpr result_type (min)()
		{	
		return (0);
		}

	static constexpr result_type (max)()
		{	
		return (_Mybase::_WMSK);
		}
	};

	
template<class _Engine,
	int _Px,
	int _Rx>
	class discard_block
	{	
public:
	typedef discard_block<_Engine, _Px, _Rx> _Myt;
	typedef _Engine base_type;
	typedef typename _Engine::result_type result_type;

	static constexpr int block_size = _Px;
	static constexpr int used_block = _Rx;

	discard_block()
		: _Eng(), _Nx(0)
		{	
		}

	explicit discard_block(const _Engine& _Ex)
		: _Eng(_Ex), _Nx(0)
		{	
		}

	explicit discard_block(result_type _Seed)
		: _Eng(_Seed), _Nx(0)
		{	
		}


	template<class _Seed_seq,
		class = typename _Enable_if_seed_seq<_Seed_seq, _Myt, _Engine>::type>
		explicit discard_block(_Seed_seq& _Seq)
		: _Eng(_Seq), _Nx(0)
		{	
		}


	void seed()
		{	
		_Eng.seed();
		_Nx = 0;
		}

	void seed(result_type _X0)
		{	
		_Eng.seed(_X0);
		_Nx = 0;
		}


	template<class _Seed_seq,
		class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
		void seed(_Seed_seq& _Seq)
		{	
		_Eng.seed(_Seq);
		_Nx = 0;
		}


	const base_type& base() const noexcept
		{	
		return (_Eng);
		}

	result_type (min)() const
		{	
		return ((_Eng.min)());
		}

	result_type (max)() const
		{	
		return ((_Eng.max)());
		}

	result_type operator()()
		{	
		if (_Rx <= _Nx)
			{	
			while (_Nx++ < _Px)
				_Eng();
			_Nx = 0;
			}
		++_Nx;
		return (_Eng());
		}

	void discard(unsigned long long _Nskip)
		{	
		for (; 0 < _Nskip; --_Nskip)
			(*this)();
		}

	bool _Equals(const _Myt& _Right) const
		{	
		return (_Eng == _Right._Eng && _Nx == _Right._Nx);
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		return (_Istr >> _Eng >> _Nx);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		return (_Ostr << _Eng << ' ' << _Nx);
		}

private:
	base_type _Eng;
	int _Nx;
	};

template<class _Engine,
	int _Px,
	int _Rx>
	const int discard_block<_Engine, _Px, _Rx>::block_size;

template<class _Engine,
	int _Px,
	int _Rx>
	const int discard_block<_Engine, _Px, _Rx>::used_block;

template<class _Engine,
	int _Px,
	int _Rx>
	bool operator==(
		const discard_block<_Engine, _Px, _Rx>& _Left,
		const discard_block<_Engine, _Px, _Rx>& _Right)
	{	
	return (_Left._Equals(_Right));
	}

template<class _Engine,
	int _Px,
	int _Rx>
	bool operator!=(
		const discard_block<_Engine, _Px, _Rx>& _Left,
		const discard_block<_Engine, _Px, _Rx>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Engine,
	int _Px,
	int _Rx>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		discard_block<_Engine, _Px, _Rx>& _Eng)
	{	
	return (_Eng._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Engine,
	int _Px,
	int _Rx>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const discard_block<_Engine, _Px, _Rx>& _Eng)
	{	
	return (_Eng._Write(_Ostr));
	}

	
template<class _Engine,
	size_t _Px,
	size_t _Rx>
	class discard_block_engine
		: public discard_block<_Engine, _Px, _Rx>
	{	
public:
	static_assert(0 < _Rx && _Rx <= _Px,
		"invalid template argument for discard_block_engine");

	typedef discard_block_engine<_Engine, _Px, _Rx> _Myt;
	typedef discard_block<_Engine, _Px, _Rx> _Mybase;
	typedef typename _Engine::result_type result_type;

	discard_block_engine()
		: _Mybase()
		{	
		}

	explicit discard_block_engine(const _Engine& _Ex)
		: _Mybase(_Ex)
		{	
		}

	explicit discard_block_engine(_Engine&& _Ex)
		: _Mybase(::std:: forward<_Engine>(_Ex))
		{	
		}

	explicit discard_block_engine(result_type _X0)
		: _Mybase(_X0)
		{	
		}

	template<class _Seed_seq,
		class = typename _Enable_if_seed_seq<_Seed_seq, _Myt, _Engine>::type>
		explicit discard_block_engine(_Seed_seq& _Seq)
		: _Mybase(_Seq)
		{	
		}

	static constexpr typename _Engine::result_type (min)()
		{	
		return ((_Engine::min)());
		}

	static constexpr typename _Engine::result_type (max)()
		{	
		return ((_Engine::max)());
		}
	};

	
template<class _Engine,
	size_t _Wx,
	class _UIntType>
	class independent_bits_engine
	{	
public:
	static_assert(_Is_UIntType<_UIntType>::value
		&& 0 < _Wx && _Wx <= numeric_limits<_UIntType>::digits,
		"invalid template argument for independent_bits_engine");

	typedef independent_bits_engine<_Engine, _Wx, _UIntType> _Myt;
	typedef _Engine base_type;
	typedef _UIntType result_type;
	typedef typename _Engine::result_type _Eres;

	independent_bits_engine()
		{	
		_Init();
		}

	explicit independent_bits_engine(const _Engine& _Ex)
		: _Eng(_Ex)
		{	
		_Init();
		}

	explicit independent_bits_engine(_Engine&& _Ex)
		: _Eng(::std:: forward<_Engine>(_Ex))
		{	
		_Init();
		}

	explicit independent_bits_engine(result_type _X0)
		: _Eng(_X0)
		{	
		_Init();
		}

	template<class _Seed_seq,
		class = typename _Enable_if_seed_seq<_Seed_seq, _Myt, _Engine>::type>
		explicit independent_bits_engine(_Seed_seq& _Seq)
		: _Eng(_Seq)
		{	
		_Init();
		}

	void seed()
		{	
		_Eng.seed();
		}

	void seed(result_type _X0)
		{	
		_Eng.seed(_X0);
		}

	template<class _Seed_seq,
		class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
		void seed(_Seed_seq& _Seq)
		{	
		_Eng.seed(_Seq);
		}

	const _Engine& base() const noexcept
		{	
		return (_Eng);
		}

	static constexpr result_type (min)()
		{	
		return (0);
		}

	static constexpr result_type (max)()
		{	
		return ((((result_type)1 << (_Wx - 1)) << 1) - 1);
		}

	result_type operator()()
		{	
		size_t _Idx = 0;
		result_type _Res = 0;
		result_type _Mask = (((result_type)1 << (_W0 - 1)) << 1) - 1;
		_Eres _Val;

		for (; _Idx < _N0; ++_Idx)
			{	
			for (; ; )
				{	
				_Val = _Eng() - (_Engine::min)();
				if (_Val <= _Y0)
					break;
				}
			_Res = _Res << _W0 | static_cast<result_type>(_Val) & _Mask;
			}

		_Mask = _Mask << 1 | 1;
		for (; _Idx < _Nx; ++_Idx)
			{	
			for (; ; )
				{	
				_Val = _Eng() - (_Engine::min)();
				if (_Val <= _Y1)
					break;
				}
			_Res = (_Res << (_W0 + 1)) | static_cast<result_type>(_Val) & _Mask;
			}
		return (_Res);
		}

	void discard(unsigned long long _Nskip)
		{	
		for (; 0 < _Nskip; --_Nskip)
			(*this)();
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		return (_Istr >> _Eng);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		return (_Ostr << _Eng);
		}

private:
	void _Init()
		{	
		size_t _Mx = 0;
		_Eres _Rx = (_Engine::max)() - (_Engine::min)() + 1;

		_Eres _Tmp = _Rx;
		if (_Tmp == 0)
			{	
			_Mx = 1;
			--_Tmp;
			}
		for (; 1 < _Tmp; _Tmp >>= 1)
			++_Mx;	

		for (size_t _Nfix = 0; ; ++_Nfix)
			{	
			_Nx = (_Wx + _Mx - 1) / _Mx + _Nfix;	
			_W0 = _Wx / _Nx;
			_N0 = _Nx - _Wx % _Nx;
			_Y0 = (_Rx >> _W0) << _W0;
			_Y1 = (((_Rx >> _W0) >> 1) << _W0) << 1;
			if (_Nfix == 1 || _Rx - _Y0 <= _Y0 / _Nx)
				break;	
			}
		--_Y0;
		--_Y1;
		}

	_Engine _Eng;	
	size_t _N0;		
	size_t _Nx;		
	size_t _W0;		
	_Eres _Y0;		
	_Eres _Y1;		
	};

template<class _Engine,
	size_t _Wx,
	class _UIntType>
	bool operator==(
		const independent_bits_engine<_Engine, _Wx, _UIntType>& _Left,
		const independent_bits_engine<_Engine, _Wx, _UIntType>& _Right)
	{	
	return (_Left.base() == _Right.base());
	}

template<class _Engine,
	size_t _Wx,
	class _UIntType>
	bool operator!=(
		const independent_bits_engine<_Engine, _Wx, _UIntType>& _Left,
		const independent_bits_engine<_Engine, _Wx, _UIntType>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Engine,
	size_t _Wx,
	class _UIntType>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		independent_bits_engine<_Engine, _Wx, _UIntType>& _Eng)
	{	
	return (_Eng._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Engine,
	size_t _Wx,
	class _UIntType>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const independent_bits_engine<_Engine, _Wx, _UIntType>& _Eng)
	{	
	return (_Eng._Write(_Ostr));
	}

	
template<class _Engine,
	size_t _Kx>
	class shuffle_order_engine
	{	
public:
	static_assert(0 < _Kx,
		"invalid template argument for shuffle_order_engine");

	typedef shuffle_order_engine<_Engine, _Kx> _Myt;
	typedef _Engine base_type;
	typedef typename _Engine::result_type result_type;

	static constexpr size_t table_size = _Kx;

	shuffle_order_engine()
		{	
		_Init();
		}

	explicit shuffle_order_engine(const _Engine& _Ex)
		: _Eng(_Ex)
		{	
		_Init();
		}

	explicit shuffle_order_engine(_Engine&& _Ex)
		: _Eng(::std:: forward<_Engine>(_Ex))
		{	
		_Init();
		}

	explicit shuffle_order_engine(result_type _X0)
		: _Eng(_X0)
		{	
		_Init();
		}

	template<class _Seed_seq,
		class = typename _Enable_if_seed_seq<_Seed_seq, _Myt, _Engine>::type>
		explicit shuffle_order_engine(_Seed_seq& _Seq)
		: _Eng(_Seq)
		{	
		_Init();
		}

	void seed()
		{	
		_Eng.seed();
		_Init();
		}

	void seed(result_type _X0)
		{	
		_Eng.seed(_X0);
		_Init();
		}

	template<class _Seed_seq,
		class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
		void seed(_Seed_seq& _Seq)
		{	
		_Eng.seed(_Seq);
		_Init();
		}

	const _Engine& base() const noexcept
		{	
		return (_Eng);
		}

	static constexpr result_type (min)()
		{	
		return ((_Engine::min)());
		}

	static constexpr result_type (max)()
		{	
		return ((_Engine::max)());
		}

	result_type operator()()
		{	
		size_t _Idx = (size_t)((double)(_Yx - (_Eng.min)()) * _Scale);

		_Yx = _Arr[_Idx];
		_Arr[_Idx] = _Eng();
		return (_Yx);
		}

	void discard(unsigned long long _Nskip)
		{	
		for (; 0 < _Nskip; --_Nskip)
			(*this)();
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Istr >> _Eng;
		for (size_t _Idx = 0; _Idx < _Kx; ++_Idx)
			_Istr >> _Arr[_Idx];
		return (_Istr >> _Yx);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Ostr << _Eng;
		for (size_t _Idx = 0; _Idx < _Kx; ++_Idx)
			_Ostr << ' ' << _Arr[_Idx];
		return (_Ostr << ' ' << _Yx);
		}

private:
	void _Init()
		{	
		for (size_t _Idx = 0; _Idx < _Kx; ++_Idx)
			_Arr[_Idx] = _Eng();
		_Yx = _Eng();
		_Scale = (double)_Kx
			/ ((double)(_Eng.max)() - (double)(_Eng.min)() + 1.0);
		}

	_Engine _Eng;	
	result_type _Arr[_Kx];
	result_type _Yx;
	double _Scale;
	};

template<class _Engine,
	size_t _Kx>
	bool operator==(
		const shuffle_order_engine<_Engine, _Kx>& _Left,
		const shuffle_order_engine<_Engine, _Kx>& _Right)
	{	
	return (_Left.base() == _Right.base());
	}

template<class _Engine,
	size_t _Kx>
	bool operator!=(
		const shuffle_order_engine<_Engine, _Kx>& _Left,
		const shuffle_order_engine<_Engine, _Kx>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Engine,
	size_t _Kx>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		shuffle_order_engine<_Engine, _Kx>& _Eng)
	{	
	return (_Eng._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Engine,
	size_t _Kx>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const shuffle_order_engine<_Engine, _Kx>& _Eng)
	{	
	return (_Eng._Write(_Ostr));
	}

	
template<class _Ty = int>
	class uniform_int
	{	
public:
	typedef uniform_int<_Ty> _Myt;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(result_type _Min0 = 0, result_type _Max0 = 9)
			{	
			_Init(_Min0, _Max0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Min == _Right._Min && _Max == _Right._Max);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		result_type a() const
			{	
			return (_Min);
			}

		result_type b() const
			{	
			return (_Max);
			}

		void _Init(_Ty _Min0, _Ty _Max0)
			{	
			((void)0);
			_Min = _Min0;
			_Max = _Max0;
			}

		result_type _Min;
		result_type _Max;
		};

	explicit uniform_int(_Ty _Min0 = 0,
		_Ty _Max0 = 9)
		: _Par(_Min0, _Max0)
		{	
		}

	explicit uniform_int(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	result_type a() const
		{	
		return (_Par.a());
		}

	result_type b() const
		{	
		return (_Par.b());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (_Par._Min);
		}

	result_type (max)() const
		{	
		return (_Par._Max);
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par._Min, _Par._Max));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0._Min, _Par0._Max));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, result_type _Nx) const
		{	
		return (_Eval(_Eng, 0, _Nx - 1));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _Min0;
		_Ty _Max0;
		_Istr >> _Min0 >> _Max0;
		_Par._Init(_Min0, _Max0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		return (_Ostr << _Par._Min << ' ' << _Par._Max);
		}

private:
	typedef typename make_unsigned<_Ty>::type _Uty;

	template<class _Engine>
		result_type _Eval(_Engine& _Eng, _Ty _Min, _Ty _Max) const
		{	
		_Rng_from_urng<_Uty, _Engine> _Rng(_Eng);

		const _Uty _Umin = _Adjust(_Uty(_Min));
		const _Uty _Umax = _Adjust(_Uty(_Max));

		_Uty _Uret = 0;

		if (_Umax - _Umin == _Uty(-1))
			_Uret = static_cast<_Uty>(_Rng._Get_all_bits());
		else
			_Uret = static_cast<_Uty>(_Rng(_Umax - _Umin + 1));

		return (_Ty(_Adjust(_Uret + _Umin)));
		}

	static _Uty _Adjust(_Uty _Uval)
		{	
		return (_Adjust(_Uval, is_signed<_Ty>()));
		}

	static _Uty _Adjust(_Uty _Uval, true_type)
		{	
		const _Uty _Adjuster = (_Uty(-1) >> 1) + 1;	

		if (_Uval < _Adjuster)
			return (_Uval + _Adjuster);
		else
			return (_Uval - _Adjuster);
		}

	static _Uty _Adjust(_Uty _Uval, false_type)
		{	
		return (_Uval);
		}

	param_type _Par;
	};

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		uniform_int<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const uniform_int<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = int>
	class uniform_int_distribution
		: public uniform_int<_Ty>
	{	
public:
	static_assert(_Is_IntType<_Ty>::value,
		"invalid template argument for uniform_int_distribution");

	typedef uniform_int_distribution<_Ty> _Myt;
	typedef uniform_int<_Ty> _Mybase;
	typedef typename _Mybase::param_type _Mypbase;
	typedef typename _Mybase::result_type result_type;

	struct param_type
		: public _Mypbase
		{	
		typedef _Myt distribution_type;

		explicit param_type(result_type _Min0 = 0,
			result_type _Max0 = (numeric_limits<_Ty>::max)())
			: _Mypbase(_Min0, _Max0)
			{	
			}

		param_type(const _Mypbase& _Right)
			: _Mypbase(_Right)
			{	
			}
		};

	explicit uniform_int_distribution(_Ty _Min0 = 0,
		_Ty _Max0 = (numeric_limits<_Ty>::max)())
		: _Mybase(_Min0, _Max0)
		{	
		}

	explicit uniform_int_distribution(const param_type& _Par0)
		: _Mybase(_Par0)
		{	
		}
	};

template<class _Ty>
	bool operator==(const uniform_int_distribution<_Ty>& _Left,
		const uniform_int_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const uniform_int_distribution<_Ty>& _Left,
		const uniform_int_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

	
class bernoulli_distribution
	{	
public:
	typedef bernoulli_distribution _Myt;
	typedef bool result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(double _P0 = 0.5)
			{	
			_Init(_P0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Px == _Right._Px);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		double p() const
			{	
			return (_Px);
			}

		void _Init(double _P0)
			{	
			((void)0);

			_Px = _P0;
			}

		double _Px;
		};

	explicit bernoulli_distribution(double _P0 = 0.5)
		: _Par(_P0)
		{	
		}

	explicit bernoulli_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	double p() const
		{	
		return (_Par.p());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (false);
		}

	result_type (max)() const
		{	
		return (true);
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		double _P0;
		_In(_Istr, _P0);
		_Par._Init(_P0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Out(_Ostr, _Par._Px);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		return ((::std:: generate_canonical<double, static_cast<size_t>(-1)>(_Eng)) < _Par0._Px);
		}

	param_type _Par;
	};

inline bool operator==(const bernoulli_distribution& _Left,
	const bernoulli_distribution& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

inline bool operator!=(const bernoulli_distribution& _Left,
	const bernoulli_distribution& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		bernoulli_distribution& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const bernoulli_distribution& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	

template<class _Ty = int>
	class geometric_distribution
	{	
public:
	typedef geometric_distribution<_Ty> _Myt;
	typedef double _Ty1;


	typedef _Ty result_type;
	static_assert(_Is_IntType<_Ty>::value,
		"invalid template argument for geometric_distribution");

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty1 _P0 = _Ty1(0.5))
			{	
			_Init(_P0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Px == _Right._Px);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty1 p() const
			{	
			return (_Px);
			}

		void _Init(_Ty1 _P0)
			{	
			((void)0);
			_Px = _P0;
			_Log_1_p = :: log(1 - _Px);
			}

		_Ty1 _Px;
		_Ty1 _Log_1_p;
		};

	explicit geometric_distribution(_Ty1 _P0 = _Ty1(0.5))
		: _Par(_P0)
		{	
		}

	explicit geometric_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Ty1 p() const
		{	
		return (_Par.p());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (0);
		}

	result_type (max)() const
		{	
		return ((numeric_limits<result_type>::max)());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty1 _P0;
		_In(_Istr, _P0);
		_Par._Init(_P0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Out(_Ostr, _Par._Px);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		return ((_Ty)(:: log((::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng)))
			/ _Par0._Log_1_p));
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const geometric_distribution<_Ty>& _Left,
		const geometric_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const geometric_distribution<_Ty>& _Left,
		const geometric_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		geometric_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const geometric_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}


	

template<class _Ty = int>
	class _Small_poisson_distribution
	{	
public:
	typedef double _Ty1;


	template<class _Engine>
		_Ty operator()(_Engine& _Eng) const
		{	
		_Ty _Res;
		_Ty1 _Val;
		for (_Res = 0, _Val = 1.0; ; ++_Res)
			{	
			_Val *= (::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng));
			if (_Val <= _G0)
				break;
			}
		return (_Res);
		}

	void _Init(const _Ty1& _Mean0)
		{	
		_G0 = :: exp(-_Mean0);
		}

private:
	_Ty1 _G0;
	};

template<class _Ty = int>
	class poisson_distribution
	{	
public:
	typedef poisson_distribution<_Ty> _Myt;
	typedef double _Ty1;


	typedef _Ty result_type;
	static_assert(_Is_IntType<_Ty>::value,
		"invalid template argument for poisson_distribution");

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty1 _Mean0 = _Ty1(1))
			{	
			_Init(_Mean0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Mean == _Right._Mean);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty1 mean() const
			{	
			return (_Mean);
			}

		void _Init(_Ty1 _Mean0)
			{	
			((void)0);
			_Mean = _Mean0;
			_Sqrt = :: sqrt(2.0 * _Mean0);
			_Logm = :: log(_Mean0);
			_G1 = _Mean0 * _Logm - _XLgamma(_Mean0 + 1.0);
			_Small._Init(_Mean0);
			}

		_Ty1 _Mean;
		_Ty1 _Sqrt;
		_Ty1 _Logm;
		_Ty1 _G1;

		_Small_poisson_distribution<_Ty> _Small;

		};

	explicit poisson_distribution(_Ty1 _Mean0 = _Ty1(1))
		: _Par(_Mean0)
		{	
		}

	explicit poisson_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Ty1 mean() const
		{	
		return (_Par.mean());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (0);
		}

	result_type (max)() const
		{	
		return ((numeric_limits<result_type>::max)());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty1 _Mean0;
		_In(_Istr, _Mean0);
		_Par._Init(_Mean0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Out(_Ostr, _Par._Mean);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		if (_Par0._Mean < 12.0)
			return (_Par0._Small(_Eng));
		for (; ; )
			{	
			_Ty _Res;
			_Ty1 _Yx;
			for (; ; )
				{	
				_Yx = (_Ty1):: tan(_Pi * (::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng)));
				_Res = (_Ty)(_Par0._Sqrt * _Yx + _Par0._Mean);
				if (static_cast<_Ty>(0) <= _Res)
					break;
				}
			if ((::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng)) <= 0.9 * (1.0 + _Yx * _Yx)
				* :: exp(_Res * _Par0._Logm
					- _XLgamma(_Res + 1.0) - _Par0._G1))
				return (_Res);
			}
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const poisson_distribution<_Ty>& _Left,
		const poisson_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const poisson_distribution<_Ty>& _Left,
		const poisson_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		poisson_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const poisson_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}


	

template<class _Ty = int>
	class binomial_distribution
	{	
public:
	typedef binomial_distribution<_Ty> _Myt;
	typedef double _Ty1;


	typedef _Ty result_type;
	static_assert(_Is_IntType<_Ty>::value,
		"invalid template argument for binomial_distribution");

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _T0 = 1, _Ty1 _P0 = _Ty1(0.5))
			{	
			_Init(_T0, _P0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Tx == _Right._Tx && _Px == _Right._Px);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty t() const
			{	
			return (_Tx);
			}

		_Ty1 p() const
			{	
			return (_Px);
			}

		void _Init(_Ty _T0, _Ty1 _P0)
			{	
			((void)0);
			((void)0);
			_Tx = _T0;
			_Px = _P0;
			_Pp = _Px < 0.5 ? _Px : (1.0 - _Px);
			_Mean = _Tx * _Pp;
			_G1 = _XLgamma(_Tx + 1.0);
			_Sqrt = :: sqrt(2 * _Mean * (1 - _Pp));
			_Logp = :: log(_Pp);
			_Logp1 = :: log(1.0 - _Pp);
			_Small._Init(_Mean);
			}

		_Ty _Tx;
		_Ty1 _Px;
		_Ty1 _Pp;
		_Ty1 _Mean;
		_Ty1 _G1;
		_Ty1 _Sqrt;
		_Ty1 _Logp;
		_Ty1 _Logp1;

		_Small_poisson_distribution<_Ty> _Small;

		};

	explicit binomial_distribution(_Ty _T0 = 1,
		_Ty1 _P0 = _Ty1(0.5))
		: _Par(_T0, _P0)
		{	
		}

	explicit binomial_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Ty t() const
		{	
		return (_Par.t());
		}

	_Ty1 p() const
		{	
		return (_Par.p());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (0);
		}

	result_type (max)() const
		{	
		return (_Par.t());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _T0;
		_Ty1 _P0;
		_In(_Istr, _P0);
		_In(_Istr, _T0);
		_Par._Init(_T0, _P0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Out(_Ostr, _Par._Px);
		_Out(_Ostr, _Par._Tx);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		_Ty _Res;
		if (_Par0._Tx < 25)
			{	
			_Res = 0;
			for (_Ty _Ix = 0; _Ix < _Par0._Tx; ++_Ix)
				if ((::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng)) < _Par0._Px)
					++_Res;
			return (_Res);
			}
		else if (_Par0._Mean < 1.0)
			
			_Res = _Par0._Small(_Eng);
		else
			{	
			for (; ; )
				{	
				_Ty1 _Yx;
				for (; ; )
					{	
					_Yx = (_Ty1):: tan(_Pi * (::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng)));
					_Res = (_Ty)(_Par0._Sqrt * _Yx + _Par0._Mean);
					if (static_cast<_Ty>(0) <= _Res && _Res <= _Par0._Tx)
						break;
					}
				if ((::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng)) <= 1.2 * _Par0._Sqrt
					* (1.0 + _Yx * _Yx)
					* :: exp(_Par0._G1 - _XLgamma(_Res + 1.0)
						- _XLgamma(_Par0._Tx - _Res
						+ 1.0) + _Res * _Par0._Logp
						+ (_Par0._Tx - _Res) * _Par0._Logp1))
					break;
				}
			}
		return (_Par0._Px == _Par0._Pp ? _Res : (_Par0._Tx - _Res));
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const binomial_distribution<_Ty>& _Left,
		const binomial_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const binomial_distribution<_Ty>& _Left,
		const binomial_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		binomial_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const binomial_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}


	
template<class _Ty = double>
	class uniform_real
	{	
public:
	typedef uniform_real<_Ty> _Myt;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _Min0 = _Ty(0),
			_Ty _Max0 = _Ty(1))
			{	
			_Init(_Min0, _Max0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Min == _Right._Min && _Max == _Right._Max);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		result_type a() const
			{	
			return (_Min);
			}

		result_type b() const
			{	
			return (_Max);
			}

		void _Init(_Ty _Min0, _Ty _Max0)
			{	
			((void)0);
			_Min = _Min0;
			_Max = _Max0;
			}

		result_type _Min;
		result_type _Max;
		};

	explicit uniform_real(_Ty _Min0 = _Ty(0),
		_Ty _Max0 = _Ty(1))
		: _Par(_Min0, _Max0)
		{	
		}

	explicit uniform_real(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	result_type a() const
		{	
		return (_Par.a());
		}

	result_type b() const
		{	
		return (_Par.b());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (_Par._Min);
		}

	result_type (max)() const
		{	
		return (_Par._Max);
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _Min0;
		_Ty _Max0;
		_In(_Istr, _Min0);
		_In(_Istr, _Max0);
		_Par._Init(_Min0, _Max0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Out(_Ostr, _Par._Min);
		_Out(_Ostr, _Par._Max);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		return ((::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)) * (_Par0._Max - _Par0._Min) + _Par0._Min);
		}

	param_type _Par;
	};

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		uniform_real<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const uniform_real<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = double>
	class uniform_real_distribution
		: public uniform_real<_Ty>
	{	
public:
	static_assert(_Is_RealType<_Ty>::value,
		"invalid template argument for uniform_real_distribution");

	typedef uniform_real_distribution<_Ty> _Myt;
	typedef uniform_real<_Ty> _Mybase;
	typedef typename _Mybase::param_type _Mypbase;
	typedef typename _Mybase::result_type result_type;

	struct param_type
		: public _Mypbase
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _Min0 = _Ty(0),
			_Ty _Max0 = _Ty(1))
			: _Mypbase(_Min0, _Max0)
			{	
			}

		param_type(const _Mypbase& _Right)
			: _Mypbase(_Right)
			{	
			}
		};

	explicit uniform_real_distribution(_Ty _Min0 = _Ty(0),
		_Ty _Max0 = _Ty(1))
		: _Mybase(_Min0, _Max0)
		{	
		}

	explicit uniform_real_distribution(const param_type& _Par0)
		: _Mybase(_Par0)
		{	
		}
	};

template<class _Ty>
	bool operator==(const uniform_real_distribution<_Ty>& _Left,
		const uniform_real_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const uniform_real_distribution<_Ty>& _Left,
		const uniform_real_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

	
template<class _Ty = double>
	class exponential_distribution
	{	
public:
	static_assert(_Is_RealType<_Ty>::value,
		"invalid template argument for exponential_distribution");

	typedef exponential_distribution<_Ty> _Myt;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _Lambda0 = _Ty(1))
			{	
			_Init(_Lambda0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Lambda == _Right._Lambda);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty lambda() const
			{	
			return (_Lambda);
			}

		void _Init(_Ty _Lambda0)
			{	
			((void)0);
			_Lambda = _Lambda0;
			}

		_Ty _Lambda;
		};

	explicit exponential_distribution(_Ty _Lambda0 = _Ty(1))
		: _Par(_Lambda0)
		{	
		}

	explicit exponential_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Ty lambda() const
		{	
		return (_Par.lambda());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (0);
		}

	result_type (max)() const
		{	
		return ((numeric_limits<result_type>::max)());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _Lambda0;
		_In(_Istr, _Lambda0);
		_Par._Init(_Lambda0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Out(_Ostr, _Par._Lambda);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (-:: log(_Ty(1) - (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng))) / _Par0._Lambda);
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const exponential_distribution<_Ty>& _Left,
		const exponential_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const exponential_distribution<_Ty>& _Left,
		const exponential_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		exponential_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const exponential_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = double>
	class normal_distribution
	{	
public:
	static_assert(_Is_RealType<_Ty>::value,
		"invalid template argument for normal_distribution");

	typedef normal_distribution<_Ty> _Myt;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _Mean0 = 0.0, _Ty _Sigma0 = 1.0)
			{	
			_Init(_Mean0, _Sigma0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Mean == _Right._Mean && _Sigma == _Right._Sigma);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty mean() const
			{	
			return (_Mean);
			}

		_Ty sigma() const
			{	
			return (_Sigma);
			}

		_Ty stddev() const
			{	
			return (_Sigma);
			}

		void _Init(_Ty _Mean0, _Ty _Sigma0)
			{	
			((void)0);
			_Mean = _Mean0;
			_Sigma = _Sigma0;
			}

		_Ty _Mean;
		_Ty _Sigma;
		};

	explicit normal_distribution(_Ty _Mean0 = 0.0, _Ty _Sigma0 = 1.0)
		: _Par(_Mean0, _Sigma0), _Valid(false), _X2(0)
		{	
		}

	explicit normal_distribution(const param_type& _Par0)
		: _Par(_Par0), _Valid(false), _X2(0)
		{	
		}

	_Ty mean() const
		{	
		return (_Par.mean());
		}

	_Ty sigma() const
		{	
		return (_Par.sigma());
		}

	_Ty stddev() const
		{	
		return (_Par.sigma());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		reset();
		}

	result_type (min)() const
		{	
		return (numeric_limits<result_type>::denorm_min());
		}

	result_type (max)() const
		{	
		return ((numeric_limits<result_type>::max)());
		}

	void reset()
		{	
		_Valid = false;
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng)
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0)
		{	
		reset();
		return (_Eval(_Eng, _Par0, false));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _Mean0;
		_Ty _Sigma0;
		_In(_Istr, _Mean0);
		_In(_Istr, _Sigma0);
		_Par._Init(_Mean0, _Sigma0);

		_Istr >> _Valid;
		_In(_Istr, _X2);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Out(_Ostr, _Par._Mean);
		_Out(_Ostr, _Par._Sigma);

		_Ostr << ' ' << _Valid;
		_Out(_Ostr, _X2);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0,
			bool _Keep = true)
		{	
			
		_Ty _Res;
		if (_Keep && _Valid)
			{	
			_Res = _X2;
			_Valid = false;
			}
		else
			{	
			double _V1, _V2, _Sx;
			for (; ; )
				{	
				_V1 = 2 * (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)) - 1.0;
				_V2 = 2 * (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)) - 1.0;
				_Sx = _V1 * _V1 + _V2 * _V2;
				if (_Sx < 1.0)
					break;
				}
			double _Fx = :: sqrt(-2.0 * :: log(_Sx) / _Sx);
			if (_Keep)
				{	
				_X2 = _Fx * _V2;
				_Valid = true;
				}
			_Res = _Fx * _V1;
			}
		return (_Res * _Par0._Sigma + _Par0._Mean);
		}

	param_type _Par;
	bool _Valid;
	_Ty _X2;
	};

template<class _Ty>
	bool operator==(const normal_distribution<_Ty>& _Left,
		const normal_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const normal_distribution<_Ty>& _Left,
		const normal_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		normal_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const normal_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = double>
	class gamma_distribution
	{	
public:
	static_assert(_Is_RealType<_Ty>::value,
		"invalid template argument for gamma_distribution");

	typedef gamma_distribution<_Ty> _Myt;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _Alpha0 = _Ty(1), _Ty _Beta0 = _Ty(1))
			{	
			_Init(_Alpha0, _Beta0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Px == _Right._Px);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty alpha() const
			{	
			return (_Alpha);
			}

		_Ty beta() const
			{	
			return (_Beta);
			}

		void _Init(_Ty _Alpha0, _Ty _Beta0)
			{	
			((void)0);
			((void)0);
			_Alpha = _Alpha0;
			_Beta = _Beta0;
			_Px = (_Ty)(_Exp1 / (_Alpha + _Exp1));
			_Sqrt = :: sqrt(2 * _Alpha - 1);
			}

		_Ty _Alpha;
		_Ty _Beta;
		_Ty _Px;
		_Ty _Sqrt;
		exponential_distribution<_Ty> _Exp;
		};

	explicit gamma_distribution(_Ty _Alpha0 = _Ty(1), _Ty _Beta0 = _Ty(1))
		: _Par(_Alpha0, _Beta0)
		{	
		}

	explicit gamma_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Ty alpha() const
		{	
		return (_Par.alpha());
		}

	_Ty beta() const
		{	
		return (_Par.beta());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (numeric_limits<result_type>::denorm_min());
		}

	result_type (max)() const
		{	
		return ((numeric_limits<result_type>::max)());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _Alpha0;
		_Ty _Beta0;
		_In(_Istr, _Alpha0);
		_In(_Istr, _Beta0);
		_Par._Init(_Alpha0, _Beta0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Out(_Ostr, _Par._Alpha);
		_Out(_Ostr, _Par._Beta);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, param_type _Par0) const
		{	
		_Ty _Ux, _Vx;
		_Ty _Xx, _Yx, _Qx;
		int _Count;
		if (_Par0._Alpha < 1)
			{	
				
			for (; ; )
				{	
				_Ux = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng));
				while ((_Vx = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng))) == 0)
					;
				if (_Ux < _Par0._Px)
					{	
					_Xx = :: pow(_Vx, _Ty(1) / _Par0._Alpha);
					_Qx = :: exp(-_Xx);
					}
				else
					{	
					_Xx = 1 - :: log(_Vx);
					_Qx = :: pow(_Xx, _Par0._Alpha - 1);
					}
				if ((::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)) < _Qx)
					return (_Par0._Beta * _Xx);
				}
			}
		else if (_Par0._Alpha == 1)
			return (_Par0._Beta * _Par0._Exp(_Eng));
		else if ((_Count = (int)_Par0._Alpha) == _Par0._Alpha
			&& _Count < 20)
			{	
			_Yx = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng));
			while (--_Count)
				{	
				while ((_Ux = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng))) == 0)
					;
				_Yx *= _Ux;
				}
			return (_Par0._Beta * -:: log(_Yx));
			}
		else
			{	
			for (; ; )
				{	
				_Yx = (_Ty):: tan(_Pi * (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)));
				_Xx = _Par0._Sqrt * _Yx + _Par0._Alpha - 1;
				if (0 < _Xx &&
					(::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)) <= (1 + _Yx * _Yx)
						* :: exp((_Par0._Alpha - 1)
						* :: log(_Xx / (_Par0._Alpha - 1))
							- _Par0._Sqrt * _Yx))
					return (_Par0._Beta * _Xx);
				}
			}
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const gamma_distribution<_Ty>& _Left,
		const gamma_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const gamma_distribution<_Ty>& _Left,
		const gamma_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		gamma_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const gamma_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = double>
	class weibull_distribution
	{	
public:
	static_assert(_Is_RealType<_Ty>::value,
		"invalid template argument for weibull_distribution");

	typedef weibull_distribution<_Ty> _Myt;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _A0 = _Ty(1),
			_Ty _B0 = _Ty(1))
			{	
			_Init(_A0, _B0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Ax == _Right._Ax && _Bx == _Right._Bx);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty a() const
			{	
			return (_Ax);
			}

		_Ty b() const
			{	
			return (_Bx);
			}

		void _Init(_Ty _A0, _Ty _B0)
			{	
			((void)0);
			((void)0);
			_Ax = _A0;
			_Bx = _B0;
			}

		_Ty _Ax;
		_Ty _Bx;
		};

	explicit weibull_distribution(_Ty _A0 = _Ty(1),
		_Ty _B0 = _Ty(1))
		: _Par(_A0, _B0)
		{	
		}

	explicit weibull_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Ty a() const
		{	
		return (_Par.a());
		}

	_Ty b() const
		{	
		return (_Par.b());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (0);
		}

	result_type (max)() const
		{	
		return ((numeric_limits<result_type>::max)());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _A0;
		_Ty _B0;
		_In(_Istr, _A0);
		_In(_Istr, _B0);
		_Par._Init(_A0, _B0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Out(_Ostr, _Par._Ax);
		_Out(_Ostr, _Par._Bx);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		_Ty _Px = (_Ty(1) - (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)));
		return (_Par0._Bx * :: pow(-:: log(_Px), _Ty(1) / _Par0._Ax));
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const weibull_distribution<_Ty>& _Left,
		const weibull_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const weibull_distribution<_Ty>& _Left,
		const weibull_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		weibull_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const weibull_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = double>
	class extreme_value_distribution
	{	
public:
	static_assert(_Is_RealType<_Ty>::value,
		"invalid template argument for extreme_value_distribution");

	typedef extreme_value_distribution<_Ty> _Myt;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _A0 = _Ty(0),
			_Ty _B0 = _Ty(1))
			{	
			_Init(_A0, _B0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Ax == _Right._Ax && _Bx == _Right._Bx);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty a() const
			{	
			return (_Ax);
			}

		_Ty b() const
			{	
			return (_Bx);
			}

		void _Init(_Ty _A0, _Ty _B0)
			{	
			((void)0);
			_Ax = _A0;
			_Bx = _B0;
			}

		_Ty _Ax;
		_Ty _Bx;
		};

	explicit extreme_value_distribution(_Ty _A0 = _Ty(0),
		_Ty _B0 = _Ty(1))
		: _Par(_A0, _B0)
		{	
		}

	explicit extreme_value_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Ty a() const
		{	
		return (_Par.a());
		}

	_Ty b() const
		{	
		return (_Par.b());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return ((numeric_limits<result_type>::min)());
		}

	result_type (max)() const
		{	
		return ((numeric_limits<result_type>::max)());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _A0;
		_Ty _B0;
		_In(_Istr, _A0);
		_In(_Istr, _B0);
		_Par._Init(_A0, _B0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Out(_Ostr, _Par._Ax);
		_Out(_Ostr, _Par._Bx);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		_Ty _Px = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng));
		return (_Par0._Ax - _Par0._Bx * :: log(-:: log(_Px)));
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const extreme_value_distribution<_Ty>& _Left,
		const extreme_value_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const extreme_value_distribution<_Ty>& _Left,
		const extreme_value_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		extreme_value_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const extreme_value_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = double>
	class lognormal_distribution
	{	
public:
	static_assert(_Is_RealType<_Ty>::value,
		"invalid template argument for lognormal_distribution");

	typedef lognormal_distribution<_Ty> _Myt;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _M0 = _Ty(0),
			_Ty _S0 = _Ty(1))
			{	
			_Init(_M0, _S0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Mx == _Right._Mx && _Sx == _Right._Sx);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty m() const
			{	
			return (_Mx);
			}

		_Ty s() const
			{	
			return (_Sx);
			}

		void _Init(_Ty _M0, _Ty _S0)
			{	
			((void)0);
			_Mx = _M0;
			_Sx = _S0;
			}

		_Ty _Mx;
		_Ty _Sx;
		};

	explicit lognormal_distribution(_Ty _M0 = _Ty(0),
		_Ty _S0 = _Ty(1))
		: _Par(_M0, _S0)
		{	
		}

	explicit lognormal_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Ty m() const
		{	
		return (_Par.m());
		}

	_Ty s() const
		{	
		return (_Par.s());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (-(numeric_limits<result_type>::max)());
		}

	result_type (max)() const
		{	
		return ((numeric_limits<result_type>::max)());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _M0;
		_Ty _S0;
		_In(_Istr, _M0);
		_In(_Istr, _S0);
		_Par._Init(_M0, _S0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Out(_Ostr, _Par._Mx);
		_Out(_Ostr, _Par._Sx);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, param_type _Par0) const
		{	
		normal_distribution<_Ty> _Dist(_Par0._Mx, _Par0._Sx);
		return (:: exp(_Dist(_Eng)));
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const lognormal_distribution<_Ty>& _Left,
		const lognormal_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const lognormal_distribution<_Ty>& _Left,
		const lognormal_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		lognormal_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const lognormal_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = double>
	class chi_squared_distribution
	{	
public:
	static_assert(_Is_RealType<_Ty>::value,
		"invalid template argument for chi_squared_distribution");

	typedef chi_squared_distribution<_Ty> _Myt;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _N0 = _Ty(1))
			{	
			_Init(_N0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Nx == _Right._Nx);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty n() const
			{	
			return (_Nx);
			}

		void _Init(_Ty _N0)
			{	
			((void)0);
			_Nx = _N0;
			}

		_Ty _Nx;
		};

	explicit chi_squared_distribution(_Ty _N0 = _Ty(1))
		: _Par(_N0)
		{	
		}

	explicit chi_squared_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Ty n() const
		{	
		return (_Par.n());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (numeric_limits<result_type>::denorm_min());
		}

	result_type (max)() const
		{	
		return ((numeric_limits<result_type>::max)());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _N0;
		_Istr >> _N0;
		_Par._Init(_N0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		return (_Ostr << ' ' << _Par._Nx);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		gamma_distribution<_Ty> _Dist((_Ty)_Par0._Nx * _Ty(0.5), _Ty(2));
		return (_Dist(_Eng));
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const chi_squared_distribution<_Ty>& _Left,
		const chi_squared_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const chi_squared_distribution<_Ty>& _Left,
		const chi_squared_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		chi_squared_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const chi_squared_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = double>
	class cauchy_distribution
	{	
public:
	static_assert(_Is_RealType<_Ty>::value,
		"invalid template argument for cauchy_distribution");

	typedef cauchy_distribution<_Ty> _Myt;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _A0 = _Ty(0),
			_Ty _B0 = _Ty(1))
			{	
			_Init(_A0, _B0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Ax == _Right._Ax && _Bx == _Right._Bx);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty a() const
			{	
			return (_Ax);
			}

		_Ty b() const
			{	
			return (_Bx);
			}

		void _Init(_Ty _A0, _Ty _B0)
			{	
			((void)0);
			_Ax = _A0;
			_Bx = _B0;
			}

		_Ty _Ax;
		_Ty _Bx;
		};

	explicit cauchy_distribution(_Ty _A0 = _Ty(0),
		_Ty _B0 = _Ty(1))
		: _Par(_A0, _B0)
		{	
		}

	explicit cauchy_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Ty a() const
		{	
		return (_Par.a());
		}

	_Ty b() const
		{	
		return (_Par.b());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (-(numeric_limits<result_type>::max)());
		}

	result_type (max)() const
		{	
		return ((numeric_limits<result_type>::max)());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _A0;
		_Ty _B0;
		_In(_Istr, _A0);
		_In(_Istr, _B0);
		_Par._Init(_A0, _B0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Out(_Ostr, _Par._Ax);
		_Out(_Ostr, _Par._Bx);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		_Ty Px = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng));
		return ((_Ty)(_Par0._Ax
			+ _Par0._Bx * :: tan(_Pi * (Px - _Ty(0.5)))));
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const cauchy_distribution<_Ty>& _Left,
		const cauchy_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const cauchy_distribution<_Ty>& _Left,
		const cauchy_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		cauchy_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const cauchy_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = double>
	class _Beta_distribution
	{	
public:
	typedef _Ty result_type;

	explicit _Beta_distribution(const _Ty& _A0 = _Ty(1),
		const _Ty& _B0 = _Ty(1))
		{	
		_Init(_A0, _B0);
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		if (_Ax < _Ty(1) && _Bx < _Ty(1))
			{	
			_Ty _Wx, _P1, _P2;
			for (; ; )
				{	
				_P1 = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng));
				_P2 = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng));
				_P1 = :: pow(_P1, _Ty(1) / _Ax);
				_P2 = :: pow(_P2, _Ty(1) / _Bx);
				_Wx = _P1 + _P2;
				if (_Wx <= _Ty(1))
					break;
				}
			return (_P1 / _Wx);
			}
		else
			{	
			_Ty _P1, _P2;
			gamma_distribution<_Ty> _Dist1(_Ax, 1);
			gamma_distribution<_Ty> _Dist2(_Bx, 1);
			_P1 = _Dist1(_Eng);
			_P2 = _Dist2(_Eng);
			return (_P1 / (_P1 + _P2));
			}
		}

private:
	void _Init(_Ty _A0, _Ty _B0)
		{	
		((void)0);
		((void)0);
		_Ax = _A0;
		_Bx = _B0;
		}

	_Ty _Ax;
	_Ty _Bx;
	};

	
template<class _Ty = double>
	class fisher_f_distribution
	{	
public:
	static_assert(_Is_RealType<_Ty>::value,
		"invalid template argument for fisher_f_distribution");

	typedef fisher_f_distribution<_Ty> _Myt;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _M0 = _Ty(1), _Ty _N0 = _Ty(1))
			{	
			_Init(_M0, _N0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Mx == _Right._Mx && _Nx == _Right._Nx);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty m() const
			{	
			return (_Mx);
			}

		_Ty n() const
			{	
			return (_Nx);
			}

		void _Init(_Ty _M0, _Ty _N0)
			{	
			((void)0);
			((void)0);
			_Mx = _M0;
			_Nx = _N0;
			}

		_Ty _Mx;
		_Ty _Nx;
		};

	explicit fisher_f_distribution(_Ty _M0 = _Ty(1),
		_Ty _N0 = _Ty(1))
		: _Par(_M0, _N0)
		{	
		}

	explicit fisher_f_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Ty m() const
		{	
		return (_Par.m());
		}

	_Ty n() const
		{	
		return (_Par.n());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (result_type(0));
		}

	result_type (max)() const
		{	
		return ((numeric_limits<result_type>::max)());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _M0;
		_Ty _N0;
		_Istr >> _M0 >> _N0;
		_Par._Init(_M0, _N0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Ostr << ' ' << _Par._Mx << ' ' << _Par._Nx;
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		_Ty _Px, _V1, _V2;
		_V1 = (_Ty)_Par0._Mx * _Ty(0.5);
		_V2 = (_Ty)_Par0._Nx * _Ty(0.5);
		_Beta_distribution<_Ty> _Dist(_V1, _V2);
		_Px = _Dist(_Eng);

		return ((_V2 / _V1) * (_Px / (_Ty(1) - _Px)));
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const fisher_f_distribution<_Ty>& _Left,
		const fisher_f_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const fisher_f_distribution<_Ty>& _Left,
		const fisher_f_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		fisher_f_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const fisher_f_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = double>
	class student_t_distribution
	{	
public:
	static_assert(_Is_RealType<_Ty>::value,
		"invalid template argument for student_t_distribution");

	typedef student_t_distribution<_Ty> _Myt;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _N0 = _Ty(1))
			{	
			_Init(_N0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Nx == _Right._Nx);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty n() const
			{	
			return (_Nx);
			}

		void _Init(_Ty _N0)
			{	
			((void)0);
			_Nx = _N0;
			}

		_Ty _Nx;
		};

	explicit student_t_distribution(_Ty _N0 = _Ty(1))
		: _Par(_N0)
		{	
		}

	explicit student_t_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Ty n() const
		{	
		return (_Par.n());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (-(numeric_limits<result_type>::max)());
		}

	result_type (max)() const
		{	
		return ((numeric_limits<result_type>::max)());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _N0;
		_Istr >> _N0;
		_Par._Init(_N0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		return (_Ostr << ' ' << _Par._Nx);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		_Ty _V1, _V2, _R, _Rs;
		uniform_real<_Ty> _Dist(-1, 1);
		for (; ; )
			{	
			_V1 = _Dist(_Eng);
			_V2 = _Dist(_Eng);
			_Rs = _V1 * _V1 + _V2 * _V2;

			if (_Rs < _Ty(1))
				break;
			}
		_R = :: sqrt(_Rs);

		return (_V1 * :: sqrt(_Par0._Nx
			* (:: pow(_R, -_Ty(4) / _Par0._Nx) - _Ty(1)) / _Rs));
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const student_t_distribution<_Ty>& _Left,
		const student_t_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const student_t_distribution<_Ty>& _Left,
		const student_t_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		student_t_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const student_t_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = int>
	class negative_binomial_distribution
	{	
public:
	static_assert(_Is_IntType<_Ty>::value,
		"invalid template argument for negative_binomial_distribution");

	typedef negative_binomial_distribution<_Ty> _Myt;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;

		explicit param_type(_Ty _K0 = 1,
			double _P0 = 0.5)
			{	
			_Init(_K0, _P0);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Kx == _Right._Kx && _Px == _Right._Px);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Ty k() const
			{	
			return (_Kx);
			}

		double p() const
			{	
			return (_Px);
			}

		void _Init(_Ty _K0, double _P0)
			{	
			((void)0);
			((void)0);
			_Kx = _K0;
			_Px = _P0;
			}

		_Ty _Kx;
		double _Px;
		};

	explicit negative_binomial_distribution(_Ty _K0 = 1,
		double _P0 = 0.5)
		: _Par(_K0, _P0)
		{	
		}

	explicit negative_binomial_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Ty k() const
		{	
		return (_Par.k());
		}

	double p() const
		{	
		return (_Par.p());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (0);
		}

	result_type (max)() const
		{	
		return ((numeric_limits<result_type>::max)());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Ty _K0;
		double _P0;
		_In(_Istr, _P0);
		_In(_Istr, _K0);
		_Par._Init(_K0, _P0);
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Out(_Ostr, _Par._Px);
		_Out(_Ostr, _Par._Kx);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		double _V1;
		gamma_distribution<double>
			dist1(_Par0._Kx, (1 - _Par0._Px) / (_Par0._Px));
		_V1 = dist1(_Eng);
		poisson_distribution<_Ty> dist2(_V1);

		return (dist2(_Eng));
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const negative_binomial_distribution<_Ty>& _Left,
		const negative_binomial_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const negative_binomial_distribution<_Ty>& _Left,
		const negative_binomial_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		negative_binomial_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const negative_binomial_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = int>
	class discrete_distribution
	{	
public:
	static_assert(_Is_IntType<_Ty>::value,
		"invalid template argument for discrete_distribution");

	typedef discrete_distribution<_Ty> _Myt;
	typedef vector<double> _Myvec;
	typedef _Ty result_type;

	struct param_type
		{	
		typedef _Myt distribution_type;
		struct _Noinit
			{	
			};

		param_type(_Noinit)
			{	
			}

		param_type()
			{	
			_Init();
			}

		template<class _InIt>
			param_type(_InIt _First, _InIt _Last)
			: _Pvec(_First, _Last)
			{	
			_Init();
			}

		param_type(::std:: initializer_list<double> _Ilist)
			: _Pvec(_Ilist)
			{	
			_Init();
			}

		template<class _Fn>
			param_type(size_t _Count, double _Low, double _High,
				_Fn _Func)
			{	
			double _Range = _High - _Low;
			((void)0);
			if (_Count <= 0)
				_Count = 1;

			_Range /= (double)_Count;
			_Low += 0.5 * _Range;	
			for (size_t _Idx = 0; _Idx < _Count; ++_Idx)
				_Pvec.push_back(_Func(_Low + _Idx * _Range));
			_Init();
			}

		bool operator==(const param_type& _Right) const
			{	
			return (_Pvec == _Right._Pvec);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		_Myvec probabilities() const
			{	
			return (_Pvec);
			}

		void _Init(bool _Renorm = true)
			{	
			size_t _Size = _Pvec.size();
			size_t _Idx;

			if (!_Renorm)
				;
			else if (_Pvec.empty())
				_Pvec.push_back(1.0);	
			else
				{	
				double _Sum = 0;

				for (_Idx = 0; _Idx < _Size; ++_Idx)
					{	
					((void)0);
					_Sum += _Pvec[_Idx];
					}

				((void)0);
				if (_Sum != 1.0)
					for (_Idx = 0; _Idx < _Size; ++_Idx)
						_Pvec[_Idx] /= _Sum;
				}

			_Pcdf.assign(1, _Pvec[0]);
			for (_Idx = 1; _Idx < _Size; ++_Idx)
				_Pcdf.push_back(_Pvec[_Idx] + _Pcdf[_Idx - 1]);
			}

		_Myvec _Pvec;
		_Myvec _Pcdf;
		};

	discrete_distribution()
		{	
		}

	template<class _InIt>
		discrete_distribution(_InIt _First, _InIt _Last)
		: _Par(_First, _Last)
		{	
		}

	discrete_distribution(::std:: initializer_list<double> _Ilist)
		: _Par(_Ilist)
		{	
		}

	template<class _Fn>
		discrete_distribution(size_t _Count, double _Low, double _High,
			_Fn _Func)
		: _Par(_Count, _Low, _High, _Func)
		{	
		}

	explicit discrete_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	_Myvec probabilities() const
		{	
		return (_Par.probabilities());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (0);
		}

	result_type (max)() const
		{	
		return ((result_type)(_Par._Pvec.size() - 1));
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr,
			param_type& _Par0)
		{	
		size_t _Nvals;
		_Istr >> _Nvals;
		_Par0._Pvec.clear();
		for (; 0 < _Nvals; --_Nvals)
			{	
			double _Val;
			_In(_Istr, _Val);
			_Par0._Pvec.push_back(_Val);
			}
		_Par0._Init(false);	
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr,
			const param_type& _Par0) const
		{	
		size_t _Nvals = _Par0._Pvec.size();
		_Ostr << ' ' << _Nvals;

		for (size_t _Idx = 0; _Idx < _Par0._Pvec.size(); ++_Idx)
			_Out(_Ostr, _Par0._Pvec[_Idx]);
		return (_Ostr);
		}

private:
	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		double _Px = (::std:: generate_canonical<double, static_cast<size_t>(-1)>(_Eng));
		result_type _Count = (result_type)_Par0._Pcdf.size();
		result_type _First = 0;

		while (0 < _Count)
			{	
			result_type _Count2 = _Count / 2;
			result_type _Mid = _First + _Count2;

			if (_Px <= _Par0._Pcdf[_Mid])
				_Count = _Count2;	
			else
				{	
				_First = ++_Mid;
				_Count -= _Count2 + 1;
				}
			}
		return (_First);
		}

public:
	param_type _Par;
	};

template<class _Ty>
	bool operator==(const discrete_distribution<_Ty>& _Left,
		const discrete_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const discrete_distribution<_Ty>& _Left,
		const discrete_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		discrete_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr, _Dist._Par));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const discrete_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr, _Dist._Par));
	}

	
template<class _Ty = double>
	class piecewise_constant_distribution
		: public discrete_distribution<size_t>
	{	
public:
	static_assert(_Is_RealType<_Ty>::value,
		"invalid template argument for piecewise_constant_distribution");

	typedef piecewise_constant_distribution<_Ty> _Myt;
	typedef discrete_distribution<size_t> _Mybase;
	typedef typename _Mybase::param_type _Mypbase;
	typedef typename _Mypbase::_Noinit _Noinit;
	typedef _Ty result_type;

	struct param_type
		: public _Mypbase
		{	
		typedef _Myt distribution_type;

		param_type()
			{	
			_Bvec.push_back(_Ty(0));
			_Bvec.push_back(_Ty(1));
			}

		template<class _InIt1,
			class _InIt2>
			param_type(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
				: _Mypbase(_Noinit())
			{	
			for (; _First1 != _Last1; ++_First1)
				_Bvec.push_back(*_First1);

			if (2 <= _Bvec.size())
				for (size_t _Idx = 0; _Idx < _Bvec.size() - 1; ++_Idx)
					this->_Pvec.push_back(*_First2++);
			_Init();
			}

		template<class _Fn>
			param_type(::std:: initializer_list<_Ty> _Ilist,
				_Fn _Func)
				: _Mypbase(_Noinit())
			{	
			if (2 <= _Ilist.size())
				_Bvec.assign(_Ilist);
			else
				{	
				_Bvec.push_back(_Ty(0));
				_Bvec.push_back(_Ty(1));
				}

			_Ty _Low = _Bvec.front();
			_Ty _Range = _Bvec.back() - _Low;
			size_t _Count = _Bvec.size() - 1;

			_Range /= (_Ty)_Count;
			for (size_t _Idx = 0; _Idx < _Count; ++_Idx)
				_Pvec.push_back(_Func(_Low + _Idx * _Range));
			_Init();
			}

		template<class _Fn>
			param_type(size_t _Count, _Ty _Low, _Ty _High, _Fn _Func)
				: _Mypbase(_Count, _Low, _High, _Func)
			{	
			_Ty _Range = _High - _Low;
			if (_Count <= 0)
				_Count = 1;

			_Range /= (_Ty)_Count;
			for (size_t _Idx = 0; _Idx <= _Count; ++_Idx)
				_Bvec.push_back(_Low + _Idx * _Range);
			}

		bool operator==(const param_type& _Right) const
			{	
			return (*(_Mypbase *)this == *(_Mypbase *)&_Right
				&& _Bvec == _Right._Bvec);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		vector<_Ty> intervals() const
			{	
			return (_Bvec);
			}

		vector<_Ty> densities() const
			{	
			vector<_Ty> _Ans(this->_Pvec.begin(),
				this->_Pvec.end());

			for (size_t _Idx = 0; _Idx < _Ans.size(); ++_Idx)
				_Ans[_Idx] /= _Bvec[_Idx + 1] - _Bvec[_Idx];
			return (_Ans);
			}

		void _Init()
			{	
			((_Mypbase *)this)->_Init();
			}

		vector<_Ty> _Bvec;
		};

	piecewise_constant_distribution()
		{	
		}

	template<class _InIt1,
		class _InIt2>
		piecewise_constant_distribution(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2)
			: _Par(_First1, _Last1, _First2)
		{	
		}

	template<class _Fn>
		piecewise_constant_distribution(::std:: initializer_list<_Ty> _Ilist,
			_Fn _Func)
			: _Par(_Ilist, _Func)
		{	
		}

	template<class _Fn>
		piecewise_constant_distribution(size_t _Count,
			_Ty _Low, _Ty _High, _Fn _Func)
			: _Par(_Count, _Low, _High, _Func)
		{	
		}

	explicit piecewise_constant_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	vector<_Ty> intervals() const
		{	
		return (_Par.intervals());
		}

	vector<_Ty> densities() const
		{	
		return (_Par.densities());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (_Par._Bvec.front());
		}

	result_type (max)() const
		{	
		return (_Par._Bvec.back());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr)
		{	
		_Mybase::_Read(_Istr, _Par);

		_Par._Bvec.clear();
		for (size_t _Idx = _Par._Pvec.size() + 1; 0 < _Idx; --_Idx)
			{	
			double _Val;
			_In(_Istr, _Val);
			_Par._Bvec.push_back(_Val);
			}
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Mybase::_Write(_Ostr, _Par);

		for (size_t _Idx = 0; _Idx < _Par._Bvec.size(); ++_Idx)
			_Out(_Ostr, _Par._Bvec[_Idx]);
		return (_Ostr);
		}

	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		size_t _Px = (*(_Mybase *)this)(_Eng, _Par0);
		uniform_real<_Ty> _Dist(_Par0._Bvec[_Px], _Par0._Bvec[_Px + 1]);
		return (_Dist(_Eng));
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const piecewise_constant_distribution<_Ty>& _Left,
		const piecewise_constant_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const piecewise_constant_distribution<_Ty>& _Left,
		const piecewise_constant_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		piecewise_constant_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const piecewise_constant_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
template<class _Ty = double>
	class piecewise_linear_distribution
		: public discrete_distribution<size_t>
	{	
public:
	static_assert(_Is_RealType<_Ty>::value,
		"invalid template argument for piecewise_linear_distribution");

	typedef piecewise_linear_distribution<_Ty> _Myt;
	typedef discrete_distribution<size_t> _Mybase;
	typedef typename _Mybase::param_type _Mypbase;
	typedef typename _Mypbase::_Noinit _Noinit;
	typedef _Ty result_type;

	struct param_type
		: public _Mypbase
		{	
		typedef _Myt distribution_type;

		param_type()
			{	
			_Bvec.push_back(_Ty(0));
			_Bvec.push_back(_Ty(1));
			}

		template<class _InIt1,
			class _InIt2>
			param_type(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
				: _Mypbase(_Noinit())
			{	
			for (; _First1 != _Last1; ++_First1)
				_Bvec.push_back(*_First1);

			if (2 <= _Bvec.size())
				for (size_t _Idx = 0; _Idx < _Bvec.size(); ++_Idx)
					this->_Pvec.push_back(*_First2++);
			_Init();
			}

		template<class _Fn>
			param_type(::std:: initializer_list<_Ty> _Ilist,
				_Fn _Func)
				: _Mypbase(_Noinit())
			{	
			if (2 <= _Ilist.size())
				_Bvec.assign(_Ilist);
			else
				{	
				_Bvec.push_back(_Ty(0));
				_Bvec.push_back(_Ty(1));
				}

			_Ty _Low = _Bvec.front();
			_Ty _Range = _Bvec.back() - _Low;
			size_t _Count = _Bvec.size();

			_Range /= (_Ty)_Count;
			for (size_t _Idx = 0; _Idx < _Count; ++_Idx)
				this->_Pvec.push_back(_Func(_Low + _Idx * _Range));
			_Init();
			}

		template<class _Fn>
			param_type(size_t _Count, _Ty _Low, _Ty _High, _Fn _Func)
				: _Mypbase(_Noinit())
			{	
			_Ty _Range = _High - _Low;
			((void)0);
			if (_Count < 2)
				_Count = 2;

			_Range /= (double)_Count;
			for (size_t _Idx = 0; _Idx < _Count; ++_Idx)
				{	
				_Ty _Bval = _Low + _Idx * _Range;
				_Bvec.push_back(_Bval);
				this->_Pvec.push_back(_Func(_Bval));
				}
			_Init();
			}

		bool operator==(const param_type& _Right) const
			{	
			return (*(_Mypbase *)this == *(_Mypbase *)&_Right
				&& _Bvec == _Right._Bvec);
			}

		bool operator!=(const param_type& _Right) const
			{	
			return (!(*this == _Right));
			}

		vector<_Ty> intervals() const
			{	
			return (_Bvec);
			}

		vector<_Ty> densities() const
			{	
			vector<_Ty> _Ans(this->_Pvec.begin(),
				this->_Pvec.end());
			return (_Ans);
			}

		void _Init(bool _Renorm = true)
			{	
			size_t _Size = this->_Pvec.size();
			size_t _Idx;

			if (!_Renorm)
				;
			else if (this->_Pvec.empty())
				this->_Pvec.push_back(1.0);	
			else
				{	
				double _Sum = 0;

				for (_Idx = 1; _Idx < _Size; ++_Idx)
					{	
					((void)0);
					_Sum += 0.5 * (this->_Pvec[_Idx - 1] + this->_Pvec[_Idx]);
					}

				((void)0);
				if (_Sum != 1.0)
					for (_Idx = 0; _Idx < _Size; ++_Idx)
						this->_Pvec[_Idx] /= _Sum;
				}

			this->_Pcdf.assign(1, 0.5 * (this->_Pvec[0] + this->_Pvec[1]));
			for (_Idx = 2; _Idx < _Size; ++_Idx)
				this->_Pcdf.push_back(0.5
					* (this->_Pvec[_Idx - 1] + this->_Pvec[_Idx])
					+ this->_Pcdf[_Idx - 2]);
			}

		vector<_Ty> _Bvec;
		};

	piecewise_linear_distribution()
		{	
		}

	template<class _InIt1,
		class _InIt2>
		piecewise_linear_distribution(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2)
			: _Par(_First1, _Last1, _First2)
		{	
		}

	template<class _Fn>
		piecewise_linear_distribution(::std:: initializer_list<_Ty> _Ilist,
			_Fn _Func)
			: _Par(_Ilist, _Func)
		{	
		}

	template<class _Fn>
		piecewise_linear_distribution(size_t _Count,
			_Ty _Low, _Ty _High, _Fn _Func)
			: _Par(_Count, _Low, _High, _Func)
		{	
		}

	explicit piecewise_linear_distribution(const param_type& _Par0)
		: _Par(_Par0)
		{	
		}

	vector<_Ty> intervals() const
		{	
		return (_Par.intervals());
		}

	vector<_Ty> densities() const
		{	
		return (_Par.densities());
		}

	param_type param() const
		{	
		return (_Par);
		}

	void param(const param_type& _Par0)
		{	
		_Par = _Par0;
		}

	result_type (min)() const
		{	
		return (_Par._Bvec.front());
		}

	result_type (max)() const
		{	
		return (_Par._Bvec.back());
		}

	void reset()
		{	
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng) const
		{	
		return (_Eval(_Eng, _Par));
		}

	template<class _Engine>
		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
		{	
		return (_Eval(_Eng, _Par0));
		}

	template<class _Elem,
		class _Traits>
		basic_istream<_Elem, _Traits>& _Read(
			basic_istream<_Elem, _Traits>& _Istr,
			param_type& _Par0)
		{	
		size_t _Nvals;
		_Istr >> _Nvals;
		_Par0._Pvec.clear();
		for (; 0 < _Nvals; --_Nvals)
			{	
			double _Val;
			_In(_Istr, _Val);
			_Par0._Pvec.push_back(_Val);
			}
		_Par0._Init(false);	

		_Par._Bvec.clear();
		for (size_t _Idx = _Par._Pvec.size(); 0 < _Idx; --_Idx)
			{	
			double _Val;
			_In(_Istr, _Val);
			_Par._Bvec.push_back(_Val);
			}
		return (_Istr);
		}

	template<class _Elem,
		class _Traits>
		basic_ostream<_Elem, _Traits>& _Write(
			basic_ostream<_Elem, _Traits>& _Ostr) const
		{	
		_Mybase::_Write(_Ostr, _Par);

		for (size_t _Idx = 0; _Idx < _Par._Bvec.size(); ++_Idx)
			_Out(_Ostr, _Par._Bvec[_Idx]);
		return (_Ostr);
		}

	template<class _Engine>
		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
		{	
		size_t _Px = (*(_Mybase *)this)(_Eng, _Par0);
		double _P0 = _Par0._Pvec[_Px];
		double _P1 = _Par0._Pvec[_Px + 1];
		uniform_real<_Ty> _Dist;
		result_type _X0 = _Dist(_Eng);

		if (_P0 != _P1)
			_X0 = (::std:: sqrt(_P0 * _P0 * (1.0 - _X0)
				+ _P1 * _P1 * _X0) - _P0) / (_P1 - _P0);
		return (_Par0._Bvec[_Px]
			+ _X0 * (_Par0._Bvec[_Px + 1] - _Par0._Bvec[_Px]));
		}

	param_type _Par;
	};

template<class _Ty>
	bool operator==(const piecewise_linear_distribution<_Ty>& _Left,
		const piecewise_linear_distribution<_Ty>& _Right)
	{	
	return (_Left.param() == _Right.param());
	}

template<class _Ty>
	bool operator!=(const piecewise_linear_distribution<_Ty>& _Left,
		const piecewise_linear_distribution<_Ty>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		piecewise_linear_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Read(_Istr, _Dist._Par));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const piecewise_linear_distribution<_Ty>& _Dist)
	{	
	return (_Dist._Write(_Ostr));
	}

	
typedef linear_congruential_engine<unsigned int, 16807, 0, 2147483647>
	minstd_rand0;
typedef linear_congruential_engine<unsigned int, 48271, 0, 2147483647>
	minstd_rand;

typedef mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 0x9908b0df,
	11, 0xffffffff, 7, 0x9d2c5680, 15, 0xefc60000, 18, 1812433253> mt19937;


typedef subtract_with_carry<unsigned int, 1 << 24, 10, 24> _Ranbase;
typedef discard_block<_Ranbase, 223, 24> ranlux3;
typedef discard_block<_Ranbase, 389, 24> ranlux4;


typedef subtract_with_carry_01<float, 24, 10, 24> ranlux_base_01;
typedef subtract_with_carry_01<double, 48, 5, 12> ranlux64_base_01;
typedef discard_block<ranlux_base_01, 223, 24> ranlux3_01;
typedef discard_block<ranlux_base_01, 389, 24> ranlux4_01;


typedef mersenne_twister_engine<_ULonglong, 64, 312, 156, 31,
	0xb5026f5aa96619e9ULL, 29,
	0x5555555555555555ULL, 17,
	0x71d67fffeda60000ULL, 37,
	0xfff7eee000000000ULL, 43,
	6364136223846793005ULL> mt19937_64;
typedef subtract_with_carry_engine<unsigned int, 24, 10, 24> ranlux24_base;
typedef subtract_with_carry_engine<_ULonglong, 48, 5, 12> ranlux48_base;
typedef discard_block_engine<ranlux24_base, 223, 23> ranlux24;
typedef discard_block_engine<ranlux48_base, 389, 11> ranlux48;
typedef shuffle_order_engine<minstd_rand0, 256> knuth_b;

typedef mt19937 default_random_engine;

	

__declspec(dllimport) unsigned int __cdecl _Random_device();

class random_device
	{	
public:
	typedef unsigned int result_type;

	explicit random_device(const string& = "")
		{	
		(*this)();	
		}

	static constexpr result_type (min)()
		{	
		return (0);
		}

	static constexpr result_type (max)()
		{	
		return ((result_type)-1);
		}

	double entropy() noexcept
		{	
		return (32.0);
		}

	result_type operator()()
		{	
		return (_Random_device());
		}

	random_device(const random_device&) = delete;
	random_device& operator=(const random_device&) = delete;
	};


namespace tr1 {	
using ::std:: bernoulli_distribution;
using ::std:: binomial_distribution;
using ::std:: discard_block;
using ::std:: exponential_distribution;
using ::std:: gamma_distribution;
using ::std:: geometric_distribution;
using ::std:: linear_congruential;
using ::std:: mersenne_twister;
using ::std:: minstd_rand;
using ::std:: minstd_rand0;
using ::std:: mt19937;
using ::std:: normal_distribution;
using ::std:: poisson_distribution;
using ::std:: random_device;
using ::std:: ranlux3;
using ::std:: ranlux3_01;
using ::std:: ranlux4;
using ::std:: ranlux4_01;
using ::std:: ranlux64_base_01;
using ::std:: ranlux_base_01;
using ::std:: subtract_with_carry;
using ::std:: subtract_with_carry_01;
using ::std:: uniform_int;
using ::std:: uniform_real;
using ::std:: cauchy_distribution;
using ::std:: chi_squared_distribution;
using ::std:: default_random_engine;
using ::std:: discard_block_engine;
using ::std:: discrete_distribution;
using ::std:: extreme_value_distribution;
using ::std:: fisher_f_distribution;
using ::std:: generate_canonical;
using ::std:: independent_bits_engine;
using ::std:: knuth_b;
using ::std:: linear_congruential_engine;
using ::std:: lognormal_distribution;
using ::std:: mersenne_twister_engine;
using ::std:: mt19937_64;
using ::std:: negative_binomial_distribution;
using ::std:: piecewise_constant_distribution;
using ::std:: piecewise_linear_distribution;
using ::std:: ranlux24;
using ::std:: ranlux24_base;
using ::std:: ranlux48;
using ::std:: ranlux48_base;
using ::std:: seed_seq;
using ::std:: shuffle_order_engine;
using ::std:: student_t_distribution;
using ::std:: subtract_with_carry_engine;
using ::std:: uniform_int_distribution;
using ::std:: uniform_real_distribution;
using ::std:: weibull_distribution;
}	

}



 
 #pragma warning(pop)
 #pragma pack(pop)



















template <class TheObjType, class TheBndType> class NCollection_UBTreeFiller
{
 public:
  

  
  struct ObjBnd
  {
    TheObjType  myObj;
    TheBndType  myBnd;
    ObjBnd (const TheObjType& theObj, const TheBndType& theBnd)
      : myObj(theObj), myBnd(theBnd) {}
    ObjBnd ()
      : myObj(TheObjType()), myBnd(TheBndType()) {}
  };

  
  typedef NCollection_UBTree<TheObjType, TheBndType>    UBTree;
  typedef typename UBTree::TreeNode                     UBTreeNode;


  

  










 
  NCollection_UBTreeFiller (UBTree& theTree,
                            const opencascade::handle<NCollection_BaseAllocator>& theAlloc=0L,
                            const Standard_Boolean isFullRandom = true)
    : myTree(theTree), mySeqPtr(256, theAlloc),
      myRandGen (5489u ),
      myIsFullRandom (isFullRandom) {}

  
  void Add (const TheObjType& theObj, const TheBndType& theBnd)
  { mySeqPtr.Append (ObjBnd (theObj, theBnd)); }

  






  Standard_Integer Fill ();

  



  void                             Reset()      { mySeqPtr.Clear(); }

  




 
  Standard_Integer CheckTree (Standard_OStream& theStream);

  



  ~NCollection_UBTreeFiller ()
  {
    if (mySeqPtr.Length() > 0)




      Fill();

  }

 private:

  
  
  void operator = (const NCollection_UBTreeFiller&) {}
  
  static Standard_Real    checkNode     (const UBTreeNode&      theNode,
                                         const Standard_Integer theLength,
                                         Standard_Integer&      theNumber);


 private:
  

  UBTree&                               myTree;
  NCollection_Vector<ObjBnd>            mySeqPtr;
  std::mt19937                          myRandGen;      
  Standard_Boolean                      myIsFullRandom;
};






template <class TheObjType, class TheBndType>
Standard_Integer NCollection_UBTreeFiller<TheObjType,TheBndType>::Fill ()
{
  Standard_Integer i, nbAdd = mySeqPtr.Length();
  
  if (myIsFullRandom)
    for (i = nbAdd; i > 0; i--) { 
      unsigned int ind = myRandGen();
      ind = ind % i;
      const ObjBnd& aObjBnd = mySeqPtr(ind);
      myTree.Add (aObjBnd.myObj, aObjBnd.myBnd);
      mySeqPtr(ind) = mySeqPtr(i-1);
    }
  else
    for (i = nbAdd; i > 0; i--) { 
      unsigned int ind = myRandGen();
      ind = i - (ind % i) - 1;
      const ObjBnd& aObjBnd = mySeqPtr(ind);
      myTree.Add (aObjBnd.myObj, aObjBnd.myBnd);
      mySeqPtr(ind) = mySeqPtr(i-1);
    }
  mySeqPtr.Clear();
  return nbAdd;
}






template <class TheObjType, class TheBndType>
Standard_Integer NCollection_UBTreeFiller<TheObjType,TheBndType>::CheckTree
                                        (Standard_OStream& theStream)
{
  Standard_Integer aNumber(0);
  const Standard_Real aLen = checkNode (myTree.Root(), 0, aNumber);
  const Standard_Real num = (double) aNumber;
  const Standard_Real aLen1 = sqrt (aLen / num);
  const Standard_Real aLen0 = log(num) / log(2.);
  char buf[128];
  sprintf (buf,  "Checking UBTree:%8d leaves, balance =%7.2f",
           aNumber, aLen1 / aLen0);
  theStream << buf << endl;
  return aNumber;
}






template <class TheObjType, class TheBndType>
Standard_Real NCollection_UBTreeFiller<TheObjType,TheBndType>::checkNode
  (const typename NCollection_UBTree<TheObjType, TheBndType>::TreeNode& theNode,
   const Standard_Integer theLength,
   Standard_Integer&      theNumber)
{
  Standard_Real aLength;
  if (!theNode.IsLeaf())
    aLength = (checkNode (theNode.Child(0), theLength+1, theNumber) +
               checkNode (theNode.Child(1), theLength+1, theNumber));
  else {
    theNumber++;
    aLength = theLength * theLength;
  }
  return aLength;
}









































enum BRepMesh_DegreeOfFreedom
{
  BRepMesh_Free,
  BRepMesh_InVolume,
  BRepMesh_OnSurface,
  BRepMesh_OnCurve,
  BRepMesh_Fixed,
  BRepMesh_Frontier,
  BRepMesh_Deleted
};


























class BRepMesh_OrientedEdge
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  BRepMesh_OrientedEdge()
    : myFirstNode(-1),
      myLastNode(-1)
  {
  }

  
  BRepMesh_OrientedEdge(
    const Standard_Integer         theFirstNode,
    const Standard_Integer         theLastNode)
    : myFirstNode(theFirstNode),
      myLastNode(theLastNode)
  {
  }

  
  inline Standard_Integer FirstNode() const
  {
    return myFirstNode;
  }

  
  inline Standard_Integer LastNode() const
  {
    return myLastNode;
  }

  
  
  
  Standard_Integer HashCode(const Standard_Integer theUpper) const
  {
    return ::HashCode(myFirstNode + myLastNode, theUpper);
  }

  
  
  
  inline Standard_Boolean IsEqual(const BRepMesh_OrientedEdge& theOther) const
  {
    return (myFirstNode == theOther.myFirstNode && myLastNode == theOther.myLastNode);
  }

  
  Standard_Boolean operator ==(const BRepMesh_OrientedEdge& Other) const
  {
    return IsEqual(Other);
  }

private:

  Standard_Integer myFirstNode;
  Standard_Integer myLastNode;
};

inline Standard_Integer HashCode(const BRepMesh_OrientedEdge&   theEdge,
                                 const Standard_Integer         theUpper)
{
  return theEdge.HashCode(theUpper);
}





class BRepMesh_Edge : public BRepMesh_OrientedEdge
{
public:

    
  BRepMesh_Edge()
    : BRepMesh_OrientedEdge(),
      myMovability(BRepMesh_Deleted)
  {
  }

  
  BRepMesh_Edge(
    const Standard_Integer         theFirstNode,
    const Standard_Integer         theLastNode,
    const BRepMesh_DegreeOfFreedom theMovability)
    : BRepMesh_OrientedEdge(theFirstNode, theLastNode),
      myMovability(theMovability)
  {
  }

  
  inline BRepMesh_DegreeOfFreedom Movability() const
  {
    return myMovability;
  }

  
  
  inline void SetMovability(const BRepMesh_DegreeOfFreedom theMovability)
  {
    myMovability = theMovability;
  }

  
  
  
  inline Standard_Boolean IsSameOrientation(const BRepMesh_Edge& theOther) const
  {
    return BRepMesh_OrientedEdge::IsEqual(theOther);
  }

  
  
  
  inline Standard_Boolean IsEqual(const BRepMesh_Edge& theOther) const
  {
    if (myMovability == BRepMesh_Deleted || theOther.myMovability == BRepMesh_Deleted)
      return false;

    return IsSameOrientation(theOther) ||
      (FirstNode() == theOther.LastNode() && LastNode() == theOther.FirstNode());
  }

  
  Standard_Boolean operator ==(const BRepMesh_Edge& Other) const
  {
    return IsEqual(Other);
  }

private:

  BRepMesh_DegreeOfFreedom  myMovability;
};

inline Standard_Integer HashCode(const BRepMesh_Edge&   theEdge,
                                 const Standard_Integer theUpper)
{
  return theEdge.HashCode(theUpper);
}
































class BRepMesh_Triangle
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  BRepMesh_Triangle()
  : myEdge1(0),
    myEdge2(0),
    myEdge3(0),
    myOrientation1(false),
    myOrientation2(false),
    myOrientation3(false),
    myMovability  (BRepMesh_Free)
  {
  }

  
  
  
  
  BRepMesh_Triangle(
    const Standard_Integer          (&theEdges)[3],
    const Standard_Boolean          (&theOrientations)[3],
    const BRepMesh_DegreeOfFreedom  theMovability)
  {
    Initialize(theEdges, theOrientations, theMovability);
  }
  
  
  
  
  
  inline void Initialize(
    const Standard_Integer          (&theEdges)[3],
    const Standard_Boolean          (&theOrientations)[3],
    const BRepMesh_DegreeOfFreedom  theMovability)
  {
    myEdge1        = theEdges[0];
    myEdge2        = theEdges[1];
    myEdge3        = theEdges[2];
    myOrientation1 = theOrientations[0];
    myOrientation2 = theOrientations[1];
    myOrientation3 = theOrientations[2];
    myMovability   = theMovability;
  }
  
  
  
  
  inline void Edges(Standard_Integer (&theEdges)[3],
                    Standard_Boolean (&theOrientations)[3]) const
  {
    theEdges[0]        = myEdge1;
    theEdges[1]        = myEdge2;
    theEdges[2]        = myEdge3;
    theOrientations[0] = myOrientation1;
    theOrientations[1] = myOrientation2;
    theOrientations[2] = myOrientation3;
  }
  
  
  inline BRepMesh_DegreeOfFreedom Movability() const 
  {
    return myMovability;
  }
  
  
  inline void SetMovability(const BRepMesh_DegreeOfFreedom theMovability)
  {
    myMovability = theMovability;
  }
  
  
  
  
  Standard_Integer HashCode(const Standard_Integer theUpper) const
  {
    return ::HashCode(myEdge1 + myEdge2 + myEdge3, theUpper);
  }
  
  
  
  
  Standard_Boolean IsEqual(const BRepMesh_Triangle& theOther) const
  {
    if (myMovability == BRepMesh_Deleted || theOther.myMovability == BRepMesh_Deleted)
      return false;

    if (myEdge1 == theOther.myEdge1 && 
        myEdge2 == theOther.myEdge2 && 
        myEdge3 == theOther.myEdge3)
    {
      return true;
    }

    if (myEdge1 == theOther.myEdge2 && 
        myEdge2 == theOther.myEdge3 && 
        myEdge3 == theOther.myEdge1)
    {
      return true;
    }

    if (myEdge1 == theOther.myEdge3 && 
        myEdge2 == theOther.myEdge1 && 
        myEdge3 == theOther.myEdge2)
    {
      return true;
    }

    return false;
  }
  
  
  Standard_Boolean operator ==(const BRepMesh_Triangle& theOther) const
  {
    return IsEqual(theOther);
  }

private:

  Standard_Integer          myEdge1;
  Standard_Integer          myEdge2;
  Standard_Integer          myEdge3;
  Standard_Boolean          myOrientation1;
  Standard_Boolean          myOrientation2;
  Standard_Boolean          myOrientation3;
  BRepMesh_DegreeOfFreedom  myMovability;
};

inline Standard_Integer HashCode(const BRepMesh_Triangle& theTriangle,
                                 const Standard_Integer   theUpper)
{
 return theTriangle.HashCode(theUpper);
}
























class Poly_PolygonOnTriangulation;

class BRepMesh_PairOfPolygon
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  BRepMesh_PairOfPolygon()
  {
  }

  
  inline void Clear()
  {
    myFirst.Nullify();
    myLast.Nullify();
  }
  
  
  
  
  inline void Prepend(const opencascade::handle<Poly_PolygonOnTriangulation>& thePolygon)
  {
    myFirst = thePolygon;

    if (myLast.IsNull())
      myLast = thePolygon;
  }

  
  
  
  inline void Append(const opencascade::handle<Poly_PolygonOnTriangulation>& thePolygon)
  {
    if (myFirst.IsNull())
      myFirst = thePolygon;

    myLast = thePolygon;
  }

  
  inline const opencascade::handle<Poly_PolygonOnTriangulation>& First() const
  {
    return myFirst;
  }

  
  inline const opencascade::handle<Poly_PolygonOnTriangulation>& Last() const
  {
    return myLast;
  }

private:

  opencascade::handle<Poly_PolygonOnTriangulation> myFirst;
  opencascade::handle<Poly_PolygonOnTriangulation> myLast;
};



























class BRepMesh_PairOfIndex
{
public:

  
  BRepMesh_PairOfIndex()
  {
    Clear();
  }

  
  void Clear()
  {
    myIndex[0] = myIndex[1] = -1;
  }

  
  inline void Append(const Standard_Integer theIndex)
  {
    if (myIndex[0] < 0)
      myIndex[0] = theIndex;
    else
    {
      if (myIndex[1] >= 0)
        Standard_OutOfRange::Raise("BRepMesh_PairOfIndex::Append, more than two index to store");

      myIndex[1] = theIndex;
    }
  }

  
  inline void Prepend(const Standard_Integer theIndex)
  {
    if (myIndex[1] >= 0)
      Standard_OutOfRange::Raise ("BRepMesh_PairOfIndex::Prepend, more than two index to store");

    myIndex[1] = myIndex[0];
    myIndex[0] = theIndex;
  }

  
  inline Standard_Boolean IsEmpty() const
  {
    
    
    return (myIndex[0] < 0);
  }

  
  inline Standard_Integer Extent() const
  {
    return (myIndex[0] < 0 ? 0 : (myIndex[1] < 0 ? 1 : 2));
  }

  
  inline Standard_Integer FirstIndex() const
  {
    return myIndex[0];
  }

  
  inline Standard_Integer LastIndex() const
  {
    return (myIndex[1] < 0 ? myIndex[0] : myIndex[1]);
  }

  
  
  inline Standard_Integer Index(const Standard_Integer thePairPos) const
  {
    if (thePairPos != 1 && thePairPos != 2)
      Standard_OutOfRange::Raise ("BRepMesh_PairOfIndex::Index, requested index is out of range");

    return myIndex[thePairPos - 1];
  }

  
  
  
  inline void SetIndex(const Standard_Integer thePairPos,
                       const Standard_Integer theIndex)
  {
    if (thePairPos != 1 && thePairPos != 2)
      Standard_OutOfRange::Raise ("BRepMesh_PairOfIndex::SetIndex, requested index is out of range");

    myIndex[thePairPos - 1] = theIndex;
  }

  
  
  inline void RemoveIndex(const Standard_Integer thePairPos)
  {
    if (thePairPos != 1 && thePairPos != 2)
      Standard_OutOfRange::Raise ("BRepMesh_PairOfIndex::RemoveIndex, requested index is out of range");

    if ( thePairPos == 1 )
      myIndex[0] = myIndex[1];

    myIndex[1] = -1;
  }

private:
  Standard_Integer myIndex[2];
};



























class BRepMesh_Circle
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  BRepMesh_Circle() : myRadius(0.0)
  {
  }
  
  
  
  
  BRepMesh_Circle(const gp_XY&        theLocation,
                  const Standard_Real theRadius)
  : myLocation(theLocation),
    myRadius  (theRadius)
  {
  }
  
  
  
  inline void SetLocation(const gp_XY& theLocation)
  {
    myLocation = theLocation;
  }
  
  
  
  inline void SetRadius(const Standard_Real theRadius)
  {
    myRadius = theRadius;
  }
  
  
  inline const gp_XY& Location() const
  {
    return myLocation;
  }

  
  inline const Standard_Real& Radius() const
  {
    return myRadius;
  }

private:

  gp_XY         myLocation;
  Standard_Real myRadius;
};









class BRepMesh_Vertex;
class TopoDS_Edge;
class TopoDS_Vertex;
class BRepMesh_FaceAttribute;
class BRepMesh_VertexInspector;
class BRepMesh_CircleInspector;
class BRepMesh_Classifier;
class Poly_Triangulation;
class BRepMesh_VertexTool;

namespace BRepMesh
{
  
  




  const size_t MEMORY_BLOCK_SIZE_HUGE = 1024 * 1024;




  
  struct Segment
  {
    gp_XY StartPnt;
    gp_XY EndPnt;
  };

  
  typedef NCollection_Sequence<Bnd_B2d>                                                             SequenceOfBndB2d;
  typedef NCollection_Sequence<Standard_Integer>                                                    SequenceOfInteger;
  typedef NCollection_Sequence<Standard_Real>                                                       SequenceOfReal;

  
  typedef NCollection_Vector<BRepMesh_Vertex>                                                       VectorOfVertex;
  typedef NCollection_Vector<Standard_Integer>                                                      VectorOfInteger;
  typedef NCollection_Vector<BRepMesh_Circle>                                                       VectorOfCircle;

  
  typedef NCollection_EBTree<Standard_Integer, Bnd_Box2d>                                           BndBox2dTree;
  typedef NCollection_UBTreeFiller<Standard_Integer, Bnd_Box2d>                                     BndBox2dTreeFiller;

  
  typedef NCollection_Array1<BRepMesh_Vertex>                                                       Array1OfVertexOfDelaun;
  typedef NCollection_Array1<Standard_Integer>                                                      Array1OfInteger;
  typedef NCollection_Array1<Standard_Real>                                                         Array1OfReal;
  typedef NCollection_Array1<Segment>                                                               Array1OfSegments;

  
  typedef NCollection_List<gp_XY>                                                                   ListOfXY;
  typedef NCollection_List<BRepMesh_Vertex>                                                         ListOfVertex;
  typedef NCollection_List<Standard_Integer>                                                        ListOfInteger;

  
  typedef NCollection_Map<Standard_Real>                                                            MapOfReal;
  typedef NCollection_Map<Standard_Integer>                                                         MapOfInteger;
  typedef NCollection_DataMap<opencascade::handle<Poly_Triangulation>, Standard_Boolean>                         DMapOfTriangulationBool;
  typedef NCollection_Map<TopoDS_Shape, TopTools_ShapeMapHasher>                                    MapOfShape;

  typedef NCollection_DataMap<Standard_Integer, Standard_Integer>                                   MapOfIntegerInteger;
  typedef NCollection_DataMap<TopoDS_Vertex, Standard_Integer, TopTools_ShapeMapHasher>             DMapOfVertexInteger;
  typedef NCollection_DataMap<TopoDS_Face, opencascade::handle<BRepMesh_FaceAttribute>, TopTools_ShapeMapHasher>  DMapOfFaceAttribute;
  typedef NCollection_DataMap<TopoDS_Shape, BRepMesh_PairOfPolygon, TopTools_ShapeMapHasher>        DMapOfShapePairOfPolygon;
  typedef NCollection_DataMap<Standard_Integer, gp_Pnt>                                             DMapOfIntegerPnt;
  typedef NCollection_DataMap<Standard_Integer, ListOfXY>                                           DMapOfIntegerListOfXY;
  typedef NCollection_DataMap<Standard_Integer, ListOfInteger>                                      DMapOfIntegerListOfInteger;
  typedef NCollection_DataMap<TopoDS_Edge, DMapOfTriangulationBool, TopTools_ShapeMapHasher>        DMapOfEdgeListOfTriangulationBool;

  typedef NCollection_IndexedMap<Standard_Integer>                                                  IMapOfInteger;
  typedef NCollection_IndexedMap<Standard_Real>                                                     IMapOfReal;
  typedef NCollection_IndexedMap<BRepMesh_Triangle>                                                 IMapOfElement;
  typedef NCollection_IndexedDataMap<BRepMesh_Edge, BRepMesh_PairOfIndex>                           IDMapOfLink;

  
  typedef NCollection_CellFilter<BRepMesh_CircleInspector>                                          CircleCellFilter;
  typedef NCollection_CellFilter<BRepMesh_VertexInspector>                                          VertexCellFilter;

  
  typedef NCollection_Handle<VectorOfVertex>                                                        HVectorOfVertex;
  typedef NCollection_Handle<MapOfInteger>                                                          HMapOfInteger;
  typedef NCollection_Handle<IMapOfInteger>                                                         HIMapOfInteger;
  typedef NCollection_Handle<DMapOfShapePairOfPolygon>                                              HDMapOfShapePairOfPolygon;
  typedef NCollection_Handle<DMapOfIntegerPnt>                                                      HDMapOfIntegerPnt;
  typedef NCollection_Handle<BRepMesh_Classifier>                                                   HClassifier;
  typedef NCollection_Handle<BndBox2dTree>                                                          HBndBox2dTree;
  typedef NCollection_Handle<Array1OfSegments>                                                      HArray1OfSegments;
  typedef NCollection_Handle<DMapOfVertexInteger>                                                   HDMapOfVertexInteger;
  typedef NCollection_Handle<DMapOfIntegerListOfXY>                                                 HDMapOfIntegerListOfXY;
  typedef NCollection_Handle<BRepMesh_VertexTool>                                                   HVertexTool;
  typedef NCollection_Handle<SequenceOfBndB2d>                                                      HSequenceOfBndB2d;
  typedef NCollection_Handle<SequenceOfInteger>                                                     HSequenceOfInteger;

  
  typedef std::pair<HArray1OfSegments, HBndBox2dTree>                                               SegmentsTree;
  typedef NCollection_Array1<SegmentsTree>                                                          Array1OfSegmentsTree;

} 





















































































































































































































































































































































































































































































































































































class Precision 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  static Standard_Real Angular() { return 1.e-12; }

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  static Standard_Real Confusion() { return 1.e-7; }

  
  
  static Standard_Real SquareConfusion() { return Confusion() * Confusion(); }

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  static Standard_Real Intersection() { return Confusion() * 0.01; }

  
  
  
  
  
  
  
  
  
  
  
  
  
  static Standard_Real Approximation() { return Confusion() * 10.0; }

  
  
  
  
  
  static Standard_Real Parametric (const Standard_Real P, const Standard_Real T) { return P / T; }

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  static Standard_Real PConfusion (const Standard_Real T) { return Parametric (Confusion(), T); }

  
  
  
  
  
  
  
  
  
  
  
  
  
  static Standard_Real PIntersection (const Standard_Real T) { return Parametric(Intersection(),T); }

  
  
  
  
  
  
  
  
  
  
  
  
  
  static Standard_Real PApproximation (const Standard_Real T) { return Parametric(Approximation(),T); }

  
  
  
  
  static Standard_Real Parametric (const Standard_Real P) { return Parametric (P, 100.0); }

  
  
  
  
  static Standard_Real PConfusion() { return Parametric (Confusion()); }

  
  
  
  
  static Standard_Real PIntersection() { return Parametric (Intersection()); }

  
  
  
  
  static Standard_Real PApproximation() { return Parametric (Approximation()); }

  
  
  static Standard_Boolean IsInfinite (const Standard_Real R) { return Abs (R) >= (0.5 * Precision::Infinite()); }

  
  
  static Standard_Boolean IsPositiveInfinite (const Standard_Real R) { return R >= (0.5 * Precision::Infinite()); }

  
  
  static Standard_Boolean IsNegativeInfinite (const Standard_Real R) { return R <= -(0.5 * Precision::Infinite()); }

  
  
  static Standard_Real Infinite() { return 2.e+100; }

};


































class BRepMesh_Vertex
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }
  
  
  BRepMesh_Vertex()
    : myLocation3d(0),
      myMovability(BRepMesh_Free)
  {
  }
  
  
  
  
  
  BRepMesh_Vertex(const gp_XY&                   theUV,
                  const Standard_Integer         theLocation3d,
                  const BRepMesh_DegreeOfFreedom theMovability)
  {
    Initialize(theUV, theLocation3d, theMovability);
  }
  
  
  
  
  
  BRepMesh_Vertex(const Standard_Real            theU,
                  const Standard_Real            theV,
                  const BRepMesh_DegreeOfFreedom theMovability)
    : myUV(theU, theV),
      myLocation3d(0),
      myMovability(theMovability)
  {}

  
  
  
  
  inline void Initialize(const gp_XY&                   theUV,
                         const Standard_Integer         theLocation3d,
                         const BRepMesh_DegreeOfFreedom theMovability)
  {
    myUV         = theUV;
    myLocation3d = theLocation3d;
    myMovability = theMovability;
  }
  
  
  inline const gp_XY& Coord() const
  {
    return myUV;
  }

  
  inline gp_XY& ChangeCoord()
  {
    return myUV;
  }
  
  
  inline Standard_Integer Location3d() const
  {
    return myLocation3d;
  }
  
  
  inline BRepMesh_DegreeOfFreedom Movability() const
  {
    return myMovability;
  }
  
  
  inline void SetMovability(const BRepMesh_DegreeOfFreedom theMovability)
  {
    myMovability = theMovability;
  }
  
  
  
  
  Standard_Integer HashCode(const Standard_Integer Upper) const
  {
    return ::HashCode(Floor(1e5 * myUV.X()) * Floor(1e5 * myUV.Y()), Upper);
  }
  
  
  
  
  Standard_Boolean IsEqual(const BRepMesh_Vertex& theOther) const
  {
    if (myMovability          == BRepMesh_Deleted || 
        theOther.myMovability == BRepMesh_Deleted)
    {
      return false;
    }

    return (myUV.IsEqual(theOther.myUV, Precision::PConfusion()));
  }

  
  Standard_Boolean operator ==(const BRepMesh_Vertex& Other) const
  {
    return IsEqual(Other);
  }

private:

  gp_XY                     myUV;
  Standard_Integer          myLocation3d;
  BRepMesh_DegreeOfFreedom  myMovability;
};

inline Standard_Integer HashCode(const BRepMesh_Vertex& me, const Standard_Integer Upper)
{
 return me.HashCode(Upper);
}





class BRepMesh_VertexInspector : public NCollection_CellFilter_InspectorXY
{
public:
  typedef Standard_Integer Target;

  
  
  BRepMesh_VertexInspector (
    const opencascade::handle<NCollection_IncAllocator>& theAllocator)
    : myResIndices(theAllocator),
      myVertices  (new BRepMesh::VectorOfVertex),
      myDelNodes  (theAllocator)
  {
    SetTolerance( Precision::Confusion() );
  }

  
  
  Standard_Integer Add(const BRepMesh_Vertex& theVertex)
  {
    if( myDelNodes.IsEmpty() )
    {
      myVertices->Append(theVertex);
      return myVertices->Length();
    }
    
    Standard_Integer aNodeIndex = myDelNodes.First();
    myVertices->ChangeValue(aNodeIndex - 1) = theVertex;
    myDelNodes.RemoveFirst();
    return aNodeIndex;
  }
  

  
  
  inline void SetTolerance(const Standard_Real theTolerance)
  {
    myTolerance[0] = theTolerance * theTolerance;
    myTolerance[1] = 0.;
  }
  
  
  
  
  
  inline void SetTolerance(const Standard_Real theToleranceX,
                           const Standard_Real theToleranceY)
  {
    myTolerance[0] = theToleranceX * theToleranceX;
    myTolerance[1] = theToleranceY * theToleranceY;
  }
  
  
  inline void Clear()
  {
    myVertices->Clear();
    myDelNodes.Clear();
  }

  
  
  inline void Delete(const Standard_Integer theIndex)
  {
    myVertices->ChangeValue(theIndex - 1).SetMovability(BRepMesh_Deleted);
    myDelNodes.Append(theIndex);
  }
  
  
  inline Standard_Integer NbVertices() const
  {
    return myVertices->Length(); 
  }

  
  inline BRepMesh_Vertex& GetVertex(Standard_Integer theIndex)
  {
    return myVertices->ChangeValue(theIndex - 1);
  }
  
  
  inline void SetPoint(const gp_XY& thePoint) 
  { 
    myResIndices.Clear();
    myPoint = thePoint;
  }

  
  inline Standard_Integer GetCoincidentPoint() const
  {
    if ( myResIndices.Size() > 0 )
    {
      return myResIndices.First();
    }
    return 0;
  }
  
  
  
  inline const BRepMesh::ListOfInteger& GetListOfDelPoints() const
  {
    return myDelNodes;
  }

  
  inline const BRepMesh::HVectorOfVertex& Vertices() const
  {
    return myVertices;
  }

  
  inline BRepMesh::HVectorOfVertex& ChangeVertices()
  {
    return myVertices;
  }

  
  
  
  __declspec( dllexport ) NCollection_CellFilter_Action Inspect(const Standard_Integer theTargetIndex);

  
  static Standard_Boolean IsEqual(const Standard_Integer theIndex,
                                                  const Standard_Integer theTargetIndex)
  {
    return (theIndex == theTargetIndex);
  }

private:

  Standard_Real             myTolerance[2];
  BRepMesh::ListOfInteger   myResIndices;
  BRepMesh::HVectorOfVertex myVertices;
  BRepMesh::ListOfInteger   myDelNodes;
  gp_XY                     myPoint;
};








class BRepMesh_Vertex;




class BRepMesh_VertexTool
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }
  
  
  
  __declspec( dllexport ) BRepMesh_VertexTool(
    const opencascade::handle<NCollection_IncAllocator>& theAllocator);

  
  void SetCellSize(const Standard_Real theSize)
  {
    myCellFilter.Reset(theSize, myAllocator);
    mySelector.Clear();
  }

  
  
  
  void SetCellSize(const Standard_Real theSizeX,
                   const Standard_Real theSizeY)
  {
    Standard_Real aCellSizeC[2] = { theSizeX, theSizeY };
    NCollection_Array1<Standard_Real> aCellSize(aCellSizeC[0], 1, 2);
    myCellFilter.Reset(aCellSize, myAllocator);
    mySelector.Clear();
  }

  
  
  void SetTolerance(const Standard_Real theTolerance)
  {
    mySelector.SetTolerance( theTolerance );
    myTolerance[0] = theTolerance;
    myTolerance[1] = theTolerance;
  }

  
  
  
  
  void SetTolerance(const Standard_Real theToleranceX,
                    const Standard_Real theToleranceY)
  {
    mySelector.SetTolerance( theToleranceX, theToleranceY );
    myTolerance[0] = theToleranceX;
    myTolerance[1] = theToleranceY;
  }

  
  
  
  
  void GetTolerance(Standard_Real& theToleranceX,
                    Standard_Real& theToleranceY)
  {
    theToleranceX = myTolerance[0];
    theToleranceY = myTolerance[1];
  }

  
  
  
  
  
  __declspec( dllexport ) Standard_Integer Add(
    const BRepMesh_Vertex& theVertex,
    const Standard_Boolean isForceAdd);

  
  __declspec( dllexport ) void Delete(const Standard_Integer theIndex);

  
  inline const BRepMesh::HVectorOfVertex& Vertices() const
  {
    return mySelector.Vertices();
  }

  
  inline BRepMesh::HVectorOfVertex& ChangeVertices()
  {
    return mySelector.ChangeVertices();
  }

  
  inline const BRepMesh_Vertex& FindKey(const Standard_Integer theIndex)
  {
    return mySelector.GetVertex(theIndex);
  }

  
  Standard_Integer FindIndex(const BRepMesh_Vertex& theVertex)
  {
    mySelector.SetPoint(theVertex.Coord());
    myCellFilter.Inspect (theVertex.Coord(), mySelector);
    return mySelector.GetCoincidentPoint();
  }

  
  inline Standard_Integer Extent() const
  {
    return mySelector.NbVertices();
  }

  
  inline Standard_Boolean IsEmpty() const
  {
    return (Extent() == 0);
  }

  
  
  
  __declspec( dllexport ) void Substitute(const Standard_Integer theIndex,
                                  const BRepMesh_Vertex& theVertex);

  
  inline void RemoveLast()
  {
    Delete(Extent());
  }

  
  
  inline const BRepMesh::ListOfInteger& GetListOfDelNodes() const
  {
    return mySelector.GetListOfDelPoints();
  }

  
  __declspec( dllexport ) void Statistics(Standard_OStream& theStream) const;

private:
  
  
  
  
  
  inline void expandPoint(const gp_XY& thePoint,
                          gp_XY&       theMinPoint,
                          gp_XY&       theMaxPoint)
  {
    theMinPoint.SetX(thePoint.X() - myTolerance[0]);
    theMinPoint.SetY(thePoint.Y() - myTolerance[1]);
    theMaxPoint.SetX(thePoint.X() + myTolerance[0]);
    theMaxPoint.SetY(thePoint.Y() + myTolerance[1]);
  }

private:

  opencascade::handle<NCollection_IncAllocator>      myAllocator;
  BRepMesh::VertexCellFilter            myCellFilter;
  BRepMesh_VertexInspector              mySelector;
  Standard_Real                         myTolerance[2];
};









class BRepMesh_Vertex;
class BRepMesh_VertexTool;
class BRepMesh_Edge;



class BRepMesh_DataStructureOfDelaun : public Standard_Transient
{
public:

  
  
  
  __declspec( dllexport ) BRepMesh_DataStructureOfDelaun(
    const opencascade::handle<NCollection_IncAllocator>& theAllocator,
    const Standard_Integer                  theReservedNodeSize = 100);



public: 

  
  inline Standard_Integer NbNodes() const
  {
    return myNodes->Extent();
  }


  
  
  
  
  
  __declspec( dllexport ) Standard_Integer AddNode(
    const BRepMesh_Vertex& theNode,
    const Standard_Boolean isForceAdd = false);

  
  
  
  Standard_Integer IndexOf(const BRepMesh_Vertex& theNode)
  {
    return myNodes->FindIndex(theNode);
  }

  
  
  
  inline const BRepMesh_Vertex& GetNode(const Standard_Integer theIndex)
  {
    return myNodes->FindKey(theIndex);
  }

  
  const BRepMesh_Vertex& operator ()(const Standard_Integer theIndex)
  {
    return GetNode(theIndex);
  }

  
  
  
  
  __declspec( dllexport ) Standard_Boolean SubstituteNode(
    const Standard_Integer theIndex,
    const BRepMesh_Vertex& theNewNode);

  
  
  
  
  
  void RemoveNode(const Standard_Integer theIndex,
                  const Standard_Boolean isForce = false)
  {
    if (isForce || myNodes->FindKey(theIndex).Movability() == BRepMesh_Free)
    {
      if (LinksConnectedTo(theIndex).Extent()==0)
        myNodes->Delete(theIndex);
    }
  }

  
  
  
  inline const BRepMesh::ListOfInteger& LinksConnectedTo(
    const Standard_Integer theIndex) const
  {
    return linksConnectedTo(theIndex);
  }


public: 

  
  inline Standard_Integer NbLinks() const
  {
    return myLinks.Extent();
  }

  
  
  
  __declspec( dllexport ) Standard_Integer AddLink(const BRepMesh_Edge& theLink);

  
  
  
  Standard_Integer IndexOf(const BRepMesh_Edge& theLink) const
  {
    return myLinks.FindIndex(theLink);
  }

  
  
  
  const BRepMesh_Edge& GetLink(const Standard_Integer theIndex)
  {
    return myLinks.FindKey(theIndex);
  }

  
  inline const BRepMesh::MapOfInteger& LinksOfDomain() const
  {
    return myLinksOfDomain;
  }

  
  
  
  
  __declspec( dllexport ) Standard_Boolean SubstituteLink(const Standard_Integer theIndex,
                                                  const BRepMesh_Edge&   theNewLink);

  
  
  
  
  
  __declspec( dllexport ) void RemoveLink(const Standard_Integer theIndex,
                                  const Standard_Boolean isForce = false);

  
  
  
  const BRepMesh_PairOfIndex& ElementsConnectedTo(
    const Standard_Integer theLinkIndex) const
  {
    return myLinks.FindFromIndex(theLinkIndex);
  }



public: 

  
  inline Standard_Integer NbElements() const
  {
    return myElements.Extent();
  }

  
  
  
  __declspec( dllexport ) Standard_Integer AddElement(const BRepMesh_Triangle& theElement);

  
  
  
  Standard_Integer IndexOf(const BRepMesh_Triangle& theElement) const
  {
    return myElements.FindIndex(theElement);
  }

  
  
  
  const BRepMesh_Triangle& GetElement(const Standard_Integer theIndex)
  {
    return myElements.FindKey(theIndex);
  }

  
  inline const BRepMesh::MapOfInteger& ElementsOfDomain() const
  {
    return myElementsOfDomain;
  }

  
  
  
  
  __declspec( dllexport ) Standard_Boolean SubstituteElement(const Standard_Integer   theIndex,
                                                     const BRepMesh_Triangle& theNewElement);

  
  
  __declspec( dllexport ) void RemoveElement(const Standard_Integer theIndex);

  
  
  
  __declspec( dllexport ) void ElementNodes(
    const BRepMesh_Triangle& theElement,
    Standard_Integer         (&theNodes)[3]);



public: 

  
  
  __declspec( dllexport ) void Statistics(Standard_OStream& theStream) const;
  
  
  inline const opencascade::handle<NCollection_IncAllocator>& Allocator() const
  {
    return myAllocator;
  }

  
  inline BRepMesh::HVertexTool& Data()
  {
    return myNodes;
  }

  
  __declspec( dllexport ) void ClearDomain();

  
  
  void ClearDeleted()
  {
    clearDeletedLinks();
    clearDeletedNodes();
  }

  public: typedef Standard_Transient base_type; static const char* get_type_name () { return "BRepMesh_DataStructureOfDelaun"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

private: 

  
  
  
  inline BRepMesh::ListOfInteger& linksConnectedTo(
    const Standard_Integer theIndex) const
  {
    return (BRepMesh::ListOfInteger&)myNodeLinks.Find(theIndex);
  }

  
  
  __declspec( dllexport ) void clearDeletedLinks();

  
  
  __declspec( dllexport ) void clearDeletedNodes();

  
  
  
  
  void cleanLink(const Standard_Integer theIndex,
                 const BRepMesh_Edge&   theLink);

  
  
  
  
  void cleanElement(const Standard_Integer   theIndex,
                    const BRepMesh_Triangle& theElement);

  
  
  
  void removeElementIndex(const Standard_Integer theIndex,
                          BRepMesh_PairOfIndex&  thePair);


private:

  opencascade::handle<NCollection_IncAllocator>      myAllocator;
  BRepMesh::HVertexTool                 myNodes;
  BRepMesh::DMapOfIntegerListOfInteger  myNodeLinks;
  BRepMesh::IDMapOfLink                 myLinks;
  BRepMesh::ListOfInteger               myDelLinks;
  BRepMesh::IMapOfElement               myElements;
  BRepMesh::MapOfInteger                myElementsOfDomain;
  BRepMesh::MapOfInteger                myLinksOfDomain;
};

class BRepMesh_DataStructureOfDelaun; class Handle_BRepMesh_DataStructureOfDelaun : public opencascade::handle<BRepMesh_DataStructureOfDelaun> { public: Handle_BRepMesh_DataStructureOfDelaun() {} Handle_BRepMesh_DataStructureOfDelaun(opencascade::handle<BRepMesh_DataStructureOfDelaun>&& theHandle) : opencascade::handle<BRepMesh_DataStructureOfDelaun>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BRepMesh_DataStructureOfDelaun,T2>::value>::type> inline Handle_BRepMesh_DataStructureOfDelaun(const opencascade::handle<T2>& theOther) : opencascade::handle<BRepMesh_DataStructureOfDelaun>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BRepMesh_DataStructureOfDelaun,T2>::value>::type> inline Handle_BRepMesh_DataStructureOfDelaun(const T2* theOther) : opencascade::handle<BRepMesh_DataStructureOfDelaun>(theOther) {} template<typename T> inline Handle_BRepMesh_DataStructureOfDelaun& operator=(T theOther) { opencascade::handle<BRepMesh_DataStructureOfDelaun>::operator=(theOther); return *this; } };











































typedef NCollection_DefaultHasher<Standard_Integer> TColStd_MapIntegerHasher;






typedef NCollection_IndexedMap<Standard_Integer,TColStd_MapIntegerHasher> TColStd_IndexedMapOfInteger;
























enum BRepMesh_Status
{
  BRepMesh_NoError              = 0x0,
  BRepMesh_OpenWire             = 0x1,
  BRepMesh_SelfIntersectingWire = 0x2,
  BRepMesh_Failure              = 0x4,
  BRepMesh_ReMesh               = 0x8
};




























typedef NCollection_DataMap<TopoDS_Shape,Standard_Real,TopTools_ShapeMapHasher> TopTools_DataMapOfShapeReal;
typedef NCollection_DataMap<TopoDS_Shape,Standard_Real,TopTools_ShapeMapHasher>::Iterator TopTools_DataMapIteratorOfDataMapOfShapeReal;



























typedef NCollection_List<TopoDS_Shape> TopTools_ListOfShape;
typedef NCollection_List<TopoDS_Shape>::Iterator TopTools_ListIteratorOfListOfShape;



























class Standard_Mutex;
class TopoDS_Shape;



class TopTools_MutexForShapeProvider
{
public:
  
  __declspec( dllexport ) TopTools_MutexForShapeProvider();

  
  __declspec( dllexport ) ~TopTools_MutexForShapeProvider();

  
  __declspec( dllexport ) void CreateMutexesForSubShapes(const TopoDS_Shape& theShape, const TopAbs_ShapeEnum theType);

  
  __declspec( dllexport ) void CreateMutexForShape(const TopoDS_Shape& theShape);

  
  
  __declspec( dllexport ) Standard_Mutex* GetMutex(const TopoDS_Shape& theShape) const;

  
  __declspec( dllexport ) void RemoveAllMutexes();

private:
  
  TopTools_MutexForShapeProvider (const TopTools_MutexForShapeProvider &);
  
  TopTools_MutexForShapeProvider & operator = (const TopTools_MutexForShapeProvider &);


  NCollection_DataMap<opencascade::handle<TopoDS_TShape>, Standard_Mutex *> myMap;

};












































































class BRepMesh_CircleInspector : public NCollection_CellFilter_InspectorXY
{
public:
  typedef Standard_Integer Target;

  
  
  
  
  BRepMesh_CircleInspector(
    const Standard_Real                     theTolerance,
    const Standard_Integer                  theReservedSize,
    const opencascade::handle<NCollection_IncAllocator>& theAllocator)
  : myTolerance(theTolerance*theTolerance),
    myResIndices(theAllocator),
    myCircles(theReservedSize)
  {
  }

  
  
  
  inline void Bind(const Standard_Integer theIndex,
                   const BRepMesh_Circle& theCircle)
  {
    myCircles.SetValue(theIndex, theCircle);
  }

  
  inline const BRepMesh::VectorOfCircle& Circles() const
  {
    return myCircles; 
  }

  
  
  
  inline BRepMesh_Circle& Circle(const Standard_Integer theIndex)
  {
    return myCircles(theIndex);
  }

  
  
  inline void SetPoint(const gp_XY& thePoint)
  {
    myResIndices.Clear();
    myPoint = thePoint;
  }

  
  inline BRepMesh::ListOfInteger& GetShotCircles()
  {
    return myResIndices;
  }

  
  
  
  __declspec( dllexport ) NCollection_CellFilter_Action Inspect(
    const Standard_Integer theTargetIndex);

  
  static Standard_Boolean IsEqual(
    const Standard_Integer theIndex,
    const Standard_Integer theTargetIndex)
  {
    return (theIndex == theTargetIndex);
  }

private:
  Standard_Real            myTolerance;
  BRepMesh::ListOfInteger  myResIndices;
  BRepMesh::VectorOfCircle myCircles;
  gp_XY                    myPoint;
};










class gp_Circ2d;


class BRepMesh_CircleTool
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }
  
  
  
  __declspec( dllexport ) BRepMesh_CircleTool(
  const opencascade::handle<NCollection_IncAllocator>& theAllocator);

  
  
  
  __declspec( dllexport ) BRepMesh_CircleTool(
    const Standard_Integer                  theReservedSize,
    const opencascade::handle<NCollection_IncAllocator>& theAllocator);

  
  
  inline void Init(const Standard_Integer )
  {
    myTolerance = Precision::PConfusion() * Precision::PConfusion();
  }

  
  
  inline void SetCellSize(const Standard_Real theSize)
  {
    myCellFilter.Reset(theSize, myAllocator);
  }

  
  
  
  inline void SetCellSize(const Standard_Real theSizeX,
                          const Standard_Real theSizeY)
  {
    Standard_Real aCellSizeC[2] = { theSizeX, theSizeY };
    NCollection_Array1<Standard_Real> aCellSize(aCellSizeC[0], 1, 2);
    myCellFilter.Reset(aCellSize, myAllocator);
  }

  
  
  
  inline void SetMinMaxSize(const gp_XY& theMin,
                            const gp_XY& theMax)
  {
    myFaceMin = theMin;
    myFaceMax = theMax;
  }

  
  
  
  __declspec( dllexport ) void Bind(const Standard_Integer theIndex,
                            const gp_Circ2d&       theCircle);

  
  
  
  
  
  
  
  
  __declspec( dllexport ) static Standard_Boolean MakeCircle(const gp_XY&   thePoint1,
                                                     const gp_XY&   thePoint2,
                                                     const gp_XY&   thePoint3,
                                                     gp_XY&         theLocation,
                                                     Standard_Real& theRadius);

  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Boolean Bind(const Standard_Integer theIndex,
                                        const gp_XY&           thePoint1,
                                        const gp_XY&           thePoint2,
                                        const gp_XY&           thePoint3);

  
  
  __declspec( dllexport ) void MocBind(const Standard_Integer theIndex);

  
  
  __declspec( dllexport ) void Delete(const Standard_Integer theIndex);

  
  
  __declspec( dllexport ) BRepMesh::ListOfInteger& Select(const gp_XY& thePoint);

private:

  
  
  
  
  void bind(const Standard_Integer theIndex,
            const gp_XY&           theLocation,
            const Standard_Real    theRadius);

private:

  Standard_Real                     myTolerance;
  opencascade::handle<NCollection_IncAllocator>  myAllocator;
  BRepMesh::CircleCellFilter        myCellFilter;
  BRepMesh_CircleInspector          mySelector;
  gp_XY                             myFaceMax;
  gp_XY                             myFaceMin;
};






































































typedef NCollection_Sequence<gp_Pnt> TColgp_SequenceOfPnt;

























typedef NCollection_Sequence<Standard_Real> TColStd_SequenceOfReal;





















































class gp_Pnt;
class gp_Dir;
class gp_Ax2;
class gp_Trsf;
class gp_Vec;














class gp_Ax1 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
    gp_Ax1();
  

  
    gp_Ax1(const gp_Pnt& P, const gp_Dir& V);
  
  
    void SetDirection (const gp_Dir& V);
  
  
    void SetLocation (const gp_Pnt& P);
  
  
    const gp_Dir& Direction() const;
  
  
    const gp_Pnt& Location() const;
  

  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Boolean IsCoaxial (const gp_Ax1& Other, const Standard_Real AngularTolerance, const Standard_Real LinearTolerance) const;
  

  
  
  
  
    Standard_Boolean IsNormal (const gp_Ax1& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
  
    Standard_Boolean IsOpposite (const gp_Ax1& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
  
  
    Standard_Boolean IsParallel (const gp_Ax1& Other, const Standard_Real AngularTolerance) const;
  

  
  
  
    Standard_Real Angle (const gp_Ax1& Other) const;
  
  
  
    void Reverse();
  
  
    gp_Ax1 Reversed() const;
  

  
  
  
  __declspec( dllexport ) void Mirror (const gp_Pnt& P);
  
  
  
  
  __declspec( dllexport ) gp_Ax1 Mirrored (const gp_Pnt& P) const;
  

  
  
  
  __declspec( dllexport ) void Mirror (const gp_Ax1& A1);
  

  
  
  
  __declspec( dllexport ) gp_Ax1 Mirrored (const gp_Ax1& A1) const;
  

  
  
  
  
  __declspec( dllexport ) void Mirror (const gp_Ax2& A2);
  

  
  
  
  
  __declspec( dllexport ) gp_Ax1 Mirrored (const gp_Ax2& A2) const;
  
  
  
    void Rotate (const gp_Ax1& A1, const Standard_Real Ang);
  
  
  
    gp_Ax1 Rotated (const gp_Ax1& A1, const Standard_Real Ang) const;
  

  
  
  
    void Scale (const gp_Pnt& P, const Standard_Real S);
  

  
  
  
    gp_Ax1 Scaled (const gp_Pnt& P, const Standard_Real S) const;
  
  
  
    void Transform (const gp_Trsf& T);
  

  
  
  
  
    gp_Ax1 Transformed (const gp_Trsf& T) const;
  

  
  
    void Translate (const gp_Vec& V);
  

  
  
    gp_Ax1 Translated (const gp_Vec& V) const;
  

  
  
  
    void Translate (const gp_Pnt& P1, const gp_Pnt& P2);
  

  
  
  
    gp_Ax1 Translated (const gp_Pnt& P1, const gp_Pnt& P2) const;




protected:





private:



  gp_Pnt loc;
  gp_Dir vdir;


};



















inline gp_Ax1::gp_Ax1() : loc(0.,0.,0.), vdir(0.,0.,1.)
{ }

inline gp_Ax1::gp_Ax1 (const gp_Pnt& P,
		       const gp_Dir& V) :  loc(P), vdir(V)
{ }

inline void gp_Ax1::SetDirection (const gp_Dir& V)
{ vdir = V; }

inline void gp_Ax1::SetLocation (const gp_Pnt& P)
{ loc = P; }

inline const gp_Dir& gp_Ax1::Direction () const
{ return vdir; }

inline const gp_Pnt& gp_Ax1::Location () const
{ return loc; }

inline Standard_Boolean gp_Ax1::IsNormal
(const gp_Ax1& Other,
 const Standard_Real AngularTolerance) const
{ return vdir.IsNormal(Other.vdir, AngularTolerance); }

inline Standard_Boolean gp_Ax1::IsOpposite
(const gp_Ax1& Other,
 const Standard_Real AngularTolerance) const
{ return vdir.IsOpposite(Other.vdir, AngularTolerance); }

inline Standard_Boolean gp_Ax1::IsParallel
(const gp_Ax1& Other,
 const Standard_Real AngularTolerance) const
{ return vdir.IsParallel(Other.vdir, AngularTolerance); }

inline Standard_Real gp_Ax1::Angle (const gp_Ax1& Other) const
{ return vdir.Angle (Other.vdir); }

inline void gp_Ax1::Reverse ()
{ vdir.Reverse(); }

inline gp_Ax1 gp_Ax1::Reversed () const
{ 
  gp_Dir D = vdir.Reversed();   
  return gp_Ax1(loc, D);
}

inline void gp_Ax1::Rotate (const gp_Ax1& A1, const Standard_Real Ang)
{
  loc.Rotate(A1, Ang);
  vdir.Rotate(A1 , Ang);
}
 
inline gp_Ax1 gp_Ax1::Rotated (const gp_Ax1& A1,
			const Standard_Real Ang) const
{
  gp_Ax1 A = *this;
  A.Rotate (A1, Ang);
  return A;
}

inline void gp_Ax1::Scale (const gp_Pnt& P,
		    const Standard_Real S)
{
  loc.Scale (P, S);
  if (S < 0.0)  vdir.Reverse();
}

inline gp_Ax1 gp_Ax1::Scaled (const gp_Pnt& P,
		       const Standard_Real S) const
{
  gp_Ax1 A1 = *this;
  A1.Scale (P, S);
  return A1;
}

inline void gp_Ax1::Transform (const gp_Trsf& T)
{ 
   loc.Transform(T); 
   vdir.Transform(T);
}

inline gp_Ax1 gp_Ax1::Transformed (const gp_Trsf& T) const
{
  gp_Ax1 A1 = *this;
  A1.Transform (T);
  return A1;
}

inline void gp_Ax1::Translate (const gp_Vec& V)
{ loc.Translate (V); }

inline gp_Ax1 gp_Ax1::Translated (const gp_Vec& V) const
{
  gp_Ax1 A1 = *this;
  (A1.loc).Translate (V); 
  return A1;
}

inline void gp_Ax1::Translate (const gp_Pnt& P1,
			       const gp_Pnt& P2)
{
  loc.Translate (P1, P2);
}

inline gp_Ax1 gp_Ax1::Translated (const gp_Pnt& P1,
			   const gp_Pnt& P2) const
{
  gp_Ax1 A1 = *this;
  (A1.loc).Translate (P1, P2);
  return A1;
}











class Standard_ConstructionError;
class gp_Ax1;
class gp_Pnt;
class gp_Dir;
class gp_Ax2;
class gp_Trsf;
class gp_Vec;

















class gp_Lin 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
    gp_Lin();
  
  
    gp_Lin(const gp_Ax1& A1);
  
  
  
  
  gp_Lin(const gp_Pnt& P, const gp_Dir& V);

    void Reverse();
  
  
  
  
  
    gp_Lin Reversed() const;
  
  
    void SetDirection (const gp_Dir& V);
  
  
    void SetLocation (const gp_Pnt& P);
  

  
  
  
    void SetPosition (const gp_Ax1& A1);
  
  
    const gp_Dir& Direction() const;
  

  
    const gp_Pnt& Location() const;
  

  
  
    const gp_Ax1& Position() const;
  
  
    Standard_Real Angle (const gp_Lin& Other) const;
  
  
  
  
    Standard_Boolean Contains (const gp_Pnt& P, const Standard_Real LinearTolerance) const;
  
  
    Standard_Real Distance (const gp_Pnt& P) const;
  
  
  __declspec( dllexport ) Standard_Real Distance (const gp_Lin& Other) const;
  

  
    Standard_Real SquareDistance (const gp_Pnt& P) const;
  
  
    Standard_Real SquareDistance (const gp_Lin& Other) const;
  

  
  
  
  
  
    gp_Lin Normal (const gp_Pnt& P) const;
  
  __declspec( dllexport ) void Mirror (const gp_Pnt& P);
  

  
  
  
  __declspec( dllexport ) gp_Lin Mirrored (const gp_Pnt& P) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax1& A1);
  

  
  
  
  __declspec( dllexport ) gp_Lin Mirrored (const gp_Ax1& A1) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax2& A2);
  

  
  
  
  
  __declspec( dllexport ) gp_Lin Mirrored (const gp_Ax2& A2) const;
  
    void Rotate (const gp_Ax1& A1, const Standard_Real Ang);
  

  
  
    gp_Lin Rotated (const gp_Ax1& A1, const Standard_Real Ang) const;
  
    void Scale (const gp_Pnt& P, const Standard_Real S);
  

  
  
  
    gp_Lin Scaled (const gp_Pnt& P, const Standard_Real S) const;
  
    void Transform (const gp_Trsf& T);
  

  
    gp_Lin Transformed (const gp_Trsf& T) const;
  
    void Translate (const gp_Vec& V);
  

  
  
    gp_Lin Translated (const gp_Vec& V) const;
  
    void Translate (const gp_Pnt& P1, const gp_Pnt& P2);
  

  
    gp_Lin Translated (const gp_Pnt& P1, const gp_Pnt& P2) const;




protected:





private:



  gp_Ax1 pos;


};



















inline gp_Lin::gp_Lin ()
{ }

inline gp_Lin::gp_Lin (const gp_Ax1& A1) : pos (A1)
{ }

inline gp_Lin::gp_Lin (const gp_Pnt& P,
		       const gp_Dir& V) : pos (P, V)
{ }

inline void gp_Lin::Reverse()
{ pos.Reverse(); }

inline gp_Lin gp_Lin::Reversed() const { 
  gp_Lin L = *this;
  L.pos.Reverse();
  return L;
}

inline void gp_Lin::SetDirection (const gp_Dir& V)
{ pos.SetDirection(V); }

inline void gp_Lin::SetLocation (const gp_Pnt& P)
{ pos.SetLocation(P); }

inline void gp_Lin::SetPosition (const gp_Ax1& A1)
{ pos = A1; }

inline const gp_Dir& gp_Lin::Direction() const
{ return pos.Direction(); }

inline const gp_Pnt& gp_Lin::Location()  const
{ return pos.Location(); }

inline    const gp_Ax1& gp_Lin::Position() const
{ return pos; }

inline Standard_Real gp_Lin::Angle (const gp_Lin& Other) const
{ return pos.Direction().Angle (Other.pos.Direction()); }

inline Standard_Boolean gp_Lin::Contains
(const gp_Pnt& P,
 const Standard_Real LinearTolerance) const
{ return Distance(P) <= LinearTolerance; }

inline Standard_Real gp_Lin::Distance (const gp_Pnt& P) const {
  gp_XYZ Coord = P.XYZ();
  Coord.Subtract ((pos.Location()).XYZ());
  Coord.Cross ((pos.Direction()).XYZ());
  return Coord.Modulus();
}

inline Standard_Real gp_Lin::SquareDistance (const gp_Pnt& P) const
{
  const gp_Pnt& Loc = pos.Location();
  gp_Vec V (P.X() - Loc.X(),
	    P.Y() - Loc.Y(),
	    P.Z() - Loc.Z());
  V.Cross (pos.Direction());
  return V.SquareMagnitude ();                                          
}

inline Standard_Real gp_Lin::SquareDistance (const gp_Lin& Other) const
{
  Standard_Real D = Distance (Other);
  return D * D;
}

inline gp_Lin gp_Lin::Normal (const gp_Pnt& P) const
{
  const gp_Pnt& Loc = pos.Location();
  gp_Dir V (P.X() - Loc.X(),
	    P.Y() - Loc.Y(),
	    P.Z() - Loc.Z());
  V = pos.Direction().CrossCrossed(V, pos.Direction());
  return gp_Lin (P, V);
}

inline void gp_Lin::Rotate (const gp_Ax1& A1,
			    const Standard_Real Ang)
{ pos.Rotate(A1, Ang); }

inline gp_Lin gp_Lin::Rotated (const gp_Ax1& A1,
			       const Standard_Real Ang) const
{
  gp_Lin L = *this;
  L.pos.Rotate (A1, Ang);
  return L;
}

inline void gp_Lin::Scale (const gp_Pnt& P,
			   const Standard_Real S)
{ pos.Scale(P, S); }

inline gp_Lin gp_Lin::Scaled (const gp_Pnt& P,
			      const Standard_Real S) const
{
  gp_Lin L = *this;
  L.pos.Scale (P, S);
  return L;
}

inline void gp_Lin::Transform (const gp_Trsf& T)
{ pos.Transform(T); }

inline gp_Lin gp_Lin::Transformed (const gp_Trsf& T) const
{
  gp_Lin L = *this;
  L.pos.Transform (T);
  return L;
}

inline void gp_Lin::Translate (const gp_Vec& V)
{ pos.Translate(V); }

inline gp_Lin gp_Lin::Translated (const gp_Vec& V) const
{
  gp_Lin L = *this;
  L.pos.Translate (V); 
  return L;
}

inline void gp_Lin::Translate (const gp_Pnt& P1,
			       const gp_Pnt& P2)
{pos.Translate (P1, P2);}

inline gp_Lin gp_Lin::Translated (const gp_Pnt& P1,
				  const gp_Pnt& P2) const
{
  gp_Lin L = *this;
  L.pos.Translate (gp_Vec(P1, P2));
  return L;
}








































class math_Function 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  virtual ~math_Function () {}
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean Value (const Standard_Real X, Standard_Real& F) = 0;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Integer GetStateNumber();
};






































































static const Standard_Integer aLengthOfBuf = 512;

template<class T> class math_SingleTab
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  math_SingleTab(const Standard_Integer LowerIndex, const Standard_Integer UpperIndex) :
      Addr(Buf),
      isAllocated(UpperIndex - LowerIndex + 1 > aLengthOfBuf),
      First(LowerIndex), Last(UpperIndex)
  {
    T* TheAddr = !isAllocated? Buf :
      (T*) Standard::Allocate((Last-First+1) * sizeof(T));
    Addr = (Standard_Address) (TheAddr - First);
  }

  math_SingleTab(const Standard_Address Tab, const Standard_Integer LowerIndex, const Standard_Integer UpperIndex) :
      Addr((void*)((const T*)Tab - LowerIndex)), 
      isAllocated(false),
      First(LowerIndex), Last(UpperIndex)
  {
  }

  void Init(const T InitValue)
  {
    for(Standard_Integer i = First; i<= Last; i++)
    {
      ((T*)Addr)[i] = InitValue;
    }
  }

  math_SingleTab(const math_SingleTab& Other) :
      isAllocated(Other.Last - Other.First + 1 > aLengthOfBuf),
      First(Other.First),
      Last(Other.Last)
  {
    T* TheAddr = !isAllocated? Buf : (T*) Standard::Allocate((Last-First+1) * sizeof(T));
    Addr = (Standard_Address) (TheAddr - First);
    T* TheOtherAddr = (T*) Other.Addr;
    memmove((void*) TheAddr, (const void*) (TheOtherAddr + First), (size_t)(Last - First + 1) * sizeof(T));
  }

  inline void Copy(math_SingleTab& Other) const
  {
    memmove((void*) (((T*)Other.Addr) + Other.First),
      (const void*) (((T*)Addr) + First),
      (size_t)(Last - First + 1) * sizeof(T));
  }

  void SetLower(const Standard_Integer LowerIndex)
  {
    T* TheAddr = (T*) Addr;
    Addr = (Standard_Address) (TheAddr + First - LowerIndex);
    Last = Last - First + LowerIndex;
    First = LowerIndex;
  }

  inline T& Value(const Standard_Integer Index) const
  {
    return ((T*)Addr)[Index];
  }

  T& operator()(const Standard_Integer Index) const
  {
    return Value(Index);
  }
  
  void Free()
  {
    if(isAllocated)
    {
      Standard_Address it = (Standard_Address)&((T*)Addr)[First];
      Standard::Free(it);
      Addr = 0;
    }
  }

  ~math_SingleTab()
  {
    Free();
  }

private:
  
  Standard_Address Addr;
  T Buf[aLengthOfBuf];
  Standard_Boolean isAllocated;
  Standard_Integer First;
  Standard_Integer Last;
};






class Standard_DimensionError;
class Standard_DivideByZero;
class Standard_RangeError;
class Standard_NullValue;
class math_Matrix;





























class math_Vector
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  __declspec( dllexport ) math_Vector(const Standard_Integer theLower, const Standard_Integer theUpper);

  
  
  __declspec( dllexport ) math_Vector(const Standard_Integer theLower, const Standard_Integer theUpper, const Standard_Real theInitialValue);

  
  
  __declspec( dllexport ) math_Vector(const Standard_Address theTab, const Standard_Integer theLower, const Standard_Integer theUpper);

  
  __declspec( dllexport ) math_Vector(const gp_XY& Other);
  
  
  __declspec( dllexport ) math_Vector(const gp_XYZ& Other);

  
  __declspec( dllexport ) void Init(const Standard_Real theInitialValue);

  
  
  __declspec( dllexport ) math_Vector(const math_Vector& theOther);

  
  inline Standard_Integer Length() const
  {
    return UpperIndex - LowerIndex +1;
  }

  
  inline Standard_Integer Lower() const
  {
    return LowerIndex;
  }

  
  inline Standard_Integer Upper() const
  {
    return UpperIndex;
  }

  
  __declspec( dllexport ) Standard_Real Norm() const;

  
  __declspec( dllexport ) Standard_Real Norm2() const;

  
  __declspec( dllexport ) Standard_Integer Max() const;

  
  __declspec( dllexport ) Standard_Integer Min() const;

  
  
  
  
  
  __declspec( dllexport ) void Normalize();

  
  
  
  
  
  __declspec( dllexport ) math_Vector Normalized() const;

  
  __declspec( dllexport ) void Invert();

  
  __declspec( dllexport ) math_Vector Inverse() const;

  
  
  
  __declspec( dllexport ) void Set(const Standard_Integer theI1, const Standard_Integer theI2, const math_Vector& theV);

  
  
  
  
  
  __declspec( dllexport ) math_Vector Slice(const Standard_Integer theI1, const Standard_Integer theI2) const;

  
  __declspec( dllexport ) void Multiply(const Standard_Real theRight);

  void operator *=(const Standard_Real theRight)
  {
    Multiply(theRight);
  }

  
  __declspec( dllexport ) math_Vector Multiplied(const Standard_Real theRight) const;

  math_Vector operator*(const Standard_Real theRight) const
  {
    return Multiplied(theRight);
  }

  
  __declspec( dllexport ) math_Vector TMultiplied(const Standard_Real theRight) const;

  friend inline math_Vector operator* (const Standard_Real theLeft, const math_Vector& theRight) 
  {
    return theRight.Multiplied(theLeft);
  }

  
  
  __declspec( dllexport ) void Divide(const Standard_Real theRight);

  void operator /=(const Standard_Real theRight) 
  {
    Divide(theRight);
  }

  
  
  __declspec( dllexport ) math_Vector Divided(const Standard_Real theRight) const;

  math_Vector operator/(const Standard_Real theRight) const
  {
    return Divided(theRight);
  }

  
  
  
  
  
  __declspec( dllexport ) void Add(const math_Vector& theRight);

  void operator +=(const math_Vector& theRight) 
  {
    Add(theRight);
  }

  
  
  
  __declspec( dllexport ) math_Vector Added(const math_Vector& theRight) const;

  math_Vector operator+(const math_Vector& theRight) const
  {
    return Added(theRight);
  }

  
  
  __declspec( dllexport ) void Multiply(const math_Vector& theLeft, const math_Matrix& theRight);

  
  
  __declspec( dllexport ) void Multiply(const math_Matrix& theLeft, const math_Vector& theRight);

  
  
  __declspec( dllexport ) void TMultiply(const math_Matrix& theTLeft, const math_Vector& theRight);

  
  
  __declspec( dllexport ) void TMultiply(const math_Vector& theLeft, const math_Matrix& theTRight);

  
  
  
  __declspec( dllexport ) void Add(const math_Vector& theLeft, const math_Vector& theRight);

  
  
  
  
  
  
  
  __declspec( dllexport ) void Subtract(const math_Vector& theLeft,const math_Vector& theRight);

  
  inline Standard_Real& Value(const Standard_Integer theNum) const
  {
    if (theNum < LowerIndex || theNum > UpperIndex) Standard_RangeError::Raise(" ");;
    return Array(theNum);
  }

  Standard_Real& operator()(const Standard_Integer theNum) const
  {
    return Value(theNum);
  }

  
  
  __declspec( dllexport ) math_Vector& Initialized(const math_Vector& theOther);

  math_Vector& operator=(const math_Vector& theOther)
  {
    return Initialized(theOther);
  }

  
  
  __declspec( dllexport ) Standard_Real Multiplied(const math_Vector& theRight) const;
  Standard_Real operator*(const math_Vector& theRight) const
  {
    return Multiplied(theRight);
  }

  
  __declspec( dllexport ) math_Vector Multiplied(const math_Matrix& theRight) const;

  math_Vector operator*(const math_Matrix& theRight) const
  {
    return Multiplied(theRight);
  }

  
  __declspec( dllexport ) math_Vector Opposite();

  math_Vector operator-()
  {
    return Opposite();
  }

  
  
  __declspec( dllexport ) void Subtract(const math_Vector& theRight);

  void operator-=(const math_Vector& theRight)
  {
    Subtract(theRight);
  }

  
  
  __declspec( dllexport ) math_Vector Subtracted(const math_Vector& theRight) const;

  math_Vector operator-(const math_Vector& theRight) const
  {
    return Subtracted(theRight);
  }

  
  
  __declspec( dllexport ) void Multiply(const Standard_Real theLeft,const math_Vector& theRight);

  
  
  __declspec( dllexport ) void Dump(Standard_OStream& theO) const;

  friend inline Standard_OStream& operator<<(Standard_OStream& theO, const math_Vector& theVec)
  {
    theVec.Dump(theO);
    return theO;
  }

  friend class math_Matrix;

protected:

  
  void SetLower(const Standard_Integer theLower);

private:

  Standard_Integer LowerIndex;
  Standard_Integer UpperIndex;
  math_SingleTab<Standard_Real> Array;
};








class math_MultipleVarFunction 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  

  
  __declspec( dllexport ) virtual Standard_Integer NbVariables() const = 0;
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean Value (const math_Vector& X, Standard_Real& F) = 0;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Integer GetStateNumber();
  __declspec( dllexport ) virtual ~math_MultipleVarFunction();




protected:





private:





};


















































































enum GeomAbs_Shape
{
GeomAbs_C0,
GeomAbs_G1,
GeomAbs_C1,
GeomAbs_G2,
GeomAbs_C2,
GeomAbs_C3,
GeomAbs_CN
};

























typedef NCollection_Array1<Standard_Real> TColStd_Array1OfReal;



























enum GeomAbs_CurveType
{
GeomAbs_Line,
GeomAbs_Circle,
GeomAbs_Ellipse,
GeomAbs_Hyperbola,
GeomAbs_Parabola,
GeomAbs_BezierCurve,
GeomAbs_BSplineCurve,
GeomAbs_OffsetCurve,
GeomAbs_OtherCurve
};



class Standard_OutOfRange;
class Standard_NoSuchObject;
class Standard_DomainError;
class Adaptor3d_HCurve;
class gp_Pnt;
class gp_Vec;
class gp_Lin;
class gp_Circ;
class gp_Elips;
class gp_Hypr;
class gp_Parab;
class Geom_BezierCurve;
class Geom_BSplineCurve;
class Geom_OffsetCurve;















class Adaptor3d_Curve 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  __declspec( dllexport ) virtual Standard_Real FirstParameter() const;
  
  __declspec( dllexport ) virtual Standard_Real LastParameter() const;
  
  __declspec( dllexport ) virtual GeomAbs_Shape Continuity() const;
  
  
  
  __declspec( dllexport ) virtual Standard_Integer NbIntervals (const GeomAbs_Shape S) const;
  
  
  
  
  
  
  __declspec( dllexport ) virtual void Intervals (TColStd_Array1OfReal& T, const GeomAbs_Shape S) const;
  
  
  
  
  
  __declspec( dllexport ) virtual opencascade::handle<Adaptor3d_HCurve> Trim (const Standard_Real First, const Standard_Real Last, const Standard_Real Tol) const;
  
  __declspec( dllexport ) virtual Standard_Boolean IsClosed() const;
  
  __declspec( dllexport ) virtual Standard_Boolean IsPeriodic() const;
  
  __declspec( dllexport ) virtual Standard_Real Period() const;
  
  
  __declspec( dllexport ) virtual gp_Pnt Value (const Standard_Real U) const;
  
  
  __declspec( dllexport ) virtual void D0 (const Standard_Real U, gp_Pnt& P) const;
  
  
  
  
  
  __declspec( dllexport ) virtual void D1 (const Standard_Real U, gp_Pnt& P, gp_Vec& V) const;
  

  
  
  
  
  __declspec( dllexport ) virtual void D2 (const Standard_Real U, gp_Pnt& P, gp_Vec& V1, gp_Vec& V2) const;
  

  
  
  
  
  __declspec( dllexport ) virtual void D3 (const Standard_Real U, gp_Pnt& P, gp_Vec& V1, gp_Vec& V2, gp_Vec& V3) const;
  

  
  
  
  
  
  __declspec( dllexport ) virtual gp_Vec DN (const Standard_Real U, const Standard_Integer N) const;
  
  
  
  __declspec( dllexport ) virtual Standard_Real Resolution (const Standard_Real R3d) const;
  
  
  
  
  __declspec( dllexport ) virtual GeomAbs_CurveType GetType() const;
  
  __declspec( dllexport ) virtual gp_Lin Line() const;
  
  __declspec( dllexport ) virtual gp_Circ Circle() const;
  
  __declspec( dllexport ) virtual gp_Elips Ellipse() const;
  
  __declspec( dllexport ) virtual gp_Hypr Hyperbola() const;
  
  __declspec( dllexport ) virtual gp_Parab Parabola() const;
  
  __declspec( dllexport ) virtual Standard_Integer Degree() const;
  
  __declspec( dllexport ) virtual Standard_Boolean IsRational() const;
  
  __declspec( dllexport ) virtual Standard_Integer NbPoles() const;
  
  __declspec( dllexport ) virtual Standard_Integer NbKnots() const;
  
  __declspec( dllexport ) virtual opencascade::handle<Geom_BezierCurve> Bezier() const;
  
  __declspec( dllexport ) virtual opencascade::handle<Geom_BSplineCurve> BSpline() const;

  __declspec( dllexport ) virtual opencascade::handle<Geom_OffsetCurve> OffsetCurve() const;

  __declspec( dllexport ) virtual ~Adaptor3d_Curve();




protected:





private:





};







































class Standard_OutOfRange;
class Standard_NoSuchObject;
class Standard_DomainError;
class Adaptor2d_HCurve2d;
class gp_Pnt2d;
class gp_Vec2d;
class gp_Lin2d;
class gp_Circ2d;
class gp_Elips2d;
class gp_Hypr2d;
class gp_Parab2d;
class Geom2d_BezierCurve;
class Geom2d_BSplineCurve;













class Adaptor2d_Curve2d 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  __declspec( dllexport ) virtual Standard_Real FirstParameter() const;
  
  __declspec( dllexport ) virtual Standard_Real LastParameter() const;
  
  __declspec( dllexport ) virtual GeomAbs_Shape Continuity() const;
  
  
  
  
  __declspec( dllexport ) virtual Standard_Integer NbIntervals (const GeomAbs_Shape S) const;
  
  
  
  
  
  
  __declspec( dllexport ) virtual void Intervals (TColStd_Array1OfReal& T, const GeomAbs_Shape S) const;
  
  
  
  
  
  __declspec( dllexport ) virtual opencascade::handle<Adaptor2d_HCurve2d> Trim (const Standard_Real First, const Standard_Real Last, const Standard_Real Tol) const;
  
  __declspec( dllexport ) virtual Standard_Boolean IsClosed() const;
  
  __declspec( dllexport ) virtual Standard_Boolean IsPeriodic() const;
  
  __declspec( dllexport ) virtual Standard_Real Period() const;
  
  
  __declspec( dllexport ) virtual gp_Pnt2d Value (const Standard_Real U) const;
  
  
  __declspec( dllexport ) virtual void D0 (const Standard_Real U, gp_Pnt2d& P) const;
  
  
  
  
  
  __declspec( dllexport ) virtual void D1 (const Standard_Real U, gp_Pnt2d& P, gp_Vec2d& V) const;
  

  
  
  
  
  __declspec( dllexport ) virtual void D2 (const Standard_Real U, gp_Pnt2d& P, gp_Vec2d& V1, gp_Vec2d& V2) const;
  

  
  
  
  
  __declspec( dllexport ) virtual void D3 (const Standard_Real U, gp_Pnt2d& P, gp_Vec2d& V1, gp_Vec2d& V2, gp_Vec2d& V3) const;
  

  
  
  
  
  
  __declspec( dllexport ) virtual gp_Vec2d DN (const Standard_Real U, const Standard_Integer N) const;
  
  
  
  __declspec( dllexport ) virtual Standard_Real Resolution (const Standard_Real R3d) const;
  
  
  
  
  __declspec( dllexport ) virtual GeomAbs_CurveType GetType() const;
  
  __declspec( dllexport ) virtual gp_Lin2d Line() const;
  
  __declspec( dllexport ) virtual gp_Circ2d Circle() const;
  
  __declspec( dllexport ) virtual gp_Elips2d Ellipse() const;
  
  __declspec( dllexport ) virtual gp_Hypr2d Hyperbola() const;
  
  __declspec( dllexport ) virtual gp_Parab2d Parabola() const;
  
  __declspec( dllexport ) virtual Standard_Integer Degree() const;
  
  __declspec( dllexport ) virtual Standard_Boolean IsRational() const;
  
  __declspec( dllexport ) virtual Standard_Integer NbPoles() const;
  
  __declspec( dllexport ) virtual Standard_Integer NbKnots() const;
  
  __declspec( dllexport ) virtual Standard_Integer NbSamples() const;
  
  __declspec( dllexport ) virtual opencascade::handle<Geom2d_BezierCurve> Bezier() const;
  
  __declspec( dllexport ) virtual opencascade::handle<Geom2d_BSplineCurve> BSpline() const;
  __declspec( dllexport ) virtual ~Adaptor2d_Curve2d();




protected:





private:





};










class Standard_ConstructionError;
class Standard_OutOfRange;





































class GCPnts_TangentialDeflection 
{
public:


  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  __declspec( dllexport ) GCPnts_TangentialDeflection();
  
  __declspec( dllexport ) GCPnts_TangentialDeflection(const Adaptor3d_Curve& C, const Standard_Real AngularDeflection, const Standard_Real CurvatureDeflection, const Standard_Integer MinimumOfPoints = 2, const Standard_Real UTol = 1.0e-9, const Standard_Real theMinLen = 1.0e-7);
  
  __declspec( dllexport ) GCPnts_TangentialDeflection(const Adaptor3d_Curve& C, const Standard_Real FirstParameter, const Standard_Real LastParameter, const Standard_Real AngularDeflection, const Standard_Real CurvatureDeflection, const Standard_Integer MinimumOfPoints = 2, const Standard_Real UTol = 1.0e-9, const Standard_Real theMinLen = 1.0e-7);
  
  __declspec( dllexport ) GCPnts_TangentialDeflection(const Adaptor2d_Curve2d& C, const Standard_Real AngularDeflection, const Standard_Real CurvatureDeflection, const Standard_Integer MinimumOfPoints = 2, const Standard_Real UTol = 1.0e-9, const Standard_Real theMinLen = 1.0e-7);
  
  __declspec( dllexport ) GCPnts_TangentialDeflection(const Adaptor2d_Curve2d& C, const Standard_Real FirstParameter, const Standard_Real LastParameter, const Standard_Real AngularDeflection, const Standard_Real CurvatureDeflection, const Standard_Integer MinimumOfPoints = 2, const Standard_Real UTol = 1.0e-9, const Standard_Real theMinLen = 1.0e-7);
  
  __declspec( dllexport ) void Initialize (const Adaptor3d_Curve& C, const Standard_Real AngularDeflection, const Standard_Real CurvatureDeflection, const Standard_Integer MinimumOfPoints = 2, const Standard_Real UTol = 1.0e-9, const Standard_Real theMinLen = 1.0e-7);
  
  __declspec( dllexport ) void Initialize (const Adaptor3d_Curve& C, const Standard_Real FirstParameter, const Standard_Real LastParameter, const Standard_Real AngularDeflection, const Standard_Real CurvatureDeflection, const Standard_Integer MinimumOfPoints = 2, const Standard_Real UTol = 1.0e-9, const Standard_Real theMinLen = 1.0e-7);
  
  __declspec( dllexport ) void Initialize (const Adaptor2d_Curve2d& C, const Standard_Real AngularDeflection, const Standard_Real CurvatureDeflection, const Standard_Integer MinimumOfPoints = 2, const Standard_Real UTol = 1.0e-9, const Standard_Real theMinLen = 1.0e-7);
  
  __declspec( dllexport ) void Initialize (const Adaptor2d_Curve2d& C, const Standard_Real FirstParameter, const Standard_Real LastParameter, const Standard_Real AngularDeflection, const Standard_Real CurvatureDeflection, const Standard_Integer MinimumOfPoints = 2, const Standard_Real UTol = 1.0e-9, const Standard_Real theMinLen = 1.0e-7);
  
  
  
  
  __declspec( dllexport ) Standard_Integer AddPoint (const gp_Pnt& thePnt, const Standard_Real theParam, const Standard_Boolean theIsReplace = true);
  
  Standard_Integer NbPoints () const
  {
    return parameters.Length ();
  }
  
  Standard_Real Parameter (const Standard_Integer I) const
  {
    return parameters.Value (I);
  }
  
  gp_Pnt Value (const Standard_Integer I) const
  {
    return points.Value (I);
  }
  
  
  __declspec( dllexport ) static Standard_Real ArcAngularStep (const Standard_Real theRadius, const Standard_Real theLinearDeflection, const Standard_Real theAngularDeflection, const Standard_Real theMinLength);

private:
  
  __declspec( dllexport ) void PerformLinear (const Adaptor3d_Curve& C);
  
  __declspec( dllexport ) void PerformLinear (const Adaptor2d_Curve2d& C);
  
  __declspec( dllexport ) void PerformCircular (const Adaptor3d_Curve& C);
  
  __declspec( dllexport ) void PerformCircular (const Adaptor2d_Curve2d& C);
  
  __declspec( dllexport ) void PerformCurve (const Adaptor3d_Curve& C);
  
  __declspec( dllexport ) void PerformCurve (const Adaptor2d_Curve2d& C);
  
  __declspec( dllexport ) void EvaluateDu (const Adaptor3d_Curve& C, const Standard_Real U, gp_Pnt& P, Standard_Real& Du, Standard_Boolean& NotDone) const;
  
  __declspec( dllexport ) void EvaluateDu (const Adaptor2d_Curve2d& C, const Standard_Real U, gp_Pnt& P, Standard_Real& Du, Standard_Boolean& NotDone) const;

  __declspec( dllexport ) void EstimDefl (const Adaptor3d_Curve& C, const Standard_Real U1, const Standard_Real U2, 
                                  Standard_Real& MaxDefl, Standard_Real& UMax);
  
  __declspec( dllexport ) void EstimDefl (const Adaptor2d_Curve2d& C, const Standard_Real U1, const Standard_Real U2, 
                                  Standard_Real& MaxDefl, Standard_Real& UMax);

private:
  Standard_Real angularDeflection;
  Standard_Real curvatureDeflection;
  Standard_Real uTol;
  Standard_Integer minNbPnts;
  Standard_Real myMinLen;
  Standard_Real lastu;
  Standard_Real firstu;
  TColgp_SequenceOfPnt points;
  TColStd_SequenceOfReal parameters;
};

























enum GeomAbs_IsoType
{
GeomAbs_IsoU,
GeomAbs_IsoV,
GeomAbs_NoneIso
};






































class TopoDS_Edge  : public TopoDS_Shape
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    TopoDS_Edge();




protected:





private:





};
























inline TopoDS_Edge::TopoDS_Edge ()
{
}










class BRepAdaptor_Curve;
class BRepAdaptor_HSurface;
class gp_Pnt;
class gp_Pnt2d;
class gp_Dir;






class BRepMesh_GeomTool
{
public:

  
  enum IntFlag
  {
    NoIntersection,
    Cross,
    EndPointTouch,
    PointOnSegment,
    Glued,
    Same
  };

public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) BRepMesh_GeomTool(const BRepAdaptor_Curve& theCurve,
                                    const Standard_Real      theFirstParam,
                                    const Standard_Real      theLastParam,
                                    const Standard_Real      theLinDeflection,
                                    const Standard_Real      theAngDeflection,
                                    const Standard_Integer   theMinPointsNb = 2,
                                    const Standard_Real      theMinSize = Precision::Confusion());
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) BRepMesh_GeomTool(const opencascade::handle<BRepAdaptor_HSurface>& theSurface,
                                    const GeomAbs_IsoType               theIsoType,
                                    const Standard_Real                 theParamIso,
                                    const Standard_Real                 theFirstParam,
                                    const Standard_Real                 theLastParam,
                                    const Standard_Real                 theLinDeflection,
                                    const Standard_Real                 theAngDeflection,
                                    const Standard_Integer              theMinPointsNb = 2,
                                    const Standard_Real                 theMinSize = Precision::Confusion());

  
  
  
  
  
  
  inline Standard_Integer AddPoint(const gp_Pnt&           thePoint,
                                   const Standard_Real     theParam,
                                   const Standard_Boolean  theIsReplace = true)
  {
    return myDiscretTool.AddPoint(thePoint, theParam, theIsReplace);
  }
  
  
  inline Standard_Integer NbPoints() const
  {
    return myDiscretTool.NbPoints();
  }
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Boolean Value(const Standard_Integer theIndex,
                                         const Standard_Real    theIsoParam,
                                         Standard_Real&         theParam,
                                         gp_Pnt&                thePoint,
                                         gp_Pnt2d&              theUV) const;
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Boolean Value(const Standard_Integer              theIndex,
                                         Standard_Real&                      theParam,
                                         gp_Pnt&                             thePoint) const;
  
public: 

  
  
  
  
  
  
  
  
  __declspec( dllexport ) static Standard_Boolean Normal(
    const opencascade::handle<BRepAdaptor_HSurface>& theSurface,
    const Standard_Real                 theParamU,
    const Standard_Real                 theParamV,
    gp_Pnt&                             thePoint,
    gp_Dir&                             theNormal);

  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) static IntFlag IntLinLin(
    const gp_XY&  theStartPnt1,
    const gp_XY&  theEndPnt1,
    const gp_XY&  theStartPnt2,
    const gp_XY&  theEndPnt2,
    gp_XY&        theIntPnt,
    Standard_Real (&theParamOnSegment)[2]);

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) static IntFlag IntSegSeg(
    const gp_XY&           theStartPnt1,
    const gp_XY&           theEndPnt1,
    const gp_XY&           theStartPnt2,
    const gp_XY&           theEndPnt2,
    const Standard_Boolean isConsiderEndPointTouch,
    const Standard_Boolean isConsiderPointOnSegment,
    gp_Pnt2d&              theIntPnt);

private:

  
  
  
  
  
  
  static Standard_Integer classifyPoint (const gp_XY& thePoint1,
                                         const gp_XY& thePoint2,
                                         const gp_XY& thePointToCheck);

private:

  const TopoDS_Edge*                  myEdge;
  GCPnts_TangentialDeflection         myDiscretTool;
  GeomAbs_IsoType                     myIsoType;
};
























typedef NCollection_Array1<Standard_Integer> TColStd_Array1OfInteger;



























typedef NCollection_Map<Standard_Integer,TColStd_MapIntegerHasher> TColStd_MapOfInteger;
typedef NCollection_Map<Standard_Integer,TColStd_MapIntegerHasher>::Iterator TColStd_MapIteratorOfMapOfInteger;





class Bnd_B2d;
class Bnd_Box2d;
class BRepMesh_Vertex;


class BRepMesh_Delaun
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  __declspec( dllexport ) BRepMesh_Delaun (BRepMesh::Array1OfVertexOfDelaun& theVertices);

  
  __declspec( dllexport ) BRepMesh_Delaun (const opencascade::handle<BRepMesh_DataStructureOfDelaun>& theOldMesh,
                                   BRepMesh::Array1OfVertexOfDelaun&             theVertices);

  
  __declspec( dllexport ) BRepMesh_Delaun (const opencascade::handle<BRepMesh_DataStructureOfDelaun>& theOldMesh,
                                   BRepMesh::Array1OfInteger&                    theVertexIndices);

  
  __declspec( dllexport ) void Init (BRepMesh::Array1OfVertexOfDelaun& theVertices);

  
  __declspec( dllexport ) void RemoveVertex (const BRepMesh_Vertex& theVertex);

  
  __declspec( dllexport ) void AddVertices (BRepMesh::Array1OfVertexOfDelaun& theVertices);

  
  
  __declspec( dllexport ) Standard_Boolean UseEdge (const Standard_Integer theEdge);

  
  inline const opencascade::handle<BRepMesh_DataStructureOfDelaun>& Result() const
  {
    return myMeshData;
  }

  
  inline BRepMesh::HMapOfInteger Frontier() const
  {
    return getEdgesByType (BRepMesh_Frontier);
  }

  
  inline BRepMesh::HMapOfInteger InternalEdges() const
  {
    return getEdgesByType (BRepMesh_Fixed);
  }

  
  inline BRepMesh::HMapOfInteger FreeEdges() const
  {
    return getEdgesByType (BRepMesh_Free);
  }

  
  inline const BRepMesh_Vertex& GetVertex (const Standard_Integer theIndex) const
  {
    return myMeshData->GetNode (theIndex);
  }

  
  inline const BRepMesh_Edge& GetEdge (const Standard_Integer theIndex) const
  {
    return myMeshData->GetLink (theIndex);
  }

  
  inline const BRepMesh_Triangle& GetTriangle (const Standard_Integer theIndex) const
  {
    return myMeshData->GetElement (theIndex);
  }

  
  inline const BRepMesh_CircleTool& Circles() const
  {
    return myCircles;
  }

  
  
  
  
  __declspec( dllexport ) Standard_Boolean Contains (const Standard_Integer theTriangleId,
                                             const BRepMesh_Vertex& theVertex,
                                             const Standard_Real    theSqTolerance,
                                             Standard_Integer&      theEdgeOn) const;

private:

  enum ReplaceFlag
  {
    Replace,
    InsertAfter,
    InsertBefore
  };

  typedef NCollection_DataMap<Standard_Integer, BRepMesh::MapOfInteger> DataMapOfMap;

  
  
  void fillBndBox (BRepMesh::SequenceOfBndB2d&   theBoxes,
                   const BRepMesh_Vertex&        theV1,
                   const BRepMesh_Vertex&        theV2);

  
  
  
  BRepMesh::HMapOfInteger getEdgesByType (const BRepMesh_DegreeOfFreedom theEdgeType) const;

  
  void perform (Bnd_Box2d&                 theBndBox,
                BRepMesh::Array1OfInteger& theVertexIndices);

  
  void superMesh (const Bnd_Box2d& theBox);

  
  
  void compute (BRepMesh::Array1OfInteger& theVertexIndices);

  
  void frontierAdjust();

  
  Standard_Boolean meshLeftPolygonOf(
    const Standard_Integer  theEdgeIndex,
    const Standard_Boolean  isForward,
    BRepMesh::HMapOfInteger theSkipped = 0);

  
  
  
  
  
  Standard_Integer findNextPolygonLink (const Standard_Integer&            theFirstNode,
                                        const Standard_Integer&            thePivotNode,
                                        const BRepMesh_Vertex&             thePivotVertex,
                                        const gp_Vec2d&                    theRefLinkDir,
                                        const BRepMesh::SequenceOfBndB2d&  theBoxes,
                                        const BRepMesh::SequenceOfInteger& thePolygon,
                                        const BRepMesh::HMapOfInteger      theSkipped,
                                        const Standard_Boolean&            isSkipLeprous,
                                        BRepMesh::MapOfInteger&            theLeprousLinks,
                                        BRepMesh::MapOfInteger&            theDeadLinks,
                                        Standard_Integer&                  theNextPivotNode,
                                        gp_Vec2d&                          theNextLinkDir,
                                        Bnd_B2d&                           theNextLinkBndBox);

  
  
  Standard_Boolean checkIntersection (const BRepMesh_Edge&               theLink,
                                      const BRepMesh::SequenceOfInteger& thePolygon,
                                      const BRepMesh::SequenceOfBndB2d&  thePolyBoxes,
                                      const Standard_Boolean             isConsiderEndPointTouch,
                                      const Standard_Boolean             isConsiderPointOnEdge,
                                      const Standard_Boolean             isSkipLastEdge,
                                      Bnd_B2d&                           theLinkBndBox) const;

  
  
  
  void meshPolygon (BRepMesh::SequenceOfInteger& thePolygon,
                    BRepMesh::SequenceOfBndB2d&  thePolyBoxes,
                    BRepMesh::HMapOfInteger      theSkipped = 0);

  
  
  
  
  
  
  
  
  
  void decomposeSimplePolygon (
    BRepMesh::SequenceOfInteger& thePolygon,
    BRepMesh::SequenceOfBndB2d&  thePolyBoxes,
    BRepMesh::SequenceOfInteger& thePolygonCut,
    BRepMesh::SequenceOfBndB2d&  thePolyBoxesCut);

  
  inline Standard_Boolean meshElementaryPolygon (const BRepMesh::SequenceOfInteger& thePolygon);

  
  void createTriangles (const Standard_Integer         theVertexIndex,
                        BRepMesh::MapOfIntegerInteger& thePoly);

  
  void addTriangle (const Standard_Integer (&theEdgesId)[3],
                    const Standard_Boolean (&theEdgesOri)[3],
                    const Standard_Integer (&theNodesId)[3]);

  
  
  void deleteTriangle (const Standard_Integer         theIndex,
                       BRepMesh::MapOfIntegerInteger& theLoopEdges);

  
  void getOrientedNodes (const BRepMesh_Edge&   theEdge,
                         const Standard_Boolean isForward,
                         Standard_Integer*      theNodes) const;

  
  
  void processLoop (const Standard_Integer             theLinkFrom,
                    const Standard_Integer             theLinkTo,
                    const BRepMesh::SequenceOfInteger& thePolygon,
                    const BRepMesh::SequenceOfBndB2d&  thePolyBoxes);

  
  Standard_Integer createAndReplacePolygonLink (const Standard_Integer       theNodes[],
                                                const gp_Pnt2d               thePnts [],
                                                const Standard_Integer       theRootIndex,
                                                const ReplaceFlag            theReplaceFlag,
                                                BRepMesh::SequenceOfInteger& thePolygon,
                                                BRepMesh::SequenceOfBndB2d&  thePolyBoxes);
  
  
  void createTrianglesOnNewVertices (BRepMesh::Array1OfInteger& theVertexIndices);

  
  void cleanupMesh();

  
  
  
  
  
  Standard_Boolean isBoundToFrontier (const Standard_Integer theRefNodeId,
                                      const Standard_Integer theRefLinkId,
                                      const Standard_Integer theStopLinkId,
                                      const Standard_Integer thePrevElementId);

  
  void cleanupPolygon (const BRepMesh::SequenceOfInteger& thePolygon,
                       const BRepMesh::SequenceOfBndB2d&  thePolyBoxes);

  
  Standard_Boolean isVertexInsidePolygon (const Standard_Integer&          theVertexId,
                                          const BRepMesh::VectorOfInteger& thePolygonVertices) const;

  
  void killTrianglesAroundVertex (const Standard_Integer             theZombieNodeId,
                                  const BRepMesh::VectorOfInteger&   thePolyVertices,
                                  const BRepMesh::MapOfInteger&      thePolyVerticesFindMap,
                                  const BRepMesh::SequenceOfInteger& thePolygon,
                                  const BRepMesh::SequenceOfBndB2d&  thePolyBoxes,
                                  BRepMesh::MapOfInteger&            theSurvivedLinks,
                                  BRepMesh::MapOfIntegerInteger&     theLoopEdges);

  
  
  void killTrianglesOnIntersectingLinks (const Standard_Integer&             theLinkToCheckId,
                                         const BRepMesh_Edge&                theLinkToCheck,
                                         const Standard_Integer&             theEndPoint,
                                         const BRepMesh::SequenceOfInteger&  thePolygon,
                                         const BRepMesh::SequenceOfBndB2d&   thePolyBoxes,
                                         BRepMesh::MapOfInteger&             theSurvivedLinks,
                                         BRepMesh::MapOfIntegerInteger&      theLoopEdges);

  
  void killLinkTriangles (const Standard_Integer&        theLinkId,
                          BRepMesh::MapOfIntegerInteger& theLoopEdges);

  
  Standard_Real calculateDist (const gp_XY            theVEdges[3],
                               const gp_XY            thePoints[3],
                               const BRepMesh_Vertex& theVertex,
                               Standard_Real          theDistance[3],
                               Standard_Real          theSqModulus[3],
                               Standard_Integer&      theEdgeOn) const;

  
  BRepMesh_GeomTool::IntFlag intSegSeg(
    const BRepMesh_Edge&   theEdge1,
    const BRepMesh_Edge&   theEdge2,
    const Standard_Boolean isConsiderEndPointTouch,
    const Standard_Boolean isConsiderPointOnEdge,
    gp_Pnt2d&              theIntPnt) const;

  
  Standard_Real polyArea (const BRepMesh::SequenceOfInteger& thePolygon,
                          const Standard_Integer             theStartIndex,
                          const Standard_Integer             theEndIndex) const;

  
  void insertInternalEdges();

private:

  opencascade::handle<BRepMesh_DataStructureOfDelaun> myMeshData;
  BRepMesh_CircleTool                    myCircles;
  Standard_Integer                       mySupVert[3];
  BRepMesh_Triangle                      mySupTrian;

};






























class BRepAdaptor_HSurface;


class BRepMesh_FaceAttribute : public Standard_Transient
{
public:

  
  
  
  __declspec( dllexport ) BRepMesh_FaceAttribute(
    const BRepMesh::HDMapOfVertexInteger& theBoundaryVertices,
    const BRepMesh::HDMapOfIntegerPnt&    theBoundaryPoints);

  
  
  
  
  
  
  
  
  __declspec( dllexport ) BRepMesh_FaceAttribute(
    const TopoDS_Face&                    theFace,
    const BRepMesh::HDMapOfVertexInteger& theBoundaryVertices,
    const BRepMesh::HDMapOfIntegerPnt&    theBoundaryPoints,
    const Standard_Boolean                theAdaptiveMin);

  
  __declspec( dllexport ) virtual ~BRepMesh_FaceAttribute();

public: 

  
  inline const opencascade::handle<BRepAdaptor_HSurface>& Surface() const
  {
    return mySurface;
  }

  
  inline Standard_Boolean IsInitialized () const
  {
    return !myFace.IsNull ();
  }

  
  __declspec( dllexport ) void SetFace (
    const TopoDS_Face&     theFace, 
    const Standard_Boolean theAdaptiveMin);

  
  inline const TopoDS_Face& Face() const
  {
    return myFace;
  }

  
  inline void SetBoundaryVertices(const BRepMesh::HDMapOfVertexInteger& theVertices)
  {
    myBoundaryVertices = theVertices;
  }

  
  inline void SetBoundaryPoints(const BRepMesh::HDMapOfIntegerPnt& theBoundaryPoints)
  {
    myBoundaryPoints = theBoundaryPoints;
  }

  
  __declspec( dllexport ) Standard_Real ToleranceU() const;
  
  
  __declspec( dllexport ) Standard_Real ToleranceV() const;
  
  
  inline Standard_Real GetDefFace() const
  {
    return myDefFace;
  }

  
  inline void SetDefFace(const Standard_Real theDefFace)
  {
    myDefFace = theDefFace;
  }

  
  inline Standard_Real GetUMin() const
  {
    return myUMin;
  }

  
  inline void SetUMin(const Standard_Real theUMin)
  {
    myUMin = theUMin;
  }

  
  inline Standard_Real GetVMin() const
  {
    return myVMin;
  }

  
  inline void SetVMin(const Standard_Real theVMin)
  {
    myVMin = theVMin;
  }

  
  inline Standard_Real GetUMax() const
  {
    return myUMax;
  }

  
  inline void SetUMax(const Standard_Real theUMax)
  {
    myUMax = theUMax;
  }

  
  inline Standard_Real GetVMax() const
  {
    return myVMax;
  }

  
  inline void SetVMax(const Standard_Real theVMax)
  {
    myVMax = theVMax;
  }

  
  inline Standard_Real GetDeltaX() const
  {
    return myDeltaX;
  }

  
  inline void SetDeltaX(const Standard_Real theDeltaX)
  {
    myDeltaX = theDeltaX;
  }

  
  inline Standard_Real GetDeltaY() const
  {
    return myDeltaY;
  }

  
  inline void SetDeltaY(const Standard_Real theDeltaY)
  {
    myDeltaY = theDeltaY;
  }

  
  inline Standard_Integer GetStatus() const
  {
    return myStatus;
  }

  
  inline void SetStatus(const BRepMesh_Status theStatus)
  {
    myStatus |= theStatus;
  }

  
  inline Standard_Boolean IsValid() const
  {
    return (myStatus == BRepMesh_NoError || myStatus == BRepMesh_ReMesh);
  }

public: 

  
  __declspec( dllexport ) void Clear();

  
  inline BRepMesh::HDMapOfShapePairOfPolygon& ChangeInternalEdges()
  {
    return myInternalEdges;
  }

  
  inline BRepMesh::HDMapOfIntegerListOfXY& ChangeLocation2D()
  {
    return myLocation2D;
  }

  
  inline BRepMesh::HDMapOfIntegerPnt& ChangeSurfacePoints()
  {
    return mySurfacePoints;
  }

  
  inline BRepMesh::HDMapOfVertexInteger& ChangeSurfaceVertices()
  {
    return mySurfaceVertices;
  }

  
  inline BRepMesh::HIMapOfInteger& ChangeVertexEdgeMap()
  {
    return myVertexEdgeMap;
  }

  
  inline opencascade::handle<BRepMesh_DataStructureOfDelaun>& ChangeStructure()
  {
    return myStructure;
  }

  
  inline BRepMesh::HClassifier& ChangeClassifier()
  {
    return myClassifier;
  }

  
  inline BRepMesh::HVectorOfVertex& ChangeMeshNodes()
  {
    return myMeshNodes;
  }

public: 

  
  inline Standard_Integer LastPointId() const
  {
    return (myBoundaryPoints.IsNull() ? 0 : myBoundaryPoints->Extent()) + 
      (mySurfacePoints.IsNull() ? 0 : mySurfacePoints->Extent());
  }

  
  inline const gp_Pnt& GetPoint(const BRepMesh_Vertex& theVertex) const
  {
    return GetPoint(theVertex.Location3d());
  }

  
  inline const gp_Pnt& GetPoint(const Standard_Integer theIndex) const
  {
    if (!mySurfacePoints.IsNull() && theIndex > myBoundaryPoints->Extent())
      return mySurfacePoints->Find(theIndex);

    return myBoundaryPoints->Find(theIndex);
  }

  
  
  
  
  
  
  
  template<class HVertexExplorer>
    Standard_Integer GetVertexIndex(
      const HVertexExplorer& theVertexExplorer,
      const Standard_Boolean isFillEdgeVertices = false)
  {
    const TopoDS_Vertex& aVertex = theVertexExplorer->Vertex();
    Standard_Integer aNewVertexIndex = 0;
    if (getVertexIndex(aVertex, aNewVertexIndex))
      return aNewVertexIndex;

    if (!theVertexExplorer->IsSameUV() ||
        !getVertexIndex(theVertexExplorer->SameVertex(), aNewVertexIndex))
    {
      aNewVertexIndex = LastPointId() + 1;

      BRepMesh::DMapOfIntegerPnt& aPointsMap = isFillEdgeVertices ?
        *myBoundaryPoints : *mySurfacePoints;

      aPointsMap.Bind(aNewVertexIndex, theVertexExplorer->Point());
    }

    BRepMesh::DMapOfVertexInteger& aVertexMap = isFillEdgeVertices ?
      *myBoundaryVertices : *mySurfaceVertices;

    aVertexMap.Bind(aVertex, aNewVertexIndex);

    return aNewVertexIndex;
  }

  
  
  
  
  
  
  __declspec( dllexport ) void AddNode(const Standard_Integer         theIndex,
                               const gp_XY&                   theUV,
                               const BRepMesh_DegreeOfFreedom theMovability,
                               Standard_Integer&              theNodeIndex,
                               Standard_Integer&              theNodeOnEdgeIndex);

public: 
  
  
  
  
  
  
  
  __declspec( dllexport ) gp_XY Scale(const gp_XY&           thePoint2d, 
                              const Standard_Boolean isToFaceBasis);

  public: typedef Standard_Transient base_type; static const char* get_type_name () { return "BRepMesh_FaceAttribute"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

private:

  
  BRepMesh_FaceAttribute();

  
  void operator =(const BRepMesh_FaceAttribute& )
  {
  }

  
  void init();

  
  Standard_Real computeParametricTolerance(
    const Standard_Real theFirstParam,
    const Standard_Real theLastParam) const;

  
  void clearLocal(
    const Standard_Boolean isClearSurfaceDataOnly = false);

  
  
  
  
  __declspec( dllexport ) Standard_Boolean getVertexIndex(
    const TopoDS_Vertex& theVertex,
    Standard_Integer&    theVertexIndex) const;

private:

  Standard_Real                           myDefFace;       
  Standard_Real                           myUMin;          
  Standard_Real                           myUMax;          
  Standard_Real                           myVMin;          
  Standard_Real                           myVMax;          
  Standard_Real                           myDeltaX;
  Standard_Real                           myDeltaY;
  Standard_Real                           myMinStep;
  Standard_Integer                        myStatus;
  Standard_Boolean                        myAdaptiveMin;

  BRepMesh::HDMapOfVertexInteger          myBoundaryVertices;
  BRepMesh::HDMapOfIntegerPnt             myBoundaryPoints;

  TopoDS_Face                             myFace;
  opencascade::handle<BRepAdaptor_HSurface>            mySurface;
  BRepMesh::HClassifier                   myClassifier;

  BRepMesh::HDMapOfShapePairOfPolygon     myInternalEdges;

  BRepMesh::HDMapOfIntegerListOfXY        myLocation2D;
  BRepMesh::HIMapOfInteger                myVertexEdgeMap;

  
  
  BRepMesh::HVectorOfVertex               myMeshNodes;

  BRepMesh::HDMapOfVertexInteger          mySurfaceVertices;
  BRepMesh::HDMapOfIntegerPnt             mySurfacePoints;
  opencascade::handle<BRepMesh_DataStructureOfDelaun>  myStructure;
};

class BRepMesh_FaceAttribute; class Handle_BRepMesh_FaceAttribute : public opencascade::handle<BRepMesh_FaceAttribute> { public: Handle_BRepMesh_FaceAttribute() {} Handle_BRepMesh_FaceAttribute(opencascade::handle<BRepMesh_FaceAttribute>&& theHandle) : opencascade::handle<BRepMesh_FaceAttribute>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BRepMesh_FaceAttribute,T2>::value>::type> inline Handle_BRepMesh_FaceAttribute(const opencascade::handle<T2>& theOther) : opencascade::handle<BRepMesh_FaceAttribute>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BRepMesh_FaceAttribute,T2>::value>::type> inline Handle_BRepMesh_FaceAttribute(const T2* theOther) : opencascade::handle<BRepMesh_FaceAttribute>(theOther) {} template<typename T> inline Handle_BRepMesh_FaceAttribute& operator=(T theOther) { opencascade::handle<BRepMesh_FaceAttribute>::operator=(theOther); return *this; } };





































































































class Standard_ConstructionError;
class gp_Pnt;
class gp_Ax1;
class gp_Ax2;
class gp_Vec;
class gp_Trsf;


class Geom_Geometry;
class Geom_Geometry; class Handle_Geom_Geometry : public opencascade::handle<Geom_Geometry> { public: Handle_Geom_Geometry() {} Handle_Geom_Geometry(opencascade::handle<Geom_Geometry>&& theHandle) : opencascade::handle<Geom_Geometry>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Geom_Geometry,T2>::value>::type> inline Handle_Geom_Geometry(const opencascade::handle<T2>& theOther) : opencascade::handle<Geom_Geometry>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Geom_Geometry,T2>::value>::type> inline Handle_Geom_Geometry(const T2* theOther) : opencascade::handle<Geom_Geometry>(theOther) {} template<typename T> inline Handle_Geom_Geometry& operator=(T theOther) { opencascade::handle<Geom_Geometry>::operator=(theOther); return *this; } };


















class Geom_Geometry : public MMgt_TShared
{

public:

  

  
  
  
  __declspec( dllexport ) void Mirror (const gp_Pnt& P);
  

  
  
  
  __declspec( dllexport ) void Mirror (const gp_Ax1& A1);
  

  
  
  
  __declspec( dllexport ) void Mirror (const gp_Ax2& A2);
  

  
  
  __declspec( dllexport ) void Rotate (const gp_Ax1& A1, const Standard_Real Ang);
  

  
  __declspec( dllexport ) void Scale (const gp_Pnt& P, const Standard_Real S);
  

  
  __declspec( dllexport ) void Translate (const gp_Vec& V);
  

  
  __declspec( dllexport ) void Translate (const gp_Pnt& P1, const gp_Pnt& P2);
  

  
  
  
  
  
  __declspec( dllexport ) virtual void Transform (const gp_Trsf& T) = 0;
  
  __declspec( dllexport ) opencascade::handle<Geom_Geometry> Mirrored (const gp_Pnt& P) const;
  
  __declspec( dllexport ) opencascade::handle<Geom_Geometry> Mirrored (const gp_Ax1& A1) const;
  
  __declspec( dllexport ) opencascade::handle<Geom_Geometry> Mirrored (const gp_Ax2& A2) const;
  
  __declspec( dllexport ) opencascade::handle<Geom_Geometry> Rotated (const gp_Ax1& A1, const Standard_Real Ang) const;
  
  __declspec( dllexport ) opencascade::handle<Geom_Geometry> Scaled (const gp_Pnt& P, const Standard_Real S) const;
  
  __declspec( dllexport ) opencascade::handle<Geom_Geometry> Transformed (const gp_Trsf& T) const;
  
  __declspec( dllexport ) opencascade::handle<Geom_Geometry> Translated (const gp_Vec& V) const;
  
  __declspec( dllexport ) opencascade::handle<Geom_Geometry> Translated (const gp_Pnt& P1, const gp_Pnt& P2) const;
  
  
  __declspec( dllexport ) virtual opencascade::handle<Geom_Geometry> Copy() const = 0;




  public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "Geom_Geometry"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:




private:




};













class Standard_RangeError;
class Standard_NoSuchObject;
class Geom_UndefinedDerivative;
class Geom_UndefinedValue;
class gp_Trsf;
class gp_Pnt;
class gp_Vec;


class Geom_Curve;
class Geom_Curve; class Handle_Geom_Curve : public opencascade::handle<Geom_Curve> { public: Handle_Geom_Curve() {} Handle_Geom_Curve(opencascade::handle<Geom_Curve>&& theHandle) : opencascade::handle<Geom_Curve>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Geom_Curve,T2>::value>::type> inline Handle_Geom_Curve(const opencascade::handle<T2>& theOther) : opencascade::handle<Geom_Curve>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Geom_Curve,T2>::value>::type> inline Handle_Geom_Curve(const T2* theOther) : opencascade::handle<Geom_Curve>(theOther) {} template<typename T> inline Handle_Geom_Curve& operator=(T theOther) { opencascade::handle<Geom_Curve>::operator=(theOther); return *this; } };


























class Geom_Curve : public Geom_Geometry
{

public:

  

  
  
  
  
  
  
  __declspec( dllexport ) virtual void Reverse() = 0;
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Real ReversedParameter (const Standard_Real U) const = 0;
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Real TransformedParameter (const Standard_Real U, const gp_Trsf& T) const;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Real ParametricTransformation (const gp_Trsf& T) const;
  
  
  __declspec( dllexport ) opencascade::handle<Geom_Curve> Reversed() const;
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Real FirstParameter() const = 0;
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Real LastParameter() const = 0;
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean IsClosed() const = 0;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean IsPeriodic() const = 0;
  
  
  
  __declspec( dllexport ) virtual Standard_Real Period() const;
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual GeomAbs_Shape Continuity() const = 0;
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean IsCN (const Standard_Integer N) const = 0;
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual void D0 (const Standard_Real U, gp_Pnt& P) const = 0;
  

  
  
  __declspec( dllexport ) virtual void D1 (const Standard_Real U, gp_Pnt& P, gp_Vec& V1) const = 0;
  

  
  
  
  __declspec( dllexport ) virtual void D2 (const Standard_Real U, gp_Pnt& P, gp_Vec& V1, gp_Vec& V2) const = 0;
  

  
  
  
  __declspec( dllexport ) virtual void D3 (const Standard_Real U, gp_Pnt& P, gp_Vec& V1, gp_Vec& V2, gp_Vec& V3) const = 0;
  

  
  
  
  
  
  
  
  __declspec( dllexport ) virtual gp_Vec DN (const Standard_Real U, const Standard_Integer N) const = 0;
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) gp_Pnt Value (const Standard_Real U) const;




  public: typedef Geom_Geometry base_type; static const char* get_type_name () { return "Geom_Curve"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:




private:




};













class Standard_RangeError;
class Standard_NoSuchObject;
class Geom_UndefinedDerivative;
class Geom_UndefinedValue;
class gp_Trsf;
class gp_GTrsf2d;
class gp_Pnt;
class gp_Vec;


class Geom_Surface;
class Geom_Surface; class Handle_Geom_Surface : public opencascade::handle<Geom_Surface> { public: Handle_Geom_Surface() {} Handle_Geom_Surface(opencascade::handle<Geom_Surface>&& theHandle) : opencascade::handle<Geom_Surface>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Geom_Surface,T2>::value>::type> inline Handle_Geom_Surface(const opencascade::handle<T2>& theOther) : opencascade::handle<Geom_Surface>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Geom_Surface,T2>::value>::type> inline Handle_Geom_Surface(const T2* theOther) : opencascade::handle<Geom_Surface>(theOther) {} template<typename T> inline Handle_Geom_Surface& operator=(T theOther) { opencascade::handle<Geom_Surface>::operator=(theOther); return *this; } };



























class Geom_Surface : public Geom_Geometry
{

public:

  

  
  
  __declspec( dllexport ) virtual void UReverse() = 0;
  

  
  
  
  __declspec( dllexport ) opencascade::handle<Geom_Surface> UReversed() const;
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Real UReversedParameter (const Standard_Real U) const = 0;
  

  
  
  __declspec( dllexport ) virtual void VReverse() = 0;
  

  
  
  
  __declspec( dllexport ) opencascade::handle<Geom_Surface> VReversed() const;
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Real VReversedParameter (const Standard_Real V) const = 0;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual void TransformParameters (Standard_Real& U, Standard_Real& V, const gp_Trsf& T) const;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual gp_GTrsf2d ParametricTransformation (const gp_Trsf& T) const;
  
  
  
  
  __declspec( dllexport ) virtual void Bounds (Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2) const = 0;
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean IsUClosed() const = 0;
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean IsVClosed() const = 0;
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean IsUPeriodic() const = 0;
  
  
  
  
  __declspec( dllexport ) virtual Standard_Real UPeriod() const;
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean IsVPeriodic() const = 0;
  
  
  
  __declspec( dllexport ) virtual Standard_Real VPeriod() const;
  
  
  __declspec( dllexport ) virtual opencascade::handle<Geom_Curve> UIso (const Standard_Real U) const = 0;
  
  
  __declspec( dllexport ) virtual opencascade::handle<Geom_Curve> VIso (const Standard_Real V) const = 0;
  

  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual GeomAbs_Shape Continuity() const = 0;
  
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean IsCNu (const Standard_Integer N) const = 0;
  
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean IsCNv (const Standard_Integer N) const = 0;
  
  
  
  
  
  __declspec( dllexport ) virtual void D0 (const Standard_Real U, const Standard_Real V, gp_Pnt& P) const = 0;
  

  
  
  
  __declspec( dllexport ) virtual void D1 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V) const = 0;
  

  
  
  
  __declspec( dllexport ) virtual void D2 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV) const = 0;
  

  
  
  
  __declspec( dllexport ) virtual void D3 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV, gp_Vec& D3U, gp_Vec& D3V, gp_Vec& D3UUV, gp_Vec& D3UVV) const = 0;
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual gp_Vec DN (const Standard_Real U, const Standard_Real V, const Standard_Integer Nu, const Standard_Integer Nv) const = 0;
  

  
  
  
  
  
  
  __declspec( dllexport ) gp_Pnt Value (const Standard_Real U, const Standard_Real V) const;




  public: typedef Geom_Geometry base_type; static const char* get_type_name () { return "Geom_Surface"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:




private:




};


























































class Standard_ConstructionError;
class gp_Pnt2d;
class gp_Ax2d;
class gp_Vec2d;
class gp_Trsf2d;


class Geom2d_Geometry;
class Geom2d_Geometry; class Handle_Geom2d_Geometry : public opencascade::handle<Geom2d_Geometry> { public: Handle_Geom2d_Geometry() {} Handle_Geom2d_Geometry(opencascade::handle<Geom2d_Geometry>&& theHandle) : opencascade::handle<Geom2d_Geometry>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Geom2d_Geometry,T2>::value>::type> inline Handle_Geom2d_Geometry(const opencascade::handle<T2>& theOther) : opencascade::handle<Geom2d_Geometry>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Geom2d_Geometry,T2>::value>::type> inline Handle_Geom2d_Geometry(const T2* theOther) : opencascade::handle<Geom2d_Geometry>(theOther) {} template<typename T> inline Handle_Geom2d_Geometry& operator=(T theOther) { opencascade::handle<Geom2d_Geometry>::operator=(theOther); return *this; } };

























class Geom2d_Geometry : public MMgt_TShared
{

public:

  
  
  
  
  __declspec( dllexport ) void Mirror (const gp_Pnt2d& P);
  
  
  
  __declspec( dllexport ) void Mirror (const gp_Ax2d& A);
  
  
  
  __declspec( dllexport ) void Rotate (const gp_Pnt2d& P, const Standard_Real Ang);
  
  
  __declspec( dllexport ) void Scale (const gp_Pnt2d& P, const Standard_Real S);
  
  
  __declspec( dllexport ) void Translate (const gp_Vec2d& V);
  
  
  __declspec( dllexport ) void Translate (const gp_Pnt2d& P1, const gp_Pnt2d& P2);
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual void Transform (const gp_Trsf2d& T) = 0;
  
  __declspec( dllexport ) opencascade::handle<Geom2d_Geometry> Mirrored (const gp_Pnt2d& P) const;
  
  __declspec( dllexport ) opencascade::handle<Geom2d_Geometry> Mirrored (const gp_Ax2d& A) const;
  
  __declspec( dllexport ) opencascade::handle<Geom2d_Geometry> Rotated (const gp_Pnt2d& P, const Standard_Real Ang) const;
  
  __declspec( dllexport ) opencascade::handle<Geom2d_Geometry> Scaled (const gp_Pnt2d& P, const Standard_Real S) const;
  
  __declspec( dllexport ) opencascade::handle<Geom2d_Geometry> Transformed (const gp_Trsf2d& T) const;
  
  __declspec( dllexport ) opencascade::handle<Geom2d_Geometry> Translated (const gp_Vec2d& V) const;
  
  __declspec( dllexport ) opencascade::handle<Geom2d_Geometry> Translated (const gp_Pnt2d& P1, const gp_Pnt2d& P2) const;
  
  __declspec( dllexport ) virtual opencascade::handle<Geom2d_Geometry> Copy() const = 0;




  public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "Geom2d_Geometry"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:




private:




};













class Standard_RangeError;
class Standard_NoSuchObject;
class Geom2d_UndefinedDerivative;
class Geom2d_UndefinedValue;
class gp_Trsf2d;
class gp_Pnt2d;
class gp_Vec2d;


class Geom2d_Curve;
class Geom2d_Curve; class Handle_Geom2d_Curve : public opencascade::handle<Geom2d_Curve> { public: Handle_Geom2d_Curve() {} Handle_Geom2d_Curve(opencascade::handle<Geom2d_Curve>&& theHandle) : opencascade::handle<Geom2d_Curve>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Geom2d_Curve,T2>::value>::type> inline Handle_Geom2d_Curve(const opencascade::handle<T2>& theOther) : opencascade::handle<Geom2d_Curve>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Geom2d_Curve,T2>::value>::type> inline Handle_Geom2d_Curve(const T2* theOther) : opencascade::handle<Geom2d_Curve>(theOther) {} template<typename T> inline Handle_Geom2d_Curve& operator=(T theOther) { opencascade::handle<Geom2d_Curve>::operator=(theOther); return *this; } };



























class Geom2d_Curve : public Geom2d_Geometry
{

public:

  

  
  
  
  
  
  
  __declspec( dllexport ) virtual void Reverse() = 0;
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Real ReversedParameter (const Standard_Real U) const = 0;
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Real TransformedParameter (const Standard_Real U, const gp_Trsf2d& T) const;
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Real ParametricTransformation (const gp_Trsf2d& T) const;
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) opencascade::handle<Geom2d_Curve> Reversed() const;
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Real FirstParameter() const = 0;
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Real LastParameter() const = 0;
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean IsClosed() const = 0;
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean IsPeriodic() const = 0;
  
  
  
  __declspec( dllexport ) virtual Standard_Real Period() const;
  

  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual GeomAbs_Shape Continuity() const = 0;
  
  
  
  __declspec( dllexport ) virtual Standard_Boolean IsCN (const Standard_Integer N) const = 0;
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual void D0 (const Standard_Real U, gp_Pnt2d& P) const = 0;
  

  
  
  __declspec( dllexport ) virtual void D1 (const Standard_Real U, gp_Pnt2d& P, gp_Vec2d& V1) const = 0;
  

  
  
  
  __declspec( dllexport ) virtual void D2 (const Standard_Real U, gp_Pnt2d& P, gp_Vec2d& V1, gp_Vec2d& V2) const = 0;
  

  
  
  
  __declspec( dllexport ) virtual void D3 (const Standard_Real U, gp_Pnt2d& P, gp_Vec2d& V1, gp_Vec2d& V2, gp_Vec2d& V3) const = 0;
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) virtual gp_Vec2d DN (const Standard_Real U, const Standard_Integer N) const = 0;
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) gp_Pnt2d Value (const Standard_Real U) const;




  public: typedef Geom2d_Geometry base_type; static const char* get_type_name () { return "Geom2d_Curve"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:




private:




};



























































class TColStd_HArray1OfReal : public TColStd_Array1OfReal, public MMgt_TShared { public: void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { } void* operator new (size_t theSize, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { return theAllocator->Allocate(theSize); } void operator delete (void* theAddress, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { theAllocator->Free(theAddress); } TColStd_HArray1OfReal (const Standard_Integer theLower, const Standard_Integer theUpper) : TColStd_Array1OfReal (theLower,theUpper) {} TColStd_HArray1OfReal (const Standard_Integer theLower, const Standard_Integer theUpper, const TColStd_Array1OfReal::value_type& theValue) : TColStd_Array1OfReal (theLower,theUpper) { Init (theValue); } TColStd_HArray1OfReal (const TColStd_Array1OfReal& theOther) : TColStd_Array1OfReal(theOther) {} const TColStd_Array1OfReal& Array1 () const { return *this; } TColStd_Array1OfReal& ChangeArray1 () { return *this; } public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "TColStd_HArray1OfReal"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<TColStd_HArray1OfReal>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return TColStd_HArray1OfReal::get_type_descriptor(); } }; class TColStd_HArray1OfReal; class Handle_TColStd_HArray1OfReal : public opencascade::handle<TColStd_HArray1OfReal> { public: Handle_TColStd_HArray1OfReal() {} Handle_TColStd_HArray1OfReal(opencascade::handle<TColStd_HArray1OfReal>&& theHandle) : opencascade::handle<TColStd_HArray1OfReal>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <TColStd_HArray1OfReal,T2>::value>::type> inline Handle_TColStd_HArray1OfReal(const opencascade::handle<T2>& theOther) : opencascade::handle<TColStd_HArray1OfReal>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <TColStd_HArray1OfReal,T2>::value>::type> inline Handle_TColStd_HArray1OfReal(const T2* theOther) : opencascade::handle<TColStd_HArray1OfReal>(theOther) {} template<typename T> inline Handle_TColStd_HArray1OfReal& operator=(T theOther) { opencascade::handle<TColStd_HArray1OfReal>::operator=(theOther); return *this; } };








class Standard_NullObject;


class Poly_Polygon3D;
class Poly_Polygon3D; class Handle_Poly_Polygon3D : public opencascade::handle<Poly_Polygon3D> { public: Handle_Poly_Polygon3D() {} Handle_Poly_Polygon3D(opencascade::handle<Poly_Polygon3D>&& theHandle) : opencascade::handle<Poly_Polygon3D>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Poly_Polygon3D,T2>::value>::type> inline Handle_Poly_Polygon3D(const opencascade::handle<T2>& theOther) : opencascade::handle<Poly_Polygon3D>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Poly_Polygon3D,T2>::value>::type> inline Handle_Poly_Polygon3D(const T2* theOther) : opencascade::handle<Poly_Polygon3D>(theOther) {} template<typename T> inline Handle_Poly_Polygon3D& operator=(T theOther) { opencascade::handle<Poly_Polygon3D>::operator=(theOther); return *this; } };








class Poly_Polygon3D : public MMgt_TShared
{

public:

  
  
  __declspec( dllexport ) Poly_Polygon3D(const TColgp_Array1OfPnt& Nodes);
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) Poly_Polygon3D(const TColgp_Array1OfPnt& Nodes, const TColStd_Array1OfReal& Parameters);

  
  __declspec( dllexport ) virtual opencascade::handle<Poly_Polygon3D> Copy() const;
  
  
  __declspec( dllexport ) Standard_Real Deflection() const;
  
  
  __declspec( dllexport ) void Deflection (const Standard_Real D);
  
  
  
  
  
    Standard_Integer NbNodes() const;
  
  
  __declspec( dllexport ) const TColgp_Array1OfPnt& Nodes() const;
  
  
  
  __declspec( dllexport ) Standard_Boolean HasParameters() const;
  
  
  
  __declspec( dllexport ) const TColStd_Array1OfReal& Parameters() const;
  
  
  
  
  
  __declspec( dllexport ) TColStd_Array1OfReal& ChangeParameters() const;




  public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "Poly_Polygon3D"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:




private:


  Standard_Real myDeflection;
  TColgp_Array1OfPnt myNodes;
  opencascade::handle<TColStd_HArray1OfReal> myParameters;


};
























inline Standard_Integer Poly_Polygon3D::NbNodes() const 
{
  return myNodes.Length();
}




































class Standard_NullObject;


class Poly_Polygon2D;
class Poly_Polygon2D; class Handle_Poly_Polygon2D : public opencascade::handle<Poly_Polygon2D> { public: Handle_Poly_Polygon2D() {} Handle_Poly_Polygon2D(opencascade::handle<Poly_Polygon2D>&& theHandle) : opencascade::handle<Poly_Polygon2D>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Poly_Polygon2D,T2>::value>::type> inline Handle_Poly_Polygon2D(const opencascade::handle<T2>& theOther) : opencascade::handle<Poly_Polygon2D>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Poly_Polygon2D,T2>::value>::type> inline Handle_Poly_Polygon2D(const T2* theOther) : opencascade::handle<Poly_Polygon2D>(theOther) {} template<typename T> inline Handle_Poly_Polygon2D& operator=(T theOther) { opencascade::handle<Poly_Polygon2D>::operator=(theOther); return *this; } };







class Poly_Polygon2D : public MMgt_TShared
{

public:

  
  
  __declspec( dllexport ) Poly_Polygon2D(const TColgp_Array1OfPnt2d& Nodes);
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) Standard_Real Deflection() const;
  
  
  __declspec( dllexport ) void Deflection (const Standard_Real D);
  
  
  
  
  
    Standard_Integer NbNodes() const;
  
  
  __declspec( dllexport ) const TColgp_Array1OfPnt2d& Nodes() const;




  public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "Poly_Polygon2D"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:




private:


  Standard_Real myDeflection;
  TColgp_Array1OfPnt2d myNodes;


};
























inline Standard_Integer Poly_Polygon2D::NbNodes() const 
{
  return myNodes.Length();
}







































class Standard_NullObject;


class Poly_PolygonOnTriangulation;
class Poly_PolygonOnTriangulation; class Handle_Poly_PolygonOnTriangulation : public opencascade::handle<Poly_PolygonOnTriangulation> { public: Handle_Poly_PolygonOnTriangulation() {} Handle_Poly_PolygonOnTriangulation(opencascade::handle<Poly_PolygonOnTriangulation>&& theHandle) : opencascade::handle<Poly_PolygonOnTriangulation>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Poly_PolygonOnTriangulation,T2>::value>::type> inline Handle_Poly_PolygonOnTriangulation(const opencascade::handle<T2>& theOther) : opencascade::handle<Poly_PolygonOnTriangulation>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Poly_PolygonOnTriangulation,T2>::value>::type> inline Handle_Poly_PolygonOnTriangulation(const T2* theOther) : opencascade::handle<Poly_PolygonOnTriangulation>(theOther) {} template<typename T> inline Handle_Poly_PolygonOnTriangulation& operator=(T theOther) { opencascade::handle<Poly_PolygonOnTriangulation>::operator=(theOther); return *this; } };













class Poly_PolygonOnTriangulation : public MMgt_TShared
{

public:

  
  
  
  __declspec( dllexport ) Poly_PolygonOnTriangulation(const TColStd_Array1OfInteger& Nodes);
  

  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) Poly_PolygonOnTriangulation(const TColStd_Array1OfInteger& Nodes, const TColStd_Array1OfReal& Parameters);

  
  __declspec( dllexport ) virtual opencascade::handle<Poly_PolygonOnTriangulation> Copy() const;

  
  __declspec( dllexport ) Standard_Real Deflection() const;
  
  
  
  __declspec( dllexport ) void Deflection (const Standard_Real D);
  

  
  
  
  
    Standard_Integer NbNodes() const;
  
  
  
  
  __declspec( dllexport ) const TColStd_Array1OfInteger& Nodes() const;
  

  
  __declspec( dllexport ) Standard_Boolean HasParameters() const;
  
  
  
  
  
  __declspec( dllexport ) opencascade::handle<TColStd_HArray1OfReal> Parameters() const;




  public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "Poly_PolygonOnTriangulation"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:




private:


  Standard_Real myDeflection;
  TColStd_Array1OfInteger myNodes;
  opencascade::handle<TColStd_HArray1OfReal> myParameters;


};






















inline Standard_Integer Poly_PolygonOnTriangulation::NbNodes() const 
{
  return myNodes.Length();
}











class TopoDS_Shape;
class TopoDS_Face;
class TopLoc_Location;
class TopoDS_Edge;
class TopoDS_Vertex;




class BRep_Tool 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
  
  
  
  __declspec( dllexport ) static Standard_Boolean IsClosed (const TopoDS_Shape& S);
  
  
  
  __declspec( dllexport ) static const opencascade::handle<Geom_Surface>& Surface (const TopoDS_Face& F, TopLoc_Location& L);
  
  
  
  __declspec( dllexport ) static opencascade::handle<Geom_Surface> Surface (const TopoDS_Face& F);
  
  
  
  __declspec( dllexport ) static const opencascade::handle<Poly_Triangulation>& Triangulation (const TopoDS_Face& F, TopLoc_Location& L);
  
  
  __declspec( dllexport ) static Standard_Real Tolerance (const TopoDS_Face& F);
  
  
  __declspec( dllexport ) static Standard_Boolean NaturalRestriction (const TopoDS_Face& F);
  
  
  
  __declspec( dllexport ) static Standard_Boolean IsGeometric (const TopoDS_Edge& E);
  
  
  
  
  __declspec( dllexport ) static const opencascade::handle<Geom_Curve>& Curve (const TopoDS_Edge& E, TopLoc_Location& L, Standard_Real& First, Standard_Real& Last);
  
  
  
  
  __declspec( dllexport ) static opencascade::handle<Geom_Curve> Curve (const TopoDS_Edge& E, Standard_Real& First, Standard_Real& Last);
  
  
  
  __declspec( dllexport ) static const opencascade::handle<Poly_Polygon3D>& Polygon3D (const TopoDS_Edge& E, TopLoc_Location& L);
  
  
  
  
  
  __declspec( dllexport ) static opencascade::handle<Geom2d_Curve> CurveOnSurface (const TopoDS_Edge& E, const TopoDS_Face& F, Standard_Real& First, Standard_Real& Last);
  
  
  
  
  
  __declspec( dllexport ) static opencascade::handle<Geom2d_Curve> CurveOnSurface (const TopoDS_Edge& E, const opencascade::handle<Geom_Surface>& S, const TopLoc_Location& L, Standard_Real& First, Standard_Real& Last);
  
  
  
  
  
  __declspec( dllexport ) static void CurveOnSurface (const TopoDS_Edge& E, opencascade::handle<Geom2d_Curve>& C, opencascade::handle<Geom_Surface>& S, TopLoc_Location& L, Standard_Real& First, Standard_Real& Last);
  
  
  
  
  
  __declspec( dllexport ) static void CurveOnSurface (const TopoDS_Edge& E, opencascade::handle<Geom2d_Curve>& C, opencascade::handle<Geom_Surface>& S, TopLoc_Location& L, Standard_Real& First, Standard_Real& Last, const Standard_Integer Index);
  
  
  
  
  __declspec( dllexport ) static opencascade::handle<Poly_Polygon2D> PolygonOnSurface (const TopoDS_Edge& E, const TopoDS_Face& F);
  
  
  
  
  __declspec( dllexport ) static opencascade::handle<Poly_Polygon2D> PolygonOnSurface (const TopoDS_Edge& E, const opencascade::handle<Geom_Surface>& S, const TopLoc_Location& L);
  
  
  
  
  __declspec( dllexport ) static void PolygonOnSurface (const TopoDS_Edge& E, opencascade::handle<Poly_Polygon2D>& C, opencascade::handle<Geom_Surface>& S, TopLoc_Location& L);
  
  
  
  
  __declspec( dllexport ) static void PolygonOnSurface (const TopoDS_Edge& E, opencascade::handle<Poly_Polygon2D>& C, opencascade::handle<Geom_Surface>& S, TopLoc_Location& L, const Standard_Integer Index);
  
  
  
  
  __declspec( dllexport ) static const opencascade::handle<Poly_PolygonOnTriangulation>& PolygonOnTriangulation (const TopoDS_Edge& E, const opencascade::handle<Poly_Triangulation>& T, const TopLoc_Location& L);
  
  
  
  
  
  __declspec( dllexport ) static void PolygonOnTriangulation (const TopoDS_Edge& E, opencascade::handle<Poly_PolygonOnTriangulation>& P, opencascade::handle<Poly_Triangulation>& T, TopLoc_Location& L);
  
  
  
  
  
  __declspec( dllexport ) static void PolygonOnTriangulation (const TopoDS_Edge& E, opencascade::handle<Poly_PolygonOnTriangulation>& P, opencascade::handle<Poly_Triangulation>& T, TopLoc_Location& L, const Standard_Integer Index);
  
  
  
  
  __declspec( dllexport ) static Standard_Boolean IsClosed (const TopoDS_Edge& E, const TopoDS_Face& F);
  
  
  
  
  __declspec( dllexport ) static Standard_Boolean IsClosed (const TopoDS_Edge& E, const opencascade::handle<Geom_Surface>& S, const TopLoc_Location& L);
  
  
  
  __declspec( dllexport ) static Standard_Boolean IsClosed (const TopoDS_Edge& E, const opencascade::handle<Poly_Triangulation>& T, const TopLoc_Location& L);
  
  
  __declspec( dllexport ) static Standard_Real Tolerance (const TopoDS_Edge& E);
  
  
  __declspec( dllexport ) static Standard_Boolean SameParameter (const TopoDS_Edge& E);
  
  
  __declspec( dllexport ) static Standard_Boolean SameRange (const TopoDS_Edge& E);
  
  
  __declspec( dllexport ) static Standard_Boolean Degenerated (const TopoDS_Edge& E);
  
  
  __declspec( dllexport ) static void Range (const TopoDS_Edge& E, Standard_Real& First, Standard_Real& Last);
  
  
  
  __declspec( dllexport ) static void Range (const TopoDS_Edge& E, const opencascade::handle<Geom_Surface>& S, const TopLoc_Location& L, Standard_Real& First, Standard_Real& Last);
  
  
  __declspec( dllexport ) static void Range (const TopoDS_Edge& E, const TopoDS_Face& F, Standard_Real& First, Standard_Real& Last);
  
  
  __declspec( dllexport ) static void UVPoints (const TopoDS_Edge& E, const opencascade::handle<Geom_Surface>& S, const TopLoc_Location& L, gp_Pnt2d& PFirst, gp_Pnt2d& PLast);
  
  
  __declspec( dllexport ) static void UVPoints (const TopoDS_Edge& E, const TopoDS_Face& F, gp_Pnt2d& PFirst, gp_Pnt2d& PLast);
  
  
  __declspec( dllexport ) static void SetUVPoints (const TopoDS_Edge& E, const opencascade::handle<Geom_Surface>& S, const TopLoc_Location& L, const gp_Pnt2d& PFirst, const gp_Pnt2d& PLast);
  
  
  __declspec( dllexport ) static void SetUVPoints (const TopoDS_Edge& E, const TopoDS_Face& F, const gp_Pnt2d& PFirst, const gp_Pnt2d& PLast);
  
  
  
  __declspec( dllexport ) static Standard_Boolean HasContinuity (const TopoDS_Edge& E, const TopoDS_Face& F1, const TopoDS_Face& F2);
  
  
  __declspec( dllexport ) static GeomAbs_Shape Continuity (const TopoDS_Edge& E, const TopoDS_Face& F1, const TopoDS_Face& F2);
  
  
  __declspec( dllexport ) static Standard_Boolean HasContinuity (const TopoDS_Edge& E, const opencascade::handle<Geom_Surface>& S1, const opencascade::handle<Geom_Surface>& S2, const TopLoc_Location& L1, const TopLoc_Location& L2);
  
  
  __declspec( dllexport ) static GeomAbs_Shape Continuity (const TopoDS_Edge& E, const opencascade::handle<Geom_Surface>& S1, const opencascade::handle<Geom_Surface>& S2, const TopLoc_Location& L1, const TopLoc_Location& L2);
  
  
  
  __declspec( dllexport ) static Standard_Boolean HasContinuity (const TopoDS_Edge& E);
  
  
  __declspec( dllexport ) static gp_Pnt Pnt (const TopoDS_Vertex& V);
  
  
  __declspec( dllexport ) static Standard_Real Tolerance (const TopoDS_Vertex& V);
  
  
  __declspec( dllexport ) static Standard_Real Parameter (const TopoDS_Vertex& V, const TopoDS_Edge& E);
  
  
  
  __declspec( dllexport ) static Standard_Real Parameter (const TopoDS_Vertex& V, const TopoDS_Edge& E, const TopoDS_Face& F);
  
  
  
  __declspec( dllexport ) static Standard_Real Parameter (const TopoDS_Vertex& V, const TopoDS_Edge& E, const opencascade::handle<Geom_Surface>& S, const TopLoc_Location& L);
  
  
  __declspec( dllexport ) static gp_Pnt2d Parameters (const TopoDS_Vertex& V, const TopoDS_Face& F);

  
  
  
  __declspec( dllexport ) static Standard_Real MaxTolerance (const TopoDS_Shape& theShape, const TopAbs_ShapeEnum theSubShape);

};




















































































































enum GeomAbs_SurfaceType
{
GeomAbs_Plane,
GeomAbs_Cylinder,
GeomAbs_Cone,
GeomAbs_Sphere,
GeomAbs_Torus,
GeomAbs_BezierSurface,
GeomAbs_BSplineSurface,
GeomAbs_SurfaceOfRevolution,
GeomAbs_SurfaceOfExtrusion,
GeomAbs_OffsetSurface,
GeomAbs_OtherSurface
};























































































            
template <class TheItemType>
class NCollection_Array2
{
public:
  
  typedef TheItemType value_type;

public:
  
  class Iterator
  {
  public:
    
    Iterator (void) :
      myCurrent (0),
      mySize    (0),
      myArray   (0) {}
    
    Iterator  (const NCollection_Array2& theArray) :
      myCurrent (0),
      mySize    (theArray.Length()),
      myArray   ((NCollection_Array2 *) &theArray) {}
    
    void Init (const NCollection_Array2& theArray)
    { 
      myCurrent = 0;
      mySize    = theArray.Length();
      myArray   = (NCollection_Array2 *) &theArray; 
    }
    
    Standard_Boolean More (void) const
    { return (myCurrent < mySize); }
    
    void Next (void)
    { myCurrent++; }
    
    const TheItemType& Value (void) const
    { return myArray->myStart[myCurrent]; }
    
    TheItemType& ChangeValue (void) const
    { return myArray->myStart[myCurrent]; }
  private:
    Standard_Integer    myCurrent;  
    Standard_Integer    mySize;     
    NCollection_Array2* myArray;    
  }; 

 public:
  

  
  NCollection_Array2(const Standard_Integer theRowLower,
                     const Standard_Integer theRowUpper,
                     const Standard_Integer theColLower,
                     const Standard_Integer theColUpper) :
    myLowerRow                                  (theRowLower),
    myUpperRow                                  (theRowUpper),
    myLowerCol                                  (theColLower),
    myUpperCol                                  (theColUpper),
    myDeletable                                 (true)
  { Allocate(); }

  
  NCollection_Array2 (const NCollection_Array2& theOther) :
    myLowerRow                                  (theOther.LowerRow()),
    myUpperRow                                  (theOther.UpperRow()),
    myLowerCol                                  (theOther.LowerCol()),
    myUpperCol                                  (theOther.UpperCol()),
    myDeletable                                 (true)
  {
    Allocate();
    *this = theOther;
  }

  
  NCollection_Array2(const TheItemType&     theBegin,
                     const Standard_Integer theRowLower,
                     const Standard_Integer theRowUpper,
                     const Standard_Integer theColLower,
                     const Standard_Integer theColUpper) :
    myLowerRow                                  (theRowLower),
    myUpperRow                                  (theRowUpper),
    myLowerCol                                  (theColLower),
    myUpperCol                                  (theColUpper),
    myDeletable                                 (false)
  {
    myStart = (TheItemType *) &theBegin;
    Allocate();
  }

  
  void Init (const TheItemType& theValue) 
  {
    TheItemType *pCur, *pEnd=myStart+Size();
    for(pCur = myStart; pCur<pEnd; pCur++)
      *pCur = theValue;
  }

  
  Standard_Integer Size (void) const
  { return Length(); }
  
  Standard_Integer Length (void) const
  { return RowLength() * ColLength(); }

  
  Standard_Integer RowLength (void) const
  { return (myUpperCol-myLowerCol+1); }

  
  Standard_Integer ColLength (void) const
  { return (myUpperRow-myLowerRow+1); }

  
  Standard_Integer LowerRow (void) const
  { return myLowerRow; }
  
  Standard_Integer UpperRow (void) const
  { return myUpperRow; }
  
  Standard_Integer LowerCol (void) const
  { return myLowerCol; }
  
  Standard_Integer UpperCol (void) const
  { return myUpperCol; }

  
  Standard_Boolean IsDeletable (void) const
  { return myDeletable; }

  
  NCollection_Array2& Assign (const NCollection_Array2& theOther)
  { 
    if (&theOther == this)
      return *this;
    if (Length() != theOther.Length()) Standard_DimensionMismatch::Raise("NCollection_Array2::operator=");;
    TheItemType * pMyItem  = myStart;
    TheItemType * pItem    = theOther.myStart;
    const Standard_Integer iSize = Length();
    for (Standard_Integer i=0; i < iSize; i++, pItem++, pMyItem++)
      *pMyItem = *pItem;
    return *this; 
  }

  
  NCollection_Array2& operator= (const NCollection_Array2& theOther)
  { 
    return Assign (theOther);
  }

  
  const TheItemType& Value (const Standard_Integer theRow,
                            const Standard_Integer theCol) const
  {
    if (theRow < myLowerRow || theRow > myUpperRow || theCol < myLowerCol || theCol > myUpperCol) Standard_OutOfRange::Raise("NCollection_Array2::Value");;
    return myData[theRow][theCol];
  }

  
  const TheItemType& operator() (const Standard_Integer theRow,
                                 const Standard_Integer theCol) const
  { return Value (theRow,theCol); }

  
  TheItemType& ChangeValue (const Standard_Integer theRow,
                            const Standard_Integer theCol)
  {
    if (theRow < myLowerRow || theRow > myUpperRow || theCol < myLowerCol || theCol > myUpperCol) Standard_OutOfRange::Raise("NCollection_Array2::ChangeValue");;
    return myData[theRow][theCol];
  }

  
  TheItemType& operator() (const Standard_Integer theRow,
                           const Standard_Integer theCol)
  { return ChangeValue (theRow,theCol); }

  
  void SetValue (const Standard_Integer theRow,
                 const Standard_Integer theCol,
                 const TheItemType&     theItem)
  {
    if (theRow < myLowerRow || theRow > myUpperRow || theCol < myLowerCol || theCol > myUpperCol) Standard_OutOfRange::Raise("NCollection_Array2::SetValue");;
    myData[theRow][theCol] = theItem;
  }
  
  
  ~NCollection_Array2 (void)
  { 
    if (myDeletable) delete [] myStart;
    delete [] &(myData[myLowerRow]);
  }

 private:
  

  
  void Allocate (void)
  {
    const Standard_Integer iRowSize = myUpperCol - myLowerCol + 1;
    const Standard_Integer iColSize = myUpperRow - myLowerRow + 1;
    if (iRowSize <= 0 || iColSize <= 0) Standard_RangeError::Raise("NCollection_Array2::Allocate");;
    if (myDeletable) {
      
      myStart = new TheItemType[iRowSize * iColSize];
      if (!myStart) Standard_OutOfMemory::Raise("NCollection_Array2 : Allocation failed");;
    }
    
    TheItemType** pTable = new TheItemType* [iColSize];
    if (!pTable) Standard_OutOfMemory::Raise("NCollection_Array2 : Allocation failed");;

    
    TheItemType* pRow = myStart - myLowerCol;
    for (Standard_Integer i = 0; i < iColSize; i++) 
    {
      pTable[i] = pRow;
      pRow += iRowSize;
    }

    
    myData = pTable - myLowerRow;
  }

 protected:
  
  Standard_Integer myLowerRow;
  Standard_Integer myUpperRow;
  Standard_Integer myLowerCol;
  Standard_Integer myUpperCol;

  TheItemType**    myData;      
  TheItemType*     myStart;     
  Standard_Boolean myDeletable; 

  
 friend class Iterator;

};




typedef NCollection_Array2<gp_Pnt> TColgp_Array2OfPnt;













































typedef NCollection_Array2<Standard_Real> TColStd_Array2OfReal;



































































































class TColStd_HArray2OfReal : public TColStd_Array2OfReal, public MMgt_TShared { public: void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { } void* operator new (size_t theSize, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { return theAllocator->Allocate(theSize); } void operator delete (void* theAddress, const opencascade::handle<NCollection_BaseAllocator>& theAllocator) { theAllocator->Free(theAddress); } TColStd_HArray2OfReal (const Standard_Integer theRowLow, const Standard_Integer theRowUpp, const Standard_Integer theColLow, const Standard_Integer theColUpp) : TColStd_Array2OfReal (theRowLow, theRowUpp, theColLow, theColUpp) {} TColStd_HArray2OfReal (const Standard_Integer theRowLow, const Standard_Integer theRowUpp, const Standard_Integer theColLow, const Standard_Integer theColUpp, const TColStd_Array2OfReal::value_type& theValue) : TColStd_Array2OfReal (theRowLow, theRowUpp, theColLow, theColUpp) { Init (theValue); } TColStd_HArray2OfReal (const TColStd_Array2OfReal& theOther) : TColStd_Array2OfReal(theOther) {} const TColStd_Array2OfReal& Array2 () const { return *this; } TColStd_Array2OfReal& ChangeArray2 () { return *this; } public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "TColStd_HArray2OfReal"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<TColStd_HArray2OfReal>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return TColStd_HArray2OfReal::get_type_descriptor(); } }; class TColStd_HArray2OfReal; class Handle_TColStd_HArray2OfReal : public opencascade::handle<TColStd_HArray2OfReal> { public: Handle_TColStd_HArray2OfReal() {} Handle_TColStd_HArray2OfReal(opencascade::handle<TColStd_HArray2OfReal>&& theHandle) : opencascade::handle<TColStd_HArray2OfReal>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <TColStd_HArray2OfReal,T2>::value>::type> inline Handle_TColStd_HArray2OfReal(const opencascade::handle<T2>& theOther) : opencascade::handle<TColStd_HArray2OfReal>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <TColStd_HArray2OfReal,T2>::value>::type> inline Handle_TColStd_HArray2OfReal(const T2* theOther) : opencascade::handle<TColStd_HArray2OfReal>(theOther) {} template<typename T> inline Handle_TColStd_HArray2OfReal& operator=(T theOther) { opencascade::handle<TColStd_HArray2OfReal>::operator=(theOther); return *this; } };












class BSplSLib_Cache : public Standard_Transient
{
public:
  
  __declspec( dllexport ) BSplSLib_Cache();
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) BSplSLib_Cache(const Standard_Integer&        theDegreeU,
                                 const Standard_Boolean&        thePeriodicU,
                                 const TColStd_Array1OfReal&    theFlatKnotsU,
                                 const Standard_Integer&        theDegreeV,
                                 const Standard_Boolean&        thePeriodicV,
                                 const TColStd_Array1OfReal&    theFlatKnotsV,
                                 const TColgp_Array2OfPnt&      thePoles,
                                 const TColStd_Array2OfReal*    theWeights = 0);

  
  
  
  __declspec( dllexport ) Standard_Boolean IsCacheValid(Standard_Real theParameterU,
                                                Standard_Real theParameterV) const;

  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void BuildCache(const Standard_Real&           theParameterU, 
                                  const Standard_Real&           theParameterV, 
                                  const Standard_Integer&        theDegreeU, 
                                  const Standard_Boolean&        thePeriodicU, 
                                  const TColStd_Array1OfReal&    theFlatKnotsU, 
                                  const Standard_Integer&        theDegreeV, 
                                  const Standard_Boolean&        thePeriodicV, 
                                  const TColStd_Array1OfReal&    theFlatKnotsV, 
                                  const TColgp_Array2OfPnt&      thePoles, 
                                  const TColStd_Array2OfReal*    theWeights = 0);

  
  
  
  
  __declspec( dllexport ) void D0(const Standard_Real& theU, const Standard_Real& theV, gp_Pnt& thePoint) const;

  
  
  
  
  
  
  __declspec( dllexport ) void D1(const Standard_Real& theU, 
                          const Standard_Real& theV, 
                                gp_Pnt&        thePoint, 
                                gp_Vec&        theTangentU, 
                                gp_Vec&        theTangentV) const;

  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void D2(const Standard_Real& theU, 
                          const Standard_Real& theV, 
                                gp_Pnt&        thePoint, 
                                gp_Vec&        theTangentU, 
                                gp_Vec&        theTangentV, 
                                gp_Vec&        theCurvatureU, 
                                gp_Vec&        theCurvatureV, 
                                gp_Vec&        theCurvatureUV) const;


  public: typedef Standard_Transient base_type; static const char* get_type_name () { return "BSplSLib_Cache"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:
  
  
  
  
  void PeriodicNormalization(const Standard_Integer& theDegree, 
                             const TColStd_Array1OfReal& theFlatKnots, 
                                   Standard_Real& theParameter) const;

private:
  opencascade::handle<TColStd_HArray2OfReal> myPolesWeights; 
                                                
                                                
                                                
                                                
                                                

  Standard_Boolean              myIsRational;    
  Standard_Real                 mySpanStart[2];  
  Standard_Real                 mySpanLength[2]; 
  Standard_Integer              mySpanIndex[2];  
  Standard_Integer              mySpanIndexMin[2]; 
  Standard_Integer              mySpanIndexMax[2]; 
  Standard_Integer              myDegree[2];     
  opencascade::handle<TColStd_HArray1OfReal> myFlatKnots[2];  
                                                 
};

class BSplSLib_Cache; class Handle_BSplSLib_Cache : public opencascade::handle<BSplSLib_Cache> { public: Handle_BSplSLib_Cache() {} Handle_BSplSLib_Cache(opencascade::handle<BSplSLib_Cache>&& theHandle) : opencascade::handle<BSplSLib_Cache>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BSplSLib_Cache,T2>::value>::type> inline Handle_BSplSLib_Cache(const opencascade::handle<T2>& theOther) : opencascade::handle<BSplSLib_Cache>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BSplSLib_Cache,T2>::value>::type> inline Handle_BSplSLib_Cache(const T2* theOther) : opencascade::handle<BSplSLib_Cache>(theOther) {} template<typename T> inline Handle_BSplSLib_Cache& operator=(T theOther) { opencascade::handle<BSplSLib_Cache>::operator=(theOther); return *this; } };

































class Standard_OutOfRange;
class Standard_NoSuchObject;
class Standard_DomainError;
class Adaptor3d_HSurface;
class gp_Pnt;
class gp_Vec;
class gp_Pln;
class gp_Cylinder;
class gp_Cone;
class gp_Sphere;
class gp_Torus;
class Geom_BezierSurface;
class Geom_BSplineSurface;
class gp_Ax1;
class gp_Dir;
class Adaptor3d_HCurve;






















class Adaptor3d_Surface 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  __declspec( dllexport ) virtual Standard_Real FirstUParameter() const;
  
  __declspec( dllexport ) virtual Standard_Real LastUParameter() const;
  
  __declspec( dllexport ) virtual Standard_Real FirstVParameter() const;
  
  __declspec( dllexport ) virtual Standard_Real LastVParameter() const;
  
  __declspec( dllexport ) virtual GeomAbs_Shape UContinuity() const;
  
  __declspec( dllexport ) virtual GeomAbs_Shape VContinuity() const;
  
  
  
  __declspec( dllexport ) virtual Standard_Integer NbUIntervals (const GeomAbs_Shape S) const;
  
  
  
  __declspec( dllexport ) virtual Standard_Integer NbVIntervals (const GeomAbs_Shape S) const;
  
  
  
  __declspec( dllexport ) virtual void UIntervals (TColStd_Array1OfReal& T, const GeomAbs_Shape S) const;
  
  
  
  __declspec( dllexport ) virtual void VIntervals (TColStd_Array1OfReal& T, const GeomAbs_Shape S) const;
  
  
  
  
  
  
  __declspec( dllexport ) virtual opencascade::handle<Adaptor3d_HSurface> UTrim (const Standard_Real First, const Standard_Real Last, const Standard_Real Tol) const;
  
  
  
  
  
  __declspec( dllexport ) virtual opencascade::handle<Adaptor3d_HSurface> VTrim (const Standard_Real First, const Standard_Real Last, const Standard_Real Tol) const;
  
  __declspec( dllexport ) virtual Standard_Boolean IsUClosed() const;
  
  __declspec( dllexport ) virtual Standard_Boolean IsVClosed() const;
  
  __declspec( dllexport ) virtual Standard_Boolean IsUPeriodic() const;
  
  __declspec( dllexport ) virtual Standard_Real UPeriod() const;
  
  __declspec( dllexport ) virtual Standard_Boolean IsVPeriodic() const;
  
  __declspec( dllexport ) virtual Standard_Real VPeriod() const;
  
  
  __declspec( dllexport ) virtual gp_Pnt Value (const Standard_Real U, const Standard_Real V) const;
  
  
  __declspec( dllexport ) virtual void D0 (const Standard_Real U, const Standard_Real V, gp_Pnt& P) const;
  
  
  
  
  
  __declspec( dllexport ) virtual void D1 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V) const;
  
  
  
  
  
  __declspec( dllexport ) virtual void D2 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV) const;
  
  
  
  
  
  __declspec( dllexport ) virtual void D3 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV, gp_Vec& D3U, gp_Vec& D3V, gp_Vec& D3UUV, gp_Vec& D3UVV) const;
  
  
  
  
  
  
  __declspec( dllexport ) virtual gp_Vec DN (const Standard_Real U, const Standard_Real V, const Standard_Integer Nu, const Standard_Integer Nv) const;
  
  
  
  __declspec( dllexport ) virtual Standard_Real UResolution (const Standard_Real R3d) const;
  
  
  
  __declspec( dllexport ) virtual Standard_Real VResolution (const Standard_Real R3d) const;
  
  
  
  
  
  __declspec( dllexport ) virtual GeomAbs_SurfaceType GetType() const;
  
  __declspec( dllexport ) virtual gp_Pln Plane() const;
  
  __declspec( dllexport ) virtual gp_Cylinder Cylinder() const;
  
  __declspec( dllexport ) virtual gp_Cone Cone() const;
  
  __declspec( dllexport ) virtual gp_Sphere Sphere() const;
  
  __declspec( dllexport ) virtual gp_Torus Torus() const;
  
  __declspec( dllexport ) virtual Standard_Integer UDegree() const;
  
  __declspec( dllexport ) virtual Standard_Integer NbUPoles() const;
  
  __declspec( dllexport ) virtual Standard_Integer VDegree() const;
  
  __declspec( dllexport ) virtual Standard_Integer NbVPoles() const;
  
  __declspec( dllexport ) virtual Standard_Integer NbUKnots() const;
  
  __declspec( dllexport ) virtual Standard_Integer NbVKnots() const;
  
  __declspec( dllexport ) virtual Standard_Boolean IsURational() const;
  
  __declspec( dllexport ) virtual Standard_Boolean IsVRational() const;
  
  __declspec( dllexport ) virtual opencascade::handle<Geom_BezierSurface> Bezier() const;
  
  __declspec( dllexport ) virtual opencascade::handle<Geom_BSplineSurface> BSpline() const;
  
  __declspec( dllexport ) virtual gp_Ax1 AxeOfRevolution() const;
  
  __declspec( dllexport ) virtual gp_Dir Direction() const;
  
  __declspec( dllexport ) virtual opencascade::handle<Adaptor3d_HCurve> BasisCurve() const;
  
  __declspec( dllexport ) virtual opencascade::handle<Adaptor3d_HSurface> BasisSurface() const;
  
  __declspec( dllexport ) virtual Standard_Real OffsetValue() const;
  __declspec( dllexport ) virtual ~Adaptor3d_Surface();




protected:





private:





};


































class gp_Pnt;
class gp_Vec;



class GeomEvaluator_Surface : public Standard_Transient
{
public:
  GeomEvaluator_Surface() {}

  
  virtual void D0(const Standard_Real theU, const Standard_Real theV,
                  gp_Pnt& theValue) const = 0;
  
  virtual void D1(const Standard_Real theU, const Standard_Real theV,
                  gp_Pnt& theValue, gp_Vec& theD1U, gp_Vec& theD1V) const = 0;
  
  virtual void D2(const Standard_Real theU, const Standard_Real theV,
                  gp_Pnt& theValue, gp_Vec& theD1U, gp_Vec& theD1V,
                  gp_Vec& theD2U, gp_Vec& theD2V, gp_Vec& theD2UV) const = 0;
  
  virtual void D3(const Standard_Real theU, const Standard_Real theV,
                  gp_Pnt& theValue, gp_Vec& theD1U, gp_Vec& theD1V,
                  gp_Vec& theD2U, gp_Vec& theD2V, gp_Vec& theD2UV,
                  gp_Vec& theD3U, gp_Vec& theD3V, gp_Vec& theD3UUV, gp_Vec& theD3UVV) const = 0;
  
  
  
  virtual gp_Vec DN(const Standard_Real theU, const Standard_Real theV,
                    const Standard_Integer theDerU, const Standard_Integer theDerV) const = 0;

  public: typedef Standard_Transient base_type; static const char* get_type_name () { return "GeomEvaluator_Surface"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<GeomEvaluator_Surface>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return GeomEvaluator_Surface::get_type_descriptor(); }
};

class GeomEvaluator_Surface; class Handle_GeomEvaluator_Surface : public opencascade::handle<GeomEvaluator_Surface> { public: Handle_GeomEvaluator_Surface() {} Handle_GeomEvaluator_Surface(opencascade::handle<GeomEvaluator_Surface>&& theHandle) : opencascade::handle<GeomEvaluator_Surface>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <GeomEvaluator_Surface,T2>::value>::type> inline Handle_GeomEvaluator_Surface(const opencascade::handle<T2>& theOther) : opencascade::handle<GeomEvaluator_Surface>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <GeomEvaluator_Surface,T2>::value>::type> inline Handle_GeomEvaluator_Surface(const T2* theOther) : opencascade::handle<GeomEvaluator_Surface>(theOther) {} template<typename T> inline Handle_GeomEvaluator_Surface& operator=(T theOther) { opencascade::handle<GeomEvaluator_Surface>::operator=(theOther); return *this; } };




class Geom_Surface;
class Standard_NoSuchObject;
class Standard_OutOfRange;
class Standard_ConstructionError;
class Standard_DomainError;
class Adaptor3d_HSurface;
class gp_Pnt;
class gp_Vec;
class gp_Pln;
class gp_Cylinder;
class gp_Cone;
class gp_Sphere;
class gp_Torus;
class Geom_BezierSurface;
class Geom_BSplineSurface;
class gp_Ax1;
class gp_Dir;
class Adaptor3d_HCurve;










class GeomAdaptor_Surface  : public Adaptor3d_Surface
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
    GeomAdaptor_Surface();
  
    GeomAdaptor_Surface(const opencascade::handle<Geom_Surface>& S);
  
  
    GeomAdaptor_Surface(const opencascade::handle<Geom_Surface>& S, const Standard_Real UFirst, const Standard_Real ULast, const Standard_Real VFirst, const Standard_Real VLast, const Standard_Real TolU = 0.0, const Standard_Real TolV = 0.0);
  
    void Load (const opencascade::handle<Geom_Surface>& S);
  
  
    void Load (const opencascade::handle<Geom_Surface>& S, const Standard_Real UFirst, const Standard_Real ULast, const Standard_Real VFirst, const Standard_Real VLast, const Standard_Real TolU = 0.0, const Standard_Real TolV = 0.0);
  
    const opencascade::handle<Geom_Surface>& Surface() const;
  
    Standard_Real FirstUParameter() const override;
  
    Standard_Real LastUParameter() const override;
  
    Standard_Real FirstVParameter() const override;
  
    Standard_Real LastVParameter() const override;
  
  __declspec( dllexport ) GeomAbs_Shape UContinuity() const override;
  
  __declspec( dllexport ) GeomAbs_Shape VContinuity() const override;
  
  
  
  __declspec( dllexport ) Standard_Integer NbUIntervals (const GeomAbs_Shape S) const override;
  
  
  
  __declspec( dllexport ) Standard_Integer NbVIntervals (const GeomAbs_Shape S) const override;
  
  
  
  __declspec( dllexport ) void UIntervals (TColStd_Array1OfReal& T, const GeomAbs_Shape S) const override;
  
  
  
  __declspec( dllexport ) void VIntervals (TColStd_Array1OfReal& T, const GeomAbs_Shape S) const override;
  
  
  
  
  
  
  __declspec( dllexport ) opencascade::handle<Adaptor3d_HSurface> UTrim (const Standard_Real First, const Standard_Real Last, const Standard_Real Tol) const override;
  
  
  
  
  
  __declspec( dllexport ) opencascade::handle<Adaptor3d_HSurface> VTrim (const Standard_Real First, const Standard_Real Last, const Standard_Real Tol) const override;
  
  __declspec( dllexport ) Standard_Boolean IsUClosed() const override;
  
  __declspec( dllexport ) Standard_Boolean IsVClosed() const override;
  
  __declspec( dllexport ) Standard_Boolean IsUPeriodic() const override;
  
  __declspec( dllexport ) Standard_Real UPeriod() const override;
  
  __declspec( dllexport ) Standard_Boolean IsVPeriodic() const override;
  
  __declspec( dllexport ) Standard_Real VPeriod() const override;
  
  
  __declspec( dllexport ) gp_Pnt Value (const Standard_Real U, const Standard_Real V) const override;
  
  
  __declspec( dllexport ) void D0 (const Standard_Real U, const Standard_Real V, gp_Pnt& P) const override;
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void D1 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V) const override;
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void D2 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV) const override;
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void D3 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV, gp_Vec& D3U, gp_Vec& D3V, gp_Vec& D3UUV, gp_Vec& D3UVV) const override;
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) gp_Vec DN (const Standard_Real U, const Standard_Real V, const Standard_Integer Nu, const Standard_Integer Nv) const override;
  
  
  
  __declspec( dllexport ) Standard_Real UResolution (const Standard_Real R3d) const override;
  
  
  
  __declspec( dllexport ) Standard_Real VResolution (const Standard_Real R3d) const override;
  
  
  
  
  
    GeomAbs_SurfaceType GetType() const override;
  
  __declspec( dllexport ) gp_Pln Plane() const override;
  
  __declspec( dllexport ) gp_Cylinder Cylinder() const override;
  
  __declspec( dllexport ) gp_Cone Cone() const override;
  
  __declspec( dllexport ) gp_Sphere Sphere() const override;
  
  __declspec( dllexport ) gp_Torus Torus() const override;
  
  __declspec( dllexport ) Standard_Integer UDegree() const override;
  
  __declspec( dllexport ) Standard_Integer NbUPoles() const override;
  
  __declspec( dllexport ) Standard_Integer VDegree() const override;
  
  __declspec( dllexport ) Standard_Integer NbVPoles() const override;
  
  __declspec( dllexport ) Standard_Integer NbUKnots() const override;
  
  __declspec( dllexport ) Standard_Integer NbVKnots() const override;
  
  __declspec( dllexport ) Standard_Boolean IsURational() const override;
  
  __declspec( dllexport ) Standard_Boolean IsVRational() const override;
  
  
  
  
  
  
  __declspec( dllexport ) opencascade::handle<Geom_BezierSurface> Bezier() const override;
  
  
  
  
  
  
  __declspec( dllexport ) opencascade::handle<Geom_BSplineSurface> BSpline() const override;
  
  __declspec( dllexport ) gp_Ax1 AxeOfRevolution() const override;
  
  __declspec( dllexport ) gp_Dir Direction() const override;
  
  __declspec( dllexport ) opencascade::handle<Adaptor3d_HCurve> BasisCurve() const override;
  
  __declspec( dllexport ) opencascade::handle<Adaptor3d_HSurface> BasisSurface() const override;
  
  __declspec( dllexport ) Standard_Real OffsetValue() const override;




protected:





private:

  
  __declspec( dllexport ) void Span (const Standard_Integer Side, const Standard_Integer Ideb, const Standard_Integer Ifin, Standard_Integer& OutIdeb, Standard_Integer& OutIfin, const Standard_Integer FKIndx, const Standard_Integer LKIndx) const;
  
  __declspec( dllexport ) Standard_Boolean IfUVBound (const Standard_Real U, const Standard_Real V, Standard_Integer& Ideb, Standard_Integer& Ifin, Standard_Integer& IVdeb, Standard_Integer& IVfin, const Standard_Integer USide, const Standard_Integer VSide) const;
  
  __declspec( dllexport ) void load (const opencascade::handle<Geom_Surface>& S, const Standard_Real UFirst, const Standard_Real ULast, const Standard_Real VFirst, const Standard_Real VLast, const Standard_Real TolU = 0.0, const Standard_Real TolV = 0.0);
  
  
  
  
  __declspec( dllexport ) void RebuildCache (const Standard_Real theU, const Standard_Real theV) const;


  opencascade::handle<Geom_Surface> mySurface;
  Standard_Real myUFirst;
  Standard_Real myULast;
  Standard_Real myVFirst;
  Standard_Real myVLast;
  Standard_Real myTolU;
  Standard_Real myTolV;
  
  opencascade::handle<Geom_BSplineSurface> myBSplineSurface; 
  mutable opencascade::handle<BSplSLib_Cache> mySurfaceCache; 

protected:
  GeomAbs_SurfaceType mySurfaceType;
  opencascade::handle<GeomEvaluator_Surface> myNestedEvaluator; 
};













































class Standard_NullObject;
class Standard_NullObject; class Handle_Standard_NullObject : public opencascade::handle<Standard_NullObject> { public: Handle_Standard_NullObject() {} Handle_Standard_NullObject(opencascade::handle<Standard_NullObject>&& theHandle) : opencascade::handle<Standard_NullObject>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_NullObject,T2>::value>::type> inline Handle_Standard_NullObject(const opencascade::handle<T2>& theOther) : opencascade::handle<Standard_NullObject>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Standard_NullObject,T2>::value>::type> inline Handle_Standard_NullObject(const T2* theOther) : opencascade::handle<Standard_NullObject>(theOther) {} template<typename T> inline Handle_Standard_NullObject& operator=(T theOther) { opencascade::handle<Standard_NullObject>::operator=(theOther); return *this; } };


  





class Standard_NullObject : public Standard_DomainError { void Throw () const override { throw *this; } public: Standard_NullObject() : Standard_DomainError() {} Standard_NullObject(const Standard_CString theMessage) : Standard_DomainError(theMessage) {} static void Raise(const Standard_CString theMessage = "") { opencascade::handle<Standard_NullObject> _E = new Standard_NullObject; _E->Reraise(theMessage); } static void Raise(Standard_SStream& theMessage) { opencascade::handle<Standard_NullObject> _E = new Standard_NullObject; _E->Reraise (theMessage); } static opencascade::handle<Standard_NullObject> NewInstance(const Standard_CString theMessage = "") { return new Standard_NullObject(theMessage); } public: typedef Standard_DomainError base_type; static const char* get_type_name () { return "Standard_NullObject"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<Standard_NullObject>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return Standard_NullObject::get_type_descriptor(); } };










inline GeomAdaptor_Surface::GeomAdaptor_Surface()
 : myUFirst(0.),
   myULast(0.),
   myVFirst(0.),
   myVLast (0.),
   myTolU(0.), 
   myTolV(0.),
   mySurfaceType(GeomAbs_OtherSurface)
{
} 






inline GeomAdaptor_Surface::GeomAdaptor_Surface(const opencascade::handle<Geom_Surface>& S)
 : myTolU(0.), myTolV(0.)
{
  Load(S);
}






inline GeomAdaptor_Surface::GeomAdaptor_Surface(const opencascade::handle<Geom_Surface>& S,
                                                const Standard_Real UFirst,
                                                const Standard_Real ULast,
                                                const Standard_Real VFirst,
                                                const Standard_Real VLast,
                                                const Standard_Real TolU,
                                                const Standard_Real TolV)
{
  Load(S,UFirst,ULast,VFirst,VLast,TolU,TolV);
}






inline void GeomAdaptor_Surface::Load(const opencascade::handle<Geom_Surface>& S)
{
  if ( S.IsNull()) Standard_NullObject::Raise("GeomAdaptor_Surface::Load");

  Standard_Real U1,U2,V1,V2;
  S->Bounds(U1,U2,V1,V2);
  load(S,U1,U2,V1,V2);
}






inline void GeomAdaptor_Surface::Load(const opencascade::handle<Geom_Surface>& S,
                               const Standard_Real UFirst,
                               const Standard_Real ULast,
                               const Standard_Real VFirst,
                               const Standard_Real VLast,
                               const Standard_Real TolU,
                               const Standard_Real TolV)
{
  if ( S.IsNull()) Standard_NullObject::Raise("GeomAdaptor_Surface::Load");

  if(UFirst>ULast || VFirst>VLast)
    Standard_ConstructionError::Raise("GeomAdaptor_Surface::Load");

  load(S,UFirst,ULast,VFirst,VLast,TolU,TolV);
}







inline const opencascade::handle<Geom_Surface>& GeomAdaptor_Surface::Surface() const {
  return mySurface;
}






inline Standard_Real GeomAdaptor_Surface::FirstUParameter() const {
  return myUFirst;
}






inline Standard_Real GeomAdaptor_Surface::LastUParameter() const {
  return myULast;
}






inline Standard_Real GeomAdaptor_Surface::FirstVParameter() const {
  return myVFirst;
}






inline Standard_Real GeomAdaptor_Surface::LastVParameter() const {
  return myVLast;
}






inline GeomAbs_SurfaceType GeomAdaptor_Surface::GetType() const {
  return mySurfaceType;
}

















class Standard_OutOfRange;
class Standard_DomainError;
class Standard_NoSuchObject;
class TopoDS_Face;
class GeomAdaptor_Surface;
class gp_Trsf;
class Adaptor3d_HSurface;
class gp_Pnt;
class gp_Vec;
class gp_Pln;
class gp_Cylinder;
class gp_Cone;
class gp_Sphere;
class gp_Torus;
class Geom_BezierSurface;
class Geom_BSplineSurface;
class gp_Ax1;
class gp_Dir;
class Adaptor3d_HCurve;














class BRepAdaptor_Surface  : public Adaptor3d_Surface
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  __declspec( dllexport ) BRepAdaptor_Surface();
  
  
  
  
  
  __declspec( dllexport ) BRepAdaptor_Surface(const TopoDS_Face& F, const Standard_Boolean R = true);
  
  
  __declspec( dllexport ) void Initialize (const TopoDS_Face& F, const Standard_Boolean Restriction = true);
  
  
  __declspec( dllexport ) const GeomAdaptor_Surface& Surface() const;
  
  
  __declspec( dllexport ) GeomAdaptor_Surface& ChangeSurface();
  
  
  __declspec( dllexport ) const gp_Trsf& Trsf() const;
  
  
  __declspec( dllexport ) const TopoDS_Face& Face() const;
  
  
  __declspec( dllexport ) Standard_Real Tolerance() const;
  
    Standard_Real FirstUParameter() const override;
  
    Standard_Real LastUParameter() const override;
  
    Standard_Real FirstVParameter() const override;
  
    Standard_Real LastVParameter() const override;
  
    GeomAbs_Shape UContinuity() const override;
  
    GeomAbs_Shape VContinuity() const override;
  
  
  
  
    Standard_Integer NbUIntervals (const GeomAbs_Shape S) const override;
  
  
  
  
    Standard_Integer NbVIntervals (const GeomAbs_Shape S) const override;
  
  
  
  __declspec( dllexport ) void UIntervals (TColStd_Array1OfReal& T, const GeomAbs_Shape S) const override;
  
  
  
  __declspec( dllexport ) void VIntervals (TColStd_Array1OfReal& T, const GeomAbs_Shape S) const override;
  
  
  
  
  
  
  __declspec( dllexport ) opencascade::handle<Adaptor3d_HSurface> UTrim (const Standard_Real First, const Standard_Real Last, const Standard_Real Tol) const override;
  
  
  
  
  
  __declspec( dllexport ) opencascade::handle<Adaptor3d_HSurface> VTrim (const Standard_Real First, const Standard_Real Last, const Standard_Real Tol) const override;
  
    Standard_Boolean IsUClosed() const override;
  
    Standard_Boolean IsVClosed() const override;
  
    Standard_Boolean IsUPeriodic() const override;
  
    Standard_Real UPeriod() const override;
  
    Standard_Boolean IsVPeriodic() const override;
  
    Standard_Real VPeriod() const override;
  
  
  __declspec( dllexport ) gp_Pnt Value (const Standard_Real U, const Standard_Real V) const override;
  
  
  __declspec( dllexport ) void D0 (const Standard_Real U, const Standard_Real V, gp_Pnt& P) const override;
  
  
  
  
  
  __declspec( dllexport ) void D1 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V) const override;
  
  
  
  
  
  __declspec( dllexport ) void D2 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV) const override;
  
  
  
  
  
  __declspec( dllexport ) void D3 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV, gp_Vec& D3U, gp_Vec& D3V, gp_Vec& D3UUV, gp_Vec& D3UVV) const override;
  
  
  
  
  
  
  __declspec( dllexport ) gp_Vec DN (const Standard_Real U, const Standard_Real V, const Standard_Integer Nu, const Standard_Integer Nv) const override;
  
  
  
    Standard_Real UResolution (const Standard_Real R3d) const override;
  
  
  
    Standard_Real VResolution (const Standard_Real R3d) const override;
  
  
  
  
  
    GeomAbs_SurfaceType GetType() const override;
  
  __declspec( dllexport ) gp_Pln Plane() const override;
  
  __declspec( dllexport ) gp_Cylinder Cylinder() const override;
  
  __declspec( dllexport ) gp_Cone Cone() const override;
  
  __declspec( dllexport ) gp_Sphere Sphere() const override;
  
  __declspec( dllexport ) gp_Torus Torus() const override;
  
    Standard_Integer UDegree() const override;
  
    Standard_Integer NbUPoles() const override;
  
    Standard_Integer VDegree() const override;
  
    Standard_Integer NbVPoles() const override;
  
    Standard_Integer NbUKnots() const override;
  
    Standard_Integer NbVKnots() const override;
  
    Standard_Boolean IsURational() const override;
  
    Standard_Boolean IsVRational() const override;
  
  __declspec( dllexport ) opencascade::handle<Geom_BezierSurface> Bezier() const override;
  

  
  
  
  
  __declspec( dllexport ) opencascade::handle<Geom_BSplineSurface> BSpline() const override;
  
  __declspec( dllexport ) gp_Ax1 AxeOfRevolution() const override;
  
  __declspec( dllexport ) gp_Dir Direction() const override;
  
  
  
  
  
  __declspec( dllexport ) opencascade::handle<Adaptor3d_HCurve> BasisCurve() const override;
  
  __declspec( dllexport ) opencascade::handle<Adaptor3d_HSurface> BasisSurface() const override;
  
  __declspec( dllexport ) Standard_Real OffsetValue() const override;




protected:





private:



  GeomAdaptor_Surface mySurf;
  gp_Trsf myTrsf;
  TopoDS_Face myFace;


};
























inline Standard_Real BRepAdaptor_Surface::FirstUParameter() const 
{
  return mySurf.FirstUParameter();
}






inline Standard_Real BRepAdaptor_Surface::LastUParameter() const 
{
  return mySurf.LastUParameter();
}






inline Standard_Real BRepAdaptor_Surface::FirstVParameter() const 
{
  return mySurf.FirstVParameter();
}






inline Standard_Real BRepAdaptor_Surface::LastVParameter() const 
{
  return mySurf.LastVParameter();
}






inline GeomAbs_Shape BRepAdaptor_Surface::UContinuity() const 
{
  return mySurf.UContinuity();
}






inline GeomAbs_Shape  BRepAdaptor_Surface::VContinuity() const 
{
  return mySurf.VContinuity();
}






inline Standard_Integer BRepAdaptor_Surface::NbUIntervals
  (const GeomAbs_Shape S) const 
{
  return mySurf.NbUIntervals(S);
}






inline Standard_Integer  BRepAdaptor_Surface::NbVIntervals
  (const GeomAbs_Shape S) const 
{
  return mySurf.NbVIntervals(S);
}






inline Standard_Boolean  BRepAdaptor_Surface::IsUClosed()const 
{
  return mySurf.IsUClosed();
}






inline Standard_Boolean  BRepAdaptor_Surface::IsVClosed()const 
{
  return mySurf.IsVClosed();
}






inline Standard_Boolean  BRepAdaptor_Surface::IsUPeriodic()const 
{
  return mySurf.IsUPeriodic();
}






inline Standard_Real  BRepAdaptor_Surface::UPeriod()const 
{
  return mySurf.UPeriod();
}






inline Standard_Boolean  BRepAdaptor_Surface::IsVPeriodic()const 
{
  return mySurf.IsVPeriodic();
}






inline Standard_Real  BRepAdaptor_Surface::VPeriod()const 
{
  return mySurf.VPeriod();
}






inline Standard_Real  BRepAdaptor_Surface::UResolution(const Standard_Real R3d)const 
{
  return mySurf.UResolution(R3d);
}






inline Standard_Real  BRepAdaptor_Surface::VResolution(const Standard_Real R3d)const 
{
  return mySurf.VResolution(R3d);
}






inline GeomAbs_SurfaceType  BRepAdaptor_Surface::GetType()const 
{
  return mySurf.GetType();
}





inline Standard_Integer  BRepAdaptor_Surface::UDegree()const 
{
  return mySurf.UDegree();
}







inline Standard_Integer  BRepAdaptor_Surface::NbUPoles()const 
{
  return mySurf.NbUPoles();
}






inline Standard_Integer  BRepAdaptor_Surface::VDegree()const 
{
  return mySurf.VDegree();
}







inline Standard_Integer  BRepAdaptor_Surface::NbVPoles()const 
{
  return mySurf.NbVPoles();
}






inline Standard_Integer  BRepAdaptor_Surface::NbUKnots()const 
{
  return mySurf.NbUKnots();
}








inline Standard_Integer  BRepAdaptor_Surface::NbVKnots()const 
{
  return mySurf.NbVKnots();
}







inline Standard_Boolean  BRepAdaptor_Surface::IsURational()const 
{
  return mySurf.IsURational();
}






inline Standard_Boolean  BRepAdaptor_Surface::IsVRational()const 
{
  return mySurf.IsVRational();
}



























































































class Standard_ConstructionError;
class gp_Ax2;
class gp_Pnt;
class gp_Dir;
class gp_Ax1;
class gp_Trsf;
class gp_Vec;




































class gp_Ax3 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
  gp_Ax3();
  
  
  
  gp_Ax3(const gp_Ax2& A);
  
  
  
  
  
  gp_Ax3(const gp_Pnt& P, const gp_Dir& N, const gp_Dir& Vx);
  

  
  
  __declspec( dllexport ) gp_Ax3(const gp_Pnt& P, const gp_Dir& V);
  
  
  void XReverse();
  
  
  void YReverse();
  
  
  void ZReverse();
  
  
  
  
  
  
  
  
  
  
  
  
  
  void SetAxis (const gp_Ax1& A1);
  

  
  
  
  
  
  
  
  
  
  void SetDirection (const gp_Dir& V);
  

  
  void SetLocation (const gp_Pnt& P);
  

  
  
  
  
  
  
  void SetXDirection (const gp_Dir& Vx);
  

  
  
  
  
  
  
    void SetYDirection (const gp_Dir& Vy);
  

  
  
  
    Standard_Real Angle (const gp_Ax3& Other) const;
  

  
  
    const gp_Ax1& Axis() const;
  
  
  
  
  
  
  
  gp_Ax2 Ax2() const;
  

  
    const gp_Dir& Direction() const;
  

  
    const gp_Pnt& Location() const;
  

  
    const gp_Dir& XDirection() const;
  

  
    const gp_Dir& YDirection() const;
  
  
  
    Standard_Boolean Direct() const;
  

  
  
  
  
  
  
  
    Standard_Boolean IsCoplanar (const gp_Ax3& Other, const Standard_Real LinearTolerance, const Standard_Real AngularTolerance) const;
  
  
  
  
  
  
  
    Standard_Boolean IsCoplanar (const gp_Ax1& A1, const Standard_Real LinearTolerance, const Standard_Real AngularTolerance) const;
  
  __declspec( dllexport ) void Mirror (const gp_Pnt& P);
  

  
  
  
  
  
  
  
  __declspec( dllexport ) gp_Ax3 Mirrored (const gp_Pnt& P) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax1& A1);
  

  
  
  
  
  
  
  
  __declspec( dllexport ) gp_Ax3 Mirrored (const gp_Ax1& A1) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax2& A2);
  

  
  
  
  
  
  
  
  
  __declspec( dllexport ) gp_Ax3 Mirrored (const gp_Ax2& A2) const;
  
  void Rotate (const gp_Ax1& A1, const Standard_Real Ang);
  

  
  
  
  gp_Ax3 Rotated (const gp_Ax1& A1, const Standard_Real Ang) const;
  
  void Scale (const gp_Pnt& P, const Standard_Real S);
  

  
  
  
  
  
  
  
  gp_Ax3 Scaled (const gp_Pnt& P, const Standard_Real S) const;
  
  void Transform (const gp_Trsf& T);
  

  
  
  
  
  
  gp_Ax3 Transformed (const gp_Trsf& T) const;
  
  void Translate (const gp_Vec& V);
  

  
  
  gp_Ax3 Translated (const gp_Vec& V) const;
  
  void Translate (const gp_Pnt& P1, const gp_Pnt& P2);
  

  
  
  gp_Ax3 Translated (const gp_Pnt& P1, const gp_Pnt& P2) const;




protected:





private:



  gp_Ax1 axis;
  gp_Dir vydir;
  gp_Dir vxdir;


};












































class Standard_ConstructionError;
class gp_Pnt;
class gp_Dir;
class gp_Ax1;
class gp_Trsf;
class gp_Vec;































class gp_Ax2 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
    gp_Ax2();
  

  
  
  
  
  
  
    gp_Ax2(const gp_Pnt& P, const gp_Dir& N, const gp_Dir& Vx);
  

  
  
  
  __declspec( dllexport ) gp_Ax2(const gp_Pnt& P, const gp_Dir& V);
  
  
  
  
  
  
  
  
  
  void SetAxis (const gp_Ax1& A1);
  

  
  
  
  
  
  
  
  void SetDirection (const gp_Dir& V);
  

  
  void SetLocation (const gp_Pnt& P);
  

  
  
  
  
  
  
  
  void SetXDirection (const gp_Dir& Vx);
  

  
  
  
  
  
  
  
  
  void SetYDirection (const gp_Dir& Vy);
  

  
  
  
  Standard_Real Angle (const gp_Ax2& Other) const;
  

  
  
    const gp_Ax1& Axis() const;
  

  
    const gp_Dir& Direction() const;
  

  
    const gp_Pnt& Location() const;
  

  
    const gp_Dir& XDirection() const;
  

  
    const gp_Dir& YDirection() const;
  
  Standard_Boolean IsCoplanar (const gp_Ax2& Other, const Standard_Real LinearTolerance, const Standard_Real AngularTolerance) const;
  

  
  
  
  
  
    Standard_Boolean IsCoplanar (const gp_Ax1& A1, const Standard_Real LinearTolerance, const Standard_Real AngularTolerance) const;
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void Mirror (const gp_Pnt& P);
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) gp_Ax2 Mirrored (const gp_Pnt& P) const;
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void Mirror (const gp_Ax1& A1);
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) gp_Ax2 Mirrored (const gp_Ax1& A1) const;
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void Mirror (const gp_Ax2& A2);
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) gp_Ax2 Mirrored (const gp_Ax2& A2) const;
  
    void Rotate (const gp_Ax1& A1, const Standard_Real Ang);
  

  
  
  
    gp_Ax2 Rotated (const gp_Ax1& A1, const Standard_Real Ang) const;
  
    void Scale (const gp_Pnt& P, const Standard_Real S);
  

  
  
  
  
  
  
  
    gp_Ax2 Scaled (const gp_Pnt& P, const Standard_Real S) const;
  
    void Transform (const gp_Trsf& T);
  

  
  
  
  
  
    gp_Ax2 Transformed (const gp_Trsf& T) const;
  
    void Translate (const gp_Vec& V);
  

  
  
    gp_Ax2 Translated (const gp_Vec& V) const;
  
    void Translate (const gp_Pnt& P1, const gp_Pnt& P2);
  

  
  
    gp_Ax2 Translated (const gp_Pnt& P1, const gp_Pnt& P2) const;




protected:





private:



  gp_Ax1 axis;
  gp_Dir vydir;
  gp_Dir vxdir;


};





















inline gp_Ax2::gp_Ax2() : vydir(0.,1.,0.), vxdir(1.,0.,0.)
{ }

inline gp_Ax2::gp_Ax2(const gp_Pnt& P,
		      const gp_Dir& N,
		      const gp_Dir& Vx) : axis(P, N), vydir(N), vxdir(N)
{
  vxdir.CrossCross(Vx, N);
  vydir.Cross(vxdir);
}

inline void gp_Ax2::SetAxis (const gp_Ax1&  A1)
{
  Standard_Real a =  A1.Direction() * vxdir;
  if(Abs(Abs(a) - 1.) <= Precision::Angular()) {
    if(a > 0.) {
      vxdir = vydir;
      vydir = axis.Direction();
      axis = A1;
    }
    else {
      vxdir = axis.Direction();
      axis = A1;
    }
  }
  else {
    axis = A1;
    vxdir = axis.Direction().CrossCrossed (vxdir, axis.Direction());
    vydir = axis.Direction().Crossed      (vxdir);
  }
}

inline void gp_Ax2::SetDirection (const gp_Dir&  V)
{ 
  Standard_Real a =  V * vxdir;
  if(Abs(Abs(a) - 1.) <= Precision::Angular()) {
    if(a > 0.) {
      vxdir = vydir;
      vydir = axis.Direction();
      axis.SetDirection (V);
    }
    else {
      vxdir = axis.Direction();
      axis.SetDirection (V);
    }
  }
  else {
    axis.SetDirection (V);
    vxdir = V.CrossCrossed (vxdir, V);
    vydir = V.Crossed (vxdir);
  }
}

inline void gp_Ax2::SetLocation (const gp_Pnt& P)
{ axis.SetLocation(P); }

inline void gp_Ax2::SetXDirection (const gp_Dir&  Vx)
{
  vxdir = axis.Direction().CrossCrossed (Vx, axis.Direction());
  vydir = axis.Direction().Crossed      (vxdir);
}

inline void gp_Ax2::SetYDirection (const gp_Dir& Vy)
{
  vxdir = Vy.Crossed (axis.Direction());
  vydir = (axis.Direction()).Crossed (vxdir);
}

inline Standard_Real gp_Ax2::Angle (const gp_Ax2& Other) const
{ return axis.Angle (Other.axis); }

inline const gp_Ax1& gp_Ax2::Axis () const
{ return axis; }

inline const gp_Dir& gp_Ax2::Direction () const
{ return axis.Direction(); }

inline const gp_Pnt& gp_Ax2::Location () const
{ return axis.Location(); }

inline const gp_Dir& gp_Ax2::XDirection () const
{ return vxdir; }

inline const gp_Dir& gp_Ax2::YDirection () const
{ return vydir; }

inline Standard_Boolean gp_Ax2::IsCoplanar 
(const gp_Ax2& Other,
 const Standard_Real LinearTolerance,
 const Standard_Real AngularTolerance) const
{
  const gp_Dir& DD =       axis.Direction();
  const gp_Pnt& PP =       axis.Location ();
  const gp_Pnt& OP = Other.axis.Location ();
  Standard_Real D1 = (DD.X() * (OP.X() - PP.X()) + 
		      DD.Y() * (OP.Y() - PP.Y()) + 
		      DD.Z() * (OP.Z() - PP.Z()));
  if (D1 < 0 ) D1 = - D1;
  return (D1 <= LinearTolerance &&
	  axis.IsParallel (Other.axis, AngularTolerance));
}

inline Standard_Boolean gp_Ax2::IsCoplanar
(const gp_Ax1& A,
 const Standard_Real LinearTolerance,
 const Standard_Real AngularTolerance) const
{
  const gp_Dir& DD = axis.Direction();
  const gp_Pnt& PP = axis.Location ();
  const gp_Pnt& AP = A   .Location ();
  Standard_Real D1 = (DD.X() * (AP.X() - PP.X()) + 
		      DD.Y() * (AP.Y() - PP.Y()) + 
		      DD.Z() * (AP.Z() - PP.Z()));
  if (D1 < 0) D1 = - D1;
  return (D1 <= LinearTolerance &&
	  axis.IsNormal (A, AngularTolerance));
}

inline void gp_Ax2::Rotate(const gp_Ax1& A1, const Standard_Real Ang)
{
  gp_Pnt Temp = axis.Location();
  Temp.Rotate  (A1, Ang);
  axis.SetLocation (Temp);
  vxdir.Rotate (A1, Ang);
  vydir.Rotate (A1, Ang);
  axis.SetDirection (vxdir.Crossed (vydir));
}

inline gp_Ax2 gp_Ax2::Rotated(const gp_Ax1& A1,
			      const Standard_Real Ang) const
{
  gp_Ax2 Temp = *this;
  Temp.Rotate (A1, Ang);
  return Temp;
} 

inline void gp_Ax2::Scale (const gp_Pnt& P, const Standard_Real S)
{
  gp_Pnt Temp = axis.Location();
  Temp.Scale (P, S);
  axis.SetLocation (Temp);
  if (S < 0.0) {
    vxdir.Reverse ();
    vydir.Reverse ();
  }
}

inline gp_Ax2 gp_Ax2::Scaled(const gp_Pnt& P,
			     const Standard_Real S) const 
{
  gp_Ax2 Temp = *this;
  Temp.Scale (P, S);
  return Temp;
}

inline void gp_Ax2::Transform (const gp_Trsf& T)
{
  gp_Pnt Temp = axis.Location();
  Temp.Transform (T);
  axis.SetLocation (Temp);
  vxdir.Transform (T);
  vydir.Transform (T);
  axis.SetDirection (vxdir.Crossed (vydir));
}

inline gp_Ax2 gp_Ax2::Transformed(const gp_Trsf& T) const
{
  gp_Ax2 Temp = *this;
  Temp.Transform (T);
  return Temp;
}

inline void gp_Ax2::Translate (const gp_Vec& V)
{ axis.Translate (V); }

inline gp_Ax2 gp_Ax2::Translated(const gp_Vec& V) const
{
  gp_Ax2 Temp = *this;
  Temp.Translate (V);
  return Temp;
}

inline void gp_Ax2::Translate (const gp_Pnt& P1, const gp_Pnt& P2)
{ axis.Translate (P1, P2); }

inline gp_Ax2 gp_Ax2::Translated (const gp_Pnt& P1,
				  const gp_Pnt& P2)  const
{
  gp_Ax2 Temp = *this;
  Temp.Translate (P1, P2);
  return Temp;
}











inline gp_Ax3::gp_Ax3() : vydir(0.,1.,0.), vxdir(1.,0.,0.)
{ }

inline gp_Ax3::gp_Ax3(const gp_Ax2& A) :
axis(A.Axis()),
vydir(A.YDirection()),
vxdir(A.XDirection())
{ }

inline gp_Ax3::gp_Ax3(const gp_Pnt& P, const gp_Dir& N, const gp_Dir& Vx) :
axis(P, N), vydir(N), vxdir(N)
{
  vxdir.CrossCross(Vx, N);
  vydir.Cross(vxdir);
}

inline void  gp_Ax3::XReverse()
{ vxdir.Reverse(); }

inline void  gp_Ax3::YReverse()
{ vydir.Reverse(); }

inline void  gp_Ax3::ZReverse()
{ axis.Reverse();  }

inline void  gp_Ax3::SetAxis(const gp_Ax1& A1)
{
  Standard_Boolean direct = Direct();
  axis = A1;
  vxdir = axis.Direction().CrossCrossed (vxdir, axis.Direction());
  if(direct) { vydir = axis.Direction().Crossed(vxdir); }
  else       { vydir = vxdir.Crossed(axis.Direction()); }
}

inline void  gp_Ax3::SetDirection(const gp_Dir& V)
{
  Standard_Boolean direct = Direct();
  axis.SetDirection (V);
  vxdir = V.CrossCrossed (vxdir, V);
  if (direct) { vydir = V.Crossed (vxdir); }
  else        { vydir = vxdir.Crossed (V); }
}

inline void  gp_Ax3::SetLocation(const gp_Pnt& P)
{  axis.SetLocation(P); }

inline void  gp_Ax3::SetXDirection(const gp_Dir& Vx)
{
  Standard_Boolean direct = Direct();
  vxdir = axis.Direction().CrossCrossed (Vx, axis.Direction());
  if (direct) { vydir = axis.Direction().Crossed(vxdir); }
  else        { vydir = vxdir.Crossed(axis.Direction()); }
}

inline void  gp_Ax3::SetYDirection(const gp_Dir& Vy)
{
  Standard_Boolean direct = Direct();
  vxdir = Vy.Crossed (axis.Direction());
  vydir = (axis.Direction()).Crossed (vxdir);
  if (!direct) { vxdir.Reverse(); }
}

inline Standard_Real  gp_Ax3::Angle(const gp_Ax3& Other) const 
{ return axis.Angle (Other.axis); }

inline const gp_Ax1&  gp_Ax3::Axis()const
{  return axis; }

inline gp_Ax2  gp_Ax3::Ax2()const 
{
  gp_Dir zz = axis.Direction();
  if (!Direct()) { zz.Reverse(); }
  return gp_Ax2 (axis.Location(),zz,vxdir);
}

inline const gp_Dir&  gp_Ax3::Direction()const
{   return axis.Direction(); }

inline const gp_Pnt&  gp_Ax3::Location()const
{   return axis.Location(); }

inline const gp_Dir&  gp_Ax3::XDirection()const
{  return vxdir;  }

inline const gp_Dir&  gp_Ax3::YDirection()const
{  return vydir; }

inline Standard_Boolean  gp_Ax3::Direct()const 
{ return (vxdir.Crossed(vydir).Dot(axis.Direction()) > 0.); }

inline Standard_Boolean gp_Ax3::IsCoplanar
(const gp_Ax3& Other, 
 const Standard_Real LinearTolerance, 
 const Standard_Real AngularTolerance)const 
{
  gp_Vec vec(axis.Location(),Other.axis.Location());
  Standard_Real D1 = gp_Vec(axis.Direction()      ).Dot(vec);
  if (D1 < 0) D1 = - D1;
  Standard_Real D2 = gp_Vec(Other.axis.Direction()).Dot(vec);
  if (D2 < 0) D2 = - D2;
  return (D1 <= LinearTolerance && D2 <= LinearTolerance &&
          axis.IsParallel (Other.axis, AngularTolerance));
}

inline Standard_Boolean gp_Ax3::IsCoplanar
(const gp_Ax1& A1, 
 const Standard_Real LinearTolerance, 
 const Standard_Real AngularTolerance)const 
{
  gp_Vec vec(axis.Location(),A1.Location());
  Standard_Real D1 = gp_Vec(axis.Direction()).Dot(vec);
  if (D1 < 0) D1 = - D1;
  Standard_Real D2 = (gp_Vec(A1.Direction()).Crossed(vec)).Magnitude();
  if (D2 < 0) D2 = - D2;
  return (D1 <= LinearTolerance && D2 <= LinearTolerance &&
          axis.IsNormal (A1, AngularTolerance));
}

inline void  gp_Ax3::Rotate(const gp_Ax1& A1,
			    const Standard_Real Ang)
{
  axis.Rotate (A1,Ang);
  vxdir.Rotate (A1,Ang);
  vydir.Rotate (A1,Ang);
}

inline gp_Ax3  gp_Ax3::Rotated(const gp_Ax1& A1,
			       const Standard_Real Ang)const
{
  gp_Ax3 Temp = *this;
  Temp.Rotate (A1,Ang);
  return Temp;
}

inline void  gp_Ax3::Scale(const gp_Pnt& P, const Standard_Real S)
{
  axis.Scale (P,S);
  if (S < 0.) {
    vxdir.Reverse ();
    vydir.Reverse ();
  }
}

inline gp_Ax3  gp_Ax3::Scaled(const gp_Pnt& P,
			      const Standard_Real S)const
{
  gp_Ax3 Temp = *this;
  Temp.Scale (P,S);
  return Temp;
}

inline void  gp_Ax3::Transform(const gp_Trsf& T)
{
  axis.Transform (T);
  vxdir.Transform (T);
  vydir.Transform (T);
}

inline gp_Ax3  gp_Ax3::Transformed(const gp_Trsf& T)const
{
  gp_Ax3 Temp = *this;
  Temp.Transform (T);
  return Temp;
}

inline void  gp_Ax3::Translate(const gp_Vec& V)
{ axis.Translate (V); }

inline gp_Ax3  gp_Ax3::Translated(const gp_Vec& V)const
{
  gp_Ax3 Temp = *this;
  Temp.Translate (V);
  return Temp;
}

inline void  gp_Ax3::Translate(const gp_Pnt& P1, const gp_Pnt& P2)
{ Translate(gp_Vec(P1,P2)); }

inline gp_Ax3  gp_Ax3::Translated(const gp_Pnt& P1, const gp_Pnt& P2)const
{ return Translated(gp_Vec(P1,P2)); }












class Standard_ConstructionError;
class gp_Ax3;
class gp_Pnt;
class gp_Dir;
class gp_Ax1;
class gp_Lin;
class gp_Ax2;
class gp_Trsf;
class gp_Vec;























class gp_Pln 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
  
    gp_Pln();
  

  
  
  
  
  
  
    gp_Pln(const gp_Ax3& A3);
  

  
  
  __declspec( dllexport ) gp_Pln(const gp_Pnt& P, const gp_Dir& V);
  

  
  
  
  __declspec( dllexport ) gp_Pln(const Standard_Real A, const Standard_Real B, const Standard_Real C, const Standard_Real D);
  

  
  
    void Coefficients (Standard_Real& A, Standard_Real& B, Standard_Real& C, Standard_Real& D) const;
  
  
  
  
  
    void SetAxis (const gp_Ax1& A1);
  
  
    void SetLocation (const gp_Pnt& Loc);
  
  
    void SetPosition (const gp_Ax3& A3);
  
  
  
    void UReverse();
  
  
  
    void VReverse();
  
  
    Standard_Boolean Direct() const;
  
  
    const gp_Ax1& Axis() const;
  
  
    const gp_Pnt& Location() const;
  
  
    const gp_Ax3& Position() const;
  
  
    Standard_Real Distance (const gp_Pnt& P) const;
  
  
    Standard_Real Distance (const gp_Lin& L) const;
  
  
    Standard_Real Distance (const gp_Pln& Other) const;
  

  
    Standard_Real SquareDistance (const gp_Pnt& P) const;
  

  
    Standard_Real SquareDistance (const gp_Lin& L) const;
  

  
    Standard_Real SquareDistance (const gp_Pln& Other) const;
  
  
    gp_Ax1 XAxis() const;
  
  
    gp_Ax1 YAxis() const;
  
  
  
  
  
  
  
  
  
    Standard_Boolean Contains (const gp_Pnt& P, const Standard_Real LinearTolerance) const;
  
  
  
  
  
  
  
  
  
    Standard_Boolean Contains (const gp_Lin& L, const Standard_Real LinearTolerance, const Standard_Real AngularTolerance) const;
  
  __declspec( dllexport ) void Mirror (const gp_Pnt& P);
  

  
  
  
  
  
  __declspec( dllexport ) gp_Pln Mirrored (const gp_Pnt& P) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax1& A1);
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) gp_Pln Mirrored (const gp_Ax1& A1) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax2& A2);
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) gp_Pln Mirrored (const gp_Ax2& A2) const;
  
    void Rotate (const gp_Ax1& A1, const Standard_Real Ang);
  

  
  
    gp_Pln Rotated (const gp_Ax1& A1, const Standard_Real Ang) const;
  
    void Scale (const gp_Pnt& P, const Standard_Real S);
  

  
    gp_Pln Scaled (const gp_Pnt& P, const Standard_Real S) const;
  
    void Transform (const gp_Trsf& T);
  

  
  
  
  
  
    gp_Pln Transformed (const gp_Trsf& T) const;
  
    void Translate (const gp_Vec& V);
  

  
  
    gp_Pln Translated (const gp_Vec& V) const;
  
    void Translate (const gp_Pnt& P1, const gp_Pnt& P2);
  

  
    gp_Pln Translated (const gp_Pnt& P1, const gp_Pnt& P2) const;




protected:





private:



  gp_Ax3 pos;


};





















inline gp_Pln::gp_Pln()
{ }

inline gp_Pln::gp_Pln(const gp_Ax3& A3) : pos(A3)
{ }

inline void gp_Pln::Coefficients (Standard_Real& A,
				  Standard_Real& B,
				  Standard_Real& C,
				  Standard_Real& D) const
{
  const gp_Dir& dir = pos.Direction();
  if (pos.Direct()) {
    A = dir.X();
    B = dir.Y();
    C = dir.Z();
  }
  else {
    A = -dir.X();
    B = -dir.Y();
    C = -dir.Z();
  }
  const gp_Pnt& P = pos.Location();
  D = -(A * P.X() + B * P.Y() + C * P.Z());
}

inline void gp_Pln::SetAxis (const gp_Ax1& A1)
{ pos.SetAxis (A1); }

inline void gp_Pln::SetLocation (const gp_Pnt& Loc)
{ pos.SetLocation (Loc); }

inline void gp_Pln::SetPosition (const gp_Ax3& A3)
{ pos = A3; }

inline void gp_Pln::UReverse ()
{ pos.XReverse(); }

inline void gp_Pln::VReverse ()
{ pos.YReverse(); }

inline Standard_Boolean gp_Pln::Direct()const
{ return pos.Direct(); }

inline const gp_Ax1& gp_Pln::Axis() const
{ return pos.Axis(); }

inline const gp_Pnt& gp_Pln::Location() const
{ return pos.Location(); }

inline   const gp_Ax3& gp_Pln::Position() const
{ return pos; }

inline Standard_Real gp_Pln::Distance(const gp_Pnt& P) const
{
  const gp_Pnt& loc = pos.Location ();
  const gp_Dir& dir = pos.Direction();
  Standard_Real D = (dir.X() * (P.X() - loc.X()) +
		     dir.Y() * (P.Y() - loc.Y()) +
		     dir.Z() * (P.Z() - loc.Z()));
  if (D < 0) D = - D;
  return D;
}

inline Standard_Real gp_Pln::Distance (const gp_Lin& L)  const
{
  Standard_Real D = 0.0;
  if ((pos.Direction()).IsNormal (L.Direction(), gp::Resolution())) {
    const gp_Pnt& P   = L  .Location ();
    const gp_Pnt& loc = pos.Location ();
    const gp_Dir& dir = pos.Direction();
    D = (dir.X() * (P.X() - loc.X()) +
	 dir.Y() * (P.Y() - loc.Y()) +
	 dir.Z() * (P.Z() - loc.Z()));
    if (D < 0) D = - D;
  }
  return D;
}

inline Standard_Real gp_Pln::Distance(const gp_Pln& Other) const
{
  Standard_Real D = 0.0;
  if ((pos.Direction()).IsParallel(Other.pos.Direction(), gp::Resolution())){
    const gp_Pnt& P = Other.pos.Location();
    const gp_Pnt& loc = pos.Location ();
    const gp_Dir& dir = pos.Direction();
    D = (dir.X() * (P.X() - loc.X()) +
	 dir.Y() * (P.Y() - loc.Y()) +
	 dir.Z() * (P.Z() - loc.Z()));
    if (D < 0) D = - D;
  }
  return D;
}

inline Standard_Real gp_Pln::SquareDistance (const gp_Pnt& P) const
{ Standard_Real D = Distance(P);   return D * D; }

inline Standard_Real gp_Pln::SquareDistance (const gp_Lin& L) const
{ Standard_Real D = Distance(L);   return D * D; }

inline Standard_Real gp_Pln::SquareDistance (const gp_Pln& Other) const
{ Standard_Real D = Distance(Other);   return D * D; }

inline gp_Ax1 gp_Pln::XAxis () const
{ return gp_Ax1 (pos.Location(), pos.XDirection()); }

inline gp_Ax1 gp_Pln::YAxis () const
{ return gp_Ax1 (pos.Location(), pos.YDirection()); }

inline Standard_Boolean gp_Pln::Contains
(const gp_Pnt& P,
 const Standard_Real LinearTolerance) const
{ return Distance(P) <= LinearTolerance; }

inline Standard_Boolean gp_Pln::Contains
(const gp_Lin& L,
 const Standard_Real LinearTolerance,
 const Standard_Real AngularTolerance) const
{ return Contains(L.Location(), LinearTolerance) && 
    pos.Direction().IsNormal(L.Direction(), AngularTolerance);
}

inline void gp_Pln::Rotate (const gp_Ax1& A1, const Standard_Real Ang)
{ pos.Rotate(A1, Ang); }

inline gp_Pln gp_Pln::Rotated (const gp_Ax1& A1,
			       const Standard_Real Ang) const
{
  gp_Pln Pl = *this;
  Pl.pos.Rotate(A1, Ang);
  return Pl;
} 

inline void gp_Pln::Scale (const gp_Pnt& P, const Standard_Real S)
{ pos.Scale(P, S); }

inline gp_Pln gp_Pln::Scaled (const gp_Pnt& P,
			      const Standard_Real S) const
{
  gp_Pln Pl = *this;
  Pl.pos.Scale(P, S);
  return Pl;
}

inline void gp_Pln::Transform (const gp_Trsf& T)
{ pos.Transform(T); }

inline gp_Pln gp_Pln::Transformed (const gp_Trsf& T) const
{
  gp_Pln Pl = *this;
  Pl.pos.Transform(T);            
  return Pl;
}

inline void gp_Pln::Translate (const gp_Vec& V)
{ pos.Translate(V); }

inline gp_Pln gp_Pln::Translated (const gp_Vec& V) const
{
  gp_Pln Pl = *this;
  Pl.pos.Translate(V);
  return Pl;
}

inline void gp_Pln::Translate (const gp_Pnt& P1, const gp_Pnt& P2)
{ pos.Translate(P1,P2); }

inline gp_Pln gp_Pln::Translated (const gp_Pnt& P1,
				  const gp_Pnt& P2) const
{
  gp_Pln Pl = *this;
  Pl.pos.Translate(P1, P2);
  return Pl;
}



































class Standard_ConstructionError;
class gp_Ax3;
class gp_Ax1;
class gp_Pnt;
class gp_Ax2;
class gp_Trsf;
class gp_Vec;























class gp_Cylinder 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Cylinder();
  
  
  
    gp_Cylinder(const gp_Ax3& A3, const Standard_Real Radius);
  
  
  
    void SetAxis (const gp_Ax1& A1);
  
  
    void SetLocation (const gp_Pnt& Loc);
  
  
    void SetPosition (const gp_Ax3& A3);
  
  
  
  
    void SetRadius (const Standard_Real R);
  
  
  
    void UReverse();
  
  
  
    void VReverse();
  
  
    Standard_Boolean Direct() const;
  
  
    const gp_Ax1& Axis() const;
  

  
  
  
  
  __declspec( dllexport ) void Coefficients (Standard_Real& A1, Standard_Real& A2, Standard_Real& A3, Standard_Real& B1, Standard_Real& B2, Standard_Real& B3, Standard_Real& C1, Standard_Real& C2, Standard_Real& C3, Standard_Real& D) const;
  
  
    const gp_Pnt& Location() const;
  

  
    const gp_Ax3& Position() const;
  
  
    Standard_Real Radius() const;
  
  
    gp_Ax1 XAxis() const;
  
  
    gp_Ax1 YAxis() const;
  
  __declspec( dllexport ) void Mirror (const gp_Pnt& P);
  

  
  
  
  __declspec( dllexport ) gp_Cylinder Mirrored (const gp_Pnt& P) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax1& A1);
  

  
  
  
  __declspec( dllexport ) gp_Cylinder Mirrored (const gp_Ax1& A1) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax2& A2);
  

  
  
  
  __declspec( dllexport ) gp_Cylinder Mirrored (const gp_Ax2& A2) const;
  
    void Rotate (const gp_Ax1& A1, const Standard_Real Ang);
  

  
  
    gp_Cylinder Rotated (const gp_Ax1& A1, const Standard_Real Ang) const;
  
    void Scale (const gp_Pnt& P, const Standard_Real S);
  

  
  
    gp_Cylinder Scaled (const gp_Pnt& P, const Standard_Real S) const;
  
    void Transform (const gp_Trsf& T);
  

  
    gp_Cylinder Transformed (const gp_Trsf& T) const;
  
    void Translate (const gp_Vec& V);
  

  
  
    gp_Cylinder Translated (const gp_Vec& V) const;
  
    void Translate (const gp_Pnt& P1, const gp_Pnt& P2);
  

  
    gp_Cylinder Translated (const gp_Pnt& P1, const gp_Pnt& P2) const;




protected:





private:



  gp_Ax3 pos;
  Standard_Real radius;


};



















inline gp_Cylinder::gp_Cylinder ()
{ radius = RealLast(); }

inline gp_Cylinder::gp_Cylinder (const gp_Ax3& A3,
				 const Standard_Real Radius) :
				 pos(A3),
				 radius (Radius)
{ if (Radius < 0.0) Standard_ConstructionError::Raise("");; }

inline void gp_Cylinder::SetAxis (const gp_Ax1& A1)
{ pos.SetAxis (A1); }

inline void gp_Cylinder::SetLocation (const gp_Pnt& Loc)
{ pos.SetLocation (Loc); }

inline void gp_Cylinder::SetPosition (const gp_Ax3& A3)
{ pos = A3; }

inline void gp_Cylinder::SetRadius (const Standard_Real R)
{
  if (R < 0.0) Standard_ConstructionError::Raise("");;
  radius = R;
}

inline void gp_Cylinder::UReverse()
{ pos.YReverse(); }

inline void gp_Cylinder::VReverse()
{ pos.ZReverse(); }

inline Standard_Boolean gp_Cylinder::Direct() const
{ return pos.Direct(); }

inline const gp_Ax1&  gp_Cylinder::Axis () const
{ return pos.Axis(); }

inline const gp_Pnt&  gp_Cylinder::Location () const
{ return pos.Location(); }

inline const gp_Ax3&  gp_Cylinder::Position () const
{ return pos; }

inline Standard_Real gp_Cylinder::Radius () const
{ return radius; }

inline gp_Ax1 gp_Cylinder::XAxis () const
{return gp_Ax1(pos.Location(), pos.XDirection());}

inline gp_Ax1 gp_Cylinder::YAxis () const
{return gp_Ax1(pos.Location(), pos.YDirection());}

inline void gp_Cylinder::Rotate (const gp_Ax1& A1,
				 const Standard_Real Ang)
{pos.Rotate(A1,Ang);}

inline gp_Cylinder gp_Cylinder::Rotated (const gp_Ax1& A1,
					 const Standard_Real Ang) const
{
  gp_Cylinder C = *this;
  C.pos.Rotate (A1, Ang);
  return C;
}

inline void gp_Cylinder::Scale (const gp_Pnt& P, const Standard_Real S)
{
  pos.Scale (P, S);      
  radius *= S;
  if (radius < 0) radius = - radius;
}

inline gp_Cylinder gp_Cylinder::Scaled (const gp_Pnt& P,
					const Standard_Real S) const
{
  gp_Cylinder C = *this;
  C.pos.Scale (P, S);
  C.radius *= S;
  if (C.radius < 0) C.radius = - C.radius;
  return C;
}

inline void gp_Cylinder::Transform (const gp_Trsf& T)
{
  pos.Transform (T);
  radius *= T.ScaleFactor();
  if (radius < 0) radius = - radius;
}

inline gp_Cylinder gp_Cylinder::Transformed (const gp_Trsf& T) const
{
  gp_Cylinder C = *this;
  C.pos.Transform (T);
  C.radius *= T.ScaleFactor();
  if (C.radius < 0) C.radius = - C.radius;
  return C;
}

inline void gp_Cylinder::Translate (const gp_Vec& V)
{ pos.Translate (V); }

inline gp_Cylinder gp_Cylinder::Translated (const gp_Vec& V) const
{
  gp_Cylinder C = *this;
  C.pos.Translate (V);
  return C;
}

inline void gp_Cylinder::Translate (const gp_Pnt& P1,
				    const gp_Pnt& P2)
{ pos.Translate (P1, P2); }

inline gp_Cylinder gp_Cylinder::Translated (const gp_Pnt& P1,
					    const gp_Pnt& P2) const
{
  gp_Cylinder C = *this;
  C.pos.Translate (P1, P2);
  return C;
}




































class Standard_ConstructionError;
class gp_Ax3;
class gp_Ax1;
class gp_Pnt;
class gp_Ax2;
class gp_Trsf;
class gp_Vec;
































class gp_Cone 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Cone();
  

  
  
  
  
  
  
  
  
    gp_Cone(const gp_Ax3& A3, const Standard_Real Ang, const Standard_Real Radius);
  
  
  
  
    void SetAxis (const gp_Ax1& A1);
  
  
    void SetLocation (const gp_Pnt& Loc);
  

  
  
    void SetPosition (const gp_Ax3& A3);
  

  
  
  
    void SetRadius (const Standard_Real R);
  

  
  
  
    void SetSemiAngle (const Standard_Real Ang);
  

  
  
    gp_Pnt Apex() const;
  
  
  
    void UReverse();
  
  
    void VReverse();
  
  
    Standard_Boolean Direct() const;
  
  
    const gp_Ax1& Axis() const;
  

  
  
  
  
  __declspec( dllexport ) void Coefficients (Standard_Real& A1, Standard_Real& A2, Standard_Real& A3, Standard_Real& B1, Standard_Real& B2, Standard_Real& B3, Standard_Real& C1, Standard_Real& C2, Standard_Real& C3, Standard_Real& D) const;
  
  
    const gp_Pnt& Location() const;
  

  
    const gp_Ax3& Position() const;
  

  
    Standard_Real RefRadius() const;
  
  
    Standard_Real SemiAngle() const;
  
  
    gp_Ax1 XAxis() const;
  
  
    gp_Ax1 YAxis() const;
  
  __declspec( dllexport ) void Mirror (const gp_Pnt& P);
  

  
  
  
  __declspec( dllexport ) gp_Cone Mirrored (const gp_Pnt& P) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax1& A1);
  

  
  
  
  __declspec( dllexport ) gp_Cone Mirrored (const gp_Ax1& A1) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax2& A2);
  

  
  
  
  __declspec( dllexport ) gp_Cone Mirrored (const gp_Ax2& A2) const;
  
    void Rotate (const gp_Ax1& A1, const Standard_Real Ang);
  

  
  
    gp_Cone Rotated (const gp_Ax1& A1, const Standard_Real Ang) const;
  
    void Scale (const gp_Pnt& P, const Standard_Real S);
  

  
  
    gp_Cone Scaled (const gp_Pnt& P, const Standard_Real S) const;
  
    void Transform (const gp_Trsf& T);
  

  
    gp_Cone Transformed (const gp_Trsf& T) const;
  
    void Translate (const gp_Vec& V);
  

  
  
    gp_Cone Translated (const gp_Vec& V) const;
  
    void Translate (const gp_Pnt& P1, const gp_Pnt& P2);
  

  
    gp_Cone Translated (const gp_Pnt& P1, const gp_Pnt& P2) const;




protected:





private:



  gp_Ax3 pos;
  Standard_Real radius;
  Standard_Real semiAngle;


};




















inline gp_Cone::gp_Cone () :
radius (RealLast()),
semiAngle (3.14159265358979323846 * 0.25)
{ }

inline gp_Cone::gp_Cone (const gp_Ax3& A3,
			 const Standard_Real Ang,
			 const Standard_Real Radius) :
			 pos(A3),
			 radius (Radius),
			 semiAngle (Ang)
{
  Standard_Real val = Ang;
  if (val < 0) val = - val;
  if (radius < 0. || val <= gp::Resolution() || 3.14159265358979323846 * 0.5 - val <= gp::Resolution()) Standard_ConstructionError::Raise("");;
}

inline void gp_Cone::SetAxis     (const gp_Ax1& A1)
{ pos.SetAxis (A1); }

inline void gp_Cone::SetLocation (const gp_Pnt& Loc)
{ pos.SetLocation (Loc); }

inline void gp_Cone::SetPosition (const gp_Ax3& A3)
{ pos = A3; }

inline void gp_Cone::SetRadius (const Standard_Real R)
{
  if (R < 0.0) Standard_ConstructionError::Raise("");;
  radius = R;
}

inline void gp_Cone::SetSemiAngle (const Standard_Real Ang)
{
  Standard_Real val = Ang;
  if (val < 0) val = - val;
  if (val <= gp::Resolution() || 3.14159265358979323846 * 0.5 - val <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  semiAngle = Ang;
}

inline gp_Pnt gp_Cone::Apex () const
{
  gp_XYZ Coord = pos.Direction ().XYZ ();
  Coord.Multiply (-radius / Tan (semiAngle));
  Coord.Add (pos.Location ().XYZ());
  return gp_Pnt (Coord);
}

inline void gp_Cone::UReverse()
{ pos.YReverse(); }

inline void gp_Cone::VReverse()
{ pos.ZReverse(); semiAngle = -semiAngle; }

inline Standard_Boolean gp_Cone::Direct() const
{ return pos.Direct(); }

inline const gp_Ax1& gp_Cone::Axis () const
{ return pos.Axis(); }

inline const gp_Pnt& gp_Cone::Location () const
{ return pos.Location(); }

inline const gp_Ax3& gp_Cone::Position () const
{ return pos; }

inline Standard_Real gp_Cone::RefRadius () const
{ return radius; }

inline Standard_Real gp_Cone::SemiAngle () const
{ return semiAngle; }

inline gp_Ax1 gp_Cone::XAxis () const
{ return gp_Ax1 (pos.Location(), pos.XDirection()); }

inline gp_Ax1 gp_Cone::YAxis () const
{ return gp_Ax1 (pos.Location(), pos.YDirection()); }

inline void gp_Cone::Rotate (const gp_Ax1& A1,
			     const Standard_Real Ang)
{pos.Rotate (A1, Ang);}

inline gp_Cone gp_Cone::Rotated (const gp_Ax1& A1,
				 const Standard_Real Ang) const
{
  gp_Cone C = *this;
  C.pos.Rotate (A1, Ang);
  return C;
}

inline void gp_Cone::Scale (const gp_Pnt& P,
			    const Standard_Real S)
{
  pos.Scale (P, S);      
  radius *= S;
  if (radius < 0) radius = - radius;
}

inline gp_Cone gp_Cone::Scaled (const gp_Pnt& P,
				const Standard_Real S) const
{
  gp_Cone C = *this;
  C.pos.Scale (P, S);
  C.radius *= S;
  if (C.radius < 0) C.radius = - C.radius;
  return C;
}

inline void gp_Cone::Transform (const gp_Trsf& T)
{
  pos.Transform (T);
  radius *= T.ScaleFactor();
  if (radius < 0) radius = - radius;
}

inline gp_Cone gp_Cone::Transformed (const gp_Trsf& T) const
{
  gp_Cone C = *this;
  C.pos.Transform (T);
  C.radius *= T.ScaleFactor();
  if (C.radius < 0) C.radius = - C.radius;
  return C;
}

inline void gp_Cone::Translate (const gp_Vec& V)
{ pos.Translate (V); }

inline gp_Cone gp_Cone::Translated (const gp_Vec& V) const
{
  gp_Cone C = *this;
  C.pos.Translate (V);
  return C;
}

inline void gp_Cone::Translate (const gp_Pnt& P1,
				const gp_Pnt& P2)
{ pos.Translate (P1, P2); }

inline gp_Cone gp_Cone::Translated (const gp_Pnt& P1,
				    const gp_Pnt& P2) const
{
  gp_Cone C = *this;
  C.pos.Translate (P1, P2);
  return C;
}



































class Standard_ConstructionError;
class gp_Ax3;
class gp_Pnt;
class gp_Ax1;
class gp_Ax2;
class gp_Trsf;
class gp_Vec;























class gp_Sphere 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Sphere();
  

  
  
  
  
  
    gp_Sphere(const gp_Ax3& A3, const Standard_Real Radius);
  
  
    void SetLocation (const gp_Pnt& Loc);
  
  
    void SetPosition (const gp_Ax3& A3);
  
  
  
  
  
    void SetRadius (const Standard_Real R);
  

  
    Standard_Real Area() const;
  

  
  
  
  
  __declspec( dllexport ) void Coefficients (Standard_Real& A1, Standard_Real& A2, Standard_Real& A3, Standard_Real& B1, Standard_Real& B2, Standard_Real& B3, Standard_Real& C1, Standard_Real& C2, Standard_Real& C3, Standard_Real& D) const;
  
  
  
    void UReverse();
  
  
  
    void VReverse();
  
  
  
    Standard_Boolean Direct() const;
  
  
  
    const gp_Pnt& Location() const;
  

  
    const gp_Ax3& Position() const;
  
  
    Standard_Real Radius() const;
  
  
    Standard_Real Volume() const;
  
  
    gp_Ax1 XAxis() const;
  
  
    gp_Ax1 YAxis() const;
  
  __declspec( dllexport ) void Mirror (const gp_Pnt& P);
  

  
  
  
  __declspec( dllexport ) gp_Sphere Mirrored (const gp_Pnt& P) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax1& A1);
  

  
  
  
  __declspec( dllexport ) gp_Sphere Mirrored (const gp_Ax1& A1) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax2& A2);
  

  
  
  
  __declspec( dllexport ) gp_Sphere Mirrored (const gp_Ax2& A2) const;
  
    void Rotate (const gp_Ax1& A1, const Standard_Real Ang);
  

  
  
    gp_Sphere Rotated (const gp_Ax1& A1, const Standard_Real Ang) const;
  
    void Scale (const gp_Pnt& P, const Standard_Real S);
  

  
  
    gp_Sphere Scaled (const gp_Pnt& P, const Standard_Real S) const;
  
    void Transform (const gp_Trsf& T);
  

  
    gp_Sphere Transformed (const gp_Trsf& T) const;
  
    void Translate (const gp_Vec& V);
  

  
  
    gp_Sphere Translated (const gp_Vec& V) const;
  
    void Translate (const gp_Pnt& P1, const gp_Pnt& P2);
  

  
    gp_Sphere Translated (const gp_Pnt& P1, const gp_Pnt& P2) const;




protected:





private:



  gp_Ax3 pos;
  Standard_Real radius;


};

















inline gp_Sphere::gp_Sphere () : radius (RealLast())
{ }

inline gp_Sphere::gp_Sphere (const gp_Ax3& A3,
			     const Standard_Real Radius) :
			     pos (A3),
			     radius (Radius)
{ if (Radius < 0.0) Standard_ConstructionError::Raise("");; }

inline void gp_Sphere::SetLocation (const gp_Pnt& Loc)
{ pos.SetLocation (Loc); }

inline void gp_Sphere::SetPosition (const gp_Ax3& A3)
{ pos = A3; }

inline void gp_Sphere::SetRadius (const Standard_Real R)
{
  if (R < 0.0) Standard_ConstructionError::Raise("");;
  radius = R;
}

inline Standard_Real gp_Sphere::Area () const
{ return 4.0 * 3.14159265358979323846 * radius * radius; }

inline void gp_Sphere::UReverse()
{ pos.YReverse(); }

inline void gp_Sphere::VReverse()
{ pos.ZReverse(); }

inline Standard_Boolean gp_Sphere::Direct() const
{ return pos.Direct(); }

inline const gp_Pnt& gp_Sphere::Location () const
{ return pos.Location(); }

inline const gp_Ax3& gp_Sphere::Position () const
{ return pos; }

inline Standard_Real gp_Sphere::Radius () const
{ return radius; }

inline Standard_Real gp_Sphere::Volume () const
{ return (4.0 * 3.14159265358979323846 * radius * radius * radius) / 3.0; }

inline gp_Ax1 gp_Sphere::XAxis () const
{ return gp_Ax1(pos.Location(), pos.XDirection()); }

inline gp_Ax1 gp_Sphere::YAxis () const
{ return gp_Ax1(pos.Location(), pos.YDirection()); }

inline void gp_Sphere::Rotate (const gp_Ax1& A1,
			       const Standard_Real Ang)
{ pos.Rotate (A1, Ang); }

inline gp_Sphere gp_Sphere::Rotated (const gp_Ax1& A1,
				     const Standard_Real Ang) const
{
  gp_Sphere C = *this;
  C.pos.Rotate (A1, Ang);
  return C;
}

inline void gp_Sphere::Scale (const gp_Pnt& P,
			      const Standard_Real S)
{
  pos.Scale (P, S);      
  radius *= S;
  if (radius < 0) radius = - radius;
}

inline gp_Sphere gp_Sphere::Scaled (const gp_Pnt& P,
				    const Standard_Real S) const
{
  gp_Sphere C = *this;
  C.pos.Scale (P, S);
  C.radius *= S;
  if (C.radius < 0) C.radius = - C.radius;
  return C;
}

inline void gp_Sphere::Transform (const gp_Trsf& T)
{
  pos.Transform (T);
  radius *= T.ScaleFactor();
  if (radius < 0) radius = - radius;
}

inline gp_Sphere gp_Sphere::Transformed (const gp_Trsf& T) const
{
  gp_Sphere C = *this;
  C.pos.Transform (T);
  C.radius *= T.ScaleFactor();
  if (C.radius < 0) C.radius = - C.radius;
  return C;
}

inline void gp_Sphere::Translate (const gp_Vec& V)
{ pos.Translate (V); }

inline gp_Sphere gp_Sphere::Translated (const gp_Vec& V) const
{
  gp_Sphere C = *this;
  C.pos.Translate (V);
  return C;
}

inline void gp_Sphere::Translate (const gp_Pnt& P1,
				  const gp_Pnt& P2)
{ pos.Translate (P1, P2); }

inline gp_Sphere gp_Sphere::Translated (const gp_Pnt& P1,
					const gp_Pnt& P2) const
{
  gp_Sphere C = *this;
  C.pos.Translate (P1, P2);
  return C;
}




































class Standard_ConstructionError;
class Standard_DimensionError;
class gp_Ax3;
class gp_Ax1;
class gp_Pnt;
class gp_Ax2;
class gp_Trsf;
class gp_Vec;



































class gp_Torus 
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    gp_Torus();
  

  
  
  
  
  
  
  
  
    gp_Torus(const gp_Ax3& A3, const Standard_Real MajorRadius, const Standard_Real MinorRadius);
  
  
  
  
  
  
  
    void SetAxis (const gp_Ax1& A1);
  
  
    void SetLocation (const gp_Pnt& Loc);
  
  
  
    void SetMajorRadius (const Standard_Real MajorRadius);
  
  
  
  
    void SetMinorRadius (const Standard_Real MinorRadius);
  
  
    void SetPosition (const gp_Ax3& A3);
  
  
    Standard_Real Area() const;
  
  
  
    void UReverse();
  
  
  
  void VReverse();
  
  
    Standard_Boolean Direct() const;
  
  
    const gp_Ax1& Axis() const;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) void Coefficients (TColStd_Array1OfReal& Coef) const;
  
  
    const gp_Pnt& Location() const;
  
  
    const gp_Ax3& Position() const;
  
  
    Standard_Real MajorRadius() const;
  
  
    Standard_Real MinorRadius() const;
  
  
    Standard_Real Volume() const;
  
  
    gp_Ax1 XAxis() const;
  
  
    gp_Ax1 YAxis() const;
  
  __declspec( dllexport ) void Mirror (const gp_Pnt& P);
  

  
  
  
  __declspec( dllexport ) gp_Torus Mirrored (const gp_Pnt& P) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax1& A1);
  

  
  
  
  __declspec( dllexport ) gp_Torus Mirrored (const gp_Ax1& A1) const;
  
  __declspec( dllexport ) void Mirror (const gp_Ax2& A2);
  

  
  
  
  __declspec( dllexport ) gp_Torus Mirrored (const gp_Ax2& A2) const;
  
    void Rotate (const gp_Ax1& A1, const Standard_Real Ang);
  

  
  
    gp_Torus Rotated (const gp_Ax1& A1, const Standard_Real Ang) const;
  
    void Scale (const gp_Pnt& P, const Standard_Real S);
  

  
  
    gp_Torus Scaled (const gp_Pnt& P, const Standard_Real S) const;
  
    void Transform (const gp_Trsf& T);
  

  
    gp_Torus Transformed (const gp_Trsf& T) const;
  
    void Translate (const gp_Vec& V);
  

  
  
    gp_Torus Translated (const gp_Vec& V) const;
  
    void Translate (const gp_Pnt& P1, const gp_Pnt& P2);
  

  
    gp_Torus Translated (const gp_Pnt& P1, const gp_Pnt& P2) const;




protected:





private:



  gp_Ax3 pos;
  Standard_Real majorRadius;
  Standard_Real minorRadius;


};

















inline gp_Torus::gp_Torus () :
majorRadius (RealLast()),
minorRadius (RealSmall())
{ }

inline gp_Torus::gp_Torus (const gp_Ax3& A3,
			   const Standard_Real MajorRadius,
			   const Standard_Real MinorRadius) :
			   pos(A3),
			   majorRadius (MajorRadius),
			   minorRadius (MinorRadius)
{
  if (MinorRadius < 0.0 || MajorRadius < 0.0) Standard_ConstructionError::Raise("");;
}

inline void gp_Torus::SetAxis (const gp_Ax1& A1)
{ pos.SetAxis (A1); }

inline void gp_Torus::SetLocation (const gp_Pnt& Loc)
{ pos.SetLocation (Loc); }

inline void gp_Torus::SetMajorRadius (const Standard_Real MajorRadius)
{
  if (MajorRadius - minorRadius <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  majorRadius = MajorRadius;
}

inline void gp_Torus::SetMinorRadius (const Standard_Real MinorRadius)
{
  if (MinorRadius < 0.0 || majorRadius - MinorRadius <= gp::Resolution()) Standard_ConstructionError::Raise("");;
  minorRadius = MinorRadius;
}

inline void gp_Torus::SetPosition (const gp_Ax3& A3)
{ pos = A3; }

inline Standard_Real gp_Torus::Area () const
{ return 4.0 * 3.14159265358979323846 * 3.14159265358979323846 * minorRadius * majorRadius; }

inline void gp_Torus::UReverse()
{ pos.YReverse(); }

inline void gp_Torus::VReverse()
{ pos.ZReverse(); }

inline Standard_Boolean gp_Torus::Direct() const
{ return pos.Direct(); }

inline const gp_Ax1& gp_Torus::Axis () const
{ return pos.Axis(); }

inline const gp_Pnt& gp_Torus::Location () const
{ return pos.Location(); }

inline const gp_Ax3& gp_Torus::Position () const
{ return pos; }

inline Standard_Real gp_Torus::MajorRadius () const
{ return majorRadius; }

inline Standard_Real gp_Torus::MinorRadius () const
{ return minorRadius; }

inline Standard_Real gp_Torus::Volume () const
{ return (3.14159265358979323846 * minorRadius * minorRadius) * (2.0 * 3.14159265358979323846 * majorRadius); }

inline gp_Ax1 gp_Torus::XAxis () const
{ return gp_Ax1(pos.Location(), pos.XDirection()); }

inline gp_Ax1 gp_Torus::YAxis () const
{ return gp_Ax1(pos.Location(), pos.YDirection()); }

inline void gp_Torus::Rotate (const gp_Ax1& A1,
			      const Standard_Real Ang)
{ pos.Rotate (A1, Ang); }

inline gp_Torus gp_Torus::Rotated (const gp_Ax1& A1,
				   const Standard_Real Ang) const
{
  gp_Torus C = *this;
  C.pos.Rotate (A1, Ang);
  return C;
}

inline void gp_Torus::Scale (const gp_Pnt& P,
			     const Standard_Real S)
{
  pos.Scale (P, S);      
  Standard_Real s = S;
  if (s < 0) s = - s;
  majorRadius *= s;
  minorRadius *= s;
}

inline gp_Torus gp_Torus::Scaled (const gp_Pnt& P,
				  const Standard_Real S) const
{
  gp_Torus C = *this;
  C.pos.Scale (P, S);
  C.majorRadius *= S;
  if (C.majorRadius < 0) C.majorRadius = - C.majorRadius;
  C.minorRadius *= S;
  if (C.minorRadius < 0) C.minorRadius = - C.minorRadius;
  return C;
}

inline void gp_Torus::Transform (const gp_Trsf& T)
{
  pos.Transform (T);
  Standard_Real t = T.ScaleFactor();
  if(t < 0 ) t = - t;
  minorRadius *= t;
  majorRadius *= t;
}

inline gp_Torus gp_Torus::Transformed (const gp_Trsf& T) const
{
  gp_Torus C = *this;
  C.pos.Transform (T);
  C.majorRadius *= T.ScaleFactor();
  if (C.majorRadius < 0) C.majorRadius = - C.majorRadius;
  C.minorRadius *= T.ScaleFactor();
  if (C.minorRadius < 0) C.minorRadius = - C.minorRadius;
  return C;
}

inline void gp_Torus::Translate (const gp_Vec& V)
{ pos.Translate (V); }

inline gp_Torus gp_Torus::Translated (const gp_Vec& V) const
{
  gp_Torus C = *this;
  C.pos.Translate (V);
  return C;
}

inline void gp_Torus::Translate (const gp_Pnt& P1,
				 const gp_Pnt& P2)
{ pos.Translate (P1, P2); }

inline gp_Torus gp_Torus::Translated (const gp_Pnt& P1,
				      const gp_Pnt& P2) const
{
  gp_Torus C = *this;
  C.pos.Translate (P1, P2);
  return C;
}











class Standard_OutOfRange;
class Standard_NoSuchObject;
class Standard_DomainError;
class Standard_NotImplemented;
class Adaptor3d_Surface;
class gp_Pnt;
class gp_Vec;
class Geom_BezierSurface;
class Geom_BSplineSurface;
class Adaptor3d_HCurve;


class Adaptor3d_HSurface;
class Adaptor3d_HSurface; class Handle_Adaptor3d_HSurface : public opencascade::handle<Adaptor3d_HSurface> { public: Handle_Adaptor3d_HSurface() {} Handle_Adaptor3d_HSurface(opencascade::handle<Adaptor3d_HSurface>&& theHandle) : opencascade::handle<Adaptor3d_HSurface>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Adaptor3d_HSurface,T2>::value>::type> inline Handle_Adaptor3d_HSurface(const opencascade::handle<T2>& theOther) : opencascade::handle<Adaptor3d_HSurface>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <Adaptor3d_HSurface,T2>::value>::type> inline Handle_Adaptor3d_HSurface(const T2* theOther) : opencascade::handle<Adaptor3d_HSurface>(theOther) {} template<typename T> inline Handle_Adaptor3d_HSurface& operator=(T theOther) { opencascade::handle<Adaptor3d_HSurface>::operator=(theOther); return *this; } };








class Adaptor3d_HSurface : public MMgt_TShared
{

public:

  
  
  __declspec( dllexport ) virtual const Adaptor3d_Surface& Surface() const = 0;
  
    Standard_Real FirstUParameter() const;
  
    Standard_Real LastUParameter() const;
  
    Standard_Real FirstVParameter() const;
  
    Standard_Real LastVParameter() const;
  
    GeomAbs_Shape UContinuity() const;
  
    GeomAbs_Shape VContinuity() const;
  
    Standard_Integer NbUIntervals (const GeomAbs_Shape S) const;
  
    Standard_Integer NbVIntervals (const GeomAbs_Shape S) const;
  
    void UIntervals (TColStd_Array1OfReal& T, const GeomAbs_Shape S) const;
  
    void VIntervals (TColStd_Array1OfReal& T, const GeomAbs_Shape S) const;
  
    opencascade::handle<Adaptor3d_HSurface> UTrim (const Standard_Real First, const Standard_Real Last, const Standard_Real Tol) const;
  
    opencascade::handle<Adaptor3d_HSurface> VTrim (const Standard_Real First, const Standard_Real Last, const Standard_Real Tol) const;
  
    Standard_Boolean IsUClosed() const;
  
    Standard_Boolean IsVClosed() const;
  
    Standard_Boolean IsUPeriodic() const;
  
    Standard_Real UPeriod() const;
  
    Standard_Boolean IsVPeriodic() const;
  
    Standard_Real VPeriod() const;
  
    gp_Pnt Value (const Standard_Real U, const Standard_Real V) const;
  
    void D0 (const Standard_Real U, const Standard_Real V, gp_Pnt& P) const;
  
    void D1 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V) const;
  
    void D2 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV) const;
  
    void D3 (const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV, gp_Vec& D3U, gp_Vec& D3V, gp_Vec& D3UUV, gp_Vec& D3UVV) const;
  
    gp_Vec DN (const Standard_Real U, const Standard_Real V, const Standard_Integer Nu, const Standard_Integer Nv) const;
  
    Standard_Real UResolution (const Standard_Real R3d) const;
  
    Standard_Real VResolution (const Standard_Real R3d) const;
  
    GeomAbs_SurfaceType GetType() const;
  
    gp_Pln Plane() const;
  
    gp_Cylinder Cylinder() const;
  
    gp_Cone Cone() const;
  
    gp_Sphere Sphere() const;
  
    gp_Torus Torus() const;
  
    Standard_Integer UDegree() const;
  
    Standard_Integer NbUPoles() const;
  
    Standard_Integer VDegree() const;
  
    Standard_Integer NbVPoles() const;
  
    Standard_Integer NbUKnots() const;
  
    Standard_Integer NbVKnots() const;
  
    Standard_Boolean IsURational() const;
  
    Standard_Boolean IsVRational() const;
  
    opencascade::handle<Geom_BezierSurface> Bezier() const;
  
    opencascade::handle<Geom_BSplineSurface> BSpline() const;
  
    gp_Ax1 AxeOfRevolution() const;
  
    gp_Dir Direction() const;
  
    opencascade::handle<Adaptor3d_HCurve> BasisCurve() const;
  
    opencascade::handle<Adaptor3d_HSurface> BasisSurface() const;
  
    Standard_Real OffsetValue() const;




  public: typedef MMgt_TShared base_type; static const char* get_type_name () { return "Adaptor3d_HSurface"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:




private:




};























inline Standard_Real Adaptor3d_HSurface::FirstUParameter() const 
{
  return Surface().FirstUParameter();
}






 inline Standard_Real Adaptor3d_HSurface::LastUParameter() const 
{
  return Surface().LastUParameter();
}






 inline Standard_Real Adaptor3d_HSurface::FirstVParameter() const 
{
  return Surface().FirstVParameter();
}






 inline Standard_Real Adaptor3d_HSurface::LastVParameter() const 
{
  return Surface().LastVParameter();
}






 inline GeomAbs_Shape Adaptor3d_HSurface::UContinuity() const 
{
  return Surface().UContinuity();
}






 inline GeomAbs_Shape Adaptor3d_HSurface::VContinuity() const 
{
  return Surface().VContinuity();
}






 inline Standard_Integer Adaptor3d_HSurface::NbUIntervals(const GeomAbs_Shape S) const 
{
  return Surface().NbUIntervals(S);
}






 inline Standard_Integer Adaptor3d_HSurface::NbVIntervals(const GeomAbs_Shape S) const 
{
  return Surface().NbVIntervals(S);
}






 inline void Adaptor3d_HSurface::UIntervals(TColStd_Array1OfReal& T,
				     const GeomAbs_Shape   S) const 
{
  Surface().UIntervals(T,S);
}






 inline void Adaptor3d_HSurface::VIntervals(TColStd_Array1OfReal& T,
				     const GeomAbs_Shape   S) const 
{
  Surface().VIntervals(T, S);
}






inline opencascade::handle<Adaptor3d_HSurface> Adaptor3d_HSurface::UTrim
(const Standard_Real First, 
 const Standard_Real Last, 
 const Standard_Real Tol) const 
{
  return Surface().UTrim(First,Last,Tol);
}







inline opencascade::handle<Adaptor3d_HSurface> Adaptor3d_HSurface::VTrim
(const Standard_Real First, 
 const Standard_Real Last, 
 const Standard_Real Tol) const 
{
  return Surface().VTrim(First,Last,Tol);
}







 inline Standard_Boolean Adaptor3d_HSurface::IsUClosed() const 
{
  return Surface().IsUClosed();
}






 inline Standard_Boolean Adaptor3d_HSurface::IsVClosed() const 
{
  return Surface().IsVClosed();
}






 inline Standard_Boolean Adaptor3d_HSurface::IsUPeriodic() const 
{
  return Surface().IsUPeriodic();
}






 inline Standard_Real Adaptor3d_HSurface::UPeriod() const 
{
  return Surface().UPeriod();
}






 inline Standard_Boolean Adaptor3d_HSurface::IsVPeriodic() const 
{
  return Surface().IsVPeriodic();
}






 inline Standard_Real Adaptor3d_HSurface::VPeriod() const 
{
  return Surface().VPeriod();
}






 inline gp_Pnt Adaptor3d_HSurface::Value(const Standard_Real U, const Standard_Real V) const 
{
  return Surface().Value(U,V);
}






 inline void Adaptor3d_HSurface::D0(const Standard_Real U, const Standard_Real V, gp_Pnt& P) const 
{
  Surface().D0(U,V,P);
}






 inline void Adaptor3d_HSurface::D1(const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V) const 
{
  Surface().D1(U,V,P,D1U,D1V);
}






 inline void Adaptor3d_HSurface::D2(const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV) const 
{
  Surface().D2(U,V,P,D1U,D1V,D2U,D2V,D2UV);
}






 inline void Adaptor3d_HSurface::D3(const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV, gp_Vec& D3U, gp_Vec& D3V, gp_Vec& D3UUV, gp_Vec& D3UVV) const 
{
  Surface().D3(U,V,P,D1U,D1V,D2U,D2V,D2UV,D3U,D3V,D3UUV,D3UVV);
}






 inline gp_Vec Adaptor3d_HSurface::DN(const Standard_Real U, const Standard_Real V, const Standard_Integer Nu, const Standard_Integer Nv) const 
{
  return Surface().DN(U,V,Nu,Nv);
}






 inline Standard_Real Adaptor3d_HSurface::UResolution(const Standard_Real R3d) const 
{
  return Surface().UResolution(R3d);
}






 inline Standard_Real Adaptor3d_HSurface::VResolution(const Standard_Real R3d) const 
{
  return Surface().VResolution(R3d);
}






 inline GeomAbs_SurfaceType Adaptor3d_HSurface::GetType() const 
{
  return Surface().GetType();
}






 inline gp_Pln Adaptor3d_HSurface::Plane() const 
{
  return Surface().Plane();
}






 inline gp_Cylinder Adaptor3d_HSurface::Cylinder() const 
{
  return Surface().Cylinder();
}






 inline gp_Cone Adaptor3d_HSurface::Cone() const 
{
  return Surface().Cone();
}






 inline gp_Sphere Adaptor3d_HSurface::Sphere() const 
{
  return Surface().Sphere();
}






 inline gp_Torus Adaptor3d_HSurface::Torus() const 
{
  return Surface().Torus();
}





inline Standard_Integer Adaptor3d_HSurface::UDegree() const 
{
  return Surface().UDegree();
}





inline Standard_Integer Adaptor3d_HSurface::NbUPoles() const 
{
  return Surface().NbUPoles();
}





inline Standard_Integer Adaptor3d_HSurface::VDegree() const 
{
  return Surface().VDegree();
}





inline Standard_Integer Adaptor3d_HSurface::NbVPoles() const 
{
  return Surface().NbVPoles();
}





inline Standard_Integer Adaptor3d_HSurface::NbUKnots() const 
{
  return Surface().NbUKnots();
}





inline Standard_Integer Adaptor3d_HSurface::NbVKnots() const 
{
  return Surface().NbVKnots();
}





inline Standard_Boolean Adaptor3d_HSurface::IsURational() const 
{
  return Surface().IsURational();
}





inline Standard_Boolean  Adaptor3d_HSurface::IsVRational() const 
{
  return Surface().IsVRational();
}





 inline opencascade::handle<Geom_BezierSurface> Adaptor3d_HSurface::Bezier() const 
{
  return Surface().Bezier();
}






 inline opencascade::handle<Geom_BSplineSurface> Adaptor3d_HSurface::BSpline() const 
{
  return Surface().BSpline();
}






 inline gp_Ax1 Adaptor3d_HSurface::AxeOfRevolution() const 
{
  return Surface().AxeOfRevolution();
}






 inline gp_Dir Adaptor3d_HSurface::Direction() const 
{
  return Surface().Direction();
}






 inline opencascade::handle<Adaptor3d_HCurve> Adaptor3d_HSurface::BasisCurve() const 
{
  return Surface().BasisCurve();
}






 inline opencascade::handle<Adaptor3d_HSurface> Adaptor3d_HSurface::BasisSurface() const 
{
  return Surface().BasisSurface();
}






 inline Standard_Real Adaptor3d_HSurface::OffsetValue() const 
{
  return Surface().OffsetValue();
}








class Standard_OutOfRange;
class Standard_NoSuchObject;
class Standard_DomainError;
class BRepAdaptor_Surface;
class Adaptor3d_Surface;


class BRepAdaptor_HSurface;
class BRepAdaptor_HSurface; class Handle_BRepAdaptor_HSurface : public opencascade::handle<BRepAdaptor_HSurface> { public: Handle_BRepAdaptor_HSurface() {} Handle_BRepAdaptor_HSurface(opencascade::handle<BRepAdaptor_HSurface>&& theHandle) : opencascade::handle<BRepAdaptor_HSurface>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BRepAdaptor_HSurface,T2>::value>::type> inline Handle_BRepAdaptor_HSurface(const opencascade::handle<T2>& theOther) : opencascade::handle<BRepAdaptor_HSurface>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BRepAdaptor_HSurface,T2>::value>::type> inline Handle_BRepAdaptor_HSurface(const T2* theOther) : opencascade::handle<BRepAdaptor_HSurface>(theOther) {} template<typename T> inline Handle_BRepAdaptor_HSurface& operator=(T theOther) { opencascade::handle<BRepAdaptor_HSurface>::operator=(theOther); return *this; } };


class BRepAdaptor_HSurface : public Adaptor3d_HSurface
{

public:

  
  
  __declspec( dllexport ) BRepAdaptor_HSurface();
  
  
  __declspec( dllexport ) BRepAdaptor_HSurface(const BRepAdaptor_Surface& S);
  
  
  __declspec( dllexport ) void Set (const BRepAdaptor_Surface& S);
  
  
  
  __declspec( dllexport ) const Adaptor3d_Surface& Surface() const override;
  
  
    BRepAdaptor_Surface& ChangeSurface();




  public: typedef Adaptor3d_HSurface base_type; static const char* get_type_name () { return "BRepAdaptor_HSurface"; } static const opencascade::handle<Standard_Type>& get_type_descriptor () { return Standard_Type::Instance<BRepAdaptor_HSurface>(); } virtual const opencascade::handle<Standard_Type>& DynamicType() const override { return BRepAdaptor_HSurface::get_type_descriptor(); }

protected:


  BRepAdaptor_Surface mySurf;


private:




};
























inline BRepAdaptor_Surface& BRepAdaptor_HSurface::ChangeSurface()
{
  return mySurf;
}
















class Poly_Triangulation;
class TopoDS_Face;
class TopoDS_Edge;
class Bnd_Box;
class TopoDS_Vertex;
class gp_XY;
class gp_Pnt2d;

class BRepMesh_ShapeTool
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }
  
  
  
  __declspec( dllexport ) static Standard_Real MaxFaceTolerance(
    const TopoDS_Face& theFace);

  
  
  
  
  __declspec( dllexport ) static void BoxMaxDimension(const Bnd_Box& theBox,
                                              Standard_Real& theMaxDimension);

  
  
  
  
  
  
  
  __declspec( dllexport ) static Standard_Real RelativeEdgeDeflection(
    const TopoDS_Edge&  theEdge,
    const Standard_Real theDeflection,
    const Standard_Real theMaxShapeSize,
    Standard_Real&      theAdjustmentCoefficient);

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) static gp_XY FindUV(
    const Standard_Integer                theIndexOfPnt3d,
    const gp_Pnt2d&                       thePnt2d,
    const Standard_Real                   theMinDistance,
    const opencascade::handle<BRepMesh_FaceAttribute>& theFaceAttribute);

  
  
  
  __declspec( dllexport ) static void AddInFace(
    const TopoDS_Face&          theFace,
    opencascade::handle<Poly_Triangulation>& theTriangulation);

  
  
  __declspec( dllexport ) static void NullifyFace(const TopoDS_Face& theFace);

  
  
  
  
  __declspec( dllexport ) static void NullifyEdge(
    const TopoDS_Edge&                theEdge,
    const opencascade::handle<Poly_Triangulation>& theTriangulation,
    const TopLoc_Location&            theLocation);

  
  
  
  
  
  __declspec( dllexport ) static void UpdateEdge(
    const TopoDS_Edge&                         theEdge,
    const opencascade::handle<Poly_PolygonOnTriangulation>& thePolygon,
    const opencascade::handle<Poly_Triangulation>&          theTriangulation,
    const TopLoc_Location&                     theLocation);

  
  
  
  
  
  
  
  
  __declspec( dllexport ) static void UpdateEdge(
    const TopoDS_Edge&                         theEdge,
    const opencascade::handle<Poly_PolygonOnTriangulation>& thePolygon1,
    const opencascade::handle<Poly_PolygonOnTriangulation>& thePolygon2,
    const opencascade::handle<Poly_Triangulation>&          theTriangulation,
    const TopLoc_Location&                     theLocation);

  
  
  
  __declspec( dllexport ) static gp_Pnt UseLocation(const gp_Pnt&          thePnt,
                                            const TopLoc_Location& theLoc);

  
  
  
  
  
  __declspec( dllexport ) static Standard_Boolean IsDegenerated(
    const TopoDS_Edge& theEdge,
    const TopoDS_Face& theFace);
};






































class TopoDS_Vertex  : public TopoDS_Shape
{
public:

  void* operator new (size_t theSize) { return Standard::Allocate (theSize); } void operator delete (void* theAddress) { Standard::Free (theAddress); } void* operator new[] (size_t theSize) { return Standard::Allocate (theSize); } void operator delete[] (void* theAddress) { Standard::Free (theAddress); } void* operator new (size_t, void* theAddress) { return theAddress; } void operator delete (void*, void*) { }

  
  
    TopoDS_Vertex();




protected:





private:





};
























inline TopoDS_Vertex::TopoDS_Vertex()
{
}

































typedef NCollection_IndexedDataMap<TopoDS_Shape,TopTools_ListOfShape,TopTools_ShapeMapHasher> TopTools_IndexedDataMapOfShapeListOfShape;





class BRepMesh_DataStructureOfDelaun;
class Bnd_Box;
class TopoDS_Shape;
class TopoDS_Face;
class TopoDS_Edge;
class Geom2dAdaptor_HCurve;
class BRepAdaptor_HSurface;
class BRepMesh_Edge;
class BRepMesh_Vertex;
class gp_Pnt;
class BRepMesh_FaceAttribute;




class BRepMesh_FastDiscret : public Standard_Transient
{
public:


  
  struct Parameters {

    
    Parameters()
      :
     Angle(0.1),
     Deflection(0.001),
     MinSize(Precision::Confusion()),
     InParallel(false),
     Relative(false),
     AdaptiveMin(false),
     InternalVerticesMode(true),
     ControlSurfaceDeflection(true)
     {
     }
    
    
    Standard_Real                                    Angle;
    
    
    Standard_Real                                    Deflection;  

    
    Standard_Real                                    MinSize; 

    
    Standard_Boolean                                 InParallel; 

    
    
    
    
    Standard_Boolean                                 Relative;

    
    
    
    
    Standard_Boolean                                 AdaptiveMin;

    
    
    Standard_Boolean                                 InternalVerticesMode;

    
    
    Standard_Boolean                                 ControlSurfaceDeflection;
  };

public:
  
  
  
  
  
  
  
  __declspec( dllexport ) BRepMesh_FastDiscret (const Bnd_Box& B,
                                        const Parameters& theParams);

  
  __declspec( dllexport ) void Perform(const TopoDS_Shape& shape);

  
  
  
  __declspec( dllexport ) Standard_Integer Add(const TopoDS_Face& face);

  
  
  
  __declspec( dllexport ) void Process(const TopoDS_Face& face) const;

  void operator () (const TopoDS_Face& face) const
  {
    Process(face);
  }
  
  
  inline const Parameters& MeshParameters() const
  {
    return myParameters;
  }

  
  inline Parameters& ChangeMeshParameters()
  {
    return myParameters;
  }
    
  
  __declspec( dllexport ) void InitSharedFaces(const TopoDS_Shape& theShape);

  inline const TopTools_IndexedDataMapOfShapeListOfShape& SharedFaces() const
  {
    return mySharedFaces;
  }

  
  
  
  
  
  __declspec( dllexport ) Standard_Boolean GetFaceAttribute (
    const TopoDS_Face&              theFace, 
    opencascade::handle<BRepMesh_FaceAttribute>& theAttribute,
    const Standard_Boolean          isForceCreate = false) const;

  
  __declspec( dllexport ) void RemoveFaceAttribute( const TopoDS_Face& theFace );

  
  inline Standard_Integer NbBoundaryPoints() const
  {
    return myBoundaryPoints->Extent();
  }

  public: typedef Standard_Transient base_type; static const char* get_type_name () { return "BRepMesh_FastDiscret"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

private:

  
  class TopoDSVExplorer
  {
  public:
    TopoDSVExplorer(
      const TopoDS_Vertex&   theVertex,
      const Standard_Boolean isSameUV,
      const TopoDS_Vertex&   theSameVertex)
      : myVertex(theVertex),
        myIsSameUV(isSameUV),
        mySameVertex(theSameVertex)
    {
    }
    virtual ~TopoDSVExplorer() {
    }
    const TopoDS_Vertex& Vertex() const
    {
      return myVertex;
    }

    Standard_Boolean IsSameUV() const
    {
      return myIsSameUV;
    }

    const TopoDS_Vertex& SameVertex() const
    {
      return mySameVertex;
    }

    virtual gp_Pnt Point() const
    {
      return BRep_Tool::Pnt(myVertex);
    }

  private:

    void operator =(const TopoDSVExplorer& )
    {
    }

  private:
    const TopoDS_Vertex& myVertex;
    Standard_Boolean     myIsSameUV;
    const TopoDS_Vertex& mySameVertex;
  };


  
  class PolyVExplorer : public TopoDSVExplorer
  {
  public:
    PolyVExplorer(
      const TopoDS_Vertex&      theVertex,
      const Standard_Boolean    isSameUV,
      const TopoDS_Vertex&      theSameVertex,
      const Standard_Integer    theVertexIndex,
      const TColgp_Array1OfPnt& thePolygon,
      const TopLoc_Location&    theLoc)
      : TopoDSVExplorer(theVertex, isSameUV, theSameVertex),
        myVertexIndex(theVertexIndex),
        myPolygon(thePolygon),
        myLoc(theLoc)
    {
    }

    virtual gp_Pnt Point() const
    {
      return BRepMesh_ShapeTool::UseLocation(myPolygon(myVertexIndex), myLoc);
    }

  private:

    void operator =(const PolyVExplorer& )
    {
    }

  private:
    Standard_Integer          myVertexIndex;
    const TColgp_Array1OfPnt& myPolygon;
    const TopLoc_Location     myLoc;
  };

  
  
  struct EdgeAttributes
  {
    TopoDS_Vertex                       FirstVertex;
    TopoDS_Vertex                       LastVertex;

    Standard_Real                       FirstParam;
    Standard_Real                       LastParam;

    gp_Pnt2d                            FirstUV;
    gp_Pnt2d                            LastUV;

    Standard_Real                       Deflection;
    Standard_Boolean                    IsSameUV;

    NCollection_Handle<TopoDSVExplorer> FirstVExtractor;
    NCollection_Handle<TopoDSVExplorer> LastVExtractor;
  };

  
  
  Standard_Boolean getEdgeAttributes(
    const TopoDS_Edge&  theEdge,
    const opencascade::handle<Geom2dAdaptor_HCurve>& thePCurve,
    const Standard_Real theDefEdge,
    EdgeAttributes&     theAttributes) const;

  
  
  void registerEdgeVertices(
    EdgeAttributes&   theAttributes,
    Standard_Integer& ipf,
    Standard_Integer& ivf, 
    Standard_Integer& isvf,
    Standard_Integer& ipl,
    Standard_Integer& ivl,
    Standard_Integer& isvl);

  
  
  void add(const TopoDS_Edge&  theEdge,
           const opencascade::handle<Geom2dAdaptor_HCurve>& theCurve2D,
           const Standard_Real theEdgeDeflection);

  
  
  
  
  void update(
    const TopoDS_Edge&          theEdge,
    const opencascade::handle<Geom2dAdaptor_HCurve>& theCurve2D,
    const Standard_Real         theEdgeDeflection,
    EdgeAttributes&             theAttributes);

  
  
  
  
  
  void storePolygon(
    const TopoDS_Edge&                         theEdge,
    opencascade::handle<Poly_PolygonOnTriangulation>&       thePolygon,
    const Standard_Real                        theDeflection);

  
  
  
  
  
  void storePolygonSharedData(
    const TopoDS_Edge&                         theEdge,
    opencascade::handle<Poly_PolygonOnTriangulation>&       thePolygon,
    const Standard_Real                        theDeflection);

  
  void resetDataStructure();

private:

  TopoDS_Face                                      myFace;

  BRepMesh::DMapOfShapePairOfPolygon               myEdges;
  mutable BRepMesh::DMapOfFaceAttribute            myAttributes;
  TopTools_DataMapOfShapeReal                      myMapdefle;

  
  BRepMesh::HDMapOfVertexInteger                   myBoundaryVertices;
  BRepMesh::HDMapOfIntegerPnt                      myBoundaryPoints;

  
  opencascade::handle<BRepMesh_FaceAttribute>                   myAttribute;
  TopTools_IndexedDataMapOfShapeListOfShape        mySharedFaces;

  Parameters                                       myParameters;

  Standard_Real                                    myDtotale;
};

class BRepMesh_FastDiscret; class Handle_BRepMesh_FastDiscret : public opencascade::handle<BRepMesh_FastDiscret> { public: Handle_BRepMesh_FastDiscret() {} Handle_BRepMesh_FastDiscret(opencascade::handle<BRepMesh_FastDiscret>&& theHandle) : opencascade::handle<BRepMesh_FastDiscret>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BRepMesh_FastDiscret,T2>::value>::type> inline Handle_BRepMesh_FastDiscret(const opencascade::handle<T2>& theOther) : opencascade::handle<BRepMesh_FastDiscret>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BRepMesh_FastDiscret,T2>::value>::type> inline Handle_BRepMesh_FastDiscret(const T2* theOther) : opencascade::handle<BRepMesh_FastDiscret>(theOther) {} template<typename T> inline Handle_BRepMesh_FastDiscret& operator=(T theOther) { opencascade::handle<BRepMesh_FastDiscret>::operator=(theOther); return *this; } };



























typedef NCollection_Map<TopoDS_Shape,TopTools_ShapeMapHasher> TopTools_MapOfShape;
typedef NCollection_Map<TopoDS_Shape,TopTools_ShapeMapHasher>::Iterator TopTools_MapIteratorOfMapOfShape;





























class BRepMesh_DiscretRoot : public Standard_Transient
{
public:
  
  
  __declspec( dllexport ) virtual ~BRepMesh_DiscretRoot();

  
  inline void SetShape(const TopoDS_Shape& theShape)
  {
    myShape = theShape;
  }
  
  inline const TopoDS_Shape& Shape() const
  {
    return myShape;
  }
  
  
  inline Standard_Boolean IsDone() const
  {
    return myIsDone;
  }

  
  __declspec( dllexport ) virtual void Perform() = 0;


  public: typedef Standard_Transient base_type; static const char* get_type_name () { return "BRepMesh_DiscretRoot"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:
  
  
  __declspec( dllexport ) BRepMesh_DiscretRoot();
  
  
  inline void setDone()
  {
    myIsDone = true;
  }
  
  
  inline void setNotDone()
  {
    myIsDone = false;
  }
  
  __declspec( dllexport ) virtual void init();

  TopoDS_Shape      myShape;
  Standard_Boolean  myIsDone;
};

class BRepMesh_DiscretRoot; class Handle_BRepMesh_DiscretRoot : public opencascade::handle<BRepMesh_DiscretRoot> { public: Handle_BRepMesh_DiscretRoot() {} Handle_BRepMesh_DiscretRoot(opencascade::handle<BRepMesh_DiscretRoot>&& theHandle) : opencascade::handle<BRepMesh_DiscretRoot>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BRepMesh_DiscretRoot,T2>::value>::type> inline Handle_BRepMesh_DiscretRoot(const opencascade::handle<T2>& theOther) : opencascade::handle<BRepMesh_DiscretRoot>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BRepMesh_DiscretRoot,T2>::value>::type> inline Handle_BRepMesh_DiscretRoot(const T2* theOther) : opencascade::handle<BRepMesh_DiscretRoot>(theOther) {} template<typename T> inline Handle_BRepMesh_DiscretRoot& operator=(T theOther) { opencascade::handle<BRepMesh_DiscretRoot>::operator=(theOther); return *this; } };







class Poly_Triangulation;
class TopoDS_Shape;
class TopoDS_Edge;
class TopoDS_Face;



class BRepMesh_IncrementalMesh : public BRepMesh_DiscretRoot
{
public: 

  
  __declspec( dllexport ) BRepMesh_IncrementalMesh();

  
  __declspec( dllexport ) virtual ~BRepMesh_IncrementalMesh();

  
  
  
  
  
  
  
  
  
  __declspec( dllexport ) BRepMesh_IncrementalMesh(
    const TopoDS_Shape&    theShape,
    const Standard_Real    theLinDeflection,
    const Standard_Boolean isRelative = false,
    const Standard_Real    theAngDeflection = 0.5,
    const Standard_Boolean isInParallel = false,
    const Standard_Boolean adaptiveMin = false);  

  
  
  
  
  __declspec( dllexport ) BRepMesh_IncrementalMesh (const TopoDS_Shape& theShape,
                                            const BRepMesh_FastDiscret::Parameters& theParameters);

  
  __declspec( dllexport ) virtual void Perform() override;
  
public: 

  
  inline const BRepMesh_FastDiscret::Parameters& Parameters() const
  {
    return myParameters;
  }

  
  inline BRepMesh_FastDiscret::Parameters& ChangeParameters()
  {
    return myParameters;
  }
  
  
  inline Standard_Boolean IsModified() const
  {
    return myModified;
  }
  
  
  inline Standard_Integer GetStatusFlags() const
  {
    return myStatus;
  }
  

public: 

  
  
  
  
  
  
  __declspec( dllexport ) static Standard_Integer Discret(const TopoDS_Shape&    theShape,
                                                  const Standard_Real    theLinDeflection,
                                                  const Standard_Real    theAngDeflection,
                                                  BRepMesh_DiscretRoot* &theAlgo);
  
  
  
  __declspec( dllexport ) static Standard_Boolean IsParallelDefault();
  
  
  
  __declspec( dllexport ) static void SetParallelDefault(const Standard_Boolean isInParallel);

  public: typedef BRepMesh_DiscretRoot base_type; static const char* get_type_name () { return "BRepMesh_IncrementalMesh"; } __declspec( dllexport ) static const opencascade::handle<Standard_Type>& get_type_descriptor (); __declspec( dllexport ) virtual const opencascade::handle<Standard_Type>& DynamicType() const override;

protected:

  __declspec( dllexport ) virtual void init() override;

private:

  
  void update();

  
  
  
  
  void update(const TopoDS_Face& theFace);

  
  
  
  void update(const TopoDS_Edge& theEdge);

  
  void collectFaces();

  
  void discretizeFreeEdges();

  
  
  Standard_Real edgeDeflection(const TopoDS_Edge& theEdge);

  
  
  
  
  Standard_Real faceDeflection(const TopoDS_Face& theFace);

  
  
  
  
  
  
  
  
  Standard_Boolean toBeMeshed(const TopoDS_Face&     theFace,
                              const Standard_Boolean isWithCheck);

  
  void commit();

  
  void commitEdges(const TopoDS_Face& theFace);
  
  
  void clear();

protected:

  BRepMesh::DMapOfEdgeListOfTriangulationBool myEdges;
  opencascade::handle<BRepMesh_FastDiscret>                myMesh;
  TopTools_DataMapOfShapeReal                 myEdgeDeflection;
  NCollection_Vector<TopoDS_Face>             myFaces;

  BRepMesh_FastDiscret::Parameters myParameters;

  Standard_Real                               myMaxShapeSize;
  Standard_Boolean                            myModified;
  Standard_Integer                            myStatus;
};

class BRepMesh_IncrementalMesh; class Handle_BRepMesh_IncrementalMesh : public opencascade::handle<BRepMesh_IncrementalMesh> { public: Handle_BRepMesh_IncrementalMesh() {} Handle_BRepMesh_IncrementalMesh(opencascade::handle<BRepMesh_IncrementalMesh>&& theHandle) : opencascade::handle<BRepMesh_IncrementalMesh>(theHandle) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BRepMesh_IncrementalMesh,T2>::value>::type> inline Handle_BRepMesh_IncrementalMesh(const opencascade::handle<T2>& theOther) : opencascade::handle<BRepMesh_IncrementalMesh>(theOther) {} template <class T2, typename = typename std::enable_if <std::is_base_of <BRepMesh_IncrementalMesh,T2>::value>::type> inline Handle_BRepMesh_IncrementalMesh(const T2* theOther) : opencascade::handle<BRepMesh_IncrementalMesh>(theOther) {} template<typename T> inline Handle_BRepMesh_IncrementalMesh& operator=(T theOther) { opencascade::handle<BRepMesh_IncrementalMesh>::operator=(theOther); return *this; } };




using namespace std;

class Mesh;

void append_mesh(vector<gp_Pnt>& vertices, vector<vector<int>>& faces, const opencascade::handle<Poly_Triangulation> triangulation);

void append_mesh(vector<gp_Pnt>& vertices, vector<vector<int>>& faces, const ON_Mesh* mesh);

void append_mesh(vector<gp_Pnt>& vertices, vector<vector<int>>& faces, const Mesh& mesh);

void merge_vertices(vector<gp_Pnt>& vertices, vector<vector<int>>& faces, double eps = 1e-7);

void write_obj(vector<gp_Pnt>& vertices, vector<vector<int>>& faces, const char* file_name);

class Mesh {
public:
	vector<gp_Pnt> v;
	vector<vector<int>> f;
	string name;
	void append_mesh(const opencascade::handle<Poly_Triangulation> triangulation) {
		::append_mesh(v, f, triangulation);
	}

	void append_mesh(const ON_Mesh* mesh) {
		::append_mesh(v, f, mesh);
	}
	void append_mesh(const Mesh& other) {
		::append_mesh(v, f, other);
	}
	void write_obj(const char* file_name) {
		::write_obj(v, f, file_name);
	}

	void merge_vertices() {
		::merge_vertices(v, f);
	}
};

Mesh generate_occt_mesh(const TopoDS_Shape& shape, const BRepMesh_FastDiscret::Parameters& p);


using namespace std;

void append_mesh(vector<gp_Pnt>& vertices, vector<vector<int>>& faces,
	const opencascade::handle<Poly_Triangulation> triangulation) {
	auto n_triangles = triangulation->NbTriangles();
	auto n_nodes = triangulation->NbNodes();
	auto triangles = triangulation->Triangles();
	auto nodes = triangulation->Nodes();

	Standard_Integer i1, i2, i3;

	int offset = vertices.size();
	for (auto i = 1; i <= n_triangles; i++) {
		auto triangle = triangles.Value(i);
		triangle.Get(i1, i2, i3);
		faces.push_back(vector<int>{i1 + offset - 1, i2 + offset - 1, i3 + offset - 1});
	}

	for (auto i = 1; i <= n_nodes; i++) {
		vertices.push_back(nodes.Value(i));
	}
}

void append_mesh(vector<gp_Pnt>& vertices, vector<vector<int>>& faces, const Mesh& mesh) {
	int offset = vertices.size();

	for (auto i = 0; i < mesh.f.size(); i++) {
		auto t = mesh.f[i];
		faces.push_back(vector<int>{t[0] + offset, t[1] + offset, t[2] + offset});
	}

	for (auto i = 0; i < mesh.v.size(); i++) {
		vertices.push_back(mesh.v[i]);
	}
}

void append_mesh(vector<gp_Pnt>& vertices, vector<vector<int>>& faces, const ON_Mesh* mesh) {
	map<int, int> m_index;
	vector<int> used_point;
	int offset = vertices.size();
	for (int j = 0; j < mesh->m_F.Count(); j++) {
		auto face = mesh->m_F[j];
		for (int k = 0; k < 4; k++) {
			auto index = face.vi[k];
			if (m_index.count(index) == 0) {
				m_index[index] = offset + m_index.size();
				used_point.push_back(index);
			}
		}
		if (face.vi[2] == face.vi[3]) {
			vector<int> fi{ m_index[face.vi[0]], m_index[face.vi[1]], m_index[face.vi[2]] };
			faces.push_back(fi);
		}
		else {
			vector<int> f1{ m_index[face.vi[0]], m_index[face.vi[1]], m_index[face.vi[2]] };
			faces.push_back(f1);
			vector<int> f2{ m_index[face.vi[0]], m_index[face.vi[2]], m_index[face.vi[3]] };
			faces.push_back(f2);
		}
	}

	for (int j = 0; j < used_point.size(); j++) {
		auto point = mesh->m_V[used_point[j]];
		gp_Pnt pnt(point.x, point.y, point.z);
		vertices.push_back(pnt);
	}
}

class comp_x {
public:
	comp_x(vector<gp_Pnt>& vertices) :_vertices(vertices) {}
	bool operator()(const int &a, const int &b) {
		if (_vertices[a].X() <= _vertices[b].X())
			return true;
		return false;
	}
private:
	vector<gp_Pnt>& _vertices;
};

class comp_y {
public:
	comp_y(vector<gp_Pnt>& vertices) :_vertices(vertices) {}
	bool operator()(const int &a, const int &b) {
		if (_vertices[a].Y() <= _vertices[b].Y())
			return true;
		return false;
	}
private:
	vector<gp_Pnt>& _vertices;
};

class comp_z {
public:
	comp_z(vector<gp_Pnt>& vertices) :_vertices(vertices) {}
	bool operator()(const int &a, const int &b) {
		if (_vertices[a].Z() <= _vertices[b].Z())
			return true;
		return false;
	}
private:
	vector<gp_Pnt>& _vertices;
};











class sort_for_merge {
public:
	sort_for_merge(vector<gp_Pnt>& vertices,
		vector<int>& vx,
		vector<int>& vy,
		vector<int>& vz)
		:_vertices(vertices), _vx(vx), _vy(vy), _vz(vz) {
		exec();
	}
	vector<int> candidate(int index, double eps) {
		eps = abs(eps);
		set<int> c_x, c_y, c_z;
		auto iter_x = lower_bound(_vx.begin(), _vx.end(), _vertices[index].X(), comp_x(_vertices));;
		auto iter_y = lower_bound(_vy.begin(), _vy.end(), _vertices[index].Y(), comp_y(_vertices));;
		auto iter_z = lower_bound(_vz.begin(), _vz.end(), _vertices[index].Z(), comp_z(_vertices));;
		while (iter_x > _vx.begin() && abs(_vertices[*iter_x].X() - _vertices[index].X())< eps) iter_x--;;
		while (iter_y > _vy.begin() && abs(_vertices[*iter_y].Y() - _vertices[index].Y())< eps) iter_y--;;
		while (iter_z > _vz.begin() && abs(_vertices[*iter_z].Z() - _vertices[index].Z())< eps) iter_z--;;
		while (iter_x < _vx.end() && !(_vertices[*iter_x].X() - _vertices[index].X() > eps)){ if (abs(_vertices[*iter_x].X() - _vertices[index].X()) < eps) { c_x.insert(*iter_x); } iter_x++; };
		while (iter_y < _vy.end() && !(_vertices[*iter_y].Y() - _vertices[index].Y() > eps)){ if (abs(_vertices[*iter_y].Y() - _vertices[index].Y()) < eps) { c_y.insert(*iter_y); } iter_y++; };
		while (iter_z < _vz.end() && !(_vertices[*iter_z].Z() - _vertices[index].Z() > eps)){ if (abs(_vertices[*iter_z].Z() - _vertices[index].Z()) < eps) { c_z.insert(*iter_z); } iter_z++; };
		vector<int> result;
		eps *= eps;
		for (auto i : c_x) {
			if (i != index && c_y.count(i) != 0 && c_x.count(i) != 0) {
				if (_vertices[i].SquareDistance(_vertices[index]) < eps) {
					result.push_back(i);
				}
			}
		}
		return result;
	}
private:
	void exec() {
		_vx.swap(vector<int>(_vertices.size()));
		_vy.swap(vector<int>(_vertices.size()));
		_vz.swap(vector<int>(_vertices.size()));
		for (int i = 0; i < _vertices.size(); i++) {
			_vx[i] = i;
			_vy[i] = i;
			_vz[i] = i;
		}
		sort(_vx.begin(), _vx.end(), comp_x(_vertices));
		sort(_vy.begin(), _vy.end(), comp_y(_vertices));
		sort(_vz.begin(), _vz.end(), comp_z(_vertices));
	}
	vector<gp_Pnt>& _vertices;
	vector<int>& _vx;
	vector<int>& _vy;
	vector<int>& _vz;
};

void merge_vertices(vector<gp_Pnt>& vertices, vector<vector<int>>& faces, double eps) {
	eps *= eps;
	map<int, int> duplicates;
	vector<int> used_id;
	set<int> used_id_set;
	map<int, int> used_id_new;

	vector<int> vx;
	vector<int> vy;
	vector<int> vz;
	sort_for_merge sfm(vertices, vx, vy, vz);

	for (int i = 0; i < vertices.size(); i++) {
		gp_Pnt point = vertices[i];
		if (used_id.size() == 0) {
			used_id.push_back(i);
			used_id_set.insert(i);
			used_id_new[i] = used_id_new.size();
		}
		else {
			bool is_new = true;
			int dup = -1;
			auto candidates = sfm.candidate(i, eps);
			for (auto candidate : candidates) {
				if (used_id_set.count(candidate) != 0) {
					is_new = false;
					dup = candidate;
					break;
				}
			}
			if (is_new) {
				used_id.push_back(i);
				used_id_set.insert(i);
				used_id_new[i] = used_id_new.size();
			}
			else {
				duplicates[i] = dup;
			}
		}
	}

	for (int i = 0; i < faces.size(); i++) {
		for (int j = 0; j < faces[i].size(); j++) {
			int old_id = faces[i][j];
			if (duplicates.count(old_id)) {
				old_id = duplicates[old_id];
			}
			faces[i][j] = used_id_new[old_id];
		}
	}
	for (int i = 0; i < used_id.size(); i++) {
		vertices[used_id_new[used_id[i]]] = vertices[used_id[i]];
	}
	while (vertices.size() > used_id.size()) {
		vertices.pop_back();
	}
}

void write_obj(vector<gp_Pnt>& vertices, vector<vector<int>>& faces, const char* file_name) {
	FILE* f;
	auto error = fopen_s(&f, file_name, "wb");

	char line[1000] = { 0 };

	for (int i = 0; i < vertices.size(); i++) {
		sprintf(line, "v %lf %lf %lf\n\0", vertices[i].XYZ().X(), vertices[i].XYZ().Y(), vertices[i].XYZ().Z());
		fwrite(line, strlen(line), 1, f);
	}

	for (int i = 0; i < faces.size(); i++) {
		sprintf(line, "f %d %d %d\n\0", faces[i][0] + 1, faces[i][1] + 1, faces[i][2] + 1);
		fwrite(line, strlen(line), 1, f);
	}

	fclose(f);
}

Mesh generate_occt_mesh(
	const TopoDS_Shape& shape,
	const BRepMesh_FastDiscret::Parameters& p) {
	Mesh result;

	auto x = BRepMesh_IncrementalMesh(shape, p);
	for (TopExp_Explorer face_exp(shape, TopAbs_FACE); face_exp.More(); face_exp.Next()) {
		TopLoc_Location location;

		auto &face = TopoDS::Face(face_exp.Current());
		auto triangulation = BRep_Tool::Triangulation(face, location);
		if (!triangulation.IsNull()) {
			result.append_mesh(triangulation);
		}
		BRepTools::Clean(face);
	}
	return result;
}
